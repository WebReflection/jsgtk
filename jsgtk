#!/usr/bin/env gjs

(function (Array, Function, BEGINNING) {'use strict';

  /*! MIT Style License

    Copyright (c) 2015 - 2016   Andrea Giammarchi @WebReflection

    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
    THE SOFTWARE.

  */

  const

    // the only way to retrieve GJS global reference
    global = Function('return this')(),

    // to debug all steps, pas --debug
    D = ARGV.some(value => value === '--debug'),
    BUG = D && function () {
      print(Array.prototype.join.call(arguments, ' '));
    },

    // GJS common shortcuts
    gi = imports.gi,
    Gio = gi.Gio,
    GFile = Gio.File,
    GLib = gi.GLib,
    System = imports.system,

    CURRENT_DIR = GLib.get_current_dir(),
    DIR_SEPARATOR = /\//.test(CURRENT_DIR) ? '/' : '\\',
    PROGRAM_DIR = ((exe) => {
      let
        dir = exe.slice(0, -(1 + GLib.path_get_basename(exe).length)),
        path = dir.split(DIR_SEPARATOR)
      ;
      if (path[path.length - 1] === 'bin') {
        path.pop();
        path.push('lib', 'node_modules', 'jsgtk');
        dir = path.join(DIR_SEPARATOR);
      }
      return dir;
    })(GFile.new_for_path(System.programInvocationName).get_path()),

    // commonly used RegExp
    CONSTANT_CASE = /^[A-Z_]+$/,
    PascalCase = /^[A-Z]+[a-z]/,
    UPPERCASE = /[A-Z]+/g,

    // common utilities shortcuts
    create = Object.create,
    getOwnPropertyNames = Object.getOwnPropertyNames,
    getPrototypeOf = Object.getPrototypeOf,
    setPrototypeOf = Object.setPrototypeOf || (function (set) {
      return (t, p) => { set.call(t, p); return t; };
    }(Object.getOwnPropertyDescriptor(Object.prototype, '__proto__').set)),
    toString = Object.prototype.toString,
    trim = String.prototype.trim,

    // list of arbitrary arguments Gtk+ classes initializers
    init = [],

    // MODULES => each of them has different loading logic

    // all core modules, loaded from the distribution folder
    core = [
      'buffer',
      'child_process',
      'console',
      'crypto',
      'events',
      'fs',
      'os',
      'path',
      'process',
      'querystring',
      'stream',
      'timers',
      'util'
    ].reduce(
      (core, id) => Object.defineProperty(core, id, {
        configurable: true,
        get: () => {
          delete core[id];
          return getCoreModule(id);
        }
      }),
      create(null)
    ),

    // all Gtk and GLib loaded in memory via require
    gtk = create(null),

    // all external modules loaded through few filesystem operations
    modules = create(null)

  ;


  // the new(bind.apply(constructor,arguments)) does not work here
  // so per each amount of arguments craete a function like:
  //
  //  let instance = (function () {
  //    return new this(arguments[0]);
  //  }.apply(Constructor, arguments));
  //
  function createInit(l) {
    const a = [];
    for (let i = 0; i < l; i++) a[i] = 'arguments[' + i + ']';
    return (init[l] = Function('return new this(' + a.join(',') + ')'));
  }

  // used to create Gtk constructors instances
  // createInstance.apply(Gtk.Window, [{title: 'Gtk+'}]);
  function createInstance() {
    const l = arguments.length;
    return (init[l] || createInit(l)).apply(this, arguments);
  }

  // create setup objects with python_case properties
  function getTheRightObject(object) {
    return  typeof object === 'object' &&
            object &&
            toString.call(object) === '[object Object]' ?
              toPythonCaseObject(object) : object;
  }

  // debug Gtk arguments
  function giArguments(args) {
    try {
      return JSON.stringify(args);
    } catch(meh) {
      return args;
    }
  }

  // used to transform Case to _case
  function pythonCase($0) {
    return '_' + $0.toLowerCase();
  }

  // transform pcamelCase to python_case
  function toPythonCase(name) {
    return CONSTANT_CASE.test(name) ?
      name : name.replace(UPPERCASE, pythonCase);
  }

  // create new object with python_keys keys
  function toPythonCaseObject(source) {
    const target = {};
    for (let
      c, key,
      a = getOwnPropertyNames(source),
      i = 0; i < a.length; i++
    ) {
      key = a[i];
      target[toPythonCase(key)] = getTheRightObject(source[key]);
    }
    return target;
  }

  // handle results and wrap them
  function wrapResult(result) {
    return typeof result === 'function' ?
      function () {
        const a = [];
        for (let i = 0, l = arguments.length; i < l; i++) {
          a[i] = getTheRightObject(arguments[i]);
        }
        D&&a.length&&BUG('GTK ARGUMENTS', giArguments(a));
        return wrapResult(result.apply(this, a));
      } :
      result;
  }

  // invoked once per module
  function createModule(parent, module) {

    D&&BUG('CREATING', module);

    const
      child = parent[module],
      ns = create(null),
      hasChild = (target, property) => {
        return toPythonCase(property) in child;
      },
      getChild = (target, property, receiver) => {
        D&&BUG('STATIC GET', module + '.' + property);
        switch (true) {
          case PascalCase.test(property):
            return getGtkModule(child, property);
          default:
            return wrapResult(child[toPythonCase(property)]);
        }
      },
      setChild = (target, property, value, receiver) => {
        D&&BUG('STATIC SET', module + '.' + property, value);
        child[toPythonCase(property)] = getGtk(value);
      }
    ;

    switch (true) {
      case PascalCase.test(module):
        switch (typeof child) {
          case 'function':
            // this is what happens when exported classes don't bring
            // any information whatsoever and there's no way to grab
            // all prototype methods or properties. Runtime it is then.
            const
              prototype = child.prototype,
              proxy = new Proxy(getPrototypeOf(prototype), {
                has: function has(parent, property) {
                  D&&BUG('HAS', module + '#' + property);
                  setPrototypeOf(prototype, parent);
                  const result = toPythonCase(property) in prototype;
                  setPrototypeOf(prototype, proxy);
                  return result;
                },
                get: function get(parent, property, receiver) {
                  D&&BUG('GET', module + '#' + property);
                  setPrototypeOf(prototype, parent);
                  const result = receiver[toPythonCase(property)];
                  setPrototypeOf(prototype, proxy);
                  return result;
                },
                set: function set(parent, property, value, receiver) {
                  D&&BUG('SET', module + '#' + property, value);
                  setPrototypeOf(prototype, parent);
                  receiver[toPythonCase(property)] = value;
                  setPrototypeOf(prototype, proxy);
                }
              })
            ;
            setPrototypeOf(prototype, proxy);
            return new Proxy(child, {
              has: hasChild,
              get: getChild,
              set: setChild,
              construct: (child, args) => {
                D&&BUG('NEW(', child.name, giArguments(args), ')');
                return createInstance.apply(child, args);
              }
            });
          case 'object':
            return child && new Proxy(child, {
              has: hasChild,
              get: getChild,
              set: setChild
            });
          default:
            D&&BUG('[WARNING] UNHANDLED PascalCase', property);
            return child;
        }
      default:
        D&&BUG('[WARNING] UNHANDLED', property);
        return child;
    }
  }

  // core modules are loaded from a different, known, path
  function getCoreModule(id) {
    let fd = GFile.new_for_path(getCoreModulePath(id));
    return evaluateModule(core, id, fd.get_path(), fd);
  }
  function getCoreModulePath(module) {
    return [
      PROGRAM_DIR,
      'jsgtk_modules',
      module + '.js'
    ].join(DIR_SEPARATOR);
  }

  // Gtk modules loaded in memory
  function getGtkModule(parent, module) {
    return gtk[module] || (
      gtk[module] = createModule(parent, module)
    );
  }

  // external modules requires more operations
  function getModulesModule(module, dir) {
    let
      fd = getModuleFile(module, dir),
      id = fd.get_path()
    ;
    return evaluateModule(modules, id, id, fd);
  }

  function grabModuleFD(path) {
    let fd = GFile.new_for_path(path);
    if (fd.query_exists(null)) {
      switch (fd.query_file_type(Gio.FileQueryInfoFlags.NONE, null)) {
        case Gio.FileType.REGULAR: return fd;
        case Gio.FileType.DIRECTORY:
          fd = GFile.new_for_path(path + DIR_SEPARATOR + 'package.json');
          if (fd.query_exists(null)) {
            let content = JSON.parse(trim.call(fd.load_contents(null)[1]));
            fd = GFile.new_for_path(path + DIR_SEPARATOR + content.main);
            if (fd.query_exists(null)) return fd;
          } else {
            fd = GFile.new_for_path(path + DIR_SEPARATOR + 'main.js');
            if (fd.query_exists(null)) return fd;
          }
      }
    }
    return null;
  }

  function getModuleFile(path, dir) {
    let fd;
    switch (true) {
      case GLib.path_is_absolute(path):
        fd = grabModuleFD(path);
        if (fd) {
          return fd;
        } else if (path.slice(-3) !== '.js') {
          fd = GFile.new_for_path(path + '.js');
          if (fd.query_exists(null)) return fd;
        }
        throw new Error('unable to find ' + path);
      case '.' === path[0]:
        return getModuleFile(dir + DIR_SEPARATOR + path);
      default:
        let tmp = GFile.new_for_path(dir);
        do {
          fd = grabModuleFD([
            tmp.get_path(), 'node_modules', path
          ].join(DIR_SEPARATOR));
          if (fd) return fd;
        } while((tmp = tmp.get_parent()));
        throw new Error('unable to find ' + path);
    }
  }

  function evaluateModule(nmsp, unique, id, fd) {
    D&&BUG('require(', id, ')');
    const
      dir = id.slice(0, -1 -fd.get_basename().length),
      exports = {},
      module = {exports: exports, id: id}
    ;
    nmsp[unique] = exports;
    Function(
      'require',
      'exports',
      'module',
      '__dirname',
      '__filename',
      ''.replace.call(fd.load_contents(null)[1], /^#![^\n\r]*/, '')
    ).call(
      exports,
      function require(module) {
        return requireWithPath(module, dir);
      },
      exports,
      module,
      dir,
      id
    );
    return (nmsp[unique] = module.exports);
  }

  // the actual require
  function requireWithPath(module, dir) {
    switch (true) {
      case PascalCase.test(module):
        return getGtkModule(gi, module);
      case module in core:
        return core[module];
      default:
        return modules[module] || getModulesModule(module, dir);
    }
  }

  // in order to be able to import common jsgtk utilities
  // within node.js like modules
  imports.searchPath.push([PROGRAM_DIR, 'jsgtk_modules'].join(DIR_SEPARATOR));

  // global normalization
  if (!Object.setPrototypeOf) Object.setPrototypeOf = setPrototypeOf;
  const
    process = core.process,
    console = core.console,
    timers =  core.timers
  ;
  global.process = process;
  global.console = console;
  getOwnPropertyNames(timers).forEach(key => global[key] = timers[key]);

  if (process.argv.length > 1) {
    requireWithPath(process.argv[1], CURRENT_DIR);
  } else {
    if (!ARGV.some((info, i) => {
      if (i && /^-e|--eval$/.test(ARGV[i - 1])) {
        Function(
          'require',
          '__dirname',
          '__filename',
          info
        ).call(
          global,
          function require(module) {
            return requireWithPath(module, CURRENT_DIR);
          },
          CURRENT_DIR,
          '[eval]'
        );
        return true;
      }
      return false;
    })) {
      console.log([
        'Usage: jsgtk [options] script.js [arguments]',
        '       jsgtk --debug script.js [arguments]',
        '       jsgtk (-e|--eval) "console.log(\'runtime\')"',
        '',
        'Documentation can be found at https://github.com/WebReflection/jsgtk'
      ].join('\n'));
    }
  }

}(Array, Function, Date.now()));