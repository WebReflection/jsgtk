(function (exports, gir) {"use strict";
  // WARNING file generated automatically. DO NOT MODIFY
  Object.defineProperties(exports, {
    Atk: {configurable: true, get: () => augment("Atk")},
    Clutter: {configurable: true, get: () => augment("Clutter")},
    Cogl: {configurable: true, get: () => augment("Cogl")},
    CoglPango: {configurable: true, get: () => augment("CoglPango")},
    GLib: {configurable: true, get: () => augment("GLib")},
    GObject: {configurable: true, get: () => augment("GObject")},
    GWeather: {configurable: true, get: () => augment("GWeather")},
    Gck: {configurable: true, get: () => augment("Gck")},
    Gcr: {configurable: true, get: () => augment("Gcr")},
    Gdk: {configurable: true, get: () => augment("Gdk")},
    GdkPixbuf: {configurable: true, get: () => augment("GdkPixbuf")},
    GdkX11: {configurable: true, get: () => augment("GdkX11")},
    Gio: {configurable: true, get: () => augment("Gio")},
    Gst: {configurable: true, get: () => augment("Gst")},
    Gtk: {configurable: true, get: () => augment("Gtk")},
    GtkClutter: {configurable: true, get: () => augment("GtkClutter")},
    GtkSource: {configurable: true, get: () => augment("GtkSource")},
    Notify: {configurable: true, get: () => augment("Notify")},
    Pango: {configurable: true, get: () => augment("Pango")},
    PangoCairo: {configurable: true, get: () => augment("PangoCairo")},
    Secret: {configurable: true, get: () => augment("Secret")},
    Soup: {configurable: true, get: () => augment("Soup")},
    TelepathyGLib: {configurable: true, get: () => augment("TelepathyGLib")},
    cairo: {configurable: true, get: () => augment("cairo")}
  });
  function augment(namespace) {
    let NameSpace = imports.gi[namespace];
    Object.defineProperty(exports, namespace, {value: NameSpace});
    if (gir.hasOwnProperty(namespace)) {
      let info = gir[namespace];
      Object.defineProperties(NameSpace, info.static);
      Object.keys(info.class).forEach((Class) => {
        augmentClass(NameSpace[Class], info.class[Class]);
      });
    }
    return NameSpace;
  }
  function augmentClass(Class, descriptors) {
    Object.defineProperties(Class, descriptors.static);
    Object.defineProperties(Class.prototype, descriptors.prototype);
  }
}(
  this,
  {
    "Atk": {
      "class": {
        "GObjectAccessible": {
          "prototype": {
            "getObject": {
              "value": function () { return this.get_object.apply(this, arguments); }
            }
          },
          "static": {
            "forObject": {
              "value": function () { return this.for_object.apply(this, arguments); }
            }
          }
        },
        "Hyperlink": {
          "prototype": {
            "getEndIndex": {
              "value": function () { return this.get_end_index.apply(this, arguments); }
            },
            "getNAnchors": {
              "value": function () { return this.get_n_anchors.apply(this, arguments); }
            },
            "getObject": {
              "value": function () { return this.get_object.apply(this, arguments); }
            },
            "getStartIndex": {
              "value": function () { return this.get_start_index.apply(this, arguments); }
            },
            "getUri": {
              "value": function () { return this.get_uri.apply(this, arguments); }
            },
            "isInline": {
              "value": function () { return this.is_inline.apply(this, arguments); }
            },
            "isSelectedLink": {
              "value": function () { return this.is_selected_link.apply(this, arguments); }
            },
            "isValid": {
              "value": function () { return this.is_valid.apply(this, arguments); }
            },
            "endIndex": {
              "get": function () { return this.end_index; },
              "set": function (value) { this.end_index = value; }
            },
            "numberOfAnchors": {
              "get": function () { return this.number_of_anchors; },
              "set": function (value) { this.number_of_anchors = value; }
            },
            "selectedLink": {
              "get": function () { return this.selected_link; },
              "set": function (value) { this.selected_link = value; }
            },
            "startIndex": {
              "get": function () { return this.start_index; },
              "set": function (value) { this.start_index = value; }
            }
          },
          "static": {}
        },
        "Misc": {
          "prototype": {
            "threadsEnter": {
              "value": function () { return this.threads_enter.apply(this, arguments); }
            },
            "threadsLeave": {
              "value": function () { return this.threads_leave.apply(this, arguments); }
            }
          },
          "static": {
            "getInstance": {
              "value": function () { return this.get_instance.apply(this, arguments); }
            }
          }
        },
        "NoOpObject": {
          "prototype": {},
          "static": {}
        },
        "NoOpObjectFactory": {
          "prototype": {},
          "static": {}
        },
        "Object": {
          "prototype": {
            "addRelationship": {
              "value": function () { return this.add_relationship.apply(this, arguments); }
            },
            "connectPropertyChangeHandler": {
              "value": function () { return this.connect_property_change_handler.apply(this, arguments); }
            },
            "getAttributes": {
              "value": function () { return this.get_attributes.apply(this, arguments); }
            },
            "getDescription": {
              "value": function () { return this.get_description.apply(this, arguments); }
            },
            "getIndexInParent": {
              "value": function () { return this.get_index_in_parent.apply(this, arguments); }
            },
            "getLayer": {
              "value": function () { return this.get_layer.apply(this, arguments); }
            },
            "getMdiZorder": {
              "value": function () { return this.get_mdi_zorder.apply(this, arguments); }
            },
            "getNAccessibleChildren": {
              "value": function () { return this.get_n_accessible_children.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getObjectLocale": {
              "value": function () { return this.get_object_locale.apply(this, arguments); }
            },
            "getParent": {
              "value": function () { return this.get_parent.apply(this, arguments); }
            },
            "getRole": {
              "value": function () { return this.get_role.apply(this, arguments); }
            },
            "notifyStateChange": {
              "value": function () { return this.notify_state_change.apply(this, arguments); }
            },
            "peekParent": {
              "value": function () { return this.peek_parent.apply(this, arguments); }
            },
            "refAccessibleChild": {
              "value": function () { return this.ref_accessible_child.apply(this, arguments); }
            },
            "refRelationSet": {
              "value": function () { return this.ref_relation_set.apply(this, arguments); }
            },
            "refStateSet": {
              "value": function () { return this.ref_state_set.apply(this, arguments); }
            },
            "removePropertyChangeHandler": {
              "value": function () { return this.remove_property_change_handler.apply(this, arguments); }
            },
            "removeRelationship": {
              "value": function () { return this.remove_relationship.apply(this, arguments); }
            },
            "setDescription": {
              "value": function () { return this.set_description.apply(this, arguments); }
            },
            "setName": {
              "value": function () { return this.set_name.apply(this, arguments); }
            },
            "setParent": {
              "value": function () { return this.set_parent.apply(this, arguments); }
            },
            "setRole": {
              "value": function () { return this.set_role.apply(this, arguments); }
            },
            "accessibleComponentLayer": {
              "get": function () { return this.accessible_component_layer; },
              "set": function (value) { this.accessible_component_layer = value; }
            },
            "accessibleComponentMdiZorder": {
              "get": function () { return this.accessible_component_mdi_zorder; },
              "set": function (value) { this.accessible_component_mdi_zorder = value; }
            },
            "accessibleDescription": {
              "get": function () { return this.accessible_description; },
              "set": function (value) { this.accessible_description = value; }
            },
            "accessibleHypertextNlinks": {
              "get": function () { return this.accessible_hypertext_nlinks; },
              "set": function (value) { this.accessible_hypertext_nlinks = value; }
            },
            "accessibleName": {
              "get": function () { return this.accessible_name; },
              "set": function (value) { this.accessible_name = value; }
            },
            "accessibleParent": {
              "get": function () { return this.accessible_parent; },
              "set": function (value) { this.accessible_parent = value; }
            },
            "accessibleRole": {
              "get": function () { return this.accessible_role; },
              "set": function (value) { this.accessible_role = value; }
            },
            "accessibleTableCaption": {
              "get": function () { return this.accessible_table_caption; },
              "set": function (value) { this.accessible_table_caption = value; }
            },
            "accessibleTableCaptionObject": {
              "get": function () { return this.accessible_table_caption_object; },
              "set": function (value) { this.accessible_table_caption_object = value; }
            },
            "accessibleTableColumnDescription": {
              "get": function () { return this.accessible_table_column_description; },
              "set": function (value) { this.accessible_table_column_description = value; }
            },
            "accessibleTableColumnHeader": {
              "get": function () { return this.accessible_table_column_header; },
              "set": function (value) { this.accessible_table_column_header = value; }
            },
            "accessibleTableRowDescription": {
              "get": function () { return this.accessible_table_row_description; },
              "set": function (value) { this.accessible_table_row_description = value; }
            },
            "accessibleTableRowHeader": {
              "get": function () { return this.accessible_table_row_header; },
              "set": function (value) { this.accessible_table_row_header = value; }
            },
            "accessibleTableSummary": {
              "get": function () { return this.accessible_table_summary; },
              "set": function (value) { this.accessible_table_summary = value; }
            },
            "accessibleValue": {
              "get": function () { return this.accessible_value; },
              "set": function (value) { this.accessible_value = value; }
            }
          },
          "static": {}
        },
        "ObjectFactory": {
          "prototype": {
            "createAccessible": {
              "value": function () { return this.create_accessible.apply(this, arguments); }
            },
            "getAccessibleType": {
              "value": function () { return this.get_accessible_type.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Plug": {
          "prototype": {
            "getId": {
              "value": function () { return this.get_id.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Registry": {
          "prototype": {
            "getFactory": {
              "value": function () { return this.get_factory.apply(this, arguments); }
            },
            "getFactoryType": {
              "value": function () { return this.get_factory_type.apply(this, arguments); }
            },
            "setFactoryType": {
              "value": function () { return this.set_factory_type.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Relation": {
          "prototype": {
            "addTarget": {
              "value": function () { return this.add_target.apply(this, arguments); }
            },
            "getRelationType": {
              "value": function () { return this.get_relation_type.apply(this, arguments); }
            },
            "getTarget": {
              "value": function () { return this.get_target.apply(this, arguments); }
            },
            "removeTarget": {
              "value": function () { return this.remove_target.apply(this, arguments); }
            },
            "relationType": {
              "get": function () { return this.relation_type; },
              "set": function (value) { this.relation_type = value; }
            }
          },
          "static": {}
        },
        "RelationSet": {
          "prototype": {
            "addRelationByType": {
              "value": function () { return this.add_relation_by_type.apply(this, arguments); }
            },
            "containsTarget": {
              "value": function () { return this.contains_target.apply(this, arguments); }
            },
            "getNRelations": {
              "value": function () { return this.get_n_relations.apply(this, arguments); }
            },
            "getRelation": {
              "value": function () { return this.get_relation.apply(this, arguments); }
            },
            "getRelationByType": {
              "value": function () { return this.get_relation_by_type.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Socket": {
          "prototype": {
            "isOccupied": {
              "value": function () { return this.is_occupied.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "StateSet": {
          "prototype": {
            "addState": {
              "value": function () { return this.add_state.apply(this, arguments); }
            },
            "addStates": {
              "value": function () { return this.add_states.apply(this, arguments); }
            },
            "andSets": {
              "value": function () { return this.and_sets.apply(this, arguments); }
            },
            "clearStates": {
              "value": function () { return this.clear_states.apply(this, arguments); }
            },
            "containsState": {
              "value": function () { return this.contains_state.apply(this, arguments); }
            },
            "containsStates": {
              "value": function () { return this.contains_states.apply(this, arguments); }
            },
            "isEmpty": {
              "value": function () { return this.is_empty.apply(this, arguments); }
            },
            "orSets": {
              "value": function () { return this.or_sets.apply(this, arguments); }
            },
            "removeState": {
              "value": function () { return this.remove_state.apply(this, arguments); }
            },
            "xorSets": {
              "value": function () { return this.xor_sets.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Util": {
          "prototype": {},
          "static": {}
        }
      },
      "static": {
        "addFocusTracker": {
          "value": function () { return this.add_focus_tracker.apply(this, arguments); }
        },
        "addGlobalEventListener": {
          "value": function () { return this.add_global_event_listener.apply(this, arguments); }
        },
        "addKeyEventListener": {
          "value": function () { return this.add_key_event_listener.apply(this, arguments); }
        },
        "attributeSetFree": {
          "value": function () { return this.attribute_set_free.apply(this, arguments); }
        },
        "focusTrackerInit": {
          "value": function () { return this.focus_tracker_init.apply(this, arguments); }
        },
        "focusTrackerNotify": {
          "value": function () { return this.focus_tracker_notify.apply(this, arguments); }
        },
        "getBinaryAge": {
          "value": function () { return this.get_binary_age.apply(this, arguments); }
        },
        "getDefaultRegistry": {
          "value": function () { return this.get_default_registry.apply(this, arguments); }
        },
        "getFocusObject": {
          "value": function () { return this.get_focus_object.apply(this, arguments); }
        },
        "getInterfaceAge": {
          "value": function () { return this.get_interface_age.apply(this, arguments); }
        },
        "getMajorVersion": {
          "value": function () { return this.get_major_version.apply(this, arguments); }
        },
        "getMicroVersion": {
          "value": function () { return this.get_micro_version.apply(this, arguments); }
        },
        "getMinorVersion": {
          "value": function () { return this.get_minor_version.apply(this, arguments); }
        },
        "getRoot": {
          "value": function () { return this.get_root.apply(this, arguments); }
        },
        "getToolkitName": {
          "value": function () { return this.get_toolkit_name.apply(this, arguments); }
        },
        "getToolkitVersion": {
          "value": function () { return this.get_toolkit_version.apply(this, arguments); }
        },
        "getVersion": {
          "value": function () { return this.get_version.apply(this, arguments); }
        },
        "relationTypeForName": {
          "value": function () { return this.relation_type_for_name.apply(this, arguments); }
        },
        "relationTypeGetName": {
          "value": function () { return this.relation_type_get_name.apply(this, arguments); }
        },
        "relationTypeRegister": {
          "value": function () { return this.relation_type_register.apply(this, arguments); }
        },
        "removeFocusTracker": {
          "value": function () { return this.remove_focus_tracker.apply(this, arguments); }
        },
        "removeGlobalEventListener": {
          "value": function () { return this.remove_global_event_listener.apply(this, arguments); }
        },
        "removeKeyEventListener": {
          "value": function () { return this.remove_key_event_listener.apply(this, arguments); }
        },
        "roleForName": {
          "value": function () { return this.role_for_name.apply(this, arguments); }
        },
        "roleGetLocalizedName": {
          "value": function () { return this.role_get_localized_name.apply(this, arguments); }
        },
        "roleGetName": {
          "value": function () { return this.role_get_name.apply(this, arguments); }
        },
        "roleRegister": {
          "value": function () { return this.role_register.apply(this, arguments); }
        },
        "stateTypeForName": {
          "value": function () { return this.state_type_for_name.apply(this, arguments); }
        },
        "stateTypeGetName": {
          "value": function () { return this.state_type_get_name.apply(this, arguments); }
        },
        "stateTypeRegister": {
          "value": function () { return this.state_type_register.apply(this, arguments); }
        },
        "textAttributeForName": {
          "value": function () { return this.text_attribute_for_name.apply(this, arguments); }
        },
        "textAttributeGetName": {
          "value": function () { return this.text_attribute_get_name.apply(this, arguments); }
        },
        "textAttributeGetValue": {
          "value": function () { return this.text_attribute_get_value.apply(this, arguments); }
        },
        "textAttributeRegister": {
          "value": function () { return this.text_attribute_register.apply(this, arguments); }
        },
        "textFreeRanges": {
          "value": function () { return this.text_free_ranges.apply(this, arguments); }
        },
        "valueTypeGetLocalizedName": {
          "value": function () { return this.value_type_get_localized_name.apply(this, arguments); }
        },
        "valueTypeGetName": {
          "value": function () { return this.value_type_get_name.apply(this, arguments); }
        }
      }
    },
    "Clutter": {
      "class": {
        "Action": {
          "prototype": {},
          "static": {}
        },
        "Actor": {
          "prototype": {
            "addAction": {
              "value": function () { return this.add_action.apply(this, arguments); }
            },
            "addActionWithName": {
              "value": function () { return this.add_action_with_name.apply(this, arguments); }
            },
            "addChild": {
              "value": function () { return this.add_child.apply(this, arguments); }
            },
            "addConstraint": {
              "value": function () { return this.add_constraint.apply(this, arguments); }
            },
            "addConstraintWithName": {
              "value": function () { return this.add_constraint_with_name.apply(this, arguments); }
            },
            "addEffect": {
              "value": function () { return this.add_effect.apply(this, arguments); }
            },
            "addEffectWithName": {
              "value": function () { return this.add_effect_with_name.apply(this, arguments); }
            },
            "addTransition": {
              "value": function () { return this.add_transition.apply(this, arguments); }
            },
            "allocateAlignFill": {
              "value": function () { return this.allocate_align_fill.apply(this, arguments); }
            },
            "allocateAvailableSize": {
              "value": function () { return this.allocate_available_size.apply(this, arguments); }
            },
            "allocatePreferredSize": {
              "value": function () { return this.allocate_preferred_size.apply(this, arguments); }
            },
            "animateWithAlpha": {
              "value": function () { return this.animate_with_alpha.apply(this, arguments); }
            },
            "animateWithAlphav": {
              "value": function () { return this.animate_with_alphav.apply(this, arguments); }
            },
            "animateWithTimeline": {
              "value": function () { return this.animate_with_timeline.apply(this, arguments); }
            },
            "animateWithTimelinev": {
              "value": function () { return this.animate_with_timelinev.apply(this, arguments); }
            },
            "applyRelativeTransformToPoint": {
              "value": function () { return this.apply_relative_transform_to_point.apply(this, arguments); }
            },
            "applyTransformToPoint": {
              "value": function () { return this.apply_transform_to_point.apply(this, arguments); }
            },
            "bindModel": {
              "value": function () { return this.bind_model.apply(this, arguments); }
            },
            "bindModelWithProperties": {
              "value": function () { return this.bind_model_with_properties.apply(this, arguments); }
            },
            "clearActions": {
              "value": function () { return this.clear_actions.apply(this, arguments); }
            },
            "clearConstraints": {
              "value": function () { return this.clear_constraints.apply(this, arguments); }
            },
            "clearEffects": {
              "value": function () { return this.clear_effects.apply(this, arguments); }
            },
            "continuePaint": {
              "value": function () { return this.continue_paint.apply(this, arguments); }
            },
            "createPangoContext": {
              "value": function () { return this.create_pango_context.apply(this, arguments); }
            },
            "createPangoLayout": {
              "value": function () { return this.create_pango_layout.apply(this, arguments); }
            },
            "destroyAllChildren": {
              "value": function () { return this.destroy_all_children.apply(this, arguments); }
            },
            "detachAnimation": {
              "value": function () { return this.detach_animation.apply(this, arguments); }
            },
            "getAbsAllocationVertices": {
              "value": function () { return this.get_abs_allocation_vertices.apply(this, arguments); }
            },
            "getAccessible": {
              "value": function () { return this.get_accessible.apply(this, arguments); }
            },
            "getAction": {
              "value": function () { return this.get_action.apply(this, arguments); }
            },
            "getActions": {
              "value": function () { return this.get_actions.apply(this, arguments); }
            },
            "getAllocationBox": {
              "value": function () { return this.get_allocation_box.apply(this, arguments); }
            },
            "getAllocationGeometry": {
              "value": function () { return this.get_allocation_geometry.apply(this, arguments); }
            },
            "getAllocationVertices": {
              "value": function () { return this.get_allocation_vertices.apply(this, arguments); }
            },
            "getAnchorPoint": {
              "value": function () { return this.get_anchor_point.apply(this, arguments); }
            },
            "getAnchorPointGravity": {
              "value": function () { return this.get_anchor_point_gravity.apply(this, arguments); }
            },
            "getAnimation": {
              "value": function () { return this.get_animation.apply(this, arguments); }
            },
            "getBackgroundColor": {
              "value": function () { return this.get_background_color.apply(this, arguments); }
            },
            "getChildAtIndex": {
              "value": function () { return this.get_child_at_index.apply(this, arguments); }
            },
            "getChildTransform": {
              "value": function () { return this.get_child_transform.apply(this, arguments); }
            },
            "getChildren": {
              "value": function () { return this.get_children.apply(this, arguments); }
            },
            "getClip": {
              "value": function () { return this.get_clip.apply(this, arguments); }
            },
            "getClipToAllocation": {
              "value": function () { return this.get_clip_to_allocation.apply(this, arguments); }
            },
            "getConstraint": {
              "value": function () { return this.get_constraint.apply(this, arguments); }
            },
            "getConstraints": {
              "value": function () { return this.get_constraints.apply(this, arguments); }
            },
            "getContent": {
              "value": function () { return this.get_content.apply(this, arguments); }
            },
            "getContentBox": {
              "value": function () { return this.get_content_box.apply(this, arguments); }
            },
            "getContentGravity": {
              "value": function () { return this.get_content_gravity.apply(this, arguments); }
            },
            "getContentRepeat": {
              "value": function () { return this.get_content_repeat.apply(this, arguments); }
            },
            "getContentScalingFilters": {
              "value": function () { return this.get_content_scaling_filters.apply(this, arguments); }
            },
            "getDefaultPaintVolume": {
              "value": function () { return this.get_default_paint_volume.apply(this, arguments); }
            },
            "getDepth": {
              "value": function () { return this.get_depth.apply(this, arguments); }
            },
            "getEasingDelay": {
              "value": function () { return this.get_easing_delay.apply(this, arguments); }
            },
            "getEasingDuration": {
              "value": function () { return this.get_easing_duration.apply(this, arguments); }
            },
            "getEasingMode": {
              "value": function () { return this.get_easing_mode.apply(this, arguments); }
            },
            "getEffect": {
              "value": function () { return this.get_effect.apply(this, arguments); }
            },
            "getEffects": {
              "value": function () { return this.get_effects.apply(this, arguments); }
            },
            "getFirstChild": {
              "value": function () { return this.get_first_child.apply(this, arguments); }
            },
            "getFixedPositionSet": {
              "value": function () { return this.get_fixed_position_set.apply(this, arguments); }
            },
            "getFlags": {
              "value": function () { return this.get_flags.apply(this, arguments); }
            },
            "getGeometry": {
              "value": function () { return this.get_geometry.apply(this, arguments); }
            },
            "getGid": {
              "value": function () { return this.get_gid.apply(this, arguments); }
            },
            "getHeight": {
              "value": function () { return this.get_height.apply(this, arguments); }
            },
            "getLastChild": {
              "value": function () { return this.get_last_child.apply(this, arguments); }
            },
            "getLayoutManager": {
              "value": function () { return this.get_layout_manager.apply(this, arguments); }
            },
            "getMargin": {
              "value": function () { return this.get_margin.apply(this, arguments); }
            },
            "getMarginBottom": {
              "value": function () { return this.get_margin_bottom.apply(this, arguments); }
            },
            "getMarginLeft": {
              "value": function () { return this.get_margin_left.apply(this, arguments); }
            },
            "getMarginRight": {
              "value": function () { return this.get_margin_right.apply(this, arguments); }
            },
            "getMarginTop": {
              "value": function () { return this.get_margin_top.apply(this, arguments); }
            },
            "getNChildren": {
              "value": function () { return this.get_n_children.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getNextSibling": {
              "value": function () { return this.get_next_sibling.apply(this, arguments); }
            },
            "getOffscreenRedirect": {
              "value": function () { return this.get_offscreen_redirect.apply(this, arguments); }
            },
            "getOpacity": {
              "value": function () { return this.get_opacity.apply(this, arguments); }
            },
            "getPaintBox": {
              "value": function () { return this.get_paint_box.apply(this, arguments); }
            },
            "getPaintOpacity": {
              "value": function () { return this.get_paint_opacity.apply(this, arguments); }
            },
            "getPaintVisibility": {
              "value": function () { return this.get_paint_visibility.apply(this, arguments); }
            },
            "getPaintVolume": {
              "value": function () { return this.get_paint_volume.apply(this, arguments); }
            },
            "getPangoContext": {
              "value": function () { return this.get_pango_context.apply(this, arguments); }
            },
            "getParent": {
              "value": function () { return this.get_parent.apply(this, arguments); }
            },
            "getPivotPoint": {
              "value": function () { return this.get_pivot_point.apply(this, arguments); }
            },
            "getPivotPointZ": {
              "value": function () { return this.get_pivot_point_z.apply(this, arguments); }
            },
            "getPosition": {
              "value": function () { return this.get_position.apply(this, arguments); }
            },
            "getPreferredHeight": {
              "value": function () { return this.get_preferred_height.apply(this, arguments); }
            },
            "getPreferredSize": {
              "value": function () { return this.get_preferred_size.apply(this, arguments); }
            },
            "getPreferredWidth": {
              "value": function () { return this.get_preferred_width.apply(this, arguments); }
            },
            "getPreviousSibling": {
              "value": function () { return this.get_previous_sibling.apply(this, arguments); }
            },
            "getReactive": {
              "value": function () { return this.get_reactive.apply(this, arguments); }
            },
            "getRequestMode": {
              "value": function () { return this.get_request_mode.apply(this, arguments); }
            },
            "getRotation": {
              "value": function () { return this.get_rotation.apply(this, arguments); }
            },
            "getRotationAngle": {
              "value": function () { return this.get_rotation_angle.apply(this, arguments); }
            },
            "getScale": {
              "value": function () { return this.get_scale.apply(this, arguments); }
            },
            "getScaleCenter": {
              "value": function () { return this.get_scale_center.apply(this, arguments); }
            },
            "getScaleGravity": {
              "value": function () { return this.get_scale_gravity.apply(this, arguments); }
            },
            "getScaleZ": {
              "value": function () { return this.get_scale_z.apply(this, arguments); }
            },
            "getShader": {
              "value": function () { return this.get_shader.apply(this, arguments); }
            },
            "getSize": {
              "value": function () { return this.get_size.apply(this, arguments); }
            },
            "getStage": {
              "value": function () { return this.get_stage.apply(this, arguments); }
            },
            "getTextDirection": {
              "value": function () { return this.get_text_direction.apply(this, arguments); }
            },
            "getTransform": {
              "value": function () { return this.get_transform.apply(this, arguments); }
            },
            "getTransformationMatrix": {
              "value": function () { return this.get_transformation_matrix.apply(this, arguments); }
            },
            "getTransformedPaintVolume": {
              "value": function () { return this.get_transformed_paint_volume.apply(this, arguments); }
            },
            "getTransformedPosition": {
              "value": function () { return this.get_transformed_position.apply(this, arguments); }
            },
            "getTransformedSize": {
              "value": function () { return this.get_transformed_size.apply(this, arguments); }
            },
            "getTransition": {
              "value": function () { return this.get_transition.apply(this, arguments); }
            },
            "getTranslation": {
              "value": function () { return this.get_translation.apply(this, arguments); }
            },
            "getWidth": {
              "value": function () { return this.get_width.apply(this, arguments); }
            },
            "getX": {
              "value": function () { return this.get_x.apply(this, arguments); }
            },
            "getXAlign": {
              "value": function () { return this.get_x_align.apply(this, arguments); }
            },
            "getXExpand": {
              "value": function () { return this.get_x_expand.apply(this, arguments); }
            },
            "getY": {
              "value": function () { return this.get_y.apply(this, arguments); }
            },
            "getYAlign": {
              "value": function () { return this.get_y_align.apply(this, arguments); }
            },
            "getYExpand": {
              "value": function () { return this.get_y_expand.apply(this, arguments); }
            },
            "getZPosition": {
              "value": function () { return this.get_z_position.apply(this, arguments); }
            },
            "getZRotationGravity": {
              "value": function () { return this.get_z_rotation_gravity.apply(this, arguments); }
            },
            "grabKeyFocus": {
              "value": function () { return this.grab_key_focus.apply(this, arguments); }
            },
            "hasActions": {
              "value": function () { return this.has_actions.apply(this, arguments); }
            },
            "hasAllocation": {
              "value": function () { return this.has_allocation.apply(this, arguments); }
            },
            "hasClip": {
              "get": function () { return this.has_clip; },
              "set": function (value) { this.has_clip = value; }
            },
            "hasConstraints": {
              "value": function () { return this.has_constraints.apply(this, arguments); }
            },
            "hasEffects": {
              "value": function () { return this.has_effects.apply(this, arguments); }
            },
            "hasKeyFocus": {
              "value": function () { return this.has_key_focus.apply(this, arguments); }
            },
            "hasOverlaps": {
              "value": function () { return this.has_overlaps.apply(this, arguments); }
            },
            "hasPointer": {
              "get": function () { return this.has_pointer; },
              "set": function (value) { this.has_pointer = value; }
            },
            "hideAll": {
              "value": function () { return this.hide_all.apply(this, arguments); }
            },
            "insertChildAbove": {
              "value": function () { return this.insert_child_above.apply(this, arguments); }
            },
            "insertChildAtIndex": {
              "value": function () { return this.insert_child_at_index.apply(this, arguments); }
            },
            "insertChildBelow": {
              "value": function () { return this.insert_child_below.apply(this, arguments); }
            },
            "isInClonePaint": {
              "value": function () { return this.is_in_clone_paint.apply(this, arguments); }
            },
            "isMapped": {
              "value": function () { return this.is_mapped.apply(this, arguments); }
            },
            "isRealized": {
              "value": function () { return this.is_realized.apply(this, arguments); }
            },
            "isRotated": {
              "value": function () { return this.is_rotated.apply(this, arguments); }
            },
            "isScaled": {
              "value": function () { return this.is_scaled.apply(this, arguments); }
            },
            "isVisible": {
              "value": function () { return this.is_visible.apply(this, arguments); }
            },
            "lowerBottom": {
              "value": function () { return this.lower_bottom.apply(this, arguments); }
            },
            "moveAnchorPoint": {
              "value": function () { return this.move_anchor_point.apply(this, arguments); }
            },
            "moveAnchorPointFromGravity": {
              "value": function () { return this.move_anchor_point_from_gravity.apply(this, arguments); }
            },
            "moveBy": {
              "value": function () { return this.move_by.apply(this, arguments); }
            },
            "needsExpand": {
              "value": function () { return this.needs_expand.apply(this, arguments); }
            },
            "popInternal": {
              "value": function () { return this.pop_internal.apply(this, arguments); }
            },
            "pushInternal": {
              "value": function () { return this.push_internal.apply(this, arguments); }
            },
            "queueRedraw": {
              "value": function () { return this.queue_redraw.apply(this, arguments); }
            },
            "queueRedrawWithClip": {
              "value": function () { return this.queue_redraw_with_clip.apply(this, arguments); }
            },
            "queueRelayout": {
              "value": function () { return this.queue_relayout.apply(this, arguments); }
            },
            "raiseTop": {
              "value": function () { return this.raise_top.apply(this, arguments); }
            },
            "removeAction": {
              "value": function () { return this.remove_action.apply(this, arguments); }
            },
            "removeActionByName": {
              "value": function () { return this.remove_action_by_name.apply(this, arguments); }
            },
            "removeAllChildren": {
              "value": function () { return this.remove_all_children.apply(this, arguments); }
            },
            "removeAllTransitions": {
              "value": function () { return this.remove_all_transitions.apply(this, arguments); }
            },
            "removeChild": {
              "value": function () { return this.remove_child.apply(this, arguments); }
            },
            "removeClip": {
              "value": function () { return this.remove_clip.apply(this, arguments); }
            },
            "removeConstraint": {
              "value": function () { return this.remove_constraint.apply(this, arguments); }
            },
            "removeConstraintByName": {
              "value": function () { return this.remove_constraint_by_name.apply(this, arguments); }
            },
            "removeEffect": {
              "value": function () { return this.remove_effect.apply(this, arguments); }
            },
            "removeEffectByName": {
              "value": function () { return this.remove_effect_by_name.apply(this, arguments); }
            },
            "removeTransition": {
              "value": function () { return this.remove_transition.apply(this, arguments); }
            },
            "replaceChild": {
              "value": function () { return this.replace_child.apply(this, arguments); }
            },
            "restoreEasingState": {
              "value": function () { return this.restore_easing_state.apply(this, arguments); }
            },
            "saveEasingState": {
              "value": function () { return this.save_easing_state.apply(this, arguments); }
            },
            "setAllocation": {
              "value": function () { return this.set_allocation.apply(this, arguments); }
            },
            "setAnchorPoint": {
              "value": function () { return this.set_anchor_point.apply(this, arguments); }
            },
            "setAnchorPointFromGravity": {
              "value": function () { return this.set_anchor_point_from_gravity.apply(this, arguments); }
            },
            "setBackgroundColor": {
              "value": function () { return this.set_background_color.apply(this, arguments); }
            },
            "setChildAboveSibling": {
              "value": function () { return this.set_child_above_sibling.apply(this, arguments); }
            },
            "setChildAtIndex": {
              "value": function () { return this.set_child_at_index.apply(this, arguments); }
            },
            "setChildBelowSibling": {
              "value": function () { return this.set_child_below_sibling.apply(this, arguments); }
            },
            "setChildTransform": {
              "value": function () { return this.set_child_transform.apply(this, arguments); }
            },
            "setClip": {
              "value": function () { return this.set_clip.apply(this, arguments); }
            },
            "setClipToAllocation": {
              "value": function () { return this.set_clip_to_allocation.apply(this, arguments); }
            },
            "setContent": {
              "value": function () { return this.set_content.apply(this, arguments); }
            },
            "setContentGravity": {
              "value": function () { return this.set_content_gravity.apply(this, arguments); }
            },
            "setContentRepeat": {
              "value": function () { return this.set_content_repeat.apply(this, arguments); }
            },
            "setContentScalingFilters": {
              "value": function () { return this.set_content_scaling_filters.apply(this, arguments); }
            },
            "setDepth": {
              "value": function () { return this.set_depth.apply(this, arguments); }
            },
            "setEasingDelay": {
              "value": function () { return this.set_easing_delay.apply(this, arguments); }
            },
            "setEasingDuration": {
              "value": function () { return this.set_easing_duration.apply(this, arguments); }
            },
            "setEasingMode": {
              "value": function () { return this.set_easing_mode.apply(this, arguments); }
            },
            "setFixedPositionSet": {
              "value": function () { return this.set_fixed_position_set.apply(this, arguments); }
            },
            "setFlags": {
              "value": function () { return this.set_flags.apply(this, arguments); }
            },
            "setGeometry": {
              "value": function () { return this.set_geometry.apply(this, arguments); }
            },
            "setHeight": {
              "value": function () { return this.set_height.apply(this, arguments); }
            },
            "setLayoutManager": {
              "value": function () { return this.set_layout_manager.apply(this, arguments); }
            },
            "setMargin": {
              "value": function () { return this.set_margin.apply(this, arguments); }
            },
            "setMarginBottom": {
              "value": function () { return this.set_margin_bottom.apply(this, arguments); }
            },
            "setMarginLeft": {
              "value": function () { return this.set_margin_left.apply(this, arguments); }
            },
            "setMarginRight": {
              "value": function () { return this.set_margin_right.apply(this, arguments); }
            },
            "setMarginTop": {
              "value": function () { return this.set_margin_top.apply(this, arguments); }
            },
            "setName": {
              "value": function () { return this.set_name.apply(this, arguments); }
            },
            "setOffscreenRedirect": {
              "value": function () { return this.set_offscreen_redirect.apply(this, arguments); }
            },
            "setOpacity": {
              "value": function () { return this.set_opacity.apply(this, arguments); }
            },
            "setParent": {
              "value": function () { return this.set_parent.apply(this, arguments); }
            },
            "setPivotPoint": {
              "value": function () { return this.set_pivot_point.apply(this, arguments); }
            },
            "setPivotPointZ": {
              "value": function () { return this.set_pivot_point_z.apply(this, arguments); }
            },
            "setPosition": {
              "value": function () { return this.set_position.apply(this, arguments); }
            },
            "setReactive": {
              "value": function () { return this.set_reactive.apply(this, arguments); }
            },
            "setRequestMode": {
              "value": function () { return this.set_request_mode.apply(this, arguments); }
            },
            "setRotation": {
              "value": function () { return this.set_rotation.apply(this, arguments); }
            },
            "setRotationAngle": {
              "value": function () { return this.set_rotation_angle.apply(this, arguments); }
            },
            "setScale": {
              "value": function () { return this.set_scale.apply(this, arguments); }
            },
            "setScaleFull": {
              "value": function () { return this.set_scale_full.apply(this, arguments); }
            },
            "setScaleWithGravity": {
              "value": function () { return this.set_scale_with_gravity.apply(this, arguments); }
            },
            "setScaleZ": {
              "value": function () { return this.set_scale_z.apply(this, arguments); }
            },
            "setShader": {
              "value": function () { return this.set_shader.apply(this, arguments); }
            },
            "setShaderParam": {
              "value": function () { return this.set_shader_param.apply(this, arguments); }
            },
            "setShaderParamFloat": {
              "value": function () { return this.set_shader_param_float.apply(this, arguments); }
            },
            "setShaderParamInt": {
              "value": function () { return this.set_shader_param_int.apply(this, arguments); }
            },
            "setSize": {
              "value": function () { return this.set_size.apply(this, arguments); }
            },
            "setTextDirection": {
              "value": function () { return this.set_text_direction.apply(this, arguments); }
            },
            "setTransform": {
              "value": function () { return this.set_transform.apply(this, arguments); }
            },
            "setTranslation": {
              "value": function () { return this.set_translation.apply(this, arguments); }
            },
            "setWidth": {
              "value": function () { return this.set_width.apply(this, arguments); }
            },
            "setX": {
              "value": function () { return this.set_x.apply(this, arguments); }
            },
            "setXAlign": {
              "value": function () { return this.set_x_align.apply(this, arguments); }
            },
            "setXExpand": {
              "value": function () { return this.set_x_expand.apply(this, arguments); }
            },
            "setY": {
              "value": function () { return this.set_y.apply(this, arguments); }
            },
            "setYAlign": {
              "value": function () { return this.set_y_align.apply(this, arguments); }
            },
            "setYExpand": {
              "value": function () { return this.set_y_expand.apply(this, arguments); }
            },
            "setZPosition": {
              "value": function () { return this.set_z_position.apply(this, arguments); }
            },
            "setZRotationFromGravity": {
              "value": function () { return this.set_z_rotation_from_gravity.apply(this, arguments); }
            },
            "shouldPickPaint": {
              "value": function () { return this.should_pick_paint.apply(this, arguments); }
            },
            "showAll": {
              "value": function () { return this.show_all.apply(this, arguments); }
            },
            "transformStagePoint": {
              "value": function () { return this.transform_stage_point.apply(this, arguments); }
            },
            "unsetFlags": {
              "value": function () { return this.unset_flags.apply(this, arguments); }
            },
            "anchorGravity": {
              "get": function () { return this.anchor_gravity; },
              "set": function (value) { this.anchor_gravity = value; }
            },
            "anchorX": {
              "get": function () { return this.anchor_x; },
              "set": function (value) { this.anchor_x = value; }
            },
            "anchorY": {
              "get": function () { return this.anchor_y; },
              "set": function (value) { this.anchor_y = value; }
            },
            "backgroundColor": {
              "get": function () { return this.background_color; },
              "set": function (value) { this.background_color = value; }
            },
            "backgroundColorSet": {
              "get": function () { return this.background_color_set; },
              "set": function (value) { this.background_color_set = value; }
            },
            "childTransform": {
              "get": function () { return this.child_transform; },
              "set": function (value) { this.child_transform = value; }
            },
            "childTransformSet": {
              "get": function () { return this.child_transform_set; },
              "set": function (value) { this.child_transform_set = value; }
            },
            "clipRect": {
              "get": function () { return this.clip_rect; },
              "set": function (value) { this.clip_rect = value; }
            },
            "clipToAllocation": {
              "get": function () { return this.clip_to_allocation; },
              "set": function (value) { this.clip_to_allocation = value; }
            },
            "contentBox": {
              "get": function () { return this.content_box; },
              "set": function (value) { this.content_box = value; }
            },
            "contentGravity": {
              "get": function () { return this.content_gravity; },
              "set": function (value) { this.content_gravity = value; }
            },
            "contentRepeat": {
              "get": function () { return this.content_repeat; },
              "set": function (value) { this.content_repeat = value; }
            },
            "firstChild": {
              "get": function () { return this.first_child; },
              "set": function (value) { this.first_child = value; }
            },
            "fixedPositionSet": {
              "get": function () { return this.fixed_position_set; },
              "set": function (value) { this.fixed_position_set = value; }
            },
            "fixedX": {
              "get": function () { return this.fixed_x; },
              "set": function (value) { this.fixed_x = value; }
            },
            "fixedY": {
              "get": function () { return this.fixed_y; },
              "set": function (value) { this.fixed_y = value; }
            },
            "lastChild": {
              "get": function () { return this.last_child; },
              "set": function (value) { this.last_child = value; }
            },
            "layoutManager": {
              "get": function () { return this.layout_manager; },
              "set": function (value) { this.layout_manager = value; }
            },
            "magnificationFilter": {
              "get": function () { return this.magnification_filter; },
              "set": function (value) { this.magnification_filter = value; }
            },
            "marginBottom": {
              "get": function () { return this.margin_bottom; },
              "set": function (value) { this.margin_bottom = value; }
            },
            "marginLeft": {
              "get": function () { return this.margin_left; },
              "set": function (value) { this.margin_left = value; }
            },
            "marginRight": {
              "get": function () { return this.margin_right; },
              "set": function (value) { this.margin_right = value; }
            },
            "marginTop": {
              "get": function () { return this.margin_top; },
              "set": function (value) { this.margin_top = value; }
            },
            "minHeight": {
              "get": function () { return this.min_height; },
              "set": function (value) { this.min_height = value; }
            },
            "minHeightSet": {
              "get": function () { return this.min_height_set; },
              "set": function (value) { this.min_height_set = value; }
            },
            "minWidth": {
              "get": function () { return this.min_width; },
              "set": function (value) { this.min_width = value; }
            },
            "minWidthSet": {
              "get": function () { return this.min_width_set; },
              "set": function (value) { this.min_width_set = value; }
            },
            "minificationFilter": {
              "get": function () { return this.minification_filter; },
              "set": function (value) { this.minification_filter = value; }
            },
            "naturalHeight": {
              "get": function () { return this.natural_height; },
              "set": function (value) { this.natural_height = value; }
            },
            "naturalHeightSet": {
              "get": function () { return this.natural_height_set; },
              "set": function (value) { this.natural_height_set = value; }
            },
            "naturalWidth": {
              "get": function () { return this.natural_width; },
              "set": function (value) { this.natural_width = value; }
            },
            "naturalWidthSet": {
              "get": function () { return this.natural_width_set; },
              "set": function (value) { this.natural_width_set = value; }
            },
            "offscreenRedirect": {
              "get": function () { return this.offscreen_redirect; },
              "set": function (value) { this.offscreen_redirect = value; }
            },
            "pivotPoint": {
              "get": function () { return this.pivot_point; },
              "set": function (value) { this.pivot_point = value; }
            },
            "pivotPointZ": {
              "get": function () { return this.pivot_point_z; },
              "set": function (value) { this.pivot_point_z = value; }
            },
            "requestMode": {
              "get": function () { return this.request_mode; },
              "set": function (value) { this.request_mode = value; }
            },
            "rotationAngleX": {
              "get": function () { return this.rotation_angle_x; },
              "set": function (value) { this.rotation_angle_x = value; }
            },
            "rotationAngleY": {
              "get": function () { return this.rotation_angle_y; },
              "set": function (value) { this.rotation_angle_y = value; }
            },
            "rotationAngleZ": {
              "get": function () { return this.rotation_angle_z; },
              "set": function (value) { this.rotation_angle_z = value; }
            },
            "rotationCenterX": {
              "get": function () { return this.rotation_center_x; },
              "set": function (value) { this.rotation_center_x = value; }
            },
            "rotationCenterY": {
              "get": function () { return this.rotation_center_y; },
              "set": function (value) { this.rotation_center_y = value; }
            },
            "rotationCenterZ": {
              "get": function () { return this.rotation_center_z; },
              "set": function (value) { this.rotation_center_z = value; }
            },
            "rotationCenterZGravity": {
              "get": function () { return this.rotation_center_z_gravity; },
              "set": function (value) { this.rotation_center_z_gravity = value; }
            },
            "scaleCenterX": {
              "get": function () { return this.scale_center_x; },
              "set": function (value) { this.scale_center_x = value; }
            },
            "scaleCenterY": {
              "get": function () { return this.scale_center_y; },
              "set": function (value) { this.scale_center_y = value; }
            },
            "scaleGravity": {
              "get": function () { return this.scale_gravity; },
              "set": function (value) { this.scale_gravity = value; }
            },
            "scaleX": {
              "get": function () { return this.scale_x; },
              "set": function (value) { this.scale_x = value; }
            },
            "scaleY": {
              "get": function () { return this.scale_y; },
              "set": function (value) { this.scale_y = value; }
            },
            "scaleZ": {
              "get": function () { return this.scale_z; },
              "set": function (value) { this.scale_z = value; }
            },
            "showOnSetParent": {
              "get": function () { return this.show_on_set_parent; },
              "set": function (value) { this.show_on_set_parent = value; }
            },
            "textDirection": {
              "get": function () { return this.text_direction; },
              "set": function (value) { this.text_direction = value; }
            },
            "transformSet": {
              "get": function () { return this.transform_set; },
              "set": function (value) { this.transform_set = value; }
            },
            "translationX": {
              "get": function () { return this.translation_x; },
              "set": function (value) { this.translation_x = value; }
            },
            "translationY": {
              "get": function () { return this.translation_y; },
              "set": function (value) { this.translation_y = value; }
            },
            "translationZ": {
              "get": function () { return this.translation_z; },
              "set": function (value) { this.translation_z = value; }
            },
            "xAlign": {
              "get": function () { return this.x_align; },
              "set": function (value) { this.x_align = value; }
            },
            "xExpand": {
              "get": function () { return this.x_expand; },
              "set": function (value) { this.x_expand = value; }
            },
            "yAlign": {
              "get": function () { return this.y_align; },
              "set": function (value) { this.y_align = value; }
            },
            "yExpand": {
              "get": function () { return this.y_expand; },
              "set": function (value) { this.y_expand = value; }
            },
            "zPosition": {
              "get": function () { return this.z_position; },
              "set": function (value) { this.z_position = value; }
            }
          },
          "static": {}
        },
        "ActorMeta": {
          "prototype": {
            "getActor": {
              "value": function () { return this.get_actor.apply(this, arguments); }
            },
            "getEnabled": {
              "value": function () { return this.get_enabled.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "setEnabled": {
              "value": function () { return this.set_enabled.apply(this, arguments); }
            },
            "setName": {
              "value": function () { return this.set_name.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "AlignConstraint": {
          "prototype": {
            "getAlignAxis": {
              "value": function () { return this.get_align_axis.apply(this, arguments); }
            },
            "getFactor": {
              "value": function () { return this.get_factor.apply(this, arguments); }
            },
            "getSource": {
              "value": function () { return this.get_source.apply(this, arguments); }
            },
            "setAlignAxis": {
              "value": function () { return this.set_align_axis.apply(this, arguments); }
            },
            "setFactor": {
              "value": function () { return this.set_factor.apply(this, arguments); }
            },
            "setSource": {
              "value": function () { return this.set_source.apply(this, arguments); }
            },
            "alignAxis": {
              "get": function () { return this.align_axis; },
              "set": function (value) { this.align_axis = value; }
            }
          },
          "static": {}
        },
        "Alpha": {
          "prototype": {
            "getAlpha": {
              "value": function () { return this.get_alpha.apply(this, arguments); }
            },
            "getMode": {
              "value": function () { return this.get_mode.apply(this, arguments); }
            },
            "getTimeline": {
              "value": function () { return this.get_timeline.apply(this, arguments); }
            },
            "setClosure": {
              "value": function () { return this.set_closure.apply(this, arguments); }
            },
            "setFunc": {
              "value": function () { return this.set_func.apply(this, arguments); }
            },
            "setMode": {
              "value": function () { return this.set_mode.apply(this, arguments); }
            },
            "setTimeline": {
              "value": function () { return this.set_timeline.apply(this, arguments); }
            }
          },
          "static": {
            "registerClosure": {
              "value": function () { return this.register_closure.apply(this, arguments); }
            },
            "registerFunc": {
              "value": function () { return this.register_func.apply(this, arguments); }
            }
          }
        },
        "Animation": {
          "prototype": {
            "bindInterval": {
              "value": function () { return this.bind_interval.apply(this, arguments); }
            },
            "getAlpha": {
              "value": function () { return this.get_alpha.apply(this, arguments); }
            },
            "getDuration": {
              "value": function () { return this.get_duration.apply(this, arguments); }
            },
            "getInterval": {
              "value": function () { return this.get_interval.apply(this, arguments); }
            },
            "getLoop": {
              "value": function () { return this.get_loop.apply(this, arguments); }
            },
            "getMode": {
              "value": function () { return this.get_mode.apply(this, arguments); }
            },
            "getObject": {
              "value": function () { return this.get_object.apply(this, arguments); }
            },
            "getTimeline": {
              "value": function () { return this.get_timeline.apply(this, arguments); }
            },
            "hasProperty": {
              "value": function () { return this.has_property.apply(this, arguments); }
            },
            "setAlpha": {
              "value": function () { return this.set_alpha.apply(this, arguments); }
            },
            "setDuration": {
              "value": function () { return this.set_duration.apply(this, arguments); }
            },
            "setLoop": {
              "value": function () { return this.set_loop.apply(this, arguments); }
            },
            "setMode": {
              "value": function () { return this.set_mode.apply(this, arguments); }
            },
            "setObject": {
              "value": function () { return this.set_object.apply(this, arguments); }
            },
            "setTimeline": {
              "value": function () { return this.set_timeline.apply(this, arguments); }
            },
            "unbindProperty": {
              "value": function () { return this.unbind_property.apply(this, arguments); }
            },
            "updateInterval": {
              "value": function () { return this.update_interval.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Animator": {
          "prototype": {
            "computeValue": {
              "value": function () { return this.compute_value.apply(this, arguments); }
            },
            "getDuration": {
              "value": function () { return this.get_duration.apply(this, arguments); }
            },
            "getKeys": {
              "value": function () { return this.get_keys.apply(this, arguments); }
            },
            "getTimeline": {
              "value": function () { return this.get_timeline.apply(this, arguments); }
            },
            "propertyGetEaseIn": {
              "value": function () { return this.property_get_ease_in.apply(this, arguments); }
            },
            "propertyGetInterpolation": {
              "value": function () { return this.property_get_interpolation.apply(this, arguments); }
            },
            "propertySetEaseIn": {
              "value": function () { return this.property_set_ease_in.apply(this, arguments); }
            },
            "propertySetInterpolation": {
              "value": function () { return this.property_set_interpolation.apply(this, arguments); }
            },
            "removeKey": {
              "value": function () { return this.remove_key.apply(this, arguments); }
            },
            "setDuration": {
              "value": function () { return this.set_duration.apply(this, arguments); }
            },
            "setKey": {
              "value": function () { return this.set_key.apply(this, arguments); }
            },
            "setTimeline": {
              "value": function () { return this.set_timeline.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Backend": {
          "prototype": {
            "getDoubleClickDistance": {
              "value": function () { return this.get_double_click_distance.apply(this, arguments); }
            },
            "getDoubleClickTime": {
              "value": function () { return this.get_double_click_time.apply(this, arguments); }
            },
            "getFontName": {
              "value": function () { return this.get_font_name.apply(this, arguments); }
            },
            "getFontOptions": {
              "value": function () { return this.get_font_options.apply(this, arguments); }
            },
            "getResolution": {
              "value": function () { return this.get_resolution.apply(this, arguments); }
            },
            "setDoubleClickDistance": {
              "value": function () { return this.set_double_click_distance.apply(this, arguments); }
            },
            "setDoubleClickTime": {
              "value": function () { return this.set_double_click_time.apply(this, arguments); }
            },
            "setFontName": {
              "value": function () { return this.set_font_name.apply(this, arguments); }
            },
            "setFontOptions": {
              "value": function () { return this.set_font_options.apply(this, arguments); }
            },
            "setResolution": {
              "value": function () { return this.set_resolution.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Behaviour": {
          "prototype": {
            "actorsForeach": {
              "value": function () { return this.actors_foreach.apply(this, arguments); }
            },
            "getActors": {
              "value": function () { return this.get_actors.apply(this, arguments); }
            },
            "getAlpha": {
              "value": function () { return this.get_alpha.apply(this, arguments); }
            },
            "getNActors": {
              "value": function () { return this.get_n_actors.apply(this, arguments); }
            },
            "getNthActor": {
              "value": function () { return this.get_nth_actor.apply(this, arguments); }
            },
            "isApplied": {
              "value": function () { return this.is_applied.apply(this, arguments); }
            },
            "removeAll": {
              "value": function () { return this.remove_all.apply(this, arguments); }
            },
            "setAlpha": {
              "value": function () { return this.set_alpha.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "BehaviourDepth": {
          "prototype": {
            "getBounds": {
              "value": function () { return this.get_bounds.apply(this, arguments); }
            },
            "setBounds": {
              "value": function () { return this.set_bounds.apply(this, arguments); }
            },
            "depthEnd": {
              "get": function () { return this.depth_end; },
              "set": function (value) { this.depth_end = value; }
            },
            "depthStart": {
              "get": function () { return this.depth_start; },
              "set": function (value) { this.depth_start = value; }
            }
          },
          "static": {}
        },
        "BehaviourEllipse": {
          "prototype": {
            "getAngleEnd": {
              "value": function () { return this.get_angle_end.apply(this, arguments); }
            },
            "getAngleStart": {
              "value": function () { return this.get_angle_start.apply(this, arguments); }
            },
            "getAngleTilt": {
              "value": function () { return this.get_angle_tilt.apply(this, arguments); }
            },
            "getCenter": {
              "value": function () { return this.get_center.apply(this, arguments); }
            },
            "getDirection": {
              "value": function () { return this.get_direction.apply(this, arguments); }
            },
            "getHeight": {
              "value": function () { return this.get_height.apply(this, arguments); }
            },
            "getTilt": {
              "value": function () { return this.get_tilt.apply(this, arguments); }
            },
            "getWidth": {
              "value": function () { return this.get_width.apply(this, arguments); }
            },
            "setAngleEnd": {
              "value": function () { return this.set_angle_end.apply(this, arguments); }
            },
            "setAngleStart": {
              "value": function () { return this.set_angle_start.apply(this, arguments); }
            },
            "setAngleTilt": {
              "value": function () { return this.set_angle_tilt.apply(this, arguments); }
            },
            "setCenter": {
              "value": function () { return this.set_center.apply(this, arguments); }
            },
            "setDirection": {
              "value": function () { return this.set_direction.apply(this, arguments); }
            },
            "setHeight": {
              "value": function () { return this.set_height.apply(this, arguments); }
            },
            "setTilt": {
              "value": function () { return this.set_tilt.apply(this, arguments); }
            },
            "setWidth": {
              "value": function () { return this.set_width.apply(this, arguments); }
            },
            "angleEnd": {
              "get": function () { return this.angle_end; },
              "set": function (value) { this.angle_end = value; }
            },
            "angleStart": {
              "get": function () { return this.angle_start; },
              "set": function (value) { this.angle_start = value; }
            },
            "angleTiltX": {
              "get": function () { return this.angle_tilt_x; },
              "set": function (value) { this.angle_tilt_x = value; }
            },
            "angleTiltY": {
              "get": function () { return this.angle_tilt_y; },
              "set": function (value) { this.angle_tilt_y = value; }
            },
            "angleTiltZ": {
              "get": function () { return this.angle_tilt_z; },
              "set": function (value) { this.angle_tilt_z = value; }
            }
          },
          "static": {}
        },
        "BehaviourOpacity": {
          "prototype": {
            "getBounds": {
              "value": function () { return this.get_bounds.apply(this, arguments); }
            },
            "setBounds": {
              "value": function () { return this.set_bounds.apply(this, arguments); }
            },
            "opacityEnd": {
              "get": function () { return this.opacity_end; },
              "set": function (value) { this.opacity_end = value; }
            },
            "opacityStart": {
              "get": function () { return this.opacity_start; },
              "set": function (value) { this.opacity_start = value; }
            }
          },
          "static": {}
        },
        "BehaviourPath": {
          "prototype": {
            "getPath": {
              "value": function () { return this.get_path.apply(this, arguments); }
            },
            "setPath": {
              "value": function () { return this.set_path.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "BehaviourRotate": {
          "prototype": {
            "getAxis": {
              "value": function () { return this.get_axis.apply(this, arguments); }
            },
            "getBounds": {
              "value": function () { return this.get_bounds.apply(this, arguments); }
            },
            "getCenter": {
              "value": function () { return this.get_center.apply(this, arguments); }
            },
            "getDirection": {
              "value": function () { return this.get_direction.apply(this, arguments); }
            },
            "setAxis": {
              "value": function () { return this.set_axis.apply(this, arguments); }
            },
            "setBounds": {
              "value": function () { return this.set_bounds.apply(this, arguments); }
            },
            "setCenter": {
              "value": function () { return this.set_center.apply(this, arguments); }
            },
            "setDirection": {
              "value": function () { return this.set_direction.apply(this, arguments); }
            },
            "angleEnd": {
              "get": function () { return this.angle_end; },
              "set": function (value) { this.angle_end = value; }
            },
            "angleStart": {
              "get": function () { return this.angle_start; },
              "set": function (value) { this.angle_start = value; }
            },
            "centerX": {
              "get": function () { return this.center_x; },
              "set": function (value) { this.center_x = value; }
            },
            "centerY": {
              "get": function () { return this.center_y; },
              "set": function (value) { this.center_y = value; }
            },
            "centerZ": {
              "get": function () { return this.center_z; },
              "set": function (value) { this.center_z = value; }
            }
          },
          "static": {}
        },
        "BehaviourScale": {
          "prototype": {
            "getBounds": {
              "value": function () { return this.get_bounds.apply(this, arguments); }
            },
            "setBounds": {
              "value": function () { return this.set_bounds.apply(this, arguments); }
            },
            "xScaleEnd": {
              "get": function () { return this.x_scale_end; },
              "set": function (value) { this.x_scale_end = value; }
            },
            "xScaleStart": {
              "get": function () { return this.x_scale_start; },
              "set": function (value) { this.x_scale_start = value; }
            },
            "yScaleEnd": {
              "get": function () { return this.y_scale_end; },
              "set": function (value) { this.y_scale_end = value; }
            },
            "yScaleStart": {
              "get": function () { return this.y_scale_start; },
              "set": function (value) { this.y_scale_start = value; }
            }
          },
          "static": {}
        },
        "BinLayout": {
          "prototype": {
            "getAlignment": {
              "value": function () { return this.get_alignment.apply(this, arguments); }
            },
            "setAlignment": {
              "value": function () { return this.set_alignment.apply(this, arguments); }
            },
            "xAlign": {
              "get": function () { return this.x_align; },
              "set": function (value) { this.x_align = value; }
            },
            "yAlign": {
              "get": function () { return this.y_align; },
              "set": function (value) { this.y_align = value; }
            }
          },
          "static": {}
        },
        "BindConstraint": {
          "prototype": {
            "getCoordinate": {
              "value": function () { return this.get_coordinate.apply(this, arguments); }
            },
            "getOffset": {
              "value": function () { return this.get_offset.apply(this, arguments); }
            },
            "getSource": {
              "value": function () { return this.get_source.apply(this, arguments); }
            },
            "setCoordinate": {
              "value": function () { return this.set_coordinate.apply(this, arguments); }
            },
            "setOffset": {
              "value": function () { return this.set_offset.apply(this, arguments); }
            },
            "setSource": {
              "value": function () { return this.set_source.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "BindingPool": {
          "prototype": {
            "blockAction": {
              "value": function () { return this.block_action.apply(this, arguments); }
            },
            "findAction": {
              "value": function () { return this.find_action.apply(this, arguments); }
            },
            "installAction": {
              "value": function () { return this.install_action.apply(this, arguments); }
            },
            "installClosure": {
              "value": function () { return this.install_closure.apply(this, arguments); }
            },
            "overrideAction": {
              "value": function () { return this.override_action.apply(this, arguments); }
            },
            "overrideClosure": {
              "value": function () { return this.override_closure.apply(this, arguments); }
            },
            "removeAction": {
              "value": function () { return this.remove_action.apply(this, arguments); }
            },
            "unblockAction": {
              "value": function () { return this.unblock_action.apply(this, arguments); }
            }
          },
          "static": {
            "getForClass": {
              "value": function () { return this.get_for_class.apply(this, arguments); }
            }
          }
        },
        "BlurEffect": {
          "prototype": {},
          "static": {}
        },
        "Box": {
          "prototype": {
            "getColor": {
              "value": function () { return this.get_color.apply(this, arguments); }
            },
            "getLayoutManager": {
              "value": function () { return this.get_layout_manager.apply(this, arguments); }
            },
            "packAfter": {
              "value": function () { return this.pack_after.apply(this, arguments); }
            },
            "packAt": {
              "value": function () { return this.pack_at.apply(this, arguments); }
            },
            "packBefore": {
              "value": function () { return this.pack_before.apply(this, arguments); }
            },
            "setColor": {
              "value": function () { return this.set_color.apply(this, arguments); }
            },
            "setLayoutManager": {
              "value": function () { return this.set_layout_manager.apply(this, arguments); }
            },
            "colorSet": {
              "get": function () { return this.color_set; },
              "set": function (value) { this.color_set = value; }
            }
          },
          "static": {}
        },
        "BoxLayout": {
          "prototype": {
            "getAlignment": {
              "value": function () { return this.get_alignment.apply(this, arguments); }
            },
            "getEasingDuration": {
              "value": function () { return this.get_easing_duration.apply(this, arguments); }
            },
            "getEasingMode": {
              "value": function () { return this.get_easing_mode.apply(this, arguments); }
            },
            "getExpand": {
              "value": function () { return this.get_expand.apply(this, arguments); }
            },
            "getFill": {
              "value": function () { return this.get_fill.apply(this, arguments); }
            },
            "getHomogeneous": {
              "value": function () { return this.get_homogeneous.apply(this, arguments); }
            },
            "getOrientation": {
              "value": function () { return this.get_orientation.apply(this, arguments); }
            },
            "getPackStart": {
              "value": function () { return this.get_pack_start.apply(this, arguments); }
            },
            "getSpacing": {
              "value": function () { return this.get_spacing.apply(this, arguments); }
            },
            "getUseAnimations": {
              "value": function () { return this.get_use_animations.apply(this, arguments); }
            },
            "getVertical": {
              "value": function () { return this.get_vertical.apply(this, arguments); }
            },
            "setAlignment": {
              "value": function () { return this.set_alignment.apply(this, arguments); }
            },
            "setEasingDuration": {
              "value": function () { return this.set_easing_duration.apply(this, arguments); }
            },
            "setEasingMode": {
              "value": function () { return this.set_easing_mode.apply(this, arguments); }
            },
            "setExpand": {
              "value": function () { return this.set_expand.apply(this, arguments); }
            },
            "setFill": {
              "value": function () { return this.set_fill.apply(this, arguments); }
            },
            "setHomogeneous": {
              "value": function () { return this.set_homogeneous.apply(this, arguments); }
            },
            "setOrientation": {
              "value": function () { return this.set_orientation.apply(this, arguments); }
            },
            "setPackStart": {
              "value": function () { return this.set_pack_start.apply(this, arguments); }
            },
            "setSpacing": {
              "value": function () { return this.set_spacing.apply(this, arguments); }
            },
            "setUseAnimations": {
              "value": function () { return this.set_use_animations.apply(this, arguments); }
            },
            "setVertical": {
              "value": function () { return this.set_vertical.apply(this, arguments); }
            },
            "easingDuration": {
              "get": function () { return this.easing_duration; },
              "set": function (value) { this.easing_duration = value; }
            },
            "easingMode": {
              "get": function () { return this.easing_mode; },
              "set": function (value) { this.easing_mode = value; }
            },
            "packStart": {
              "get": function () { return this.pack_start; },
              "set": function (value) { this.pack_start = value; }
            },
            "useAnimations": {
              "get": function () { return this.use_animations; },
              "set": function (value) { this.use_animations = value; }
            }
          },
          "static": {}
        },
        "BrightnessContrastEffect": {
          "prototype": {
            "getBrightness": {
              "value": function () { return this.get_brightness.apply(this, arguments); }
            },
            "getContrast": {
              "value": function () { return this.get_contrast.apply(this, arguments); }
            },
            "setBrightness": {
              "value": function () { return this.set_brightness.apply(this, arguments); }
            },
            "setBrightnessFull": {
              "value": function () { return this.set_brightness_full.apply(this, arguments); }
            },
            "setContrast": {
              "value": function () { return this.set_contrast.apply(this, arguments); }
            },
            "setContrastFull": {
              "value": function () { return this.set_contrast_full.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "CairoTexture": {
          "prototype": {
            "createRegion": {
              "value": function () { return this.create_region.apply(this, arguments); }
            },
            "getAutoResize": {
              "value": function () { return this.get_auto_resize.apply(this, arguments); }
            },
            "getSurfaceSize": {
              "value": function () { return this.get_surface_size.apply(this, arguments); }
            },
            "invalidateRectangle": {
              "value": function () { return this.invalidate_rectangle.apply(this, arguments); }
            },
            "setAutoResize": {
              "value": function () { return this.set_auto_resize.apply(this, arguments); }
            },
            "setSurfaceSize": {
              "value": function () { return this.set_surface_size.apply(this, arguments); }
            },
            "autoResize": {
              "get": function () { return this.auto_resize; },
              "set": function (value) { this.auto_resize = value; }
            },
            "surfaceHeight": {
              "get": function () { return this.surface_height; },
              "set": function (value) { this.surface_height = value; }
            },
            "surfaceWidth": {
              "get": function () { return this.surface_width; },
              "set": function (value) { this.surface_width = value; }
            }
          },
          "static": {}
        },
        "Canvas": {
          "prototype": {
            "getScaleFactor": {
              "value": function () { return this.get_scale_factor.apply(this, arguments); }
            },
            "setScaleFactor": {
              "value": function () { return this.set_scale_factor.apply(this, arguments); }
            },
            "setSize": {
              "value": function () { return this.set_size.apply(this, arguments); }
            },
            "scaleFactor": {
              "get": function () { return this.scale_factor; },
              "set": function (value) { this.scale_factor = value; }
            },
            "scaleFactorSet": {
              "get": function () { return this.scale_factor_set; },
              "set": function (value) { this.scale_factor_set = value; }
            }
          },
          "static": {}
        },
        "ChildMeta": {
          "prototype": {
            "getActor": {
              "value": function () { return this.get_actor.apply(this, arguments); }
            },
            "getContainer": {
              "value": function () { return this.get_container.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "ClickAction": {
          "prototype": {
            "getButton": {
              "value": function () { return this.get_button.apply(this, arguments); }
            },
            "getCoords": {
              "value": function () { return this.get_coords.apply(this, arguments); }
            },
            "getState": {
              "value": function () { return this.get_state.apply(this, arguments); }
            },
            "longPressDuration": {
              "get": function () { return this.long_press_duration; },
              "set": function (value) { this.long_press_duration = value; }
            },
            "longPressThreshold": {
              "get": function () { return this.long_press_threshold; },
              "set": function (value) { this.long_press_threshold = value; }
            }
          },
          "static": {}
        },
        "ClipNode": {
          "prototype": {},
          "static": {}
        },
        "Clone": {
          "prototype": {
            "getSource": {
              "value": function () { return this.get_source.apply(this, arguments); }
            },
            "setSource": {
              "value": function () { return this.set_source.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "ColorNode": {
          "prototype": {},
          "static": {}
        },
        "ColorizeEffect": {
          "prototype": {
            "getTint": {
              "value": function () { return this.get_tint.apply(this, arguments); }
            },
            "setTint": {
              "value": function () { return this.set_tint.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Constraint": {
          "prototype": {},
          "static": {}
        },
        "DeformEffect": {
          "prototype": {
            "getBackMaterial": {
              "value": function () { return this.get_back_material.apply(this, arguments); }
            },
            "getNTiles": {
              "value": function () { return this.get_n_tiles.apply(this, arguments); }
            },
            "setBackMaterial": {
              "value": function () { return this.set_back_material.apply(this, arguments); }
            },
            "setNTiles": {
              "value": function () { return this.set_n_tiles.apply(this, arguments); }
            },
            "backMaterial": {
              "get": function () { return this.back_material; },
              "set": function (value) { this.back_material = value; }
            },
            "xTiles": {
              "get": function () { return this.x_tiles; },
              "set": function (value) { this.x_tiles = value; }
            },
            "yTiles": {
              "get": function () { return this.y_tiles; },
              "set": function (value) { this.y_tiles = value; }
            }
          },
          "static": {}
        },
        "DesaturateEffect": {
          "prototype": {
            "getFactor": {
              "value": function () { return this.get_factor.apply(this, arguments); }
            },
            "setFactor": {
              "value": function () { return this.set_factor.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DeviceManager": {
          "prototype": {
            "getCoreDevice": {
              "value": function () { return this.get_core_device.apply(this, arguments); }
            },
            "getDevice": {
              "value": function () { return this.get_device.apply(this, arguments); }
            },
            "listDevices": {
              "value": function () { return this.list_devices.apply(this, arguments); }
            },
            "peekDevices": {
              "value": function () { return this.peek_devices.apply(this, arguments); }
            }
          },
          "static": {
            "getDefault": {
              "value": function () { return this.get_default.apply(this, arguments); }
            }
          }
        },
        "DragAction": {
          "prototype": {
            "getDragArea": {
              "value": function () { return this.get_drag_area.apply(this, arguments); }
            },
            "getDragAxis": {
              "value": function () { return this.get_drag_axis.apply(this, arguments); }
            },
            "getDragHandle": {
              "value": function () { return this.get_drag_handle.apply(this, arguments); }
            },
            "getDragThreshold": {
              "value": function () { return this.get_drag_threshold.apply(this, arguments); }
            },
            "getMotionCoords": {
              "value": function () { return this.get_motion_coords.apply(this, arguments); }
            },
            "getPressCoords": {
              "value": function () { return this.get_press_coords.apply(this, arguments); }
            },
            "setDragArea": {
              "value": function () { return this.set_drag_area.apply(this, arguments); }
            },
            "setDragAxis": {
              "value": function () { return this.set_drag_axis.apply(this, arguments); }
            },
            "setDragHandle": {
              "value": function () { return this.set_drag_handle.apply(this, arguments); }
            },
            "setDragThreshold": {
              "value": function () { return this.set_drag_threshold.apply(this, arguments); }
            },
            "dragArea": {
              "get": function () { return this.drag_area; },
              "set": function (value) { this.drag_area = value; }
            },
            "dragAreaSet": {
              "get": function () { return this.drag_area_set; },
              "set": function (value) { this.drag_area_set = value; }
            },
            "dragAxis": {
              "get": function () { return this.drag_axis; },
              "set": function (value) { this.drag_axis = value; }
            },
            "dragHandle": {
              "get": function () { return this.drag_handle; },
              "set": function (value) { this.drag_handle = value; }
            },
            "xDragThreshold": {
              "get": function () { return this.x_drag_threshold; },
              "set": function (value) { this.x_drag_threshold = value; }
            },
            "yDragThreshold": {
              "get": function () { return this.y_drag_threshold; },
              "set": function (value) { this.y_drag_threshold = value; }
            }
          },
          "static": {}
        },
        "DropAction": {
          "prototype": {},
          "static": {}
        },
        "Effect": {
          "prototype": {
            "queueRepaint": {
              "value": function () { return this.queue_repaint.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "FixedLayout": {
          "prototype": {},
          "static": {}
        },
        "FlowLayout": {
          "prototype": {
            "getColumnSpacing": {
              "value": function () { return this.get_column_spacing.apply(this, arguments); }
            },
            "getColumnWidth": {
              "value": function () { return this.get_column_width.apply(this, arguments); }
            },
            "getHomogeneous": {
              "value": function () { return this.get_homogeneous.apply(this, arguments); }
            },
            "getOrientation": {
              "value": function () { return this.get_orientation.apply(this, arguments); }
            },
            "getRowHeight": {
              "value": function () { return this.get_row_height.apply(this, arguments); }
            },
            "getRowSpacing": {
              "value": function () { return this.get_row_spacing.apply(this, arguments); }
            },
            "getSnapToGrid": {
              "value": function () { return this.get_snap_to_grid.apply(this, arguments); }
            },
            "setColumnSpacing": {
              "value": function () { return this.set_column_spacing.apply(this, arguments); }
            },
            "setColumnWidth": {
              "value": function () { return this.set_column_width.apply(this, arguments); }
            },
            "setHomogeneous": {
              "value": function () { return this.set_homogeneous.apply(this, arguments); }
            },
            "setOrientation": {
              "value": function () { return this.set_orientation.apply(this, arguments); }
            },
            "setRowHeight": {
              "value": function () { return this.set_row_height.apply(this, arguments); }
            },
            "setRowSpacing": {
              "value": function () { return this.set_row_spacing.apply(this, arguments); }
            },
            "setSnapToGrid": {
              "value": function () { return this.set_snap_to_grid.apply(this, arguments); }
            },
            "columnSpacing": {
              "get": function () { return this.column_spacing; },
              "set": function (value) { this.column_spacing = value; }
            },
            "maxColumnWidth": {
              "get": function () { return this.max_column_width; },
              "set": function (value) { this.max_column_width = value; }
            },
            "maxRowHeight": {
              "get": function () { return this.max_row_height; },
              "set": function (value) { this.max_row_height = value; }
            },
            "minColumnWidth": {
              "get": function () { return this.min_column_width; },
              "set": function (value) { this.min_column_width = value; }
            },
            "minRowHeight": {
              "get": function () { return this.min_row_height; },
              "set": function (value) { this.min_row_height = value; }
            },
            "rowSpacing": {
              "get": function () { return this.row_spacing; },
              "set": function (value) { this.row_spacing = value; }
            },
            "snapToGrid": {
              "get": function () { return this.snap_to_grid; },
              "set": function (value) { this.snap_to_grid = value; }
            }
          },
          "static": {}
        },
        "GestureAction": {
          "prototype": {
            "getDevice": {
              "value": function () { return this.get_device.apply(this, arguments); }
            },
            "getLastEvent": {
              "value": function () { return this.get_last_event.apply(this, arguments); }
            },
            "getMotionCoords": {
              "value": function () { return this.get_motion_coords.apply(this, arguments); }
            },
            "getMotionDelta": {
              "value": function () { return this.get_motion_delta.apply(this, arguments); }
            },
            "getNCurrentPoints": {
              "value": function () { return this.get_n_current_points.apply(this, arguments); }
            },
            "getNTouchPoints": {
              "value": function () { return this.get_n_touch_points.apply(this, arguments); }
            },
            "getPressCoords": {
              "value": function () { return this.get_press_coords.apply(this, arguments); }
            },
            "getReleaseCoords": {
              "value": function () { return this.get_release_coords.apply(this, arguments); }
            },
            "getSequence": {
              "value": function () { return this.get_sequence.apply(this, arguments); }
            },
            "getThresholdTriggerDistance": {
              "value": function () { return this.get_threshold_trigger_distance.apply(this, arguments); }
            },
            "getThresholdTriggerEdge": {
              "value": function () { return this.get_threshold_trigger_edge.apply(this, arguments); }
            },
            "getThresholdTriggerEgde": {
              "value": function () { return this.get_threshold_trigger_egde.apply(this, arguments); }
            },
            "getVelocity": {
              "value": function () { return this.get_velocity.apply(this, arguments); }
            },
            "setNTouchPoints": {
              "value": function () { return this.set_n_touch_points.apply(this, arguments); }
            },
            "setThresholdTriggerDistance": {
              "value": function () { return this.set_threshold_trigger_distance.apply(this, arguments); }
            },
            "setThresholdTriggerEdge": {
              "value": function () { return this.set_threshold_trigger_edge.apply(this, arguments); }
            },
            "nTouchPoints": {
              "get": function () { return this.n_touch_points; },
              "set": function (value) { this.n_touch_points = value; }
            },
            "thresholdTriggerDistanceX": {
              "get": function () { return this.threshold_trigger_distance_x; },
              "set": function (value) { this.threshold_trigger_distance_x = value; }
            },
            "thresholdTriggerDistanceY": {
              "get": function () { return this.threshold_trigger_distance_y; },
              "set": function (value) { this.threshold_trigger_distance_y = value; }
            },
            "thresholdTriggerEdge": {
              "get": function () { return this.threshold_trigger_edge; },
              "set": function (value) { this.threshold_trigger_edge = value; }
            }
          },
          "static": {}
        },
        "GridLayout": {
          "prototype": {
            "attachNextTo": {
              "value": function () { return this.attach_next_to.apply(this, arguments); }
            },
            "getChildAt": {
              "value": function () { return this.get_child_at.apply(this, arguments); }
            },
            "getColumnHomogeneous": {
              "value": function () { return this.get_column_homogeneous.apply(this, arguments); }
            },
            "getColumnSpacing": {
              "value": function () { return this.get_column_spacing.apply(this, arguments); }
            },
            "getOrientation": {
              "value": function () { return this.get_orientation.apply(this, arguments); }
            },
            "getRowHomogeneous": {
              "value": function () { return this.get_row_homogeneous.apply(this, arguments); }
            },
            "getRowSpacing": {
              "value": function () { return this.get_row_spacing.apply(this, arguments); }
            },
            "insertColumn": {
              "value": function () { return this.insert_column.apply(this, arguments); }
            },
            "insertNextTo": {
              "value": function () { return this.insert_next_to.apply(this, arguments); }
            },
            "insertRow": {
              "value": function () { return this.insert_row.apply(this, arguments); }
            },
            "setColumnHomogeneous": {
              "value": function () { return this.set_column_homogeneous.apply(this, arguments); }
            },
            "setColumnSpacing": {
              "value": function () { return this.set_column_spacing.apply(this, arguments); }
            },
            "setOrientation": {
              "value": function () { return this.set_orientation.apply(this, arguments); }
            },
            "setRowHomogeneous": {
              "value": function () { return this.set_row_homogeneous.apply(this, arguments); }
            },
            "setRowSpacing": {
              "value": function () { return this.set_row_spacing.apply(this, arguments); }
            },
            "columnHomogeneous": {
              "get": function () { return this.column_homogeneous; },
              "set": function (value) { this.column_homogeneous = value; }
            },
            "columnSpacing": {
              "get": function () { return this.column_spacing; },
              "set": function (value) { this.column_spacing = value; }
            },
            "rowHomogeneous": {
              "get": function () { return this.row_homogeneous; },
              "set": function (value) { this.row_homogeneous = value; }
            },
            "rowSpacing": {
              "get": function () { return this.row_spacing; },
              "set": function (value) { this.row_spacing = value; }
            }
          },
          "static": {}
        },
        "Group": {
          "prototype": {
            "getNChildren": {
              "value": function () { return this.get_n_children.apply(this, arguments); }
            },
            "getNthChild": {
              "value": function () { return this.get_nth_child.apply(this, arguments); }
            },
            "removeAll": {
              "value": function () { return this.remove_all.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Image": {
          "prototype": {
            "setArea": {
              "value": function () { return this.set_area.apply(this, arguments); }
            },
            "setBytes": {
              "value": function () { return this.set_bytes.apply(this, arguments); }
            },
            "setData": {
              "value": function () { return this.set_data.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "InputDevice": {
          "prototype": {
            "getAssociatedDevice": {
              "value": function () { return this.get_associated_device.apply(this, arguments); }
            },
            "getAxis": {
              "value": function () { return this.get_axis.apply(this, arguments); }
            },
            "getAxisValue": {
              "value": function () { return this.get_axis_value.apply(this, arguments); }
            },
            "getCoords": {
              "value": function () { return this.get_coords.apply(this, arguments); }
            },
            "getDeviceCoords": {
              "value": function () { return this.get_device_coords.apply(this, arguments); }
            },
            "getDeviceId": {
              "value": function () { return this.get_device_id.apply(this, arguments); }
            },
            "getDeviceMode": {
              "value": function () { return this.get_device_mode.apply(this, arguments); }
            },
            "getDeviceName": {
              "value": function () { return this.get_device_name.apply(this, arguments); }
            },
            "getDeviceType": {
              "value": function () { return this.get_device_type.apply(this, arguments); }
            },
            "getEnabled": {
              "value": function () { return this.get_enabled.apply(this, arguments); }
            },
            "getGrabbedActor": {
              "value": function () { return this.get_grabbed_actor.apply(this, arguments); }
            },
            "getHasCursor": {
              "value": function () { return this.get_has_cursor.apply(this, arguments); }
            },
            "getKey": {
              "value": function () { return this.get_key.apply(this, arguments); }
            },
            "getModifierState": {
              "value": function () { return this.get_modifier_state.apply(this, arguments); }
            },
            "getNAxes": {
              "value": function () { return this.get_n_axes.apply(this, arguments); }
            },
            "getNKeys": {
              "value": function () { return this.get_n_keys.apply(this, arguments); }
            },
            "getPointerActor": {
              "value": function () { return this.get_pointer_actor.apply(this, arguments); }
            },
            "getPointerStage": {
              "value": function () { return this.get_pointer_stage.apply(this, arguments); }
            },
            "getProductId": {
              "value": function () { return this.get_product_id.apply(this, arguments); }
            },
            "getSlaveDevices": {
              "value": function () { return this.get_slave_devices.apply(this, arguments); }
            },
            "getVendorId": {
              "value": function () { return this.get_vendor_id.apply(this, arguments); }
            },
            "keycodeToEvdev": {
              "value": function () { return this.keycode_to_evdev.apply(this, arguments); }
            },
            "sequenceGetGrabbedActor": {
              "value": function () { return this.sequence_get_grabbed_actor.apply(this, arguments); }
            },
            "sequenceGrab": {
              "value": function () { return this.sequence_grab.apply(this, arguments); }
            },
            "sequenceUngrab": {
              "value": function () { return this.sequence_ungrab.apply(this, arguments); }
            },
            "setEnabled": {
              "value": function () { return this.set_enabled.apply(this, arguments); }
            },
            "setKey": {
              "value": function () { return this.set_key.apply(this, arguments); }
            },
            "updateFromEvent": {
              "value": function () { return this.update_from_event.apply(this, arguments); }
            },
            "deviceManager": {
              "get": function () { return this.device_manager; },
              "set": function (value) { this.device_manager = value; }
            },
            "deviceMode": {
              "get": function () { return this.device_mode; },
              "set": function (value) { this.device_mode = value; }
            },
            "deviceType": {
              "get": function () { return this.device_type; },
              "set": function (value) { this.device_type = value; }
            },
            "hasCursor": {
              "get": function () { return this.has_cursor; },
              "set": function (value) { this.has_cursor = value; }
            },
            "nAxes": {
              "get": function () { return this.n_axes; },
              "set": function (value) { this.n_axes = value; }
            },
            "productId": {
              "get": function () { return this.product_id; },
              "set": function (value) { this.product_id = value; }
            },
            "vendorId": {
              "get": function () { return this.vendor_id; },
              "set": function (value) { this.vendor_id = value; }
            }
          },
          "static": {}
        },
        "Interval": {
          "prototype": {
            "computeValue": {
              "value": function () { return this.compute_value.apply(this, arguments); }
            },
            "getFinalValue": {
              "value": function () { return this.get_final_value.apply(this, arguments); }
            },
            "getInitialValue": {
              "value": function () { return this.get_initial_value.apply(this, arguments); }
            },
            "getInterval": {
              "value": function () { return this.get_interval.apply(this, arguments); }
            },
            "getValueType": {
              "value": function () { return this.get_value_type.apply(this, arguments); }
            },
            "isValid": {
              "value": function () { return this.is_valid.apply(this, arguments); }
            },
            "peekFinalValue": {
              "value": function () { return this.peek_final_value.apply(this, arguments); }
            },
            "peekInitialValue": {
              "value": function () { return this.peek_initial_value.apply(this, arguments); }
            },
            "setFinal": {
              "value": function () { return this.set_final.apply(this, arguments); }
            },
            "setFinalValue": {
              "value": function () { return this.set_final_value.apply(this, arguments); }
            },
            "setInitial": {
              "value": function () { return this.set_initial.apply(this, arguments); }
            },
            "setInitialValue": {
              "value": function () { return this.set_initial_value.apply(this, arguments); }
            },
            "setInterval": {
              "value": function () { return this.set_interval.apply(this, arguments); }
            },
            "valueType": {
              "get": function () { return this.value_type; },
              "set": function (value) { this.value_type = value; }
            }
          },
          "static": {
            "registerProgressFunc": {
              "value": function () { return this.register_progress_func.apply(this, arguments); }
            }
          }
        },
        "KeyframeTransition": {
          "prototype": {
            "getKeyFrame": {
              "value": function () { return this.get_key_frame.apply(this, arguments); }
            },
            "getNKeyFrames": {
              "value": function () { return this.get_n_key_frames.apply(this, arguments); }
            },
            "setKeyFrame": {
              "value": function () { return this.set_key_frame.apply(this, arguments); }
            },
            "setKeyFrames": {
              "value": function () { return this.set_key_frames.apply(this, arguments); }
            },
            "setModes": {
              "value": function () { return this.set_modes.apply(this, arguments); }
            },
            "setValues": {
              "value": function () { return this.set_values.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "LayoutManager": {
          "prototype": {
            "beginAnimation": {
              "value": function () { return this.begin_animation.apply(this, arguments); }
            },
            "childGet": {
              "value": function () { return this.child_get.apply(this, arguments); }
            },
            "childGetProperty": {
              "value": function () { return this.child_get_property.apply(this, arguments); }
            },
            "childSet": {
              "value": function () { return this.child_set.apply(this, arguments); }
            },
            "childSetProperty": {
              "value": function () { return this.child_set_property.apply(this, arguments); }
            },
            "endAnimation": {
              "value": function () { return this.end_animation.apply(this, arguments); }
            },
            "findChildProperty": {
              "value": function () { return this.find_child_property.apply(this, arguments); }
            },
            "getAnimationProgress": {
              "value": function () { return this.get_animation_progress.apply(this, arguments); }
            },
            "getChildMeta": {
              "value": function () { return this.get_child_meta.apply(this, arguments); }
            },
            "getPreferredHeight": {
              "value": function () { return this.get_preferred_height.apply(this, arguments); }
            },
            "getPreferredWidth": {
              "value": function () { return this.get_preferred_width.apply(this, arguments); }
            },
            "layoutChanged": {
              "value": function () { return this.layout_changed.apply(this, arguments); }
            },
            "listChildProperties": {
              "value": function () { return this.list_child_properties.apply(this, arguments); }
            },
            "setContainer": {
              "value": function () { return this.set_container.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "LayoutMeta": {
          "prototype": {
            "getManager": {
              "value": function () { return this.get_manager.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "ListModel": {
          "prototype": {},
          "static": {}
        },
        "Model": {
          "prototype": {
            "filterIter": {
              "value": function () { return this.filter_iter.apply(this, arguments); }
            },
            "filterRow": {
              "value": function () { return this.filter_row.apply(this, arguments); }
            },
            "getColumnName": {
              "value": function () { return this.get_column_name.apply(this, arguments); }
            },
            "getColumnType": {
              "value": function () { return this.get_column_type.apply(this, arguments); }
            },
            "getFilterSet": {
              "value": function () { return this.get_filter_set.apply(this, arguments); }
            },
            "getFirstIter": {
              "value": function () { return this.get_first_iter.apply(this, arguments); }
            },
            "getIterAtRow": {
              "value": function () { return this.get_iter_at_row.apply(this, arguments); }
            },
            "getLastIter": {
              "value": function () { return this.get_last_iter.apply(this, arguments); }
            },
            "getNColumns": {
              "value": function () { return this.get_n_columns.apply(this, arguments); }
            },
            "getNRows": {
              "value": function () { return this.get_n_rows.apply(this, arguments); }
            },
            "getSortingColumn": {
              "value": function () { return this.get_sorting_column.apply(this, arguments); }
            },
            "insertValue": {
              "value": function () { return this.insert_value.apply(this, arguments); }
            },
            "setFilter": {
              "value": function () { return this.set_filter.apply(this, arguments); }
            },
            "setNames": {
              "value": function () { return this.set_names.apply(this, arguments); }
            },
            "setSort": {
              "value": function () { return this.set_sort.apply(this, arguments); }
            },
            "setSortingColumn": {
              "value": function () { return this.set_sorting_column.apply(this, arguments); }
            },
            "setTypes": {
              "value": function () { return this.set_types.apply(this, arguments); }
            },
            "filterSet": {
              "get": function () { return this.filter_set; },
              "set": function (value) { this.filter_set = value; }
            }
          },
          "static": {}
        },
        "ModelIter": {
          "prototype": {
            "getModel": {
              "value": function () { return this.get_model.apply(this, arguments); }
            },
            "getRow": {
              "value": function () { return this.get_row.apply(this, arguments); }
            },
            "getValist": {
              "value": function () { return this.get_valist.apply(this, arguments); }
            },
            "getValue": {
              "value": function () { return this.get_value.apply(this, arguments); }
            },
            "isFirst": {
              "value": function () { return this.is_first.apply(this, arguments); }
            },
            "isLast": {
              "value": function () { return this.is_last.apply(this, arguments); }
            },
            "setValist": {
              "value": function () { return this.set_valist.apply(this, arguments); }
            },
            "setValue": {
              "value": function () { return this.set_value.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "OffscreenEffect": {
          "prototype": {
            "createTexture": {
              "value": function () { return this.create_texture.apply(this, arguments); }
            },
            "getTarget": {
              "value": function () { return this.get_target.apply(this, arguments); }
            },
            "getTargetRect": {
              "value": function () { return this.get_target_rect.apply(this, arguments); }
            },
            "getTargetSize": {
              "value": function () { return this.get_target_size.apply(this, arguments); }
            },
            "getTexture": {
              "value": function () { return this.get_texture.apply(this, arguments); }
            },
            "paintTarget": {
              "value": function () { return this.paint_target.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "PageTurnEffect": {
          "prototype": {
            "getAngle": {
              "value": function () { return this.get_angle.apply(this, arguments); }
            },
            "getPeriod": {
              "value": function () { return this.get_period.apply(this, arguments); }
            },
            "getRadius": {
              "value": function () { return this.get_radius.apply(this, arguments); }
            },
            "setAngle": {
              "value": function () { return this.set_angle.apply(this, arguments); }
            },
            "setPeriod": {
              "value": function () { return this.set_period.apply(this, arguments); }
            },
            "setRadius": {
              "value": function () { return this.set_radius.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "PaintNode": {
          "prototype": {
            "addChild": {
              "value": function () { return this.add_child.apply(this, arguments); }
            },
            "addRectangle": {
              "value": function () { return this.add_rectangle.apply(this, arguments); }
            },
            "addTextureRectangle": {
              "value": function () { return this.add_texture_rectangle.apply(this, arguments); }
            },
            "setName": {
              "value": function () { return this.set_name.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "PanAction": {
          "prototype": {
            "getAccelerationFactor": {
              "value": function () { return this.get_acceleration_factor.apply(this, arguments); }
            },
            "getConstrainedMotionDelta": {
              "value": function () { return this.get_constrained_motion_delta.apply(this, arguments); }
            },
            "getDeceleration": {
              "value": function () { return this.get_deceleration.apply(this, arguments); }
            },
            "getInterpolate": {
              "value": function () { return this.get_interpolate.apply(this, arguments); }
            },
            "getInterpolatedCoords": {
              "value": function () { return this.get_interpolated_coords.apply(this, arguments); }
            },
            "getInterpolatedDelta": {
              "value": function () { return this.get_interpolated_delta.apply(this, arguments); }
            },
            "getMotionCoords": {
              "value": function () { return this.get_motion_coords.apply(this, arguments); }
            },
            "getMotionDelta": {
              "value": function () { return this.get_motion_delta.apply(this, arguments); }
            },
            "getPanAxis": {
              "value": function () { return this.get_pan_axis.apply(this, arguments); }
            },
            "setAccelerationFactor": {
              "value": function () { return this.set_acceleration_factor.apply(this, arguments); }
            },
            "setDeceleration": {
              "value": function () { return this.set_deceleration.apply(this, arguments); }
            },
            "setInterpolate": {
              "value": function () { return this.set_interpolate.apply(this, arguments); }
            },
            "setPanAxis": {
              "value": function () { return this.set_pan_axis.apply(this, arguments); }
            },
            "accelerationFactor": {
              "get": function () { return this.acceleration_factor; },
              "set": function (value) { this.acceleration_factor = value; }
            },
            "panAxis": {
              "get": function () { return this.pan_axis; },
              "set": function (value) { this.pan_axis = value; }
            }
          },
          "static": {}
        },
        "ParamSpecColor": {
          "prototype": {},
          "static": {}
        },
        "ParamSpecFixed": {
          "prototype": {},
          "static": {}
        },
        "ParamSpecUnit": {
          "prototype": {},
          "static": {}
        },
        "Path": {
          "prototype": {
            "addCairoPath": {
              "value": function () { return this.add_cairo_path.apply(this, arguments); }
            },
            "addClose": {
              "value": function () { return this.add_close.apply(this, arguments); }
            },
            "addCurveTo": {
              "value": function () { return this.add_curve_to.apply(this, arguments); }
            },
            "addLineTo": {
              "value": function () { return this.add_line_to.apply(this, arguments); }
            },
            "addMoveTo": {
              "value": function () { return this.add_move_to.apply(this, arguments); }
            },
            "addNode": {
              "value": function () { return this.add_node.apply(this, arguments); }
            },
            "addRelCurveTo": {
              "value": function () { return this.add_rel_curve_to.apply(this, arguments); }
            },
            "addRelLineTo": {
              "value": function () { return this.add_rel_line_to.apply(this, arguments); }
            },
            "addRelMoveTo": {
              "value": function () { return this.add_rel_move_to.apply(this, arguments); }
            },
            "addString": {
              "value": function () { return this.add_string.apply(this, arguments); }
            },
            "getDescription": {
              "value": function () { return this.get_description.apply(this, arguments); }
            },
            "getLength": {
              "value": function () { return this.get_length.apply(this, arguments); }
            },
            "getNNodes": {
              "value": function () { return this.get_n_nodes.apply(this, arguments); }
            },
            "getNode": {
              "value": function () { return this.get_node.apply(this, arguments); }
            },
            "getNodes": {
              "value": function () { return this.get_nodes.apply(this, arguments); }
            },
            "getPosition": {
              "value": function () { return this.get_position.apply(this, arguments); }
            },
            "insertNode": {
              "value": function () { return this.insert_node.apply(this, arguments); }
            },
            "removeNode": {
              "value": function () { return this.remove_node.apply(this, arguments); }
            },
            "replaceNode": {
              "value": function () { return this.replace_node.apply(this, arguments); }
            },
            "setDescription": {
              "value": function () { return this.set_description.apply(this, arguments); }
            },
            "toCairoPath": {
              "value": function () { return this.to_cairo_path.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "PathConstraint": {
          "prototype": {
            "getOffset": {
              "value": function () { return this.get_offset.apply(this, arguments); }
            },
            "getPath": {
              "value": function () { return this.get_path.apply(this, arguments); }
            },
            "setOffset": {
              "value": function () { return this.set_offset.apply(this, arguments); }
            },
            "setPath": {
              "value": function () { return this.set_path.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "PipelineNode": {
          "prototype": {},
          "static": {}
        },
        "PropertyTransition": {
          "prototype": {
            "getPropertyName": {
              "value": function () { return this.get_property_name.apply(this, arguments); }
            },
            "setPropertyName": {
              "value": function () { return this.set_property_name.apply(this, arguments); }
            },
            "propertyName": {
              "get": function () { return this.property_name; },
              "set": function (value) { this.property_name = value; }
            }
          },
          "static": {}
        },
        "Rectangle": {
          "prototype": {
            "getBorderColor": {
              "value": function () { return this.get_border_color.apply(this, arguments); }
            },
            "getBorderWidth": {
              "value": function () { return this.get_border_width.apply(this, arguments); }
            },
            "getColor": {
              "value": function () { return this.get_color.apply(this, arguments); }
            },
            "setBorderColor": {
              "value": function () { return this.set_border_color.apply(this, arguments); }
            },
            "setBorderWidth": {
              "value": function () { return this.set_border_width.apply(this, arguments); }
            },
            "setColor": {
              "value": function () { return this.set_color.apply(this, arguments); }
            },
            "borderColor": {
              "get": function () { return this.border_color; },
              "set": function (value) { this.border_color = value; }
            },
            "borderWidth": {
              "get": function () { return this.border_width; },
              "set": function (value) { this.border_width = value; }
            },
            "hasBorder": {
              "get": function () { return this.has_border; },
              "set": function (value) { this.has_border = value; }
            }
          },
          "static": {}
        },
        "RotateAction": {
          "prototype": {},
          "static": {}
        },
        "Score": {
          "prototype": {
            "appendAtMarker": {
              "value": function () { return this.append_at_marker.apply(this, arguments); }
            },
            "getLoop": {
              "value": function () { return this.get_loop.apply(this, arguments); }
            },
            "getTimeline": {
              "value": function () { return this.get_timeline.apply(this, arguments); }
            },
            "isPlaying": {
              "value": function () { return this.is_playing.apply(this, arguments); }
            },
            "listTimelines": {
              "value": function () { return this.list_timelines.apply(this, arguments); }
            },
            "removeAll": {
              "value": function () { return this.remove_all.apply(this, arguments); }
            },
            "setLoop": {
              "value": function () { return this.set_loop.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Script": {
          "prototype": {
            "addSearchPaths": {
              "value": function () { return this.add_search_paths.apply(this, arguments); }
            },
            "addStates": {
              "value": function () { return this.add_states.apply(this, arguments); }
            },
            "connectSignals": {
              "value": function () { return this.connect_signals.apply(this, arguments); }
            },
            "connectSignalsFull": {
              "value": function () { return this.connect_signals_full.apply(this, arguments); }
            },
            "ensureObjects": {
              "value": function () { return this.ensure_objects.apply(this, arguments); }
            },
            "getObject": {
              "value": function () { return this.get_object.apply(this, arguments); }
            },
            "getObjects": {
              "value": function () { return this.get_objects.apply(this, arguments); }
            },
            "getStates": {
              "value": function () { return this.get_states.apply(this, arguments); }
            },
            "getTranslationDomain": {
              "value": function () { return this.get_translation_domain.apply(this, arguments); }
            },
            "getTypeFromName": {
              "value": function () { return this.get_type_from_name.apply(this, arguments); }
            },
            "listObjects": {
              "value": function () { return this.list_objects.apply(this, arguments); }
            },
            "loadFromData": {
              "value": function () { return this.load_from_data.apply(this, arguments); }
            },
            "loadFromFile": {
              "value": function () { return this.load_from_file.apply(this, arguments); }
            },
            "loadFromResource": {
              "value": function () { return this.load_from_resource.apply(this, arguments); }
            },
            "lookupFilename": {
              "value": function () { return this.lookup_filename.apply(this, arguments); }
            },
            "setTranslationDomain": {
              "value": function () { return this.set_translation_domain.apply(this, arguments); }
            },
            "unmergeObjects": {
              "value": function () { return this.unmerge_objects.apply(this, arguments); }
            },
            "filenameSet": {
              "get": function () { return this.filename_set; },
              "set": function (value) { this.filename_set = value; }
            },
            "translationDomain": {
              "get": function () { return this.translation_domain; },
              "set": function (value) { this.translation_domain = value; }
            }
          },
          "static": {}
        },
        "ScrollActor": {
          "prototype": {
            "getScrollMode": {
              "value": function () { return this.get_scroll_mode.apply(this, arguments); }
            },
            "scrollToPoint": {
              "value": function () { return this.scroll_to_point.apply(this, arguments); }
            },
            "scrollToRect": {
              "value": function () { return this.scroll_to_rect.apply(this, arguments); }
            },
            "setScrollMode": {
              "value": function () { return this.set_scroll_mode.apply(this, arguments); }
            },
            "scrollMode": {
              "get": function () { return this.scroll_mode; },
              "set": function (value) { this.scroll_mode = value; }
            }
          },
          "static": {}
        },
        "Settings": {
          "prototype": {
            "dndDragThreshold": {
              "get": function () { return this.dnd_drag_threshold; },
              "set": function (value) { this.dnd_drag_threshold = value; }
            },
            "doubleClickDistance": {
              "get": function () { return this.double_click_distance; },
              "set": function (value) { this.double_click_distance = value; }
            },
            "doubleClickTime": {
              "get": function () { return this.double_click_time; },
              "set": function (value) { this.double_click_time = value; }
            },
            "fontAntialias": {
              "get": function () { return this.font_antialias; },
              "set": function (value) { this.font_antialias = value; }
            },
            "fontDpi": {
              "get": function () { return this.font_dpi; },
              "set": function (value) { this.font_dpi = value; }
            },
            "fontHintStyle": {
              "get": function () { return this.font_hint_style; },
              "set": function (value) { this.font_hint_style = value; }
            },
            "fontHinting": {
              "get": function () { return this.font_hinting; },
              "set": function (value) { this.font_hinting = value; }
            },
            "fontName": {
              "get": function () { return this.font_name; },
              "set": function (value) { this.font_name = value; }
            },
            "fontSubpixelOrder": {
              "get": function () { return this.font_subpixel_order; },
              "set": function (value) { this.font_subpixel_order = value; }
            },
            "fontconfigTimestamp": {
              "get": function () { return this.fontconfig_timestamp; },
              "set": function (value) { this.fontconfig_timestamp = value; }
            },
            "longPressDuration": {
              "get": function () { return this.long_press_duration; },
              "set": function (value) { this.long_press_duration = value; }
            },
            "passwordHintTime": {
              "get": function () { return this.password_hint_time; },
              "set": function (value) { this.password_hint_time = value; }
            },
            "unscaledFontDpi": {
              "get": function () { return this.unscaled_font_dpi; },
              "set": function (value) { this.unscaled_font_dpi = value; }
            },
            "windowScalingFactor": {
              "get": function () { return this.window_scaling_factor; },
              "set": function (value) { this.window_scaling_factor = value; }
            }
          },
          "static": {
            "getDefault": {
              "value": function () { return this.get_default.apply(this, arguments); }
            }
          }
        },
        "Shader": {
          "prototype": {
            "getCoglFragmentShader": {
              "value": function () { return this.get_cogl_fragment_shader.apply(this, arguments); }
            },
            "getCoglProgram": {
              "value": function () { return this.get_cogl_program.apply(this, arguments); }
            },
            "getCoglVertexShader": {
              "value": function () { return this.get_cogl_vertex_shader.apply(this, arguments); }
            },
            "getFragmentSource": {
              "value": function () { return this.get_fragment_source.apply(this, arguments); }
            },
            "getIsEnabled": {
              "value": function () { return this.get_is_enabled.apply(this, arguments); }
            },
            "getVertexSource": {
              "value": function () { return this.get_vertex_source.apply(this, arguments); }
            },
            "isCompiled": {
              "value": function () { return this.is_compiled.apply(this, arguments); }
            },
            "setFragmentSource": {
              "value": function () { return this.set_fragment_source.apply(this, arguments); }
            },
            "setIsEnabled": {
              "value": function () { return this.set_is_enabled.apply(this, arguments); }
            },
            "setUniform": {
              "value": function () { return this.set_uniform.apply(this, arguments); }
            },
            "setVertexSource": {
              "value": function () { return this.set_vertex_source.apply(this, arguments); }
            },
            "fragmentSource": {
              "get": function () { return this.fragment_source; },
              "set": function (value) { this.fragment_source = value; }
            },
            "vertexSource": {
              "get": function () { return this.vertex_source; },
              "set": function (value) { this.vertex_source = value; }
            }
          },
          "static": {}
        },
        "ShaderEffect": {
          "prototype": {
            "getProgram": {
              "value": function () { return this.get_program.apply(this, arguments); }
            },
            "getShader": {
              "value": function () { return this.get_shader.apply(this, arguments); }
            },
            "setShaderSource": {
              "value": function () { return this.set_shader_source.apply(this, arguments); }
            },
            "setUniform": {
              "value": function () { return this.set_uniform.apply(this, arguments); }
            },
            "setUniformValue": {
              "value": function () { return this.set_uniform_value.apply(this, arguments); }
            },
            "shaderType": {
              "get": function () { return this.shader_type; },
              "set": function (value) { this.shader_type = value; }
            }
          },
          "static": {}
        },
        "ShaderFloat": {
          "prototype": {},
          "static": {}
        },
        "ShaderInt": {
          "prototype": {},
          "static": {}
        },
        "ShaderMatrix": {
          "prototype": {},
          "static": {}
        },
        "SnapConstraint": {
          "prototype": {
            "getEdges": {
              "value": function () { return this.get_edges.apply(this, arguments); }
            },
            "getOffset": {
              "value": function () { return this.get_offset.apply(this, arguments); }
            },
            "getSource": {
              "value": function () { return this.get_source.apply(this, arguments); }
            },
            "setEdges": {
              "value": function () { return this.set_edges.apply(this, arguments); }
            },
            "setOffset": {
              "value": function () { return this.set_offset.apply(this, arguments); }
            },
            "setSource": {
              "value": function () { return this.set_source.apply(this, arguments); }
            },
            "fromEdge": {
              "get": function () { return this.from_edge; },
              "set": function (value) { this.from_edge = value; }
            },
            "toEdge": {
              "get": function () { return this.to_edge; },
              "set": function (value) { this.to_edge = value; }
            }
          },
          "static": {}
        },
        "Stage": {
          "prototype": {
            "ensureCurrent": {
              "value": function () { return this.ensure_current.apply(this, arguments); }
            },
            "ensureRedraw": {
              "value": function () { return this.ensure_redraw.apply(this, arguments); }
            },
            "ensureViewport": {
              "value": function () { return this.ensure_viewport.apply(this, arguments); }
            },
            "getAcceptFocus": {
              "value": function () { return this.get_accept_focus.apply(this, arguments); }
            },
            "getActorAtPos": {
              "value": function () { return this.get_actor_at_pos.apply(this, arguments); }
            },
            "getColor": {
              "value": function () { return this.get_color.apply(this, arguments); }
            },
            "getFog": {
              "value": function () { return this.get_fog.apply(this, arguments); }
            },
            "getFullscreen": {
              "value": function () { return this.get_fullscreen.apply(this, arguments); }
            },
            "getKeyFocus": {
              "value": function () { return this.get_key_focus.apply(this, arguments); }
            },
            "getMinimumSize": {
              "value": function () { return this.get_minimum_size.apply(this, arguments); }
            },
            "getMotionEventsEnabled": {
              "value": function () { return this.get_motion_events_enabled.apply(this, arguments); }
            },
            "getNoClearHint": {
              "value": function () { return this.get_no_clear_hint.apply(this, arguments); }
            },
            "getPerspective": {
              "value": function () { return this.get_perspective.apply(this, arguments); }
            },
            "getRedrawClipBounds": {
              "value": function () { return this.get_redraw_clip_bounds.apply(this, arguments); }
            },
            "getThrottleMotionEvents": {
              "value": function () { return this.get_throttle_motion_events.apply(this, arguments); }
            },
            "getTitle": {
              "value": function () { return this.get_title.apply(this, arguments); }
            },
            "getUseAlpha": {
              "value": function () { return this.get_use_alpha.apply(this, arguments); }
            },
            "getUseFog": {
              "value": function () { return this.get_use_fog.apply(this, arguments); }
            },
            "getUserResizable": {
              "value": function () { return this.get_user_resizable.apply(this, arguments); }
            },
            "hideCursor": {
              "value": function () { return this.hide_cursor.apply(this, arguments); }
            },
            "isDefault": {
              "value": function () { return this.is_default.apply(this, arguments); }
            },
            "queueRedraw": {
              "value": function () { return this.queue_redraw.apply(this, arguments); }
            },
            "readPixels": {
              "value": function () { return this.read_pixels.apply(this, arguments); }
            },
            "setAcceptFocus": {
              "value": function () { return this.set_accept_focus.apply(this, arguments); }
            },
            "setColor": {
              "value": function () { return this.set_color.apply(this, arguments); }
            },
            "setFog": {
              "value": function () { return this.set_fog.apply(this, arguments); }
            },
            "setFullscreen": {
              "value": function () { return this.set_fullscreen.apply(this, arguments); }
            },
            "setKeyFocus": {
              "value": function () { return this.set_key_focus.apply(this, arguments); }
            },
            "setMinimumSize": {
              "value": function () { return this.set_minimum_size.apply(this, arguments); }
            },
            "setMotionEventsEnabled": {
              "value": function () { return this.set_motion_events_enabled.apply(this, arguments); }
            },
            "setNoClearHint": {
              "value": function () { return this.set_no_clear_hint.apply(this, arguments); }
            },
            "setPerspective": {
              "value": function () { return this.set_perspective.apply(this, arguments); }
            },
            "setThrottleMotionEvents": {
              "value": function () { return this.set_throttle_motion_events.apply(this, arguments); }
            },
            "setTitle": {
              "value": function () { return this.set_title.apply(this, arguments); }
            },
            "setUseAlpha": {
              "value": function () { return this.set_use_alpha.apply(this, arguments); }
            },
            "setUseFog": {
              "value": function () { return this.set_use_fog.apply(this, arguments); }
            },
            "setUserResizable": {
              "value": function () { return this.set_user_resizable.apply(this, arguments); }
            },
            "showCursor": {
              "value": function () { return this.show_cursor.apply(this, arguments); }
            },
            "acceptFocus": {
              "get": function () { return this.accept_focus; },
              "set": function (value) { this.accept_focus = value; }
            },
            "cursorVisible": {
              "get": function () { return this.cursor_visible; },
              "set": function (value) { this.cursor_visible = value; }
            },
            "fullscreenSet": {
              "get": function () { return this.fullscreen_set; },
              "set": function (value) { this.fullscreen_set = value; }
            },
            "keyFocus": {
              "get": function () { return this.key_focus; },
              "set": function (value) { this.key_focus = value; }
            },
            "noClearHint": {
              "get": function () { return this.no_clear_hint; },
              "set": function (value) { this.no_clear_hint = value; }
            },
            "useAlpha": {
              "get": function () { return this.use_alpha; },
              "set": function (value) { this.use_alpha = value; }
            },
            "useFog": {
              "get": function () { return this.use_fog; },
              "set": function (value) { this.use_fog = value; }
            },
            "userResizable": {
              "get": function () { return this.user_resizable; },
              "set": function (value) { this.user_resizable = value; }
            }
          },
          "static": {
            "getDefault": {
              "value": function () { return this.get_default.apply(this, arguments); }
            }
          }
        },
        "StageManager": {
          "prototype": {
            "getDefaultStage": {
              "value": function () { return this.get_default_stage.apply(this, arguments); }
            },
            "listStages": {
              "value": function () { return this.list_stages.apply(this, arguments); }
            },
            "peekStages": {
              "value": function () { return this.peek_stages.apply(this, arguments); }
            },
            "setDefaultStage": {
              "value": function () { return this.set_default_stage.apply(this, arguments); }
            },
            "defaultStage": {
              "get": function () { return this.default_stage; },
              "set": function (value) { this.default_stage = value; }
            }
          },
          "static": {
            "getDefault": {
              "value": function () { return this.get_default.apply(this, arguments); }
            }
          }
        },
        "State": {
          "prototype": {
            "getAnimator": {
              "value": function () { return this.get_animator.apply(this, arguments); }
            },
            "getDuration": {
              "value": function () { return this.get_duration.apply(this, arguments); }
            },
            "getKeys": {
              "value": function () { return this.get_keys.apply(this, arguments); }
            },
            "getState": {
              "value": function () { return this.get_state.apply(this, arguments); }
            },
            "getStates": {
              "value": function () { return this.get_states.apply(this, arguments); }
            },
            "getTimeline": {
              "value": function () { return this.get_timeline.apply(this, arguments); }
            },
            "removeKey": {
              "value": function () { return this.remove_key.apply(this, arguments); }
            },
            "setAnimator": {
              "value": function () { return this.set_animator.apply(this, arguments); }
            },
            "setDuration": {
              "value": function () { return this.set_duration.apply(this, arguments); }
            },
            "setKey": {
              "value": function () { return this.set_key.apply(this, arguments); }
            },
            "setState": {
              "value": function () { return this.set_state.apply(this, arguments); }
            },
            "warpToState": {
              "value": function () { return this.warp_to_state.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "SwipeAction": {
          "prototype": {},
          "static": {}
        },
        "TableLayout": {
          "prototype": {
            "getAlignment": {
              "value": function () { return this.get_alignment.apply(this, arguments); }
            },
            "getColumnCount": {
              "value": function () { return this.get_column_count.apply(this, arguments); }
            },
            "getColumnSpacing": {
              "value": function () { return this.get_column_spacing.apply(this, arguments); }
            },
            "getEasingDuration": {
              "value": function () { return this.get_easing_duration.apply(this, arguments); }
            },
            "getEasingMode": {
              "value": function () { return this.get_easing_mode.apply(this, arguments); }
            },
            "getExpand": {
              "value": function () { return this.get_expand.apply(this, arguments); }
            },
            "getFill": {
              "value": function () { return this.get_fill.apply(this, arguments); }
            },
            "getRowCount": {
              "value": function () { return this.get_row_count.apply(this, arguments); }
            },
            "getRowSpacing": {
              "value": function () { return this.get_row_spacing.apply(this, arguments); }
            },
            "getSpan": {
              "value": function () { return this.get_span.apply(this, arguments); }
            },
            "getUseAnimations": {
              "value": function () { return this.get_use_animations.apply(this, arguments); }
            },
            "setAlignment": {
              "value": function () { return this.set_alignment.apply(this, arguments); }
            },
            "setColumnSpacing": {
              "value": function () { return this.set_column_spacing.apply(this, arguments); }
            },
            "setEasingDuration": {
              "value": function () { return this.set_easing_duration.apply(this, arguments); }
            },
            "setEasingMode": {
              "value": function () { return this.set_easing_mode.apply(this, arguments); }
            },
            "setExpand": {
              "value": function () { return this.set_expand.apply(this, arguments); }
            },
            "setFill": {
              "value": function () { return this.set_fill.apply(this, arguments); }
            },
            "setRowSpacing": {
              "value": function () { return this.set_row_spacing.apply(this, arguments); }
            },
            "setSpan": {
              "value": function () { return this.set_span.apply(this, arguments); }
            },
            "setUseAnimations": {
              "value": function () { return this.set_use_animations.apply(this, arguments); }
            },
            "columnSpacing": {
              "get": function () { return this.column_spacing; },
              "set": function (value) { this.column_spacing = value; }
            },
            "easingDuration": {
              "get": function () { return this.easing_duration; },
              "set": function (value) { this.easing_duration = value; }
            },
            "easingMode": {
              "get": function () { return this.easing_mode; },
              "set": function (value) { this.easing_mode = value; }
            },
            "rowSpacing": {
              "get": function () { return this.row_spacing; },
              "set": function (value) { this.row_spacing = value; }
            },
            "useAnimations": {
              "get": function () { return this.use_animations; },
              "set": function (value) { this.use_animations = value; }
            }
          },
          "static": {}
        },
        "TapAction": {
          "prototype": {},
          "static": {}
        },
        "Text": {
          "prototype": {
            "coordsToPosition": {
              "value": function () { return this.coords_to_position.apply(this, arguments); }
            },
            "deleteChars": {
              "value": function () { return this.delete_chars.apply(this, arguments); }
            },
            "deleteSelection": {
              "value": function () { return this.delete_selection.apply(this, arguments); }
            },
            "deleteText": {
              "value": function () { return this.delete_text.apply(this, arguments); }
            },
            "getActivatable": {
              "value": function () { return this.get_activatable.apply(this, arguments); }
            },
            "getAttributes": {
              "value": function () { return this.get_attributes.apply(this, arguments); }
            },
            "getBuffer": {
              "value": function () { return this.get_buffer.apply(this, arguments); }
            },
            "getChars": {
              "value": function () { return this.get_chars.apply(this, arguments); }
            },
            "getColor": {
              "value": function () { return this.get_color.apply(this, arguments); }
            },
            "getCursorColor": {
              "value": function () { return this.get_cursor_color.apply(this, arguments); }
            },
            "getCursorPosition": {
              "value": function () { return this.get_cursor_position.apply(this, arguments); }
            },
            "getCursorRect": {
              "value": function () { return this.get_cursor_rect.apply(this, arguments); }
            },
            "getCursorSize": {
              "value": function () { return this.get_cursor_size.apply(this, arguments); }
            },
            "getCursorVisible": {
              "value": function () { return this.get_cursor_visible.apply(this, arguments); }
            },
            "getEditable": {
              "value": function () { return this.get_editable.apply(this, arguments); }
            },
            "getEllipsize": {
              "value": function () { return this.get_ellipsize.apply(this, arguments); }
            },
            "getFontDescription": {
              "value": function () { return this.get_font_description.apply(this, arguments); }
            },
            "getFontName": {
              "value": function () { return this.get_font_name.apply(this, arguments); }
            },
            "getJustify": {
              "value": function () { return this.get_justify.apply(this, arguments); }
            },
            "getLayout": {
              "value": function () { return this.get_layout.apply(this, arguments); }
            },
            "getLayoutOffsets": {
              "value": function () { return this.get_layout_offsets.apply(this, arguments); }
            },
            "getLineAlignment": {
              "value": function () { return this.get_line_alignment.apply(this, arguments); }
            },
            "getLineWrap": {
              "value": function () { return this.get_line_wrap.apply(this, arguments); }
            },
            "getLineWrapMode": {
              "value": function () { return this.get_line_wrap_mode.apply(this, arguments); }
            },
            "getMaxLength": {
              "value": function () { return this.get_max_length.apply(this, arguments); }
            },
            "getPasswordChar": {
              "value": function () { return this.get_password_char.apply(this, arguments); }
            },
            "getSelectable": {
              "value": function () { return this.get_selectable.apply(this, arguments); }
            },
            "getSelectedTextColor": {
              "value": function () { return this.get_selected_text_color.apply(this, arguments); }
            },
            "getSelection": {
              "value": function () { return this.get_selection.apply(this, arguments); }
            },
            "getSelectionBound": {
              "value": function () { return this.get_selection_bound.apply(this, arguments); }
            },
            "getSelectionColor": {
              "value": function () { return this.get_selection_color.apply(this, arguments); }
            },
            "getSingleLineMode": {
              "value": function () { return this.get_single_line_mode.apply(this, arguments); }
            },
            "getText": {
              "value": function () { return this.get_text.apply(this, arguments); }
            },
            "getUseMarkup": {
              "value": function () { return this.get_use_markup.apply(this, arguments); }
            },
            "insertText": {
              "value": function () { return this.insert_text.apply(this, arguments); }
            },
            "insertUnichar": {
              "value": function () { return this.insert_unichar.apply(this, arguments); }
            },
            "positionToCoords": {
              "value": function () { return this.position_to_coords.apply(this, arguments); }
            },
            "setActivatable": {
              "value": function () { return this.set_activatable.apply(this, arguments); }
            },
            "setAttributes": {
              "value": function () { return this.set_attributes.apply(this, arguments); }
            },
            "setBuffer": {
              "value": function () { return this.set_buffer.apply(this, arguments); }
            },
            "setColor": {
              "value": function () { return this.set_color.apply(this, arguments); }
            },
            "setCursorColor": {
              "value": function () { return this.set_cursor_color.apply(this, arguments); }
            },
            "setCursorPosition": {
              "value": function () { return this.set_cursor_position.apply(this, arguments); }
            },
            "setCursorSize": {
              "value": function () { return this.set_cursor_size.apply(this, arguments); }
            },
            "setCursorVisible": {
              "value": function () { return this.set_cursor_visible.apply(this, arguments); }
            },
            "setEditable": {
              "value": function () { return this.set_editable.apply(this, arguments); }
            },
            "setEllipsize": {
              "value": function () { return this.set_ellipsize.apply(this, arguments); }
            },
            "setFontDescription": {
              "value": function () { return this.set_font_description.apply(this, arguments); }
            },
            "setFontName": {
              "value": function () { return this.set_font_name.apply(this, arguments); }
            },
            "setJustify": {
              "value": function () { return this.set_justify.apply(this, arguments); }
            },
            "setLineAlignment": {
              "value": function () { return this.set_line_alignment.apply(this, arguments); }
            },
            "setLineWrap": {
              "value": function () { return this.set_line_wrap.apply(this, arguments); }
            },
            "setLineWrapMode": {
              "value": function () { return this.set_line_wrap_mode.apply(this, arguments); }
            },
            "setMarkup": {
              "value": function () { return this.set_markup.apply(this, arguments); }
            },
            "setMaxLength": {
              "value": function () { return this.set_max_length.apply(this, arguments); }
            },
            "setPasswordChar": {
              "value": function () { return this.set_password_char.apply(this, arguments); }
            },
            "setPreeditString": {
              "value": function () { return this.set_preedit_string.apply(this, arguments); }
            },
            "setSelectable": {
              "value": function () { return this.set_selectable.apply(this, arguments); }
            },
            "setSelectedTextColor": {
              "value": function () { return this.set_selected_text_color.apply(this, arguments); }
            },
            "setSelection": {
              "value": function () { return this.set_selection.apply(this, arguments); }
            },
            "setSelectionBound": {
              "value": function () { return this.set_selection_bound.apply(this, arguments); }
            },
            "setSelectionColor": {
              "value": function () { return this.set_selection_color.apply(this, arguments); }
            },
            "setSingleLineMode": {
              "value": function () { return this.set_single_line_mode.apply(this, arguments); }
            },
            "setText": {
              "value": function () { return this.set_text.apply(this, arguments); }
            },
            "setUseMarkup": {
              "value": function () { return this.set_use_markup.apply(this, arguments); }
            },
            "cursorColor": {
              "get": function () { return this.cursor_color; },
              "set": function (value) { this.cursor_color = value; }
            },
            "cursorColorSet": {
              "get": function () { return this.cursor_color_set; },
              "set": function (value) { this.cursor_color_set = value; }
            },
            "cursorPosition": {
              "get": function () { return this.cursor_position; },
              "set": function (value) { this.cursor_position = value; }
            },
            "cursorSize": {
              "get": function () { return this.cursor_size; },
              "set": function (value) { this.cursor_size = value; }
            },
            "cursorVisible": {
              "get": function () { return this.cursor_visible; },
              "set": function (value) { this.cursor_visible = value; }
            },
            "fontDescription": {
              "get": function () { return this.font_description; },
              "set": function (value) { this.font_description = value; }
            },
            "fontName": {
              "get": function () { return this.font_name; },
              "set": function (value) { this.font_name = value; }
            },
            "lineAlignment": {
              "get": function () { return this.line_alignment; },
              "set": function (value) { this.line_alignment = value; }
            },
            "lineWrap": {
              "get": function () { return this.line_wrap; },
              "set": function (value) { this.line_wrap = value; }
            },
            "lineWrapMode": {
              "get": function () { return this.line_wrap_mode; },
              "set": function (value) { this.line_wrap_mode = value; }
            },
            "maxLength": {
              "get": function () { return this.max_length; },
              "set": function (value) { this.max_length = value; }
            },
            "passwordChar": {
              "get": function () { return this.password_char; },
              "set": function (value) { this.password_char = value; }
            },
            "selectedTextColor": {
              "get": function () { return this.selected_text_color; },
              "set": function (value) { this.selected_text_color = value; }
            },
            "selectedTextColorSet": {
              "get": function () { return this.selected_text_color_set; },
              "set": function (value) { this.selected_text_color_set = value; }
            },
            "selectionBound": {
              "get": function () { return this.selection_bound; },
              "set": function (value) { this.selection_bound = value; }
            },
            "selectionColor": {
              "get": function () { return this.selection_color; },
              "set": function (value) { this.selection_color = value; }
            },
            "selectionColorSet": {
              "get": function () { return this.selection_color_set; },
              "set": function (value) { this.selection_color_set = value; }
            },
            "singleLineMode": {
              "get": function () { return this.single_line_mode; },
              "set": function (value) { this.single_line_mode = value; }
            },
            "useMarkup": {
              "get": function () { return this.use_markup; },
              "set": function (value) { this.use_markup = value; }
            }
          },
          "static": {}
        },
        "TextBuffer": {
          "prototype": {
            "deleteText": {
              "value": function () { return this.delete_text.apply(this, arguments); }
            },
            "emitDeletedText": {
              "value": function () { return this.emit_deleted_text.apply(this, arguments); }
            },
            "emitInsertedText": {
              "value": function () { return this.emit_inserted_text.apply(this, arguments); }
            },
            "getBytes": {
              "value": function () { return this.get_bytes.apply(this, arguments); }
            },
            "getLength": {
              "value": function () { return this.get_length.apply(this, arguments); }
            },
            "getMaxLength": {
              "value": function () { return this.get_max_length.apply(this, arguments); }
            },
            "getText": {
              "value": function () { return this.get_text.apply(this, arguments); }
            },
            "insertText": {
              "value": function () { return this.insert_text.apply(this, arguments); }
            },
            "setMaxLength": {
              "value": function () { return this.set_max_length.apply(this, arguments); }
            },
            "setText": {
              "value": function () { return this.set_text.apply(this, arguments); }
            },
            "maxLength": {
              "get": function () { return this.max_length; },
              "set": function (value) { this.max_length = value; }
            }
          },
          "static": {}
        },
        "TextNode": {
          "prototype": {},
          "static": {}
        },
        "Texture": {
          "prototype": {
            "getBaseSize": {
              "value": function () { return this.get_base_size.apply(this, arguments); }
            },
            "getCoglMaterial": {
              "value": function () { return this.get_cogl_material.apply(this, arguments); }
            },
            "getCoglTexture": {
              "value": function () { return this.get_cogl_texture.apply(this, arguments); }
            },
            "getFilterQuality": {
              "value": function () { return this.get_filter_quality.apply(this, arguments); }
            },
            "getKeepAspectRatio": {
              "value": function () { return this.get_keep_aspect_ratio.apply(this, arguments); }
            },
            "getLoadAsync": {
              "value": function () { return this.get_load_async.apply(this, arguments); }
            },
            "getLoadDataAsync": {
              "value": function () { return this.get_load_data_async.apply(this, arguments); }
            },
            "getMaxTileWaste": {
              "value": function () { return this.get_max_tile_waste.apply(this, arguments); }
            },
            "getPickWithAlpha": {
              "value": function () { return this.get_pick_with_alpha.apply(this, arguments); }
            },
            "getPixelFormat": {
              "value": function () { return this.get_pixel_format.apply(this, arguments); }
            },
            "getRepeat": {
              "value": function () { return this.get_repeat.apply(this, arguments); }
            },
            "getSyncSize": {
              "value": function () { return this.get_sync_size.apply(this, arguments); }
            },
            "setAreaFromRgbData": {
              "value": function () { return this.set_area_from_rgb_data.apply(this, arguments); }
            },
            "setCoglMaterial": {
              "value": function () { return this.set_cogl_material.apply(this, arguments); }
            },
            "setCoglTexture": {
              "value": function () { return this.set_cogl_texture.apply(this, arguments); }
            },
            "setFilterQuality": {
              "value": function () { return this.set_filter_quality.apply(this, arguments); }
            },
            "setFromFile": {
              "value": function () { return this.set_from_file.apply(this, arguments); }
            },
            "setFromRgbData": {
              "value": function () { return this.set_from_rgb_data.apply(this, arguments); }
            },
            "setFromYuvData": {
              "value": function () { return this.set_from_yuv_data.apply(this, arguments); }
            },
            "setKeepAspectRatio": {
              "value": function () { return this.set_keep_aspect_ratio.apply(this, arguments); }
            },
            "setLoadAsync": {
              "value": function () { return this.set_load_async.apply(this, arguments); }
            },
            "setLoadDataAsync": {
              "value": function () { return this.set_load_data_async.apply(this, arguments); }
            },
            "setPickWithAlpha": {
              "value": function () { return this.set_pick_with_alpha.apply(this, arguments); }
            },
            "setRepeat": {
              "value": function () { return this.set_repeat.apply(this, arguments); }
            },
            "setSyncSize": {
              "value": function () { return this.set_sync_size.apply(this, arguments); }
            },
            "coglMaterial": {
              "get": function () { return this.cogl_material; },
              "set": function (value) { this.cogl_material = value; }
            },
            "coglTexture": {
              "get": function () { return this.cogl_texture; },
              "set": function (value) { this.cogl_texture = value; }
            },
            "disableSlicing": {
              "get": function () { return this.disable_slicing; },
              "set": function (value) { this.disable_slicing = value; }
            },
            "filterQuality": {
              "get": function () { return this.filter_quality; },
              "set": function (value) { this.filter_quality = value; }
            },
            "keepAspectRatio": {
              "get": function () { return this.keep_aspect_ratio; },
              "set": function (value) { this.keep_aspect_ratio = value; }
            },
            "loadAsync": {
              "get": function () { return this.load_async; },
              "set": function (value) { this.load_async = value; }
            },
            "loadDataAsync": {
              "get": function () { return this.load_data_async; },
              "set": function (value) { this.load_data_async = value; }
            },
            "pickWithAlpha": {
              "get": function () { return this.pick_with_alpha; },
              "set": function (value) { this.pick_with_alpha = value; }
            },
            "pixelFormat": {
              "get": function () { return this.pixel_format; },
              "set": function (value) { this.pixel_format = value; }
            },
            "repeatX": {
              "get": function () { return this.repeat_x; },
              "set": function (value) { this.repeat_x = value; }
            },
            "repeatY": {
              "get": function () { return this.repeat_y; },
              "set": function (value) { this.repeat_y = value; }
            },
            "syncSize": {
              "get": function () { return this.sync_size; },
              "set": function (value) { this.sync_size = value; }
            },
            "tileWaste": {
              "get": function () { return this.tile_waste; },
              "set": function (value) { this.tile_waste = value; }
            }
          },
          "static": {}
        },
        "TextureNode": {
          "prototype": {},
          "static": {}
        },
        "Timeline": {
          "prototype": {
            "addMarker": {
              "value": function () { return this.add_marker.apply(this, arguments); }
            },
            "addMarkerAtTime": {
              "value": function () { return this.add_marker_at_time.apply(this, arguments); }
            },
            "advanceToMarker": {
              "value": function () { return this.advance_to_marker.apply(this, arguments); }
            },
            "getAutoReverse": {
              "value": function () { return this.get_auto_reverse.apply(this, arguments); }
            },
            "getCubicBezierProgress": {
              "value": function () { return this.get_cubic_bezier_progress.apply(this, arguments); }
            },
            "getCurrentRepeat": {
              "value": function () { return this.get_current_repeat.apply(this, arguments); }
            },
            "getDelay": {
              "value": function () { return this.get_delay.apply(this, arguments); }
            },
            "getDelta": {
              "value": function () { return this.get_delta.apply(this, arguments); }
            },
            "getDirection": {
              "value": function () { return this.get_direction.apply(this, arguments); }
            },
            "getDuration": {
              "value": function () { return this.get_duration.apply(this, arguments); }
            },
            "getDurationHint": {
              "value": function () { return this.get_duration_hint.apply(this, arguments); }
            },
            "getElapsedTime": {
              "value": function () { return this.get_elapsed_time.apply(this, arguments); }
            },
            "getLoop": {
              "value": function () { return this.get_loop.apply(this, arguments); }
            },
            "getProgress": {
              "value": function () { return this.get_progress.apply(this, arguments); }
            },
            "getProgressMode": {
              "value": function () { return this.get_progress_mode.apply(this, arguments); }
            },
            "getRepeatCount": {
              "value": function () { return this.get_repeat_count.apply(this, arguments); }
            },
            "getStepProgress": {
              "value": function () { return this.get_step_progress.apply(this, arguments); }
            },
            "hasMarker": {
              "value": function () { return this.has_marker.apply(this, arguments); }
            },
            "isPlaying": {
              "value": function () { return this.is_playing.apply(this, arguments); }
            },
            "listMarkers": {
              "value": function () { return this.list_markers.apply(this, arguments); }
            },
            "removeMarker": {
              "value": function () { return this.remove_marker.apply(this, arguments); }
            },
            "setAutoReverse": {
              "value": function () { return this.set_auto_reverse.apply(this, arguments); }
            },
            "setCubicBezierProgress": {
              "value": function () { return this.set_cubic_bezier_progress.apply(this, arguments); }
            },
            "setDelay": {
              "value": function () { return this.set_delay.apply(this, arguments); }
            },
            "setDirection": {
              "value": function () { return this.set_direction.apply(this, arguments); }
            },
            "setDuration": {
              "value": function () { return this.set_duration.apply(this, arguments); }
            },
            "setLoop": {
              "value": function () { return this.set_loop.apply(this, arguments); }
            },
            "setProgressFunc": {
              "value": function () { return this.set_progress_func.apply(this, arguments); }
            },
            "setProgressMode": {
              "value": function () { return this.set_progress_mode.apply(this, arguments); }
            },
            "setRepeatCount": {
              "value": function () { return this.set_repeat_count.apply(this, arguments); }
            },
            "setStepProgress": {
              "value": function () { return this.set_step_progress.apply(this, arguments); }
            },
            "autoReverse": {
              "get": function () { return this.auto_reverse; },
              "set": function (value) { this.auto_reverse = value; }
            },
            "progressMode": {
              "get": function () { return this.progress_mode; },
              "set": function (value) { this.progress_mode = value; }
            },
            "repeatCount": {
              "get": function () { return this.repeat_count; },
              "set": function (value) { this.repeat_count = value; }
            }
          },
          "static": {}
        },
        "Transition": {
          "prototype": {
            "getAnimatable": {
              "value": function () { return this.get_animatable.apply(this, arguments); }
            },
            "getInterval": {
              "value": function () { return this.get_interval.apply(this, arguments); }
            },
            "getRemoveOnComplete": {
              "value": function () { return this.get_remove_on_complete.apply(this, arguments); }
            },
            "setAnimatable": {
              "value": function () { return this.set_animatable.apply(this, arguments); }
            },
            "setFrom": {
              "value": function () { return this.set_from.apply(this, arguments); }
            },
            "setFromValue": {
              "value": function () { return this.set_from_value.apply(this, arguments); }
            },
            "setInterval": {
              "value": function () { return this.set_interval.apply(this, arguments); }
            },
            "setRemoveOnComplete": {
              "value": function () { return this.set_remove_on_complete.apply(this, arguments); }
            },
            "setTo": {
              "value": function () { return this.set_to.apply(this, arguments); }
            },
            "setToValue": {
              "value": function () { return this.set_to_value.apply(this, arguments); }
            },
            "removeOnComplete": {
              "get": function () { return this.remove_on_complete; },
              "set": function (value) { this.remove_on_complete = value; }
            }
          },
          "static": {}
        },
        "TransitionGroup": {
          "prototype": {
            "addTransition": {
              "value": function () { return this.add_transition.apply(this, arguments); }
            },
            "removeAll": {
              "value": function () { return this.remove_all.apply(this, arguments); }
            },
            "removeTransition": {
              "value": function () { return this.remove_transition.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "ZoomAction": {
          "prototype": {
            "getFocalPoint": {
              "value": function () { return this.get_focal_point.apply(this, arguments); }
            },
            "getTransformedFocalPoint": {
              "value": function () { return this.get_transformed_focal_point.apply(this, arguments); }
            },
            "getZoomAxis": {
              "value": function () { return this.get_zoom_axis.apply(this, arguments); }
            },
            "setZoomAxis": {
              "value": function () { return this.set_zoom_axis.apply(this, arguments); }
            },
            "zoomAxis": {
              "get": function () { return this.zoom_axis; },
              "set": function (value) { this.zoom_axis = value; }
            }
          },
          "static": {}
        }
      },
      "static": {
        "actorBoxAlloc": {
          "value": function () { return this.actor_box_alloc.apply(this, arguments); }
        },
        "baseInit": {
          "value": function () { return this.base_init.apply(this, arguments); }
        },
        "cairoClear": {
          "value": function () { return this.cairo_clear.apply(this, arguments); }
        },
        "cairoSetSourceColor": {
          "value": function () { return this.cairo_set_source_color.apply(this, arguments); }
        },
        "checkVersion": {
          "value": function () { return this.check_version.apply(this, arguments); }
        },
        "checkWindowingBackend": {
          "value": function () { return this.check_windowing_backend.apply(this, arguments); }
        },
        "clearGlyphCache": {
          "value": function () { return this.clear_glyph_cache.apply(this, arguments); }
        },
        "colorFromHls": {
          "value": function () { return this.color_from_hls.apply(this, arguments); }
        },
        "colorFromPixel": {
          "value": function () { return this.color_from_pixel.apply(this, arguments); }
        },
        "colorFromString": {
          "value": function () { return this.color_from_string.apply(this, arguments); }
        },
        "colorGetStatic": {
          "value": function () { return this.color_get_static.apply(this, arguments); }
        },
        "containerClassFindChildProperty": {
          "value": function () { return this.container_class_find_child_property.apply(this, arguments); }
        },
        "containerClassListChildProperties": {
          "value": function () { return this.container_class_list_child_properties.apply(this, arguments); }
        },
        "disableAccessibility": {
          "value": function () { return this.disable_accessibility.apply(this, arguments); }
        },
        "doEvent": {
          "value": function () { return this.do_event.apply(this, arguments); }
        },
        "eventAddFilter": {
          "value": function () { return this.event_add_filter.apply(this, arguments); }
        },
        "eventGet": {
          "value": function () { return this.event_get.apply(this, arguments); }
        },
        "eventPeek": {
          "value": function () { return this.event_peek.apply(this, arguments); }
        },
        "eventRemoveFilter": {
          "value": function () { return this.event_remove_filter.apply(this, arguments); }
        },
        "eventsPending": {
          "value": function () { return this.events_pending.apply(this, arguments); }
        },
        "featureAvailable": {
          "value": function () { return this.feature_available.apply(this, arguments); }
        },
        "featureGetAll": {
          "value": function () { return this.feature_get_all.apply(this, arguments); }
        },
        "frameSourceAdd": {
          "value": function () { return this.frame_source_add.apply(this, arguments); }
        },
        "frameSourceAddFull": {
          "value": function () { return this.frame_source_add_full.apply(this, arguments); }
        },
        "getAccessibilityEnabled": {
          "value": function () { return this.get_accessibility_enabled.apply(this, arguments); }
        },
        "getActorByGid": {
          "value": function () { return this.get_actor_by_gid.apply(this, arguments); }
        },
        "getCurrentEvent": {
          "value": function () { return this.get_current_event.apply(this, arguments); }
        },
        "getCurrentEventTime": {
          "value": function () { return this.get_current_event_time.apply(this, arguments); }
        },
        "getDebugEnabled": {
          "value": function () { return this.get_debug_enabled.apply(this, arguments); }
        },
        "getDefaultBackend": {
          "value": function () { return this.get_default_backend.apply(this, arguments); }
        },
        "getDefaultFrameRate": {
          "value": function () { return this.get_default_frame_rate.apply(this, arguments); }
        },
        "getDefaultTextDirection": {
          "value": function () { return this.get_default_text_direction.apply(this, arguments); }
        },
        "getFontFlags": {
          "value": function () { return this.get_font_flags.apply(this, arguments); }
        },
        "getFontMap": {
          "value": function () { return this.get_font_map.apply(this, arguments); }
        },
        "getInputDeviceForId": {
          "value": function () { return this.get_input_device_for_id.apply(this, arguments); }
        },
        "getKeyboardGrab": {
          "value": function () { return this.get_keyboard_grab.apply(this, arguments); }
        },
        "getMotionEventsEnabled": {
          "value": function () { return this.get_motion_events_enabled.apply(this, arguments); }
        },
        "getOptionGroup": {
          "value": function () { return this.get_option_group.apply(this, arguments); }
        },
        "getOptionGroupWithoutInit": {
          "value": function () { return this.get_option_group_without_init.apply(this, arguments); }
        },
        "getPointerGrab": {
          "value": function () { return this.get_pointer_grab.apply(this, arguments); }
        },
        "getScriptId": {
          "value": function () { return this.get_script_id.apply(this, arguments); }
        },
        "getShowFps": {
          "value": function () { return this.get_show_fps.apply(this, arguments); }
        },
        "getTimestamp": {
          "value": function () { return this.get_timestamp.apply(this, arguments); }
        },
        "grabKeyboard": {
          "value": function () { return this.grab_keyboard.apply(this, arguments); }
        },
        "grabPointer": {
          "value": function () { return this.grab_pointer.apply(this, arguments); }
        },
        "grabPointerForDevice": {
          "value": function () { return this.grab_pointer_for_device.apply(this, arguments); }
        },
        "imageErrorQuark": {
          "value": function () { return this.image_error_quark.apply(this, arguments); }
        },
        "initErrorQuark": {
          "value": function () { return this.init_error_quark.apply(this, arguments); }
        },
        "initWithArgs": {
          "value": function () { return this.init_with_args.apply(this, arguments); }
        },
        "keysymToUnicode": {
          "value": function () { return this.keysym_to_unicode.apply(this, arguments); }
        },
        "mainLevel": {
          "value": function () { return this.main_level.apply(this, arguments); }
        },
        "mainQuit": {
          "value": function () { return this.main_quit.apply(this, arguments); }
        },
        "matrixAlloc": {
          "value": function () { return this.matrix_alloc.apply(this, arguments); }
        },
        "matrixFree": {
          "value": function () { return this.matrix_free.apply(this, arguments); }
        },
        "matrixGetType": {
          "value": function () { return this.matrix_get_type.apply(this, arguments); }
        },
        "matrixInitFromArray": {
          "value": function () { return this.matrix_init_from_array.apply(this, arguments); }
        },
        "matrixInitFromMatrix": {
          "value": function () { return this.matrix_init_from_matrix.apply(this, arguments); }
        },
        "matrixInitIdentity": {
          "value": function () { return this.matrix_init_identity.apply(this, arguments); }
        },
        "paramSpecColor": {
          "value": function () { return this.param_spec_color.apply(this, arguments); }
        },
        "paramSpecFixed": {
          "value": function () { return this.param_spec_fixed.apply(this, arguments); }
        },
        "paramSpecUnits": {
          "value": function () { return this.param_spec_units.apply(this, arguments); }
        },
        "pointZero": {
          "value": function () { return this.point_zero.apply(this, arguments); }
        },
        "rectZero": {
          "value": function () { return this.rect_zero.apply(this, arguments); }
        },
        "scriptErrorQuark": {
          "value": function () { return this.script_error_quark.apply(this, arguments); }
        },
        "setDefaultFrameRate": {
          "value": function () { return this.set_default_frame_rate.apply(this, arguments); }
        },
        "setFontFlags": {
          "value": function () { return this.set_font_flags.apply(this, arguments); }
        },
        "setMotionEventsEnabled": {
          "value": function () { return this.set_motion_events_enabled.apply(this, arguments); }
        },
        "setWindowingBackend": {
          "value": function () { return this.set_windowing_backend.apply(this, arguments); }
        },
        "shaderErrorQuark": {
          "value": function () { return this.shader_error_quark.apply(this, arguments); }
        },
        "testAdd": {
          "value": function () { return this.test_add.apply(this, arguments); }
        },
        "testAddData": {
          "value": function () { return this.test_add_data.apply(this, arguments); }
        },
        "testAddDataFull": {
          "value": function () { return this.test_add_data_full.apply(this, arguments); }
        },
        "testCheckActorAtPoint": {
          "value": function () { return this.test_check_actor_at_point.apply(this, arguments); }
        },
        "testCheckColorAtPoint": {
          "value": function () { return this.test_check_color_at_point.apply(this, arguments); }
        },
        "testGetStage": {
          "value": function () { return this.test_get_stage.apply(this, arguments); }
        },
        "testInit": {
          "value": function () { return this.test_init.apply(this, arguments); }
        },
        "testRun": {
          "value": function () { return this.test_run.apply(this, arguments); }
        },
        "textureErrorQuark": {
          "value": function () { return this.texture_error_quark.apply(this, arguments); }
        },
        "threadsAddFrameSource": {
          "value": function () { return this.threads_add_frame_source.apply(this, arguments); }
        },
        "threadsAddFrameSourceFull": {
          "value": function () { return this.threads_add_frame_source_full.apply(this, arguments); }
        },
        "threadsAddIdle": {
          "value": function () { return this.threads_add_idle.apply(this, arguments); }
        },
        "threadsAddIdleFull": {
          "value": function () { return this.threads_add_idle_full.apply(this, arguments); }
        },
        "threadsAddRepaintFunc": {
          "value": function () { return this.threads_add_repaint_func.apply(this, arguments); }
        },
        "threadsAddRepaintFuncFull": {
          "value": function () { return this.threads_add_repaint_func_full.apply(this, arguments); }
        },
        "threadsAddTimeout": {
          "value": function () { return this.threads_add_timeout.apply(this, arguments); }
        },
        "threadsAddTimeoutFull": {
          "value": function () { return this.threads_add_timeout_full.apply(this, arguments); }
        },
        "threadsEnter": {
          "value": function () { return this.threads_enter.apply(this, arguments); }
        },
        "threadsInit": {
          "value": function () { return this.threads_init.apply(this, arguments); }
        },
        "threadsLeave": {
          "value": function () { return this.threads_leave.apply(this, arguments); }
        },
        "threadsRemoveRepaintFunc": {
          "value": function () { return this.threads_remove_repaint_func.apply(this, arguments); }
        },
        "threadsSetLockFunctions": {
          "value": function () { return this.threads_set_lock_functions.apply(this, arguments); }
        },
        "timeoutPoolNew": {
          "value": function () { return this.timeout_pool_new.apply(this, arguments); }
        },
        "ungrabKeyboard": {
          "value": function () { return this.ungrab_keyboard.apply(this, arguments); }
        },
        "ungrabPointer": {
          "value": function () { return this.ungrab_pointer.apply(this, arguments); }
        },
        "ungrabPointerForDevice": {
          "value": function () { return this.ungrab_pointer_for_device.apply(this, arguments); }
        },
        "unicodeToKeysym": {
          "value": function () { return this.unicode_to_keysym.apply(this, arguments); }
        },
        "unitsFromCm": {
          "value": function () { return this.units_from_cm.apply(this, arguments); }
        },
        "unitsFromEm": {
          "value": function () { return this.units_from_em.apply(this, arguments); }
        },
        "unitsFromEmForFont": {
          "value": function () { return this.units_from_em_for_font.apply(this, arguments); }
        },
        "unitsFromMm": {
          "value": function () { return this.units_from_mm.apply(this, arguments); }
        },
        "unitsFromPixels": {
          "value": function () { return this.units_from_pixels.apply(this, arguments); }
        },
        "unitsFromPt": {
          "value": function () { return this.units_from_pt.apply(this, arguments); }
        },
        "unitsFromString": {
          "value": function () { return this.units_from_string.apply(this, arguments); }
        },
        "utilNextP2": {
          "value": function () { return this.util_next_p2.apply(this, arguments); }
        },
        "valueDupPaintNode": {
          "value": function () { return this.value_dup_paint_node.apply(this, arguments); }
        },
        "valueGetColor": {
          "value": function () { return this.value_get_color.apply(this, arguments); }
        },
        "valueGetFixed": {
          "value": function () { return this.value_get_fixed.apply(this, arguments); }
        },
        "valueGetPaintNode": {
          "value": function () { return this.value_get_paint_node.apply(this, arguments); }
        },
        "valueGetShaderFloat": {
          "value": function () { return this.value_get_shader_float.apply(this, arguments); }
        },
        "valueGetShaderInt": {
          "value": function () { return this.value_get_shader_int.apply(this, arguments); }
        },
        "valueGetShaderMatrix": {
          "value": function () { return this.value_get_shader_matrix.apply(this, arguments); }
        },
        "valueGetUnits": {
          "value": function () { return this.value_get_units.apply(this, arguments); }
        },
        "valueSetColor": {
          "value": function () { return this.value_set_color.apply(this, arguments); }
        },
        "valueSetFixed": {
          "value": function () { return this.value_set_fixed.apply(this, arguments); }
        },
        "valueSetPaintNode": {
          "value": function () { return this.value_set_paint_node.apply(this, arguments); }
        },
        "valueSetShaderFloat": {
          "value": function () { return this.value_set_shader_float.apply(this, arguments); }
        },
        "valueSetShaderInt": {
          "value": function () { return this.value_set_shader_int.apply(this, arguments); }
        },
        "valueSetShaderMatrix": {
          "value": function () { return this.value_set_shader_matrix.apply(this, arguments); }
        },
        "valueSetUnits": {
          "value": function () { return this.value_set_units.apply(this, arguments); }
        },
        "valueTakePaintNode": {
          "value": function () { return this.value_take_paint_node.apply(this, arguments); }
        }
      }
    },
    "Cogl": {
      "class": {
        "AtlasTexture": {
          "prototype": {},
          "static": {}
        },
        "Attribute": {
          "prototype": {
            "getBuffer": {
              "value": function () { return this.get_buffer.apply(this, arguments); }
            },
            "getNormalized": {
              "value": function () { return this.get_normalized.apply(this, arguments); }
            },
            "setBuffer": {
              "value": function () { return this.set_buffer.apply(this, arguments); }
            },
            "setNormalized": {
              "value": function () { return this.set_normalized.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "AttributeBuffer": {
          "prototype": {},
          "static": {}
        },
        "Bitmap": {
          "prototype": {
            "getBuffer": {
              "value": function () { return this.get_buffer.apply(this, arguments); }
            },
            "getFormat": {
              "value": function () { return this.get_format.apply(this, arguments); }
            },
            "getHeight": {
              "value": function () { return this.get_height.apply(this, arguments); }
            },
            "getRowstride": {
              "value": function () { return this.get_rowstride.apply(this, arguments); }
            },
            "getWidth": {
              "value": function () { return this.get_width.apply(this, arguments); }
            }
          },
          "static": {
            "getSizeFromFile": {
              "value": function () { return this.get_size_from_file.apply(this, arguments); }
            }
          }
        },
        "Context": {
          "prototype": {
            "getDisplay": {
              "value": function () { return this.get_display.apply(this, arguments); }
            },
            "getRenderer": {
              "value": function () { return this.get_renderer.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Display": {
          "prototype": {
            "getRenderer": {
              "value": function () { return this.get_renderer.apply(this, arguments); }
            },
            "setOnscreenTemplate": {
              "value": function () { return this.set_onscreen_template.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Fixed": {
          "prototype": {},
          "static": {}
        },
        "FrameInfo": {
          "prototype": {
            "getFrameCounter": {
              "value": function () { return this.get_frame_counter.apply(this, arguments); }
            },
            "getOutput": {
              "value": function () { return this.get_output.apply(this, arguments); }
            },
            "getPresentationTime": {
              "value": function () { return this.get_presentation_time.apply(this, arguments); }
            },
            "getRefreshRate": {
              "value": function () { return this.get_refresh_rate.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "GLES2Context": {
          "prototype": {
            "getVtable": {
              "value": function () { return this.get_vtable.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "IndexBuffer": {
          "prototype": {},
          "static": {}
        },
        "Indices": {
          "prototype": {
            "getBuffer": {
              "value": function () { return this.get_buffer.apply(this, arguments); }
            },
            "getOffset": {
              "value": function () { return this.get_offset.apply(this, arguments); }
            },
            "getType": {
              "value": function () { return this.get_type.apply(this, arguments); }
            },
            "setOffset": {
              "value": function () { return this.set_offset.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "MatrixStack": {
          "prototype": {
            "getEntry": {
              "value": function () { return this.get_entry.apply(this, arguments); }
            },
            "getInverse": {
              "value": function () { return this.get_inverse.apply(this, arguments); }
            },
            "loadIdentity": {
              "value": function () { return this.load_identity.apply(this, arguments); }
            },
            "rotateEuler": {
              "value": function () { return this.rotate_euler.apply(this, arguments); }
            },
            "rotateQuaternion": {
              "value": function () { return this.rotate_quaternion.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Object": {
          "prototype": {
            "getUserData": {
              "value": function () { return this.get_user_data.apply(this, arguments); }
            },
            "setUserData": {
              "value": function () { return this.set_user_data.apply(this, arguments); }
            }
          },
          "static": {
            "valueGetObject": {
              "value": function () { return this.value_get_object.apply(this, arguments); }
            },
            "valueSetObject": {
              "value": function () { return this.value_set_object.apply(this, arguments); }
            }
          }
        },
        "Onscreen": {
          "prototype": {
            "addDirtyCallback": {
              "value": function () { return this.add_dirty_callback.apply(this, arguments); }
            },
            "addFrameCallback": {
              "value": function () { return this.add_frame_callback.apply(this, arguments); }
            },
            "addResizeCallback": {
              "value": function () { return this.add_resize_callback.apply(this, arguments); }
            },
            "addSwapBuffersCallback": {
              "value": function () { return this.add_swap_buffers_callback.apply(this, arguments); }
            },
            "getBufferAge": {
              "value": function () { return this.get_buffer_age.apply(this, arguments); }
            },
            "getFrameCounter": {
              "value": function () { return this.get_frame_counter.apply(this, arguments); }
            },
            "getResizable": {
              "value": function () { return this.get_resizable.apply(this, arguments); }
            },
            "removeDirtyCallback": {
              "value": function () { return this.remove_dirty_callback.apply(this, arguments); }
            },
            "removeFrameCallback": {
              "value": function () { return this.remove_frame_callback.apply(this, arguments); }
            },
            "removeResizeCallback": {
              "value": function () { return this.remove_resize_callback.apply(this, arguments); }
            },
            "removeSwapBuffersCallback": {
              "value": function () { return this.remove_swap_buffers_callback.apply(this, arguments); }
            },
            "setResizable": {
              "value": function () { return this.set_resizable.apply(this, arguments); }
            },
            "setSwapThrottled": {
              "value": function () { return this.set_swap_throttled.apply(this, arguments); }
            },
            "swapBuffers": {
              "value": function () { return this.swap_buffers.apply(this, arguments); }
            },
            "swapBuffersWithDamage": {
              "value": function () { return this.swap_buffers_with_damage.apply(this, arguments); }
            },
            "swapRegion": {
              "value": function () { return this.swap_region.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "OnscreenTemplate": {
          "prototype": {
            "setSamplesPerPixel": {
              "value": function () { return this.set_samples_per_pixel.apply(this, arguments); }
            },
            "setStereoEnabled": {
              "value": function () { return this.set_stereo_enabled.apply(this, arguments); }
            },
            "setSwapThrottled": {
              "value": function () { return this.set_swap_throttled.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Output": {
          "prototype": {
            "getHeight": {
              "value": function () { return this.get_height.apply(this, arguments); }
            },
            "getMmHeight": {
              "value": function () { return this.get_mm_height.apply(this, arguments); }
            },
            "getMmWidth": {
              "value": function () { return this.get_mm_width.apply(this, arguments); }
            },
            "getRefreshRate": {
              "value": function () { return this.get_refresh_rate.apply(this, arguments); }
            },
            "getSubpixelOrder": {
              "value": function () { return this.get_subpixel_order.apply(this, arguments); }
            },
            "getWidth": {
              "value": function () { return this.get_width.apply(this, arguments); }
            },
            "getX": {
              "value": function () { return this.get_x.apply(this, arguments); }
            },
            "getY": {
              "value": function () { return this.get_y.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Pipeline": {
          "prototype": {
            "addLayerSnippet": {
              "value": function () { return this.add_layer_snippet.apply(this, arguments); }
            },
            "addSnippet": {
              "value": function () { return this.add_snippet.apply(this, arguments); }
            },
            "foreachLayer": {
              "value": function () { return this.foreach_layer.apply(this, arguments); }
            },
            "getAlphaTestFunction": {
              "value": function () { return this.get_alpha_test_function.apply(this, arguments); }
            },
            "getAlphaTestReference": {
              "value": function () { return this.get_alpha_test_reference.apply(this, arguments); }
            },
            "getAmbient": {
              "value": function () { return this.get_ambient.apply(this, arguments); }
            },
            "getColor": {
              "value": function () { return this.get_color.apply(this, arguments); }
            },
            "getColorMask": {
              "value": function () { return this.get_color_mask.apply(this, arguments); }
            },
            "getCullFaceMode": {
              "value": function () { return this.get_cull_face_mode.apply(this, arguments); }
            },
            "getDepthState": {
              "value": function () { return this.get_depth_state.apply(this, arguments); }
            },
            "getDiffuse": {
              "value": function () { return this.get_diffuse.apply(this, arguments); }
            },
            "getEmission": {
              "value": function () { return this.get_emission.apply(this, arguments); }
            },
            "getFrontFaceWinding": {
              "value": function () { return this.get_front_face_winding.apply(this, arguments); }
            },
            "getLayerMagFilter": {
              "value": function () { return this.get_layer_mag_filter.apply(this, arguments); }
            },
            "getLayerMinFilter": {
              "value": function () { return this.get_layer_min_filter.apply(this, arguments); }
            },
            "getLayerPointSpriteCoordsEnabled": {
              "value": function () { return this.get_layer_point_sprite_coords_enabled.apply(this, arguments); }
            },
            "getLayerTexture": {
              "value": function () { return this.get_layer_texture.apply(this, arguments); }
            },
            "getLayerWrapModeP": {
              "value": function () { return this.get_layer_wrap_mode_p.apply(this, arguments); }
            },
            "getLayerWrapModeS": {
              "value": function () { return this.get_layer_wrap_mode_s.apply(this, arguments); }
            },
            "getLayerWrapModeT": {
              "value": function () { return this.get_layer_wrap_mode_t.apply(this, arguments); }
            },
            "getNLayers": {
              "value": function () { return this.get_n_layers.apply(this, arguments); }
            },
            "getPerVertexPointSize": {
              "value": function () { return this.get_per_vertex_point_size.apply(this, arguments); }
            },
            "getPointSize": {
              "value": function () { return this.get_point_size.apply(this, arguments); }
            },
            "getShininess": {
              "value": function () { return this.get_shininess.apply(this, arguments); }
            },
            "getSpecular": {
              "value": function () { return this.get_specular.apply(this, arguments); }
            },
            "getUniformLocation": {
              "value": function () { return this.get_uniform_location.apply(this, arguments); }
            },
            "getUserProgram": {
              "value": function () { return this.get_user_program.apply(this, arguments); }
            },
            "removeLayer": {
              "value": function () { return this.remove_layer.apply(this, arguments); }
            },
            "setAlphaTestFunction": {
              "value": function () { return this.set_alpha_test_function.apply(this, arguments); }
            },
            "setAmbient": {
              "value": function () { return this.set_ambient.apply(this, arguments); }
            },
            "setAmbientAndDiffuse": {
              "value": function () { return this.set_ambient_and_diffuse.apply(this, arguments); }
            },
            "setBlend": {
              "value": function () { return this.set_blend.apply(this, arguments); }
            },
            "setBlendConstant": {
              "value": function () { return this.set_blend_constant.apply(this, arguments); }
            },
            "setColor": {
              "value": function () { return this.set_color.apply(this, arguments); }
            },
            "setColor4f": {
              "value": function () { return this.set_color4f.apply(this, arguments); }
            },
            "setColor4ub": {
              "value": function () { return this.set_color4ub.apply(this, arguments); }
            },
            "setColorMask": {
              "value": function () { return this.set_color_mask.apply(this, arguments); }
            },
            "setCullFaceMode": {
              "value": function () { return this.set_cull_face_mode.apply(this, arguments); }
            },
            "setDepthState": {
              "value": function () { return this.set_depth_state.apply(this, arguments); }
            },
            "setDiffuse": {
              "value": function () { return this.set_diffuse.apply(this, arguments); }
            },
            "setEmission": {
              "value": function () { return this.set_emission.apply(this, arguments); }
            },
            "setFrontFaceWinding": {
              "value": function () { return this.set_front_face_winding.apply(this, arguments); }
            },
            "setLayerCombine": {
              "value": function () { return this.set_layer_combine.apply(this, arguments); }
            },
            "setLayerCombineConstant": {
              "value": function () { return this.set_layer_combine_constant.apply(this, arguments); }
            },
            "setLayerFilters": {
              "value": function () { return this.set_layer_filters.apply(this, arguments); }
            },
            "setLayerMatrix": {
              "value": function () { return this.set_layer_matrix.apply(this, arguments); }
            },
            "setLayerNullTexture": {
              "value": function () { return this.set_layer_null_texture.apply(this, arguments); }
            },
            "setLayerPointSpriteCoordsEnabled": {
              "value": function () { return this.set_layer_point_sprite_coords_enabled.apply(this, arguments); }
            },
            "setLayerTexture": {
              "value": function () { return this.set_layer_texture.apply(this, arguments); }
            },
            "setLayerWrapMode": {
              "value": function () { return this.set_layer_wrap_mode.apply(this, arguments); }
            },
            "setLayerWrapModeP": {
              "value": function () { return this.set_layer_wrap_mode_p.apply(this, arguments); }
            },
            "setLayerWrapModeS": {
              "value": function () { return this.set_layer_wrap_mode_s.apply(this, arguments); }
            },
            "setLayerWrapModeT": {
              "value": function () { return this.set_layer_wrap_mode_t.apply(this, arguments); }
            },
            "setPerVertexPointSize": {
              "value": function () { return this.set_per_vertex_point_size.apply(this, arguments); }
            },
            "setPointSize": {
              "value": function () { return this.set_point_size.apply(this, arguments); }
            },
            "setShininess": {
              "value": function () { return this.set_shininess.apply(this, arguments); }
            },
            "setSpecular": {
              "value": function () { return this.set_specular.apply(this, arguments); }
            },
            "setUniform1f": {
              "value": function () { return this.set_uniform_1f.apply(this, arguments); }
            },
            "setUniform1i": {
              "value": function () { return this.set_uniform_1i.apply(this, arguments); }
            },
            "setUniformFloat": {
              "value": function () { return this.set_uniform_float.apply(this, arguments); }
            },
            "setUniformInt": {
              "value": function () { return this.set_uniform_int.apply(this, arguments); }
            },
            "setUniformMatrix": {
              "value": function () { return this.set_uniform_matrix.apply(this, arguments); }
            },
            "setUserProgram": {
              "value": function () { return this.set_user_program.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "PixelBuffer": {
          "prototype": {},
          "static": {}
        },
        "Primitive": {
          "prototype": {
            "foreachAttribute": {
              "value": function () { return this.foreach_attribute.apply(this, arguments); }
            },
            "getFirstVertex": {
              "value": function () { return this.get_first_vertex.apply(this, arguments); }
            },
            "getIndices": {
              "value": function () { return this.get_indices.apply(this, arguments); }
            },
            "getMode": {
              "value": function () { return this.get_mode.apply(this, arguments); }
            },
            "getNVertices": {
              "value": function () { return this.get_n_vertices.apply(this, arguments); }
            },
            "setAttributes": {
              "value": function () { return this.set_attributes.apply(this, arguments); }
            },
            "setFirstVertex": {
              "value": function () { return this.set_first_vertex.apply(this, arguments); }
            },
            "setIndices": {
              "value": function () { return this.set_indices.apply(this, arguments); }
            },
            "setMode": {
              "value": function () { return this.set_mode.apply(this, arguments); }
            },
            "setNVertices": {
              "value": function () { return this.set_n_vertices.apply(this, arguments); }
            }
          },
          "static": {
            "textureSetAutoMipmap": {
              "value": function () { return this.texture_set_auto_mipmap.apply(this, arguments); }
            }
          }
        },
        "Renderer": {
          "prototype": {
            "addConstraint": {
              "value": function () { return this.add_constraint.apply(this, arguments); }
            },
            "checkOnscreenTemplate": {
              "value": function () { return this.check_onscreen_template.apply(this, arguments); }
            },
            "foreachOutput": {
              "value": function () { return this.foreach_output.apply(this, arguments); }
            },
            "getDriver": {
              "value": function () { return this.get_driver.apply(this, arguments); }
            },
            "getNFragmentTextureUnits": {
              "value": function () { return this.get_n_fragment_texture_units.apply(this, arguments); }
            },
            "getWinsysId": {
              "value": function () { return this.get_winsys_id.apply(this, arguments); }
            },
            "removeConstraint": {
              "value": function () { return this.remove_constraint.apply(this, arguments); }
            },
            "setDriver": {
              "value": function () { return this.set_driver.apply(this, arguments); }
            },
            "setWinsysId": {
              "value": function () { return this.set_winsys_id.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Snippet": {
          "prototype": {
            "getDeclarations": {
              "value": function () { return this.get_declarations.apply(this, arguments); }
            },
            "getHook": {
              "value": function () { return this.get_hook.apply(this, arguments); }
            },
            "getPost": {
              "value": function () { return this.get_post.apply(this, arguments); }
            },
            "getPre": {
              "value": function () { return this.get_pre.apply(this, arguments); }
            },
            "getReplace": {
              "value": function () { return this.get_replace.apply(this, arguments); }
            },
            "setDeclarations": {
              "value": function () { return this.set_declarations.apply(this, arguments); }
            },
            "setPost": {
              "value": function () { return this.set_post.apply(this, arguments); }
            },
            "setPre": {
              "value": function () { return this.set_pre.apply(this, arguments); }
            },
            "setReplace": {
              "value": function () { return this.set_replace.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "SubTexture": {
          "prototype": {
            "getParent": {
              "value": function () { return this.get_parent.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "SwapChain": {
          "prototype": {
            "setHasAlpha": {
              "value": function () { return this.set_has_alpha.apply(this, arguments); }
            },
            "setLength": {
              "value": function () { return this.set_length.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Texture2D": {
          "prototype": {},
          "static": {}
        },
        "Texture2DSliced": {
          "prototype": {},
          "static": {}
        },
        "Texture3D": {
          "prototype": {},
          "static": {}
        },
        "TexturePixmapX11": {
          "prototype": {
            "isUsingTfpExtension": {
              "value": function () { return this.is_using_tfp_extension.apply(this, arguments); }
            },
            "newRight": {
              "value": function () { return this.new_right.apply(this, arguments); }
            },
            "setDamageObject": {
              "value": function () { return this.set_damage_object.apply(this, arguments); }
            },
            "updateArea": {
              "value": function () { return this.update_area.apply(this, arguments); }
            }
          },
          "static": {
            "errorQuark": {
              "value": function () { return this.error_quark.apply(this, arguments); }
            }
          }
        },
        "TextureRectangle": {
          "prototype": {},
          "static": {}
        }
      },
      "static": {
        "bitmapErrorQuark": {
          "value": function () { return this.bitmap_error_quark.apply(this, arguments); }
        },
        "blendStringErrorQuark": {
          "value": function () { return this.blend_string_error_quark.apply(this, arguments); }
        },
        "bufferGetSize": {
          "value": function () { return this.buffer_get_size.apply(this, arguments); }
        },
        "bufferGetUpdateHint": {
          "value": function () { return this.buffer_get_update_hint.apply(this, arguments); }
        },
        "bufferMap": {
          "value": function () { return this.buffer_map.apply(this, arguments); }
        },
        "bufferMapRange": {
          "value": function () { return this.buffer_map_range.apply(this, arguments); }
        },
        "bufferSetData": {
          "value": function () { return this.buffer_set_data.apply(this, arguments); }
        },
        "bufferSetUpdateHint": {
          "value": function () { return this.buffer_set_update_hint.apply(this, arguments); }
        },
        "bufferUnmap": {
          "value": function () { return this.buffer_unmap.apply(this, arguments); }
        },
        "colorEqual": {
          "value": function () { return this.color_equal.apply(this, arguments); }
        },
        "colorInitFromHsl": {
          "value": function () { return this.color_init_from_hsl.apply(this, arguments); }
        },
        "debugMatrixEntryPrint": {
          "value": function () { return this.debug_matrix_entry_print.apply(this, arguments); }
        },
        "debugMatrixPrint": {
          "value": function () { return this.debug_matrix_print.apply(this, arguments); }
        },
        "debugObjectForeachType": {
          "value": function () { return this.debug_object_foreach_type.apply(this, arguments); }
        },
        "debugObjectPrintInstances": {
          "value": function () { return this.debug_object_print_instances.apply(this, arguments); }
        },
        "eglContextGetEglContext": {
          "value": function () { return this.egl_context_get_egl_context.apply(this, arguments); }
        },
        "eglContextGetEglDisplay": {
          "value": function () { return this.egl_context_get_egl_display.apply(this, arguments); }
        },
        "errorCopy": {
          "value": function () { return this.error_copy.apply(this, arguments); }
        },
        "errorFree": {
          "value": function () { return this.error_free.apply(this, arguments); }
        },
        "errorMatches": {
          "value": function () { return this.error_matches.apply(this, arguments); }
        },
        "eulerEqual": {
          "value": function () { return this.euler_equal.apply(this, arguments); }
        },
        "foreachFeature": {
          "value": function () { return this.foreach_feature.apply(this, arguments); }
        },
        "framebufferErrorQuark": {
          "value": function () { return this.framebuffer_error_quark.apply(this, arguments); }
        },
        "getClockTime": {
          "value": function () { return this.get_clock_time.apply(this, arguments); }
        },
        "getDrawFramebuffer": {
          "value": function () { return this.get_draw_framebuffer.apply(this, arguments); }
        },
        "getRectangleIndices": {
          "value": function () { return this.get_rectangle_indices.apply(this, arguments); }
        },
        "getStaticIdentityQuaternion": {
          "value": function () { return this.get_static_identity_quaternion.apply(this, arguments); }
        },
        "getStaticZeroQuaternion": {
          "value": function () { return this.get_static_zero_quaternion.apply(this, arguments); }
        },
        "gles2GetCurrentVtable": {
          "value": function () { return this.gles2_get_current_vtable.apply(this, arguments); }
        },
        "gles2Texture2dNewFromHandle": {
          "value": function () { return this.gles2_texture_2d_new_from_handle.apply(this, arguments); }
        },
        "gles2TextureGetHandle": {
          "value": function () { return this.gles2_texture_get_handle.apply(this, arguments); }
        },
        "glibRendererSourceNew": {
          "value": function () { return this.glib_renderer_source_new.apply(this, arguments); }
        },
        "glibSourceNew": {
          "value": function () { return this.glib_source_new.apply(this, arguments); }
        },
        "glxContextGetGlxContext": {
          "value": function () { return this.glx_context_get_glx_context.apply(this, arguments); }
        },
        "gtypeMatrixGetType": {
          "value": function () { return this.gtype_matrix_get_type.apply(this, arguments); }
        },
        "handleGetType": {
          "value": function () { return this.handle_get_type.apply(this, arguments); }
        },
        "handleRef": {
          "value": function () { return this.handle_ref.apply(this, arguments); }
        },
        "handleUnref": {
          "value": function () { return this.handle_unref.apply(this, arguments); }
        },
        "hasFeature": {
          "value": function () { return this.has_feature.apply(this, arguments); }
        },
        "hasFeatures": {
          "value": function () { return this.has_features.apply(this, arguments); }
        },
        "isAtlasTexture": {
          "value": function () { return this.is_atlas_texture.apply(this, arguments); }
        },
        "isAttribute": {
          "value": function () { return this.is_attribute.apply(this, arguments); }
        },
        "isAttributeBuffer": {
          "value": function () { return this.is_attribute_buffer.apply(this, arguments); }
        },
        "isBitmap": {
          "value": function () { return this.is_bitmap.apply(this, arguments); }
        },
        "isBuffer": {
          "value": function () { return this.is_buffer.apply(this, arguments); }
        },
        "isContext": {
          "value": function () { return this.is_context.apply(this, arguments); }
        },
        "isDisplay": {
          "value": function () { return this.is_display.apply(this, arguments); }
        },
        "isFrameInfo": {
          "value": function () { return this.is_frame_info.apply(this, arguments); }
        },
        "isFramebuffer": {
          "value": function () { return this.is_framebuffer.apply(this, arguments); }
        },
        "isGles2Context": {
          "value": function () { return this.is_gles2_context.apply(this, arguments); }
        },
        "isIndexBuffer": {
          "value": function () { return this.is_index_buffer.apply(this, arguments); }
        },
        "isIndices": {
          "value": function () { return this.is_indices.apply(this, arguments); }
        },
        "isMatrixStack": {
          "value": function () { return this.is_matrix_stack.apply(this, arguments); }
        },
        "isOnscreen": {
          "value": function () { return this.is_onscreen.apply(this, arguments); }
        },
        "isOnscreenTemplate": {
          "value": function () { return this.is_onscreen_template.apply(this, arguments); }
        },
        "isOutput": {
          "value": function () { return this.is_output.apply(this, arguments); }
        },
        "isPipeline": {
          "value": function () { return this.is_pipeline.apply(this, arguments); }
        },
        "isPixelBuffer": {
          "value": function () { return this.is_pixel_buffer.apply(this, arguments); }
        },
        "isPrimitive": {
          "value": function () { return this.is_primitive.apply(this, arguments); }
        },
        "isPrimitiveTexture": {
          "value": function () { return this.is_primitive_texture.apply(this, arguments); }
        },
        "isRenderer": {
          "value": function () { return this.is_renderer.apply(this, arguments); }
        },
        "isSnippet": {
          "value": function () { return this.is_snippet.apply(this, arguments); }
        },
        "isSubTexture": {
          "value": function () { return this.is_sub_texture.apply(this, arguments); }
        },
        "isSwapChain": {
          "value": function () { return this.is_swap_chain.apply(this, arguments); }
        },
        "isTexture": {
          "value": function () { return this.is_texture.apply(this, arguments); }
        },
        "isTexture2d": {
          "value": function () { return this.is_texture_2d.apply(this, arguments); }
        },
        "isTexture2dSliced": {
          "value": function () { return this.is_texture_2d_sliced.apply(this, arguments); }
        },
        "isTexture3d": {
          "value": function () { return this.is_texture_3d.apply(this, arguments); }
        },
        "isTexturePixmapX11": {
          "value": function () { return this.is_texture_pixmap_x11.apply(this, arguments); }
        },
        "isTextureRectangle": {
          "value": function () { return this.is_texture_rectangle.apply(this, arguments); }
        },
        "kmsDisplayQueueModesReset": {
          "value": function () { return this.kms_display_queue_modes_reset.apply(this, arguments); }
        },
        "kmsDisplaySetIgnoreCrtc": {
          "value": function () { return this.kms_display_set_ignore_crtc.apply(this, arguments); }
        },
        "kmsDisplaySetLayout": {
          "value": function () { return this.kms_display_set_layout.apply(this, arguments); }
        },
        "kmsRendererGetGbm": {
          "value": function () { return this.kms_renderer_get_gbm.apply(this, arguments); }
        },
        "kmsRendererGetKmsFd": {
          "value": function () { return this.kms_renderer_get_kms_fd.apply(this, arguments); }
        },
        "kmsRendererSetKmsFd": {
          "value": function () { return this.kms_renderer_set_kms_fd.apply(this, arguments); }
        },
        "matrixEqual": {
          "value": function () { return this.matrix_equal.apply(this, arguments); }
        },
        "metaTextureForeachInRegion": {
          "value": function () { return this.meta_texture_foreach_in_region.apply(this, arguments); }
        },
        "pollRendererDispatch": {
          "value": function () { return this.poll_renderer_dispatch.apply(this, arguments); }
        },
        "pollRendererGetInfo": {
          "value": function () { return this.poll_renderer_get_info.apply(this, arguments); }
        },
        "popGles2Context": {
          "value": function () { return this.pop_gles2_context.apply(this, arguments); }
        },
        "pushGles2Context": {
          "value": function () { return this.push_gles2_context.apply(this, arguments); }
        },
        "quaternionEqual": {
          "value": function () { return this.quaternion_equal.apply(this, arguments); }
        },
        "rendererErrorQuark": {
          "value": function () { return this.renderer_error_quark.apply(this, arguments); }
        },
        "textureErrorQuark": {
          "value": function () { return this.texture_error_quark.apply(this, arguments); }
        },
        "vector3Add": {
          "value": function () { return this.vector3_add.apply(this, arguments); }
        },
        "vector3Copy": {
          "value": function () { return this.vector3_copy.apply(this, arguments); }
        },
        "vector3CrossProduct": {
          "value": function () { return this.vector3_cross_product.apply(this, arguments); }
        },
        "vector3Distance": {
          "value": function () { return this.vector3_distance.apply(this, arguments); }
        },
        "vector3DivideScalar": {
          "value": function () { return this.vector3_divide_scalar.apply(this, arguments); }
        },
        "vector3DotProduct": {
          "value": function () { return this.vector3_dot_product.apply(this, arguments); }
        },
        "vector3Equal": {
          "value": function () { return this.vector3_equal.apply(this, arguments); }
        },
        "vector3EqualWithEpsilon": {
          "value": function () { return this.vector3_equal_with_epsilon.apply(this, arguments); }
        },
        "vector3Free": {
          "value": function () { return this.vector3_free.apply(this, arguments); }
        },
        "vector3Init": {
          "value": function () { return this.vector3_init.apply(this, arguments); }
        },
        "vector3InitZero": {
          "value": function () { return this.vector3_init_zero.apply(this, arguments); }
        },
        "vector3Invert": {
          "value": function () { return this.vector3_invert.apply(this, arguments); }
        },
        "vector3Magnitude": {
          "value": function () { return this.vector3_magnitude.apply(this, arguments); }
        },
        "vector3MultiplyScalar": {
          "value": function () { return this.vector3_multiply_scalar.apply(this, arguments); }
        },
        "vector3Normalize": {
          "value": function () { return this.vector3_normalize.apply(this, arguments); }
        },
        "vector3Subtract": {
          "value": function () { return this.vector3_subtract.apply(this, arguments); }
        },
        "waylandDisplaySetCompositorDisplay": {
          "value": function () { return this.wayland_display_set_compositor_display.apply(this, arguments); }
        },
        "waylandOnscreenGetShellSurface": {
          "value": function () { return this.wayland_onscreen_get_shell_surface.apply(this, arguments); }
        },
        "waylandOnscreenGetSurface": {
          "value": function () { return this.wayland_onscreen_get_surface.apply(this, arguments); }
        },
        "waylandOnscreenResize": {
          "value": function () { return this.wayland_onscreen_resize.apply(this, arguments); }
        },
        "waylandOnscreenSetForeignSurface": {
          "value": function () { return this.wayland_onscreen_set_foreign_surface.apply(this, arguments); }
        },
        "waylandRendererGetDisplay": {
          "value": function () { return this.wayland_renderer_get_display.apply(this, arguments); }
        },
        "waylandRendererSetEventDispatchEnabled": {
          "value": function () { return this.wayland_renderer_set_event_dispatch_enabled.apply(this, arguments); }
        },
        "waylandRendererSetForeignDisplay": {
          "value": function () { return this.wayland_renderer_set_foreign_display.apply(this, arguments); }
        },
        "waylandTexture2dNewFromBuffer": {
          "value": function () { return this.wayland_texture_2d_new_from_buffer.apply(this, arguments); }
        },
        "waylandTextureSetRegionFromShmBuffer": {
          "value": function () { return this.wayland_texture_set_region_from_shm_buffer.apply(this, arguments); }
        },
        "x11OnscreenGetVisualXid": {
          "value": function () { return this.x11_onscreen_get_visual_xid.apply(this, arguments); }
        },
        "x11OnscreenGetWindowXid": {
          "value": function () { return this.x11_onscreen_get_window_xid.apply(this, arguments); }
        },
        "x11OnscreenSetForeignWindowXid": {
          "value": function () { return this.x11_onscreen_set_foreign_window_xid.apply(this, arguments); }
        },
        "xlibGetDisplay": {
          "value": function () { return this.xlib_get_display.apply(this, arguments); }
        },
        "xlibHandleEvent": {
          "value": function () { return this.xlib_handle_event.apply(this, arguments); }
        },
        "xlibSetDisplay": {
          "value": function () { return this.xlib_set_display.apply(this, arguments); }
        }
      }
    },
    "CoglPango": {
      "class": {
        "Renderer": {
          "prototype": {},
          "static": {}
        }
      },
      "static": {
        "ensureGlyphCacheForLayout": {
          "value": function () { return this.ensure_glyph_cache_for_layout.apply(this, arguments); }
        },
        "fontMapClearGlyphCache": {
          "value": function () { return this.font_map_clear_glyph_cache.apply(this, arguments); }
        },
        "fontMapCreateContext": {
          "value": function () { return this.font_map_create_context.apply(this, arguments); }
        },
        "fontMapGetRenderer": {
          "value": function () { return this.font_map_get_renderer.apply(this, arguments); }
        },
        "fontMapGetUseMipmapping": {
          "value": function () { return this.font_map_get_use_mipmapping.apply(this, arguments); }
        },
        "fontMapNew": {
          "value": function () { return this.font_map_new.apply(this, arguments); }
        },
        "fontMapSetResolution": {
          "value": function () { return this.font_map_set_resolution.apply(this, arguments); }
        },
        "fontMapSetUseMipmapping": {
          "value": function () { return this.font_map_set_use_mipmapping.apply(this, arguments); }
        },
        "renderLayout": {
          "value": function () { return this.render_layout.apply(this, arguments); }
        },
        "renderLayoutLine": {
          "value": function () { return this.render_layout_line.apply(this, arguments); }
        },
        "renderLayoutSubpixel": {
          "value": function () { return this.render_layout_subpixel.apply(this, arguments); }
        },
        "showLayout": {
          "value": function () { return this.show_layout.apply(this, arguments); }
        },
        "showLayoutLine": {
          "value": function () { return this.show_layout_line.apply(this, arguments); }
        }
      }
    },
    "GLib": {
      "class": {},
      "static": {
        "asciiDigitValue": {
          "value": function () { return this.ascii_digit_value.apply(this, arguments); }
        },
        "asciiDtostr": {
          "value": function () { return this.ascii_dtostr.apply(this, arguments); }
        },
        "asciiFormatd": {
          "value": function () { return this.ascii_formatd.apply(this, arguments); }
        },
        "asciiStrcasecmp": {
          "value": function () { return this.ascii_strcasecmp.apply(this, arguments); }
        },
        "asciiStrdown": {
          "value": function () { return this.ascii_strdown.apply(this, arguments); }
        },
        "asciiStrncasecmp": {
          "value": function () { return this.ascii_strncasecmp.apply(this, arguments); }
        },
        "asciiStrtod": {
          "value": function () { return this.ascii_strtod.apply(this, arguments); }
        },
        "asciiStrtoll": {
          "value": function () { return this.ascii_strtoll.apply(this, arguments); }
        },
        "asciiStrtoull": {
          "value": function () { return this.ascii_strtoull.apply(this, arguments); }
        },
        "asciiStrup": {
          "value": function () { return this.ascii_strup.apply(this, arguments); }
        },
        "asciiTolower": {
          "value": function () { return this.ascii_tolower.apply(this, arguments); }
        },
        "asciiToupper": {
          "value": function () { return this.ascii_toupper.apply(this, arguments); }
        },
        "asciiXdigitValue": {
          "value": function () { return this.ascii_xdigit_value.apply(this, arguments); }
        },
        "assertWarning": {
          "value": function () { return this.assert_warning.apply(this, arguments); }
        },
        "assertionMessage": {
          "value": function () { return this.assertion_message.apply(this, arguments); }
        },
        "assertionMessageCmpnum": {
          "value": function () { return this.assertion_message_cmpnum.apply(this, arguments); }
        },
        "assertionMessageCmpstr": {
          "value": function () { return this.assertion_message_cmpstr.apply(this, arguments); }
        },
        "assertionMessageError": {
          "value": function () { return this.assertion_message_error.apply(this, arguments); }
        },
        "assertionMessageExpr": {
          "value": function () { return this.assertion_message_expr.apply(this, arguments); }
        },
        "atomicIntAdd": {
          "value": function () { return this.atomic_int_add.apply(this, arguments); }
        },
        "atomicIntAnd": {
          "value": function () { return this.atomic_int_and.apply(this, arguments); }
        },
        "atomicIntCompareAndExchange": {
          "value": function () { return this.atomic_int_compare_and_exchange.apply(this, arguments); }
        },
        "atomicIntDecAndTest": {
          "value": function () { return this.atomic_int_dec_and_test.apply(this, arguments); }
        },
        "atomicIntExchangeAndAdd": {
          "value": function () { return this.atomic_int_exchange_and_add.apply(this, arguments); }
        },
        "atomicIntGet": {
          "value": function () { return this.atomic_int_get.apply(this, arguments); }
        },
        "atomicIntInc": {
          "value": function () { return this.atomic_int_inc.apply(this, arguments); }
        },
        "atomicIntOr": {
          "value": function () { return this.atomic_int_or.apply(this, arguments); }
        },
        "atomicIntSet": {
          "value": function () { return this.atomic_int_set.apply(this, arguments); }
        },
        "atomicIntXor": {
          "value": function () { return this.atomic_int_xor.apply(this, arguments); }
        },
        "atomicPointerAdd": {
          "value": function () { return this.atomic_pointer_add.apply(this, arguments); }
        },
        "atomicPointerAnd": {
          "value": function () { return this.atomic_pointer_and.apply(this, arguments); }
        },
        "atomicPointerCompareAndExchange": {
          "value": function () { return this.atomic_pointer_compare_and_exchange.apply(this, arguments); }
        },
        "atomicPointerGet": {
          "value": function () { return this.atomic_pointer_get.apply(this, arguments); }
        },
        "atomicPointerOr": {
          "value": function () { return this.atomic_pointer_or.apply(this, arguments); }
        },
        "atomicPointerSet": {
          "value": function () { return this.atomic_pointer_set.apply(this, arguments); }
        },
        "atomicPointerXor": {
          "value": function () { return this.atomic_pointer_xor.apply(this, arguments); }
        },
        "base64Decode": {
          "value": function () { return this.base64_decode.apply(this, arguments); }
        },
        "base64DecodeInplace": {
          "value": function () { return this.base64_decode_inplace.apply(this, arguments); }
        },
        "base64DecodeStep": {
          "value": function () { return this.base64_decode_step.apply(this, arguments); }
        },
        "base64Encode": {
          "value": function () { return this.base64_encode.apply(this, arguments); }
        },
        "base64EncodeClose": {
          "value": function () { return this.base64_encode_close.apply(this, arguments); }
        },
        "base64EncodeStep": {
          "value": function () { return this.base64_encode_step.apply(this, arguments); }
        },
        "bitLock": {
          "value": function () { return this.bit_lock.apply(this, arguments); }
        },
        "bitNthLsf": {
          "value": function () { return this.bit_nth_lsf.apply(this, arguments); }
        },
        "bitNthMsf": {
          "value": function () { return this.bit_nth_msf.apply(this, arguments); }
        },
        "bitStorage": {
          "value": function () { return this.bit_storage.apply(this, arguments); }
        },
        "bitTrylock": {
          "value": function () { return this.bit_trylock.apply(this, arguments); }
        },
        "bitUnlock": {
          "value": function () { return this.bit_unlock.apply(this, arguments); }
        },
        "bookmarkFileErrorQuark": {
          "value": function () { return this.bookmark_file_error_quark.apply(this, arguments); }
        },
        "buildFilename": {
          "value": function () { return this.build_filename.apply(this, arguments); }
        },
        "buildFilenamev": {
          "value": function () { return this.build_filenamev.apply(this, arguments); }
        },
        "buildPath": {
          "value": function () { return this.build_path.apply(this, arguments); }
        },
        "buildPathv": {
          "value": function () { return this.build_pathv.apply(this, arguments); }
        },
        "byteArrayFree": {
          "value": function () { return this.byte_array_free.apply(this, arguments); }
        },
        "byteArrayFreeToBytes": {
          "value": function () { return this.byte_array_free_to_bytes.apply(this, arguments); }
        },
        "byteArrayNew": {
          "value": function () { return this.byte_array_new.apply(this, arguments); }
        },
        "byteArrayNewTake": {
          "value": function () { return this.byte_array_new_take.apply(this, arguments); }
        },
        "byteArrayUnref": {
          "value": function () { return this.byte_array_unref.apply(this, arguments); }
        },
        "checkVersion": {
          "value": function () { return this.check_version.apply(this, arguments); }
        },
        "checksumTypeGetLength": {
          "value": function () { return this.checksum_type_get_length.apply(this, arguments); }
        },
        "childWatchAdd": {
          "value": function () { return this.child_watch_add.apply(this, arguments); }
        },
        "childWatchAddFull": {
          "value": function () { return this.child_watch_add_full.apply(this, arguments); }
        },
        "childWatchSourceNew": {
          "value": function () { return this.child_watch_source_new.apply(this, arguments); }
        },
        "clearError": {
          "value": function () { return this.clear_error.apply(this, arguments); }
        },
        "clearPointer": {
          "value": function () { return this.clear_pointer.apply(this, arguments); }
        },
        "computeChecksumForBytes": {
          "value": function () { return this.compute_checksum_for_bytes.apply(this, arguments); }
        },
        "computeChecksumForData": {
          "value": function () { return this.compute_checksum_for_data.apply(this, arguments); }
        },
        "computeChecksumForString": {
          "value": function () { return this.compute_checksum_for_string.apply(this, arguments); }
        },
        "computeHmacForData": {
          "value": function () { return this.compute_hmac_for_data.apply(this, arguments); }
        },
        "computeHmacForString": {
          "value": function () { return this.compute_hmac_for_string.apply(this, arguments); }
        },
        "convertErrorQuark": {
          "value": function () { return this.convert_error_quark.apply(this, arguments); }
        },
        "convertWithFallback": {
          "value": function () { return this.convert_with_fallback.apply(this, arguments); }
        },
        "convertWithIconv": {
          "value": function () { return this.convert_with_iconv.apply(this, arguments); }
        },
        "datalistClear": {
          "value": function () { return this.datalist_clear.apply(this, arguments); }
        },
        "datalistForeach": {
          "value": function () { return this.datalist_foreach.apply(this, arguments); }
        },
        "datalistGetData": {
          "value": function () { return this.datalist_get_data.apply(this, arguments); }
        },
        "datalistGetFlags": {
          "value": function () { return this.datalist_get_flags.apply(this, arguments); }
        },
        "datalistIdDupData": {
          "value": function () { return this.datalist_id_dup_data.apply(this, arguments); }
        },
        "datalistIdGetData": {
          "value": function () { return this.datalist_id_get_data.apply(this, arguments); }
        },
        "datalistIdRemoveNoNotify": {
          "value": function () { return this.datalist_id_remove_no_notify.apply(this, arguments); }
        },
        "datalistIdReplaceData": {
          "value": function () { return this.datalist_id_replace_data.apply(this, arguments); }
        },
        "datalistIdSetDataFull": {
          "value": function () { return this.datalist_id_set_data_full.apply(this, arguments); }
        },
        "datalistInit": {
          "value": function () { return this.datalist_init.apply(this, arguments); }
        },
        "datalistSetFlags": {
          "value": function () { return this.datalist_set_flags.apply(this, arguments); }
        },
        "datalistUnsetFlags": {
          "value": function () { return this.datalist_unset_flags.apply(this, arguments); }
        },
        "datasetDestroy": {
          "value": function () { return this.dataset_destroy.apply(this, arguments); }
        },
        "datasetForeach": {
          "value": function () { return this.dataset_foreach.apply(this, arguments); }
        },
        "datasetIdGetData": {
          "value": function () { return this.dataset_id_get_data.apply(this, arguments); }
        },
        "datasetIdRemoveNoNotify": {
          "value": function () { return this.dataset_id_remove_no_notify.apply(this, arguments); }
        },
        "datasetIdSetDataFull": {
          "value": function () { return this.dataset_id_set_data_full.apply(this, arguments); }
        },
        "dateGetDaysInMonth": {
          "value": function () { return this.date_get_days_in_month.apply(this, arguments); }
        },
        "dateGetMondayWeeksInYear": {
          "value": function () { return this.date_get_monday_weeks_in_year.apply(this, arguments); }
        },
        "dateGetSundayWeeksInYear": {
          "value": function () { return this.date_get_sunday_weeks_in_year.apply(this, arguments); }
        },
        "dateIsLeapYear": {
          "value": function () { return this.date_is_leap_year.apply(this, arguments); }
        },
        "dateStrftime": {
          "value": function () { return this.date_strftime.apply(this, arguments); }
        },
        "dateTimeCompare": {
          "value": function () { return this.date_time_compare.apply(this, arguments); }
        },
        "dateTimeEqual": {
          "value": function () { return this.date_time_equal.apply(this, arguments); }
        },
        "dateTimeHash": {
          "value": function () { return this.date_time_hash.apply(this, arguments); }
        },
        "dateValidDay": {
          "value": function () { return this.date_valid_day.apply(this, arguments); }
        },
        "dateValidDmy": {
          "value": function () { return this.date_valid_dmy.apply(this, arguments); }
        },
        "dateValidJulian": {
          "value": function () { return this.date_valid_julian.apply(this, arguments); }
        },
        "dateValidMonth": {
          "value": function () { return this.date_valid_month.apply(this, arguments); }
        },
        "dateValidWeekday": {
          "value": function () { return this.date_valid_weekday.apply(this, arguments); }
        },
        "dateValidYear": {
          "value": function () { return this.date_valid_year.apply(this, arguments); }
        },
        "dirMakeTmp": {
          "value": function () { return this.dir_make_tmp.apply(this, arguments); }
        },
        "directEqual": {
          "value": function () { return this.direct_equal.apply(this, arguments); }
        },
        "directHash": {
          "value": function () { return this.direct_hash.apply(this, arguments); }
        },
        "doubleEqual": {
          "value": function () { return this.double_equal.apply(this, arguments); }
        },
        "doubleHash": {
          "value": function () { return this.double_hash.apply(this, arguments); }
        },
        "environGetenv": {
          "value": function () { return this.environ_getenv.apply(this, arguments); }
        },
        "environSetenv": {
          "value": function () { return this.environ_setenv.apply(this, arguments); }
        },
        "environUnsetenv": {
          "value": function () { return this.environ_unsetenv.apply(this, arguments); }
        },
        "fileErrorFromErrno": {
          "value": function () { return this.file_error_from_errno.apply(this, arguments); }
        },
        "fileErrorQuark": {
          "value": function () { return this.file_error_quark.apply(this, arguments); }
        },
        "fileGetContents": {
          "value": function () { return this.file_get_contents.apply(this, arguments); }
        },
        "fileOpenTmp": {
          "value": function () { return this.file_open_tmp.apply(this, arguments); }
        },
        "fileReadLink": {
          "value": function () { return this.file_read_link.apply(this, arguments); }
        },
        "fileSetContents": {
          "value": function () { return this.file_set_contents.apply(this, arguments); }
        },
        "fileTest": {
          "value": function () { return this.file_test.apply(this, arguments); }
        },
        "filenameDisplayBasename": {
          "value": function () { return this.filename_display_basename.apply(this, arguments); }
        },
        "filenameDisplayName": {
          "value": function () { return this.filename_display_name.apply(this, arguments); }
        },
        "filenameFromUri": {
          "value": function () { return this.filename_from_uri.apply(this, arguments); }
        },
        "filenameFromUtf8": {
          "value": function () { return this.filename_from_utf8.apply(this, arguments); }
        },
        "filenameToUri": {
          "value": function () { return this.filename_to_uri.apply(this, arguments); }
        },
        "filenameToUtf8": {
          "value": function () { return this.filename_to_utf8.apply(this, arguments); }
        },
        "findProgramInPath": {
          "value": function () { return this.find_program_in_path.apply(this, arguments); }
        },
        "formatSize": {
          "value": function () { return this.format_size.apply(this, arguments); }
        },
        "formatSizeForDisplay": {
          "value": function () { return this.format_size_for_display.apply(this, arguments); }
        },
        "formatSizeFull": {
          "value": function () { return this.format_size_full.apply(this, arguments); }
        },
        "getApplicationName": {
          "value": function () { return this.get_application_name.apply(this, arguments); }
        },
        "getCharset": {
          "value": function () { return this.get_charset.apply(this, arguments); }
        },
        "getCodeset": {
          "value": function () { return this.get_codeset.apply(this, arguments); }
        },
        "getCurrentDir": {
          "value": function () { return this.get_current_dir.apply(this, arguments); }
        },
        "getCurrentTime": {
          "value": function () { return this.get_current_time.apply(this, arguments); }
        },
        "getEnviron": {
          "value": function () { return this.get_environ.apply(this, arguments); }
        },
        "getFilenameCharsets": {
          "value": function () { return this.get_filename_charsets.apply(this, arguments); }
        },
        "getHomeDir": {
          "value": function () { return this.get_home_dir.apply(this, arguments); }
        },
        "getHostName": {
          "value": function () { return this.get_host_name.apply(this, arguments); }
        },
        "getLanguageNames": {
          "value": function () { return this.get_language_names.apply(this, arguments); }
        },
        "getLocaleVariants": {
          "value": function () { return this.get_locale_variants.apply(this, arguments); }
        },
        "getMonotonicTime": {
          "value": function () { return this.get_monotonic_time.apply(this, arguments); }
        },
        "getNumProcessors": {
          "value": function () { return this.get_num_processors.apply(this, arguments); }
        },
        "getPrgname": {
          "value": function () { return this.get_prgname.apply(this, arguments); }
        },
        "getRealName": {
          "value": function () { return this.get_real_name.apply(this, arguments); }
        },
        "getRealTime": {
          "value": function () { return this.get_real_time.apply(this, arguments); }
        },
        "getSystemConfigDirs": {
          "value": function () { return this.get_system_config_dirs.apply(this, arguments); }
        },
        "getSystemDataDirs": {
          "value": function () { return this.get_system_data_dirs.apply(this, arguments); }
        },
        "getTmpDir": {
          "value": function () { return this.get_tmp_dir.apply(this, arguments); }
        },
        "getUserCacheDir": {
          "value": function () { return this.get_user_cache_dir.apply(this, arguments); }
        },
        "getUserConfigDir": {
          "value": function () { return this.get_user_config_dir.apply(this, arguments); }
        },
        "getUserDataDir": {
          "value": function () { return this.get_user_data_dir.apply(this, arguments); }
        },
        "getUserName": {
          "value": function () { return this.get_user_name.apply(this, arguments); }
        },
        "getUserRuntimeDir": {
          "value": function () { return this.get_user_runtime_dir.apply(this, arguments); }
        },
        "getUserSpecialDir": {
          "value": function () { return this.get_user_special_dir.apply(this, arguments); }
        },
        "hashTableAdd": {
          "value": function () { return this.hash_table_add.apply(this, arguments); }
        },
        "hashTableContains": {
          "value": function () { return this.hash_table_contains.apply(this, arguments); }
        },
        "hashTableDestroy": {
          "value": function () { return this.hash_table_destroy.apply(this, arguments); }
        },
        "hashTableInsert": {
          "value": function () { return this.hash_table_insert.apply(this, arguments); }
        },
        "hashTableLookup": {
          "value": function () { return this.hash_table_lookup.apply(this, arguments); }
        },
        "hashTableLookupExtended": {
          "value": function () { return this.hash_table_lookup_extended.apply(this, arguments); }
        },
        "hashTableRemove": {
          "value": function () { return this.hash_table_remove.apply(this, arguments); }
        },
        "hashTableRemoveAll": {
          "value": function () { return this.hash_table_remove_all.apply(this, arguments); }
        },
        "hashTableReplace": {
          "value": function () { return this.hash_table_replace.apply(this, arguments); }
        },
        "hashTableSize": {
          "value": function () { return this.hash_table_size.apply(this, arguments); }
        },
        "hashTableSteal": {
          "value": function () { return this.hash_table_steal.apply(this, arguments); }
        },
        "hashTableStealAll": {
          "value": function () { return this.hash_table_steal_all.apply(this, arguments); }
        },
        "hashTableUnref": {
          "value": function () { return this.hash_table_unref.apply(this, arguments); }
        },
        "hookDestroy": {
          "value": function () { return this.hook_destroy.apply(this, arguments); }
        },
        "hookDestroyLink": {
          "value": function () { return this.hook_destroy_link.apply(this, arguments); }
        },
        "hookFree": {
          "value": function () { return this.hook_free.apply(this, arguments); }
        },
        "hookInsertBefore": {
          "value": function () { return this.hook_insert_before.apply(this, arguments); }
        },
        "hookPrepend": {
          "value": function () { return this.hook_prepend.apply(this, arguments); }
        },
        "hookUnref": {
          "value": function () { return this.hook_unref.apply(this, arguments); }
        },
        "hostnameIsAsciiEncoded": {
          "value": function () { return this.hostname_is_ascii_encoded.apply(this, arguments); }
        },
        "hostnameIsIpAddress": {
          "value": function () { return this.hostname_is_ip_address.apply(this, arguments); }
        },
        "hostnameIsNonAscii": {
          "value": function () { return this.hostname_is_non_ascii.apply(this, arguments); }
        },
        "hostnameToAscii": {
          "value": function () { return this.hostname_to_ascii.apply(this, arguments); }
        },
        "hostnameToUnicode": {
          "value": function () { return this.hostname_to_unicode.apply(this, arguments); }
        },
        "idleAdd": {
          "value": function () { return this.idle_add.apply(this, arguments); }
        },
        "idleAddFull": {
          "value": function () { return this.idle_add_full.apply(this, arguments); }
        },
        "idleRemoveByData": {
          "value": function () { return this.idle_remove_by_data.apply(this, arguments); }
        },
        "idleSourceNew": {
          "value": function () { return this.idle_source_new.apply(this, arguments); }
        },
        "int64Equal": {
          "value": function () { return this.int64_equal.apply(this, arguments); }
        },
        "int64Hash": {
          "value": function () { return this.int64_hash.apply(this, arguments); }
        },
        "intEqual": {
          "value": function () { return this.int_equal.apply(this, arguments); }
        },
        "intHash": {
          "value": function () { return this.int_hash.apply(this, arguments); }
        },
        "internStaticString": {
          "value": function () { return this.intern_static_string.apply(this, arguments); }
        },
        "internString": {
          "value": function () { return this.intern_string.apply(this, arguments); }
        },
        "ioAddWatch": {
          "value": function () { return this.io_add_watch.apply(this, arguments); }
        },
        "ioAddWatchFull": {
          "value": function () { return this.io_add_watch_full.apply(this, arguments); }
        },
        "ioChannelErrorFromErrno": {
          "value": function () { return this.io_channel_error_from_errno.apply(this, arguments); }
        },
        "ioChannelErrorQuark": {
          "value": function () { return this.io_channel_error_quark.apply(this, arguments); }
        },
        "ioCreateWatch": {
          "value": function () { return this.io_create_watch.apply(this, arguments); }
        },
        "keyFileErrorQuark": {
          "value": function () { return this.key_file_error_quark.apply(this, arguments); }
        },
        "localeFromUtf8": {
          "value": function () { return this.locale_from_utf8.apply(this, arguments); }
        },
        "localeToUtf8": {
          "value": function () { return this.locale_to_utf8.apply(this, arguments); }
        },
        "logDefaultHandler": {
          "value": function () { return this.log_default_handler.apply(this, arguments); }
        },
        "logRemoveHandler": {
          "value": function () { return this.log_remove_handler.apply(this, arguments); }
        },
        "logSetAlwaysFatal": {
          "value": function () { return this.log_set_always_fatal.apply(this, arguments); }
        },
        "logSetDefaultHandler": {
          "value": function () { return this.log_set_default_handler.apply(this, arguments); }
        },
        "logSetFatalMask": {
          "value": function () { return this.log_set_fatal_mask.apply(this, arguments); }
        },
        "logSetHandler": {
          "value": function () { return this.log_set_handler.apply(this, arguments); }
        },
        "logSetHandlerFull": {
          "value": function () { return this.log_set_handler_full.apply(this, arguments); }
        },
        "mainContextDefault": {
          "value": function () { return this.main_context_default.apply(this, arguments); }
        },
        "mainContextGetThreadDefault": {
          "value": function () { return this.main_context_get_thread_default.apply(this, arguments); }
        },
        "mainContextRefThreadDefault": {
          "value": function () { return this.main_context_ref_thread_default.apply(this, arguments); }
        },
        "mainCurrentSource": {
          "value": function () { return this.main_current_source.apply(this, arguments); }
        },
        "mainDepth": {
          "value": function () { return this.main_depth.apply(this, arguments); }
        },
        "malloc0N": {
          "value": function () { return this.malloc0_n.apply(this, arguments); }
        },
        "mallocN": {
          "value": function () { return this.malloc_n.apply(this, arguments); }
        },
        "markupCollectAttributes": {
          "value": function () { return this.markup_collect_attributes.apply(this, arguments); }
        },
        "markupErrorQuark": {
          "value": function () { return this.markup_error_quark.apply(this, arguments); }
        },
        "markupEscapeText": {
          "value": function () { return this.markup_escape_text.apply(this, arguments); }
        },
        "markupPrintfEscaped": {
          "value": function () { return this.markup_printf_escaped.apply(this, arguments); }
        },
        "markupVprintfEscaped": {
          "value": function () { return this.markup_vprintf_escaped.apply(this, arguments); }
        },
        "memIsSystemMalloc": {
          "value": function () { return this.mem_is_system_malloc.apply(this, arguments); }
        },
        "memProfile": {
          "value": function () { return this.mem_profile.apply(this, arguments); }
        },
        "memSetVtable": {
          "value": function () { return this.mem_set_vtable.apply(this, arguments); }
        },
        "mkdirWithParents": {
          "value": function () { return this.mkdir_with_parents.apply(this, arguments); }
        },
        "mkdtempFull": {
          "value": function () { return this.mkdtemp_full.apply(this, arguments); }
        },
        "mkstempFull": {
          "value": function () { return this.mkstemp_full.apply(this, arguments); }
        },
        "nullifyPointer": {
          "value": function () { return this.nullify_pointer.apply(this, arguments); }
        },
        "onErrorQuery": {
          "value": function () { return this.on_error_query.apply(this, arguments); }
        },
        "onErrorStackTrace": {
          "value": function () { return this.on_error_stack_trace.apply(this, arguments); }
        },
        "onceInitEnter": {
          "value": function () { return this.once_init_enter.apply(this, arguments); }
        },
        "onceInitLeave": {
          "value": function () { return this.once_init_leave.apply(this, arguments); }
        },
        "optionErrorQuark": {
          "value": function () { return this.option_error_quark.apply(this, arguments); }
        },
        "parseDebugString": {
          "value": function () { return this.parse_debug_string.apply(this, arguments); }
        },
        "pathGetBasename": {
          "value": function () { return this.path_get_basename.apply(this, arguments); }
        },
        "pathGetDirname": {
          "value": function () { return this.path_get_dirname.apply(this, arguments); }
        },
        "pathIsAbsolute": {
          "value": function () { return this.path_is_absolute.apply(this, arguments); }
        },
        "pathSkipRoot": {
          "value": function () { return this.path_skip_root.apply(this, arguments); }
        },
        "patternMatch": {
          "value": function () { return this.pattern_match.apply(this, arguments); }
        },
        "patternMatchSimple": {
          "value": function () { return this.pattern_match_simple.apply(this, arguments); }
        },
        "patternMatchString": {
          "value": function () { return this.pattern_match_string.apply(this, arguments); }
        },
        "pointerBitLock": {
          "value": function () { return this.pointer_bit_lock.apply(this, arguments); }
        },
        "pointerBitTrylock": {
          "value": function () { return this.pointer_bit_trylock.apply(this, arguments); }
        },
        "pointerBitUnlock": {
          "value": function () { return this.pointer_bit_unlock.apply(this, arguments); }
        },
        "prefixError": {
          "value": function () { return this.prefix_error.apply(this, arguments); }
        },
        "printfStringUpperBound": {
          "value": function () { return this.printf_string_upper_bound.apply(this, arguments); }
        },
        "propagateError": {
          "value": function () { return this.propagate_error.apply(this, arguments); }
        },
        "propagatePrefixedError": {
          "value": function () { return this.propagate_prefixed_error.apply(this, arguments); }
        },
        "qsortWithData": {
          "value": function () { return this.qsort_with_data.apply(this, arguments); }
        },
        "quarkFromStaticString": {
          "value": function () { return this.quark_from_static_string.apply(this, arguments); }
        },
        "quarkFromString": {
          "value": function () { return this.quark_from_string.apply(this, arguments); }
        },
        "quarkToString": {
          "value": function () { return this.quark_to_string.apply(this, arguments); }
        },
        "quarkTryString": {
          "value": function () { return this.quark_try_string.apply(this, arguments); }
        },
        "randomDouble": {
          "value": function () { return this.random_double.apply(this, arguments); }
        },
        "randomDoubleRange": {
          "value": function () { return this.random_double_range.apply(this, arguments); }
        },
        "randomInt": {
          "value": function () { return this.random_int.apply(this, arguments); }
        },
        "randomIntRange": {
          "value": function () { return this.random_int_range.apply(this, arguments); }
        },
        "randomSetSeed": {
          "value": function () { return this.random_set_seed.apply(this, arguments); }
        },
        "reallocN": {
          "value": function () { return this.realloc_n.apply(this, arguments); }
        },
        "regexCheckReplacement": {
          "value": function () { return this.regex_check_replacement.apply(this, arguments); }
        },
        "regexErrorQuark": {
          "value": function () { return this.regex_error_quark.apply(this, arguments); }
        },
        "regexEscapeNul": {
          "value": function () { return this.regex_escape_nul.apply(this, arguments); }
        },
        "regexEscapeString": {
          "value": function () { return this.regex_escape_string.apply(this, arguments); }
        },
        "regexMatchSimple": {
          "value": function () { return this.regex_match_simple.apply(this, arguments); }
        },
        "regexSplitSimple": {
          "value": function () { return this.regex_split_simple.apply(this, arguments); }
        },
        "reloadUserSpecialDirsCache": {
          "value": function () { return this.reload_user_special_dirs_cache.apply(this, arguments); }
        },
        "returnIfFailWarning": {
          "value": function () { return this.return_if_fail_warning.apply(this, arguments); }
        },
        "sequenceGet": {
          "value": function () { return this.sequence_get.apply(this, arguments); }
        },
        "sequenceMove": {
          "value": function () { return this.sequence_move.apply(this, arguments); }
        },
        "sequenceMoveRange": {
          "value": function () { return this.sequence_move_range.apply(this, arguments); }
        },
        "sequenceRemove": {
          "value": function () { return this.sequence_remove.apply(this, arguments); }
        },
        "sequenceRemoveRange": {
          "value": function () { return this.sequence_remove_range.apply(this, arguments); }
        },
        "sequenceSet": {
          "value": function () { return this.sequence_set.apply(this, arguments); }
        },
        "sequenceSwap": {
          "value": function () { return this.sequence_swap.apply(this, arguments); }
        },
        "setApplicationName": {
          "value": function () { return this.set_application_name.apply(this, arguments); }
        },
        "setError": {
          "value": function () { return this.set_error.apply(this, arguments); }
        },
        "setErrorLiteral": {
          "value": function () { return this.set_error_literal.apply(this, arguments); }
        },
        "setPrgname": {
          "value": function () { return this.set_prgname.apply(this, arguments); }
        },
        "setPrintHandler": {
          "value": function () { return this.set_print_handler.apply(this, arguments); }
        },
        "setPrinterrHandler": {
          "value": function () { return this.set_printerr_handler.apply(this, arguments); }
        },
        "shellErrorQuark": {
          "value": function () { return this.shell_error_quark.apply(this, arguments); }
        },
        "shellParseArgv": {
          "value": function () { return this.shell_parse_argv.apply(this, arguments); }
        },
        "shellQuote": {
          "value": function () { return this.shell_quote.apply(this, arguments); }
        },
        "shellUnquote": {
          "value": function () { return this.shell_unquote.apply(this, arguments); }
        },
        "sliceAlloc": {
          "value": function () { return this.slice_alloc.apply(this, arguments); }
        },
        "sliceAlloc0": {
          "value": function () { return this.slice_alloc0.apply(this, arguments); }
        },
        "sliceCopy": {
          "value": function () { return this.slice_copy.apply(this, arguments); }
        },
        "sliceFree1": {
          "value": function () { return this.slice_free1.apply(this, arguments); }
        },
        "sliceFreeChainWithOffset": {
          "value": function () { return this.slice_free_chain_with_offset.apply(this, arguments); }
        },
        "sliceGetConfig": {
          "value": function () { return this.slice_get_config.apply(this, arguments); }
        },
        "sliceGetConfigState": {
          "value": function () { return this.slice_get_config_state.apply(this, arguments); }
        },
        "sliceSetConfig": {
          "value": function () { return this.slice_set_config.apply(this, arguments); }
        },
        "sourceRemove": {
          "value": function () { return this.source_remove.apply(this, arguments); }
        },
        "sourceRemoveByFuncsUserData": {
          "value": function () { return this.source_remove_by_funcs_user_data.apply(this, arguments); }
        },
        "sourceRemoveByUserData": {
          "value": function () { return this.source_remove_by_user_data.apply(this, arguments); }
        },
        "sourceSetNameById": {
          "value": function () { return this.source_set_name_by_id.apply(this, arguments); }
        },
        "spacedPrimesClosest": {
          "value": function () { return this.spaced_primes_closest.apply(this, arguments); }
        },
        "spawnAsync": {
          "value": function () { return this.spawn_async.apply(this, arguments); }
        },
        "spawnAsyncWithPipes": {
          "value": function () { return this.spawn_async_with_pipes.apply(this, arguments); }
        },
        "spawnCheckExitStatus": {
          "value": function () { return this.spawn_check_exit_status.apply(this, arguments); }
        },
        "spawnClosePid": {
          "value": function () { return this.spawn_close_pid.apply(this, arguments); }
        },
        "spawnCommandLineAsync": {
          "value": function () { return this.spawn_command_line_async.apply(this, arguments); }
        },
        "spawnCommandLineSync": {
          "value": function () { return this.spawn_command_line_sync.apply(this, arguments); }
        },
        "spawnErrorQuark": {
          "value": function () { return this.spawn_error_quark.apply(this, arguments); }
        },
        "spawnExitErrorQuark": {
          "value": function () { return this.spawn_exit_error_quark.apply(this, arguments); }
        },
        "spawnSync": {
          "value": function () { return this.spawn_sync.apply(this, arguments); }
        },
        "strEqual": {
          "value": function () { return this.str_equal.apply(this, arguments); }
        },
        "strHasPrefix": {
          "value": function () { return this.str_has_prefix.apply(this, arguments); }
        },
        "strHasSuffix": {
          "value": function () { return this.str_has_suffix.apply(this, arguments); }
        },
        "strHash": {
          "value": function () { return this.str_hash.apply(this, arguments); }
        },
        "strIsAscii": {
          "value": function () { return this.str_is_ascii.apply(this, arguments); }
        },
        "strMatchString": {
          "value": function () { return this.str_match_string.apply(this, arguments); }
        },
        "strToAscii": {
          "value": function () { return this.str_to_ascii.apply(this, arguments); }
        },
        "strTokenizeAndFold": {
          "value": function () { return this.str_tokenize_and_fold.apply(this, arguments); }
        },
        "strdupPrintf": {
          "value": function () { return this.strdup_printf.apply(this, arguments); }
        },
        "strdupVprintf": {
          "value": function () { return this.strdup_vprintf.apply(this, arguments); }
        },
        "stringNew": {
          "value": function () { return this.string_new.apply(this, arguments); }
        },
        "stringNewLen": {
          "value": function () { return this.string_new_len.apply(this, arguments); }
        },
        "stringSizedNew": {
          "value": function () { return this.string_sized_new.apply(this, arguments); }
        },
        "stripContext": {
          "value": function () { return this.strip_context.apply(this, arguments); }
        },
        "strrstrLen": {
          "value": function () { return this.strrstr_len.apply(this, arguments); }
        },
        "strsplitSet": {
          "value": function () { return this.strsplit_set.apply(this, arguments); }
        },
        "strstrLen": {
          "value": function () { return this.strstr_len.apply(this, arguments); }
        },
        "strvContains": {
          "value": function () { return this.strv_contains.apply(this, arguments); }
        },
        "strvGetType": {
          "value": function () { return this.strv_get_type.apply(this, arguments); }
        },
        "strvLength": {
          "value": function () { return this.strv_length.apply(this, arguments); }
        },
        "testAddDataFunc": {
          "value": function () { return this.test_add_data_func.apply(this, arguments); }
        },
        "testAddDataFuncFull": {
          "value": function () { return this.test_add_data_func_full.apply(this, arguments); }
        },
        "testAddFunc": {
          "value": function () { return this.test_add_func.apply(this, arguments); }
        },
        "testAddVtable": {
          "value": function () { return this.test_add_vtable.apply(this, arguments); }
        },
        "testAssertExpectedMessagesInternal": {
          "value": function () { return this.test_assert_expected_messages_internal.apply(this, arguments); }
        },
        "testBug": {
          "value": function () { return this.test_bug.apply(this, arguments); }
        },
        "testBugBase": {
          "value": function () { return this.test_bug_base.apply(this, arguments); }
        },
        "testBuildFilename": {
          "value": function () { return this.test_build_filename.apply(this, arguments); }
        },
        "testCreateCase": {
          "value": function () { return this.test_create_case.apply(this, arguments); }
        },
        "testCreateSuite": {
          "value": function () { return this.test_create_suite.apply(this, arguments); }
        },
        "testExpectMessage": {
          "value": function () { return this.test_expect_message.apply(this, arguments); }
        },
        "testFail": {
          "value": function () { return this.test_fail.apply(this, arguments); }
        },
        "testFailed": {
          "value": function () { return this.test_failed.apply(this, arguments); }
        },
        "testGetDir": {
          "value": function () { return this.test_get_dir.apply(this, arguments); }
        },
        "testGetFilename": {
          "value": function () { return this.test_get_filename.apply(this, arguments); }
        },
        "testGetRoot": {
          "value": function () { return this.test_get_root.apply(this, arguments); }
        },
        "testIncomplete": {
          "value": function () { return this.test_incomplete.apply(this, arguments); }
        },
        "testInit": {
          "value": function () { return this.test_init.apply(this, arguments); }
        },
        "testLogSetFatalHandler": {
          "value": function () { return this.test_log_set_fatal_handler.apply(this, arguments); }
        },
        "testLogTypeName": {
          "value": function () { return this.test_log_type_name.apply(this, arguments); }
        },
        "testMaximizedResult": {
          "value": function () { return this.test_maximized_result.apply(this, arguments); }
        },
        "testMessage": {
          "value": function () { return this.test_message.apply(this, arguments); }
        },
        "testMinimizedResult": {
          "value": function () { return this.test_minimized_result.apply(this, arguments); }
        },
        "testQueueDestroy": {
          "value": function () { return this.test_queue_destroy.apply(this, arguments); }
        },
        "testQueueFree": {
          "value": function () { return this.test_queue_free.apply(this, arguments); }
        },
        "testRandDouble": {
          "value": function () { return this.test_rand_double.apply(this, arguments); }
        },
        "testRandDoubleRange": {
          "value": function () { return this.test_rand_double_range.apply(this, arguments); }
        },
        "testRandInt": {
          "value": function () { return this.test_rand_int.apply(this, arguments); }
        },
        "testRandIntRange": {
          "value": function () { return this.test_rand_int_range.apply(this, arguments); }
        },
        "testRun": {
          "value": function () { return this.test_run.apply(this, arguments); }
        },
        "testRunSuite": {
          "value": function () { return this.test_run_suite.apply(this, arguments); }
        },
        "testSetNonfatalAssertions": {
          "value": function () { return this.test_set_nonfatal_assertions.apply(this, arguments); }
        },
        "testSkip": {
          "value": function () { return this.test_skip.apply(this, arguments); }
        },
        "testSubprocess": {
          "value": function () { return this.test_subprocess.apply(this, arguments); }
        },
        "testTimerElapsed": {
          "value": function () { return this.test_timer_elapsed.apply(this, arguments); }
        },
        "testTimerLast": {
          "value": function () { return this.test_timer_last.apply(this, arguments); }
        },
        "testTimerStart": {
          "value": function () { return this.test_timer_start.apply(this, arguments); }
        },
        "testTrapAssertions": {
          "value": function () { return this.test_trap_assertions.apply(this, arguments); }
        },
        "testTrapFork": {
          "value": function () { return this.test_trap_fork.apply(this, arguments); }
        },
        "testTrapHasPassed": {
          "value": function () { return this.test_trap_has_passed.apply(this, arguments); }
        },
        "testTrapReachedTimeout": {
          "value": function () { return this.test_trap_reached_timeout.apply(this, arguments); }
        },
        "testTrapSubprocess": {
          "value": function () { return this.test_trap_subprocess.apply(this, arguments); }
        },
        "threadErrorQuark": {
          "value": function () { return this.thread_error_quark.apply(this, arguments); }
        },
        "threadExit": {
          "value": function () { return this.thread_exit.apply(this, arguments); }
        },
        "threadPoolGetMaxIdleTime": {
          "value": function () { return this.thread_pool_get_max_idle_time.apply(this, arguments); }
        },
        "threadPoolGetMaxUnusedThreads": {
          "value": function () { return this.thread_pool_get_max_unused_threads.apply(this, arguments); }
        },
        "threadPoolGetNumUnusedThreads": {
          "value": function () { return this.thread_pool_get_num_unused_threads.apply(this, arguments); }
        },
        "threadPoolSetMaxIdleTime": {
          "value": function () { return this.thread_pool_set_max_idle_time.apply(this, arguments); }
        },
        "threadPoolSetMaxUnusedThreads": {
          "value": function () { return this.thread_pool_set_max_unused_threads.apply(this, arguments); }
        },
        "threadPoolStopUnusedThreads": {
          "value": function () { return this.thread_pool_stop_unused_threads.apply(this, arguments); }
        },
        "threadSelf": {
          "value": function () { return this.thread_self.apply(this, arguments); }
        },
        "threadYield": {
          "value": function () { return this.thread_yield.apply(this, arguments); }
        },
        "timeValFromIso8601": {
          "value": function () { return this.time_val_from_iso8601.apply(this, arguments); }
        },
        "timeoutAdd": {
          "value": function () { return this.timeout_add.apply(this, arguments); }
        },
        "timeoutAddFull": {
          "value": function () { return this.timeout_add_full.apply(this, arguments); }
        },
        "timeoutAddSeconds": {
          "value": function () { return this.timeout_add_seconds.apply(this, arguments); }
        },
        "timeoutAddSecondsFull": {
          "value": function () { return this.timeout_add_seconds_full.apply(this, arguments); }
        },
        "timeoutSourceNew": {
          "value": function () { return this.timeout_source_new.apply(this, arguments); }
        },
        "timeoutSourceNewSeconds": {
          "value": function () { return this.timeout_source_new_seconds.apply(this, arguments); }
        },
        "trashStackHeight": {
          "value": function () { return this.trash_stack_height.apply(this, arguments); }
        },
        "trashStackPeek": {
          "value": function () { return this.trash_stack_peek.apply(this, arguments); }
        },
        "trashStackPop": {
          "value": function () { return this.trash_stack_pop.apply(this, arguments); }
        },
        "trashStackPush": {
          "value": function () { return this.trash_stack_push.apply(this, arguments); }
        },
        "tryMalloc": {
          "value": function () { return this.try_malloc.apply(this, arguments); }
        },
        "tryMalloc0": {
          "value": function () { return this.try_malloc0.apply(this, arguments); }
        },
        "tryMalloc0N": {
          "value": function () { return this.try_malloc0_n.apply(this, arguments); }
        },
        "tryMallocN": {
          "value": function () { return this.try_malloc_n.apply(this, arguments); }
        },
        "tryRealloc": {
          "value": function () { return this.try_realloc.apply(this, arguments); }
        },
        "tryReallocN": {
          "value": function () { return this.try_realloc_n.apply(this, arguments); }
        },
        "ucs4ToUtf16": {
          "value": function () { return this.ucs4_to_utf16.apply(this, arguments); }
        },
        "ucs4ToUtf8": {
          "value": function () { return this.ucs4_to_utf8.apply(this, arguments); }
        },
        "unicharBreakType": {
          "value": function () { return this.unichar_break_type.apply(this, arguments); }
        },
        "unicharCombiningClass": {
          "value": function () { return this.unichar_combining_class.apply(this, arguments); }
        },
        "unicharCompose": {
          "value": function () { return this.unichar_compose.apply(this, arguments); }
        },
        "unicharDecompose": {
          "value": function () { return this.unichar_decompose.apply(this, arguments); }
        },
        "unicharDigitValue": {
          "value": function () { return this.unichar_digit_value.apply(this, arguments); }
        },
        "unicharFullyDecompose": {
          "value": function () { return this.unichar_fully_decompose.apply(this, arguments); }
        },
        "unicharGetMirrorChar": {
          "value": function () { return this.unichar_get_mirror_char.apply(this, arguments); }
        },
        "unicharGetScript": {
          "value": function () { return this.unichar_get_script.apply(this, arguments); }
        },
        "unicharIsalnum": {
          "value": function () { return this.unichar_isalnum.apply(this, arguments); }
        },
        "unicharIsalpha": {
          "value": function () { return this.unichar_isalpha.apply(this, arguments); }
        },
        "unicharIscntrl": {
          "value": function () { return this.unichar_iscntrl.apply(this, arguments); }
        },
        "unicharIsdefined": {
          "value": function () { return this.unichar_isdefined.apply(this, arguments); }
        },
        "unicharIsdigit": {
          "value": function () { return this.unichar_isdigit.apply(this, arguments); }
        },
        "unicharIsgraph": {
          "value": function () { return this.unichar_isgraph.apply(this, arguments); }
        },
        "unicharIslower": {
          "value": function () { return this.unichar_islower.apply(this, arguments); }
        },
        "unicharIsmark": {
          "value": function () { return this.unichar_ismark.apply(this, arguments); }
        },
        "unicharIsprint": {
          "value": function () { return this.unichar_isprint.apply(this, arguments); }
        },
        "unicharIspunct": {
          "value": function () { return this.unichar_ispunct.apply(this, arguments); }
        },
        "unicharIsspace": {
          "value": function () { return this.unichar_isspace.apply(this, arguments); }
        },
        "unicharIstitle": {
          "value": function () { return this.unichar_istitle.apply(this, arguments); }
        },
        "unicharIsupper": {
          "value": function () { return this.unichar_isupper.apply(this, arguments); }
        },
        "unicharIswide": {
          "value": function () { return this.unichar_iswide.apply(this, arguments); }
        },
        "unicharIswideCjk": {
          "value": function () { return this.unichar_iswide_cjk.apply(this, arguments); }
        },
        "unicharIsxdigit": {
          "value": function () { return this.unichar_isxdigit.apply(this, arguments); }
        },
        "unicharIszerowidth": {
          "value": function () { return this.unichar_iszerowidth.apply(this, arguments); }
        },
        "unicharToUtf8": {
          "value": function () { return this.unichar_to_utf8.apply(this, arguments); }
        },
        "unicharTolower": {
          "value": function () { return this.unichar_tolower.apply(this, arguments); }
        },
        "unicharTotitle": {
          "value": function () { return this.unichar_totitle.apply(this, arguments); }
        },
        "unicharToupper": {
          "value": function () { return this.unichar_toupper.apply(this, arguments); }
        },
        "unicharType": {
          "value": function () { return this.unichar_type.apply(this, arguments); }
        },
        "unicharValidate": {
          "value": function () { return this.unichar_validate.apply(this, arguments); }
        },
        "unicharXdigitValue": {
          "value": function () { return this.unichar_xdigit_value.apply(this, arguments); }
        },
        "unicodeCanonicalDecomposition": {
          "value": function () { return this.unicode_canonical_decomposition.apply(this, arguments); }
        },
        "unicodeCanonicalOrdering": {
          "value": function () { return this.unicode_canonical_ordering.apply(this, arguments); }
        },
        "unicodeScriptFromIso15924": {
          "value": function () { return this.unicode_script_from_iso15924.apply(this, arguments); }
        },
        "unicodeScriptToIso15924": {
          "value": function () { return this.unicode_script_to_iso15924.apply(this, arguments); }
        },
        "unixErrorQuark": {
          "value": function () { return this.unix_error_quark.apply(this, arguments); }
        },
        "unixFdAdd": {
          "value": function () { return this.unix_fd_add.apply(this, arguments); }
        },
        "unixFdAddFull": {
          "value": function () { return this.unix_fd_add_full.apply(this, arguments); }
        },
        "unixFdSourceNew": {
          "value": function () { return this.unix_fd_source_new.apply(this, arguments); }
        },
        "unixOpenPipe": {
          "value": function () { return this.unix_open_pipe.apply(this, arguments); }
        },
        "unixSetFdNonblocking": {
          "value": function () { return this.unix_set_fd_nonblocking.apply(this, arguments); }
        },
        "unixSignalAdd": {
          "value": function () { return this.unix_signal_add.apply(this, arguments); }
        },
        "unixSignalAddFull": {
          "value": function () { return this.unix_signal_add_full.apply(this, arguments); }
        },
        "unixSignalSourceNew": {
          "value": function () { return this.unix_signal_source_new.apply(this, arguments); }
        },
        "uriEscapeString": {
          "value": function () { return this.uri_escape_string.apply(this, arguments); }
        },
        "uriListExtractUris": {
          "value": function () { return this.uri_list_extract_uris.apply(this, arguments); }
        },
        "uriParseScheme": {
          "value": function () { return this.uri_parse_scheme.apply(this, arguments); }
        },
        "uriUnescapeSegment": {
          "value": function () { return this.uri_unescape_segment.apply(this, arguments); }
        },
        "uriUnescapeString": {
          "value": function () { return this.uri_unescape_string.apply(this, arguments); }
        },
        "utf16ToUcs4": {
          "value": function () { return this.utf16_to_ucs4.apply(this, arguments); }
        },
        "utf16ToUtf8": {
          "value": function () { return this.utf16_to_utf8.apply(this, arguments); }
        },
        "utf8Casefold": {
          "value": function () { return this.utf8_casefold.apply(this, arguments); }
        },
        "utf8Collate": {
          "value": function () { return this.utf8_collate.apply(this, arguments); }
        },
        "utf8CollateKey": {
          "value": function () { return this.utf8_collate_key.apply(this, arguments); }
        },
        "utf8CollateKeyForFilename": {
          "value": function () { return this.utf8_collate_key_for_filename.apply(this, arguments); }
        },
        "utf8FindNextChar": {
          "value": function () { return this.utf8_find_next_char.apply(this, arguments); }
        },
        "utf8FindPrevChar": {
          "value": function () { return this.utf8_find_prev_char.apply(this, arguments); }
        },
        "utf8GetChar": {
          "value": function () { return this.utf8_get_char.apply(this, arguments); }
        },
        "utf8GetCharValidated": {
          "value": function () { return this.utf8_get_char_validated.apply(this, arguments); }
        },
        "utf8Normalize": {
          "value": function () { return this.utf8_normalize.apply(this, arguments); }
        },
        "utf8OffsetToPointer": {
          "value": function () { return this.utf8_offset_to_pointer.apply(this, arguments); }
        },
        "utf8PointerToOffset": {
          "value": function () { return this.utf8_pointer_to_offset.apply(this, arguments); }
        },
        "utf8PrevChar": {
          "value": function () { return this.utf8_prev_char.apply(this, arguments); }
        },
        "utf8Strchr": {
          "value": function () { return this.utf8_strchr.apply(this, arguments); }
        },
        "utf8Strdown": {
          "value": function () { return this.utf8_strdown.apply(this, arguments); }
        },
        "utf8Strlen": {
          "value": function () { return this.utf8_strlen.apply(this, arguments); }
        },
        "utf8Strncpy": {
          "value": function () { return this.utf8_strncpy.apply(this, arguments); }
        },
        "utf8Strrchr": {
          "value": function () { return this.utf8_strrchr.apply(this, arguments); }
        },
        "utf8Strreverse": {
          "value": function () { return this.utf8_strreverse.apply(this, arguments); }
        },
        "utf8Strup": {
          "value": function () { return this.utf8_strup.apply(this, arguments); }
        },
        "utf8Substring": {
          "value": function () { return this.utf8_substring.apply(this, arguments); }
        },
        "utf8ToUcs4": {
          "value": function () { return this.utf8_to_ucs4.apply(this, arguments); }
        },
        "utf8ToUcs4Fast": {
          "value": function () { return this.utf8_to_ucs4_fast.apply(this, arguments); }
        },
        "utf8ToUtf16": {
          "value": function () { return this.utf8_to_utf16.apply(this, arguments); }
        },
        "utf8Validate": {
          "value": function () { return this.utf8_validate.apply(this, arguments); }
        },
        "variantGetGtype": {
          "value": function () { return this.variant_get_gtype.apply(this, arguments); }
        },
        "variantIsObjectPath": {
          "value": function () { return this.variant_is_object_path.apply(this, arguments); }
        },
        "variantIsSignature": {
          "value": function () { return this.variant_is_signature.apply(this, arguments); }
        },
        "variantParse": {
          "value": function () { return this.variant_parse.apply(this, arguments); }
        },
        "variantParseErrorPrintContext": {
          "value": function () { return this.variant_parse_error_print_context.apply(this, arguments); }
        },
        "variantParseErrorQuark": {
          "value": function () { return this.variant_parse_error_quark.apply(this, arguments); }
        },
        "variantParserGetErrorQuark": {
          "value": function () { return this.variant_parser_get_error_quark.apply(this, arguments); }
        },
        "variantTypeChecked_": {
          "value": function () { return this.variant_type_checked_.apply(this, arguments); }
        },
        "variantTypeStringIsValid": {
          "value": function () { return this.variant_type_string_is_valid.apply(this, arguments); }
        },
        "variantTypeStringScan": {
          "value": function () { return this.variant_type_string_scan.apply(this, arguments); }
        },
        "warnMessage": {
          "value": function () { return this.warn_message.apply(this, arguments); }
        }
      }
    },
    "GObject": {
      "class": {
        "Binding": {
          "prototype": {
            "getFlags": {
              "value": function () { return this.get_flags.apply(this, arguments); }
            },
            "getSource": {
              "value": function () { return this.get_source.apply(this, arguments); }
            },
            "getSourceProperty": {
              "value": function () { return this.get_source_property.apply(this, arguments); }
            },
            "getTarget": {
              "value": function () { return this.get_target.apply(this, arguments); }
            },
            "getTargetProperty": {
              "value": function () { return this.get_target_property.apply(this, arguments); }
            },
            "sourceProperty": {
              "get": function () { return this.source_property; },
              "set": function (value) { this.source_property = value; }
            },
            "targetProperty": {
              "get": function () { return this.target_property; },
              "set": function (value) { this.target_property = value; }
            }
          },
          "static": {}
        },
        "InitiallyUnowned": {
          "prototype": {},
          "static": {}
        },
        "Object": {
          "prototype": {
            "addToggleRef": {
              "value": function () { return this.add_toggle_ref.apply(this, arguments); }
            },
            "addWeakPointer": {
              "value": function () { return this.add_weak_pointer.apply(this, arguments); }
            },
            "bindProperty": {
              "value": function () { return this.bind_property.apply(this, arguments); }
            },
            "bindPropertyFull": {
              "value": function () { return this.bind_property_full.apply(this, arguments); }
            },
            "bindPropertyWithClosures": {
              "value": function () { return this.bind_property_with_closures.apply(this, arguments); }
            },
            "dupData": {
              "value": function () { return this.dup_data.apply(this, arguments); }
            },
            "dupQdata": {
              "value": function () { return this.dup_qdata.apply(this, arguments); }
            },
            "forceFloating": {
              "value": function () { return this.force_floating.apply(this, arguments); }
            },
            "freezeNotify": {
              "value": function () { return this.freeze_notify.apply(this, arguments); }
            },
            "getData": {
              "value": function () { return this.get_data.apply(this, arguments); }
            },
            "getProperty": {
              "value": function () { return this.get_property.apply(this, arguments); }
            },
            "getQdata": {
              "value": function () { return this.get_qdata.apply(this, arguments); }
            },
            "getValist": {
              "value": function () { return this.get_valist.apply(this, arguments); }
            },
            "isFloating": {
              "value": function () { return this.is_floating.apply(this, arguments); }
            },
            "notifyByPspec": {
              "value": function () { return this.notify_by_pspec.apply(this, arguments); }
            },
            "refSink": {
              "value": function () { return this.ref_sink.apply(this, arguments); }
            },
            "removeToggleRef": {
              "value": function () { return this.remove_toggle_ref.apply(this, arguments); }
            },
            "removeWeakPointer": {
              "value": function () { return this.remove_weak_pointer.apply(this, arguments); }
            },
            "replaceData": {
              "value": function () { return this.replace_data.apply(this, arguments); }
            },
            "replaceQdata": {
              "value": function () { return this.replace_qdata.apply(this, arguments); }
            },
            "runDispose": {
              "value": function () { return this.run_dispose.apply(this, arguments); }
            },
            "setData": {
              "value": function () { return this.set_data.apply(this, arguments); }
            },
            "setDataFull": {
              "value": function () { return this.set_data_full.apply(this, arguments); }
            },
            "setProperty": {
              "value": function () { return this.set_property.apply(this, arguments); }
            },
            "setQdata": {
              "value": function () { return this.set_qdata.apply(this, arguments); }
            },
            "setQdataFull": {
              "value": function () { return this.set_qdata_full.apply(this, arguments); }
            },
            "setValist": {
              "value": function () { return this.set_valist.apply(this, arguments); }
            },
            "stealData": {
              "value": function () { return this.steal_data.apply(this, arguments); }
            },
            "stealQdata": {
              "value": function () { return this.steal_qdata.apply(this, arguments); }
            },
            "thawNotify": {
              "value": function () { return this.thaw_notify.apply(this, arguments); }
            },
            "watchClosure": {
              "value": function () { return this.watch_closure.apply(this, arguments); }
            },
            "weakRef": {
              "value": function () { return this.weak_ref.apply(this, arguments); }
            },
            "weakUnref": {
              "value": function () { return this.weak_unref.apply(this, arguments); }
            }
          },
          "static": {
            "compatControl": {
              "value": function () { return this.compat_control.apply(this, arguments); }
            },
            "interfaceFindProperty": {
              "value": function () { return this.interface_find_property.apply(this, arguments); }
            },
            "interfaceInstallProperty": {
              "value": function () { return this.interface_install_property.apply(this, arguments); }
            },
            "interfaceListProperties": {
              "value": function () { return this.interface_list_properties.apply(this, arguments); }
            }
          }
        },
        "ParamSpec": {
          "prototype": {
            "getBlurb": {
              "value": function () { return this.get_blurb.apply(this, arguments); }
            },
            "getDefaultValue": {
              "value": function () { return this.get_default_value.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getNameQuark": {
              "value": function () { return this.get_name_quark.apply(this, arguments); }
            },
            "getNick": {
              "value": function () { return this.get_nick.apply(this, arguments); }
            },
            "getQdata": {
              "value": function () { return this.get_qdata.apply(this, arguments); }
            },
            "getRedirectTarget": {
              "value": function () { return this.get_redirect_target.apply(this, arguments); }
            },
            "refSink": {
              "value": function () { return this.ref_sink.apply(this, arguments); }
            },
            "setQdata": {
              "value": function () { return this.set_qdata.apply(this, arguments); }
            },
            "setQdataFull": {
              "value": function () { return this.set_qdata_full.apply(this, arguments); }
            },
            "stealQdata": {
              "value": function () { return this.steal_qdata.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "ParamSpecBoolean": {
          "prototype": {},
          "static": {}
        },
        "ParamSpecBoxed": {
          "prototype": {},
          "static": {}
        },
        "ParamSpecChar": {
          "prototype": {},
          "static": {}
        },
        "ParamSpecDouble": {
          "prototype": {},
          "static": {}
        },
        "ParamSpecEnum": {
          "prototype": {},
          "static": {}
        },
        "ParamSpecFlags": {
          "prototype": {},
          "static": {}
        },
        "ParamSpecFloat": {
          "prototype": {},
          "static": {}
        },
        "ParamSpecGType": {
          "prototype": {},
          "static": {}
        },
        "ParamSpecInt": {
          "prototype": {},
          "static": {}
        },
        "ParamSpecInt64": {
          "prototype": {},
          "static": {}
        },
        "ParamSpecLong": {
          "prototype": {},
          "static": {}
        },
        "ParamSpecObject": {
          "prototype": {},
          "static": {}
        },
        "ParamSpecOverride": {
          "prototype": {},
          "static": {}
        },
        "ParamSpecParam": {
          "prototype": {},
          "static": {}
        },
        "ParamSpecPointer": {
          "prototype": {},
          "static": {}
        },
        "ParamSpecString": {
          "prototype": {},
          "static": {}
        },
        "ParamSpecUChar": {
          "prototype": {},
          "static": {}
        },
        "ParamSpecUInt": {
          "prototype": {},
          "static": {}
        },
        "ParamSpecUInt64": {
          "prototype": {},
          "static": {}
        },
        "ParamSpecULong": {
          "prototype": {},
          "static": {}
        },
        "ParamSpecUnichar": {
          "prototype": {},
          "static": {}
        },
        "ParamSpecValueArray": {
          "prototype": {},
          "static": {}
        },
        "ParamSpecVariant": {
          "prototype": {},
          "static": {}
        },
        "TypeModule": {
          "prototype": {
            "addInterface": {
              "value": function () { return this.add_interface.apply(this, arguments); }
            },
            "registerEnum": {
              "value": function () { return this.register_enum.apply(this, arguments); }
            },
            "registerFlags": {
              "value": function () { return this.register_flags.apply(this, arguments); }
            },
            "registerType": {
              "value": function () { return this.register_type.apply(this, arguments); }
            },
            "setName": {
              "value": function () { return this.set_name.apply(this, arguments); }
            }
          },
          "static": {}
        }
      },
      "static": {
        "boxedCopy": {
          "value": function () { return this.boxed_copy.apply(this, arguments); }
        },
        "boxedFree": {
          "value": function () { return this.boxed_free.apply(this, arguments); }
        },
        "boxedTypeRegisterStatic": {
          "value": function () { return this.boxed_type_register_static.apply(this, arguments); }
        },
        "cclosureMarshalBOOLEAN_BOXEDBOXED": {
          "value": function () { return this.cclosure_marshal_BOOLEAN__BOXED_BOXED.apply(this, arguments); }
        },
        "cclosureMarshalBOOLEAN_FLAGS": {
          "value": function () { return this.cclosure_marshal_BOOLEAN__FLAGS.apply(this, arguments); }
        },
        "cclosureMarshalSTRING_OBJECTPOINTER": {
          "value": function () { return this.cclosure_marshal_STRING__OBJECT_POINTER.apply(this, arguments); }
        },
        "cclosureMarshalVOID_BOOLEAN": {
          "value": function () { return this.cclosure_marshal_VOID__BOOLEAN.apply(this, arguments); }
        },
        "cclosureMarshalVOID_BOXED": {
          "value": function () { return this.cclosure_marshal_VOID__BOXED.apply(this, arguments); }
        },
        "cclosureMarshalVOID_CHAR": {
          "value": function () { return this.cclosure_marshal_VOID__CHAR.apply(this, arguments); }
        },
        "cclosureMarshalVOID_DOUBLE": {
          "value": function () { return this.cclosure_marshal_VOID__DOUBLE.apply(this, arguments); }
        },
        "cclosureMarshalVOID_ENUM": {
          "value": function () { return this.cclosure_marshal_VOID__ENUM.apply(this, arguments); }
        },
        "cclosureMarshalVOID_FLAGS": {
          "value": function () { return this.cclosure_marshal_VOID__FLAGS.apply(this, arguments); }
        },
        "cclosureMarshalVOID_FLOAT": {
          "value": function () { return this.cclosure_marshal_VOID__FLOAT.apply(this, arguments); }
        },
        "cclosureMarshalVOID_INT": {
          "value": function () { return this.cclosure_marshal_VOID__INT.apply(this, arguments); }
        },
        "cclosureMarshalVOID_LONG": {
          "value": function () { return this.cclosure_marshal_VOID__LONG.apply(this, arguments); }
        },
        "cclosureMarshalVOID_OBJECT": {
          "value": function () { return this.cclosure_marshal_VOID__OBJECT.apply(this, arguments); }
        },
        "cclosureMarshalVOID_PARAM": {
          "value": function () { return this.cclosure_marshal_VOID__PARAM.apply(this, arguments); }
        },
        "cclosureMarshalVOID_POINTER": {
          "value": function () { return this.cclosure_marshal_VOID__POINTER.apply(this, arguments); }
        },
        "cclosureMarshalVOID_STRING": {
          "value": function () { return this.cclosure_marshal_VOID__STRING.apply(this, arguments); }
        },
        "cclosureMarshalVOID_UCHAR": {
          "value": function () { return this.cclosure_marshal_VOID__UCHAR.apply(this, arguments); }
        },
        "cclosureMarshalVOID_UINT": {
          "value": function () { return this.cclosure_marshal_VOID__UINT.apply(this, arguments); }
        },
        "cclosureMarshalVOID_UINTPOINTER": {
          "value": function () { return this.cclosure_marshal_VOID__UINT_POINTER.apply(this, arguments); }
        },
        "cclosureMarshalVOID_ULONG": {
          "value": function () { return this.cclosure_marshal_VOID__ULONG.apply(this, arguments); }
        },
        "cclosureMarshalVOID_VARIANT": {
          "value": function () { return this.cclosure_marshal_VOID__VARIANT.apply(this, arguments); }
        },
        "cclosureMarshalVOID_VOID": {
          "value": function () { return this.cclosure_marshal_VOID__VOID.apply(this, arguments); }
        },
        "cclosureMarshalGeneric": {
          "value": function () { return this.cclosure_marshal_generic.apply(this, arguments); }
        },
        "cclosureNew": {
          "value": function () { return this.cclosure_new.apply(this, arguments); }
        },
        "cclosureNewObject": {
          "value": function () { return this.cclosure_new_object.apply(this, arguments); }
        },
        "cclosureNewObjectSwap": {
          "value": function () { return this.cclosure_new_object_swap.apply(this, arguments); }
        },
        "cclosureNewSwap": {
          "value": function () { return this.cclosure_new_swap.apply(this, arguments); }
        },
        "clearObject": {
          "value": function () { return this.clear_object.apply(this, arguments); }
        },
        "enumCompleteTypeInfo": {
          "value": function () { return this.enum_complete_type_info.apply(this, arguments); }
        },
        "enumGetValue": {
          "value": function () { return this.enum_get_value.apply(this, arguments); }
        },
        "enumGetValueByName": {
          "value": function () { return this.enum_get_value_by_name.apply(this, arguments); }
        },
        "enumGetValueByNick": {
          "value": function () { return this.enum_get_value_by_nick.apply(this, arguments); }
        },
        "enumRegisterStatic": {
          "value": function () { return this.enum_register_static.apply(this, arguments); }
        },
        "flagsCompleteTypeInfo": {
          "value": function () { return this.flags_complete_type_info.apply(this, arguments); }
        },
        "flagsGetFirstValue": {
          "value": function () { return this.flags_get_first_value.apply(this, arguments); }
        },
        "flagsGetValueByName": {
          "value": function () { return this.flags_get_value_by_name.apply(this, arguments); }
        },
        "flagsGetValueByNick": {
          "value": function () { return this.flags_get_value_by_nick.apply(this, arguments); }
        },
        "flagsRegisterStatic": {
          "value": function () { return this.flags_register_static.apply(this, arguments); }
        },
        "gtypeGetType": {
          "value": function () { return this.gtype_get_type.apply(this, arguments); }
        },
        "paramSpecBoolean": {
          "value": function () { return this.param_spec_boolean.apply(this, arguments); }
        },
        "paramSpecBoxed": {
          "value": function () { return this.param_spec_boxed.apply(this, arguments); }
        },
        "paramSpecChar": {
          "value": function () { return this.param_spec_char.apply(this, arguments); }
        },
        "paramSpecDouble": {
          "value": function () { return this.param_spec_double.apply(this, arguments); }
        },
        "paramSpecEnum": {
          "value": function () { return this.param_spec_enum.apply(this, arguments); }
        },
        "paramSpecFlags": {
          "value": function () { return this.param_spec_flags.apply(this, arguments); }
        },
        "paramSpecFloat": {
          "value": function () { return this.param_spec_float.apply(this, arguments); }
        },
        "paramSpecGtype": {
          "value": function () { return this.param_spec_gtype.apply(this, arguments); }
        },
        "paramSpecInt": {
          "value": function () { return this.param_spec_int.apply(this, arguments); }
        },
        "paramSpecInt64": {
          "value": function () { return this.param_spec_int64.apply(this, arguments); }
        },
        "paramSpecLong": {
          "value": function () { return this.param_spec_long.apply(this, arguments); }
        },
        "paramSpecObject": {
          "value": function () { return this.param_spec_object.apply(this, arguments); }
        },
        "paramSpecOverride": {
          "value": function () { return this.param_spec_override.apply(this, arguments); }
        },
        "paramSpecParam": {
          "value": function () { return this.param_spec_param.apply(this, arguments); }
        },
        "paramSpecPointer": {
          "value": function () { return this.param_spec_pointer.apply(this, arguments); }
        },
        "paramSpecPoolNew": {
          "value": function () { return this.param_spec_pool_new.apply(this, arguments); }
        },
        "paramSpecString": {
          "value": function () { return this.param_spec_string.apply(this, arguments); }
        },
        "paramSpecUchar": {
          "value": function () { return this.param_spec_uchar.apply(this, arguments); }
        },
        "paramSpecUint": {
          "value": function () { return this.param_spec_uint.apply(this, arguments); }
        },
        "paramSpecUint64": {
          "value": function () { return this.param_spec_uint64.apply(this, arguments); }
        },
        "paramSpecUlong": {
          "value": function () { return this.param_spec_ulong.apply(this, arguments); }
        },
        "paramSpecUnichar": {
          "value": function () { return this.param_spec_unichar.apply(this, arguments); }
        },
        "paramSpecValueArray": {
          "value": function () { return this.param_spec_value_array.apply(this, arguments); }
        },
        "paramSpecVariant": {
          "value": function () { return this.param_spec_variant.apply(this, arguments); }
        },
        "paramTypeRegisterStatic": {
          "value": function () { return this.param_type_register_static.apply(this, arguments); }
        },
        "paramValueConvert": {
          "value": function () { return this.param_value_convert.apply(this, arguments); }
        },
        "paramValueDefaults": {
          "value": function () { return this.param_value_defaults.apply(this, arguments); }
        },
        "paramValueSetDefault": {
          "value": function () { return this.param_value_set_default.apply(this, arguments); }
        },
        "paramValueValidate": {
          "value": function () { return this.param_value_validate.apply(this, arguments); }
        },
        "paramValuesCmp": {
          "value": function () { return this.param_values_cmp.apply(this, arguments); }
        },
        "pointerTypeRegisterStatic": {
          "value": function () { return this.pointer_type_register_static.apply(this, arguments); }
        },
        "signalAccumulatorFirstWins": {
          "value": function () { return this.signal_accumulator_first_wins.apply(this, arguments); }
        },
        "signalAccumulatorTrueHandled": {
          "value": function () { return this.signal_accumulator_true_handled.apply(this, arguments); }
        },
        "signalAddEmissionHook": {
          "value": function () { return this.signal_add_emission_hook.apply(this, arguments); }
        },
        "signalChainFromOverridden": {
          "value": function () { return this.signal_chain_from_overridden.apply(this, arguments); }
        },
        "signalChainFromOverriddenHandler": {
          "value": function () { return this.signal_chain_from_overridden_handler.apply(this, arguments); }
        },
        "signalConnectClosure": {
          "value": function () { return this.signal_connect_closure.apply(this, arguments); }
        },
        "signalConnectClosureById": {
          "value": function () { return this.signal_connect_closure_by_id.apply(this, arguments); }
        },
        "signalConnectData": {
          "value": function () { return this.signal_connect_data.apply(this, arguments); }
        },
        "signalConnectObject": {
          "value": function () { return this.signal_connect_object.apply(this, arguments); }
        },
        "signalEmit": {
          "value": function () { return this.signal_emit.apply(this, arguments); }
        },
        "signalEmitByName": {
          "value": function () { return this.signal_emit_by_name.apply(this, arguments); }
        },
        "signalEmitValist": {
          "value": function () { return this.signal_emit_valist.apply(this, arguments); }
        },
        "signalEmitv": {
          "value": function () { return this.signal_emitv.apply(this, arguments); }
        },
        "signalGetInvocationHint": {
          "value": function () { return this.signal_get_invocation_hint.apply(this, arguments); }
        },
        "signalHandlerBlock": {
          "value": function () { return this.signal_handler_block.apply(this, arguments); }
        },
        "signalHandlerDisconnect": {
          "value": function () { return this.signal_handler_disconnect.apply(this, arguments); }
        },
        "signalHandlerFind": {
          "value": function () { return this.signal_handler_find.apply(this, arguments); }
        },
        "signalHandlerIsConnected": {
          "value": function () { return this.signal_handler_is_connected.apply(this, arguments); }
        },
        "signalHandlerUnblock": {
          "value": function () { return this.signal_handler_unblock.apply(this, arguments); }
        },
        "signalHandlersBlockMatched": {
          "value": function () { return this.signal_handlers_block_matched.apply(this, arguments); }
        },
        "signalHandlersDestroy": {
          "value": function () { return this.signal_handlers_destroy.apply(this, arguments); }
        },
        "signalHandlersDisconnectMatched": {
          "value": function () { return this.signal_handlers_disconnect_matched.apply(this, arguments); }
        },
        "signalHandlersUnblockMatched": {
          "value": function () { return this.signal_handlers_unblock_matched.apply(this, arguments); }
        },
        "signalHasHandlerPending": {
          "value": function () { return this.signal_has_handler_pending.apply(this, arguments); }
        },
        "signalListIds": {
          "value": function () { return this.signal_list_ids.apply(this, arguments); }
        },
        "signalLookup": {
          "value": function () { return this.signal_lookup.apply(this, arguments); }
        },
        "signalName": {
          "value": function () { return this.signal_name.apply(this, arguments); }
        },
        "signalNew": {
          "value": function () { return this.signal_new.apply(this, arguments); }
        },
        "signalNewClassHandler": {
          "value": function () { return this.signal_new_class_handler.apply(this, arguments); }
        },
        "signalNewValist": {
          "value": function () { return this.signal_new_valist.apply(this, arguments); }
        },
        "signalNewv": {
          "value": function () { return this.signal_newv.apply(this, arguments); }
        },
        "signalOverrideClassClosure": {
          "value": function () { return this.signal_override_class_closure.apply(this, arguments); }
        },
        "signalOverrideClassHandler": {
          "value": function () { return this.signal_override_class_handler.apply(this, arguments); }
        },
        "signalParseName": {
          "value": function () { return this.signal_parse_name.apply(this, arguments); }
        },
        "signalQuery": {
          "value": function () { return this.signal_query.apply(this, arguments); }
        },
        "signalRemoveEmissionHook": {
          "value": function () { return this.signal_remove_emission_hook.apply(this, arguments); }
        },
        "signalSetVaMarshaller": {
          "value": function () { return this.signal_set_va_marshaller.apply(this, arguments); }
        },
        "signalStopEmission": {
          "value": function () { return this.signal_stop_emission.apply(this, arguments); }
        },
        "signalStopEmissionByName": {
          "value": function () { return this.signal_stop_emission_by_name.apply(this, arguments); }
        },
        "signalTypeCclosureNew": {
          "value": function () { return this.signal_type_cclosure_new.apply(this, arguments); }
        },
        "sourceSetClosure": {
          "value": function () { return this.source_set_closure.apply(this, arguments); }
        },
        "sourceSetDummyCallback": {
          "value": function () { return this.source_set_dummy_callback.apply(this, arguments); }
        },
        "strdupValueContents": {
          "value": function () { return this.strdup_value_contents.apply(this, arguments); }
        },
        "typeAddClassCacheFunc": {
          "value": function () { return this.type_add_class_cache_func.apply(this, arguments); }
        },
        "typeAddClassPrivate": {
          "value": function () { return this.type_add_class_private.apply(this, arguments); }
        },
        "typeAddInstancePrivate": {
          "value": function () { return this.type_add_instance_private.apply(this, arguments); }
        },
        "typeAddInterfaceCheck": {
          "value": function () { return this.type_add_interface_check.apply(this, arguments); }
        },
        "typeAddInterfaceDynamic": {
          "value": function () { return this.type_add_interface_dynamic.apply(this, arguments); }
        },
        "typeAddInterfaceStatic": {
          "value": function () { return this.type_add_interface_static.apply(this, arguments); }
        },
        "typeCheckClassCast": {
          "value": function () { return this.type_check_class_cast.apply(this, arguments); }
        },
        "typeCheckClassIsA": {
          "value": function () { return this.type_check_class_is_a.apply(this, arguments); }
        },
        "typeCheckInstance": {
          "value": function () { return this.type_check_instance.apply(this, arguments); }
        },
        "typeCheckInstanceCast": {
          "value": function () { return this.type_check_instance_cast.apply(this, arguments); }
        },
        "typeCheckInstanceIsA": {
          "value": function () { return this.type_check_instance_is_a.apply(this, arguments); }
        },
        "typeCheckInstanceIsFundamentallyA": {
          "value": function () { return this.type_check_instance_is_fundamentally_a.apply(this, arguments); }
        },
        "typeCheckIsValueType": {
          "value": function () { return this.type_check_is_value_type.apply(this, arguments); }
        },
        "typeCheckValue": {
          "value": function () { return this.type_check_value.apply(this, arguments); }
        },
        "typeCheckValueHolds": {
          "value": function () { return this.type_check_value_holds.apply(this, arguments); }
        },
        "typeChildren": {
          "value": function () { return this.type_children.apply(this, arguments); }
        },
        "typeClassAdjustPrivateOffset": {
          "value": function () { return this.type_class_adjust_private_offset.apply(this, arguments); }
        },
        "typeClassPeek": {
          "value": function () { return this.type_class_peek.apply(this, arguments); }
        },
        "typeClassPeekStatic": {
          "value": function () { return this.type_class_peek_static.apply(this, arguments); }
        },
        "typeClassRef": {
          "value": function () { return this.type_class_ref.apply(this, arguments); }
        },
        "typeCreateInstance": {
          "value": function () { return this.type_create_instance.apply(this, arguments); }
        },
        "typeDefaultInterfacePeek": {
          "value": function () { return this.type_default_interface_peek.apply(this, arguments); }
        },
        "typeDefaultInterfaceRef": {
          "value": function () { return this.type_default_interface_ref.apply(this, arguments); }
        },
        "typeDefaultInterfaceUnref": {
          "value": function () { return this.type_default_interface_unref.apply(this, arguments); }
        },
        "typeDepth": {
          "value": function () { return this.type_depth.apply(this, arguments); }
        },
        "typeEnsure": {
          "value": function () { return this.type_ensure.apply(this, arguments); }
        },
        "typeFreeInstance": {
          "value": function () { return this.type_free_instance.apply(this, arguments); }
        },
        "typeFromName": {
          "value": function () { return this.type_from_name.apply(this, arguments); }
        },
        "typeFundamental": {
          "value": function () { return this.type_fundamental.apply(this, arguments); }
        },
        "typeFundamentalNext": {
          "value": function () { return this.type_fundamental_next.apply(this, arguments); }
        },
        "typeGetInstanceCount": {
          "value": function () { return this.type_get_instance_count.apply(this, arguments); }
        },
        "typeGetPlugin": {
          "value": function () { return this.type_get_plugin.apply(this, arguments); }
        },
        "typeGetQdata": {
          "value": function () { return this.type_get_qdata.apply(this, arguments); }
        },
        "typeGetTypeRegistrationSerial": {
          "value": function () { return this.type_get_type_registration_serial.apply(this, arguments); }
        },
        "typeInit": {
          "value": function () { return this.type_init.apply(this, arguments); }
        },
        "typeInitWithDebugFlags": {
          "value": function () { return this.type_init_with_debug_flags.apply(this, arguments); }
        },
        "typeInterfaceAddPrerequisite": {
          "value": function () { return this.type_interface_add_prerequisite.apply(this, arguments); }
        },
        "typeInterfaceGetPlugin": {
          "value": function () { return this.type_interface_get_plugin.apply(this, arguments); }
        },
        "typeInterfacePeek": {
          "value": function () { return this.type_interface_peek.apply(this, arguments); }
        },
        "typeInterfacePrerequisites": {
          "value": function () { return this.type_interface_prerequisites.apply(this, arguments); }
        },
        "typeInterfaces": {
          "value": function () { return this.type_interfaces.apply(this, arguments); }
        },
        "typeIsA": {
          "value": function () { return this.type_is_a.apply(this, arguments); }
        },
        "typeName": {
          "value": function () { return this.type_name.apply(this, arguments); }
        },
        "typeNameFromClass": {
          "value": function () { return this.type_name_from_class.apply(this, arguments); }
        },
        "typeNameFromInstance": {
          "value": function () { return this.type_name_from_instance.apply(this, arguments); }
        },
        "typeNextBase": {
          "value": function () { return this.type_next_base.apply(this, arguments); }
        },
        "typeParent": {
          "value": function () { return this.type_parent.apply(this, arguments); }
        },
        "typeQname": {
          "value": function () { return this.type_qname.apply(this, arguments); }
        },
        "typeQuery": {
          "value": function () { return this.type_query.apply(this, arguments); }
        },
        "typeRegisterDynamic": {
          "value": function () { return this.type_register_dynamic.apply(this, arguments); }
        },
        "typeRegisterFundamental": {
          "value": function () { return this.type_register_fundamental.apply(this, arguments); }
        },
        "typeRegisterStatic": {
          "value": function () { return this.type_register_static.apply(this, arguments); }
        },
        "typeRegisterStaticSimple": {
          "value": function () { return this.type_register_static_simple.apply(this, arguments); }
        },
        "typeRemoveClassCacheFunc": {
          "value": function () { return this.type_remove_class_cache_func.apply(this, arguments); }
        },
        "typeRemoveInterfaceCheck": {
          "value": function () { return this.type_remove_interface_check.apply(this, arguments); }
        },
        "typeSetQdata": {
          "value": function () { return this.type_set_qdata.apply(this, arguments); }
        },
        "typeTestFlags": {
          "value": function () { return this.type_test_flags.apply(this, arguments); }
        },
        "typeValueTablePeek": {
          "value": function () { return this.type_value_table_peek.apply(this, arguments); }
        },
        "valueRegisterTransformFunc": {
          "value": function () { return this.value_register_transform_func.apply(this, arguments); }
        },
        "valueTypeCompatible": {
          "value": function () { return this.value_type_compatible.apply(this, arguments); }
        },
        "valueTypeTransformable": {
          "value": function () { return this.value_type_transformable.apply(this, arguments); }
        }
      }
    },
    "GWeather": {
      "class": {
        "Info": {
          "prototype": {
            "getApparent": {
              "value": function () { return this.get_apparent.apply(this, arguments); }
            },
            "getAttribution": {
              "value": function () { return this.get_attribution.apply(this, arguments); }
            },
            "getConditions": {
              "value": function () { return this.get_conditions.apply(this, arguments); }
            },
            "getDew": {
              "value": function () { return this.get_dew.apply(this, arguments); }
            },
            "getEnabledProviders": {
              "value": function () { return this.get_enabled_providers.apply(this, arguments); }
            },
            "getForecast": {
              "value": function () { return this.get_forecast.apply(this, arguments); }
            },
            "getForecastList": {
              "value": function () { return this.get_forecast_list.apply(this, arguments); }
            },
            "getHumidity": {
              "value": function () { return this.get_humidity.apply(this, arguments); }
            },
            "getIconName": {
              "value": function () { return this.get_icon_name.apply(this, arguments); }
            },
            "getLocation": {
              "value": function () { return this.get_location.apply(this, arguments); }
            },
            "getLocationName": {
              "value": function () { return this.get_location_name.apply(this, arguments); }
            },
            "getPressure": {
              "value": function () { return this.get_pressure.apply(this, arguments); }
            },
            "getRadar": {
              "value": function () { return this.get_radar.apply(this, arguments); }
            },
            "getSky": {
              "value": function () { return this.get_sky.apply(this, arguments); }
            },
            "getSunrise": {
              "value": function () { return this.get_sunrise.apply(this, arguments); }
            },
            "getSunset": {
              "value": function () { return this.get_sunset.apply(this, arguments); }
            },
            "getSymbolicIconName": {
              "value": function () { return this.get_symbolic_icon_name.apply(this, arguments); }
            },
            "getTemp": {
              "value": function () { return this.get_temp.apply(this, arguments); }
            },
            "getTempMax": {
              "value": function () { return this.get_temp_max.apply(this, arguments); }
            },
            "getTempMin": {
              "value": function () { return this.get_temp_min.apply(this, arguments); }
            },
            "getTempSummary": {
              "value": function () { return this.get_temp_summary.apply(this, arguments); }
            },
            "getUpcomingMoonphases": {
              "value": function () { return this.get_upcoming_moonphases.apply(this, arguments); }
            },
            "getUpdate": {
              "value": function () { return this.get_update.apply(this, arguments); }
            },
            "getValueApparent": {
              "value": function () { return this.get_value_apparent.apply(this, arguments); }
            },
            "getValueConditions": {
              "value": function () { return this.get_value_conditions.apply(this, arguments); }
            },
            "getValueDew": {
              "value": function () { return this.get_value_dew.apply(this, arguments); }
            },
            "getValueMoonphase": {
              "value": function () { return this.get_value_moonphase.apply(this, arguments); }
            },
            "getValuePressure": {
              "value": function () { return this.get_value_pressure.apply(this, arguments); }
            },
            "getValueSky": {
              "value": function () { return this.get_value_sky.apply(this, arguments); }
            },
            "getValueSunrise": {
              "value": function () { return this.get_value_sunrise.apply(this, arguments); }
            },
            "getValueSunset": {
              "value": function () { return this.get_value_sunset.apply(this, arguments); }
            },
            "getValueTemp": {
              "value": function () { return this.get_value_temp.apply(this, arguments); }
            },
            "getValueTempMax": {
              "value": function () { return this.get_value_temp_max.apply(this, arguments); }
            },
            "getValueTempMin": {
              "value": function () { return this.get_value_temp_min.apply(this, arguments); }
            },
            "getValueUpdate": {
              "value": function () { return this.get_value_update.apply(this, arguments); }
            },
            "getValueVisibility": {
              "value": function () { return this.get_value_visibility.apply(this, arguments); }
            },
            "getValueWind": {
              "value": function () { return this.get_value_wind.apply(this, arguments); }
            },
            "getVisibility": {
              "value": function () { return this.get_visibility.apply(this, arguments); }
            },
            "getWeatherSummary": {
              "value": function () { return this.get_weather_summary.apply(this, arguments); }
            },
            "getWind": {
              "value": function () { return this.get_wind.apply(this, arguments); }
            },
            "isDaytime": {
              "value": function () { return this.is_daytime.apply(this, arguments); }
            },
            "isValid": {
              "value": function () { return this.is_valid.apply(this, arguments); }
            },
            "networkError": {
              "value": function () { return this.network_error.apply(this, arguments); }
            },
            "nextSunEvent": {
              "value": function () { return this.next_sun_event.apply(this, arguments); }
            },
            "setEnabledProviders": {
              "value": function () { return this.set_enabled_providers.apply(this, arguments); }
            },
            "setLocation": {
              "value": function () { return this.set_location.apply(this, arguments); }
            },
            "enabledProviders": {
              "get": function () { return this.enabled_providers; },
              "set": function (value) { this.enabled_providers = value; }
            }
          },
          "static": {
            "storeCache": {
              "value": function () { return this.store_cache.apply(this, arguments); }
            }
          }
        },
        "LocationEntry": {
          "prototype": {
            "getLocation": {
              "value": function () { return this.get_location.apply(this, arguments); }
            },
            "hasCustomText": {
              "value": function () { return this.has_custom_text.apply(this, arguments); }
            },
            "setCity": {
              "value": function () { return this.set_city.apply(this, arguments); }
            },
            "setLocation": {
              "value": function () { return this.set_location.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "TimezoneMenu": {
          "prototype": {
            "getTzid": {
              "value": function () { return this.get_tzid.apply(this, arguments); }
            },
            "setTzid": {
              "value": function () { return this.set_tzid.apply(this, arguments); }
            }
          },
          "static": {}
        }
      },
      "static": {
        "locationDetectNearestCityFinish": {
          "value": function () { return this.location_detect_nearest_city_finish.apply(this, arguments); }
        },
        "locationGetWorld": {
          "value": function () { return this.location_get_world.apply(this, arguments); }
        },
        "skyToString": {
          "value": function () { return this.sky_to_string.apply(this, arguments); }
        },
        "temperatureUnitToReal": {
          "value": function () { return this.temperature_unit_to_real.apply(this, arguments); }
        },
        "timezoneGetByTzid": {
          "value": function () { return this.timezone_get_by_tzid.apply(this, arguments); }
        },
        "timezoneGetUtc": {
          "value": function () { return this.timezone_get_utc.apply(this, arguments); }
        },
        "windDirectionToString": {
          "value": function () { return this.wind_direction_to_string.apply(this, arguments); }
        }
      }
    },
    "Gck": {
      "class": {
        "Enumerator": {
          "prototype": {
            "getChained": {
              "value": function () { return this.get_chained.apply(this, arguments); }
            },
            "getInteraction": {
              "value": function () { return this.get_interaction.apply(this, arguments); }
            },
            "getObjectType": {
              "value": function () { return this.get_object_type.apply(this, arguments); }
            },
            "nextAsync": {
              "value": function () { return this.next_async.apply(this, arguments); }
            },
            "nextFinish": {
              "value": function () { return this.next_finish.apply(this, arguments); }
            },
            "nextN": {
              "value": function () { return this.next_n.apply(this, arguments); }
            },
            "setChained": {
              "value": function () { return this.set_chained.apply(this, arguments); }
            },
            "setInteraction": {
              "value": function () { return this.set_interaction.apply(this, arguments); }
            },
            "setObjectType": {
              "value": function () { return this.set_object_type.apply(this, arguments); }
            },
            "setObjectTypeFull": {
              "value": function () { return this.set_object_type_full.apply(this, arguments); }
            },
            "objectType": {
              "get": function () { return this.object_type; },
              "set": function (value) { this.object_type = value; }
            }
          },
          "static": {}
        },
        "Module": {
          "prototype": {
            "getFunctions": {
              "value": function () { return this.get_functions.apply(this, arguments); }
            },
            "getInfo": {
              "value": function () { return this.get_info.apply(this, arguments); }
            },
            "getPath": {
              "value": function () { return this.get_path.apply(this, arguments); }
            },
            "getSlots": {
              "value": function () { return this.get_slots.apply(this, arguments); }
            }
          },
          "static": {
            "initializeAsync": {
              "value": function () { return this.initialize_async.apply(this, arguments); }
            },
            "initializeFinish": {
              "value": function () { return this.initialize_finish.apply(this, arguments); }
            }
          }
        },
        "Object": {
          "prototype": {
            "cacheLookup": {
              "value": function () { return this.cache_lookup.apply(this, arguments); }
            },
            "cacheLookupAsync": {
              "value": function () { return this.cache_lookup_async.apply(this, arguments); }
            },
            "cacheLookupFinish": {
              "value": function () { return this.cache_lookup_finish.apply(this, arguments); }
            },
            "destroyAsync": {
              "value": function () { return this.destroy_async.apply(this, arguments); }
            },
            "destroyFinish": {
              "value": function () { return this.destroy_finish.apply(this, arguments); }
            },
            "getAsync": {
              "value": function () { return this.get_async.apply(this, arguments); }
            },
            "getData": {
              "value": function () { return this.get_data.apply(this, arguments); }
            },
            "getDataAsync": {
              "value": function () { return this.get_data_async.apply(this, arguments); }
            },
            "getDataFinish": {
              "value": function () { return this.get_data_finish.apply(this, arguments); }
            },
            "getDataFull": {
              "value": function () { return this.get_data_full.apply(this, arguments); }
            },
            "getFinish": {
              "value": function () { return this.get_finish.apply(this, arguments); }
            },
            "getFull": {
              "value": function () { return this.get_full.apply(this, arguments); }
            },
            "getHandle": {
              "value": function () { return this.get_handle.apply(this, arguments); }
            },
            "getModule": {
              "value": function () { return this.get_module.apply(this, arguments); }
            },
            "getSession": {
              "value": function () { return this.get_session.apply(this, arguments); }
            },
            "getTemplate": {
              "value": function () { return this.get_template.apply(this, arguments); }
            },
            "getTemplateAsync": {
              "value": function () { return this.get_template_async.apply(this, arguments); }
            },
            "getTemplateFinish": {
              "value": function () { return this.get_template_finish.apply(this, arguments); }
            },
            "setAsync": {
              "value": function () { return this.set_async.apply(this, arguments); }
            },
            "setFinish": {
              "value": function () { return this.set_finish.apply(this, arguments); }
            },
            "setTemplate": {
              "value": function () { return this.set_template.apply(this, arguments); }
            },
            "setTemplateAsync": {
              "value": function () { return this.set_template_async.apply(this, arguments); }
            },
            "setTemplateFinish": {
              "value": function () { return this.set_template_finish.apply(this, arguments); }
            }
          },
          "static": {
            "fromHandle": {
              "value": function () { return this.from_handle.apply(this, arguments); }
            }
          }
        },
        "Password": {
          "prototype": {
            "getKey": {
              "value": function () { return this.get_key.apply(this, arguments); }
            },
            "getModule": {
              "value": function () { return this.get_module.apply(this, arguments); }
            },
            "getToken": {
              "value": function () { return this.get_token.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Session": {
          "prototype": {
            "createObject": {
              "value": function () { return this.create_object.apply(this, arguments); }
            },
            "createObjectAsync": {
              "value": function () { return this.create_object_async.apply(this, arguments); }
            },
            "createObjectFinish": {
              "value": function () { return this.create_object_finish.apply(this, arguments); }
            },
            "decryptAsync": {
              "value": function () { return this.decrypt_async.apply(this, arguments); }
            },
            "decryptFinish": {
              "value": function () { return this.decrypt_finish.apply(this, arguments); }
            },
            "decryptFull": {
              "value": function () { return this.decrypt_full.apply(this, arguments); }
            },
            "deriveKey": {
              "value": function () { return this.derive_key.apply(this, arguments); }
            },
            "deriveKeyAsync": {
              "value": function () { return this.derive_key_async.apply(this, arguments); }
            },
            "deriveKeyFinish": {
              "value": function () { return this.derive_key_finish.apply(this, arguments); }
            },
            "deriveKeyFull": {
              "value": function () { return this.derive_key_full.apply(this, arguments); }
            },
            "encryptAsync": {
              "value": function () { return this.encrypt_async.apply(this, arguments); }
            },
            "encryptFinish": {
              "value": function () { return this.encrypt_finish.apply(this, arguments); }
            },
            "encryptFull": {
              "value": function () { return this.encrypt_full.apply(this, arguments); }
            },
            "enumerateObjects": {
              "value": function () { return this.enumerate_objects.apply(this, arguments); }
            },
            "findHandles": {
              "value": function () { return this.find_handles.apply(this, arguments); }
            },
            "findHandlesAsync": {
              "value": function () { return this.find_handles_async.apply(this, arguments); }
            },
            "findHandlesFinish": {
              "value": function () { return this.find_handles_finish.apply(this, arguments); }
            },
            "findObjects": {
              "value": function () { return this.find_objects.apply(this, arguments); }
            },
            "findObjectsAsync": {
              "value": function () { return this.find_objects_async.apply(this, arguments); }
            },
            "findObjectsFinish": {
              "value": function () { return this.find_objects_finish.apply(this, arguments); }
            },
            "generateKeyPair": {
              "value": function () { return this.generate_key_pair.apply(this, arguments); }
            },
            "generateKeyPairAsync": {
              "value": function () { return this.generate_key_pair_async.apply(this, arguments); }
            },
            "generateKeyPairFinish": {
              "value": function () { return this.generate_key_pair_finish.apply(this, arguments); }
            },
            "generateKeyPairFull": {
              "value": function () { return this.generate_key_pair_full.apply(this, arguments); }
            },
            "getHandle": {
              "value": function () { return this.get_handle.apply(this, arguments); }
            },
            "getInfo": {
              "value": function () { return this.get_info.apply(this, arguments); }
            },
            "getInteraction": {
              "value": function () { return this.get_interaction.apply(this, arguments); }
            },
            "getModule": {
              "value": function () { return this.get_module.apply(this, arguments); }
            },
            "getOptions": {
              "value": function () { return this.get_options.apply(this, arguments); }
            },
            "getSlot": {
              "value": function () { return this.get_slot.apply(this, arguments); }
            },
            "getState": {
              "value": function () { return this.get_state.apply(this, arguments); }
            },
            "initPin": {
              "value": function () { return this.init_pin.apply(this, arguments); }
            },
            "initPinAsync": {
              "value": function () { return this.init_pin_async.apply(this, arguments); }
            },
            "initPinFinish": {
              "value": function () { return this.init_pin_finish.apply(this, arguments); }
            },
            "loginAsync": {
              "value": function () { return this.login_async.apply(this, arguments); }
            },
            "loginFinish": {
              "value": function () { return this.login_finish.apply(this, arguments); }
            },
            "loginInteractive": {
              "value": function () { return this.login_interactive.apply(this, arguments); }
            },
            "loginInteractiveAsync": {
              "value": function () { return this.login_interactive_async.apply(this, arguments); }
            },
            "loginInteractiveFinish": {
              "value": function () { return this.login_interactive_finish.apply(this, arguments); }
            },
            "logoutAsync": {
              "value": function () { return this.logout_async.apply(this, arguments); }
            },
            "logoutFinish": {
              "value": function () { return this.logout_finish.apply(this, arguments); }
            },
            "setInteraction": {
              "value": function () { return this.set_interaction.apply(this, arguments); }
            },
            "setPin": {
              "value": function () { return this.set_pin.apply(this, arguments); }
            },
            "setPinAsync": {
              "value": function () { return this.set_pin_async.apply(this, arguments); }
            },
            "setPinFinish": {
              "value": function () { return this.set_pin_finish.apply(this, arguments); }
            },
            "signAsync": {
              "value": function () { return this.sign_async.apply(this, arguments); }
            },
            "signFinish": {
              "value": function () { return this.sign_finish.apply(this, arguments); }
            },
            "signFull": {
              "value": function () { return this.sign_full.apply(this, arguments); }
            },
            "unwrapKey": {
              "value": function () { return this.unwrap_key.apply(this, arguments); }
            },
            "unwrapKeyAsync": {
              "value": function () { return this.unwrap_key_async.apply(this, arguments); }
            },
            "unwrapKeyFinish": {
              "value": function () { return this.unwrap_key_finish.apply(this, arguments); }
            },
            "unwrapKeyFull": {
              "value": function () { return this.unwrap_key_full.apply(this, arguments); }
            },
            "verifyAsync": {
              "value": function () { return this.verify_async.apply(this, arguments); }
            },
            "verifyFinish": {
              "value": function () { return this.verify_finish.apply(this, arguments); }
            },
            "verifyFull": {
              "value": function () { return this.verify_full.apply(this, arguments); }
            },
            "wrapKey": {
              "value": function () { return this.wrap_key.apply(this, arguments); }
            },
            "wrapKeyAsync": {
              "value": function () { return this.wrap_key_async.apply(this, arguments); }
            },
            "wrapKeyFinish": {
              "value": function () { return this.wrap_key_finish.apply(this, arguments); }
            },
            "wrapKeyFull": {
              "value": function () { return this.wrap_key_full.apply(this, arguments); }
            },
            "appData": {
              "get": function () { return this.app_data; },
              "set": function (value) { this.app_data = value; }
            },
            "openingFlags": {
              "get": function () { return this.opening_flags; },
              "set": function (value) { this.opening_flags = value; }
            }
          },
          "static": {
            "fromHandle": {
              "value": function () { return this.from_handle.apply(this, arguments); }
            },
            "openAsync": {
              "value": function () { return this.open_async.apply(this, arguments); }
            },
            "openFinish": {
              "value": function () { return this.open_finish.apply(this, arguments); }
            }
          }
        },
        "Slot": {
          "prototype": {
            "enumerateObjects": {
              "value": function () { return this.enumerate_objects.apply(this, arguments); }
            },
            "getHandle": {
              "value": function () { return this.get_handle.apply(this, arguments); }
            },
            "getInfo": {
              "value": function () { return this.get_info.apply(this, arguments); }
            },
            "getMechanismInfo": {
              "value": function () { return this.get_mechanism_info.apply(this, arguments); }
            },
            "getMechanisms": {
              "value": function () { return this.get_mechanisms.apply(this, arguments); }
            },
            "getModule": {
              "value": function () { return this.get_module.apply(this, arguments); }
            },
            "getTokenInfo": {
              "value": function () { return this.get_token_info.apply(this, arguments); }
            },
            "hasFlags": {
              "value": function () { return this.has_flags.apply(this, arguments); }
            },
            "openSession": {
              "value": function () { return this.open_session.apply(this, arguments); }
            },
            "openSessionAsync": {
              "value": function () { return this.open_session_async.apply(this, arguments); }
            },
            "openSessionFinish": {
              "value": function () { return this.open_session_finish.apply(this, arguments); }
            },
            "openSessionFull": {
              "value": function () { return this.open_session_full.apply(this, arguments); }
            },
            "openSessionFullAsync": {
              "value": function () { return this.open_session_full_async.apply(this, arguments); }
            }
          },
          "static": {
            "fromHandle": {
              "value": function () { return this.from_handle.apply(this, arguments); }
            }
          }
        }
      },
      "static": {
        "attributesUnref": {
          "value": function () { return this.attributes_unref.apply(this, arguments); }
        },
        "builderUnref": {
          "value": function () { return this.builder_unref.apply(this, arguments); }
        },
        "errorGetQuark": {
          "value": function () { return this.error_get_quark.apply(this, arguments); }
        },
        "listGetBoxedType": {
          "value": function () { return this.list_get_boxed_type.apply(this, arguments); }
        },
        "listRefCopy": {
          "value": function () { return this.list_ref_copy.apply(this, arguments); }
        },
        "listUnrefFree": {
          "value": function () { return this.list_unref_free.apply(this, arguments); }
        },
        "mechanismsCheck": {
          "value": function () { return this.mechanisms_check.apply(this, arguments); }
        },
        "messageFromRv": {
          "value": function () { return this.message_from_rv.apply(this, arguments); }
        },
        "modulesEnumerateObjects": {
          "value": function () { return this.modules_enumerate_objects.apply(this, arguments); }
        },
        "modulesEnumerateUri": {
          "value": function () { return this.modules_enumerate_uri.apply(this, arguments); }
        },
        "modulesGetSlots": {
          "value": function () { return this.modules_get_slots.apply(this, arguments); }
        },
        "modulesInitializeRegistered": {
          "value": function () { return this.modules_initialize_registered.apply(this, arguments); }
        },
        "modulesInitializeRegisteredAsync": {
          "value": function () { return this.modules_initialize_registered_async.apply(this, arguments); }
        },
        "modulesInitializeRegisteredFinish": {
          "value": function () { return this.modules_initialize_registered_finish.apply(this, arguments); }
        },
        "modulesObjectForUri": {
          "value": function () { return this.modules_object_for_uri.apply(this, arguments); }
        },
        "modulesObjectsForUri": {
          "value": function () { return this.modules_objects_for_uri.apply(this, arguments); }
        },
        "modulesTokenForUri": {
          "value": function () { return this.modules_token_for_uri.apply(this, arguments); }
        },
        "modulesTokensForUri": {
          "value": function () { return this.modules_tokens_for_uri.apply(this, arguments); }
        },
        "objectsFromHandleArray": {
          "value": function () { return this.objects_from_handle_array.apply(this, arguments); }
        },
        "slotsEnumerateObjects": {
          "value": function () { return this.slots_enumerate_objects.apply(this, arguments); }
        },
        "stringFromChars": {
          "value": function () { return this.string_from_chars.apply(this, arguments); }
        },
        "stringToChars": {
          "value": function () { return this.string_to_chars.apply(this, arguments); }
        },
        "uriBuild": {
          "value": function () { return this.uri_build.apply(this, arguments); }
        },
        "uriErrorGetQuark": {
          "value": function () { return this.uri_error_get_quark.apply(this, arguments); }
        },
        "uriParse": {
          "value": function () { return this.uri_parse.apply(this, arguments); }
        },
        "valueToBoolean": {
          "value": function () { return this.value_to_boolean.apply(this, arguments); }
        },
        "valueToUlong": {
          "value": function () { return this.value_to_ulong.apply(this, arguments); }
        }
      }
    },
    "Gcr": {
      "class": {
        "CertificateChain": {
          "prototype": {
            "buildAsync": {
              "value": function () { return this.build_async.apply(this, arguments); }
            },
            "buildFinish": {
              "value": function () { return this.build_finish.apply(this, arguments); }
            },
            "getAnchor": {
              "value": function () { return this.get_anchor.apply(this, arguments); }
            },
            "getCertificate": {
              "value": function () { return this.get_certificate.apply(this, arguments); }
            },
            "getEndpoint": {
              "value": function () { return this.get_endpoint.apply(this, arguments); }
            },
            "getLength": {
              "value": function () { return this.get_length.apply(this, arguments); }
            },
            "getStatus": {
              "value": function () { return this.get_status.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "CertificateRequest": {
          "prototype": {
            "completeAsync": {
              "value": function () { return this.complete_async.apply(this, arguments); }
            },
            "completeFinish": {
              "value": function () { return this.complete_finish.apply(this, arguments); }
            },
            "getFormat": {
              "value": function () { return this.get_format.apply(this, arguments); }
            },
            "getPrivateKey": {
              "value": function () { return this.get_private_key.apply(this, arguments); }
            },
            "setCn": {
              "value": function () { return this.set_cn.apply(this, arguments); }
            },
            "privateKey": {
              "get": function () { return this.private_key; },
              "set": function (value) { this.private_key = value; }
            }
          },
          "static": {
            "capableAsync": {
              "value": function () { return this.capable_async.apply(this, arguments); }
            },
            "capableFinish": {
              "value": function () { return this.capable_finish.apply(this, arguments); }
            }
          }
        },
        "FilterCollection": {
          "prototype": {
            "getUnderlying": {
              "value": function () { return this.get_underlying.apply(this, arguments); }
            },
            "setCallback": {
              "value": function () { return this.set_callback.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Parser": {
          "prototype": {
            "addPassword": {
              "value": function () { return this.add_password.apply(this, arguments); }
            },
            "formatDisable": {
              "value": function () { return this.format_disable.apply(this, arguments); }
            },
            "formatEnable": {
              "value": function () { return this.format_enable.apply(this, arguments); }
            },
            "formatSupported": {
              "value": function () { return this.format_supported.apply(this, arguments); }
            },
            "getFilename": {
              "value": function () { return this.get_filename.apply(this, arguments); }
            },
            "getParsed": {
              "value": function () { return this.get_parsed.apply(this, arguments); }
            },
            "getParsedAttributes": {
              "value": function () { return this.get_parsed_attributes.apply(this, arguments); }
            },
            "getParsedBlock": {
              "value": function () { return this.get_parsed_block.apply(this, arguments); }
            },
            "getParsedBytes": {
              "value": function () { return this.get_parsed_bytes.apply(this, arguments); }
            },
            "getParsedDescription": {
              "value": function () { return this.get_parsed_description.apply(this, arguments); }
            },
            "getParsedFormat": {
              "value": function () { return this.get_parsed_format.apply(this, arguments); }
            },
            "getParsedLabel": {
              "value": function () { return this.get_parsed_label.apply(this, arguments); }
            },
            "parseBytes": {
              "value": function () { return this.parse_bytes.apply(this, arguments); }
            },
            "parseData": {
              "value": function () { return this.parse_data.apply(this, arguments); }
            },
            "parseStream": {
              "value": function () { return this.parse_stream.apply(this, arguments); }
            },
            "parseStreamAsync": {
              "value": function () { return this.parse_stream_async.apply(this, arguments); }
            },
            "parseStreamFinish": {
              "value": function () { return this.parse_stream_finish.apply(this, arguments); }
            },
            "setFilename": {
              "value": function () { return this.set_filename.apply(this, arguments); }
            },
            "parsedAttributes": {
              "get": function () { return this.parsed_attributes; },
              "set": function (value) { this.parsed_attributes = value; }
            },
            "parsedDescription": {
              "get": function () { return this.parsed_description; },
              "set": function (value) { this.parsed_description = value; }
            },
            "parsedLabel": {
              "get": function () { return this.parsed_label; },
              "set": function (value) { this.parsed_label = value; }
            }
          },
          "static": {}
        },
        "Pkcs11Certificate": {
          "prototype": {
            "getAttributes": {
              "value": function () { return this.get_attributes.apply(this, arguments); }
            }
          },
          "static": {
            "lookupIssuer": {
              "value": function () { return this.lookup_issuer.apply(this, arguments); }
            },
            "lookupIssuerAsync": {
              "value": function () { return this.lookup_issuer_async.apply(this, arguments); }
            },
            "lookupIssuerFinish": {
              "value": function () { return this.lookup_issuer_finish.apply(this, arguments); }
            }
          }
        },
        "SecretExchange": {
          "prototype": {
            "getProtocol": {
              "value": function () { return this.get_protocol.apply(this, arguments); }
            },
            "getSecret": {
              "value": function () { return this.get_secret.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "SimpleCertificate": {
          "prototype": {},
          "static": {}
        },
        "SimpleCollection": {
          "prototype": {},
          "static": {}
        },
        "SystemPrompt": {
          "prototype": {
            "closeAsync": {
              "value": function () { return this.close_async.apply(this, arguments); }
            },
            "closeFinish": {
              "value": function () { return this.close_finish.apply(this, arguments); }
            },
            "getSecretExchange": {
              "value": function () { return this.get_secret_exchange.apply(this, arguments); }
            },
            "busName": {
              "get": function () { return this.bus_name; },
              "set": function (value) { this.bus_name = value; }
            },
            "secretExchange": {
              "get": function () { return this.secret_exchange; },
              "set": function (value) { this.secret_exchange = value; }
            },
            "timeoutSeconds": {
              "get": function () { return this.timeout_seconds; },
              "set": function (value) { this.timeout_seconds = value; }
            }
          },
          "static": {
            "errorGetDomain": {
              "value": function () { return this.error_get_domain.apply(this, arguments); }
            },
            "openAsync": {
              "value": function () { return this.open_async.apply(this, arguments); }
            },
            "openFinish": {
              "value": function () { return this.open_finish.apply(this, arguments); }
            },
            "openForPrompter": {
              "value": function () { return this.open_for_prompter.apply(this, arguments); }
            },
            "openForPrompterAsync": {
              "value": function () { return this.open_for_prompter_async.apply(this, arguments); }
            }
          }
        },
        "SystemPrompter": {
          "prototype": {
            "getMode": {
              "value": function () { return this.get_mode.apply(this, arguments); }
            },
            "getPromptType": {
              "value": function () { return this.get_prompt_type.apply(this, arguments); }
            },
            "getPrompting": {
              "value": function () { return this.get_prompting.apply(this, arguments); }
            },
            "promptType": {
              "get": function () { return this.prompt_type; },
              "set": function (value) { this.prompt_type = value; }
            }
          },
          "static": {}
        },
        "UnionCollection": {
          "prototype": {},
          "static": {}
        }
      },
      "static": {
        "certificateCompare": {
          "value": function () { return this.certificate_compare.apply(this, arguments); }
        },
        "certificateGetColumns": {
          "value": function () { return this.certificate_get_columns.apply(this, arguments); }
        },
        "certificateMixinClassInit": {
          "value": function () { return this.certificate_mixin_class_init.apply(this, arguments); }
        },
        "certificateMixinComparableInit": {
          "value": function () { return this.certificate_mixin_comparable_init.apply(this, arguments); }
        },
        "certificateMixinGetProperty": {
          "value": function () { return this.certificate_mixin_get_property.apply(this, arguments); }
        },
        "comparableMemcmp": {
          "value": function () { return this.comparable_memcmp.apply(this, arguments); }
        },
        "dataErrorGetDomain": {
          "value": function () { return this.data_error_get_domain.apply(this, arguments); }
        },
        "fingerprintFromAttributes": {
          "value": function () { return this.fingerprint_from_attributes.apply(this, arguments); }
        },
        "fingerprintFromSubjectPublicKeyInfo": {
          "value": function () { return this.fingerprint_from_subject_public_key_info.apply(this, arguments); }
        },
        "iconForToken": {
          "value": function () { return this.icon_for_token.apply(this, arguments); }
        },
        "importerCreateForParsed": {
          "value": function () { return this.importer_create_for_parsed.apply(this, arguments); }
        },
        "importerQueueAndFilterForParsed": {
          "value": function () { return this.importer_queue_and_filter_for_parsed.apply(this, arguments); }
        },
        "importerRegister": {
          "value": function () { return this.importer_register.apply(this, arguments); }
        },
        "importerRegisterWellKnown": {
          "value": function () { return this.importer_register_well_known.apply(this, arguments); }
        },
        "mockPrompterDisconnect": {
          "value": function () { return this.mock_prompter_disconnect.apply(this, arguments); }
        },
        "mockPrompterExpectClose": {
          "value": function () { return this.mock_prompter_expect_close.apply(this, arguments); }
        },
        "mockPrompterExpectConfirmCancel": {
          "value": function () { return this.mock_prompter_expect_confirm_cancel.apply(this, arguments); }
        },
        "mockPrompterExpectConfirmOk": {
          "value": function () { return this.mock_prompter_expect_confirm_ok.apply(this, arguments); }
        },
        "mockPrompterExpectPasswordCancel": {
          "value": function () { return this.mock_prompter_expect_password_cancel.apply(this, arguments); }
        },
        "mockPrompterExpectPasswordOk": {
          "value": function () { return this.mock_prompter_expect_password_ok.apply(this, arguments); }
        },
        "mockPrompterGetDelayMsec": {
          "value": function () { return this.mock_prompter_get_delay_msec.apply(this, arguments); }
        },
        "mockPrompterIsExpecting": {
          "value": function () { return this.mock_prompter_is_expecting.apply(this, arguments); }
        },
        "mockPrompterIsPrompting": {
          "value": function () { return this.mock_prompter_is_prompting.apply(this, arguments); }
        },
        "mockPrompterSetDelayMsec": {
          "value": function () { return this.mock_prompter_set_delay_msec.apply(this, arguments); }
        },
        "mockPrompterStart": {
          "value": function () { return this.mock_prompter_start.apply(this, arguments); }
        },
        "mockPrompterStop": {
          "value": function () { return this.mock_prompter_stop.apply(this, arguments); }
        },
        "parsedUnref": {
          "value": function () { return this.parsed_unref.apply(this, arguments); }
        },
        "pkcs11AddModule": {
          "value": function () { return this.pkcs11_add_module.apply(this, arguments); }
        },
        "pkcs11AddModuleFromFile": {
          "value": function () { return this.pkcs11_add_module_from_file.apply(this, arguments); }
        },
        "pkcs11GetModules": {
          "value": function () { return this.pkcs11_get_modules.apply(this, arguments); }
        },
        "pkcs11GetTrustLookupSlots": {
          "value": function () { return this.pkcs11_get_trust_lookup_slots.apply(this, arguments); }
        },
        "pkcs11GetTrustLookupUris": {
          "value": function () { return this.pkcs11_get_trust_lookup_uris.apply(this, arguments); }
        },
        "pkcs11GetTrustStoreSlot": {
          "value": function () { return this.pkcs11_get_trust_store_slot.apply(this, arguments); }
        },
        "pkcs11GetTrustStoreUri": {
          "value": function () { return this.pkcs11_get_trust_store_uri.apply(this, arguments); }
        },
        "pkcs11Initialize": {
          "value": function () { return this.pkcs11_initialize.apply(this, arguments); }
        },
        "pkcs11InitializeAsync": {
          "value": function () { return this.pkcs11_initialize_async.apply(this, arguments); }
        },
        "pkcs11InitializeFinish": {
          "value": function () { return this.pkcs11_initialize_finish.apply(this, arguments); }
        },
        "pkcs11SetModules": {
          "value": function () { return this.pkcs11_set_modules.apply(this, arguments); }
        },
        "pkcs11SetTrustLookupUris": {
          "value": function () { return this.pkcs11_set_trust_lookup_uris.apply(this, arguments); }
        },
        "pkcs11SetTrustStoreUri": {
          "value": function () { return this.pkcs11_set_trust_store_uri.apply(this, arguments); }
        },
        "secureMemoryAlloc": {
          "value": function () { return this.secure_memory_alloc.apply(this, arguments); }
        },
        "secureMemoryFree": {
          "value": function () { return this.secure_memory_free.apply(this, arguments); }
        },
        "secureMemoryIsSecure": {
          "value": function () { return this.secure_memory_is_secure.apply(this, arguments); }
        },
        "secureMemoryRealloc": {
          "value": function () { return this.secure_memory_realloc.apply(this, arguments); }
        },
        "secureMemoryStrdup": {
          "value": function () { return this.secure_memory_strdup.apply(this, arguments); }
        },
        "secureMemoryStrfree": {
          "value": function () { return this.secure_memory_strfree.apply(this, arguments); }
        },
        "secureMemoryTryAlloc": {
          "value": function () { return this.secure_memory_try_alloc.apply(this, arguments); }
        },
        "secureMemoryTryRealloc": {
          "value": function () { return this.secure_memory_try_realloc.apply(this, arguments); }
        }
      }
    },
    "Gdk": {
      "class": {
        "AppLaunchContext": {
          "prototype": {
            "setDesktop": {
              "value": function () { return this.set_desktop.apply(this, arguments); }
            },
            "setDisplay": {
              "value": function () { return this.set_display.apply(this, arguments); }
            },
            "setIcon": {
              "value": function () { return this.set_icon.apply(this, arguments); }
            },
            "setIconName": {
              "value": function () { return this.set_icon_name.apply(this, arguments); }
            },
            "setScreen": {
              "value": function () { return this.set_screen.apply(this, arguments); }
            },
            "setTimestamp": {
              "value": function () { return this.set_timestamp.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Cursor": {
          "prototype": {
            "getCursorType": {
              "value": function () { return this.get_cursor_type.apply(this, arguments); }
            },
            "getDisplay": {
              "value": function () { return this.get_display.apply(this, arguments); }
            },
            "getImage": {
              "value": function () { return this.get_image.apply(this, arguments); }
            },
            "getSurface": {
              "value": function () { return this.get_surface.apply(this, arguments); }
            },
            "cursorType": {
              "get": function () { return this.cursor_type; },
              "set": function (value) { this.cursor_type = value; }
            }
          },
          "static": {}
        },
        "Device": {
          "prototype": {
            "getAssociatedDevice": {
              "value": function () { return this.get_associated_device.apply(this, arguments); }
            },
            "getAxis": {
              "value": function () { return this.get_axis.apply(this, arguments); }
            },
            "getAxisUse": {
              "value": function () { return this.get_axis_use.apply(this, arguments); }
            },
            "getAxisValue": {
              "value": function () { return this.get_axis_value.apply(this, arguments); }
            },
            "getDeviceType": {
              "value": function () { return this.get_device_type.apply(this, arguments); }
            },
            "getDisplay": {
              "value": function () { return this.get_display.apply(this, arguments); }
            },
            "getHasCursor": {
              "value": function () { return this.get_has_cursor.apply(this, arguments); }
            },
            "getHistory": {
              "value": function () { return this.get_history.apply(this, arguments); }
            },
            "getKey": {
              "value": function () { return this.get_key.apply(this, arguments); }
            },
            "getLastEventWindow": {
              "value": function () { return this.get_last_event_window.apply(this, arguments); }
            },
            "getMode": {
              "value": function () { return this.get_mode.apply(this, arguments); }
            },
            "getNAxes": {
              "value": function () { return this.get_n_axes.apply(this, arguments); }
            },
            "getNKeys": {
              "value": function () { return this.get_n_keys.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getPosition": {
              "value": function () { return this.get_position.apply(this, arguments); }
            },
            "getPositionDouble": {
              "value": function () { return this.get_position_double.apply(this, arguments); }
            },
            "getProductId": {
              "value": function () { return this.get_product_id.apply(this, arguments); }
            },
            "getSource": {
              "value": function () { return this.get_source.apply(this, arguments); }
            },
            "getState": {
              "value": function () { return this.get_state.apply(this, arguments); }
            },
            "getVendorId": {
              "value": function () { return this.get_vendor_id.apply(this, arguments); }
            },
            "getWindowAtPosition": {
              "value": function () { return this.get_window_at_position.apply(this, arguments); }
            },
            "getWindowAtPositionDouble": {
              "value": function () { return this.get_window_at_position_double.apply(this, arguments); }
            },
            "listAxes": {
              "value": function () { return this.list_axes.apply(this, arguments); }
            },
            "listSlaveDevices": {
              "value": function () { return this.list_slave_devices.apply(this, arguments); }
            },
            "setAxisUse": {
              "value": function () { return this.set_axis_use.apply(this, arguments); }
            },
            "setKey": {
              "value": function () { return this.set_key.apply(this, arguments); }
            },
            "setMode": {
              "value": function () { return this.set_mode.apply(this, arguments); }
            },
            "associatedDevice": {
              "get": function () { return this.associated_device; },
              "set": function (value) { this.associated_device = value; }
            },
            "deviceManager": {
              "get": function () { return this.device_manager; },
              "set": function (value) { this.device_manager = value; }
            },
            "hasCursor": {
              "get": function () { return this.has_cursor; },
              "set": function (value) { this.has_cursor = value; }
            },
            "inputMode": {
              "get": function () { return this.input_mode; },
              "set": function (value) { this.input_mode = value; }
            },
            "inputSource": {
              "get": function () { return this.input_source; },
              "set": function (value) { this.input_source = value; }
            },
            "nAxes": {
              "get": function () { return this.n_axes; },
              "set": function (value) { this.n_axes = value; }
            },
            "productId": {
              "get": function () { return this.product_id; },
              "set": function (value) { this.product_id = value; }
            },
            "vendorId": {
              "get": function () { return this.vendor_id; },
              "set": function (value) { this.vendor_id = value; }
            }
          },
          "static": {
            "freeHistory": {
              "value": function () { return this.free_history.apply(this, arguments); }
            },
            "grabInfoLibgtkOnly": {
              "value": function () { return this.grab_info_libgtk_only.apply(this, arguments); }
            }
          }
        },
        "DeviceManager": {
          "prototype": {
            "getClientPointer": {
              "value": function () { return this.get_client_pointer.apply(this, arguments); }
            },
            "getDisplay": {
              "value": function () { return this.get_display.apply(this, arguments); }
            },
            "listDevices": {
              "value": function () { return this.list_devices.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Display": {
          "prototype": {
            "deviceIsGrabbed": {
              "value": function () { return this.device_is_grabbed.apply(this, arguments); }
            },
            "getAppLaunchContext": {
              "value": function () { return this.get_app_launch_context.apply(this, arguments); }
            },
            "getDefaultCursorSize": {
              "value": function () { return this.get_default_cursor_size.apply(this, arguments); }
            },
            "getDefaultGroup": {
              "value": function () { return this.get_default_group.apply(this, arguments); }
            },
            "getDefaultScreen": {
              "value": function () { return this.get_default_screen.apply(this, arguments); }
            },
            "getDeviceManager": {
              "value": function () { return this.get_device_manager.apply(this, arguments); }
            },
            "getEvent": {
              "value": function () { return this.get_event.apply(this, arguments); }
            },
            "getMaximalCursorSize": {
              "value": function () { return this.get_maximal_cursor_size.apply(this, arguments); }
            },
            "getNScreens": {
              "value": function () { return this.get_n_screens.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getPointer": {
              "value": function () { return this.get_pointer.apply(this, arguments); }
            },
            "getScreen": {
              "value": function () { return this.get_screen.apply(this, arguments); }
            },
            "getWindowAtPointer": {
              "value": function () { return this.get_window_at_pointer.apply(this, arguments); }
            },
            "hasPending": {
              "value": function () { return this.has_pending.apply(this, arguments); }
            },
            "isClosed": {
              "value": function () { return this.is_closed.apply(this, arguments); }
            },
            "keyboardUngrab": {
              "value": function () { return this.keyboard_ungrab.apply(this, arguments); }
            },
            "listDevices": {
              "value": function () { return this.list_devices.apply(this, arguments); }
            },
            "notifyStartupComplete": {
              "value": function () { return this.notify_startup_complete.apply(this, arguments); }
            },
            "peekEvent": {
              "value": function () { return this.peek_event.apply(this, arguments); }
            },
            "pointerIsGrabbed": {
              "value": function () { return this.pointer_is_grabbed.apply(this, arguments); }
            },
            "pointerUngrab": {
              "value": function () { return this.pointer_ungrab.apply(this, arguments); }
            },
            "putEvent": {
              "value": function () { return this.put_event.apply(this, arguments); }
            },
            "requestSelectionNotification": {
              "value": function () { return this.request_selection_notification.apply(this, arguments); }
            },
            "setDoubleClickDistance": {
              "value": function () { return this.set_double_click_distance.apply(this, arguments); }
            },
            "setDoubleClickTime": {
              "value": function () { return this.set_double_click_time.apply(this, arguments); }
            },
            "storeClipboard": {
              "value": function () { return this.store_clipboard.apply(this, arguments); }
            },
            "supportsClipboardPersistence": {
              "value": function () { return this.supports_clipboard_persistence.apply(this, arguments); }
            },
            "supportsComposite": {
              "value": function () { return this.supports_composite.apply(this, arguments); }
            },
            "supportsCursorAlpha": {
              "value": function () { return this.supports_cursor_alpha.apply(this, arguments); }
            },
            "supportsCursorColor": {
              "value": function () { return this.supports_cursor_color.apply(this, arguments); }
            },
            "supportsInputShapes": {
              "value": function () { return this.supports_input_shapes.apply(this, arguments); }
            },
            "supportsSelectionNotification": {
              "value": function () { return this.supports_selection_notification.apply(this, arguments); }
            },
            "supportsShapes": {
              "value": function () { return this.supports_shapes.apply(this, arguments); }
            },
            "warpPointer": {
              "value": function () { return this.warp_pointer.apply(this, arguments); }
            }
          },
          "static": {
            "getDefault": {
              "value": function () { return this.get_default.apply(this, arguments); }
            },
            "openDefaultLibgtkOnly": {
              "value": function () { return this.open_default_libgtk_only.apply(this, arguments); }
            }
          }
        },
        "DisplayManager": {
          "prototype": {
            "getDefaultDisplay": {
              "value": function () { return this.get_default_display.apply(this, arguments); }
            },
            "listDisplays": {
              "value": function () { return this.list_displays.apply(this, arguments); }
            },
            "openDisplay": {
              "value": function () { return this.open_display.apply(this, arguments); }
            },
            "setDefaultDisplay": {
              "value": function () { return this.set_default_display.apply(this, arguments); }
            },
            "defaultDisplay": {
              "get": function () { return this.default_display; },
              "set": function (value) { this.default_display = value; }
            }
          },
          "static": {}
        },
        "DragContext": {
          "prototype": {
            "getActions": {
              "value": function () { return this.get_actions.apply(this, arguments); }
            },
            "getDestWindow": {
              "value": function () { return this.get_dest_window.apply(this, arguments); }
            },
            "getDevice": {
              "value": function () { return this.get_device.apply(this, arguments); }
            },
            "getDragWindow": {
              "value": function () { return this.get_drag_window.apply(this, arguments); }
            },
            "getProtocol": {
              "value": function () { return this.get_protocol.apply(this, arguments); }
            },
            "getSelectedAction": {
              "value": function () { return this.get_selected_action.apply(this, arguments); }
            },
            "getSourceWindow": {
              "value": function () { return this.get_source_window.apply(this, arguments); }
            },
            "getSuggestedAction": {
              "value": function () { return this.get_suggested_action.apply(this, arguments); }
            },
            "listTargets": {
              "value": function () { return this.list_targets.apply(this, arguments); }
            },
            "setDevice": {
              "value": function () { return this.set_device.apply(this, arguments); }
            },
            "setHotspot": {
              "value": function () { return this.set_hotspot.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "FrameClock": {
          "prototype": {
            "beginUpdating": {
              "value": function () { return this.begin_updating.apply(this, arguments); }
            },
            "endUpdating": {
              "value": function () { return this.end_updating.apply(this, arguments); }
            },
            "getCurrentTimings": {
              "value": function () { return this.get_current_timings.apply(this, arguments); }
            },
            "getFrameCounter": {
              "value": function () { return this.get_frame_counter.apply(this, arguments); }
            },
            "getFrameTime": {
              "value": function () { return this.get_frame_time.apply(this, arguments); }
            },
            "getHistoryStart": {
              "value": function () { return this.get_history_start.apply(this, arguments); }
            },
            "getRefreshInfo": {
              "value": function () { return this.get_refresh_info.apply(this, arguments); }
            },
            "getTimings": {
              "value": function () { return this.get_timings.apply(this, arguments); }
            },
            "requestPhase": {
              "value": function () { return this.request_phase.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "GLContext": {
          "prototype": {
            "getDebugEnabled": {
              "value": function () { return this.get_debug_enabled.apply(this, arguments); }
            },
            "getDisplay": {
              "value": function () { return this.get_display.apply(this, arguments); }
            },
            "getForwardCompatible": {
              "value": function () { return this.get_forward_compatible.apply(this, arguments); }
            },
            "getRequiredVersion": {
              "value": function () { return this.get_required_version.apply(this, arguments); }
            },
            "getSharedContext": {
              "value": function () { return this.get_shared_context.apply(this, arguments); }
            },
            "getVersion": {
              "value": function () { return this.get_version.apply(this, arguments); }
            },
            "getWindow": {
              "value": function () { return this.get_window.apply(this, arguments); }
            },
            "isLegacy": {
              "value": function () { return this.is_legacy.apply(this, arguments); }
            },
            "makeCurrent": {
              "value": function () { return this.make_current.apply(this, arguments); }
            },
            "setDebugEnabled": {
              "value": function () { return this.set_debug_enabled.apply(this, arguments); }
            },
            "setForwardCompatible": {
              "value": function () { return this.set_forward_compatible.apply(this, arguments); }
            },
            "setRequiredVersion": {
              "value": function () { return this.set_required_version.apply(this, arguments); }
            },
            "sharedContext": {
              "get": function () { return this.shared_context; },
              "set": function (value) { this.shared_context = value; }
            }
          },
          "static": {
            "clearCurrent": {
              "value": function () { return this.clear_current.apply(this, arguments); }
            },
            "getCurrent": {
              "value": function () { return this.get_current.apply(this, arguments); }
            }
          }
        },
        "Keymap": {
          "prototype": {
            "addVirtualModifiers": {
              "value": function () { return this.add_virtual_modifiers.apply(this, arguments); }
            },
            "getCapsLockState": {
              "value": function () { return this.get_caps_lock_state.apply(this, arguments); }
            },
            "getDirection": {
              "value": function () { return this.get_direction.apply(this, arguments); }
            },
            "getEntriesForKeycode": {
              "value": function () { return this.get_entries_for_keycode.apply(this, arguments); }
            },
            "getEntriesForKeyval": {
              "value": function () { return this.get_entries_for_keyval.apply(this, arguments); }
            },
            "getModifierMask": {
              "value": function () { return this.get_modifier_mask.apply(this, arguments); }
            },
            "getModifierState": {
              "value": function () { return this.get_modifier_state.apply(this, arguments); }
            },
            "getNumLockState": {
              "value": function () { return this.get_num_lock_state.apply(this, arguments); }
            },
            "getScrollLockState": {
              "value": function () { return this.get_scroll_lock_state.apply(this, arguments); }
            },
            "haveBidiLayouts": {
              "value": function () { return this.have_bidi_layouts.apply(this, arguments); }
            },
            "lookupKey": {
              "value": function () { return this.lookup_key.apply(this, arguments); }
            },
            "mapVirtualModifiers": {
              "value": function () { return this.map_virtual_modifiers.apply(this, arguments); }
            },
            "translateKeyboardState": {
              "value": function () { return this.translate_keyboard_state.apply(this, arguments); }
            }
          },
          "static": {
            "getDefault": {
              "value": function () { return this.get_default.apply(this, arguments); }
            },
            "getForDisplay": {
              "value": function () { return this.get_for_display.apply(this, arguments); }
            }
          }
        },
        "Screen": {
          "prototype": {
            "getActiveWindow": {
              "value": function () { return this.get_active_window.apply(this, arguments); }
            },
            "getDisplay": {
              "value": function () { return this.get_display.apply(this, arguments); }
            },
            "getFontOptions": {
              "value": function () { return this.get_font_options.apply(this, arguments); }
            },
            "getHeight": {
              "value": function () { return this.get_height.apply(this, arguments); }
            },
            "getHeightMm": {
              "value": function () { return this.get_height_mm.apply(this, arguments); }
            },
            "getMonitorAtPoint": {
              "value": function () { return this.get_monitor_at_point.apply(this, arguments); }
            },
            "getMonitorAtWindow": {
              "value": function () { return this.get_monitor_at_window.apply(this, arguments); }
            },
            "getMonitorGeometry": {
              "value": function () { return this.get_monitor_geometry.apply(this, arguments); }
            },
            "getMonitorHeightMm": {
              "value": function () { return this.get_monitor_height_mm.apply(this, arguments); }
            },
            "getMonitorPlugName": {
              "value": function () { return this.get_monitor_plug_name.apply(this, arguments); }
            },
            "getMonitorScaleFactor": {
              "value": function () { return this.get_monitor_scale_factor.apply(this, arguments); }
            },
            "getMonitorWidthMm": {
              "value": function () { return this.get_monitor_width_mm.apply(this, arguments); }
            },
            "getMonitorWorkarea": {
              "value": function () { return this.get_monitor_workarea.apply(this, arguments); }
            },
            "getNMonitors": {
              "value": function () { return this.get_n_monitors.apply(this, arguments); }
            },
            "getNumber": {
              "value": function () { return this.get_number.apply(this, arguments); }
            },
            "getPrimaryMonitor": {
              "value": function () { return this.get_primary_monitor.apply(this, arguments); }
            },
            "getResolution": {
              "value": function () { return this.get_resolution.apply(this, arguments); }
            },
            "getRgbaVisual": {
              "value": function () { return this.get_rgba_visual.apply(this, arguments); }
            },
            "getRootWindow": {
              "value": function () { return this.get_root_window.apply(this, arguments); }
            },
            "getSetting": {
              "value": function () { return this.get_setting.apply(this, arguments); }
            },
            "getSystemVisual": {
              "value": function () { return this.get_system_visual.apply(this, arguments); }
            },
            "getToplevelWindows": {
              "value": function () { return this.get_toplevel_windows.apply(this, arguments); }
            },
            "getWidth": {
              "value": function () { return this.get_width.apply(this, arguments); }
            },
            "getWidthMm": {
              "value": function () { return this.get_width_mm.apply(this, arguments); }
            },
            "getWindowStack": {
              "value": function () { return this.get_window_stack.apply(this, arguments); }
            },
            "isComposited": {
              "value": function () { return this.is_composited.apply(this, arguments); }
            },
            "listVisuals": {
              "value": function () { return this.list_visuals.apply(this, arguments); }
            },
            "makeDisplayName": {
              "value": function () { return this.make_display_name.apply(this, arguments); }
            },
            "setFontOptions": {
              "value": function () { return this.set_font_options.apply(this, arguments); }
            },
            "setResolution": {
              "value": function () { return this.set_resolution.apply(this, arguments); }
            },
            "fontOptions": {
              "get": function () { return this.font_options; },
              "set": function (value) { this.font_options = value; }
            }
          },
          "static": {
            "getDefault": {
              "value": function () { return this.get_default.apply(this, arguments); }
            },
            "heightMm": {
              "value": function () { return this.height_mm.apply(this, arguments); }
            },
            "widthMm": {
              "value": function () { return this.width_mm.apply(this, arguments); }
            }
          }
        },
        "Visual": {
          "prototype": {
            "getBitsPerRgb": {
              "value": function () { return this.get_bits_per_rgb.apply(this, arguments); }
            },
            "getBluePixelDetails": {
              "value": function () { return this.get_blue_pixel_details.apply(this, arguments); }
            },
            "getByteOrder": {
              "value": function () { return this.get_byte_order.apply(this, arguments); }
            },
            "getColormapSize": {
              "value": function () { return this.get_colormap_size.apply(this, arguments); }
            },
            "getDepth": {
              "value": function () { return this.get_depth.apply(this, arguments); }
            },
            "getGreenPixelDetails": {
              "value": function () { return this.get_green_pixel_details.apply(this, arguments); }
            },
            "getRedPixelDetails": {
              "value": function () { return this.get_red_pixel_details.apply(this, arguments); }
            },
            "getScreen": {
              "value": function () { return this.get_screen.apply(this, arguments); }
            },
            "getVisualType": {
              "value": function () { return this.get_visual_type.apply(this, arguments); }
            }
          },
          "static": {
            "getBest": {
              "value": function () { return this.get_best.apply(this, arguments); }
            },
            "getBestDepth": {
              "value": function () { return this.get_best_depth.apply(this, arguments); }
            },
            "getBestType": {
              "value": function () { return this.get_best_type.apply(this, arguments); }
            },
            "getBestWithBoth": {
              "value": function () { return this.get_best_with_both.apply(this, arguments); }
            },
            "getBestWithDepth": {
              "value": function () { return this.get_best_with_depth.apply(this, arguments); }
            },
            "getBestWithType": {
              "value": function () { return this.get_best_with_type.apply(this, arguments); }
            },
            "getSystem": {
              "value": function () { return this.get_system.apply(this, arguments); }
            }
          }
        },
        "Window": {
          "prototype": {
            "addFilter": {
              "value": function () { return this.add_filter.apply(this, arguments); }
            },
            "beginMoveDrag": {
              "value": function () { return this.begin_move_drag.apply(this, arguments); }
            },
            "beginMoveDragForDevice": {
              "value": function () { return this.begin_move_drag_for_device.apply(this, arguments); }
            },
            "beginPaintRect": {
              "value": function () { return this.begin_paint_rect.apply(this, arguments); }
            },
            "beginPaintRegion": {
              "value": function () { return this.begin_paint_region.apply(this, arguments); }
            },
            "beginResizeDrag": {
              "value": function () { return this.begin_resize_drag.apply(this, arguments); }
            },
            "beginResizeDragForDevice": {
              "value": function () { return this.begin_resize_drag_for_device.apply(this, arguments); }
            },
            "configureFinished": {
              "value": function () { return this.configure_finished.apply(this, arguments); }
            },
            "coordsFromParent": {
              "value": function () { return this.coords_from_parent.apply(this, arguments); }
            },
            "coordsToParent": {
              "value": function () { return this.coords_to_parent.apply(this, arguments); }
            },
            "createGlContext": {
              "value": function () { return this.create_gl_context.apply(this, arguments); }
            },
            "createSimilarImageSurface": {
              "value": function () { return this.create_similar_image_surface.apply(this, arguments); }
            },
            "createSimilarSurface": {
              "value": function () { return this.create_similar_surface.apply(this, arguments); }
            },
            "destroyNotify": {
              "value": function () { return this.destroy_notify.apply(this, arguments); }
            },
            "enableSynchronizedConfigure": {
              "value": function () { return this.enable_synchronized_configure.apply(this, arguments); }
            },
            "endPaint": {
              "value": function () { return this.end_paint.apply(this, arguments); }
            },
            "ensureNative": {
              "value": function () { return this.ensure_native.apply(this, arguments); }
            },
            "freezeToplevelUpdatesLibgtkOnly": {
              "value": function () { return this.freeze_toplevel_updates_libgtk_only.apply(this, arguments); }
            },
            "freezeUpdates": {
              "value": function () { return this.freeze_updates.apply(this, arguments); }
            },
            "fullscreenOnMonitor": {
              "value": function () { return this.fullscreen_on_monitor.apply(this, arguments); }
            },
            "geometryChanged": {
              "value": function () { return this.geometry_changed.apply(this, arguments); }
            },
            "getAcceptFocus": {
              "value": function () { return this.get_accept_focus.apply(this, arguments); }
            },
            "getBackgroundPattern": {
              "value": function () { return this.get_background_pattern.apply(this, arguments); }
            },
            "getChildren": {
              "value": function () { return this.get_children.apply(this, arguments); }
            },
            "getChildrenWithUserData": {
              "value": function () { return this.get_children_with_user_data.apply(this, arguments); }
            },
            "getClipRegion": {
              "value": function () { return this.get_clip_region.apply(this, arguments); }
            },
            "getComposited": {
              "value": function () { return this.get_composited.apply(this, arguments); }
            },
            "getCursor": {
              "value": function () { return this.get_cursor.apply(this, arguments); }
            },
            "getDecorations": {
              "value": function () { return this.get_decorations.apply(this, arguments); }
            },
            "getDeviceCursor": {
              "value": function () { return this.get_device_cursor.apply(this, arguments); }
            },
            "getDeviceEvents": {
              "value": function () { return this.get_device_events.apply(this, arguments); }
            },
            "getDevicePosition": {
              "value": function () { return this.get_device_position.apply(this, arguments); }
            },
            "getDevicePositionDouble": {
              "value": function () { return this.get_device_position_double.apply(this, arguments); }
            },
            "getDisplay": {
              "value": function () { return this.get_display.apply(this, arguments); }
            },
            "getDragProtocol": {
              "value": function () { return this.get_drag_protocol.apply(this, arguments); }
            },
            "getEffectiveParent": {
              "value": function () { return this.get_effective_parent.apply(this, arguments); }
            },
            "getEffectiveToplevel": {
              "value": function () { return this.get_effective_toplevel.apply(this, arguments); }
            },
            "getEventCompression": {
              "value": function () { return this.get_event_compression.apply(this, arguments); }
            },
            "getEvents": {
              "value": function () { return this.get_events.apply(this, arguments); }
            },
            "getFocusOnMap": {
              "value": function () { return this.get_focus_on_map.apply(this, arguments); }
            },
            "getFrameClock": {
              "value": function () { return this.get_frame_clock.apply(this, arguments); }
            },
            "getFrameExtents": {
              "value": function () { return this.get_frame_extents.apply(this, arguments); }
            },
            "getFullscreenMode": {
              "value": function () { return this.get_fullscreen_mode.apply(this, arguments); }
            },
            "getGeometry": {
              "value": function () { return this.get_geometry.apply(this, arguments); }
            },
            "getGroup": {
              "value": function () { return this.get_group.apply(this, arguments); }
            },
            "getHeight": {
              "value": function () { return this.get_height.apply(this, arguments); }
            },
            "getModalHint": {
              "value": function () { return this.get_modal_hint.apply(this, arguments); }
            },
            "getOrigin": {
              "value": function () { return this.get_origin.apply(this, arguments); }
            },
            "getParent": {
              "value": function () { return this.get_parent.apply(this, arguments); }
            },
            "getPassThrough": {
              "value": function () { return this.get_pass_through.apply(this, arguments); }
            },
            "getPointer": {
              "value": function () { return this.get_pointer.apply(this, arguments); }
            },
            "getPosition": {
              "value": function () { return this.get_position.apply(this, arguments); }
            },
            "getRootCoords": {
              "value": function () { return this.get_root_coords.apply(this, arguments); }
            },
            "getRootOrigin": {
              "value": function () { return this.get_root_origin.apply(this, arguments); }
            },
            "getScaleFactor": {
              "value": function () { return this.get_scale_factor.apply(this, arguments); }
            },
            "getScreen": {
              "value": function () { return this.get_screen.apply(this, arguments); }
            },
            "getSourceEvents": {
              "value": function () { return this.get_source_events.apply(this, arguments); }
            },
            "getState": {
              "value": function () { return this.get_state.apply(this, arguments); }
            },
            "getSupportMultidevice": {
              "value": function () { return this.get_support_multidevice.apply(this, arguments); }
            },
            "getToplevel": {
              "value": function () { return this.get_toplevel.apply(this, arguments); }
            },
            "getTypeHint": {
              "value": function () { return this.get_type_hint.apply(this, arguments); }
            },
            "getUpdateArea": {
              "value": function () { return this.get_update_area.apply(this, arguments); }
            },
            "getUserData": {
              "value": function () { return this.get_user_data.apply(this, arguments); }
            },
            "getVisibleRegion": {
              "value": function () { return this.get_visible_region.apply(this, arguments); }
            },
            "getVisual": {
              "value": function () { return this.get_visual.apply(this, arguments); }
            },
            "getWidth": {
              "value": function () { return this.get_width.apply(this, arguments); }
            },
            "getWindowType": {
              "value": function () { return this.get_window_type.apply(this, arguments); }
            },
            "hasNative": {
              "value": function () { return this.has_native.apply(this, arguments); }
            },
            "inputShapeCombineRegion": {
              "value": function () { return this.input_shape_combine_region.apply(this, arguments); }
            },
            "invalidateMaybeRecurse": {
              "value": function () { return this.invalidate_maybe_recurse.apply(this, arguments); }
            },
            "invalidateRect": {
              "value": function () { return this.invalidate_rect.apply(this, arguments); }
            },
            "invalidateRegion": {
              "value": function () { return this.invalidate_region.apply(this, arguments); }
            },
            "isDestroyed": {
              "value": function () { return this.is_destroyed.apply(this, arguments); }
            },
            "isInputOnly": {
              "value": function () { return this.is_input_only.apply(this, arguments); }
            },
            "isShaped": {
              "value": function () { return this.is_shaped.apply(this, arguments); }
            },
            "isViewable": {
              "value": function () { return this.is_viewable.apply(this, arguments); }
            },
            "isVisible": {
              "value": function () { return this.is_visible.apply(this, arguments); }
            },
            "markPaintFromClip": {
              "value": function () { return this.mark_paint_from_clip.apply(this, arguments); }
            },
            "mergeChildInputShapes": {
              "value": function () { return this.merge_child_input_shapes.apply(this, arguments); }
            },
            "mergeChildShapes": {
              "value": function () { return this.merge_child_shapes.apply(this, arguments); }
            },
            "moveRegion": {
              "value": function () { return this.move_region.apply(this, arguments); }
            },
            "moveResize": {
              "value": function () { return this.move_resize.apply(this, arguments); }
            },
            "peekChildren": {
              "value": function () { return this.peek_children.apply(this, arguments); }
            },
            "processUpdates": {
              "value": function () { return this.process_updates.apply(this, arguments); }
            },
            "registerDnd": {
              "value": function () { return this.register_dnd.apply(this, arguments); }
            },
            "removeFilter": {
              "value": function () { return this.remove_filter.apply(this, arguments); }
            },
            "setAcceptFocus": {
              "value": function () { return this.set_accept_focus.apply(this, arguments); }
            },
            "setBackground": {
              "value": function () { return this.set_background.apply(this, arguments); }
            },
            "setBackgroundPattern": {
              "value": function () { return this.set_background_pattern.apply(this, arguments); }
            },
            "setBackgroundRgba": {
              "value": function () { return this.set_background_rgba.apply(this, arguments); }
            },
            "setChildInputShapes": {
              "value": function () { return this.set_child_input_shapes.apply(this, arguments); }
            },
            "setChildShapes": {
              "value": function () { return this.set_child_shapes.apply(this, arguments); }
            },
            "setComposited": {
              "value": function () { return this.set_composited.apply(this, arguments); }
            },
            "setCursor": {
              "value": function () { return this.set_cursor.apply(this, arguments); }
            },
            "setDecorations": {
              "value": function () { return this.set_decorations.apply(this, arguments); }
            },
            "setDeviceCursor": {
              "value": function () { return this.set_device_cursor.apply(this, arguments); }
            },
            "setDeviceEvents": {
              "value": function () { return this.set_device_events.apply(this, arguments); }
            },
            "setEventCompression": {
              "value": function () { return this.set_event_compression.apply(this, arguments); }
            },
            "setEvents": {
              "value": function () { return this.set_events.apply(this, arguments); }
            },
            "setFocusOnMap": {
              "value": function () { return this.set_focus_on_map.apply(this, arguments); }
            },
            "setFullscreenMode": {
              "value": function () { return this.set_fullscreen_mode.apply(this, arguments); }
            },
            "setFunctions": {
              "value": function () { return this.set_functions.apply(this, arguments); }
            },
            "setGeometryHints": {
              "value": function () { return this.set_geometry_hints.apply(this, arguments); }
            },
            "setGroup": {
              "value": function () { return this.set_group.apply(this, arguments); }
            },
            "setIconList": {
              "value": function () { return this.set_icon_list.apply(this, arguments); }
            },
            "setIconName": {
              "value": function () { return this.set_icon_name.apply(this, arguments); }
            },
            "setInvalidateHandler": {
              "value": function () { return this.set_invalidate_handler.apply(this, arguments); }
            },
            "setKeepAbove": {
              "value": function () { return this.set_keep_above.apply(this, arguments); }
            },
            "setKeepBelow": {
              "value": function () { return this.set_keep_below.apply(this, arguments); }
            },
            "setModalHint": {
              "value": function () { return this.set_modal_hint.apply(this, arguments); }
            },
            "setOpacity": {
              "value": function () { return this.set_opacity.apply(this, arguments); }
            },
            "setOpaqueRegion": {
              "value": function () { return this.set_opaque_region.apply(this, arguments); }
            },
            "setOverrideRedirect": {
              "value": function () { return this.set_override_redirect.apply(this, arguments); }
            },
            "setPassThrough": {
              "value": function () { return this.set_pass_through.apply(this, arguments); }
            },
            "setRole": {
              "value": function () { return this.set_role.apply(this, arguments); }
            },
            "setShadowWidth": {
              "value": function () { return this.set_shadow_width.apply(this, arguments); }
            },
            "setSkipPagerHint": {
              "value": function () { return this.set_skip_pager_hint.apply(this, arguments); }
            },
            "setSkipTaskbarHint": {
              "value": function () { return this.set_skip_taskbar_hint.apply(this, arguments); }
            },
            "setSourceEvents": {
              "value": function () { return this.set_source_events.apply(this, arguments); }
            },
            "setStartupId": {
              "value": function () { return this.set_startup_id.apply(this, arguments); }
            },
            "setStaticGravities": {
              "value": function () { return this.set_static_gravities.apply(this, arguments); }
            },
            "setSupportMultidevice": {
              "value": function () { return this.set_support_multidevice.apply(this, arguments); }
            },
            "setTitle": {
              "value": function () { return this.set_title.apply(this, arguments); }
            },
            "setTransientFor": {
              "value": function () { return this.set_transient_for.apply(this, arguments); }
            },
            "setTypeHint": {
              "value": function () { return this.set_type_hint.apply(this, arguments); }
            },
            "setUrgencyHint": {
              "value": function () { return this.set_urgency_hint.apply(this, arguments); }
            },
            "setUserData": {
              "value": function () { return this.set_user_data.apply(this, arguments); }
            },
            "shapeCombineRegion": {
              "value": function () { return this.shape_combine_region.apply(this, arguments); }
            },
            "showUnraised": {
              "value": function () { return this.show_unraised.apply(this, arguments); }
            },
            "showWindowMenu": {
              "value": function () { return this.show_window_menu.apply(this, arguments); }
            },
            "thawToplevelUpdatesLibgtkOnly": {
              "value": function () { return this.thaw_toplevel_updates_libgtk_only.apply(this, arguments); }
            },
            "thawUpdates": {
              "value": function () { return this.thaw_updates.apply(this, arguments); }
            }
          },
          "static": {
            "atPointer": {
              "value": function () { return this.at_pointer.apply(this, arguments); }
            },
            "constrainSize": {
              "value": function () { return this.constrain_size.apply(this, arguments); }
            },
            "processAllUpdates": {
              "value": function () { return this.process_all_updates.apply(this, arguments); }
            },
            "setDebugUpdates": {
              "value": function () { return this.set_debug_updates.apply(this, arguments); }
            }
          }
        }
      },
      "static": {
        "addOptionEntriesLibgtkOnly": {
          "value": function () { return this.add_option_entries_libgtk_only.apply(this, arguments); }
        },
        "atomIntern": {
          "value": function () { return this.atom_intern.apply(this, arguments); }
        },
        "atomInternStaticString": {
          "value": function () { return this.atom_intern_static_string.apply(this, arguments); }
        },
        "cairoCreate": {
          "value": function () { return this.cairo_create.apply(this, arguments); }
        },
        "cairoDrawFromGl": {
          "value": function () { return this.cairo_draw_from_gl.apply(this, arguments); }
        },
        "cairoGetClipRectangle": {
          "value": function () { return this.cairo_get_clip_rectangle.apply(this, arguments); }
        },
        "cairoRectangle": {
          "value": function () { return this.cairo_rectangle.apply(this, arguments); }
        },
        "cairoRegion": {
          "value": function () { return this.cairo_region.apply(this, arguments); }
        },
        "cairoRegionCreateFromSurface": {
          "value": function () { return this.cairo_region_create_from_surface.apply(this, arguments); }
        },
        "cairoSetSourceColor": {
          "value": function () { return this.cairo_set_source_color.apply(this, arguments); }
        },
        "cairoSetSourcePixbuf": {
          "value": function () { return this.cairo_set_source_pixbuf.apply(this, arguments); }
        },
        "cairoSetSourceRgba": {
          "value": function () { return this.cairo_set_source_rgba.apply(this, arguments); }
        },
        "cairoSetSourceWindow": {
          "value": function () { return this.cairo_set_source_window.apply(this, arguments); }
        },
        "cairoSurfaceCreateFromPixbuf": {
          "value": function () { return this.cairo_surface_create_from_pixbuf.apply(this, arguments); }
        },
        "colorParse": {
          "value": function () { return this.color_parse.apply(this, arguments); }
        },
        "disableMultidevice": {
          "value": function () { return this.disable_multidevice.apply(this, arguments); }
        },
        "dragAbort": {
          "value": function () { return this.drag_abort.apply(this, arguments); }
        },
        "dragBegin": {
          "value": function () { return this.drag_begin.apply(this, arguments); }
        },
        "dragBeginForDevice": {
          "value": function () { return this.drag_begin_for_device.apply(this, arguments); }
        },
        "dragDrop": {
          "value": function () { return this.drag_drop.apply(this, arguments); }
        },
        "dragDropSucceeded": {
          "value": function () { return this.drag_drop_succeeded.apply(this, arguments); }
        },
        "dragFindWindowForScreen": {
          "value": function () { return this.drag_find_window_for_screen.apply(this, arguments); }
        },
        "dragGetSelection": {
          "value": function () { return this.drag_get_selection.apply(this, arguments); }
        },
        "dragMotion": {
          "value": function () { return this.drag_motion.apply(this, arguments); }
        },
        "dragStatus": {
          "value": function () { return this.drag_status.apply(this, arguments); }
        },
        "dropFinish": {
          "value": function () { return this.drop_finish.apply(this, arguments); }
        },
        "dropReply": {
          "value": function () { return this.drop_reply.apply(this, arguments); }
        },
        "errorTrapPop": {
          "value": function () { return this.error_trap_pop.apply(this, arguments); }
        },
        "errorTrapPopIgnored": {
          "value": function () { return this.error_trap_pop_ignored.apply(this, arguments); }
        },
        "errorTrapPush": {
          "value": function () { return this.error_trap_push.apply(this, arguments); }
        },
        "eventGet": {
          "value": function () { return this.event_get.apply(this, arguments); }
        },
        "eventHandlerSet": {
          "value": function () { return this.event_handler_set.apply(this, arguments); }
        },
        "eventPeek": {
          "value": function () { return this.event_peek.apply(this, arguments); }
        },
        "eventRequestMotions": {
          "value": function () { return this.event_request_motions.apply(this, arguments); }
        },
        "eventsGetAngle": {
          "value": function () { return this.events_get_angle.apply(this, arguments); }
        },
        "eventsGetCenter": {
          "value": function () { return this.events_get_center.apply(this, arguments); }
        },
        "eventsGetDistance": {
          "value": function () { return this.events_get_distance.apply(this, arguments); }
        },
        "eventsPending": {
          "value": function () { return this.events_pending.apply(this, arguments); }
        },
        "getDefaultRootWindow": {
          "value": function () { return this.get_default_root_window.apply(this, arguments); }
        },
        "getDisplay": {
          "value": function () { return this.get_display.apply(this, arguments); }
        },
        "getDisplayArgName": {
          "value": function () { return this.get_display_arg_name.apply(this, arguments); }
        },
        "getProgramClass": {
          "value": function () { return this.get_program_class.apply(this, arguments); }
        },
        "getShowEvents": {
          "value": function () { return this.get_show_events.apply(this, arguments); }
        },
        "glErrorQuark": {
          "value": function () { return this.gl_error_quark.apply(this, arguments); }
        },
        "initCheck": {
          "value": function () { return this.init_check.apply(this, arguments); }
        },
        "keyboardGrab": {
          "value": function () { return this.keyboard_grab.apply(this, arguments); }
        },
        "keyboardUngrab": {
          "value": function () { return this.keyboard_ungrab.apply(this, arguments); }
        },
        "keyvalConvertCase": {
          "value": function () { return this.keyval_convert_case.apply(this, arguments); }
        },
        "keyvalFromName": {
          "value": function () { return this.keyval_from_name.apply(this, arguments); }
        },
        "keyvalIsLower": {
          "value": function () { return this.keyval_is_lower.apply(this, arguments); }
        },
        "keyvalIsUpper": {
          "value": function () { return this.keyval_is_upper.apply(this, arguments); }
        },
        "keyvalName": {
          "value": function () { return this.keyval_name.apply(this, arguments); }
        },
        "keyvalToLower": {
          "value": function () { return this.keyval_to_lower.apply(this, arguments); }
        },
        "keyvalToUnicode": {
          "value": function () { return this.keyval_to_unicode.apply(this, arguments); }
        },
        "keyvalToUpper": {
          "value": function () { return this.keyval_to_upper.apply(this, arguments); }
        },
        "listVisuals": {
          "value": function () { return this.list_visuals.apply(this, arguments); }
        },
        "notifyStartupComplete": {
          "value": function () { return this.notify_startup_complete.apply(this, arguments); }
        },
        "notifyStartupCompleteWithId": {
          "value": function () { return this.notify_startup_complete_with_id.apply(this, arguments); }
        },
        "offscreenWindowGetEmbedder": {
          "value": function () { return this.offscreen_window_get_embedder.apply(this, arguments); }
        },
        "offscreenWindowGetSurface": {
          "value": function () { return this.offscreen_window_get_surface.apply(this, arguments); }
        },
        "offscreenWindowSetEmbedder": {
          "value": function () { return this.offscreen_window_set_embedder.apply(this, arguments); }
        },
        "pangoContextGet": {
          "value": function () { return this.pango_context_get.apply(this, arguments); }
        },
        "pangoContextGetForScreen": {
          "value": function () { return this.pango_context_get_for_screen.apply(this, arguments); }
        },
        "pangoLayoutGetClipRegion": {
          "value": function () { return this.pango_layout_get_clip_region.apply(this, arguments); }
        },
        "pangoLayoutLineGetClipRegion": {
          "value": function () { return this.pango_layout_line_get_clip_region.apply(this, arguments); }
        },
        "parseArgs": {
          "value": function () { return this.parse_args.apply(this, arguments); }
        },
        "pixbufGetFromSurface": {
          "value": function () { return this.pixbuf_get_from_surface.apply(this, arguments); }
        },
        "pixbufGetFromWindow": {
          "value": function () { return this.pixbuf_get_from_window.apply(this, arguments); }
        },
        "pointerGrab": {
          "value": function () { return this.pointer_grab.apply(this, arguments); }
        },
        "pointerIsGrabbed": {
          "value": function () { return this.pointer_is_grabbed.apply(this, arguments); }
        },
        "pointerUngrab": {
          "value": function () { return this.pointer_ungrab.apply(this, arguments); }
        },
        "preParseLibgtkOnly": {
          "value": function () { return this.pre_parse_libgtk_only.apply(this, arguments); }
        },
        "propertyChange": {
          "value": function () { return this.property_change.apply(this, arguments); }
        },
        "propertyDelete": {
          "value": function () { return this.property_delete.apply(this, arguments); }
        },
        "propertyGet": {
          "value": function () { return this.property_get.apply(this, arguments); }
        },
        "queryDepths": {
          "value": function () { return this.query_depths.apply(this, arguments); }
        },
        "queryVisualTypes": {
          "value": function () { return this.query_visual_types.apply(this, arguments); }
        },
        "selectionConvert": {
          "value": function () { return this.selection_convert.apply(this, arguments); }
        },
        "selectionOwnerGet": {
          "value": function () { return this.selection_owner_get.apply(this, arguments); }
        },
        "selectionOwnerGetForDisplay": {
          "value": function () { return this.selection_owner_get_for_display.apply(this, arguments); }
        },
        "selectionOwnerSet": {
          "value": function () { return this.selection_owner_set.apply(this, arguments); }
        },
        "selectionOwnerSetForDisplay": {
          "value": function () { return this.selection_owner_set_for_display.apply(this, arguments); }
        },
        "selectionPropertyGet": {
          "value": function () { return this.selection_property_get.apply(this, arguments); }
        },
        "selectionSendNotify": {
          "value": function () { return this.selection_send_notify.apply(this, arguments); }
        },
        "selectionSendNotifyForDisplay": {
          "value": function () { return this.selection_send_notify_for_display.apply(this, arguments); }
        },
        "setAllowedBackends": {
          "value": function () { return this.set_allowed_backends.apply(this, arguments); }
        },
        "setDoubleClickTime": {
          "value": function () { return this.set_double_click_time.apply(this, arguments); }
        },
        "setProgramClass": {
          "value": function () { return this.set_program_class.apply(this, arguments); }
        },
        "setShowEvents": {
          "value": function () { return this.set_show_events.apply(this, arguments); }
        },
        "settingGet": {
          "value": function () { return this.setting_get.apply(this, arguments); }
        },
        "synthesizeWindowState": {
          "value": function () { return this.synthesize_window_state.apply(this, arguments); }
        },
        "testRenderSync": {
          "value": function () { return this.test_render_sync.apply(this, arguments); }
        },
        "testSimulateButton": {
          "value": function () { return this.test_simulate_button.apply(this, arguments); }
        },
        "testSimulateKey": {
          "value": function () { return this.test_simulate_key.apply(this, arguments); }
        },
        "textPropertyToUtf8ListForDisplay": {
          "value": function () { return this.text_property_to_utf8_list_for_display.apply(this, arguments); }
        },
        "threadsAddIdle": {
          "value": function () { return this.threads_add_idle.apply(this, arguments); }
        },
        "threadsAddIdleFull": {
          "value": function () { return this.threads_add_idle_full.apply(this, arguments); }
        },
        "threadsAddTimeout": {
          "value": function () { return this.threads_add_timeout.apply(this, arguments); }
        },
        "threadsAddTimeoutFull": {
          "value": function () { return this.threads_add_timeout_full.apply(this, arguments); }
        },
        "threadsAddTimeoutSeconds": {
          "value": function () { return this.threads_add_timeout_seconds.apply(this, arguments); }
        },
        "threadsAddTimeoutSecondsFull": {
          "value": function () { return this.threads_add_timeout_seconds_full.apply(this, arguments); }
        },
        "threadsEnter": {
          "value": function () { return this.threads_enter.apply(this, arguments); }
        },
        "threadsInit": {
          "value": function () { return this.threads_init.apply(this, arguments); }
        },
        "threadsLeave": {
          "value": function () { return this.threads_leave.apply(this, arguments); }
        },
        "threadsSetLockFunctions": {
          "value": function () { return this.threads_set_lock_functions.apply(this, arguments); }
        },
        "unicodeToKeyval": {
          "value": function () { return this.unicode_to_keyval.apply(this, arguments); }
        },
        "utf8ToStringTarget": {
          "value": function () { return this.utf8_to_string_target.apply(this, arguments); }
        }
      }
    },
    "GdkPixbuf": {
      "class": {
        "Pixbuf": {
          "prototype": {
            "addAlpha": {
              "value": function () { return this.add_alpha.apply(this, arguments); }
            },
            "applyEmbeddedOrientation": {
              "value": function () { return this.apply_embedded_orientation.apply(this, arguments); }
            },
            "compositeColor": {
              "value": function () { return this.composite_color.apply(this, arguments); }
            },
            "compositeColorSimple": {
              "value": function () { return this.composite_color_simple.apply(this, arguments); }
            },
            "copyArea": {
              "value": function () { return this.copy_area.apply(this, arguments); }
            },
            "getBitsPerSample": {
              "value": function () { return this.get_bits_per_sample.apply(this, arguments); }
            },
            "getByteLength": {
              "value": function () { return this.get_byte_length.apply(this, arguments); }
            },
            "getColorspace": {
              "value": function () { return this.get_colorspace.apply(this, arguments); }
            },
            "getHasAlpha": {
              "value": function () { return this.get_has_alpha.apply(this, arguments); }
            },
            "getHeight": {
              "value": function () { return this.get_height.apply(this, arguments); }
            },
            "getNChannels": {
              "value": function () { return this.get_n_channels.apply(this, arguments); }
            },
            "getOption": {
              "value": function () { return this.get_option.apply(this, arguments); }
            },
            "getOptions": {
              "value": function () { return this.get_options.apply(this, arguments); }
            },
            "getPixels": {
              "value": function () { return this.get_pixels.apply(this, arguments); }
            },
            "getPixelsWithLength": {
              "value": function () { return this.get_pixels_with_length.apply(this, arguments); }
            },
            "getRowstride": {
              "value": function () { return this.get_rowstride.apply(this, arguments); }
            },
            "getWidth": {
              "value": function () { return this.get_width.apply(this, arguments); }
            },
            "newSubpixbuf": {
              "value": function () { return this.new_subpixbuf.apply(this, arguments); }
            },
            "readPixelBytes": {
              "value": function () { return this.read_pixel_bytes.apply(this, arguments); }
            },
            "readPixels": {
              "value": function () { return this.read_pixels.apply(this, arguments); }
            },
            "rotateSimple": {
              "value": function () { return this.rotate_simple.apply(this, arguments); }
            },
            "saturateAndPixelate": {
              "value": function () { return this.saturate_and_pixelate.apply(this, arguments); }
            },
            "saveToBuffer": {
              "value": function () { return this.save_to_buffer.apply(this, arguments); }
            },
            "saveToBufferv": {
              "value": function () { return this.save_to_bufferv.apply(this, arguments); }
            },
            "saveToCallback": {
              "value": function () { return this.save_to_callback.apply(this, arguments); }
            },
            "saveToCallbackv": {
              "value": function () { return this.save_to_callbackv.apply(this, arguments); }
            },
            "saveToStream": {
              "value": function () { return this.save_to_stream.apply(this, arguments); }
            },
            "saveToStreamAsync": {
              "value": function () { return this.save_to_stream_async.apply(this, arguments); }
            },
            "scaleSimple": {
              "value": function () { return this.scale_simple.apply(this, arguments); }
            },
            "bitsPerSample": {
              "get": function () { return this.bits_per_sample; },
              "set": function (value) { this.bits_per_sample = value; }
            },
            "hasAlpha": {
              "get": function () { return this.has_alpha; },
              "set": function (value) { this.has_alpha = value; }
            },
            "nChannels": {
              "get": function () { return this.n_channels; },
              "set": function (value) { this.n_channels = value; }
            },
            "pixelBytes": {
              "get": function () { return this.pixel_bytes; },
              "set": function (value) { this.pixel_bytes = value; }
            }
          },
          "static": {
            "fromPixdata": {
              "value": function () { return this.from_pixdata.apply(this, arguments); }
            },
            "getFileInfo": {
              "value": function () { return this.get_file_info.apply(this, arguments); }
            },
            "getFileInfoAsync": {
              "value": function () { return this.get_file_info_async.apply(this, arguments); }
            },
            "getFileInfoFinish": {
              "value": function () { return this.get_file_info_finish.apply(this, arguments); }
            },
            "getFormats": {
              "value": function () { return this.get_formats.apply(this, arguments); }
            },
            "newFromStreamAsync": {
              "value": function () { return this.new_from_stream_async.apply(this, arguments); }
            },
            "newFromStreamAtScaleAsync": {
              "value": function () { return this.new_from_stream_at_scale_async.apply(this, arguments); }
            },
            "saveToStreamFinish": {
              "value": function () { return this.save_to_stream_finish.apply(this, arguments); }
            }
          }
        },
        "PixbufAnimation": {
          "prototype": {
            "getHeight": {
              "value": function () { return this.get_height.apply(this, arguments); }
            },
            "getIter": {
              "value": function () { return this.get_iter.apply(this, arguments); }
            },
            "getStaticImage": {
              "value": function () { return this.get_static_image.apply(this, arguments); }
            },
            "getWidth": {
              "value": function () { return this.get_width.apply(this, arguments); }
            },
            "isStaticImage": {
              "value": function () { return this.is_static_image.apply(this, arguments); }
            }
          },
          "static": {
            "newFromStreamAsync": {
              "value": function () { return this.new_from_stream_async.apply(this, arguments); }
            }
          }
        },
        "PixbufAnimationIter": {
          "prototype": {
            "getDelayTime": {
              "value": function () { return this.get_delay_time.apply(this, arguments); }
            },
            "getPixbuf": {
              "value": function () { return this.get_pixbuf.apply(this, arguments); }
            },
            "onCurrentlyLoadingFrame": {
              "value": function () { return this.on_currently_loading_frame.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "PixbufLoader": {
          "prototype": {
            "getAnimation": {
              "value": function () { return this.get_animation.apply(this, arguments); }
            },
            "getFormat": {
              "value": function () { return this.get_format.apply(this, arguments); }
            },
            "getPixbuf": {
              "value": function () { return this.get_pixbuf.apply(this, arguments); }
            },
            "setSize": {
              "value": function () { return this.set_size.apply(this, arguments); }
            },
            "writeBytes": {
              "value": function () { return this.write_bytes.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "PixbufSimpleAnim": {
          "prototype": {
            "addFrame": {
              "value": function () { return this.add_frame.apply(this, arguments); }
            },
            "getLoop": {
              "value": function () { return this.get_loop.apply(this, arguments); }
            },
            "setLoop": {
              "value": function () { return this.set_loop.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "PixbufSimpleAnimIter": {
          "prototype": {},
          "static": {}
        }
      },
      "static": {
        "pixbufErrorQuark": {
          "value": function () { return this.pixbuf_error_quark.apply(this, arguments); }
        }
      }
    },
    "GdkX11": {
      "class": {
        "X11AppLaunchContext": {
          "prototype": {},
          "static": {}
        },
        "X11Cursor": {
          "prototype": {
            "getXcursor": {
              "value": function () { return this.get_xcursor.apply(this, arguments); }
            },
            "getXdisplay": {
              "value": function () { return this.get_xdisplay.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "X11DeviceCore": {
          "prototype": {},
          "static": {}
        },
        "X11DeviceManagerCore": {
          "prototype": {},
          "static": {}
        },
        "X11DeviceManagerXI2": {
          "prototype": {},
          "static": {}
        },
        "X11DeviceXI2": {
          "prototype": {
            "deviceId": {
              "get": function () { return this.device_id; },
              "set": function (value) { this.device_id = value; }
            }
          },
          "static": {}
        },
        "X11Display": {
          "prototype": {
            "broadcastStartupMessage": {
              "value": function () { return this.broadcast_startup_message.apply(this, arguments); }
            },
            "errorTrapPop": {
              "value": function () { return this.error_trap_pop.apply(this, arguments); }
            },
            "errorTrapPopIgnored": {
              "value": function () { return this.error_trap_pop_ignored.apply(this, arguments); }
            },
            "errorTrapPush": {
              "value": function () { return this.error_trap_push.apply(this, arguments); }
            },
            "getStartupNotificationId": {
              "value": function () { return this.get_startup_notification_id.apply(this, arguments); }
            },
            "getUserTime": {
              "value": function () { return this.get_user_time.apply(this, arguments); }
            },
            "getXdisplay": {
              "value": function () { return this.get_xdisplay.apply(this, arguments); }
            },
            "setCursorTheme": {
              "value": function () { return this.set_cursor_theme.apply(this, arguments); }
            },
            "setStartupNotificationId": {
              "value": function () { return this.set_startup_notification_id.apply(this, arguments); }
            },
            "setWindowScale": {
              "value": function () { return this.set_window_scale.apply(this, arguments); }
            },
            "stringToCompoundText": {
              "value": function () { return this.string_to_compound_text.apply(this, arguments); }
            },
            "textPropertyToTextList": {
              "value": function () { return this.text_property_to_text_list.apply(this, arguments); }
            },
            "utf8ToCompoundText": {
              "value": function () { return this.utf8_to_compound_text.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "X11DisplayManager": {
          "prototype": {},
          "static": {}
        },
        "X11DragContext": {
          "prototype": {},
          "static": {}
        },
        "X11Keymap": {
          "prototype": {
            "getGroupForState": {
              "value": function () { return this.get_group_for_state.apply(this, arguments); }
            },
            "keyIsModifier": {
              "value": function () { return this.key_is_modifier.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "X11Screen": {
          "prototype": {
            "getCurrentDesktop": {
              "value": function () { return this.get_current_desktop.apply(this, arguments); }
            },
            "getMonitorOutput": {
              "value": function () { return this.get_monitor_output.apply(this, arguments); }
            },
            "getNumberOfDesktops": {
              "value": function () { return this.get_number_of_desktops.apply(this, arguments); }
            },
            "getScreenNumber": {
              "value": function () { return this.get_screen_number.apply(this, arguments); }
            },
            "getWindowManagerName": {
              "value": function () { return this.get_window_manager_name.apply(this, arguments); }
            },
            "getXscreen": {
              "value": function () { return this.get_xscreen.apply(this, arguments); }
            },
            "lookupVisual": {
              "value": function () { return this.lookup_visual.apply(this, arguments); }
            },
            "supportsNetWmHint": {
              "value": function () { return this.supports_net_wm_hint.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "X11Visual": {
          "prototype": {
            "getXvisual": {
              "value": function () { return this.get_xvisual.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "X11Window": {
          "prototype": {
            "getDesktop": {
              "value": function () { return this.get_desktop.apply(this, arguments); }
            },
            "getXid": {
              "value": function () { return this.get_xid.apply(this, arguments); }
            },
            "moveToCurrentDesktop": {
              "value": function () { return this.move_to_current_desktop.apply(this, arguments); }
            },
            "moveToDesktop": {
              "value": function () { return this.move_to_desktop.apply(this, arguments); }
            },
            "setFrameExtents": {
              "value": function () { return this.set_frame_extents.apply(this, arguments); }
            },
            "setFrameSyncEnabled": {
              "value": function () { return this.set_frame_sync_enabled.apply(this, arguments); }
            },
            "setHideTitlebarWhenMaximized": {
              "value": function () { return this.set_hide_titlebar_when_maximized.apply(this, arguments); }
            },
            "setThemeVariant": {
              "value": function () { return this.set_theme_variant.apply(this, arguments); }
            },
            "setUserTime": {
              "value": function () { return this.set_user_time.apply(this, arguments); }
            },
            "setUtf8Property": {
              "value": function () { return this.set_utf8_property.apply(this, arguments); }
            }
          },
          "static": {
            "lookupForDisplay": {
              "value": function () { return this.lookup_for_display.apply(this, arguments); }
            }
          }
        }
      },
      "static": {
        "x11AtomToXatom": {
          "value": function () { return this.x11_atom_to_xatom.apply(this, arguments); }
        },
        "x11AtomToXatomForDisplay": {
          "value": function () { return this.x11_atom_to_xatom_for_display.apply(this, arguments); }
        },
        "x11DeviceGetId": {
          "value": function () { return this.x11_device_get_id.apply(this, arguments); }
        },
        "x11DeviceManagerLookup": {
          "value": function () { return this.x11_device_manager_lookup.apply(this, arguments); }
        },
        "x11FreeCompoundText": {
          "value": function () { return this.x11_free_compound_text.apply(this, arguments); }
        },
        "x11FreeTextList": {
          "value": function () { return this.x11_free_text_list.apply(this, arguments); }
        },
        "x11GetDefaultRootXwindow": {
          "value": function () { return this.x11_get_default_root_xwindow.apply(this, arguments); }
        },
        "x11GetDefaultScreen": {
          "value": function () { return this.x11_get_default_screen.apply(this, arguments); }
        },
        "x11GetDefaultXdisplay": {
          "value": function () { return this.x11_get_default_xdisplay.apply(this, arguments); }
        },
        "x11GetServerTime": {
          "value": function () { return this.x11_get_server_time.apply(this, arguments); }
        },
        "x11GetXatomByName": {
          "value": function () { return this.x11_get_xatom_by_name.apply(this, arguments); }
        },
        "x11GetXatomByNameForDisplay": {
          "value": function () { return this.x11_get_xatom_by_name_for_display.apply(this, arguments); }
        },
        "x11GetXatomName": {
          "value": function () { return this.x11_get_xatom_name.apply(this, arguments); }
        },
        "x11GetXatomNameForDisplay": {
          "value": function () { return this.x11_get_xatom_name_for_display.apply(this, arguments); }
        },
        "x11GrabServer": {
          "value": function () { return this.x11_grab_server.apply(this, arguments); }
        },
        "x11LookupXdisplay": {
          "value": function () { return this.x11_lookup_xdisplay.apply(this, arguments); }
        },
        "x11RegisterStandardEventType": {
          "value": function () { return this.x11_register_standard_event_type.apply(this, arguments); }
        },
        "x11SetSmClientId": {
          "value": function () { return this.x11_set_sm_client_id.apply(this, arguments); }
        },
        "x11UngrabServer": {
          "value": function () { return this.x11_ungrab_server.apply(this, arguments); }
        },
        "x11XatomToAtom": {
          "value": function () { return this.x11_xatom_to_atom.apply(this, arguments); }
        },
        "x11XatomToAtomForDisplay": {
          "value": function () { return this.x11_xatom_to_atom_for_display.apply(this, arguments); }
        }
      }
    },
    "Gio": {
      "class": {
        "AppInfoMonitor": {
          "prototype": {},
          "static": {}
        },
        "AppLaunchContext": {
          "prototype": {
            "getDisplay": {
              "value": function () { return this.get_display.apply(this, arguments); }
            },
            "getEnvironment": {
              "value": function () { return this.get_environment.apply(this, arguments); }
            },
            "getStartupNotifyId": {
              "value": function () { return this.get_startup_notify_id.apply(this, arguments); }
            },
            "launchFailed": {
              "value": function () { return this.launch_failed.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Application": {
          "prototype": {
            "addMainOption": {
              "value": function () { return this.add_main_option.apply(this, arguments); }
            },
            "addMainOptionEntries": {
              "value": function () { return this.add_main_option_entries.apply(this, arguments); }
            },
            "addOptionGroup": {
              "value": function () { return this.add_option_group.apply(this, arguments); }
            },
            "bindBusyProperty": {
              "value": function () { return this.bind_busy_property.apply(this, arguments); }
            },
            "getApplicationId": {
              "value": function () { return this.get_application_id.apply(this, arguments); }
            },
            "getDbusConnection": {
              "value": function () { return this.get_dbus_connection.apply(this, arguments); }
            },
            "getDbusObjectPath": {
              "value": function () { return this.get_dbus_object_path.apply(this, arguments); }
            },
            "getFlags": {
              "value": function () { return this.get_flags.apply(this, arguments); }
            },
            "getInactivityTimeout": {
              "value": function () { return this.get_inactivity_timeout.apply(this, arguments); }
            },
            "getIsBusy": {
              "value": function () { return this.get_is_busy.apply(this, arguments); }
            },
            "getIsRegistered": {
              "value": function () { return this.get_is_registered.apply(this, arguments); }
            },
            "getIsRemote": {
              "value": function () { return this.get_is_remote.apply(this, arguments); }
            },
            "getResourceBasePath": {
              "value": function () { return this.get_resource_base_path.apply(this, arguments); }
            },
            "markBusy": {
              "value": function () { return this.mark_busy.apply(this, arguments); }
            },
            "sendNotification": {
              "value": function () { return this.send_notification.apply(this, arguments); }
            },
            "setActionGroup": {
              "value": function () { return this.set_action_group.apply(this, arguments); }
            },
            "setApplicationId": {
              "value": function () { return this.set_application_id.apply(this, arguments); }
            },
            "setDefault": {
              "value": function () { return this.set_default.apply(this, arguments); }
            },
            "setFlags": {
              "value": function () { return this.set_flags.apply(this, arguments); }
            },
            "setInactivityTimeout": {
              "value": function () { return this.set_inactivity_timeout.apply(this, arguments); }
            },
            "setResourceBasePath": {
              "value": function () { return this.set_resource_base_path.apply(this, arguments); }
            },
            "unbindBusyProperty": {
              "value": function () { return this.unbind_busy_property.apply(this, arguments); }
            },
            "unmarkBusy": {
              "value": function () { return this.unmark_busy.apply(this, arguments); }
            },
            "withdrawNotification": {
              "value": function () { return this.withdraw_notification.apply(this, arguments); }
            },
            "actionGroup": {
              "get": function () { return this.action_group; },
              "set": function (value) { this.action_group = value; }
            },
            "applicationId": {
              "get": function () { return this.application_id; },
              "set": function (value) { this.application_id = value; }
            },
            "inactivityTimeout": {
              "get": function () { return this.inactivity_timeout; },
              "set": function (value) { this.inactivity_timeout = value; }
            },
            "isBusy": {
              "get": function () { return this.is_busy; },
              "set": function (value) { this.is_busy = value; }
            },
            "isRegistered": {
              "get": function () { return this.is_registered; },
              "set": function (value) { this.is_registered = value; }
            },
            "isRemote": {
              "get": function () { return this.is_remote; },
              "set": function (value) { this.is_remote = value; }
            },
            "resourceBasePath": {
              "get": function () { return this.resource_base_path; },
              "set": function (value) { this.resource_base_path = value; }
            }
          },
          "static": {
            "getDefault": {
              "value": function () { return this.get_default.apply(this, arguments); }
            },
            "idIsValid": {
              "value": function () { return this.id_is_valid.apply(this, arguments); }
            }
          }
        },
        "ApplicationCommandLine": {
          "prototype": {
            "createFileForArg": {
              "value": function () { return this.create_file_for_arg.apply(this, arguments); }
            },
            "getArguments": {
              "value": function () { return this.get_arguments.apply(this, arguments); }
            },
            "getCwd": {
              "value": function () { return this.get_cwd.apply(this, arguments); }
            },
            "getEnviron": {
              "value": function () { return this.get_environ.apply(this, arguments); }
            },
            "getExitStatus": {
              "value": function () { return this.get_exit_status.apply(this, arguments); }
            },
            "getIsRemote": {
              "value": function () { return this.get_is_remote.apply(this, arguments); }
            },
            "getOptionsDict": {
              "value": function () { return this.get_options_dict.apply(this, arguments); }
            },
            "getPlatformData": {
              "value": function () { return this.get_platform_data.apply(this, arguments); }
            },
            "getStdin": {
              "value": function () { return this.get_stdin.apply(this, arguments); }
            },
            "setExitStatus": {
              "value": function () { return this.set_exit_status.apply(this, arguments); }
            },
            "isRemote": {
              "get": function () { return this.is_remote; },
              "set": function (value) { this.is_remote = value; }
            },
            "platformData": {
              "get": function () { return this.platform_data; },
              "set": function (value) { this.platform_data = value; }
            }
          },
          "static": {}
        },
        "BufferedInputStream": {
          "prototype": {
            "fillAsync": {
              "value": function () { return this.fill_async.apply(this, arguments); }
            },
            "fillFinish": {
              "value": function () { return this.fill_finish.apply(this, arguments); }
            },
            "getAvailable": {
              "value": function () { return this.get_available.apply(this, arguments); }
            },
            "getBufferSize": {
              "value": function () { return this.get_buffer_size.apply(this, arguments); }
            },
            "peekBuffer": {
              "value": function () { return this.peek_buffer.apply(this, arguments); }
            },
            "readByte": {
              "value": function () { return this.read_byte.apply(this, arguments); }
            },
            "setBufferSize": {
              "value": function () { return this.set_buffer_size.apply(this, arguments); }
            },
            "bufferSize": {
              "get": function () { return this.buffer_size; },
              "set": function (value) { this.buffer_size = value; }
            }
          },
          "static": {}
        },
        "BufferedOutputStream": {
          "prototype": {
            "getAutoGrow": {
              "value": function () { return this.get_auto_grow.apply(this, arguments); }
            },
            "getBufferSize": {
              "value": function () { return this.get_buffer_size.apply(this, arguments); }
            },
            "setAutoGrow": {
              "value": function () { return this.set_auto_grow.apply(this, arguments); }
            },
            "setBufferSize": {
              "value": function () { return this.set_buffer_size.apply(this, arguments); }
            },
            "autoGrow": {
              "get": function () { return this.auto_grow; },
              "set": function (value) { this.auto_grow = value; }
            },
            "bufferSize": {
              "get": function () { return this.buffer_size; },
              "set": function (value) { this.buffer_size = value; }
            }
          },
          "static": {}
        },
        "BytesIcon": {
          "prototype": {
            "getBytes": {
              "value": function () { return this.get_bytes.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Cancellable": {
          "prototype": {
            "getFd": {
              "value": function () { return this.get_fd.apply(this, arguments); }
            },
            "isCancelled": {
              "value": function () { return this.is_cancelled.apply(this, arguments); }
            },
            "makePollfd": {
              "value": function () { return this.make_pollfd.apply(this, arguments); }
            },
            "popCurrent": {
              "value": function () { return this.pop_current.apply(this, arguments); }
            },
            "pushCurrent": {
              "value": function () { return this.push_current.apply(this, arguments); }
            },
            "releaseFd": {
              "value": function () { return this.release_fd.apply(this, arguments); }
            },
            "setErrorIfCancelled": {
              "value": function () { return this.set_error_if_cancelled.apply(this, arguments); }
            },
            "sourceNew": {
              "value": function () { return this.source_new.apply(this, arguments); }
            }
          },
          "static": {
            "getCurrent": {
              "value": function () { return this.get_current.apply(this, arguments); }
            }
          }
        },
        "CharsetConverter": {
          "prototype": {
            "getNumFallbacks": {
              "value": function () { return this.get_num_fallbacks.apply(this, arguments); }
            },
            "getUseFallback": {
              "value": function () { return this.get_use_fallback.apply(this, arguments); }
            },
            "setUseFallback": {
              "value": function () { return this.set_use_fallback.apply(this, arguments); }
            },
            "fromCharset": {
              "get": function () { return this.from_charset; },
              "set": function (value) { this.from_charset = value; }
            },
            "toCharset": {
              "get": function () { return this.to_charset; },
              "set": function (value) { this.to_charset = value; }
            },
            "useFallback": {
              "get": function () { return this.use_fallback; },
              "set": function (value) { this.use_fallback = value; }
            }
          },
          "static": {}
        },
        "ConverterInputStream": {
          "prototype": {
            "getConverter": {
              "value": function () { return this.get_converter.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "ConverterOutputStream": {
          "prototype": {
            "getConverter": {
              "value": function () { return this.get_converter.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Credentials": {
          "prototype": {
            "getNative": {
              "value": function () { return this.get_native.apply(this, arguments); }
            },
            "getUnixPid": {
              "value": function () { return this.get_unix_pid.apply(this, arguments); }
            },
            "getUnixUser": {
              "value": function () { return this.get_unix_user.apply(this, arguments); }
            },
            "isSameUser": {
              "value": function () { return this.is_same_user.apply(this, arguments); }
            },
            "setNative": {
              "value": function () { return this.set_native.apply(this, arguments); }
            },
            "setUnixUser": {
              "value": function () { return this.set_unix_user.apply(this, arguments); }
            },
            "toString": {
              "value": function () { return this.to_string.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DBusActionGroup": {
          "prototype": {},
          "static": {}
        },
        "DBusAuthObserver": {
          "prototype": {
            "allowMechanism": {
              "value": function () { return this.allow_mechanism.apply(this, arguments); }
            },
            "authorizeAuthenticatedPeer": {
              "value": function () { return this.authorize_authenticated_peer.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DBusConnection": {
          "prototype": {
            "addFilter": {
              "value": function () { return this.add_filter.apply(this, arguments); }
            },
            "callFinish": {
              "value": function () { return this.call_finish.apply(this, arguments); }
            },
            "callSync": {
              "value": function () { return this.call_sync.apply(this, arguments); }
            },
            "callWithUnixFdList": {
              "value": function () { return this.call_with_unix_fd_list.apply(this, arguments); }
            },
            "callWithUnixFdListFinish": {
              "value": function () { return this.call_with_unix_fd_list_finish.apply(this, arguments); }
            },
            "callWithUnixFdListSync": {
              "value": function () { return this.call_with_unix_fd_list_sync.apply(this, arguments); }
            },
            "closeFinish": {
              "value": function () { return this.close_finish.apply(this, arguments); }
            },
            "closeSync": {
              "value": function () { return this.close_sync.apply(this, arguments); }
            },
            "emitSignal": {
              "value": function () { return this.emit_signal.apply(this, arguments); }
            },
            "exportActionGroup": {
              "value": function () { return this.export_action_group.apply(this, arguments); }
            },
            "exportMenuModel": {
              "value": function () { return this.export_menu_model.apply(this, arguments); }
            },
            "flushFinish": {
              "value": function () { return this.flush_finish.apply(this, arguments); }
            },
            "flushSync": {
              "value": function () { return this.flush_sync.apply(this, arguments); }
            },
            "getCapabilities": {
              "value": function () { return this.get_capabilities.apply(this, arguments); }
            },
            "getExitOnClose": {
              "value": function () { return this.get_exit_on_close.apply(this, arguments); }
            },
            "getGuid": {
              "value": function () { return this.get_guid.apply(this, arguments); }
            },
            "getLastSerial": {
              "value": function () { return this.get_last_serial.apply(this, arguments); }
            },
            "getPeerCredentials": {
              "value": function () { return this.get_peer_credentials.apply(this, arguments); }
            },
            "getStream": {
              "value": function () { return this.get_stream.apply(this, arguments); }
            },
            "getUniqueName": {
              "value": function () { return this.get_unique_name.apply(this, arguments); }
            },
            "isClosed": {
              "value": function () { return this.is_closed.apply(this, arguments); }
            },
            "registerObject": {
              "value": function () { return this.register_object.apply(this, arguments); }
            },
            "registerObjectWithClosures": {
              "value": function () { return this.register_object_with_closures.apply(this, arguments); }
            },
            "registerSubtree": {
              "value": function () { return this.register_subtree.apply(this, arguments); }
            },
            "removeFilter": {
              "value": function () { return this.remove_filter.apply(this, arguments); }
            },
            "sendMessage": {
              "value": function () { return this.send_message.apply(this, arguments); }
            },
            "sendMessageWithReply": {
              "value": function () { return this.send_message_with_reply.apply(this, arguments); }
            },
            "sendMessageWithReplyFinish": {
              "value": function () { return this.send_message_with_reply_finish.apply(this, arguments); }
            },
            "sendMessageWithReplySync": {
              "value": function () { return this.send_message_with_reply_sync.apply(this, arguments); }
            },
            "setExitOnClose": {
              "value": function () { return this.set_exit_on_close.apply(this, arguments); }
            },
            "signalSubscribe": {
              "value": function () { return this.signal_subscribe.apply(this, arguments); }
            },
            "signalUnsubscribe": {
              "value": function () { return this.signal_unsubscribe.apply(this, arguments); }
            },
            "startMessageProcessing": {
              "value": function () { return this.start_message_processing.apply(this, arguments); }
            },
            "unexportActionGroup": {
              "value": function () { return this.unexport_action_group.apply(this, arguments); }
            },
            "unexportMenuModel": {
              "value": function () { return this.unexport_menu_model.apply(this, arguments); }
            },
            "unregisterObject": {
              "value": function () { return this.unregister_object.apply(this, arguments); }
            },
            "unregisterSubtree": {
              "value": function () { return this.unregister_subtree.apply(this, arguments); }
            },
            "authenticationObserver": {
              "get": function () { return this.authentication_observer; },
              "set": function (value) { this.authentication_observer = value; }
            },
            "exitOnClose": {
              "get": function () { return this.exit_on_close; },
              "set": function (value) { this.exit_on_close = value; }
            },
            "uniqueName": {
              "get": function () { return this.unique_name; },
              "set": function (value) { this.unique_name = value; }
            }
          },
          "static": {
            "newForAddress": {
              "value": function () { return this.new_for_address.apply(this, arguments); }
            }
          }
        },
        "DBusInterfaceSkeleton": {
          "prototype": {
            "getConnection": {
              "value": function () { return this.get_connection.apply(this, arguments); }
            },
            "getConnections": {
              "value": function () { return this.get_connections.apply(this, arguments); }
            },
            "getFlags": {
              "value": function () { return this.get_flags.apply(this, arguments); }
            },
            "getInfo": {
              "value": function () { return this.get_info.apply(this, arguments); }
            },
            "getObjectPath": {
              "value": function () { return this.get_object_path.apply(this, arguments); }
            },
            "getProperties": {
              "value": function () { return this.get_properties.apply(this, arguments); }
            },
            "getVtable": {
              "value": function () { return this.get_vtable.apply(this, arguments); }
            },
            "hasConnection": {
              "value": function () { return this.has_connection.apply(this, arguments); }
            },
            "setFlags": {
              "value": function () { return this.set_flags.apply(this, arguments); }
            },
            "unexportFromConnection": {
              "value": function () { return this.unexport_from_connection.apply(this, arguments); }
            },
            "gFlags": {
              "get": function () { return this.g_flags; },
              "set": function (value) { this.g_flags = value; }
            }
          },
          "static": {}
        },
        "DBusMenuModel": {
          "prototype": {},
          "static": {}
        },
        "DBusMessage": {
          "prototype": {
            "getArg0": {
              "value": function () { return this.get_arg0.apply(this, arguments); }
            },
            "getBody": {
              "value": function () { return this.get_body.apply(this, arguments); }
            },
            "getByteOrder": {
              "value": function () { return this.get_byte_order.apply(this, arguments); }
            },
            "getDestination": {
              "value": function () { return this.get_destination.apply(this, arguments); }
            },
            "getErrorName": {
              "value": function () { return this.get_error_name.apply(this, arguments); }
            },
            "getFlags": {
              "value": function () { return this.get_flags.apply(this, arguments); }
            },
            "getHeader": {
              "value": function () { return this.get_header.apply(this, arguments); }
            },
            "getHeaderFields": {
              "value": function () { return this.get_header_fields.apply(this, arguments); }
            },
            "getInterface": {
              "value": function () { return this.get_interface.apply(this, arguments); }
            },
            "getLocked": {
              "value": function () { return this.get_locked.apply(this, arguments); }
            },
            "getMember": {
              "value": function () { return this.get_member.apply(this, arguments); }
            },
            "getMessageType": {
              "value": function () { return this.get_message_type.apply(this, arguments); }
            },
            "getNumUnixFds": {
              "value": function () { return this.get_num_unix_fds.apply(this, arguments); }
            },
            "getPath": {
              "value": function () { return this.get_path.apply(this, arguments); }
            },
            "getReplySerial": {
              "value": function () { return this.get_reply_serial.apply(this, arguments); }
            },
            "getSender": {
              "value": function () { return this.get_sender.apply(this, arguments); }
            },
            "getSerial": {
              "value": function () { return this.get_serial.apply(this, arguments); }
            },
            "getSignature": {
              "value": function () { return this.get_signature.apply(this, arguments); }
            },
            "getUnixFdList": {
              "value": function () { return this.get_unix_fd_list.apply(this, arguments); }
            },
            "newMethodError": {
              "value": function () { return this.new_method_error.apply(this, arguments); }
            },
            "newMethodErrorLiteral": {
              "value": function () { return this.new_method_error_literal.apply(this, arguments); }
            },
            "newMethodErrorValist": {
              "value": function () { return this.new_method_error_valist.apply(this, arguments); }
            },
            "newMethodReply": {
              "value": function () { return this.new_method_reply.apply(this, arguments); }
            },
            "setBody": {
              "value": function () { return this.set_body.apply(this, arguments); }
            },
            "setByteOrder": {
              "value": function () { return this.set_byte_order.apply(this, arguments); }
            },
            "setDestination": {
              "value": function () { return this.set_destination.apply(this, arguments); }
            },
            "setErrorName": {
              "value": function () { return this.set_error_name.apply(this, arguments); }
            },
            "setFlags": {
              "value": function () { return this.set_flags.apply(this, arguments); }
            },
            "setHeader": {
              "value": function () { return this.set_header.apply(this, arguments); }
            },
            "setInterface": {
              "value": function () { return this.set_interface.apply(this, arguments); }
            },
            "setMember": {
              "value": function () { return this.set_member.apply(this, arguments); }
            },
            "setMessageType": {
              "value": function () { return this.set_message_type.apply(this, arguments); }
            },
            "setNumUnixFds": {
              "value": function () { return this.set_num_unix_fds.apply(this, arguments); }
            },
            "setPath": {
              "value": function () { return this.set_path.apply(this, arguments); }
            },
            "setReplySerial": {
              "value": function () { return this.set_reply_serial.apply(this, arguments); }
            },
            "setSender": {
              "value": function () { return this.set_sender.apply(this, arguments); }
            },
            "setSerial": {
              "value": function () { return this.set_serial.apply(this, arguments); }
            },
            "setSignature": {
              "value": function () { return this.set_signature.apply(this, arguments); }
            },
            "setUnixFdList": {
              "value": function () { return this.set_unix_fd_list.apply(this, arguments); }
            },
            "toBlob": {
              "value": function () { return this.to_blob.apply(this, arguments); }
            },
            "toGerror": {
              "value": function () { return this.to_gerror.apply(this, arguments); }
            }
          },
          "static": {
            "bytesNeeded": {
              "value": function () { return this.bytes_needed.apply(this, arguments); }
            }
          }
        },
        "DBusMethodInvocation": {
          "prototype": {
            "getConnection": {
              "value": function () { return this.get_connection.apply(this, arguments); }
            },
            "getInterfaceName": {
              "value": function () { return this.get_interface_name.apply(this, arguments); }
            },
            "getMessage": {
              "value": function () { return this.get_message.apply(this, arguments); }
            },
            "getMethodInfo": {
              "value": function () { return this.get_method_info.apply(this, arguments); }
            },
            "getMethodName": {
              "value": function () { return this.get_method_name.apply(this, arguments); }
            },
            "getObjectPath": {
              "value": function () { return this.get_object_path.apply(this, arguments); }
            },
            "getParameters": {
              "value": function () { return this.get_parameters.apply(this, arguments); }
            },
            "getPropertyInfo": {
              "value": function () { return this.get_property_info.apply(this, arguments); }
            },
            "getSender": {
              "value": function () { return this.get_sender.apply(this, arguments); }
            },
            "getUserData": {
              "value": function () { return this.get_user_data.apply(this, arguments); }
            },
            "returnDbusError": {
              "value": function () { return this.return_dbus_error.apply(this, arguments); }
            },
            "returnError": {
              "value": function () { return this.return_error.apply(this, arguments); }
            },
            "returnErrorLiteral": {
              "value": function () { return this.return_error_literal.apply(this, arguments); }
            },
            "returnErrorValist": {
              "value": function () { return this.return_error_valist.apply(this, arguments); }
            },
            "returnGerror": {
              "value": function () { return this.return_gerror.apply(this, arguments); }
            },
            "returnValue": {
              "value": function () { return this.return_value.apply(this, arguments); }
            },
            "returnValueWithUnixFdList": {
              "value": function () { return this.return_value_with_unix_fd_list.apply(this, arguments); }
            },
            "takeError": {
              "value": function () { return this.take_error.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DBusObjectManagerClient": {
          "prototype": {
            "getConnection": {
              "value": function () { return this.get_connection.apply(this, arguments); }
            },
            "getFlags": {
              "value": function () { return this.get_flags.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getNameOwner": {
              "value": function () { return this.get_name_owner.apply(this, arguments); }
            },
            "busType": {
              "get": function () { return this.bus_type; },
              "set": function (value) { this.bus_type = value; }
            },
            "getProxyTypeDestroyNotify": {
              "get": function () { return this.get_proxy_type_destroy_notify; },
              "set": function (value) { this.get_proxy_type_destroy_notify = value; }
            },
            "getProxyTypeFunc": {
              "get": function () { return this.get_proxy_type_func; },
              "set": function (value) { this.get_proxy_type_func = value; }
            },
            "getProxyTypeUserData": {
              "get": function () { return this.get_proxy_type_user_data; },
              "set": function (value) { this.get_proxy_type_user_data = value; }
            },
            "nameOwner": {
              "get": function () { return this.name_owner; },
              "set": function (value) { this.name_owner = value; }
            },
            "objectPath": {
              "get": function () { return this.object_path; },
              "set": function (value) { this.object_path = value; }
            }
          },
          "static": {
            "newForBus": {
              "value": function () { return this.new_for_bus.apply(this, arguments); }
            }
          }
        },
        "DBusObjectManagerServer": {
          "prototype": {
            "exportUniquely": {
              "value": function () { return this.export_uniquely.apply(this, arguments); }
            },
            "getConnection": {
              "value": function () { return this.get_connection.apply(this, arguments); }
            },
            "isExported": {
              "value": function () { return this.is_exported.apply(this, arguments); }
            },
            "setConnection": {
              "value": function () { return this.set_connection.apply(this, arguments); }
            },
            "objectPath": {
              "get": function () { return this.object_path; },
              "set": function (value) { this.object_path = value; }
            }
          },
          "static": {}
        },
        "DBusObjectProxy": {
          "prototype": {
            "getConnection": {
              "value": function () { return this.get_connection.apply(this, arguments); }
            },
            "gConnection": {
              "get": function () { return this.g_connection; },
              "set": function (value) { this.g_connection = value; }
            },
            "gObjectPath": {
              "get": function () { return this.g_object_path; },
              "set": function (value) { this.g_object_path = value; }
            }
          },
          "static": {}
        },
        "DBusObjectSkeleton": {
          "prototype": {
            "addInterface": {
              "value": function () { return this.add_interface.apply(this, arguments); }
            },
            "removeInterface": {
              "value": function () { return this.remove_interface.apply(this, arguments); }
            },
            "removeInterfaceByName": {
              "value": function () { return this.remove_interface_by_name.apply(this, arguments); }
            },
            "setObjectPath": {
              "value": function () { return this.set_object_path.apply(this, arguments); }
            },
            "gObjectPath": {
              "get": function () { return this.g_object_path; },
              "set": function (value) { this.g_object_path = value; }
            }
          },
          "static": {}
        },
        "DBusProxy": {
          "prototype": {
            "callFinish": {
              "value": function () { return this.call_finish.apply(this, arguments); }
            },
            "callSync": {
              "value": function () { return this.call_sync.apply(this, arguments); }
            },
            "callWithUnixFdList": {
              "value": function () { return this.call_with_unix_fd_list.apply(this, arguments); }
            },
            "callWithUnixFdListFinish": {
              "value": function () { return this.call_with_unix_fd_list_finish.apply(this, arguments); }
            },
            "callWithUnixFdListSync": {
              "value": function () { return this.call_with_unix_fd_list_sync.apply(this, arguments); }
            },
            "getCachedProperty": {
              "value": function () { return this.get_cached_property.apply(this, arguments); }
            },
            "getCachedPropertyNames": {
              "value": function () { return this.get_cached_property_names.apply(this, arguments); }
            },
            "getConnection": {
              "value": function () { return this.get_connection.apply(this, arguments); }
            },
            "getDefaultTimeout": {
              "value": function () { return this.get_default_timeout.apply(this, arguments); }
            },
            "getFlags": {
              "value": function () { return this.get_flags.apply(this, arguments); }
            },
            "getInterfaceInfo": {
              "value": function () { return this.get_interface_info.apply(this, arguments); }
            },
            "getInterfaceName": {
              "value": function () { return this.get_interface_name.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getNameOwner": {
              "value": function () { return this.get_name_owner.apply(this, arguments); }
            },
            "getObjectPath": {
              "value": function () { return this.get_object_path.apply(this, arguments); }
            },
            "setCachedProperty": {
              "value": function () { return this.set_cached_property.apply(this, arguments); }
            },
            "setDefaultTimeout": {
              "value": function () { return this.set_default_timeout.apply(this, arguments); }
            },
            "setInterfaceInfo": {
              "value": function () { return this.set_interface_info.apply(this, arguments); }
            },
            "gBusType": {
              "get": function () { return this.g_bus_type; },
              "set": function (value) { this.g_bus_type = value; }
            },
            "gConnection": {
              "get": function () { return this.g_connection; },
              "set": function (value) { this.g_connection = value; }
            },
            "gDefaultTimeout": {
              "get": function () { return this.g_default_timeout; },
              "set": function (value) { this.g_default_timeout = value; }
            },
            "gFlags": {
              "get": function () { return this.g_flags; },
              "set": function (value) { this.g_flags = value; }
            },
            "gInterfaceInfo": {
              "get": function () { return this.g_interface_info; },
              "set": function (value) { this.g_interface_info = value; }
            },
            "gInterfaceName": {
              "get": function () { return this.g_interface_name; },
              "set": function (value) { this.g_interface_name = value; }
            },
            "gName": {
              "get": function () { return this.g_name; },
              "set": function (value) { this.g_name = value; }
            },
            "gNameOwner": {
              "get": function () { return this.g_name_owner; },
              "set": function (value) { this.g_name_owner = value; }
            },
            "gObjectPath": {
              "get": function () { return this.g_object_path; },
              "set": function (value) { this.g_object_path = value; }
            }
          },
          "static": {
            "newForBus": {
              "value": function () { return this.new_for_bus.apply(this, arguments); }
            }
          }
        },
        "DBusServer": {
          "prototype": {
            "getClientAddress": {
              "value": function () { return this.get_client_address.apply(this, arguments); }
            },
            "getFlags": {
              "value": function () { return this.get_flags.apply(this, arguments); }
            },
            "getGuid": {
              "value": function () { return this.get_guid.apply(this, arguments); }
            },
            "isActive": {
              "value": function () { return this.is_active.apply(this, arguments); }
            },
            "authenticationObserver": {
              "get": function () { return this.authentication_observer; },
              "set": function (value) { this.authentication_observer = value; }
            },
            "clientAddress": {
              "get": function () { return this.client_address; },
              "set": function (value) { this.client_address = value; }
            }
          },
          "static": {}
        },
        "DataInputStream": {
          "prototype": {
            "getByteOrder": {
              "value": function () { return this.get_byte_order.apply(this, arguments); }
            },
            "getNewlineType": {
              "value": function () { return this.get_newline_type.apply(this, arguments); }
            },
            "readByte": {
              "value": function () { return this.read_byte.apply(this, arguments); }
            },
            "readInt16": {
              "value": function () { return this.read_int16.apply(this, arguments); }
            },
            "readInt32": {
              "value": function () { return this.read_int32.apply(this, arguments); }
            },
            "readInt64": {
              "value": function () { return this.read_int64.apply(this, arguments); }
            },
            "readLine": {
              "value": function () { return this.read_line.apply(this, arguments); }
            },
            "readLineAsync": {
              "value": function () { return this.read_line_async.apply(this, arguments); }
            },
            "readLineFinish": {
              "value": function () { return this.read_line_finish.apply(this, arguments); }
            },
            "readLineFinishUtf8": {
              "value": function () { return this.read_line_finish_utf8.apply(this, arguments); }
            },
            "readLineUtf8": {
              "value": function () { return this.read_line_utf8.apply(this, arguments); }
            },
            "readUint16": {
              "value": function () { return this.read_uint16.apply(this, arguments); }
            },
            "readUint32": {
              "value": function () { return this.read_uint32.apply(this, arguments); }
            },
            "readUint64": {
              "value": function () { return this.read_uint64.apply(this, arguments); }
            },
            "readUntil": {
              "value": function () { return this.read_until.apply(this, arguments); }
            },
            "readUntilAsync": {
              "value": function () { return this.read_until_async.apply(this, arguments); }
            },
            "readUntilFinish": {
              "value": function () { return this.read_until_finish.apply(this, arguments); }
            },
            "readUpto": {
              "value": function () { return this.read_upto.apply(this, arguments); }
            },
            "readUptoAsync": {
              "value": function () { return this.read_upto_async.apply(this, arguments); }
            },
            "readUptoFinish": {
              "value": function () { return this.read_upto_finish.apply(this, arguments); }
            },
            "setByteOrder": {
              "value": function () { return this.set_byte_order.apply(this, arguments); }
            },
            "setNewlineType": {
              "value": function () { return this.set_newline_type.apply(this, arguments); }
            },
            "byteOrder": {
              "get": function () { return this.byte_order; },
              "set": function (value) { this.byte_order = value; }
            },
            "newlineType": {
              "get": function () { return this.newline_type; },
              "set": function (value) { this.newline_type = value; }
            }
          },
          "static": {}
        },
        "DataOutputStream": {
          "prototype": {
            "getByteOrder": {
              "value": function () { return this.get_byte_order.apply(this, arguments); }
            },
            "putByte": {
              "value": function () { return this.put_byte.apply(this, arguments); }
            },
            "putInt16": {
              "value": function () { return this.put_int16.apply(this, arguments); }
            },
            "putInt32": {
              "value": function () { return this.put_int32.apply(this, arguments); }
            },
            "putInt64": {
              "value": function () { return this.put_int64.apply(this, arguments); }
            },
            "putString": {
              "value": function () { return this.put_string.apply(this, arguments); }
            },
            "putUint16": {
              "value": function () { return this.put_uint16.apply(this, arguments); }
            },
            "putUint32": {
              "value": function () { return this.put_uint32.apply(this, arguments); }
            },
            "putUint64": {
              "value": function () { return this.put_uint64.apply(this, arguments); }
            },
            "setByteOrder": {
              "value": function () { return this.set_byte_order.apply(this, arguments); }
            },
            "byteOrder": {
              "get": function () { return this.byte_order; },
              "set": function (value) { this.byte_order = value; }
            }
          },
          "static": {}
        },
        "DesktopAppInfo": {
          "prototype": {
            "getActionName": {
              "value": function () { return this.get_action_name.apply(this, arguments); }
            },
            "getBoolean": {
              "value": function () { return this.get_boolean.apply(this, arguments); }
            },
            "getCategories": {
              "value": function () { return this.get_categories.apply(this, arguments); }
            },
            "getFilename": {
              "value": function () { return this.get_filename.apply(this, arguments); }
            },
            "getGenericName": {
              "value": function () { return this.get_generic_name.apply(this, arguments); }
            },
            "getIsHidden": {
              "value": function () { return this.get_is_hidden.apply(this, arguments); }
            },
            "getKeywords": {
              "value": function () { return this.get_keywords.apply(this, arguments); }
            },
            "getNodisplay": {
              "value": function () { return this.get_nodisplay.apply(this, arguments); }
            },
            "getShowIn": {
              "value": function () { return this.get_show_in.apply(this, arguments); }
            },
            "getStartupWmClass": {
              "value": function () { return this.get_startup_wm_class.apply(this, arguments); }
            },
            "getString": {
              "value": function () { return this.get_string.apply(this, arguments); }
            },
            "hasKey": {
              "value": function () { return this.has_key.apply(this, arguments); }
            },
            "launchAction": {
              "value": function () { return this.launch_action.apply(this, arguments); }
            },
            "launchUrisAsManager": {
              "value": function () { return this.launch_uris_as_manager.apply(this, arguments); }
            },
            "listActions": {
              "value": function () { return this.list_actions.apply(this, arguments); }
            }
          },
          "static": {
            "getImplementations": {
              "value": function () { return this.get_implementations.apply(this, arguments); }
            },
            "setDesktopEnv": {
              "value": function () { return this.set_desktop_env.apply(this, arguments); }
            }
          }
        },
        "Emblem": {
          "prototype": {
            "getIcon": {
              "value": function () { return this.get_icon.apply(this, arguments); }
            },
            "getOrigin": {
              "value": function () { return this.get_origin.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "EmblemedIcon": {
          "prototype": {
            "addEmblem": {
              "value": function () { return this.add_emblem.apply(this, arguments); }
            },
            "clearEmblems": {
              "value": function () { return this.clear_emblems.apply(this, arguments); }
            },
            "getEmblems": {
              "value": function () { return this.get_emblems.apply(this, arguments); }
            },
            "getIcon": {
              "value": function () { return this.get_icon.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "FileEnumerator": {
          "prototype": {
            "closeAsync": {
              "value": function () { return this.close_async.apply(this, arguments); }
            },
            "closeFinish": {
              "value": function () { return this.close_finish.apply(this, arguments); }
            },
            "getChild": {
              "value": function () { return this.get_child.apply(this, arguments); }
            },
            "getContainer": {
              "value": function () { return this.get_container.apply(this, arguments); }
            },
            "hasPending": {
              "value": function () { return this.has_pending.apply(this, arguments); }
            },
            "isClosed": {
              "value": function () { return this.is_closed.apply(this, arguments); }
            },
            "nextFile": {
              "value": function () { return this.next_file.apply(this, arguments); }
            },
            "nextFilesAsync": {
              "value": function () { return this.next_files_async.apply(this, arguments); }
            },
            "nextFilesFinish": {
              "value": function () { return this.next_files_finish.apply(this, arguments); }
            },
            "setPending": {
              "value": function () { return this.set_pending.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "FileIOStream": {
          "prototype": {
            "getEtag": {
              "value": function () { return this.get_etag.apply(this, arguments); }
            },
            "queryInfo": {
              "value": function () { return this.query_info.apply(this, arguments); }
            },
            "queryInfoAsync": {
              "value": function () { return this.query_info_async.apply(this, arguments); }
            },
            "queryInfoFinish": {
              "value": function () { return this.query_info_finish.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "FileIcon": {
          "prototype": {
            "getFile": {
              "value": function () { return this.get_file.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "FileInfo": {
          "prototype": {
            "clearStatus": {
              "value": function () { return this.clear_status.apply(this, arguments); }
            },
            "copyInto": {
              "value": function () { return this.copy_into.apply(this, arguments); }
            },
            "getAttributeAsString": {
              "value": function () { return this.get_attribute_as_string.apply(this, arguments); }
            },
            "getAttributeBoolean": {
              "value": function () { return this.get_attribute_boolean.apply(this, arguments); }
            },
            "getAttributeByteString": {
              "value": function () { return this.get_attribute_byte_string.apply(this, arguments); }
            },
            "getAttributeData": {
              "value": function () { return this.get_attribute_data.apply(this, arguments); }
            },
            "getAttributeInt32": {
              "value": function () { return this.get_attribute_int32.apply(this, arguments); }
            },
            "getAttributeInt64": {
              "value": function () { return this.get_attribute_int64.apply(this, arguments); }
            },
            "getAttributeObject": {
              "value": function () { return this.get_attribute_object.apply(this, arguments); }
            },
            "getAttributeStatus": {
              "value": function () { return this.get_attribute_status.apply(this, arguments); }
            },
            "getAttributeString": {
              "value": function () { return this.get_attribute_string.apply(this, arguments); }
            },
            "getAttributeStringv": {
              "value": function () { return this.get_attribute_stringv.apply(this, arguments); }
            },
            "getAttributeType": {
              "value": function () { return this.get_attribute_type.apply(this, arguments); }
            },
            "getAttributeUint32": {
              "value": function () { return this.get_attribute_uint32.apply(this, arguments); }
            },
            "getAttributeUint64": {
              "value": function () { return this.get_attribute_uint64.apply(this, arguments); }
            },
            "getContentType": {
              "value": function () { return this.get_content_type.apply(this, arguments); }
            },
            "getDeletionDate": {
              "value": function () { return this.get_deletion_date.apply(this, arguments); }
            },
            "getDisplayName": {
              "value": function () { return this.get_display_name.apply(this, arguments); }
            },
            "getEditName": {
              "value": function () { return this.get_edit_name.apply(this, arguments); }
            },
            "getEtag": {
              "value": function () { return this.get_etag.apply(this, arguments); }
            },
            "getFileType": {
              "value": function () { return this.get_file_type.apply(this, arguments); }
            },
            "getIcon": {
              "value": function () { return this.get_icon.apply(this, arguments); }
            },
            "getIsBackup": {
              "value": function () { return this.get_is_backup.apply(this, arguments); }
            },
            "getIsHidden": {
              "value": function () { return this.get_is_hidden.apply(this, arguments); }
            },
            "getIsSymlink": {
              "value": function () { return this.get_is_symlink.apply(this, arguments); }
            },
            "getModificationTime": {
              "value": function () { return this.get_modification_time.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getSize": {
              "value": function () { return this.get_size.apply(this, arguments); }
            },
            "getSortOrder": {
              "value": function () { return this.get_sort_order.apply(this, arguments); }
            },
            "getSymbolicIcon": {
              "value": function () { return this.get_symbolic_icon.apply(this, arguments); }
            },
            "getSymlinkTarget": {
              "value": function () { return this.get_symlink_target.apply(this, arguments); }
            },
            "hasAttribute": {
              "value": function () { return this.has_attribute.apply(this, arguments); }
            },
            "hasNamespace": {
              "value": function () { return this.has_namespace.apply(this, arguments); }
            },
            "listAttributes": {
              "value": function () { return this.list_attributes.apply(this, arguments); }
            },
            "removeAttribute": {
              "value": function () { return this.remove_attribute.apply(this, arguments); }
            },
            "setAttribute": {
              "value": function () { return this.set_attribute.apply(this, arguments); }
            },
            "setAttributeBoolean": {
              "value": function () { return this.set_attribute_boolean.apply(this, arguments); }
            },
            "setAttributeByteString": {
              "value": function () { return this.set_attribute_byte_string.apply(this, arguments); }
            },
            "setAttributeInt32": {
              "value": function () { return this.set_attribute_int32.apply(this, arguments); }
            },
            "setAttributeInt64": {
              "value": function () { return this.set_attribute_int64.apply(this, arguments); }
            },
            "setAttributeMask": {
              "value": function () { return this.set_attribute_mask.apply(this, arguments); }
            },
            "setAttributeObject": {
              "value": function () { return this.set_attribute_object.apply(this, arguments); }
            },
            "setAttributeStatus": {
              "value": function () { return this.set_attribute_status.apply(this, arguments); }
            },
            "setAttributeString": {
              "value": function () { return this.set_attribute_string.apply(this, arguments); }
            },
            "setAttributeStringv": {
              "value": function () { return this.set_attribute_stringv.apply(this, arguments); }
            },
            "setAttributeUint32": {
              "value": function () { return this.set_attribute_uint32.apply(this, arguments); }
            },
            "setAttributeUint64": {
              "value": function () { return this.set_attribute_uint64.apply(this, arguments); }
            },
            "setContentType": {
              "value": function () { return this.set_content_type.apply(this, arguments); }
            },
            "setDisplayName": {
              "value": function () { return this.set_display_name.apply(this, arguments); }
            },
            "setEditName": {
              "value": function () { return this.set_edit_name.apply(this, arguments); }
            },
            "setFileType": {
              "value": function () { return this.set_file_type.apply(this, arguments); }
            },
            "setIcon": {
              "value": function () { return this.set_icon.apply(this, arguments); }
            },
            "setIsHidden": {
              "value": function () { return this.set_is_hidden.apply(this, arguments); }
            },
            "setIsSymlink": {
              "value": function () { return this.set_is_symlink.apply(this, arguments); }
            },
            "setModificationTime": {
              "value": function () { return this.set_modification_time.apply(this, arguments); }
            },
            "setName": {
              "value": function () { return this.set_name.apply(this, arguments); }
            },
            "setSize": {
              "value": function () { return this.set_size.apply(this, arguments); }
            },
            "setSortOrder": {
              "value": function () { return this.set_sort_order.apply(this, arguments); }
            },
            "setSymbolicIcon": {
              "value": function () { return this.set_symbolic_icon.apply(this, arguments); }
            },
            "setSymlinkTarget": {
              "value": function () { return this.set_symlink_target.apply(this, arguments); }
            },
            "unsetAttributeMask": {
              "value": function () { return this.unset_attribute_mask.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "FileInputStream": {
          "prototype": {
            "queryInfo": {
              "value": function () { return this.query_info.apply(this, arguments); }
            },
            "queryInfoAsync": {
              "value": function () { return this.query_info_async.apply(this, arguments); }
            },
            "queryInfoFinish": {
              "value": function () { return this.query_info_finish.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "FileMonitor": {
          "prototype": {
            "emitEvent": {
              "value": function () { return this.emit_event.apply(this, arguments); }
            },
            "isCancelled": {
              "value": function () { return this.is_cancelled.apply(this, arguments); }
            },
            "setRateLimit": {
              "value": function () { return this.set_rate_limit.apply(this, arguments); }
            },
            "rateLimit": {
              "get": function () { return this.rate_limit; },
              "set": function (value) { this.rate_limit = value; }
            }
          },
          "static": {}
        },
        "FileOutputStream": {
          "prototype": {
            "getEtag": {
              "value": function () { return this.get_etag.apply(this, arguments); }
            },
            "queryInfo": {
              "value": function () { return this.query_info.apply(this, arguments); }
            },
            "queryInfoAsync": {
              "value": function () { return this.query_info_async.apply(this, arguments); }
            },
            "queryInfoFinish": {
              "value": function () { return this.query_info_finish.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "FilenameCompleter": {
          "prototype": {
            "getCompletionSuffix": {
              "value": function () { return this.get_completion_suffix.apply(this, arguments); }
            },
            "getCompletions": {
              "value": function () { return this.get_completions.apply(this, arguments); }
            },
            "setDirsOnly": {
              "value": function () { return this.set_dirs_only.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "FilterInputStream": {
          "prototype": {
            "getBaseStream": {
              "value": function () { return this.get_base_stream.apply(this, arguments); }
            },
            "getCloseBaseStream": {
              "value": function () { return this.get_close_base_stream.apply(this, arguments); }
            },
            "setCloseBaseStream": {
              "value": function () { return this.set_close_base_stream.apply(this, arguments); }
            },
            "baseStream": {
              "get": function () { return this.base_stream; },
              "set": function (value) { this.base_stream = value; }
            },
            "closeBaseStream": {
              "get": function () { return this.close_base_stream; },
              "set": function (value) { this.close_base_stream = value; }
            }
          },
          "static": {}
        },
        "FilterOutputStream": {
          "prototype": {
            "getBaseStream": {
              "value": function () { return this.get_base_stream.apply(this, arguments); }
            },
            "getCloseBaseStream": {
              "value": function () { return this.get_close_base_stream.apply(this, arguments); }
            },
            "setCloseBaseStream": {
              "value": function () { return this.set_close_base_stream.apply(this, arguments); }
            },
            "baseStream": {
              "get": function () { return this.base_stream; },
              "set": function (value) { this.base_stream = value; }
            },
            "closeBaseStream": {
              "get": function () { return this.close_base_stream; },
              "set": function (value) { this.close_base_stream = value; }
            }
          },
          "static": {}
        },
        "IOModule": {
          "prototype": {},
          "static": {}
        },
        "IOStream": {
          "prototype": {
            "clearPending": {
              "value": function () { return this.clear_pending.apply(this, arguments); }
            },
            "closeAsync": {
              "value": function () { return this.close_async.apply(this, arguments); }
            },
            "closeFinish": {
              "value": function () { return this.close_finish.apply(this, arguments); }
            },
            "getInputStream": {
              "value": function () { return this.get_input_stream.apply(this, arguments); }
            },
            "getOutputStream": {
              "value": function () { return this.get_output_stream.apply(this, arguments); }
            },
            "hasPending": {
              "value": function () { return this.has_pending.apply(this, arguments); }
            },
            "isClosed": {
              "value": function () { return this.is_closed.apply(this, arguments); }
            },
            "setPending": {
              "value": function () { return this.set_pending.apply(this, arguments); }
            },
            "spliceAsync": {
              "value": function () { return this.splice_async.apply(this, arguments); }
            },
            "inputStream": {
              "get": function () { return this.input_stream; },
              "set": function (value) { this.input_stream = value; }
            },
            "outputStream": {
              "get": function () { return this.output_stream; },
              "set": function (value) { this.output_stream = value; }
            }
          },
          "static": {
            "spliceFinish": {
              "value": function () { return this.splice_finish.apply(this, arguments); }
            }
          }
        },
        "InetAddress": {
          "prototype": {
            "getFamily": {
              "value": function () { return this.get_family.apply(this, arguments); }
            },
            "getIsAny": {
              "value": function () { return this.get_is_any.apply(this, arguments); }
            },
            "getIsLinkLocal": {
              "value": function () { return this.get_is_link_local.apply(this, arguments); }
            },
            "getIsLoopback": {
              "value": function () { return this.get_is_loopback.apply(this, arguments); }
            },
            "getIsMcGlobal": {
              "value": function () { return this.get_is_mc_global.apply(this, arguments); }
            },
            "getIsMcLinkLocal": {
              "value": function () { return this.get_is_mc_link_local.apply(this, arguments); }
            },
            "getIsMcNodeLocal": {
              "value": function () { return this.get_is_mc_node_local.apply(this, arguments); }
            },
            "getIsMcOrgLocal": {
              "value": function () { return this.get_is_mc_org_local.apply(this, arguments); }
            },
            "getIsMcSiteLocal": {
              "value": function () { return this.get_is_mc_site_local.apply(this, arguments); }
            },
            "getIsMulticast": {
              "value": function () { return this.get_is_multicast.apply(this, arguments); }
            },
            "getIsSiteLocal": {
              "value": function () { return this.get_is_site_local.apply(this, arguments); }
            },
            "getNativeSize": {
              "value": function () { return this.get_native_size.apply(this, arguments); }
            },
            "toBytes": {
              "value": function () { return this.to_bytes.apply(this, arguments); }
            },
            "toString": {
              "value": function () { return this.to_string.apply(this, arguments); }
            },
            "isAny": {
              "get": function () { return this.is_any; },
              "set": function (value) { this.is_any = value; }
            },
            "isLinkLocal": {
              "get": function () { return this.is_link_local; },
              "set": function (value) { this.is_link_local = value; }
            },
            "isLoopback": {
              "get": function () { return this.is_loopback; },
              "set": function (value) { this.is_loopback = value; }
            },
            "isMcGlobal": {
              "get": function () { return this.is_mc_global; },
              "set": function (value) { this.is_mc_global = value; }
            },
            "isMcLinkLocal": {
              "get": function () { return this.is_mc_link_local; },
              "set": function (value) { this.is_mc_link_local = value; }
            },
            "isMcNodeLocal": {
              "get": function () { return this.is_mc_node_local; },
              "set": function (value) { this.is_mc_node_local = value; }
            },
            "isMcOrgLocal": {
              "get": function () { return this.is_mc_org_local; },
              "set": function (value) { this.is_mc_org_local = value; }
            },
            "isMcSiteLocal": {
              "get": function () { return this.is_mc_site_local; },
              "set": function (value) { this.is_mc_site_local = value; }
            },
            "isMulticast": {
              "get": function () { return this.is_multicast; },
              "set": function (value) { this.is_multicast = value; }
            },
            "isSiteLocal": {
              "get": function () { return this.is_site_local; },
              "set": function (value) { this.is_site_local = value; }
            }
          },
          "static": {}
        },
        "InetAddressMask": {
          "prototype": {
            "getAddress": {
              "value": function () { return this.get_address.apply(this, arguments); }
            },
            "getFamily": {
              "value": function () { return this.get_family.apply(this, arguments); }
            },
            "getLength": {
              "value": function () { return this.get_length.apply(this, arguments); }
            },
            "toString": {
              "value": function () { return this.to_string.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "InetSocketAddress": {
          "prototype": {
            "getAddress": {
              "value": function () { return this.get_address.apply(this, arguments); }
            },
            "getFlowinfo": {
              "value": function () { return this.get_flowinfo.apply(this, arguments); }
            },
            "getPort": {
              "value": function () { return this.get_port.apply(this, arguments); }
            },
            "getScopeId": {
              "value": function () { return this.get_scope_id.apply(this, arguments); }
            },
            "scopeId": {
              "get": function () { return this.scope_id; },
              "set": function (value) { this.scope_id = value; }
            }
          },
          "static": {}
        },
        "InputStream": {
          "prototype": {
            "clearPending": {
              "value": function () { return this.clear_pending.apply(this, arguments); }
            },
            "closeAsync": {
              "value": function () { return this.close_async.apply(this, arguments); }
            },
            "closeFinish": {
              "value": function () { return this.close_finish.apply(this, arguments); }
            },
            "hasPending": {
              "value": function () { return this.has_pending.apply(this, arguments); }
            },
            "isClosed": {
              "value": function () { return this.is_closed.apply(this, arguments); }
            },
            "readAll": {
              "value": function () { return this.read_all.apply(this, arguments); }
            },
            "readAllAsync": {
              "value": function () { return this.read_all_async.apply(this, arguments); }
            },
            "readAllFinish": {
              "value": function () { return this.read_all_finish.apply(this, arguments); }
            },
            "readAsync": {
              "value": function () { return this.read_async.apply(this, arguments); }
            },
            "readBytes": {
              "value": function () { return this.read_bytes.apply(this, arguments); }
            },
            "readBytesAsync": {
              "value": function () { return this.read_bytes_async.apply(this, arguments); }
            },
            "readBytesFinish": {
              "value": function () { return this.read_bytes_finish.apply(this, arguments); }
            },
            "readFinish": {
              "value": function () { return this.read_finish.apply(this, arguments); }
            },
            "setPending": {
              "value": function () { return this.set_pending.apply(this, arguments); }
            },
            "skipAsync": {
              "value": function () { return this.skip_async.apply(this, arguments); }
            },
            "skipFinish": {
              "value": function () { return this.skip_finish.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "ListStore": {
          "prototype": {
            "insertSorted": {
              "value": function () { return this.insert_sorted.apply(this, arguments); }
            },
            "removeAll": {
              "value": function () { return this.remove_all.apply(this, arguments); }
            },
            "itemType": {
              "get": function () { return this.item_type; },
              "set": function (value) { this.item_type = value; }
            }
          },
          "static": {}
        },
        "MemoryInputStream": {
          "prototype": {
            "addBytes": {
              "value": function () { return this.add_bytes.apply(this, arguments); }
            },
            "addData": {
              "value": function () { return this.add_data.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "MemoryOutputStream": {
          "prototype": {
            "getData": {
              "value": function () { return this.get_data.apply(this, arguments); }
            },
            "getDataSize": {
              "value": function () { return this.get_data_size.apply(this, arguments); }
            },
            "getSize": {
              "value": function () { return this.get_size.apply(this, arguments); }
            },
            "stealAsBytes": {
              "value": function () { return this.steal_as_bytes.apply(this, arguments); }
            },
            "stealData": {
              "value": function () { return this.steal_data.apply(this, arguments); }
            },
            "dataSize": {
              "get": function () { return this.data_size; },
              "set": function (value) { this.data_size = value; }
            },
            "destroyFunction": {
              "get": function () { return this.destroy_function; },
              "set": function (value) { this.destroy_function = value; }
            },
            "reallocFunction": {
              "get": function () { return this.realloc_function; },
              "set": function (value) { this.realloc_function = value; }
            }
          },
          "static": {}
        },
        "Menu": {
          "prototype": {
            "appendItem": {
              "value": function () { return this.append_item.apply(this, arguments); }
            },
            "appendSection": {
              "value": function () { return this.append_section.apply(this, arguments); }
            },
            "appendSubmenu": {
              "value": function () { return this.append_submenu.apply(this, arguments); }
            },
            "insertItem": {
              "value": function () { return this.insert_item.apply(this, arguments); }
            },
            "insertSection": {
              "value": function () { return this.insert_section.apply(this, arguments); }
            },
            "insertSubmenu": {
              "value": function () { return this.insert_submenu.apply(this, arguments); }
            },
            "prependItem": {
              "value": function () { return this.prepend_item.apply(this, arguments); }
            },
            "prependSection": {
              "value": function () { return this.prepend_section.apply(this, arguments); }
            },
            "prependSubmenu": {
              "value": function () { return this.prepend_submenu.apply(this, arguments); }
            },
            "removeAll": {
              "value": function () { return this.remove_all.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "MenuAttributeIter": {
          "prototype": {
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getNext": {
              "value": function () { return this.get_next.apply(this, arguments); }
            },
            "getValue": {
              "value": function () { return this.get_value.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "MenuItem": {
          "prototype": {
            "getAttribute": {
              "value": function () { return this.get_attribute.apply(this, arguments); }
            },
            "getAttributeValue": {
              "value": function () { return this.get_attribute_value.apply(this, arguments); }
            },
            "getLink": {
              "value": function () { return this.get_link.apply(this, arguments); }
            },
            "setActionAndTarget": {
              "value": function () { return this.set_action_and_target.apply(this, arguments); }
            },
            "setActionAndTargetValue": {
              "value": function () { return this.set_action_and_target_value.apply(this, arguments); }
            },
            "setAttribute": {
              "value": function () { return this.set_attribute.apply(this, arguments); }
            },
            "setAttributeValue": {
              "value": function () { return this.set_attribute_value.apply(this, arguments); }
            },
            "setDetailedAction": {
              "value": function () { return this.set_detailed_action.apply(this, arguments); }
            },
            "setIcon": {
              "value": function () { return this.set_icon.apply(this, arguments); }
            },
            "setLabel": {
              "value": function () { return this.set_label.apply(this, arguments); }
            },
            "setLink": {
              "value": function () { return this.set_link.apply(this, arguments); }
            },
            "setSection": {
              "value": function () { return this.set_section.apply(this, arguments); }
            },
            "setSubmenu": {
              "value": function () { return this.set_submenu.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "MenuLinkIter": {
          "prototype": {
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getNext": {
              "value": function () { return this.get_next.apply(this, arguments); }
            },
            "getValue": {
              "value": function () { return this.get_value.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "MenuModel": {
          "prototype": {
            "getItemAttribute": {
              "value": function () { return this.get_item_attribute.apply(this, arguments); }
            },
            "getItemAttributeValue": {
              "value": function () { return this.get_item_attribute_value.apply(this, arguments); }
            },
            "getItemLink": {
              "value": function () { return this.get_item_link.apply(this, arguments); }
            },
            "getNItems": {
              "value": function () { return this.get_n_items.apply(this, arguments); }
            },
            "isMutable": {
              "value": function () { return this.is_mutable.apply(this, arguments); }
            },
            "itemsChanged": {
              "value": function () { return this.items_changed.apply(this, arguments); }
            },
            "iterateItemAttributes": {
              "value": function () { return this.iterate_item_attributes.apply(this, arguments); }
            },
            "iterateItemLinks": {
              "value": function () { return this.iterate_item_links.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "MountOperation": {
          "prototype": {
            "getAnonymous": {
              "value": function () { return this.get_anonymous.apply(this, arguments); }
            },
            "getChoice": {
              "value": function () { return this.get_choice.apply(this, arguments); }
            },
            "getDomain": {
              "value": function () { return this.get_domain.apply(this, arguments); }
            },
            "getPassword": {
              "value": function () { return this.get_password.apply(this, arguments); }
            },
            "getPasswordSave": {
              "value": function () { return this.get_password_save.apply(this, arguments); }
            },
            "getUsername": {
              "value": function () { return this.get_username.apply(this, arguments); }
            },
            "setAnonymous": {
              "value": function () { return this.set_anonymous.apply(this, arguments); }
            },
            "setChoice": {
              "value": function () { return this.set_choice.apply(this, arguments); }
            },
            "setDomain": {
              "value": function () { return this.set_domain.apply(this, arguments); }
            },
            "setPassword": {
              "value": function () { return this.set_password.apply(this, arguments); }
            },
            "setPasswordSave": {
              "value": function () { return this.set_password_save.apply(this, arguments); }
            },
            "setUsername": {
              "value": function () { return this.set_username.apply(this, arguments); }
            },
            "passwordSave": {
              "get": function () { return this.password_save; },
              "set": function (value) { this.password_save = value; }
            }
          },
          "static": {}
        },
        "NativeVolumeMonitor": {
          "prototype": {},
          "static": {}
        },
        "NetworkAddress": {
          "prototype": {
            "getHostname": {
              "value": function () { return this.get_hostname.apply(this, arguments); }
            },
            "getPort": {
              "value": function () { return this.get_port.apply(this, arguments); }
            },
            "getScheme": {
              "value": function () { return this.get_scheme.apply(this, arguments); }
            }
          },
          "static": {
            "parseUri": {
              "value": function () { return this.parse_uri.apply(this, arguments); }
            }
          }
        },
        "NetworkService": {
          "prototype": {
            "getDomain": {
              "value": function () { return this.get_domain.apply(this, arguments); }
            },
            "getProtocol": {
              "value": function () { return this.get_protocol.apply(this, arguments); }
            },
            "getScheme": {
              "value": function () { return this.get_scheme.apply(this, arguments); }
            },
            "getService": {
              "value": function () { return this.get_service.apply(this, arguments); }
            },
            "setScheme": {
              "value": function () { return this.set_scheme.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Notification": {
          "prototype": {
            "addButton": {
              "value": function () { return this.add_button.apply(this, arguments); }
            },
            "addButtonWithTarget": {
              "value": function () { return this.add_button_with_target.apply(this, arguments); }
            },
            "addButtonWithTargetValue": {
              "value": function () { return this.add_button_with_target_value.apply(this, arguments); }
            },
            "setBody": {
              "value": function () { return this.set_body.apply(this, arguments); }
            },
            "setDefaultAction": {
              "value": function () { return this.set_default_action.apply(this, arguments); }
            },
            "setDefaultActionAndTarget": {
              "value": function () { return this.set_default_action_and_target.apply(this, arguments); }
            },
            "setDefaultActionAndTargetValue": {
              "value": function () { return this.set_default_action_and_target_value.apply(this, arguments); }
            },
            "setIcon": {
              "value": function () { return this.set_icon.apply(this, arguments); }
            },
            "setPriority": {
              "value": function () { return this.set_priority.apply(this, arguments); }
            },
            "setTitle": {
              "value": function () { return this.set_title.apply(this, arguments); }
            },
            "setUrgent": {
              "value": function () { return this.set_urgent.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "OutputStream": {
          "prototype": {
            "clearPending": {
              "value": function () { return this.clear_pending.apply(this, arguments); }
            },
            "closeAsync": {
              "value": function () { return this.close_async.apply(this, arguments); }
            },
            "closeFinish": {
              "value": function () { return this.close_finish.apply(this, arguments); }
            },
            "flushAsync": {
              "value": function () { return this.flush_async.apply(this, arguments); }
            },
            "flushFinish": {
              "value": function () { return this.flush_finish.apply(this, arguments); }
            },
            "hasPending": {
              "value": function () { return this.has_pending.apply(this, arguments); }
            },
            "isClosed": {
              "value": function () { return this.is_closed.apply(this, arguments); }
            },
            "isClosing": {
              "value": function () { return this.is_closing.apply(this, arguments); }
            },
            "setPending": {
              "value": function () { return this.set_pending.apply(this, arguments); }
            },
            "spliceAsync": {
              "value": function () { return this.splice_async.apply(this, arguments); }
            },
            "spliceFinish": {
              "value": function () { return this.splice_finish.apply(this, arguments); }
            },
            "writeAll": {
              "value": function () { return this.write_all.apply(this, arguments); }
            },
            "writeAllAsync": {
              "value": function () { return this.write_all_async.apply(this, arguments); }
            },
            "writeAllFinish": {
              "value": function () { return this.write_all_finish.apply(this, arguments); }
            },
            "writeAsync": {
              "value": function () { return this.write_async.apply(this, arguments); }
            },
            "writeBytes": {
              "value": function () { return this.write_bytes.apply(this, arguments); }
            },
            "writeBytesAsync": {
              "value": function () { return this.write_bytes_async.apply(this, arguments); }
            },
            "writeBytesFinish": {
              "value": function () { return this.write_bytes_finish.apply(this, arguments); }
            },
            "writeFinish": {
              "value": function () { return this.write_finish.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Permission": {
          "prototype": {
            "acquireAsync": {
              "value": function () { return this.acquire_async.apply(this, arguments); }
            },
            "acquireFinish": {
              "value": function () { return this.acquire_finish.apply(this, arguments); }
            },
            "getAllowed": {
              "value": function () { return this.get_allowed.apply(this, arguments); }
            },
            "getCanAcquire": {
              "value": function () { return this.get_can_acquire.apply(this, arguments); }
            },
            "getCanRelease": {
              "value": function () { return this.get_can_release.apply(this, arguments); }
            },
            "implUpdate": {
              "value": function () { return this.impl_update.apply(this, arguments); }
            },
            "releaseAsync": {
              "value": function () { return this.release_async.apply(this, arguments); }
            },
            "releaseFinish": {
              "value": function () { return this.release_finish.apply(this, arguments); }
            },
            "canAcquire": {
              "get": function () { return this.can_acquire; },
              "set": function (value) { this.can_acquire = value; }
            },
            "canRelease": {
              "get": function () { return this.can_release; },
              "set": function (value) { this.can_release = value; }
            }
          },
          "static": {}
        },
        "PropertyAction": {
          "prototype": {
            "invertBoolean": {
              "get": function () { return this.invert_boolean; },
              "set": function (value) { this.invert_boolean = value; }
            },
            "parameterType": {
              "get": function () { return this.parameter_type; },
              "set": function (value) { this.parameter_type = value; }
            },
            "propertyName": {
              "get": function () { return this.property_name; },
              "set": function (value) { this.property_name = value; }
            },
            "stateType": {
              "get": function () { return this.state_type; },
              "set": function (value) { this.state_type = value; }
            }
          },
          "static": {}
        },
        "ProxyAddress": {
          "prototype": {
            "getDestinationHostname": {
              "value": function () { return this.get_destination_hostname.apply(this, arguments); }
            },
            "getDestinationPort": {
              "value": function () { return this.get_destination_port.apply(this, arguments); }
            },
            "getDestinationProtocol": {
              "value": function () { return this.get_destination_protocol.apply(this, arguments); }
            },
            "getPassword": {
              "value": function () { return this.get_password.apply(this, arguments); }
            },
            "getProtocol": {
              "value": function () { return this.get_protocol.apply(this, arguments); }
            },
            "getUri": {
              "value": function () { return this.get_uri.apply(this, arguments); }
            },
            "getUsername": {
              "value": function () { return this.get_username.apply(this, arguments); }
            },
            "destinationHostname": {
              "get": function () { return this.destination_hostname; },
              "set": function (value) { this.destination_hostname = value; }
            },
            "destinationPort": {
              "get": function () { return this.destination_port; },
              "set": function (value) { this.destination_port = value; }
            },
            "destinationProtocol": {
              "get": function () { return this.destination_protocol; },
              "set": function (value) { this.destination_protocol = value; }
            }
          },
          "static": {}
        },
        "ProxyAddressEnumerator": {
          "prototype": {
            "defaultPort": {
              "get": function () { return this.default_port; },
              "set": function (value) { this.default_port = value; }
            },
            "proxyResolver": {
              "get": function () { return this.proxy_resolver; },
              "set": function (value) { this.proxy_resolver = value; }
            }
          },
          "static": {}
        },
        "Resolver": {
          "prototype": {
            "lookupByAddress": {
              "value": function () { return this.lookup_by_address.apply(this, arguments); }
            },
            "lookupByAddressAsync": {
              "value": function () { return this.lookup_by_address_async.apply(this, arguments); }
            },
            "lookupByAddressFinish": {
              "value": function () { return this.lookup_by_address_finish.apply(this, arguments); }
            },
            "lookupByName": {
              "value": function () { return this.lookup_by_name.apply(this, arguments); }
            },
            "lookupByNameAsync": {
              "value": function () { return this.lookup_by_name_async.apply(this, arguments); }
            },
            "lookupByNameFinish": {
              "value": function () { return this.lookup_by_name_finish.apply(this, arguments); }
            },
            "lookupRecords": {
              "value": function () { return this.lookup_records.apply(this, arguments); }
            },
            "lookupRecordsAsync": {
              "value": function () { return this.lookup_records_async.apply(this, arguments); }
            },
            "lookupRecordsFinish": {
              "value": function () { return this.lookup_records_finish.apply(this, arguments); }
            },
            "lookupService": {
              "value": function () { return this.lookup_service.apply(this, arguments); }
            },
            "lookupServiceAsync": {
              "value": function () { return this.lookup_service_async.apply(this, arguments); }
            },
            "lookupServiceFinish": {
              "value": function () { return this.lookup_service_finish.apply(this, arguments); }
            },
            "setDefault": {
              "value": function () { return this.set_default.apply(this, arguments); }
            }
          },
          "static": {
            "freeAddresses": {
              "value": function () { return this.free_addresses.apply(this, arguments); }
            },
            "freeTargets": {
              "value": function () { return this.free_targets.apply(this, arguments); }
            },
            "getDefault": {
              "value": function () { return this.get_default.apply(this, arguments); }
            }
          }
        },
        "Settings": {
          "prototype": {
            "bindWithMapping": {
              "value": function () { return this.bind_with_mapping.apply(this, arguments); }
            },
            "bindWritable": {
              "value": function () { return this.bind_writable.apply(this, arguments); }
            },
            "createAction": {
              "value": function () { return this.create_action.apply(this, arguments); }
            },
            "getBoolean": {
              "value": function () { return this.get_boolean.apply(this, arguments); }
            },
            "getChild": {
              "value": function () { return this.get_child.apply(this, arguments); }
            },
            "getDefaultValue": {
              "value": function () { return this.get_default_value.apply(this, arguments); }
            },
            "getDouble": {
              "value": function () { return this.get_double.apply(this, arguments); }
            },
            "getEnum": {
              "value": function () { return this.get_enum.apply(this, arguments); }
            },
            "getFlags": {
              "value": function () { return this.get_flags.apply(this, arguments); }
            },
            "getHasUnapplied": {
              "value": function () { return this.get_has_unapplied.apply(this, arguments); }
            },
            "getInt": {
              "value": function () { return this.get_int.apply(this, arguments); }
            },
            "getMapped": {
              "value": function () { return this.get_mapped.apply(this, arguments); }
            },
            "getRange": {
              "value": function () { return this.get_range.apply(this, arguments); }
            },
            "getString": {
              "value": function () { return this.get_string.apply(this, arguments); }
            },
            "getStrv": {
              "value": function () { return this.get_strv.apply(this, arguments); }
            },
            "getUint": {
              "value": function () { return this.get_uint.apply(this, arguments); }
            },
            "getUserValue": {
              "value": function () { return this.get_user_value.apply(this, arguments); }
            },
            "getValue": {
              "value": function () { return this.get_value.apply(this, arguments); }
            },
            "isWritable": {
              "value": function () { return this.is_writable.apply(this, arguments); }
            },
            "listChildren": {
              "value": function () { return this.list_children.apply(this, arguments); }
            },
            "listKeys": {
              "value": function () { return this.list_keys.apply(this, arguments); }
            },
            "rangeCheck": {
              "value": function () { return this.range_check.apply(this, arguments); }
            },
            "setBoolean": {
              "value": function () { return this.set_boolean.apply(this, arguments); }
            },
            "setDouble": {
              "value": function () { return this.set_double.apply(this, arguments); }
            },
            "setEnum": {
              "value": function () { return this.set_enum.apply(this, arguments); }
            },
            "setFlags": {
              "value": function () { return this.set_flags.apply(this, arguments); }
            },
            "setInt": {
              "value": function () { return this.set_int.apply(this, arguments); }
            },
            "setString": {
              "value": function () { return this.set_string.apply(this, arguments); }
            },
            "setStrv": {
              "value": function () { return this.set_strv.apply(this, arguments); }
            },
            "setUint": {
              "value": function () { return this.set_uint.apply(this, arguments); }
            },
            "setValue": {
              "value": function () { return this.set_value.apply(this, arguments); }
            },
            "delayApply": {
              "get": function () { return this.delay_apply; },
              "set": function (value) { this.delay_apply = value; }
            },
            "hasUnapplied": {
              "get": function () { return this.has_unapplied; },
              "set": function (value) { this.has_unapplied = value; }
            },
            "schemaId": {
              "get": function () { return this.schema_id; },
              "set": function (value) { this.schema_id = value; }
            },
            "settingsSchema": {
              "get": function () { return this.settings_schema; },
              "set": function (value) { this.settings_schema = value; }
            }
          },
          "static": {
            "listRelocatableSchemas": {
              "value": function () { return this.list_relocatable_schemas.apply(this, arguments); }
            },
            "listSchemas": {
              "value": function () { return this.list_schemas.apply(this, arguments); }
            }
          }
        },
        "SimpleAction": {
          "prototype": {
            "setEnabled": {
              "value": function () { return this.set_enabled.apply(this, arguments); }
            },
            "setState": {
              "value": function () { return this.set_state.apply(this, arguments); }
            },
            "setStateHint": {
              "value": function () { return this.set_state_hint.apply(this, arguments); }
            },
            "parameterType": {
              "get": function () { return this.parameter_type; },
              "set": function (value) { this.parameter_type = value; }
            },
            "stateType": {
              "get": function () { return this.state_type; },
              "set": function (value) { this.state_type = value; }
            }
          },
          "static": {}
        },
        "SimpleActionGroup": {
          "prototype": {
            "addEntries": {
              "value": function () { return this.add_entries.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "SimpleAsyncResult": {
          "prototype": {
            "completeInIdle": {
              "value": function () { return this.complete_in_idle.apply(this, arguments); }
            },
            "getOpResGboolean": {
              "value": function () { return this.get_op_res_gboolean.apply(this, arguments); }
            },
            "getOpResGpointer": {
              "value": function () { return this.get_op_res_gpointer.apply(this, arguments); }
            },
            "getOpResGssize": {
              "value": function () { return this.get_op_res_gssize.apply(this, arguments); }
            },
            "getSourceTag": {
              "value": function () { return this.get_source_tag.apply(this, arguments); }
            },
            "propagateError": {
              "value": function () { return this.propagate_error.apply(this, arguments); }
            },
            "runInThread": {
              "value": function () { return this.run_in_thread.apply(this, arguments); }
            },
            "setCheckCancellable": {
              "value": function () { return this.set_check_cancellable.apply(this, arguments); }
            },
            "setError": {
              "value": function () { return this.set_error.apply(this, arguments); }
            },
            "setErrorVa": {
              "value": function () { return this.set_error_va.apply(this, arguments); }
            },
            "setFromError": {
              "value": function () { return this.set_from_error.apply(this, arguments); }
            },
            "setHandleCancellation": {
              "value": function () { return this.set_handle_cancellation.apply(this, arguments); }
            },
            "setOpResGboolean": {
              "value": function () { return this.set_op_res_gboolean.apply(this, arguments); }
            },
            "setOpResGpointer": {
              "value": function () { return this.set_op_res_gpointer.apply(this, arguments); }
            },
            "setOpResGssize": {
              "value": function () { return this.set_op_res_gssize.apply(this, arguments); }
            },
            "takeError": {
              "value": function () { return this.take_error.apply(this, arguments); }
            }
          },
          "static": {
            "isValid": {
              "value": function () { return this.is_valid.apply(this, arguments); }
            }
          }
        },
        "SimpleIOStream": {
          "prototype": {
            "inputStream": {
              "get": function () { return this.input_stream; },
              "set": function (value) { this.input_stream = value; }
            },
            "outputStream": {
              "get": function () { return this.output_stream; },
              "set": function (value) { this.output_stream = value; }
            }
          },
          "static": {}
        },
        "SimplePermission": {
          "prototype": {},
          "static": {}
        },
        "SimpleProxyResolver": {
          "prototype": {
            "setDefaultProxy": {
              "value": function () { return this.set_default_proxy.apply(this, arguments); }
            },
            "setIgnoreHosts": {
              "value": function () { return this.set_ignore_hosts.apply(this, arguments); }
            },
            "setUriProxy": {
              "value": function () { return this.set_uri_proxy.apply(this, arguments); }
            },
            "defaultProxy": {
              "get": function () { return this.default_proxy; },
              "set": function (value) { this.default_proxy = value; }
            },
            "ignoreHosts": {
              "get": function () { return this.ignore_hosts; },
              "set": function (value) { this.ignore_hosts = value; }
            }
          },
          "static": {}
        },
        "Socket": {
          "prototype": {
            "checkConnectResult": {
              "value": function () { return this.check_connect_result.apply(this, arguments); }
            },
            "conditionCheck": {
              "value": function () { return this.condition_check.apply(this, arguments); }
            },
            "conditionTimedWait": {
              "value": function () { return this.condition_timed_wait.apply(this, arguments); }
            },
            "conditionWait": {
              "value": function () { return this.condition_wait.apply(this, arguments); }
            },
            "connectionFactoryCreateConnection": {
              "value": function () { return this.connection_factory_create_connection.apply(this, arguments); }
            },
            "createSource": {
              "value": function () { return this.create_source.apply(this, arguments); }
            },
            "getAvailableBytes": {
              "value": function () { return this.get_available_bytes.apply(this, arguments); }
            },
            "getBlocking": {
              "value": function () { return this.get_blocking.apply(this, arguments); }
            },
            "getBroadcast": {
              "value": function () { return this.get_broadcast.apply(this, arguments); }
            },
            "getCredentials": {
              "value": function () { return this.get_credentials.apply(this, arguments); }
            },
            "getFamily": {
              "value": function () { return this.get_family.apply(this, arguments); }
            },
            "getFd": {
              "value": function () { return this.get_fd.apply(this, arguments); }
            },
            "getKeepalive": {
              "value": function () { return this.get_keepalive.apply(this, arguments); }
            },
            "getListenBacklog": {
              "value": function () { return this.get_listen_backlog.apply(this, arguments); }
            },
            "getLocalAddress": {
              "value": function () { return this.get_local_address.apply(this, arguments); }
            },
            "getMulticastLoopback": {
              "value": function () { return this.get_multicast_loopback.apply(this, arguments); }
            },
            "getMulticastTtl": {
              "value": function () { return this.get_multicast_ttl.apply(this, arguments); }
            },
            "getOption": {
              "value": function () { return this.get_option.apply(this, arguments); }
            },
            "getProtocol": {
              "value": function () { return this.get_protocol.apply(this, arguments); }
            },
            "getRemoteAddress": {
              "value": function () { return this.get_remote_address.apply(this, arguments); }
            },
            "getSocketType": {
              "value": function () { return this.get_socket_type.apply(this, arguments); }
            },
            "getTimeout": {
              "value": function () { return this.get_timeout.apply(this, arguments); }
            },
            "getTtl": {
              "value": function () { return this.get_ttl.apply(this, arguments); }
            },
            "isClosed": {
              "value": function () { return this.is_closed.apply(this, arguments); }
            },
            "isConnected": {
              "value": function () { return this.is_connected.apply(this, arguments); }
            },
            "joinMulticastGroup": {
              "value": function () { return this.join_multicast_group.apply(this, arguments); }
            },
            "leaveMulticastGroup": {
              "value": function () { return this.leave_multicast_group.apply(this, arguments); }
            },
            "receiveFrom": {
              "value": function () { return this.receive_from.apply(this, arguments); }
            },
            "receiveMessage": {
              "value": function () { return this.receive_message.apply(this, arguments); }
            },
            "receiveMessages": {
              "value": function () { return this.receive_messages.apply(this, arguments); }
            },
            "receiveWithBlocking": {
              "value": function () { return this.receive_with_blocking.apply(this, arguments); }
            },
            "sendMessage": {
              "value": function () { return this.send_message.apply(this, arguments); }
            },
            "sendMessages": {
              "value": function () { return this.send_messages.apply(this, arguments); }
            },
            "sendTo": {
              "value": function () { return this.send_to.apply(this, arguments); }
            },
            "sendWithBlocking": {
              "value": function () { return this.send_with_blocking.apply(this, arguments); }
            },
            "setBlocking": {
              "value": function () { return this.set_blocking.apply(this, arguments); }
            },
            "setBroadcast": {
              "value": function () { return this.set_broadcast.apply(this, arguments); }
            },
            "setKeepalive": {
              "value": function () { return this.set_keepalive.apply(this, arguments); }
            },
            "setListenBacklog": {
              "value": function () { return this.set_listen_backlog.apply(this, arguments); }
            },
            "setMulticastLoopback": {
              "value": function () { return this.set_multicast_loopback.apply(this, arguments); }
            },
            "setMulticastTtl": {
              "value": function () { return this.set_multicast_ttl.apply(this, arguments); }
            },
            "setOption": {
              "value": function () { return this.set_option.apply(this, arguments); }
            },
            "setTimeout": {
              "value": function () { return this.set_timeout.apply(this, arguments); }
            },
            "setTtl": {
              "value": function () { return this.set_ttl.apply(this, arguments); }
            },
            "speaksIpv4": {
              "value": function () { return this.speaks_ipv4.apply(this, arguments); }
            },
            "listenBacklog": {
              "get": function () { return this.listen_backlog; },
              "set": function (value) { this.listen_backlog = value; }
            },
            "localAddress": {
              "get": function () { return this.local_address; },
              "set": function (value) { this.local_address = value; }
            },
            "multicastLoopback": {
              "get": function () { return this.multicast_loopback; },
              "set": function (value) { this.multicast_loopback = value; }
            },
            "multicastTtl": {
              "get": function () { return this.multicast_ttl; },
              "set": function (value) { this.multicast_ttl = value; }
            },
            "remoteAddress": {
              "get": function () { return this.remote_address; },
              "set": function (value) { this.remote_address = value; }
            }
          },
          "static": {}
        },
        "SocketAddress": {
          "prototype": {
            "getFamily": {
              "value": function () { return this.get_family.apply(this, arguments); }
            },
            "getNativeSize": {
              "value": function () { return this.get_native_size.apply(this, arguments); }
            },
            "toNative": {
              "value": function () { return this.to_native.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "SocketAddressEnumerator": {
          "prototype": {
            "nextAsync": {
              "value": function () { return this.next_async.apply(this, arguments); }
            },
            "nextFinish": {
              "value": function () { return this.next_finish.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "SocketClient": {
          "prototype": {
            "addApplicationProxy": {
              "value": function () { return this.add_application_proxy.apply(this, arguments); }
            },
            "connectAsync": {
              "value": function () { return this.connect_async.apply(this, arguments); }
            },
            "connectFinish": {
              "value": function () { return this.connect_finish.apply(this, arguments); }
            },
            "connectToHost": {
              "value": function () { return this.connect_to_host.apply(this, arguments); }
            },
            "connectToHostAsync": {
              "value": function () { return this.connect_to_host_async.apply(this, arguments); }
            },
            "connectToHostFinish": {
              "value": function () { return this.connect_to_host_finish.apply(this, arguments); }
            },
            "connectToService": {
              "value": function () { return this.connect_to_service.apply(this, arguments); }
            },
            "connectToServiceAsync": {
              "value": function () { return this.connect_to_service_async.apply(this, arguments); }
            },
            "connectToServiceFinish": {
              "value": function () { return this.connect_to_service_finish.apply(this, arguments); }
            },
            "connectToUri": {
              "value": function () { return this.connect_to_uri.apply(this, arguments); }
            },
            "connectToUriAsync": {
              "value": function () { return this.connect_to_uri_async.apply(this, arguments); }
            },
            "connectToUriFinish": {
              "value": function () { return this.connect_to_uri_finish.apply(this, arguments); }
            },
            "getEnableProxy": {
              "value": function () { return this.get_enable_proxy.apply(this, arguments); }
            },
            "getFamily": {
              "value": function () { return this.get_family.apply(this, arguments); }
            },
            "getLocalAddress": {
              "value": function () { return this.get_local_address.apply(this, arguments); }
            },
            "getProtocol": {
              "value": function () { return this.get_protocol.apply(this, arguments); }
            },
            "getProxyResolver": {
              "value": function () { return this.get_proxy_resolver.apply(this, arguments); }
            },
            "getSocketType": {
              "value": function () { return this.get_socket_type.apply(this, arguments); }
            },
            "getTimeout": {
              "value": function () { return this.get_timeout.apply(this, arguments); }
            },
            "getTls": {
              "value": function () { return this.get_tls.apply(this, arguments); }
            },
            "getTlsValidationFlags": {
              "value": function () { return this.get_tls_validation_flags.apply(this, arguments); }
            },
            "setEnableProxy": {
              "value": function () { return this.set_enable_proxy.apply(this, arguments); }
            },
            "setFamily": {
              "value": function () { return this.set_family.apply(this, arguments); }
            },
            "setLocalAddress": {
              "value": function () { return this.set_local_address.apply(this, arguments); }
            },
            "setProtocol": {
              "value": function () { return this.set_protocol.apply(this, arguments); }
            },
            "setProxyResolver": {
              "value": function () { return this.set_proxy_resolver.apply(this, arguments); }
            },
            "setSocketType": {
              "value": function () { return this.set_socket_type.apply(this, arguments); }
            },
            "setTimeout": {
              "value": function () { return this.set_timeout.apply(this, arguments); }
            },
            "setTls": {
              "value": function () { return this.set_tls.apply(this, arguments); }
            },
            "setTlsValidationFlags": {
              "value": function () { return this.set_tls_validation_flags.apply(this, arguments); }
            },
            "enableProxy": {
              "get": function () { return this.enable_proxy; },
              "set": function (value) { this.enable_proxy = value; }
            },
            "localAddress": {
              "get": function () { return this.local_address; },
              "set": function (value) { this.local_address = value; }
            },
            "proxyResolver": {
              "get": function () { return this.proxy_resolver; },
              "set": function (value) { this.proxy_resolver = value; }
            },
            "tlsValidationFlags": {
              "get": function () { return this.tls_validation_flags; },
              "set": function (value) { this.tls_validation_flags = value; }
            }
          },
          "static": {}
        },
        "SocketConnection": {
          "prototype": {
            "connectAsync": {
              "value": function () { return this.connect_async.apply(this, arguments); }
            },
            "connectFinish": {
              "value": function () { return this.connect_finish.apply(this, arguments); }
            },
            "getLocalAddress": {
              "value": function () { return this.get_local_address.apply(this, arguments); }
            },
            "getRemoteAddress": {
              "value": function () { return this.get_remote_address.apply(this, arguments); }
            },
            "getSocket": {
              "value": function () { return this.get_socket.apply(this, arguments); }
            },
            "isConnected": {
              "value": function () { return this.is_connected.apply(this, arguments); }
            }
          },
          "static": {
            "factoryLookupType": {
              "value": function () { return this.factory_lookup_type.apply(this, arguments); }
            },
            "factoryRegisterType": {
              "value": function () { return this.factory_register_type.apply(this, arguments); }
            }
          }
        },
        "SocketControlMessage": {
          "prototype": {
            "getLevel": {
              "value": function () { return this.get_level.apply(this, arguments); }
            },
            "getMsgType": {
              "value": function () { return this.get_msg_type.apply(this, arguments); }
            },
            "getSize": {
              "value": function () { return this.get_size.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "SocketListener": {
          "prototype": {
            "acceptAsync": {
              "value": function () { return this.accept_async.apply(this, arguments); }
            },
            "acceptFinish": {
              "value": function () { return this.accept_finish.apply(this, arguments); }
            },
            "acceptSocket": {
              "value": function () { return this.accept_socket.apply(this, arguments); }
            },
            "acceptSocketAsync": {
              "value": function () { return this.accept_socket_async.apply(this, arguments); }
            },
            "acceptSocketFinish": {
              "value": function () { return this.accept_socket_finish.apply(this, arguments); }
            },
            "addAddress": {
              "value": function () { return this.add_address.apply(this, arguments); }
            },
            "addAnyInetPort": {
              "value": function () { return this.add_any_inet_port.apply(this, arguments); }
            },
            "addInetPort": {
              "value": function () { return this.add_inet_port.apply(this, arguments); }
            },
            "addSocket": {
              "value": function () { return this.add_socket.apply(this, arguments); }
            },
            "setBacklog": {
              "value": function () { return this.set_backlog.apply(this, arguments); }
            },
            "listenBacklog": {
              "get": function () { return this.listen_backlog; },
              "set": function (value) { this.listen_backlog = value; }
            }
          },
          "static": {}
        },
        "SocketService": {
          "prototype": {
            "isActive": {
              "value": function () { return this.is_active.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Subprocess": {
          "prototype": {
            "communicateAsync": {
              "value": function () { return this.communicate_async.apply(this, arguments); }
            },
            "communicateFinish": {
              "value": function () { return this.communicate_finish.apply(this, arguments); }
            },
            "communicateUtf8": {
              "value": function () { return this.communicate_utf8.apply(this, arguments); }
            },
            "communicateUtf8Async": {
              "value": function () { return this.communicate_utf8_async.apply(this, arguments); }
            },
            "communicateUtf8Finish": {
              "value": function () { return this.communicate_utf8_finish.apply(this, arguments); }
            },
            "forceExit": {
              "value": function () { return this.force_exit.apply(this, arguments); }
            },
            "getExitStatus": {
              "value": function () { return this.get_exit_status.apply(this, arguments); }
            },
            "getIdentifier": {
              "value": function () { return this.get_identifier.apply(this, arguments); }
            },
            "getIfExited": {
              "value": function () { return this.get_if_exited.apply(this, arguments); }
            },
            "getIfSignaled": {
              "value": function () { return this.get_if_signaled.apply(this, arguments); }
            },
            "getStatus": {
              "value": function () { return this.get_status.apply(this, arguments); }
            },
            "getStderrPipe": {
              "value": function () { return this.get_stderr_pipe.apply(this, arguments); }
            },
            "getStdinPipe": {
              "value": function () { return this.get_stdin_pipe.apply(this, arguments); }
            },
            "getStdoutPipe": {
              "value": function () { return this.get_stdout_pipe.apply(this, arguments); }
            },
            "getSuccessful": {
              "value": function () { return this.get_successful.apply(this, arguments); }
            },
            "getTermSig": {
              "value": function () { return this.get_term_sig.apply(this, arguments); }
            },
            "sendSignal": {
              "value": function () { return this.send_signal.apply(this, arguments); }
            },
            "waitAsync": {
              "value": function () { return this.wait_async.apply(this, arguments); }
            },
            "waitCheck": {
              "value": function () { return this.wait_check.apply(this, arguments); }
            },
            "waitCheckAsync": {
              "value": function () { return this.wait_check_async.apply(this, arguments); }
            },
            "waitCheckFinish": {
              "value": function () { return this.wait_check_finish.apply(this, arguments); }
            },
            "waitFinish": {
              "value": function () { return this.wait_finish.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "SubprocessLauncher": {
          "prototype": {
            "setChildSetup": {
              "value": function () { return this.set_child_setup.apply(this, arguments); }
            },
            "setCwd": {
              "value": function () { return this.set_cwd.apply(this, arguments); }
            },
            "setEnviron": {
              "value": function () { return this.set_environ.apply(this, arguments); }
            },
            "setFlags": {
              "value": function () { return this.set_flags.apply(this, arguments); }
            },
            "setStderrFilePath": {
              "value": function () { return this.set_stderr_file_path.apply(this, arguments); }
            },
            "setStdinFilePath": {
              "value": function () { return this.set_stdin_file_path.apply(this, arguments); }
            },
            "setStdoutFilePath": {
              "value": function () { return this.set_stdout_file_path.apply(this, arguments); }
            },
            "takeFd": {
              "value": function () { return this.take_fd.apply(this, arguments); }
            },
            "takeStderrFd": {
              "value": function () { return this.take_stderr_fd.apply(this, arguments); }
            },
            "takeStdinFd": {
              "value": function () { return this.take_stdin_fd.apply(this, arguments); }
            },
            "takeStdoutFd": {
              "value": function () { return this.take_stdout_fd.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Task": {
          "prototype": {
            "attachSource": {
              "value": function () { return this.attach_source.apply(this, arguments); }
            },
            "getCancellable": {
              "value": function () { return this.get_cancellable.apply(this, arguments); }
            },
            "getCheckCancellable": {
              "value": function () { return this.get_check_cancellable.apply(this, arguments); }
            },
            "getCompleted": {
              "value": function () { return this.get_completed.apply(this, arguments); }
            },
            "getContext": {
              "value": function () { return this.get_context.apply(this, arguments); }
            },
            "getPriority": {
              "value": function () { return this.get_priority.apply(this, arguments); }
            },
            "getReturnOnCancel": {
              "value": function () { return this.get_return_on_cancel.apply(this, arguments); }
            },
            "getSourceObject": {
              "value": function () { return this.get_source_object.apply(this, arguments); }
            },
            "getSourceTag": {
              "value": function () { return this.get_source_tag.apply(this, arguments); }
            },
            "getTaskData": {
              "value": function () { return this.get_task_data.apply(this, arguments); }
            },
            "hadError": {
              "value": function () { return this.had_error.apply(this, arguments); }
            },
            "propagateBoolean": {
              "value": function () { return this.propagate_boolean.apply(this, arguments); }
            },
            "propagateInt": {
              "value": function () { return this.propagate_int.apply(this, arguments); }
            },
            "propagatePointer": {
              "value": function () { return this.propagate_pointer.apply(this, arguments); }
            },
            "returnBoolean": {
              "value": function () { return this.return_boolean.apply(this, arguments); }
            },
            "returnError": {
              "value": function () { return this.return_error.apply(this, arguments); }
            },
            "returnErrorIfCancelled": {
              "value": function () { return this.return_error_if_cancelled.apply(this, arguments); }
            },
            "returnInt": {
              "value": function () { return this.return_int.apply(this, arguments); }
            },
            "returnNewError": {
              "value": function () { return this.return_new_error.apply(this, arguments); }
            },
            "returnPointer": {
              "value": function () { return this.return_pointer.apply(this, arguments); }
            },
            "runInThread": {
              "value": function () { return this.run_in_thread.apply(this, arguments); }
            },
            "runInThreadSync": {
              "value": function () { return this.run_in_thread_sync.apply(this, arguments); }
            },
            "setCheckCancellable": {
              "value": function () { return this.set_check_cancellable.apply(this, arguments); }
            },
            "setPriority": {
              "value": function () { return this.set_priority.apply(this, arguments); }
            },
            "setReturnOnCancel": {
              "value": function () { return this.set_return_on_cancel.apply(this, arguments); }
            },
            "setSourceTag": {
              "value": function () { return this.set_source_tag.apply(this, arguments); }
            },
            "setTaskData": {
              "value": function () { return this.set_task_data.apply(this, arguments); }
            }
          },
          "static": {
            "isValid": {
              "value": function () { return this.is_valid.apply(this, arguments); }
            },
            "reportError": {
              "value": function () { return this.report_error.apply(this, arguments); }
            },
            "reportNewError": {
              "value": function () { return this.report_new_error.apply(this, arguments); }
            }
          }
        },
        "TcpConnection": {
          "prototype": {
            "getGracefulDisconnect": {
              "value": function () { return this.get_graceful_disconnect.apply(this, arguments); }
            },
            "setGracefulDisconnect": {
              "value": function () { return this.set_graceful_disconnect.apply(this, arguments); }
            },
            "gracefulDisconnect": {
              "get": function () { return this.graceful_disconnect; },
              "set": function (value) { this.graceful_disconnect = value; }
            }
          },
          "static": {}
        },
        "TcpWrapperConnection": {
          "prototype": {
            "getBaseIoStream": {
              "value": function () { return this.get_base_io_stream.apply(this, arguments); }
            },
            "baseIoStream": {
              "get": function () { return this.base_io_stream; },
              "set": function (value) { this.base_io_stream = value; }
            }
          },
          "static": {}
        },
        "TestDBus": {
          "prototype": {
            "addServiceDir": {
              "value": function () { return this.add_service_dir.apply(this, arguments); }
            },
            "getBusAddress": {
              "value": function () { return this.get_bus_address.apply(this, arguments); }
            },
            "getFlags": {
              "value": function () { return this.get_flags.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "ThemedIcon": {
          "prototype": {
            "appendName": {
              "value": function () { return this.append_name.apply(this, arguments); }
            },
            "getNames": {
              "value": function () { return this.get_names.apply(this, arguments); }
            },
            "prependName": {
              "value": function () { return this.prepend_name.apply(this, arguments); }
            },
            "useDefaultFallbacks": {
              "get": function () { return this.use_default_fallbacks; },
              "set": function (value) { this.use_default_fallbacks = value; }
            }
          },
          "static": {}
        },
        "ThreadedSocketService": {
          "prototype": {
            "maxThreads": {
              "get": function () { return this.max_threads; },
              "set": function (value) { this.max_threads = value; }
            }
          },
          "static": {}
        },
        "TlsCertificate": {
          "prototype": {
            "getIssuer": {
              "value": function () { return this.get_issuer.apply(this, arguments); }
            },
            "isSame": {
              "value": function () { return this.is_same.apply(this, arguments); }
            },
            "certificatePem": {
              "get": function () { return this.certificate_pem; },
              "set": function (value) { this.certificate_pem = value; }
            },
            "privateKey": {
              "get": function () { return this.private_key; },
              "set": function (value) { this.private_key = value; }
            },
            "privateKeyPem": {
              "get": function () { return this.private_key_pem; },
              "set": function (value) { this.private_key_pem = value; }
            }
          },
          "static": {
            "listNewFromFile": {
              "value": function () { return this.list_new_from_file.apply(this, arguments); }
            }
          }
        },
        "TlsConnection": {
          "prototype": {
            "emitAcceptCertificate": {
              "value": function () { return this.emit_accept_certificate.apply(this, arguments); }
            },
            "getCertificate": {
              "value": function () { return this.get_certificate.apply(this, arguments); }
            },
            "getDatabase": {
              "value": function () { return this.get_database.apply(this, arguments); }
            },
            "getInteraction": {
              "value": function () { return this.get_interaction.apply(this, arguments); }
            },
            "getPeerCertificate": {
              "value": function () { return this.get_peer_certificate.apply(this, arguments); }
            },
            "getPeerCertificateErrors": {
              "value": function () { return this.get_peer_certificate_errors.apply(this, arguments); }
            },
            "getRehandshakeMode": {
              "value": function () { return this.get_rehandshake_mode.apply(this, arguments); }
            },
            "getRequireCloseNotify": {
              "value": function () { return this.get_require_close_notify.apply(this, arguments); }
            },
            "getUseSystemCertdb": {
              "value": function () { return this.get_use_system_certdb.apply(this, arguments); }
            },
            "handshakeAsync": {
              "value": function () { return this.handshake_async.apply(this, arguments); }
            },
            "handshakeFinish": {
              "value": function () { return this.handshake_finish.apply(this, arguments); }
            },
            "setCertificate": {
              "value": function () { return this.set_certificate.apply(this, arguments); }
            },
            "setDatabase": {
              "value": function () { return this.set_database.apply(this, arguments); }
            },
            "setInteraction": {
              "value": function () { return this.set_interaction.apply(this, arguments); }
            },
            "setRehandshakeMode": {
              "value": function () { return this.set_rehandshake_mode.apply(this, arguments); }
            },
            "setRequireCloseNotify": {
              "value": function () { return this.set_require_close_notify.apply(this, arguments); }
            },
            "setUseSystemCertdb": {
              "value": function () { return this.set_use_system_certdb.apply(this, arguments); }
            },
            "baseIoStream": {
              "get": function () { return this.base_io_stream; },
              "set": function (value) { this.base_io_stream = value; }
            },
            "peerCertificate": {
              "get": function () { return this.peer_certificate; },
              "set": function (value) { this.peer_certificate = value; }
            },
            "peerCertificateErrors": {
              "get": function () { return this.peer_certificate_errors; },
              "set": function (value) { this.peer_certificate_errors = value; }
            },
            "rehandshakeMode": {
              "get": function () { return this.rehandshake_mode; },
              "set": function (value) { this.rehandshake_mode = value; }
            },
            "requireCloseNotify": {
              "get": function () { return this.require_close_notify; },
              "set": function (value) { this.require_close_notify = value; }
            },
            "useSystemCertdb": {
              "get": function () { return this.use_system_certdb; },
              "set": function (value) { this.use_system_certdb = value; }
            }
          },
          "static": {}
        },
        "TlsDatabase": {
          "prototype": {
            "createCertificateHandle": {
              "value": function () { return this.create_certificate_handle.apply(this, arguments); }
            },
            "lookupCertificateForHandle": {
              "value": function () { return this.lookup_certificate_for_handle.apply(this, arguments); }
            },
            "lookupCertificateForHandleAsync": {
              "value": function () { return this.lookup_certificate_for_handle_async.apply(this, arguments); }
            },
            "lookupCertificateForHandleFinish": {
              "value": function () { return this.lookup_certificate_for_handle_finish.apply(this, arguments); }
            },
            "lookupCertificateIssuer": {
              "value": function () { return this.lookup_certificate_issuer.apply(this, arguments); }
            },
            "lookupCertificateIssuerAsync": {
              "value": function () { return this.lookup_certificate_issuer_async.apply(this, arguments); }
            },
            "lookupCertificateIssuerFinish": {
              "value": function () { return this.lookup_certificate_issuer_finish.apply(this, arguments); }
            },
            "lookupCertificatesIssuedBy": {
              "value": function () { return this.lookup_certificates_issued_by.apply(this, arguments); }
            },
            "lookupCertificatesIssuedByAsync": {
              "value": function () { return this.lookup_certificates_issued_by_async.apply(this, arguments); }
            },
            "lookupCertificatesIssuedByFinish": {
              "value": function () { return this.lookup_certificates_issued_by_finish.apply(this, arguments); }
            },
            "verifyChain": {
              "value": function () { return this.verify_chain.apply(this, arguments); }
            },
            "verifyChainAsync": {
              "value": function () { return this.verify_chain_async.apply(this, arguments); }
            },
            "verifyChainFinish": {
              "value": function () { return this.verify_chain_finish.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "TlsInteraction": {
          "prototype": {
            "askPassword": {
              "value": function () { return this.ask_password.apply(this, arguments); }
            },
            "askPasswordAsync": {
              "value": function () { return this.ask_password_async.apply(this, arguments); }
            },
            "askPasswordFinish": {
              "value": function () { return this.ask_password_finish.apply(this, arguments); }
            },
            "invokeAskPassword": {
              "value": function () { return this.invoke_ask_password.apply(this, arguments); }
            },
            "invokeRequestCertificate": {
              "value": function () { return this.invoke_request_certificate.apply(this, arguments); }
            },
            "requestCertificate": {
              "value": function () { return this.request_certificate.apply(this, arguments); }
            },
            "requestCertificateAsync": {
              "value": function () { return this.request_certificate_async.apply(this, arguments); }
            },
            "requestCertificateFinish": {
              "value": function () { return this.request_certificate_finish.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "TlsPassword": {
          "prototype": {
            "getDescription": {
              "value": function () { return this.get_description.apply(this, arguments); }
            },
            "getFlags": {
              "value": function () { return this.get_flags.apply(this, arguments); }
            },
            "getValue": {
              "value": function () { return this.get_value.apply(this, arguments); }
            },
            "getWarning": {
              "value": function () { return this.get_warning.apply(this, arguments); }
            },
            "setDescription": {
              "value": function () { return this.set_description.apply(this, arguments); }
            },
            "setFlags": {
              "value": function () { return this.set_flags.apply(this, arguments); }
            },
            "setValue": {
              "value": function () { return this.set_value.apply(this, arguments); }
            },
            "setValueFull": {
              "value": function () { return this.set_value_full.apply(this, arguments); }
            },
            "setWarning": {
              "value": function () { return this.set_warning.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "UnixConnection": {
          "prototype": {
            "receiveCredentials": {
              "value": function () { return this.receive_credentials.apply(this, arguments); }
            },
            "receiveCredentialsAsync": {
              "value": function () { return this.receive_credentials_async.apply(this, arguments); }
            },
            "receiveCredentialsFinish": {
              "value": function () { return this.receive_credentials_finish.apply(this, arguments); }
            },
            "receiveFd": {
              "value": function () { return this.receive_fd.apply(this, arguments); }
            },
            "sendCredentials": {
              "value": function () { return this.send_credentials.apply(this, arguments); }
            },
            "sendCredentialsAsync": {
              "value": function () { return this.send_credentials_async.apply(this, arguments); }
            },
            "sendCredentialsFinish": {
              "value": function () { return this.send_credentials_finish.apply(this, arguments); }
            },
            "sendFd": {
              "value": function () { return this.send_fd.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "UnixCredentialsMessage": {
          "prototype": {
            "getCredentials": {
              "value": function () { return this.get_credentials.apply(this, arguments); }
            }
          },
          "static": {
            "isSupported": {
              "value": function () { return this.is_supported.apply(this, arguments); }
            }
          }
        },
        "UnixFDList": {
          "prototype": {
            "getLength": {
              "value": function () { return this.get_length.apply(this, arguments); }
            },
            "peekFds": {
              "value": function () { return this.peek_fds.apply(this, arguments); }
            },
            "stealFds": {
              "value": function () { return this.steal_fds.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "UnixFDMessage": {
          "prototype": {
            "appendFd": {
              "value": function () { return this.append_fd.apply(this, arguments); }
            },
            "getFdList": {
              "value": function () { return this.get_fd_list.apply(this, arguments); }
            },
            "stealFds": {
              "value": function () { return this.steal_fds.apply(this, arguments); }
            },
            "fdList": {
              "get": function () { return this.fd_list; },
              "set": function (value) { this.fd_list = value; }
            }
          },
          "static": {}
        },
        "UnixInputStream": {
          "prototype": {
            "getCloseFd": {
              "value": function () { return this.get_close_fd.apply(this, arguments); }
            },
            "getFd": {
              "value": function () { return this.get_fd.apply(this, arguments); }
            },
            "setCloseFd": {
              "value": function () { return this.set_close_fd.apply(this, arguments); }
            },
            "closeFd": {
              "get": function () { return this.close_fd; },
              "set": function (value) { this.close_fd = value; }
            }
          },
          "static": {}
        },
        "UnixMountMonitor": {
          "prototype": {
            "setRateLimit": {
              "value": function () { return this.set_rate_limit.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "UnixOutputStream": {
          "prototype": {
            "getCloseFd": {
              "value": function () { return this.get_close_fd.apply(this, arguments); }
            },
            "getFd": {
              "value": function () { return this.get_fd.apply(this, arguments); }
            },
            "setCloseFd": {
              "value": function () { return this.set_close_fd.apply(this, arguments); }
            },
            "closeFd": {
              "get": function () { return this.close_fd; },
              "set": function (value) { this.close_fd = value; }
            }
          },
          "static": {}
        },
        "UnixSocketAddress": {
          "prototype": {
            "getAddressType": {
              "value": function () { return this.get_address_type.apply(this, arguments); }
            },
            "getIsAbstract": {
              "value": function () { return this.get_is_abstract.apply(this, arguments); }
            },
            "getPath": {
              "value": function () { return this.get_path.apply(this, arguments); }
            },
            "getPathLen": {
              "value": function () { return this.get_path_len.apply(this, arguments); }
            },
            "addressType": {
              "get": function () { return this.address_type; },
              "set": function (value) { this.address_type = value; }
            },
            "pathAsArray": {
              "get": function () { return this.path_as_array; },
              "set": function (value) { this.path_as_array = value; }
            }
          },
          "static": {
            "abstractNamesSupported": {
              "value": function () { return this.abstract_names_supported.apply(this, arguments); }
            }
          }
        },
        "Vfs": {
          "prototype": {
            "getFileForPath": {
              "value": function () { return this.get_file_for_path.apply(this, arguments); }
            },
            "getFileForUri": {
              "value": function () { return this.get_file_for_uri.apply(this, arguments); }
            },
            "getSupportedUriSchemes": {
              "value": function () { return this.get_supported_uri_schemes.apply(this, arguments); }
            },
            "isActive": {
              "value": function () { return this.is_active.apply(this, arguments); }
            },
            "parseName": {
              "value": function () { return this.parse_name.apply(this, arguments); }
            }
          },
          "static": {
            "getDefault": {
              "value": function () { return this.get_default.apply(this, arguments); }
            },
            "getLocal": {
              "value": function () { return this.get_local.apply(this, arguments); }
            }
          }
        },
        "VolumeMonitor": {
          "prototype": {
            "getConnectedDrives": {
              "value": function () { return this.get_connected_drives.apply(this, arguments); }
            },
            "getMountForUuid": {
              "value": function () { return this.get_mount_for_uuid.apply(this, arguments); }
            },
            "getMounts": {
              "value": function () { return this.get_mounts.apply(this, arguments); }
            },
            "getVolumeForUuid": {
              "value": function () { return this.get_volume_for_uuid.apply(this, arguments); }
            },
            "getVolumes": {
              "value": function () { return this.get_volumes.apply(this, arguments); }
            }
          },
          "static": {
            "adoptOrphanMount": {
              "value": function () { return this.adopt_orphan_mount.apply(this, arguments); }
            }
          }
        },
        "ZlibCompressor": {
          "prototype": {
            "getFileInfo": {
              "value": function () { return this.get_file_info.apply(this, arguments); }
            },
            "setFileInfo": {
              "value": function () { return this.set_file_info.apply(this, arguments); }
            },
            "fileInfo": {
              "get": function () { return this.file_info; },
              "set": function (value) { this.file_info = value; }
            }
          },
          "static": {}
        },
        "ZlibDecompressor": {
          "prototype": {
            "getFileInfo": {
              "value": function () { return this.get_file_info.apply(this, arguments); }
            },
            "fileInfo": {
              "get": function () { return this.file_info; },
              "set": function (value) { this.file_info = value; }
            }
          },
          "static": {}
        }
      },
      "static": {
        "actionNameIsValid": {
          "value": function () { return this.action_name_is_valid.apply(this, arguments); }
        },
        "actionParseDetailedName": {
          "value": function () { return this.action_parse_detailed_name.apply(this, arguments); }
        },
        "actionPrintDetailedName": {
          "value": function () { return this.action_print_detailed_name.apply(this, arguments); }
        },
        "appInfoCreateFromCommandline": {
          "value": function () { return this.app_info_create_from_commandline.apply(this, arguments); }
        },
        "appInfoGetAll": {
          "value": function () { return this.app_info_get_all.apply(this, arguments); }
        },
        "appInfoGetAllForType": {
          "value": function () { return this.app_info_get_all_for_type.apply(this, arguments); }
        },
        "appInfoGetDefaultForType": {
          "value": function () { return this.app_info_get_default_for_type.apply(this, arguments); }
        },
        "appInfoGetDefaultForUriScheme": {
          "value": function () { return this.app_info_get_default_for_uri_scheme.apply(this, arguments); }
        },
        "appInfoGetFallbackForType": {
          "value": function () { return this.app_info_get_fallback_for_type.apply(this, arguments); }
        },
        "appInfoGetRecommendedForType": {
          "value": function () { return this.app_info_get_recommended_for_type.apply(this, arguments); }
        },
        "appInfoLaunchDefaultForUri": {
          "value": function () { return this.app_info_launch_default_for_uri.apply(this, arguments); }
        },
        "appInfoResetTypeAssociations": {
          "value": function () { return this.app_info_reset_type_associations.apply(this, arguments); }
        },
        "asyncInitableNewvAsync": {
          "value": function () { return this.async_initable_newv_async.apply(this, arguments); }
        },
        "busGet": {
          "value": function () { return this.bus_get.apply(this, arguments); }
        },
        "busGetFinish": {
          "value": function () { return this.bus_get_finish.apply(this, arguments); }
        },
        "busGetSync": {
          "value": function () { return this.bus_get_sync.apply(this, arguments); }
        },
        "busOwnName": {
          "value": function () { return this.bus_own_name.apply(this, arguments); }
        },
        "busOwnNameOnConnection": {
          "value": function () { return this.bus_own_name_on_connection.apply(this, arguments); }
        },
        "busOwnNameOnConnectionWithClosures": {
          "value": function () { return this.bus_own_name_on_connection_with_closures.apply(this, arguments); }
        },
        "busOwnNameWithClosures": {
          "value": function () { return this.bus_own_name_with_closures.apply(this, arguments); }
        },
        "busUnownName": {
          "value": function () { return this.bus_unown_name.apply(this, arguments); }
        },
        "busUnwatchName": {
          "value": function () { return this.bus_unwatch_name.apply(this, arguments); }
        },
        "busWatchName": {
          "value": function () { return this.bus_watch_name.apply(this, arguments); }
        },
        "busWatchNameOnConnection": {
          "value": function () { return this.bus_watch_name_on_connection.apply(this, arguments); }
        },
        "busWatchNameOnConnectionWithClosures": {
          "value": function () { return this.bus_watch_name_on_connection_with_closures.apply(this, arguments); }
        },
        "busWatchNameWithClosures": {
          "value": function () { return this.bus_watch_name_with_closures.apply(this, arguments); }
        },
        "contentTypeCanBeExecutable": {
          "value": function () { return this.content_type_can_be_executable.apply(this, arguments); }
        },
        "contentTypeEquals": {
          "value": function () { return this.content_type_equals.apply(this, arguments); }
        },
        "contentTypeFromMimeType": {
          "value": function () { return this.content_type_from_mime_type.apply(this, arguments); }
        },
        "contentTypeGetDescription": {
          "value": function () { return this.content_type_get_description.apply(this, arguments); }
        },
        "contentTypeGetGenericIconName": {
          "value": function () { return this.content_type_get_generic_icon_name.apply(this, arguments); }
        },
        "contentTypeGetIcon": {
          "value": function () { return this.content_type_get_icon.apply(this, arguments); }
        },
        "contentTypeGetMimeType": {
          "value": function () { return this.content_type_get_mime_type.apply(this, arguments); }
        },
        "contentTypeGetSymbolicIcon": {
          "value": function () { return this.content_type_get_symbolic_icon.apply(this, arguments); }
        },
        "contentTypeGuess": {
          "value": function () { return this.content_type_guess.apply(this, arguments); }
        },
        "contentTypeGuessForTree": {
          "value": function () { return this.content_type_guess_for_tree.apply(this, arguments); }
        },
        "contentTypeIsA": {
          "value": function () { return this.content_type_is_a.apply(this, arguments); }
        },
        "contentTypeIsUnknown": {
          "value": function () { return this.content_type_is_unknown.apply(this, arguments); }
        },
        "contentTypesGetRegistered": {
          "value": function () { return this.content_types_get_registered.apply(this, arguments); }
        },
        "dbusAddressEscapeValue": {
          "value": function () { return this.dbus_address_escape_value.apply(this, arguments); }
        },
        "dbusAddressGetForBusSync": {
          "value": function () { return this.dbus_address_get_for_bus_sync.apply(this, arguments); }
        },
        "dbusAddressGetStream": {
          "value": function () { return this.dbus_address_get_stream.apply(this, arguments); }
        },
        "dbusAddressGetStreamFinish": {
          "value": function () { return this.dbus_address_get_stream_finish.apply(this, arguments); }
        },
        "dbusAddressGetStreamSync": {
          "value": function () { return this.dbus_address_get_stream_sync.apply(this, arguments); }
        },
        "dbusAnnotationInfoLookup": {
          "value": function () { return this.dbus_annotation_info_lookup.apply(this, arguments); }
        },
        "dbusErrorEncodeGerror": {
          "value": function () { return this.dbus_error_encode_gerror.apply(this, arguments); }
        },
        "dbusErrorGetRemoteError": {
          "value": function () { return this.dbus_error_get_remote_error.apply(this, arguments); }
        },
        "dbusErrorIsRemoteError": {
          "value": function () { return this.dbus_error_is_remote_error.apply(this, arguments); }
        },
        "dbusErrorNewForDbusError": {
          "value": function () { return this.dbus_error_new_for_dbus_error.apply(this, arguments); }
        },
        "dbusErrorQuark": {
          "value": function () { return this.dbus_error_quark.apply(this, arguments); }
        },
        "dbusErrorRegisterError": {
          "value": function () { return this.dbus_error_register_error.apply(this, arguments); }
        },
        "dbusErrorRegisterErrorDomain": {
          "value": function () { return this.dbus_error_register_error_domain.apply(this, arguments); }
        },
        "dbusErrorStripRemoteError": {
          "value": function () { return this.dbus_error_strip_remote_error.apply(this, arguments); }
        },
        "dbusErrorUnregisterError": {
          "value": function () { return this.dbus_error_unregister_error.apply(this, arguments); }
        },
        "dbusGenerateGuid": {
          "value": function () { return this.dbus_generate_guid.apply(this, arguments); }
        },
        "dbusGvalueToGvariant": {
          "value": function () { return this.dbus_gvalue_to_gvariant.apply(this, arguments); }
        },
        "dbusGvariantToGvalue": {
          "value": function () { return this.dbus_gvariant_to_gvalue.apply(this, arguments); }
        },
        "dbusIsAddress": {
          "value": function () { return this.dbus_is_address.apply(this, arguments); }
        },
        "dbusIsGuid": {
          "value": function () { return this.dbus_is_guid.apply(this, arguments); }
        },
        "dbusIsInterfaceName": {
          "value": function () { return this.dbus_is_interface_name.apply(this, arguments); }
        },
        "dbusIsMemberName": {
          "value": function () { return this.dbus_is_member_name.apply(this, arguments); }
        },
        "dbusIsName": {
          "value": function () { return this.dbus_is_name.apply(this, arguments); }
        },
        "dbusIsSupportedAddress": {
          "value": function () { return this.dbus_is_supported_address.apply(this, arguments); }
        },
        "dbusIsUniqueName": {
          "value": function () { return this.dbus_is_unique_name.apply(this, arguments); }
        },
        "fileNewForCommandlineArg": {
          "value": function () { return this.file_new_for_commandline_arg.apply(this, arguments); }
        },
        "fileNewForCommandlineArgAndCwd": {
          "value": function () { return this.file_new_for_commandline_arg_and_cwd.apply(this, arguments); }
        },
        "fileNewForPath": {
          "value": function () { return this.file_new_for_path.apply(this, arguments); }
        },
        "fileNewForUri": {
          "value": function () { return this.file_new_for_uri.apply(this, arguments); }
        },
        "fileNewTmp": {
          "value": function () { return this.file_new_tmp.apply(this, arguments); }
        },
        "fileParseName": {
          "value": function () { return this.file_parse_name.apply(this, arguments); }
        },
        "iconDeserialize": {
          "value": function () { return this.icon_deserialize.apply(this, arguments); }
        },
        "iconHash": {
          "value": function () { return this.icon_hash.apply(this, arguments); }
        },
        "iconNewForString": {
          "value": function () { return this.icon_new_for_string.apply(this, arguments); }
        },
        "initableNewv": {
          "value": function () { return this.initable_newv.apply(this, arguments); }
        },
        "ioErrorFromErrno": {
          "value": function () { return this.io_error_from_errno.apply(this, arguments); }
        },
        "ioErrorQuark": {
          "value": function () { return this.io_error_quark.apply(this, arguments); }
        },
        "ioExtensionPointImplement": {
          "value": function () { return this.io_extension_point_implement.apply(this, arguments); }
        },
        "ioExtensionPointLookup": {
          "value": function () { return this.io_extension_point_lookup.apply(this, arguments); }
        },
        "ioExtensionPointRegister": {
          "value": function () { return this.io_extension_point_register.apply(this, arguments); }
        },
        "ioModulesLoadAllInDirectory": {
          "value": function () { return this.io_modules_load_all_in_directory.apply(this, arguments); }
        },
        "ioModulesLoadAllInDirectoryWithScope": {
          "value": function () { return this.io_modules_load_all_in_directory_with_scope.apply(this, arguments); }
        },
        "ioModulesScanAllInDirectory": {
          "value": function () { return this.io_modules_scan_all_in_directory.apply(this, arguments); }
        },
        "ioModulesScanAllInDirectoryWithScope": {
          "value": function () { return this.io_modules_scan_all_in_directory_with_scope.apply(this, arguments); }
        },
        "ioSchedulerCancelAllJobs": {
          "value": function () { return this.io_scheduler_cancel_all_jobs.apply(this, arguments); }
        },
        "ioSchedulerPushJob": {
          "value": function () { return this.io_scheduler_push_job.apply(this, arguments); }
        },
        "networkMonitorGetDefault": {
          "value": function () { return this.network_monitor_get_default.apply(this, arguments); }
        },
        "networkingInit": {
          "value": function () { return this.networking_init.apply(this, arguments); }
        },
        "pollableSourceNew": {
          "value": function () { return this.pollable_source_new.apply(this, arguments); }
        },
        "pollableSourceNewFull": {
          "value": function () { return this.pollable_source_new_full.apply(this, arguments); }
        },
        "pollableStreamRead": {
          "value": function () { return this.pollable_stream_read.apply(this, arguments); }
        },
        "pollableStreamWrite": {
          "value": function () { return this.pollable_stream_write.apply(this, arguments); }
        },
        "pollableStreamWriteAll": {
          "value": function () { return this.pollable_stream_write_all.apply(this, arguments); }
        },
        "proxyGetDefaultForProtocol": {
          "value": function () { return this.proxy_get_default_for_protocol.apply(this, arguments); }
        },
        "proxyResolverGetDefault": {
          "value": function () { return this.proxy_resolver_get_default.apply(this, arguments); }
        },
        "resolverErrorQuark": {
          "value": function () { return this.resolver_error_quark.apply(this, arguments); }
        },
        "resourceErrorQuark": {
          "value": function () { return this.resource_error_quark.apply(this, arguments); }
        },
        "resourceLoad": {
          "value": function () { return this.resource_load.apply(this, arguments); }
        },
        "resourcesEnumerateChildren": {
          "value": function () { return this.resources_enumerate_children.apply(this, arguments); }
        },
        "resourcesGetInfo": {
          "value": function () { return this.resources_get_info.apply(this, arguments); }
        },
        "resourcesLookupData": {
          "value": function () { return this.resources_lookup_data.apply(this, arguments); }
        },
        "resourcesOpenStream": {
          "value": function () { return this.resources_open_stream.apply(this, arguments); }
        },
        "resourcesRegister": {
          "value": function () { return this.resources_register.apply(this, arguments); }
        },
        "resourcesUnregister": {
          "value": function () { return this.resources_unregister.apply(this, arguments); }
        },
        "settingsSchemaSourceGetDefault": {
          "value": function () { return this.settings_schema_source_get_default.apply(this, arguments); }
        },
        "simpleAsyncReportErrorInIdle": {
          "value": function () { return this.simple_async_report_error_in_idle.apply(this, arguments); }
        },
        "simpleAsyncReportGerrorInIdle": {
          "value": function () { return this.simple_async_report_gerror_in_idle.apply(this, arguments); }
        },
        "simpleAsyncReportTakeGerrorInIdle": {
          "value": function () { return this.simple_async_report_take_gerror_in_idle.apply(this, arguments); }
        },
        "srvTargetListSort": {
          "value": function () { return this.srv_target_list_sort.apply(this, arguments); }
        },
        "tlsBackendGetDefault": {
          "value": function () { return this.tls_backend_get_default.apply(this, arguments); }
        },
        "tlsClientConnectionNew": {
          "value": function () { return this.tls_client_connection_new.apply(this, arguments); }
        },
        "tlsErrorQuark": {
          "value": function () { return this.tls_error_quark.apply(this, arguments); }
        },
        "tlsFileDatabaseNew": {
          "value": function () { return this.tls_file_database_new.apply(this, arguments); }
        },
        "tlsServerConnectionNew": {
          "value": function () { return this.tls_server_connection_new.apply(this, arguments); }
        },
        "unixIsMountPathSystemInternal": {
          "value": function () { return this.unix_is_mount_path_system_internal.apply(this, arguments); }
        },
        "unixMountAt": {
          "value": function () { return this.unix_mount_at.apply(this, arguments); }
        },
        "unixMountCompare": {
          "value": function () { return this.unix_mount_compare.apply(this, arguments); }
        },
        "unixMountFree": {
          "value": function () { return this.unix_mount_free.apply(this, arguments); }
        },
        "unixMountGetDevicePath": {
          "value": function () { return this.unix_mount_get_device_path.apply(this, arguments); }
        },
        "unixMountGetFsType": {
          "value": function () { return this.unix_mount_get_fs_type.apply(this, arguments); }
        },
        "unixMountGetMountPath": {
          "value": function () { return this.unix_mount_get_mount_path.apply(this, arguments); }
        },
        "unixMountGuessCanEject": {
          "value": function () { return this.unix_mount_guess_can_eject.apply(this, arguments); }
        },
        "unixMountGuessIcon": {
          "value": function () { return this.unix_mount_guess_icon.apply(this, arguments); }
        },
        "unixMountGuessName": {
          "value": function () { return this.unix_mount_guess_name.apply(this, arguments); }
        },
        "unixMountGuessShouldDisplay": {
          "value": function () { return this.unix_mount_guess_should_display.apply(this, arguments); }
        },
        "unixMountGuessSymbolicIcon": {
          "value": function () { return this.unix_mount_guess_symbolic_icon.apply(this, arguments); }
        },
        "unixMountIsReadonly": {
          "value": function () { return this.unix_mount_is_readonly.apply(this, arguments); }
        },
        "unixMountIsSystemInternal": {
          "value": function () { return this.unix_mount_is_system_internal.apply(this, arguments); }
        },
        "unixMountPointsChangedSince": {
          "value": function () { return this.unix_mount_points_changed_since.apply(this, arguments); }
        },
        "unixMountPointsGet": {
          "value": function () { return this.unix_mount_points_get.apply(this, arguments); }
        },
        "unixMountsChangedSince": {
          "value": function () { return this.unix_mounts_changed_since.apply(this, arguments); }
        },
        "unixMountsGet": {
          "value": function () { return this.unix_mounts_get.apply(this, arguments); }
        }
      }
    },
    "Gst": {
      "class": {
        "Allocator": {
          "prototype": {
            "setDefault": {
              "value": function () { return this.set_default.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Bin": {
          "prototype": {
            "addMany": {
              "value": function () { return this.add_many.apply(this, arguments); }
            },
            "findUnlinkedPad": {
              "value": function () { return this.find_unlinked_pad.apply(this, arguments); }
            },
            "getByInterface": {
              "value": function () { return this.get_by_interface.apply(this, arguments); }
            },
            "getByName": {
              "value": function () { return this.get_by_name.apply(this, arguments); }
            },
            "getByNameRecurseUp": {
              "value": function () { return this.get_by_name_recurse_up.apply(this, arguments); }
            },
            "iterateAllByInterface": {
              "value": function () { return this.iterate_all_by_interface.apply(this, arguments); }
            },
            "iterateElements": {
              "value": function () { return this.iterate_elements.apply(this, arguments); }
            },
            "iterateRecurse": {
              "value": function () { return this.iterate_recurse.apply(this, arguments); }
            },
            "iterateSinks": {
              "value": function () { return this.iterate_sinks.apply(this, arguments); }
            },
            "iterateSorted": {
              "value": function () { return this.iterate_sorted.apply(this, arguments); }
            },
            "iterateSources": {
              "value": function () { return this.iterate_sources.apply(this, arguments); }
            },
            "recalculateLatency": {
              "value": function () { return this.recalculate_latency.apply(this, arguments); }
            },
            "removeMany": {
              "value": function () { return this.remove_many.apply(this, arguments); }
            },
            "syncChildrenStates": {
              "value": function () { return this.sync_children_states.apply(this, arguments); }
            },
            "asyncHandling": {
              "get": function () { return this.async_handling; },
              "set": function (value) { this.async_handling = value; }
            },
            "messageForward": {
              "get": function () { return this.message_forward; },
              "set": function (value) { this.message_forward = value; }
            }
          },
          "static": {}
        },
        "Bitmask": {
          "prototype": {},
          "static": {}
        },
        "BufferPool": {
          "prototype": {
            "acquireBuffer": {
              "value": function () { return this.acquire_buffer.apply(this, arguments); }
            },
            "getConfig": {
              "value": function () { return this.get_config.apply(this, arguments); }
            },
            "getOptions": {
              "value": function () { return this.get_options.apply(this, arguments); }
            },
            "hasOption": {
              "value": function () { return this.has_option.apply(this, arguments); }
            },
            "isActive": {
              "value": function () { return this.is_active.apply(this, arguments); }
            },
            "releaseBuffer": {
              "value": function () { return this.release_buffer.apply(this, arguments); }
            },
            "setActive": {
              "value": function () { return this.set_active.apply(this, arguments); }
            },
            "setConfig": {
              "value": function () { return this.set_config.apply(this, arguments); }
            },
            "setFlushing": {
              "value": function () { return this.set_flushing.apply(this, arguments); }
            }
          },
          "static": {
            "configAddOption": {
              "value": function () { return this.config_add_option.apply(this, arguments); }
            },
            "configGetAllocator": {
              "value": function () { return this.config_get_allocator.apply(this, arguments); }
            },
            "configGetOption": {
              "value": function () { return this.config_get_option.apply(this, arguments); }
            },
            "configGetParams": {
              "value": function () { return this.config_get_params.apply(this, arguments); }
            },
            "configHasOption": {
              "value": function () { return this.config_has_option.apply(this, arguments); }
            },
            "configNOptions": {
              "value": function () { return this.config_n_options.apply(this, arguments); }
            },
            "configSetAllocator": {
              "value": function () { return this.config_set_allocator.apply(this, arguments); }
            },
            "configSetParams": {
              "value": function () { return this.config_set_params.apply(this, arguments); }
            },
            "configValidateParams": {
              "value": function () { return this.config_validate_params.apply(this, arguments); }
            }
          }
        },
        "Bus": {
          "prototype": {
            "addSignalWatch": {
              "value": function () { return this.add_signal_watch.apply(this, arguments); }
            },
            "addSignalWatchFull": {
              "value": function () { return this.add_signal_watch_full.apply(this, arguments); }
            },
            "addWatch": {
              "value": function () { return this.add_watch.apply(this, arguments); }
            },
            "addWatchFull": {
              "value": function () { return this.add_watch_full.apply(this, arguments); }
            },
            "asyncSignalFunc": {
              "value": function () { return this.async_signal_func.apply(this, arguments); }
            },
            "createWatch": {
              "value": function () { return this.create_watch.apply(this, arguments); }
            },
            "disableSyncMessageEmission": {
              "value": function () { return this.disable_sync_message_emission.apply(this, arguments); }
            },
            "enableSyncMessageEmission": {
              "value": function () { return this.enable_sync_message_emission.apply(this, arguments); }
            },
            "havePending": {
              "value": function () { return this.have_pending.apply(this, arguments); }
            },
            "popFiltered": {
              "value": function () { return this.pop_filtered.apply(this, arguments); }
            },
            "removeSignalWatch": {
              "value": function () { return this.remove_signal_watch.apply(this, arguments); }
            },
            "removeWatch": {
              "value": function () { return this.remove_watch.apply(this, arguments); }
            },
            "setFlushing": {
              "value": function () { return this.set_flushing.apply(this, arguments); }
            },
            "setSyncHandler": {
              "value": function () { return this.set_sync_handler.apply(this, arguments); }
            },
            "syncSignalHandler": {
              "value": function () { return this.sync_signal_handler.apply(this, arguments); }
            },
            "timedPop": {
              "value": function () { return this.timed_pop.apply(this, arguments); }
            },
            "timedPopFiltered": {
              "value": function () { return this.timed_pop_filtered.apply(this, arguments); }
            },
            "enableAsync": {
              "get": function () { return this.enable_async; },
              "set": function (value) { this.enable_async = value; }
            }
          },
          "static": {}
        },
        "Clock": {
          "prototype": {
            "addObservation": {
              "value": function () { return this.add_observation.apply(this, arguments); }
            },
            "addObservationUnapplied": {
              "value": function () { return this.add_observation_unapplied.apply(this, arguments); }
            },
            "adjustUnlocked": {
              "value": function () { return this.adjust_unlocked.apply(this, arguments); }
            },
            "adjustWithCalibration": {
              "value": function () { return this.adjust_with_calibration.apply(this, arguments); }
            },
            "getCalibration": {
              "value": function () { return this.get_calibration.apply(this, arguments); }
            },
            "getInternalTime": {
              "value": function () { return this.get_internal_time.apply(this, arguments); }
            },
            "getMaster": {
              "value": function () { return this.get_master.apply(this, arguments); }
            },
            "getResolution": {
              "value": function () { return this.get_resolution.apply(this, arguments); }
            },
            "getTime": {
              "value": function () { return this.get_time.apply(this, arguments); }
            },
            "getTimeout": {
              "value": function () { return this.get_timeout.apply(this, arguments); }
            },
            "isSynced": {
              "value": function () { return this.is_synced.apply(this, arguments); }
            },
            "newPeriodicId": {
              "value": function () { return this.new_periodic_id.apply(this, arguments); }
            },
            "newSingleShotId": {
              "value": function () { return this.new_single_shot_id.apply(this, arguments); }
            },
            "periodicIdReinit": {
              "value": function () { return this.periodic_id_reinit.apply(this, arguments); }
            },
            "setCalibration": {
              "value": function () { return this.set_calibration.apply(this, arguments); }
            },
            "setMaster": {
              "value": function () { return this.set_master.apply(this, arguments); }
            },
            "setResolution": {
              "value": function () { return this.set_resolution.apply(this, arguments); }
            },
            "setSynced": {
              "value": function () { return this.set_synced.apply(this, arguments); }
            },
            "setTimeout": {
              "value": function () { return this.set_timeout.apply(this, arguments); }
            },
            "singleShotIdReinit": {
              "value": function () { return this.single_shot_id_reinit.apply(this, arguments); }
            },
            "unadjustUnlocked": {
              "value": function () { return this.unadjust_unlocked.apply(this, arguments); }
            },
            "waitForSync": {
              "value": function () { return this.wait_for_sync.apply(this, arguments); }
            },
            "windowSize": {
              "get": function () { return this.window_size; },
              "set": function (value) { this.window_size = value; }
            },
            "windowThreshold": {
              "get": function () { return this.window_threshold; },
              "set": function (value) { this.window_threshold = value; }
            }
          },
          "static": {
            "idCompareFunc": {
              "value": function () { return this.id_compare_func.apply(this, arguments); }
            },
            "idGetTime": {
              "value": function () { return this.id_get_time.apply(this, arguments); }
            },
            "idRef": {
              "value": function () { return this.id_ref.apply(this, arguments); }
            },
            "idUnref": {
              "value": function () { return this.id_unref.apply(this, arguments); }
            },
            "idUnschedule": {
              "value": function () { return this.id_unschedule.apply(this, arguments); }
            },
            "idWait": {
              "value": function () { return this.id_wait.apply(this, arguments); }
            },
            "idWaitAsync": {
              "value": function () { return this.id_wait_async.apply(this, arguments); }
            }
          }
        },
        "ControlBinding": {
          "prototype": {
            "getGValueArray": {
              "value": function () { return this.get_g_value_array.apply(this, arguments); }
            },
            "getValue": {
              "value": function () { return this.get_value.apply(this, arguments); }
            },
            "getValueArray": {
              "value": function () { return this.get_value_array.apply(this, arguments); }
            },
            "isDisabled": {
              "value": function () { return this.is_disabled.apply(this, arguments); }
            },
            "setDisabled": {
              "value": function () { return this.set_disabled.apply(this, arguments); }
            },
            "syncValues": {
              "value": function () { return this.sync_values.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "ControlSource": {
          "prototype": {
            "controlSourceGetValue": {
              "value": function () { return this.control_source_get_value.apply(this, arguments); }
            },
            "controlSourceGetValueArray": {
              "value": function () { return this.control_source_get_value_array.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Device": {
          "prototype": {
            "createElement": {
              "value": function () { return this.create_element.apply(this, arguments); }
            },
            "getCaps": {
              "value": function () { return this.get_caps.apply(this, arguments); }
            },
            "getDeviceClass": {
              "value": function () { return this.get_device_class.apply(this, arguments); }
            },
            "getDisplayName": {
              "value": function () { return this.get_display_name.apply(this, arguments); }
            },
            "getProperties": {
              "value": function () { return this.get_properties.apply(this, arguments); }
            },
            "hasClasses": {
              "value": function () { return this.has_classes.apply(this, arguments); }
            },
            "hasClassesv": {
              "value": function () { return this.has_classesv.apply(this, arguments); }
            },
            "reconfigureElement": {
              "value": function () { return this.reconfigure_element.apply(this, arguments); }
            },
            "deviceClass": {
              "get": function () { return this.device_class; },
              "set": function (value) { this.device_class = value; }
            },
            "displayName": {
              "get": function () { return this.display_name; },
              "set": function (value) { this.display_name = value; }
            }
          },
          "static": {}
        },
        "DeviceMonitor": {
          "prototype": {
            "addFilter": {
              "value": function () { return this.add_filter.apply(this, arguments); }
            },
            "getBus": {
              "value": function () { return this.get_bus.apply(this, arguments); }
            },
            "getDevices": {
              "value": function () { return this.get_devices.apply(this, arguments); }
            },
            "getProviders": {
              "value": function () { return this.get_providers.apply(this, arguments); }
            },
            "getShowAllDevices": {
              "value": function () { return this.get_show_all_devices.apply(this, arguments); }
            },
            "removeFilter": {
              "value": function () { return this.remove_filter.apply(this, arguments); }
            },
            "setShowAllDevices": {
              "value": function () { return this.set_show_all_devices.apply(this, arguments); }
            },
            "showAll": {
              "get": function () { return this.show_all; },
              "set": function (value) { this.show_all = value; }
            }
          },
          "static": {}
        },
        "DeviceProvider": {
          "prototype": {
            "canMonitor": {
              "value": function () { return this.can_monitor.apply(this, arguments); }
            },
            "deviceAdd": {
              "value": function () { return this.device_add.apply(this, arguments); }
            },
            "deviceRemove": {
              "value": function () { return this.device_remove.apply(this, arguments); }
            },
            "getBus": {
              "value": function () { return this.get_bus.apply(this, arguments); }
            },
            "getDevices": {
              "value": function () { return this.get_devices.apply(this, arguments); }
            },
            "getFactory": {
              "value": function () { return this.get_factory.apply(this, arguments); }
            },
            "getHiddenProviders": {
              "value": function () { return this.get_hidden_providers.apply(this, arguments); }
            },
            "hideProvider": {
              "value": function () { return this.hide_provider.apply(this, arguments); }
            },
            "unhideProvider": {
              "value": function () { return this.unhide_provider.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DeviceProviderFactory": {
          "prototype": {
            "getDeviceProviderType": {
              "value": function () { return this.get_device_provider_type.apply(this, arguments); }
            },
            "getMetadata": {
              "value": function () { return this.get_metadata.apply(this, arguments); }
            },
            "getMetadataKeys": {
              "value": function () { return this.get_metadata_keys.apply(this, arguments); }
            },
            "hasClasses": {
              "value": function () { return this.has_classes.apply(this, arguments); }
            },
            "hasClassesv": {
              "value": function () { return this.has_classesv.apply(this, arguments); }
            }
          },
          "static": {
            "getByName": {
              "value": function () { return this.get_by_name.apply(this, arguments); }
            },
            "listGetDeviceProviders": {
              "value": function () { return this.list_get_device_providers.apply(this, arguments); }
            }
          }
        },
        "DoubleRange": {
          "prototype": {},
          "static": {}
        },
        "Element": {
          "prototype": {
            "abortState": {
              "value": function () { return this.abort_state.apply(this, arguments); }
            },
            "addPad": {
              "value": function () { return this.add_pad.apply(this, arguments); }
            },
            "changeState": {
              "value": function () { return this.change_state.apply(this, arguments); }
            },
            "continueState": {
              "value": function () { return this.continue_state.apply(this, arguments); }
            },
            "createAllPads": {
              "value": function () { return this.create_all_pads.apply(this, arguments); }
            },
            "getBaseTime": {
              "value": function () { return this.get_base_time.apply(this, arguments); }
            },
            "getBus": {
              "value": function () { return this.get_bus.apply(this, arguments); }
            },
            "getClock": {
              "value": function () { return this.get_clock.apply(this, arguments); }
            },
            "getCompatiblePad": {
              "value": function () { return this.get_compatible_pad.apply(this, arguments); }
            },
            "getCompatiblePadTemplate": {
              "value": function () { return this.get_compatible_pad_template.apply(this, arguments); }
            },
            "getFactory": {
              "value": function () { return this.get_factory.apply(this, arguments); }
            },
            "getRequestPad": {
              "value": function () { return this.get_request_pad.apply(this, arguments); }
            },
            "getStartTime": {
              "value": function () { return this.get_start_time.apply(this, arguments); }
            },
            "getState": {
              "value": function () { return this.get_state.apply(this, arguments); }
            },
            "getStaticPad": {
              "value": function () { return this.get_static_pad.apply(this, arguments); }
            },
            "isLockedState": {
              "value": function () { return this.is_locked_state.apply(this, arguments); }
            },
            "iteratePads": {
              "value": function () { return this.iterate_pads.apply(this, arguments); }
            },
            "iterateSinkPads": {
              "value": function () { return this.iterate_sink_pads.apply(this, arguments); }
            },
            "iterateSrcPads": {
              "value": function () { return this.iterate_src_pads.apply(this, arguments); }
            },
            "linkFiltered": {
              "value": function () { return this.link_filtered.apply(this, arguments); }
            },
            "linkMany": {
              "value": function () { return this.link_many.apply(this, arguments); }
            },
            "linkPads": {
              "value": function () { return this.link_pads.apply(this, arguments); }
            },
            "linkPadsFiltered": {
              "value": function () { return this.link_pads_filtered.apply(this, arguments); }
            },
            "linkPadsFull": {
              "value": function () { return this.link_pads_full.apply(this, arguments); }
            },
            "lostState": {
              "value": function () { return this.lost_state.apply(this, arguments); }
            },
            "messageFull": {
              "value": function () { return this.message_full.apply(this, arguments); }
            },
            "noMorePads": {
              "value": function () { return this.no_more_pads.apply(this, arguments); }
            },
            "postMessage": {
              "value": function () { return this.post_message.apply(this, arguments); }
            },
            "provideClock": {
              "value": function () { return this.provide_clock.apply(this, arguments); }
            },
            "queryConvert": {
              "value": function () { return this.query_convert.apply(this, arguments); }
            },
            "queryDuration": {
              "value": function () { return this.query_duration.apply(this, arguments); }
            },
            "queryPosition": {
              "value": function () { return this.query_position.apply(this, arguments); }
            },
            "releaseRequestPad": {
              "value": function () { return this.release_request_pad.apply(this, arguments); }
            },
            "removePad": {
              "value": function () { return this.remove_pad.apply(this, arguments); }
            },
            "requestPad": {
              "value": function () { return this.request_pad.apply(this, arguments); }
            },
            "seekSimple": {
              "value": function () { return this.seek_simple.apply(this, arguments); }
            },
            "sendEvent": {
              "value": function () { return this.send_event.apply(this, arguments); }
            },
            "setBaseTime": {
              "value": function () { return this.set_base_time.apply(this, arguments); }
            },
            "setBus": {
              "value": function () { return this.set_bus.apply(this, arguments); }
            },
            "setClock": {
              "value": function () { return this.set_clock.apply(this, arguments); }
            },
            "setContext": {
              "value": function () { return this.set_context.apply(this, arguments); }
            },
            "setLockedState": {
              "value": function () { return this.set_locked_state.apply(this, arguments); }
            },
            "setStartTime": {
              "value": function () { return this.set_start_time.apply(this, arguments); }
            },
            "setState": {
              "value": function () { return this.set_state.apply(this, arguments); }
            },
            "syncStateWithParent": {
              "value": function () { return this.sync_state_with_parent.apply(this, arguments); }
            },
            "unlinkMany": {
              "value": function () { return this.unlink_many.apply(this, arguments); }
            },
            "unlinkPads": {
              "value": function () { return this.unlink_pads.apply(this, arguments); }
            }
          },
          "static": {
            "makeFromUri": {
              "value": function () { return this.make_from_uri.apply(this, arguments); }
            },
            "stateChangeReturnGetName": {
              "value": function () { return this.state_change_return_get_name.apply(this, arguments); }
            },
            "stateGetName": {
              "value": function () { return this.state_get_name.apply(this, arguments); }
            }
          }
        },
        "ElementFactory": {
          "prototype": {
            "canSinkAllCaps": {
              "value": function () { return this.can_sink_all_caps.apply(this, arguments); }
            },
            "canSinkAnyCaps": {
              "value": function () { return this.can_sink_any_caps.apply(this, arguments); }
            },
            "canSrcAllCaps": {
              "value": function () { return this.can_src_all_caps.apply(this, arguments); }
            },
            "canSrcAnyCaps": {
              "value": function () { return this.can_src_any_caps.apply(this, arguments); }
            },
            "getElementType": {
              "value": function () { return this.get_element_type.apply(this, arguments); }
            },
            "getMetadata": {
              "value": function () { return this.get_metadata.apply(this, arguments); }
            },
            "getMetadataKeys": {
              "value": function () { return this.get_metadata_keys.apply(this, arguments); }
            },
            "getNumPadTemplates": {
              "value": function () { return this.get_num_pad_templates.apply(this, arguments); }
            },
            "getStaticPadTemplates": {
              "value": function () { return this.get_static_pad_templates.apply(this, arguments); }
            },
            "getUriProtocols": {
              "value": function () { return this.get_uri_protocols.apply(this, arguments); }
            },
            "getUriType": {
              "value": function () { return this.get_uri_type.apply(this, arguments); }
            },
            "hasInterface": {
              "value": function () { return this.has_interface.apply(this, arguments); }
            },
            "listIsType": {
              "value": function () { return this.list_is_type.apply(this, arguments); }
            }
          },
          "static": {
            "listFilter": {
              "value": function () { return this.list_filter.apply(this, arguments); }
            },
            "listGetElements": {
              "value": function () { return this.list_get_elements.apply(this, arguments); }
            }
          }
        },
        "FlagSet": {
          "prototype": {},
          "static": {}
        },
        "Fraction": {
          "prototype": {},
          "static": {}
        },
        "FractionRange": {
          "prototype": {},
          "static": {}
        },
        "GhostPad": {
          "prototype": {
            "getTarget": {
              "value": function () { return this.get_target.apply(this, arguments); }
            },
            "setTarget": {
              "value": function () { return this.set_target.apply(this, arguments); }
            }
          },
          "static": {
            "activateModeDefault": {
              "value": function () { return this.activate_mode_default.apply(this, arguments); }
            },
            "internalActivateModeDefault": {
              "value": function () { return this.internal_activate_mode_default.apply(this, arguments); }
            }
          }
        },
        "Int64Range": {
          "prototype": {},
          "static": {}
        },
        "IntRange": {
          "prototype": {},
          "static": {}
        },
        "Object": {
          "prototype": {
            "addControlBinding": {
              "value": function () { return this.add_control_binding.apply(this, arguments); }
            },
            "defaultError": {
              "value": function () { return this.default_error.apply(this, arguments); }
            },
            "getControlBinding": {
              "value": function () { return this.get_control_binding.apply(this, arguments); }
            },
            "getControlRate": {
              "value": function () { return this.get_control_rate.apply(this, arguments); }
            },
            "getGValueArray": {
              "value": function () { return this.get_g_value_array.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getParent": {
              "value": function () { return this.get_parent.apply(this, arguments); }
            },
            "getPathString": {
              "value": function () { return this.get_path_string.apply(this, arguments); }
            },
            "getValue": {
              "value": function () { return this.get_value.apply(this, arguments); }
            },
            "getValueArray": {
              "value": function () { return this.get_value_array.apply(this, arguments); }
            },
            "hasActiveControlBindings": {
              "value": function () { return this.has_active_control_bindings.apply(this, arguments); }
            },
            "hasAncestor": {
              "value": function () { return this.has_ancestor.apply(this, arguments); }
            },
            "hasAsAncestor": {
              "value": function () { return this.has_as_ancestor.apply(this, arguments); }
            },
            "hasAsParent": {
              "value": function () { return this.has_as_parent.apply(this, arguments); }
            },
            "removeControlBinding": {
              "value": function () { return this.remove_control_binding.apply(this, arguments); }
            },
            "setControlBindingDisabled": {
              "value": function () { return this.set_control_binding_disabled.apply(this, arguments); }
            },
            "setControlBindingsDisabled": {
              "value": function () { return this.set_control_bindings_disabled.apply(this, arguments); }
            },
            "setControlRate": {
              "value": function () { return this.set_control_rate.apply(this, arguments); }
            },
            "setName": {
              "value": function () { return this.set_name.apply(this, arguments); }
            },
            "setParent": {
              "value": function () { return this.set_parent.apply(this, arguments); }
            },
            "suggestNextSync": {
              "value": function () { return this.suggest_next_sync.apply(this, arguments); }
            },
            "syncValues": {
              "value": function () { return this.sync_values.apply(this, arguments); }
            }
          },
          "static": {
            "checkUniqueness": {
              "value": function () { return this.check_uniqueness.apply(this, arguments); }
            },
            "defaultDeepNotify": {
              "value": function () { return this.default_deep_notify.apply(this, arguments); }
            },
            "refSink": {
              "value": function () { return this.ref_sink.apply(this, arguments); }
            }
          }
        },
        "Pad": {
          "prototype": {
            "activateMode": {
              "value": function () { return this.activate_mode.apply(this, arguments); }
            },
            "addProbe": {
              "value": function () { return this.add_probe.apply(this, arguments); }
            },
            "canLink": {
              "value": function () { return this.can_link.apply(this, arguments); }
            },
            "chainList": {
              "value": function () { return this.chain_list.apply(this, arguments); }
            },
            "checkReconfigure": {
              "value": function () { return this.check_reconfigure.apply(this, arguments); }
            },
            "createStreamId": {
              "value": function () { return this.create_stream_id.apply(this, arguments); }
            },
            "createStreamIdPrintf": {
              "value": function () { return this.create_stream_id_printf.apply(this, arguments); }
            },
            "createStreamIdPrintfValist": {
              "value": function () { return this.create_stream_id_printf_valist.apply(this, arguments); }
            },
            "eventDefault": {
              "value": function () { return this.event_default.apply(this, arguments); }
            },
            "getAllowedCaps": {
              "value": function () { return this.get_allowed_caps.apply(this, arguments); }
            },
            "getCurrentCaps": {
              "value": function () { return this.get_current_caps.apply(this, arguments); }
            },
            "getDirection": {
              "value": function () { return this.get_direction.apply(this, arguments); }
            },
            "getElementPrivate": {
              "value": function () { return this.get_element_private.apply(this, arguments); }
            },
            "getLastFlowReturn": {
              "value": function () { return this.get_last_flow_return.apply(this, arguments); }
            },
            "getOffset": {
              "value": function () { return this.get_offset.apply(this, arguments); }
            },
            "getPadTemplate": {
              "value": function () { return this.get_pad_template.apply(this, arguments); }
            },
            "getPadTemplateCaps": {
              "value": function () { return this.get_pad_template_caps.apply(this, arguments); }
            },
            "getParentElement": {
              "value": function () { return this.get_parent_element.apply(this, arguments); }
            },
            "getPeer": {
              "value": function () { return this.get_peer.apply(this, arguments); }
            },
            "getRange": {
              "value": function () { return this.get_range.apply(this, arguments); }
            },
            "getStickyEvent": {
              "value": function () { return this.get_sticky_event.apply(this, arguments); }
            },
            "getStreamId": {
              "value": function () { return this.get_stream_id.apply(this, arguments); }
            },
            "hasCurrentCaps": {
              "value": function () { return this.has_current_caps.apply(this, arguments); }
            },
            "isActive": {
              "value": function () { return this.is_active.apply(this, arguments); }
            },
            "isBlocked": {
              "value": function () { return this.is_blocked.apply(this, arguments); }
            },
            "isBlocking": {
              "value": function () { return this.is_blocking.apply(this, arguments); }
            },
            "isLinked": {
              "value": function () { return this.is_linked.apply(this, arguments); }
            },
            "iterateInternalLinks": {
              "value": function () { return this.iterate_internal_links.apply(this, arguments); }
            },
            "iterateInternalLinksDefault": {
              "value": function () { return this.iterate_internal_links_default.apply(this, arguments); }
            },
            "linkFull": {
              "value": function () { return this.link_full.apply(this, arguments); }
            },
            "markReconfigure": {
              "value": function () { return this.mark_reconfigure.apply(this, arguments); }
            },
            "needsReconfigure": {
              "value": function () { return this.needs_reconfigure.apply(this, arguments); }
            },
            "pauseTask": {
              "value": function () { return this.pause_task.apply(this, arguments); }
            },
            "peerQuery": {
              "value": function () { return this.peer_query.apply(this, arguments); }
            },
            "peerQueryAcceptCaps": {
              "value": function () { return this.peer_query_accept_caps.apply(this, arguments); }
            },
            "peerQueryCaps": {
              "value": function () { return this.peer_query_caps.apply(this, arguments); }
            },
            "peerQueryConvert": {
              "value": function () { return this.peer_query_convert.apply(this, arguments); }
            },
            "peerQueryDuration": {
              "value": function () { return this.peer_query_duration.apply(this, arguments); }
            },
            "peerQueryPosition": {
              "value": function () { return this.peer_query_position.apply(this, arguments); }
            },
            "proxyQueryAcceptCaps": {
              "value": function () { return this.proxy_query_accept_caps.apply(this, arguments); }
            },
            "proxyQueryCaps": {
              "value": function () { return this.proxy_query_caps.apply(this, arguments); }
            },
            "pullRange": {
              "value": function () { return this.pull_range.apply(this, arguments); }
            },
            "pushEvent": {
              "value": function () { return this.push_event.apply(this, arguments); }
            },
            "pushList": {
              "value": function () { return this.push_list.apply(this, arguments); }
            },
            "queryAcceptCaps": {
              "value": function () { return this.query_accept_caps.apply(this, arguments); }
            },
            "queryCaps": {
              "value": function () { return this.query_caps.apply(this, arguments); }
            },
            "queryConvert": {
              "value": function () { return this.query_convert.apply(this, arguments); }
            },
            "queryDefault": {
              "value": function () { return this.query_default.apply(this, arguments); }
            },
            "queryDuration": {
              "value": function () { return this.query_duration.apply(this, arguments); }
            },
            "queryPosition": {
              "value": function () { return this.query_position.apply(this, arguments); }
            },
            "removeProbe": {
              "value": function () { return this.remove_probe.apply(this, arguments); }
            },
            "sendEvent": {
              "value": function () { return this.send_event.apply(this, arguments); }
            },
            "setActivateFunctionFull": {
              "value": function () { return this.set_activate_function_full.apply(this, arguments); }
            },
            "setActivatemodeFunctionFull": {
              "value": function () { return this.set_activatemode_function_full.apply(this, arguments); }
            },
            "setActive": {
              "value": function () { return this.set_active.apply(this, arguments); }
            },
            "setChainFunctionFull": {
              "value": function () { return this.set_chain_function_full.apply(this, arguments); }
            },
            "setChainListFunctionFull": {
              "value": function () { return this.set_chain_list_function_full.apply(this, arguments); }
            },
            "setElementPrivate": {
              "value": function () { return this.set_element_private.apply(this, arguments); }
            },
            "setEventFunctionFull": {
              "value": function () { return this.set_event_function_full.apply(this, arguments); }
            },
            "setGetrangeFunctionFull": {
              "value": function () { return this.set_getrange_function_full.apply(this, arguments); }
            },
            "setIterateInternalLinksFunctionFull": {
              "value": function () { return this.set_iterate_internal_links_function_full.apply(this, arguments); }
            },
            "setLinkFunctionFull": {
              "value": function () { return this.set_link_function_full.apply(this, arguments); }
            },
            "setOffset": {
              "value": function () { return this.set_offset.apply(this, arguments); }
            },
            "setQueryFunctionFull": {
              "value": function () { return this.set_query_function_full.apply(this, arguments); }
            },
            "setUnlinkFunctionFull": {
              "value": function () { return this.set_unlink_function_full.apply(this, arguments); }
            },
            "startTask": {
              "value": function () { return this.start_task.apply(this, arguments); }
            },
            "stickyEventsForeach": {
              "value": function () { return this.sticky_events_foreach.apply(this, arguments); }
            },
            "stopTask": {
              "value": function () { return this.stop_task.apply(this, arguments); }
            },
            "storeStickyEvent": {
              "value": function () { return this.store_sticky_event.apply(this, arguments); }
            },
            "useFixedCaps": {
              "value": function () { return this.use_fixed_caps.apply(this, arguments); }
            }
          },
          "static": {
            "linkGetName": {
              "value": function () { return this.link_get_name.apply(this, arguments); }
            }
          }
        },
        "PadTemplate": {
          "prototype": {
            "getCaps": {
              "value": function () { return this.get_caps.apply(this, arguments); }
            },
            "padCreated": {
              "value": function () { return this.pad_created.apply(this, arguments); }
            },
            "nameTemplate": {
              "get": function () { return this.name_template; },
              "set": function (value) { this.name_template = value; }
            }
          },
          "static": {}
        },
        "ParamFraction": {
          "prototype": {},
          "static": {}
        },
        "Pipeline": {
          "prototype": {
            "autoClock": {
              "value": function () { return this.auto_clock.apply(this, arguments); }
            },
            "getAutoFlushBus": {
              "value": function () { return this.get_auto_flush_bus.apply(this, arguments); }
            },
            "getBus": {
              "value": function () { return this.get_bus.apply(this, arguments); }
            },
            "getClock": {
              "value": function () { return this.get_clock.apply(this, arguments); }
            },
            "getDelay": {
              "value": function () { return this.get_delay.apply(this, arguments); }
            },
            "getLatency": {
              "value": function () { return this.get_latency.apply(this, arguments); }
            },
            "getPipelineClock": {
              "value": function () { return this.get_pipeline_clock.apply(this, arguments); }
            },
            "setAutoFlushBus": {
              "value": function () { return this.set_auto_flush_bus.apply(this, arguments); }
            },
            "setClock": {
              "value": function () { return this.set_clock.apply(this, arguments); }
            },
            "setDelay": {
              "value": function () { return this.set_delay.apply(this, arguments); }
            },
            "setLatency": {
              "value": function () { return this.set_latency.apply(this, arguments); }
            },
            "useClock": {
              "value": function () { return this.use_clock.apply(this, arguments); }
            },
            "autoFlushBus": {
              "get": function () { return this.auto_flush_bus; },
              "set": function (value) { this.auto_flush_bus = value; }
            }
          },
          "static": {}
        },
        "Plugin": {
          "prototype": {
            "addDependency": {
              "value": function () { return this.add_dependency.apply(this, arguments); }
            },
            "addDependencySimple": {
              "value": function () { return this.add_dependency_simple.apply(this, arguments); }
            },
            "getCacheData": {
              "value": function () { return this.get_cache_data.apply(this, arguments); }
            },
            "getDescription": {
              "value": function () { return this.get_description.apply(this, arguments); }
            },
            "getFilename": {
              "value": function () { return this.get_filename.apply(this, arguments); }
            },
            "getLicense": {
              "value": function () { return this.get_license.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getOrigin": {
              "value": function () { return this.get_origin.apply(this, arguments); }
            },
            "getPackage": {
              "value": function () { return this.get_package.apply(this, arguments); }
            },
            "getReleaseDateString": {
              "value": function () { return this.get_release_date_string.apply(this, arguments); }
            },
            "getSource": {
              "value": function () { return this.get_source.apply(this, arguments); }
            },
            "getVersion": {
              "value": function () { return this.get_version.apply(this, arguments); }
            },
            "isLoaded": {
              "value": function () { return this.is_loaded.apply(this, arguments); }
            },
            "setCacheData": {
              "value": function () { return this.set_cache_data.apply(this, arguments); }
            }
          },
          "static": {
            "listFree": {
              "value": function () { return this.list_free.apply(this, arguments); }
            },
            "loadByName": {
              "value": function () { return this.load_by_name.apply(this, arguments); }
            },
            "loadFile": {
              "value": function () { return this.load_file.apply(this, arguments); }
            },
            "registerStatic": {
              "value": function () { return this.register_static.apply(this, arguments); }
            },
            "registerStaticFull": {
              "value": function () { return this.register_static_full.apply(this, arguments); }
            }
          }
        },
        "PluginFeature": {
          "prototype": {
            "checkVersion": {
              "value": function () { return this.check_version.apply(this, arguments); }
            },
            "getPlugin": {
              "value": function () { return this.get_plugin.apply(this, arguments); }
            },
            "getPluginName": {
              "value": function () { return this.get_plugin_name.apply(this, arguments); }
            },
            "getRank": {
              "value": function () { return this.get_rank.apply(this, arguments); }
            },
            "setRank": {
              "value": function () { return this.set_rank.apply(this, arguments); }
            }
          },
          "static": {
            "listCopy": {
              "value": function () { return this.list_copy.apply(this, arguments); }
            },
            "listDebug": {
              "value": function () { return this.list_debug.apply(this, arguments); }
            },
            "listFree": {
              "value": function () { return this.list_free.apply(this, arguments); }
            },
            "rankCompareFunc": {
              "value": function () { return this.rank_compare_func.apply(this, arguments); }
            }
          }
        },
        "ProxyPad": {
          "prototype": {
            "getInternal": {
              "value": function () { return this.get_internal.apply(this, arguments); }
            }
          },
          "static": {
            "chainDefault": {
              "value": function () { return this.chain_default.apply(this, arguments); }
            },
            "chainListDefault": {
              "value": function () { return this.chain_list_default.apply(this, arguments); }
            },
            "getrangeDefault": {
              "value": function () { return this.getrange_default.apply(this, arguments); }
            },
            "iterateInternalLinksDefault": {
              "value": function () { return this.iterate_internal_links_default.apply(this, arguments); }
            }
          }
        },
        "Registry": {
          "prototype": {
            "addFeature": {
              "value": function () { return this.add_feature.apply(this, arguments); }
            },
            "addPlugin": {
              "value": function () { return this.add_plugin.apply(this, arguments); }
            },
            "checkFeatureVersion": {
              "value": function () { return this.check_feature_version.apply(this, arguments); }
            },
            "featureFilter": {
              "value": function () { return this.feature_filter.apply(this, arguments); }
            },
            "findFeature": {
              "value": function () { return this.find_feature.apply(this, arguments); }
            },
            "findPlugin": {
              "value": function () { return this.find_plugin.apply(this, arguments); }
            },
            "getFeatureList": {
              "value": function () { return this.get_feature_list.apply(this, arguments); }
            },
            "getFeatureListByPlugin": {
              "value": function () { return this.get_feature_list_by_plugin.apply(this, arguments); }
            },
            "getFeatureListCookie": {
              "value": function () { return this.get_feature_list_cookie.apply(this, arguments); }
            },
            "getPluginList": {
              "value": function () { return this.get_plugin_list.apply(this, arguments); }
            },
            "lookupFeature": {
              "value": function () { return this.lookup_feature.apply(this, arguments); }
            },
            "pluginFilter": {
              "value": function () { return this.plugin_filter.apply(this, arguments); }
            },
            "removeFeature": {
              "value": function () { return this.remove_feature.apply(this, arguments); }
            },
            "removePlugin": {
              "value": function () { return this.remove_plugin.apply(this, arguments); }
            },
            "scanPath": {
              "value": function () { return this.scan_path.apply(this, arguments); }
            }
          },
          "static": {
            "forkIsEnabled": {
              "value": function () { return this.fork_is_enabled.apply(this, arguments); }
            },
            "forkSetEnabled": {
              "value": function () { return this.fork_set_enabled.apply(this, arguments); }
            }
          }
        },
        "SystemClock": {
          "prototype": {
            "clockType": {
              "get": function () { return this.clock_type; },
              "set": function (value) { this.clock_type = value; }
            }
          },
          "static": {
            "setDefault": {
              "value": function () { return this.set_default.apply(this, arguments); }
            }
          }
        },
        "Task": {
          "prototype": {
            "getPool": {
              "value": function () { return this.get_pool.apply(this, arguments); }
            },
            "getState": {
              "value": function () { return this.get_state.apply(this, arguments); }
            },
            "setEnterCallback": {
              "value": function () { return this.set_enter_callback.apply(this, arguments); }
            },
            "setLeaveCallback": {
              "value": function () { return this.set_leave_callback.apply(this, arguments); }
            },
            "setLock": {
              "value": function () { return this.set_lock.apply(this, arguments); }
            },
            "setPool": {
              "value": function () { return this.set_pool.apply(this, arguments); }
            },
            "setState": {
              "value": function () { return this.set_state.apply(this, arguments); }
            }
          },
          "static": {
            "cleanupAll": {
              "value": function () { return this.cleanup_all.apply(this, arguments); }
            }
          }
        },
        "TaskPool": {
          "prototype": {},
          "static": {}
        },
        "TypeFindFactory": {
          "prototype": {
            "callFunction": {
              "value": function () { return this.call_function.apply(this, arguments); }
            },
            "getCaps": {
              "value": function () { return this.get_caps.apply(this, arguments); }
            },
            "getExtensions": {
              "value": function () { return this.get_extensions.apply(this, arguments); }
            },
            "hasFunction": {
              "value": function () { return this.has_function.apply(this, arguments); }
            }
          },
          "static": {
            "getList": {
              "value": function () { return this.get_list.apply(this, arguments); }
            }
          }
        },
        "ValueArray": {
          "prototype": {},
          "static": {
            "appendAndTakeValue": {
              "value": function () { return this.append_and_take_value.apply(this, arguments); }
            },
            "appendValue": {
              "value": function () { return this.append_value.apply(this, arguments); }
            },
            "getSize": {
              "value": function () { return this.get_size.apply(this, arguments); }
            },
            "getValue": {
              "value": function () { return this.get_value.apply(this, arguments); }
            },
            "prependValue": {
              "value": function () { return this.prepend_value.apply(this, arguments); }
            }
          }
        },
        "ValueList": {
          "prototype": {},
          "static": {
            "appendAndTakeValue": {
              "value": function () { return this.append_and_take_value.apply(this, arguments); }
            },
            "appendValue": {
              "value": function () { return this.append_value.apply(this, arguments); }
            },
            "getSize": {
              "value": function () { return this.get_size.apply(this, arguments); }
            },
            "getValue": {
              "value": function () { return this.get_value.apply(this, arguments); }
            },
            "prependValue": {
              "value": function () { return this.prepend_value.apply(this, arguments); }
            }
          }
        }
      },
      "static": {
        "bufferGetMaxMemory": {
          "value": function () { return this.buffer_get_max_memory.apply(this, arguments); }
        },
        "capsFeaturesFromString": {
          "value": function () { return this.caps_features_from_string.apply(this, arguments); }
        },
        "capsFromString": {
          "value": function () { return this.caps_from_string.apply(this, arguments); }
        },
        "coreErrorQuark": {
          "value": function () { return this.core_error_quark.apply(this, arguments); }
        },
        "debugAddLogFunction": {
          "value": function () { return this.debug_add_log_function.apply(this, arguments); }
        },
        "debugBinToDotData": {
          "value": function () { return this.debug_bin_to_dot_data.apply(this, arguments); }
        },
        "debugBinToDotFile": {
          "value": function () { return this.debug_bin_to_dot_file.apply(this, arguments); }
        },
        "debugBinToDotFileWithTs": {
          "value": function () { return this.debug_bin_to_dot_file_with_ts.apply(this, arguments); }
        },
        "debugConstructTermColor": {
          "value": function () { return this.debug_construct_term_color.apply(this, arguments); }
        },
        "debugConstructWinColor": {
          "value": function () { return this.debug_construct_win_color.apply(this, arguments); }
        },
        "debugGetAllCategories": {
          "value": function () { return this.debug_get_all_categories.apply(this, arguments); }
        },
        "debugGetColorMode": {
          "value": function () { return this.debug_get_color_mode.apply(this, arguments); }
        },
        "debugGetDefaultThreshold": {
          "value": function () { return this.debug_get_default_threshold.apply(this, arguments); }
        },
        "debugIsActive": {
          "value": function () { return this.debug_is_active.apply(this, arguments); }
        },
        "debugIsColored": {
          "value": function () { return this.debug_is_colored.apply(this, arguments); }
        },
        "debugLevelGetName": {
          "value": function () { return this.debug_level_get_name.apply(this, arguments); }
        },
        "debugLog": {
          "value": function () { return this.debug_log.apply(this, arguments); }
        },
        "debugLogDefault": {
          "value": function () { return this.debug_log_default.apply(this, arguments); }
        },
        "debugLogValist": {
          "value": function () { return this.debug_log_valist.apply(this, arguments); }
        },
        "debugPrintStackTrace": {
          "value": function () { return this.debug_print_stack_trace.apply(this, arguments); }
        },
        "debugRemoveLogFunction": {
          "value": function () { return this.debug_remove_log_function.apply(this, arguments); }
        },
        "debugRemoveLogFunctionByData": {
          "value": function () { return this.debug_remove_log_function_by_data.apply(this, arguments); }
        },
        "debugSetActive": {
          "value": function () { return this.debug_set_active.apply(this, arguments); }
        },
        "debugSetColorMode": {
          "value": function () { return this.debug_set_color_mode.apply(this, arguments); }
        },
        "debugSetColorModeFromString": {
          "value": function () { return this.debug_set_color_mode_from_string.apply(this, arguments); }
        },
        "debugSetColored": {
          "value": function () { return this.debug_set_colored.apply(this, arguments); }
        },
        "debugSetDefaultThreshold": {
          "value": function () { return this.debug_set_default_threshold.apply(this, arguments); }
        },
        "debugSetThresholdForName": {
          "value": function () { return this.debug_set_threshold_for_name.apply(this, arguments); }
        },
        "debugSetThresholdFromString": {
          "value": function () { return this.debug_set_threshold_from_string.apply(this, arguments); }
        },
        "debugUnsetThresholdForName": {
          "value": function () { return this.debug_unset_threshold_for_name.apply(this, arguments); }
        },
        "errorGetMessage": {
          "value": function () { return this.error_get_message.apply(this, arguments); }
        },
        "eventTypeGetFlags": {
          "value": function () { return this.event_type_get_flags.apply(this, arguments); }
        },
        "eventTypeGetName": {
          "value": function () { return this.event_type_get_name.apply(this, arguments); }
        },
        "eventTypeToQuark": {
          "value": function () { return this.event_type_to_quark.apply(this, arguments); }
        },
        "filenameToUri": {
          "value": function () { return this.filename_to_uri.apply(this, arguments); }
        },
        "flowGetName": {
          "value": function () { return this.flow_get_name.apply(this, arguments); }
        },
        "flowToQuark": {
          "value": function () { return this.flow_to_quark.apply(this, arguments); }
        },
        "formatGetByNick": {
          "value": function () { return this.format_get_by_nick.apply(this, arguments); }
        },
        "formatGetDetails": {
          "value": function () { return this.format_get_details.apply(this, arguments); }
        },
        "formatGetName": {
          "value": function () { return this.format_get_name.apply(this, arguments); }
        },
        "formatIterateDefinitions": {
          "value": function () { return this.format_iterate_definitions.apply(this, arguments); }
        },
        "formatRegister": {
          "value": function () { return this.format_register.apply(this, arguments); }
        },
        "formatToQuark": {
          "value": function () { return this.format_to_quark.apply(this, arguments); }
        },
        "formatsContains": {
          "value": function () { return this.formats_contains.apply(this, arguments); }
        },
        "initCheck": {
          "value": function () { return this.init_check.apply(this, arguments); }
        },
        "initGetOptionGroup": {
          "value": function () { return this.init_get_option_group.apply(this, arguments); }
        },
        "isCapsFeatures": {
          "value": function () { return this.is_caps_features.apply(this, arguments); }
        },
        "isInitialized": {
          "value": function () { return this.is_initialized.apply(this, arguments); }
        },
        "libraryErrorQuark": {
          "value": function () { return this.library_error_quark.apply(this, arguments); }
        },
        "messageTypeGetName": {
          "value": function () { return this.message_type_get_name.apply(this, arguments); }
        },
        "messageTypeToQuark": {
          "value": function () { return this.message_type_to_quark.apply(this, arguments); }
        },
        "metaApiTypeGetTags": {
          "value": function () { return this.meta_api_type_get_tags.apply(this, arguments); }
        },
        "metaApiTypeHasTag": {
          "value": function () { return this.meta_api_type_has_tag.apply(this, arguments); }
        },
        "metaApiTypeRegister": {
          "value": function () { return this.meta_api_type_register.apply(this, arguments); }
        },
        "metaGetInfo": {
          "value": function () { return this.meta_get_info.apply(this, arguments); }
        },
        "metaRegister": {
          "value": function () { return this.meta_register.apply(this, arguments); }
        },
        "miniObjectReplace": {
          "value": function () { return this.mini_object_replace.apply(this, arguments); }
        },
        "miniObjectSteal": {
          "value": function () { return this.mini_object_steal.apply(this, arguments); }
        },
        "miniObjectTake": {
          "value": function () { return this.mini_object_take.apply(this, arguments); }
        },
        "padModeGetName": {
          "value": function () { return this.pad_mode_get_name.apply(this, arguments); }
        },
        "paramSpecFraction": {
          "value": function () { return this.param_spec_fraction.apply(this, arguments); }
        },
        "parentBufferMetaApiGetType": {
          "value": function () { return this.parent_buffer_meta_api_get_type.apply(this, arguments); }
        },
        "parentBufferMetaGetInfo": {
          "value": function () { return this.parent_buffer_meta_get_info.apply(this, arguments); }
        },
        "parseBinFromDescription": {
          "value": function () { return this.parse_bin_from_description.apply(this, arguments); }
        },
        "parseBinFromDescriptionFull": {
          "value": function () { return this.parse_bin_from_description_full.apply(this, arguments); }
        },
        "parseErrorQuark": {
          "value": function () { return this.parse_error_quark.apply(this, arguments); }
        },
        "parseLaunch": {
          "value": function () { return this.parse_launch.apply(this, arguments); }
        },
        "parseLaunchFull": {
          "value": function () { return this.parse_launch_full.apply(this, arguments); }
        },
        "parseLaunchv": {
          "value": function () { return this.parse_launchv.apply(this, arguments); }
        },
        "parseLaunchvFull": {
          "value": function () { return this.parse_launchv_full.apply(this, arguments); }
        },
        "pluginErrorQuark": {
          "value": function () { return this.plugin_error_quark.apply(this, arguments); }
        },
        "pollNew": {
          "value": function () { return this.poll_new.apply(this, arguments); }
        },
        "pollNewTimer": {
          "value": function () { return this.poll_new_timer.apply(this, arguments); }
        },
        "presetGetAppDir": {
          "value": function () { return this.preset_get_app_dir.apply(this, arguments); }
        },
        "presetSetAppDir": {
          "value": function () { return this.preset_set_app_dir.apply(this, arguments); }
        },
        "protectionMetaApiGetType": {
          "value": function () { return this.protection_meta_api_get_type.apply(this, arguments); }
        },
        "protectionMetaGetInfo": {
          "value": function () { return this.protection_meta_get_info.apply(this, arguments); }
        },
        "protectionSelectSystem": {
          "value": function () { return this.protection_select_system.apply(this, arguments); }
        },
        "queryTypeGetFlags": {
          "value": function () { return this.query_type_get_flags.apply(this, arguments); }
        },
        "queryTypeGetName": {
          "value": function () { return this.query_type_get_name.apply(this, arguments); }
        },
        "queryTypeToQuark": {
          "value": function () { return this.query_type_to_quark.apply(this, arguments); }
        },
        "resourceErrorQuark": {
          "value": function () { return this.resource_error_quark.apply(this, arguments); }
        },
        "segtrapIsEnabled": {
          "value": function () { return this.segtrap_is_enabled.apply(this, arguments); }
        },
        "segtrapSetEnabled": {
          "value": function () { return this.segtrap_set_enabled.apply(this, arguments); }
        },
        "staticCapsGetType": {
          "value": function () { return this.static_caps_get_type.apply(this, arguments); }
        },
        "staticPadTemplateGetType": {
          "value": function () { return this.static_pad_template_get_type.apply(this, arguments); }
        },
        "streamErrorQuark": {
          "value": function () { return this.stream_error_quark.apply(this, arguments); }
        },
        "structureFromString": {
          "value": function () { return this.structure_from_string.apply(this, arguments); }
        },
        "tagExists": {
          "value": function () { return this.tag_exists.apply(this, arguments); }
        },
        "tagGetDescription": {
          "value": function () { return this.tag_get_description.apply(this, arguments); }
        },
        "tagGetFlag": {
          "value": function () { return this.tag_get_flag.apply(this, arguments); }
        },
        "tagGetNick": {
          "value": function () { return this.tag_get_nick.apply(this, arguments); }
        },
        "tagGetType": {
          "value": function () { return this.tag_get_type.apply(this, arguments); }
        },
        "tagIsFixed": {
          "value": function () { return this.tag_is_fixed.apply(this, arguments); }
        },
        "tagListCopyValue": {
          "value": function () { return this.tag_list_copy_value.apply(this, arguments); }
        },
        "tagMergeStringsWithComma": {
          "value": function () { return this.tag_merge_strings_with_comma.apply(this, arguments); }
        },
        "tagMergeUseFirst": {
          "value": function () { return this.tag_merge_use_first.apply(this, arguments); }
        },
        "tagRegister": {
          "value": function () { return this.tag_register.apply(this, arguments); }
        },
        "tagRegisterStatic": {
          "value": function () { return this.tag_register_static.apply(this, arguments); }
        },
        "tocEntryTypeGetNick": {
          "value": function () { return this.toc_entry_type_get_nick.apply(this, arguments); }
        },
        "typeFindGetType": {
          "value": function () { return this.type_find_get_type.apply(this, arguments); }
        },
        "typeFindRegister": {
          "value": function () { return this.type_find_register.apply(this, arguments); }
        },
        "updateRegistry": {
          "value": function () { return this.update_registry.apply(this, arguments); }
        },
        "uriConstruct": {
          "value": function () { return this.uri_construct.apply(this, arguments); }
        },
        "uriErrorQuark": {
          "value": function () { return this.uri_error_quark.apply(this, arguments); }
        },
        "uriFromString": {
          "value": function () { return this.uri_from_string.apply(this, arguments); }
        },
        "uriGetLocation": {
          "value": function () { return this.uri_get_location.apply(this, arguments); }
        },
        "uriGetProtocol": {
          "value": function () { return this.uri_get_protocol.apply(this, arguments); }
        },
        "uriHasProtocol": {
          "value": function () { return this.uri_has_protocol.apply(this, arguments); }
        },
        "uriIsValid": {
          "value": function () { return this.uri_is_valid.apply(this, arguments); }
        },
        "uriJoinStrings": {
          "value": function () { return this.uri_join_strings.apply(this, arguments); }
        },
        "uriProtocolIsSupported": {
          "value": function () { return this.uri_protocol_is_supported.apply(this, arguments); }
        },
        "uriProtocolIsValid": {
          "value": function () { return this.uri_protocol_is_valid.apply(this, arguments); }
        },
        "utilArrayBinarySearch": {
          "value": function () { return this.util_array_binary_search.apply(this, arguments); }
        },
        "utilDoubleToFraction": {
          "value": function () { return this.util_double_to_fraction.apply(this, arguments); }
        },
        "utilDumpMem": {
          "value": function () { return this.util_dump_mem.apply(this, arguments); }
        },
        "utilFractionAdd": {
          "value": function () { return this.util_fraction_add.apply(this, arguments); }
        },
        "utilFractionCompare": {
          "value": function () { return this.util_fraction_compare.apply(this, arguments); }
        },
        "utilFractionMultiply": {
          "value": function () { return this.util_fraction_multiply.apply(this, arguments); }
        },
        "utilFractionToDouble": {
          "value": function () { return this.util_fraction_to_double.apply(this, arguments); }
        },
        "utilGdoubleToGuint64": {
          "value": function () { return this.util_gdouble_to_guint64.apply(this, arguments); }
        },
        "utilGetTimestamp": {
          "value": function () { return this.util_get_timestamp.apply(this, arguments); }
        },
        "utilGreatestCommonDivisor": {
          "value": function () { return this.util_greatest_common_divisor.apply(this, arguments); }
        },
        "utilGreatestCommonDivisorInt64": {
          "value": function () { return this.util_greatest_common_divisor_int64.apply(this, arguments); }
        },
        "utilGroupIdNext": {
          "value": function () { return this.util_group_id_next.apply(this, arguments); }
        },
        "utilGuint64ToGdouble": {
          "value": function () { return this.util_guint64_to_gdouble.apply(this, arguments); }
        },
        "utilSeqnumCompare": {
          "value": function () { return this.util_seqnum_compare.apply(this, arguments); }
        },
        "utilSeqnumNext": {
          "value": function () { return this.util_seqnum_next.apply(this, arguments); }
        },
        "utilSetObjectArg": {
          "value": function () { return this.util_set_object_arg.apply(this, arguments); }
        },
        "utilSetValueFromString": {
          "value": function () { return this.util_set_value_from_string.apply(this, arguments); }
        },
        "utilUint64Scale": {
          "value": function () { return this.util_uint64_scale.apply(this, arguments); }
        },
        "utilUint64ScaleCeil": {
          "value": function () { return this.util_uint64_scale_ceil.apply(this, arguments); }
        },
        "utilUint64ScaleInt": {
          "value": function () { return this.util_uint64_scale_int.apply(this, arguments); }
        },
        "utilUint64ScaleIntCeil": {
          "value": function () { return this.util_uint64_scale_int_ceil.apply(this, arguments); }
        },
        "utilUint64ScaleIntRound": {
          "value": function () { return this.util_uint64_scale_int_round.apply(this, arguments); }
        },
        "utilUint64ScaleRound": {
          "value": function () { return this.util_uint64_scale_round.apply(this, arguments); }
        },
        "valueCanCompare": {
          "value": function () { return this.value_can_compare.apply(this, arguments); }
        },
        "valueCanIntersect": {
          "value": function () { return this.value_can_intersect.apply(this, arguments); }
        },
        "valueCanSubtract": {
          "value": function () { return this.value_can_subtract.apply(this, arguments); }
        },
        "valueCanUnion": {
          "value": function () { return this.value_can_union.apply(this, arguments); }
        },
        "valueCompare": {
          "value": function () { return this.value_compare.apply(this, arguments); }
        },
        "valueDeserialize": {
          "value": function () { return this.value_deserialize.apply(this, arguments); }
        },
        "valueFixate": {
          "value": function () { return this.value_fixate.apply(this, arguments); }
        },
        "valueFractionMultiply": {
          "value": function () { return this.value_fraction_multiply.apply(this, arguments); }
        },
        "valueFractionSubtract": {
          "value": function () { return this.value_fraction_subtract.apply(this, arguments); }
        },
        "valueGetBitmask": {
          "value": function () { return this.value_get_bitmask.apply(this, arguments); }
        },
        "valueGetCaps": {
          "value": function () { return this.value_get_caps.apply(this, arguments); }
        },
        "valueGetCapsFeatures": {
          "value": function () { return this.value_get_caps_features.apply(this, arguments); }
        },
        "valueGetDoubleRangeMax": {
          "value": function () { return this.value_get_double_range_max.apply(this, arguments); }
        },
        "valueGetDoubleRangeMin": {
          "value": function () { return this.value_get_double_range_min.apply(this, arguments); }
        },
        "valueGetFlagsetFlags": {
          "value": function () { return this.value_get_flagset_flags.apply(this, arguments); }
        },
        "valueGetFlagsetMask": {
          "value": function () { return this.value_get_flagset_mask.apply(this, arguments); }
        },
        "valueGetFractionDenominator": {
          "value": function () { return this.value_get_fraction_denominator.apply(this, arguments); }
        },
        "valueGetFractionNumerator": {
          "value": function () { return this.value_get_fraction_numerator.apply(this, arguments); }
        },
        "valueGetFractionRangeMax": {
          "value": function () { return this.value_get_fraction_range_max.apply(this, arguments); }
        },
        "valueGetFractionRangeMin": {
          "value": function () { return this.value_get_fraction_range_min.apply(this, arguments); }
        },
        "valueGetInt64RangeMax": {
          "value": function () { return this.value_get_int64_range_max.apply(this, arguments); }
        },
        "valueGetInt64RangeMin": {
          "value": function () { return this.value_get_int64_range_min.apply(this, arguments); }
        },
        "valueGetInt64RangeStep": {
          "value": function () { return this.value_get_int64_range_step.apply(this, arguments); }
        },
        "valueGetIntRangeMax": {
          "value": function () { return this.value_get_int_range_max.apply(this, arguments); }
        },
        "valueGetIntRangeMin": {
          "value": function () { return this.value_get_int_range_min.apply(this, arguments); }
        },
        "valueGetIntRangeStep": {
          "value": function () { return this.value_get_int_range_step.apply(this, arguments); }
        },
        "valueGetStructure": {
          "value": function () { return this.value_get_structure.apply(this, arguments); }
        },
        "valueInitAndCopy": {
          "value": function () { return this.value_init_and_copy.apply(this, arguments); }
        },
        "valueIntersect": {
          "value": function () { return this.value_intersect.apply(this, arguments); }
        },
        "valueIsFixed": {
          "value": function () { return this.value_is_fixed.apply(this, arguments); }
        },
        "valueIsSubset": {
          "value": function () { return this.value_is_subset.apply(this, arguments); }
        },
        "valueRegister": {
          "value": function () { return this.value_register.apply(this, arguments); }
        },
        "valueSerialize": {
          "value": function () { return this.value_serialize.apply(this, arguments); }
        },
        "valueSetBitmask": {
          "value": function () { return this.value_set_bitmask.apply(this, arguments); }
        },
        "valueSetCaps": {
          "value": function () { return this.value_set_caps.apply(this, arguments); }
        },
        "valueSetCapsFeatures": {
          "value": function () { return this.value_set_caps_features.apply(this, arguments); }
        },
        "valueSetDoubleRange": {
          "value": function () { return this.value_set_double_range.apply(this, arguments); }
        },
        "valueSetFlagset": {
          "value": function () { return this.value_set_flagset.apply(this, arguments); }
        },
        "valueSetFraction": {
          "value": function () { return this.value_set_fraction.apply(this, arguments); }
        },
        "valueSetFractionRange": {
          "value": function () { return this.value_set_fraction_range.apply(this, arguments); }
        },
        "valueSetFractionRangeFull": {
          "value": function () { return this.value_set_fraction_range_full.apply(this, arguments); }
        },
        "valueSetInt64Range": {
          "value": function () { return this.value_set_int64_range.apply(this, arguments); }
        },
        "valueSetInt64RangeStep": {
          "value": function () { return this.value_set_int64_range_step.apply(this, arguments); }
        },
        "valueSetIntRange": {
          "value": function () { return this.value_set_int_range.apply(this, arguments); }
        },
        "valueSetIntRangeStep": {
          "value": function () { return this.value_set_int_range_step.apply(this, arguments); }
        },
        "valueSetStructure": {
          "value": function () { return this.value_set_structure.apply(this, arguments); }
        },
        "valueSubtract": {
          "value": function () { return this.value_subtract.apply(this, arguments); }
        },
        "valueUnion": {
          "value": function () { return this.value_union.apply(this, arguments); }
        },
        "versionString": {
          "value": function () { return this.version_string.apply(this, arguments); }
        }
      }
    },
    "Gtk": {
      "class": {
        "AboutDialog": {
          "prototype": {
            "addCreditSection": {
              "value": function () { return this.add_credit_section.apply(this, arguments); }
            },
            "getArtists": {
              "value": function () { return this.get_artists.apply(this, arguments); }
            },
            "getAuthors": {
              "value": function () { return this.get_authors.apply(this, arguments); }
            },
            "getComments": {
              "value": function () { return this.get_comments.apply(this, arguments); }
            },
            "getCopyright": {
              "value": function () { return this.get_copyright.apply(this, arguments); }
            },
            "getDocumenters": {
              "value": function () { return this.get_documenters.apply(this, arguments); }
            },
            "getLicense": {
              "value": function () { return this.get_license.apply(this, arguments); }
            },
            "getLicenseType": {
              "value": function () { return this.get_license_type.apply(this, arguments); }
            },
            "getLogo": {
              "value": function () { return this.get_logo.apply(this, arguments); }
            },
            "getLogoIconName": {
              "value": function () { return this.get_logo_icon_name.apply(this, arguments); }
            },
            "getProgramName": {
              "value": function () { return this.get_program_name.apply(this, arguments); }
            },
            "getTranslatorCredits": {
              "value": function () { return this.get_translator_credits.apply(this, arguments); }
            },
            "getVersion": {
              "value": function () { return this.get_version.apply(this, arguments); }
            },
            "getWebsite": {
              "value": function () { return this.get_website.apply(this, arguments); }
            },
            "getWebsiteLabel": {
              "value": function () { return this.get_website_label.apply(this, arguments); }
            },
            "getWrapLicense": {
              "value": function () { return this.get_wrap_license.apply(this, arguments); }
            },
            "setArtists": {
              "value": function () { return this.set_artists.apply(this, arguments); }
            },
            "setAuthors": {
              "value": function () { return this.set_authors.apply(this, arguments); }
            },
            "setComments": {
              "value": function () { return this.set_comments.apply(this, arguments); }
            },
            "setCopyright": {
              "value": function () { return this.set_copyright.apply(this, arguments); }
            },
            "setDocumenters": {
              "value": function () { return this.set_documenters.apply(this, arguments); }
            },
            "setLicense": {
              "value": function () { return this.set_license.apply(this, arguments); }
            },
            "setLicenseType": {
              "value": function () { return this.set_license_type.apply(this, arguments); }
            },
            "setLogo": {
              "value": function () { return this.set_logo.apply(this, arguments); }
            },
            "setLogoIconName": {
              "value": function () { return this.set_logo_icon_name.apply(this, arguments); }
            },
            "setProgramName": {
              "value": function () { return this.set_program_name.apply(this, arguments); }
            },
            "setTranslatorCredits": {
              "value": function () { return this.set_translator_credits.apply(this, arguments); }
            },
            "setVersion": {
              "value": function () { return this.set_version.apply(this, arguments); }
            },
            "setWebsite": {
              "value": function () { return this.set_website.apply(this, arguments); }
            },
            "setWebsiteLabel": {
              "value": function () { return this.set_website_label.apply(this, arguments); }
            },
            "setWrapLicense": {
              "value": function () { return this.set_wrap_license.apply(this, arguments); }
            },
            "licenseType": {
              "get": function () { return this.license_type; },
              "set": function (value) { this.license_type = value; }
            },
            "logoIconName": {
              "get": function () { return this.logo_icon_name; },
              "set": function (value) { this.logo_icon_name = value; }
            },
            "programName": {
              "get": function () { return this.program_name; },
              "set": function (value) { this.program_name = value; }
            },
            "translatorCredits": {
              "get": function () { return this.translator_credits; },
              "set": function (value) { this.translator_credits = value; }
            },
            "websiteLabel": {
              "get": function () { return this.website_label; },
              "set": function (value) { this.website_label = value; }
            },
            "wrapLicense": {
              "get": function () { return this.wrap_license; },
              "set": function (value) { this.wrap_license = value; }
            }
          },
          "static": {}
        },
        "AccelGroup": {
          "prototype": {
            "connectByPath": {
              "value": function () { return this.connect_by_path.apply(this, arguments); }
            },
            "disconnectKey": {
              "value": function () { return this.disconnect_key.apply(this, arguments); }
            },
            "getIsLocked": {
              "value": function () { return this.get_is_locked.apply(this, arguments); }
            },
            "getModifierMask": {
              "value": function () { return this.get_modifier_mask.apply(this, arguments); }
            },
            "isLocked": {
              "get": function () { return this.is_locked; },
              "set": function (value) { this.is_locked = value; }
            },
            "modifierMask": {
              "get": function () { return this.modifier_mask; },
              "set": function (value) { this.modifier_mask = value; }
            }
          },
          "static": {
            "fromAccelClosure": {
              "value": function () { return this.from_accel_closure.apply(this, arguments); }
            }
          }
        },
        "AccelLabel": {
          "prototype": {
            "getAccel": {
              "value": function () { return this.get_accel.apply(this, arguments); }
            },
            "getAccelWidget": {
              "value": function () { return this.get_accel_widget.apply(this, arguments); }
            },
            "getAccelWidth": {
              "value": function () { return this.get_accel_width.apply(this, arguments); }
            },
            "setAccel": {
              "value": function () { return this.set_accel.apply(this, arguments); }
            },
            "setAccelClosure": {
              "value": function () { return this.set_accel_closure.apply(this, arguments); }
            },
            "setAccelWidget": {
              "value": function () { return this.set_accel_widget.apply(this, arguments); }
            },
            "accelClosure": {
              "get": function () { return this.accel_closure; },
              "set": function (value) { this.accel_closure = value; }
            },
            "accelWidget": {
              "get": function () { return this.accel_widget; },
              "set": function (value) { this.accel_widget = value; }
            }
          },
          "static": {}
        },
        "AccelMap": {
          "prototype": {},
          "static": {
            "addEntry": {
              "value": function () { return this.add_entry.apply(this, arguments); }
            },
            "addFilter": {
              "value": function () { return this.add_filter.apply(this, arguments); }
            },
            "changeEntry": {
              "value": function () { return this.change_entry.apply(this, arguments); }
            },
            "foreachUnfiltered": {
              "value": function () { return this.foreach_unfiltered.apply(this, arguments); }
            },
            "loadFd": {
              "value": function () { return this.load_fd.apply(this, arguments); }
            },
            "loadScanner": {
              "value": function () { return this.load_scanner.apply(this, arguments); }
            },
            "lockPath": {
              "value": function () { return this.lock_path.apply(this, arguments); }
            },
            "lookupEntry": {
              "value": function () { return this.lookup_entry.apply(this, arguments); }
            },
            "saveFd": {
              "value": function () { return this.save_fd.apply(this, arguments); }
            },
            "unlockPath": {
              "value": function () { return this.unlock_path.apply(this, arguments); }
            }
          }
        },
        "Accessible": {
          "prototype": {
            "connectWidgetDestroyed": {
              "value": function () { return this.connect_widget_destroyed.apply(this, arguments); }
            },
            "getWidget": {
              "value": function () { return this.get_widget.apply(this, arguments); }
            },
            "setWidget": {
              "value": function () { return this.set_widget.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Action": {
          "prototype": {
            "blockActivate": {
              "value": function () { return this.block_activate.apply(this, arguments); }
            },
            "connectAccelerator": {
              "value": function () { return this.connect_accelerator.apply(this, arguments); }
            },
            "createIcon": {
              "value": function () { return this.create_icon.apply(this, arguments); }
            },
            "createMenu": {
              "value": function () { return this.create_menu.apply(this, arguments); }
            },
            "createMenuItem": {
              "value": function () { return this.create_menu_item.apply(this, arguments); }
            },
            "createToolItem": {
              "value": function () { return this.create_tool_item.apply(this, arguments); }
            },
            "disconnectAccelerator": {
              "value": function () { return this.disconnect_accelerator.apply(this, arguments); }
            },
            "getAccelClosure": {
              "value": function () { return this.get_accel_closure.apply(this, arguments); }
            },
            "getAccelPath": {
              "value": function () { return this.get_accel_path.apply(this, arguments); }
            },
            "getAlwaysShowImage": {
              "value": function () { return this.get_always_show_image.apply(this, arguments); }
            },
            "getGicon": {
              "value": function () { return this.get_gicon.apply(this, arguments); }
            },
            "getIconName": {
              "value": function () { return this.get_icon_name.apply(this, arguments); }
            },
            "getIsImportant": {
              "value": function () { return this.get_is_important.apply(this, arguments); }
            },
            "getLabel": {
              "value": function () { return this.get_label.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getProxies": {
              "value": function () { return this.get_proxies.apply(this, arguments); }
            },
            "getSensitive": {
              "value": function () { return this.get_sensitive.apply(this, arguments); }
            },
            "getShortLabel": {
              "value": function () { return this.get_short_label.apply(this, arguments); }
            },
            "getStockId": {
              "value": function () { return this.get_stock_id.apply(this, arguments); }
            },
            "getTooltip": {
              "value": function () { return this.get_tooltip.apply(this, arguments); }
            },
            "getVisible": {
              "value": function () { return this.get_visible.apply(this, arguments); }
            },
            "getVisibleHorizontal": {
              "value": function () { return this.get_visible_horizontal.apply(this, arguments); }
            },
            "getVisibleVertical": {
              "value": function () { return this.get_visible_vertical.apply(this, arguments); }
            },
            "isSensitive": {
              "value": function () { return this.is_sensitive.apply(this, arguments); }
            },
            "isVisible": {
              "value": function () { return this.is_visible.apply(this, arguments); }
            },
            "setAccelGroup": {
              "value": function () { return this.set_accel_group.apply(this, arguments); }
            },
            "setAccelPath": {
              "value": function () { return this.set_accel_path.apply(this, arguments); }
            },
            "setAlwaysShowImage": {
              "value": function () { return this.set_always_show_image.apply(this, arguments); }
            },
            "setGicon": {
              "value": function () { return this.set_gicon.apply(this, arguments); }
            },
            "setIconName": {
              "value": function () { return this.set_icon_name.apply(this, arguments); }
            },
            "setIsImportant": {
              "value": function () { return this.set_is_important.apply(this, arguments); }
            },
            "setLabel": {
              "value": function () { return this.set_label.apply(this, arguments); }
            },
            "setSensitive": {
              "value": function () { return this.set_sensitive.apply(this, arguments); }
            },
            "setShortLabel": {
              "value": function () { return this.set_short_label.apply(this, arguments); }
            },
            "setStockId": {
              "value": function () { return this.set_stock_id.apply(this, arguments); }
            },
            "setTooltip": {
              "value": function () { return this.set_tooltip.apply(this, arguments); }
            },
            "setVisible": {
              "value": function () { return this.set_visible.apply(this, arguments); }
            },
            "setVisibleHorizontal": {
              "value": function () { return this.set_visible_horizontal.apply(this, arguments); }
            },
            "setVisibleVertical": {
              "value": function () { return this.set_visible_vertical.apply(this, arguments); }
            },
            "unblockActivate": {
              "value": function () { return this.unblock_activate.apply(this, arguments); }
            },
            "actionGroup": {
              "get": function () { return this.action_group; },
              "set": function (value) { this.action_group = value; }
            },
            "alwaysShowImage": {
              "get": function () { return this.always_show_image; },
              "set": function (value) { this.always_show_image = value; }
            },
            "hideIfEmpty": {
              "get": function () { return this.hide_if_empty; },
              "set": function (value) { this.hide_if_empty = value; }
            },
            "iconName": {
              "get": function () { return this.icon_name; },
              "set": function (value) { this.icon_name = value; }
            },
            "isImportant": {
              "get": function () { return this.is_important; },
              "set": function (value) { this.is_important = value; }
            },
            "shortLabel": {
              "get": function () { return this.short_label; },
              "set": function (value) { this.short_label = value; }
            },
            "stockId": {
              "get": function () { return this.stock_id; },
              "set": function (value) { this.stock_id = value; }
            },
            "visibleHorizontal": {
              "get": function () { return this.visible_horizontal; },
              "set": function (value) { this.visible_horizontal = value; }
            },
            "visibleOverflown": {
              "get": function () { return this.visible_overflown; },
              "set": function (value) { this.visible_overflown = value; }
            },
            "visibleVertical": {
              "get": function () { return this.visible_vertical; },
              "set": function (value) { this.visible_vertical = value; }
            }
          },
          "static": {}
        },
        "ActionBar": {
          "prototype": {
            "getCenterWidget": {
              "value": function () { return this.get_center_widget.apply(this, arguments); }
            },
            "packEnd": {
              "value": function () { return this.pack_end.apply(this, arguments); }
            },
            "packStart": {
              "value": function () { return this.pack_start.apply(this, arguments); }
            },
            "setCenterWidget": {
              "value": function () { return this.set_center_widget.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "ActionGroup": {
          "prototype": {
            "addAction": {
              "value": function () { return this.add_action.apply(this, arguments); }
            },
            "addActionWithAccel": {
              "value": function () { return this.add_action_with_accel.apply(this, arguments); }
            },
            "addActions": {
              "value": function () { return this.add_actions.apply(this, arguments); }
            },
            "addActionsFull": {
              "value": function () { return this.add_actions_full.apply(this, arguments); }
            },
            "addRadioActions": {
              "value": function () { return this.add_radio_actions.apply(this, arguments); }
            },
            "addRadioActionsFull": {
              "value": function () { return this.add_radio_actions_full.apply(this, arguments); }
            },
            "addToggleActions": {
              "value": function () { return this.add_toggle_actions.apply(this, arguments); }
            },
            "addToggleActionsFull": {
              "value": function () { return this.add_toggle_actions_full.apply(this, arguments); }
            },
            "getAccelGroup": {
              "value": function () { return this.get_accel_group.apply(this, arguments); }
            },
            "getAction": {
              "value": function () { return this.get_action.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getSensitive": {
              "value": function () { return this.get_sensitive.apply(this, arguments); }
            },
            "getVisible": {
              "value": function () { return this.get_visible.apply(this, arguments); }
            },
            "listActions": {
              "value": function () { return this.list_actions.apply(this, arguments); }
            },
            "removeAction": {
              "value": function () { return this.remove_action.apply(this, arguments); }
            },
            "setAccelGroup": {
              "value": function () { return this.set_accel_group.apply(this, arguments); }
            },
            "setSensitive": {
              "value": function () { return this.set_sensitive.apply(this, arguments); }
            },
            "setTranslateFunc": {
              "value": function () { return this.set_translate_func.apply(this, arguments); }
            },
            "setTranslationDomain": {
              "value": function () { return this.set_translation_domain.apply(this, arguments); }
            },
            "setVisible": {
              "value": function () { return this.set_visible.apply(this, arguments); }
            },
            "translateString": {
              "value": function () { return this.translate_string.apply(this, arguments); }
            },
            "accelGroup": {
              "get": function () { return this.accel_group; },
              "set": function (value) { this.accel_group = value; }
            }
          },
          "static": {}
        },
        "Adjustment": {
          "prototype": {
            "clampPage": {
              "value": function () { return this.clamp_page.apply(this, arguments); }
            },
            "getLower": {
              "value": function () { return this.get_lower.apply(this, arguments); }
            },
            "getMinimumIncrement": {
              "value": function () { return this.get_minimum_increment.apply(this, arguments); }
            },
            "getPageIncrement": {
              "value": function () { return this.get_page_increment.apply(this, arguments); }
            },
            "getPageSize": {
              "value": function () { return this.get_page_size.apply(this, arguments); }
            },
            "getStepIncrement": {
              "value": function () { return this.get_step_increment.apply(this, arguments); }
            },
            "getUpper": {
              "value": function () { return this.get_upper.apply(this, arguments); }
            },
            "getValue": {
              "value": function () { return this.get_value.apply(this, arguments); }
            },
            "setLower": {
              "value": function () { return this.set_lower.apply(this, arguments); }
            },
            "setPageIncrement": {
              "value": function () { return this.set_page_increment.apply(this, arguments); }
            },
            "setPageSize": {
              "value": function () { return this.set_page_size.apply(this, arguments); }
            },
            "setStepIncrement": {
              "value": function () { return this.set_step_increment.apply(this, arguments); }
            },
            "setUpper": {
              "value": function () { return this.set_upper.apply(this, arguments); }
            },
            "setValue": {
              "value": function () { return this.set_value.apply(this, arguments); }
            },
            "valueChanged": {
              "value": function () { return this.value_changed.apply(this, arguments); }
            },
            "pageIncrement": {
              "get": function () { return this.page_increment; },
              "set": function (value) { this.page_increment = value; }
            },
            "pageSize": {
              "get": function () { return this.page_size; },
              "set": function (value) { this.page_size = value; }
            },
            "stepIncrement": {
              "get": function () { return this.step_increment; },
              "set": function (value) { this.step_increment = value; }
            }
          },
          "static": {}
        },
        "Alignment": {
          "prototype": {
            "getPadding": {
              "value": function () { return this.get_padding.apply(this, arguments); }
            },
            "setPadding": {
              "value": function () { return this.set_padding.apply(this, arguments); }
            },
            "bottomPadding": {
              "get": function () { return this.bottom_padding; },
              "set": function (value) { this.bottom_padding = value; }
            },
            "leftPadding": {
              "get": function () { return this.left_padding; },
              "set": function (value) { this.left_padding = value; }
            },
            "rightPadding": {
              "get": function () { return this.right_padding; },
              "set": function (value) { this.right_padding = value; }
            },
            "topPadding": {
              "get": function () { return this.top_padding; },
              "set": function (value) { this.top_padding = value; }
            }
          },
          "static": {}
        },
        "AppChooserButton": {
          "prototype": {
            "appendCustomItem": {
              "value": function () { return this.append_custom_item.apply(this, arguments); }
            },
            "appendSeparator": {
              "value": function () { return this.append_separator.apply(this, arguments); }
            },
            "getHeading": {
              "value": function () { return this.get_heading.apply(this, arguments); }
            },
            "getShowDefaultItem": {
              "value": function () { return this.get_show_default_item.apply(this, arguments); }
            },
            "getShowDialogItem": {
              "value": function () { return this.get_show_dialog_item.apply(this, arguments); }
            },
            "setActiveCustomItem": {
              "value": function () { return this.set_active_custom_item.apply(this, arguments); }
            },
            "setHeading": {
              "value": function () { return this.set_heading.apply(this, arguments); }
            },
            "setShowDefaultItem": {
              "value": function () { return this.set_show_default_item.apply(this, arguments); }
            },
            "setShowDialogItem": {
              "value": function () { return this.set_show_dialog_item.apply(this, arguments); }
            },
            "showDefaultItem": {
              "get": function () { return this.show_default_item; },
              "set": function (value) { this.show_default_item = value; }
            },
            "showDialogItem": {
              "get": function () { return this.show_dialog_item; },
              "set": function (value) { this.show_dialog_item = value; }
            }
          },
          "static": {}
        },
        "AppChooserDialog": {
          "prototype": {
            "getHeading": {
              "value": function () { return this.get_heading.apply(this, arguments); }
            },
            "getWidget": {
              "value": function () { return this.get_widget.apply(this, arguments); }
            },
            "setHeading": {
              "value": function () { return this.set_heading.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "AppChooserWidget": {
          "prototype": {
            "getDefaultText": {
              "value": function () { return this.get_default_text.apply(this, arguments); }
            },
            "getShowAll": {
              "value": function () { return this.get_show_all.apply(this, arguments); }
            },
            "getShowDefault": {
              "value": function () { return this.get_show_default.apply(this, arguments); }
            },
            "getShowFallback": {
              "value": function () { return this.get_show_fallback.apply(this, arguments); }
            },
            "getShowOther": {
              "value": function () { return this.get_show_other.apply(this, arguments); }
            },
            "getShowRecommended": {
              "value": function () { return this.get_show_recommended.apply(this, arguments); }
            },
            "setDefaultText": {
              "value": function () { return this.set_default_text.apply(this, arguments); }
            },
            "setShowAll": {
              "value": function () { return this.set_show_all.apply(this, arguments); }
            },
            "setShowDefault": {
              "value": function () { return this.set_show_default.apply(this, arguments); }
            },
            "setShowFallback": {
              "value": function () { return this.set_show_fallback.apply(this, arguments); }
            },
            "setShowOther": {
              "value": function () { return this.set_show_other.apply(this, arguments); }
            },
            "setShowRecommended": {
              "value": function () { return this.set_show_recommended.apply(this, arguments); }
            },
            "defaultText": {
              "get": function () { return this.default_text; },
              "set": function (value) { this.default_text = value; }
            },
            "showAll": {
              "get": function () { return this.show_all; },
              "set": function (value) { this.show_all = value; }
            },
            "showDefault": {
              "get": function () { return this.show_default; },
              "set": function (value) { this.show_default = value; }
            },
            "showFallback": {
              "get": function () { return this.show_fallback; },
              "set": function (value) { this.show_fallback = value; }
            },
            "showOther": {
              "get": function () { return this.show_other; },
              "set": function (value) { this.show_other = value; }
            },
            "showRecommended": {
              "get": function () { return this.show_recommended; },
              "set": function (value) { this.show_recommended = value; }
            }
          },
          "static": {}
        },
        "Application": {
          "prototype": {
            "addAccelerator": {
              "value": function () { return this.add_accelerator.apply(this, arguments); }
            },
            "addWindow": {
              "value": function () { return this.add_window.apply(this, arguments); }
            },
            "getAccelsForAction": {
              "value": function () { return this.get_accels_for_action.apply(this, arguments); }
            },
            "getActionsForAccel": {
              "value": function () { return this.get_actions_for_accel.apply(this, arguments); }
            },
            "getActiveWindow": {
              "value": function () { return this.get_active_window.apply(this, arguments); }
            },
            "getAppMenu": {
              "value": function () { return this.get_app_menu.apply(this, arguments); }
            },
            "getMenuById": {
              "value": function () { return this.get_menu_by_id.apply(this, arguments); }
            },
            "getMenubar": {
              "value": function () { return this.get_menubar.apply(this, arguments); }
            },
            "getWindowById": {
              "value": function () { return this.get_window_by_id.apply(this, arguments); }
            },
            "getWindows": {
              "value": function () { return this.get_windows.apply(this, arguments); }
            },
            "isInhibited": {
              "value": function () { return this.is_inhibited.apply(this, arguments); }
            },
            "listActionDescriptions": {
              "value": function () { return this.list_action_descriptions.apply(this, arguments); }
            },
            "prefersAppMenu": {
              "value": function () { return this.prefers_app_menu.apply(this, arguments); }
            },
            "removeAccelerator": {
              "value": function () { return this.remove_accelerator.apply(this, arguments); }
            },
            "removeWindow": {
              "value": function () { return this.remove_window.apply(this, arguments); }
            },
            "setAccelsForAction": {
              "value": function () { return this.set_accels_for_action.apply(this, arguments); }
            },
            "setAppMenu": {
              "value": function () { return this.set_app_menu.apply(this, arguments); }
            },
            "setMenubar": {
              "value": function () { return this.set_menubar.apply(this, arguments); }
            },
            "activeWindow": {
              "get": function () { return this.active_window; },
              "set": function (value) { this.active_window = value; }
            },
            "appMenu": {
              "get": function () { return this.app_menu; },
              "set": function (value) { this.app_menu = value; }
            },
            "registerSession": {
              "get": function () { return this.register_session; },
              "set": function (value) { this.register_session = value; }
            }
          },
          "static": {}
        },
        "ApplicationWindow": {
          "prototype": {
            "getHelpOverlay": {
              "value": function () { return this.get_help_overlay.apply(this, arguments); }
            },
            "getId": {
              "value": function () { return this.get_id.apply(this, arguments); }
            },
            "getShowMenubar": {
              "value": function () { return this.get_show_menubar.apply(this, arguments); }
            },
            "setHelpOverlay": {
              "value": function () { return this.set_help_overlay.apply(this, arguments); }
            },
            "setShowMenubar": {
              "value": function () { return this.set_show_menubar.apply(this, arguments); }
            },
            "showMenubar": {
              "get": function () { return this.show_menubar; },
              "set": function (value) { this.show_menubar = value; }
            }
          },
          "static": {}
        },
        "Arrow": {
          "prototype": {
            "arrowType": {
              "get": function () { return this.arrow_type; },
              "set": function (value) { this.arrow_type = value; }
            },
            "shadowType": {
              "get": function () { return this.shadow_type; },
              "set": function (value) { this.shadow_type = value; }
            }
          },
          "static": {}
        },
        "ArrowAccessible": {
          "prototype": {},
          "static": {}
        },
        "AspectFrame": {
          "prototype": {
            "obeyChild": {
              "get": function () { return this.obey_child; },
              "set": function (value) { this.obey_child = value; }
            }
          },
          "static": {}
        },
        "Assistant": {
          "prototype": {
            "addActionWidget": {
              "value": function () { return this.add_action_widget.apply(this, arguments); }
            },
            "appendPage": {
              "value": function () { return this.append_page.apply(this, arguments); }
            },
            "getCurrentPage": {
              "value": function () { return this.get_current_page.apply(this, arguments); }
            },
            "getNPages": {
              "value": function () { return this.get_n_pages.apply(this, arguments); }
            },
            "getNthPage": {
              "value": function () { return this.get_nth_page.apply(this, arguments); }
            },
            "getPageComplete": {
              "value": function () { return this.get_page_complete.apply(this, arguments); }
            },
            "getPageHasPadding": {
              "value": function () { return this.get_page_has_padding.apply(this, arguments); }
            },
            "getPageHeaderImage": {
              "value": function () { return this.get_page_header_image.apply(this, arguments); }
            },
            "getPageSideImage": {
              "value": function () { return this.get_page_side_image.apply(this, arguments); }
            },
            "getPageTitle": {
              "value": function () { return this.get_page_title.apply(this, arguments); }
            },
            "getPageType": {
              "value": function () { return this.get_page_type.apply(this, arguments); }
            },
            "insertPage": {
              "value": function () { return this.insert_page.apply(this, arguments); }
            },
            "nextPage": {
              "value": function () { return this.next_page.apply(this, arguments); }
            },
            "prependPage": {
              "value": function () { return this.prepend_page.apply(this, arguments); }
            },
            "previousPage": {
              "value": function () { return this.previous_page.apply(this, arguments); }
            },
            "removeActionWidget": {
              "value": function () { return this.remove_action_widget.apply(this, arguments); }
            },
            "removePage": {
              "value": function () { return this.remove_page.apply(this, arguments); }
            },
            "setCurrentPage": {
              "value": function () { return this.set_current_page.apply(this, arguments); }
            },
            "setForwardPageFunc": {
              "value": function () { return this.set_forward_page_func.apply(this, arguments); }
            },
            "setPageComplete": {
              "value": function () { return this.set_page_complete.apply(this, arguments); }
            },
            "setPageHasPadding": {
              "value": function () { return this.set_page_has_padding.apply(this, arguments); }
            },
            "setPageHeaderImage": {
              "value": function () { return this.set_page_header_image.apply(this, arguments); }
            },
            "setPageSideImage": {
              "value": function () { return this.set_page_side_image.apply(this, arguments); }
            },
            "setPageTitle": {
              "value": function () { return this.set_page_title.apply(this, arguments); }
            },
            "setPageType": {
              "value": function () { return this.set_page_type.apply(this, arguments); }
            },
            "updateButtonsState": {
              "value": function () { return this.update_buttons_state.apply(this, arguments); }
            },
            "useHeaderBar": {
              "get": function () { return this.use_header_bar; },
              "set": function (value) { this.use_header_bar = value; }
            }
          },
          "static": {}
        },
        "Bin": {
          "prototype": {
            "getChild": {
              "value": function () { return this.get_child.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "BooleanCellAccessible": {
          "prototype": {},
          "static": {}
        },
        "Box": {
          "prototype": {
            "getBaselinePosition": {
              "value": function () { return this.get_baseline_position.apply(this, arguments); }
            },
            "getCenterWidget": {
              "value": function () { return this.get_center_widget.apply(this, arguments); }
            },
            "getHomogeneous": {
              "value": function () { return this.get_homogeneous.apply(this, arguments); }
            },
            "getSpacing": {
              "value": function () { return this.get_spacing.apply(this, arguments); }
            },
            "packEnd": {
              "value": function () { return this.pack_end.apply(this, arguments); }
            },
            "packStart": {
              "value": function () { return this.pack_start.apply(this, arguments); }
            },
            "queryChildPacking": {
              "value": function () { return this.query_child_packing.apply(this, arguments); }
            },
            "reorderChild": {
              "value": function () { return this.reorder_child.apply(this, arguments); }
            },
            "setBaselinePosition": {
              "value": function () { return this.set_baseline_position.apply(this, arguments); }
            },
            "setCenterWidget": {
              "value": function () { return this.set_center_widget.apply(this, arguments); }
            },
            "setChildPacking": {
              "value": function () { return this.set_child_packing.apply(this, arguments); }
            },
            "setHomogeneous": {
              "value": function () { return this.set_homogeneous.apply(this, arguments); }
            },
            "setSpacing": {
              "value": function () { return this.set_spacing.apply(this, arguments); }
            },
            "baselinePosition": {
              "get": function () { return this.baseline_position; },
              "set": function (value) { this.baseline_position = value; }
            }
          },
          "static": {}
        },
        "Builder": {
          "prototype": {
            "addCallbackSymbol": {
              "value": function () { return this.add_callback_symbol.apply(this, arguments); }
            },
            "addCallbackSymbols": {
              "value": function () { return this.add_callback_symbols.apply(this, arguments); }
            },
            "addFromFile": {
              "value": function () { return this.add_from_file.apply(this, arguments); }
            },
            "addFromResource": {
              "value": function () { return this.add_from_resource.apply(this, arguments); }
            },
            "addFromString": {
              "value": function () { return this.add_from_string.apply(this, arguments); }
            },
            "addObjectsFromFile": {
              "value": function () { return this.add_objects_from_file.apply(this, arguments); }
            },
            "addObjectsFromResource": {
              "value": function () { return this.add_objects_from_resource.apply(this, arguments); }
            },
            "addObjectsFromString": {
              "value": function () { return this.add_objects_from_string.apply(this, arguments); }
            },
            "connectSignals": {
              "value": function () { return this.connect_signals.apply(this, arguments); }
            },
            "connectSignalsFull": {
              "value": function () { return this.connect_signals_full.apply(this, arguments); }
            },
            "exposeObject": {
              "value": function () { return this.expose_object.apply(this, arguments); }
            },
            "extendWithTemplate": {
              "value": function () { return this.extend_with_template.apply(this, arguments); }
            },
            "getApplication": {
              "value": function () { return this.get_application.apply(this, arguments); }
            },
            "getObject": {
              "value": function () { return this.get_object.apply(this, arguments); }
            },
            "getObjects": {
              "value": function () { return this.get_objects.apply(this, arguments); }
            },
            "getTranslationDomain": {
              "value": function () { return this.get_translation_domain.apply(this, arguments); }
            },
            "getTypeFromName": {
              "value": function () { return this.get_type_from_name.apply(this, arguments); }
            },
            "lookupCallbackSymbol": {
              "value": function () { return this.lookup_callback_symbol.apply(this, arguments); }
            },
            "setApplication": {
              "value": function () { return this.set_application.apply(this, arguments); }
            },
            "setTranslationDomain": {
              "value": function () { return this.set_translation_domain.apply(this, arguments); }
            },
            "valueFromString": {
              "value": function () { return this.value_from_string.apply(this, arguments); }
            },
            "valueFromStringType": {
              "value": function () { return this.value_from_string_type.apply(this, arguments); }
            },
            "translationDomain": {
              "get": function () { return this.translation_domain; },
              "set": function (value) { this.translation_domain = value; }
            }
          },
          "static": {}
        },
        "Button": {
          "prototype": {
            "getAlignment": {
              "value": function () { return this.get_alignment.apply(this, arguments); }
            },
            "getAlwaysShowImage": {
              "value": function () { return this.get_always_show_image.apply(this, arguments); }
            },
            "getEventWindow": {
              "value": function () { return this.get_event_window.apply(this, arguments); }
            },
            "getFocusOnClick": {
              "value": function () { return this.get_focus_on_click.apply(this, arguments); }
            },
            "getImage": {
              "value": function () { return this.get_image.apply(this, arguments); }
            },
            "getImagePosition": {
              "value": function () { return this.get_image_position.apply(this, arguments); }
            },
            "getLabel": {
              "value": function () { return this.get_label.apply(this, arguments); }
            },
            "getRelief": {
              "value": function () { return this.get_relief.apply(this, arguments); }
            },
            "getUseStock": {
              "value": function () { return this.get_use_stock.apply(this, arguments); }
            },
            "getUseUnderline": {
              "value": function () { return this.get_use_underline.apply(this, arguments); }
            },
            "setAlignment": {
              "value": function () { return this.set_alignment.apply(this, arguments); }
            },
            "setAlwaysShowImage": {
              "value": function () { return this.set_always_show_image.apply(this, arguments); }
            },
            "setFocusOnClick": {
              "value": function () { return this.set_focus_on_click.apply(this, arguments); }
            },
            "setImage": {
              "value": function () { return this.set_image.apply(this, arguments); }
            },
            "setImagePosition": {
              "value": function () { return this.set_image_position.apply(this, arguments); }
            },
            "setLabel": {
              "value": function () { return this.set_label.apply(this, arguments); }
            },
            "setRelief": {
              "value": function () { return this.set_relief.apply(this, arguments); }
            },
            "setUseStock": {
              "value": function () { return this.set_use_stock.apply(this, arguments); }
            },
            "setUseUnderline": {
              "value": function () { return this.set_use_underline.apply(this, arguments); }
            },
            "alwaysShowImage": {
              "get": function () { return this.always_show_image; },
              "set": function (value) { this.always_show_image = value; }
            },
            "imagePosition": {
              "get": function () { return this.image_position; },
              "set": function (value) { this.image_position = value; }
            },
            "useStock": {
              "get": function () { return this.use_stock; },
              "set": function (value) { this.use_stock = value; }
            },
            "useUnderline": {
              "get": function () { return this.use_underline; },
              "set": function (value) { this.use_underline = value; }
            }
          },
          "static": {}
        },
        "ButtonAccessible": {
          "prototype": {},
          "static": {}
        },
        "ButtonBox": {
          "prototype": {
            "getChildNonHomogeneous": {
              "value": function () { return this.get_child_non_homogeneous.apply(this, arguments); }
            },
            "getChildSecondary": {
              "value": function () { return this.get_child_secondary.apply(this, arguments); }
            },
            "getLayout": {
              "value": function () { return this.get_layout.apply(this, arguments); }
            },
            "setChildNonHomogeneous": {
              "value": function () { return this.set_child_non_homogeneous.apply(this, arguments); }
            },
            "setChildSecondary": {
              "value": function () { return this.set_child_secondary.apply(this, arguments); }
            },
            "setLayout": {
              "value": function () { return this.set_layout.apply(this, arguments); }
            },
            "layoutStyle": {
              "get": function () { return this.layout_style; },
              "set": function (value) { this.layout_style = value; }
            }
          },
          "static": {}
        },
        "Calendar": {
          "prototype": {
            "clearMarks": {
              "value": function () { return this.clear_marks.apply(this, arguments); }
            },
            "getDate": {
              "value": function () { return this.get_date.apply(this, arguments); }
            },
            "getDayIsMarked": {
              "value": function () { return this.get_day_is_marked.apply(this, arguments); }
            },
            "getDetailHeightRows": {
              "value": function () { return this.get_detail_height_rows.apply(this, arguments); }
            },
            "getDetailWidthChars": {
              "value": function () { return this.get_detail_width_chars.apply(this, arguments); }
            },
            "getDisplayOptions": {
              "value": function () { return this.get_display_options.apply(this, arguments); }
            },
            "markDay": {
              "value": function () { return this.mark_day.apply(this, arguments); }
            },
            "selectDay": {
              "value": function () { return this.select_day.apply(this, arguments); }
            },
            "selectMonth": {
              "value": function () { return this.select_month.apply(this, arguments); }
            },
            "setDetailFunc": {
              "value": function () { return this.set_detail_func.apply(this, arguments); }
            },
            "setDetailHeightRows": {
              "value": function () { return this.set_detail_height_rows.apply(this, arguments); }
            },
            "setDetailWidthChars": {
              "value": function () { return this.set_detail_width_chars.apply(this, arguments); }
            },
            "setDisplayOptions": {
              "value": function () { return this.set_display_options.apply(this, arguments); }
            },
            "unmarkDay": {
              "value": function () { return this.unmark_day.apply(this, arguments); }
            },
            "detailHeightRows": {
              "get": function () { return this.detail_height_rows; },
              "set": function (value) { this.detail_height_rows = value; }
            },
            "detailWidthChars": {
              "get": function () { return this.detail_width_chars; },
              "set": function (value) { this.detail_width_chars = value; }
            },
            "noMonthChange": {
              "get": function () { return this.no_month_change; },
              "set": function (value) { this.no_month_change = value; }
            },
            "showDayNames": {
              "get": function () { return this.show_day_names; },
              "set": function (value) { this.show_day_names = value; }
            },
            "showDetails": {
              "get": function () { return this.show_details; },
              "set": function (value) { this.show_details = value; }
            },
            "showHeading": {
              "get": function () { return this.show_heading; },
              "set": function (value) { this.show_heading = value; }
            },
            "showWeekNumbers": {
              "get": function () { return this.show_week_numbers; },
              "set": function (value) { this.show_week_numbers = value; }
            }
          },
          "static": {}
        },
        "CellAccessible": {
          "prototype": {},
          "static": {}
        },
        "CellArea": {
          "prototype": {
            "activateCell": {
              "value": function () { return this.activate_cell.apply(this, arguments); }
            },
            "addFocusSibling": {
              "value": function () { return this.add_focus_sibling.apply(this, arguments); }
            },
            "addWithProperties": {
              "value": function () { return this.add_with_properties.apply(this, arguments); }
            },
            "applyAttributes": {
              "value": function () { return this.apply_attributes.apply(this, arguments); }
            },
            "attributeConnect": {
              "value": function () { return this.attribute_connect.apply(this, arguments); }
            },
            "attributeDisconnect": {
              "value": function () { return this.attribute_disconnect.apply(this, arguments); }
            },
            "attributeGetColumn": {
              "value": function () { return this.attribute_get_column.apply(this, arguments); }
            },
            "cellGet": {
              "value": function () { return this.cell_get.apply(this, arguments); }
            },
            "cellGetProperty": {
              "value": function () { return this.cell_get_property.apply(this, arguments); }
            },
            "cellGetValist": {
              "value": function () { return this.cell_get_valist.apply(this, arguments); }
            },
            "cellSet": {
              "value": function () { return this.cell_set.apply(this, arguments); }
            },
            "cellSetProperty": {
              "value": function () { return this.cell_set_property.apply(this, arguments); }
            },
            "cellSetValist": {
              "value": function () { return this.cell_set_valist.apply(this, arguments); }
            },
            "copyContext": {
              "value": function () { return this.copy_context.apply(this, arguments); }
            },
            "createContext": {
              "value": function () { return this.create_context.apply(this, arguments); }
            },
            "foreachAlloc": {
              "value": function () { return this.foreach_alloc.apply(this, arguments); }
            },
            "getCellAllocation": {
              "value": function () { return this.get_cell_allocation.apply(this, arguments); }
            },
            "getCellAtPosition": {
              "value": function () { return this.get_cell_at_position.apply(this, arguments); }
            },
            "getCurrentPathString": {
              "value": function () { return this.get_current_path_string.apply(this, arguments); }
            },
            "getEditWidget": {
              "value": function () { return this.get_edit_widget.apply(this, arguments); }
            },
            "getEditedCell": {
              "value": function () { return this.get_edited_cell.apply(this, arguments); }
            },
            "getFocusCell": {
              "value": function () { return this.get_focus_cell.apply(this, arguments); }
            },
            "getFocusFromSibling": {
              "value": function () { return this.get_focus_from_sibling.apply(this, arguments); }
            },
            "getFocusSiblings": {
              "value": function () { return this.get_focus_siblings.apply(this, arguments); }
            },
            "getPreferredHeight": {
              "value": function () { return this.get_preferred_height.apply(this, arguments); }
            },
            "getPreferredHeightForWidth": {
              "value": function () { return this.get_preferred_height_for_width.apply(this, arguments); }
            },
            "getPreferredWidth": {
              "value": function () { return this.get_preferred_width.apply(this, arguments); }
            },
            "getPreferredWidthForHeight": {
              "value": function () { return this.get_preferred_width_for_height.apply(this, arguments); }
            },
            "getRequestMode": {
              "value": function () { return this.get_request_mode.apply(this, arguments); }
            },
            "hasRenderer": {
              "value": function () { return this.has_renderer.apply(this, arguments); }
            },
            "innerCellArea": {
              "value": function () { return this.inner_cell_area.apply(this, arguments); }
            },
            "isActivatable": {
              "value": function () { return this.is_activatable.apply(this, arguments); }
            },
            "isFocusSibling": {
              "value": function () { return this.is_focus_sibling.apply(this, arguments); }
            },
            "removeFocusSibling": {
              "value": function () { return this.remove_focus_sibling.apply(this, arguments); }
            },
            "requestRenderer": {
              "value": function () { return this.request_renderer.apply(this, arguments); }
            },
            "setFocusCell": {
              "value": function () { return this.set_focus_cell.apply(this, arguments); }
            },
            "stopEditing": {
              "value": function () { return this.stop_editing.apply(this, arguments); }
            },
            "editWidget": {
              "get": function () { return this.edit_widget; },
              "set": function (value) { this.edit_widget = value; }
            },
            "editedCell": {
              "get": function () { return this.edited_cell; },
              "set": function (value) { this.edited_cell = value; }
            },
            "focusCell": {
              "get": function () { return this.focus_cell; },
              "set": function (value) { this.focus_cell = value; }
            }
          },
          "static": {}
        },
        "CellAreaBox": {
          "prototype": {
            "getSpacing": {
              "value": function () { return this.get_spacing.apply(this, arguments); }
            },
            "packEnd": {
              "value": function () { return this.pack_end.apply(this, arguments); }
            },
            "packStart": {
              "value": function () { return this.pack_start.apply(this, arguments); }
            },
            "setSpacing": {
              "value": function () { return this.set_spacing.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "CellAreaContext": {
          "prototype": {
            "getAllocation": {
              "value": function () { return this.get_allocation.apply(this, arguments); }
            },
            "getArea": {
              "value": function () { return this.get_area.apply(this, arguments); }
            },
            "getPreferredHeight": {
              "value": function () { return this.get_preferred_height.apply(this, arguments); }
            },
            "getPreferredHeightForWidth": {
              "value": function () { return this.get_preferred_height_for_width.apply(this, arguments); }
            },
            "getPreferredWidth": {
              "value": function () { return this.get_preferred_width.apply(this, arguments); }
            },
            "getPreferredWidthForHeight": {
              "value": function () { return this.get_preferred_width_for_height.apply(this, arguments); }
            },
            "pushPreferredHeight": {
              "value": function () { return this.push_preferred_height.apply(this, arguments); }
            },
            "pushPreferredWidth": {
              "value": function () { return this.push_preferred_width.apply(this, arguments); }
            },
            "minimumHeight": {
              "get": function () { return this.minimum_height; },
              "set": function (value) { this.minimum_height = value; }
            },
            "minimumWidth": {
              "get": function () { return this.minimum_width; },
              "set": function (value) { this.minimum_width = value; }
            },
            "naturalHeight": {
              "get": function () { return this.natural_height; },
              "set": function (value) { this.natural_height = value; }
            },
            "naturalWidth": {
              "get": function () { return this.natural_width; },
              "set": function (value) { this.natural_width = value; }
            }
          },
          "static": {}
        },
        "CellRenderer": {
          "prototype": {
            "getAlignedArea": {
              "value": function () { return this.get_aligned_area.apply(this, arguments); }
            },
            "getAlignment": {
              "value": function () { return this.get_alignment.apply(this, arguments); }
            },
            "getFixedSize": {
              "value": function () { return this.get_fixed_size.apply(this, arguments); }
            },
            "getPadding": {
              "value": function () { return this.get_padding.apply(this, arguments); }
            },
            "getPreferredHeight": {
              "value": function () { return this.get_preferred_height.apply(this, arguments); }
            },
            "getPreferredHeightForWidth": {
              "value": function () { return this.get_preferred_height_for_width.apply(this, arguments); }
            },
            "getPreferredSize": {
              "value": function () { return this.get_preferred_size.apply(this, arguments); }
            },
            "getPreferredWidth": {
              "value": function () { return this.get_preferred_width.apply(this, arguments); }
            },
            "getPreferredWidthForHeight": {
              "value": function () { return this.get_preferred_width_for_height.apply(this, arguments); }
            },
            "getRequestMode": {
              "value": function () { return this.get_request_mode.apply(this, arguments); }
            },
            "getSensitive": {
              "value": function () { return this.get_sensitive.apply(this, arguments); }
            },
            "getSize": {
              "value": function () { return this.get_size.apply(this, arguments); }
            },
            "getState": {
              "value": function () { return this.get_state.apply(this, arguments); }
            },
            "getVisible": {
              "value": function () { return this.get_visible.apply(this, arguments); }
            },
            "isActivatable": {
              "value": function () { return this.is_activatable.apply(this, arguments); }
            },
            "setAlignment": {
              "value": function () { return this.set_alignment.apply(this, arguments); }
            },
            "setFixedSize": {
              "value": function () { return this.set_fixed_size.apply(this, arguments); }
            },
            "setPadding": {
              "value": function () { return this.set_padding.apply(this, arguments); }
            },
            "setSensitive": {
              "value": function () { return this.set_sensitive.apply(this, arguments); }
            },
            "setVisible": {
              "value": function () { return this.set_visible.apply(this, arguments); }
            },
            "startEditing": {
              "value": function () { return this.start_editing.apply(this, arguments); }
            },
            "stopEditing": {
              "value": function () { return this.stop_editing.apply(this, arguments); }
            },
            "cellBackground": {
              "get": function () { return this.cell_background; },
              "set": function (value) { this.cell_background = value; }
            },
            "cellBackgroundGdk": {
              "get": function () { return this.cell_background_gdk; },
              "set": function (value) { this.cell_background_gdk = value; }
            },
            "cellBackgroundRgba": {
              "get": function () { return this.cell_background_rgba; },
              "set": function (value) { this.cell_background_rgba = value; }
            },
            "cellBackgroundSet": {
              "get": function () { return this.cell_background_set; },
              "set": function (value) { this.cell_background_set = value; }
            },
            "isExpanded": {
              "get": function () { return this.is_expanded; },
              "set": function (value) { this.is_expanded = value; }
            },
            "isExpander": {
              "get": function () { return this.is_expander; },
              "set": function (value) { this.is_expander = value; }
            }
          },
          "static": {}
        },
        "CellRendererAccel": {
          "prototype": {
            "accelKey": {
              "get": function () { return this.accel_key; },
              "set": function (value) { this.accel_key = value; }
            },
            "accelMode": {
              "get": function () { return this.accel_mode; },
              "set": function (value) { this.accel_mode = value; }
            },
            "accelMods": {
              "get": function () { return this.accel_mods; },
              "set": function (value) { this.accel_mods = value; }
            }
          },
          "static": {}
        },
        "CellRendererCombo": {
          "prototype": {
            "hasEntry": {
              "get": function () { return this.has_entry; },
              "set": function (value) { this.has_entry = value; }
            },
            "textColumn": {
              "get": function () { return this.text_column; },
              "set": function (value) { this.text_column = value; }
            }
          },
          "static": {}
        },
        "CellRendererPixbuf": {
          "prototype": {
            "followState": {
              "get": function () { return this.follow_state; },
              "set": function (value) { this.follow_state = value; }
            },
            "iconName": {
              "get": function () { return this.icon_name; },
              "set": function (value) { this.icon_name = value; }
            },
            "pixbufExpanderClosed": {
              "get": function () { return this.pixbuf_expander_closed; },
              "set": function (value) { this.pixbuf_expander_closed = value; }
            },
            "pixbufExpanderOpen": {
              "get": function () { return this.pixbuf_expander_open; },
              "set": function (value) { this.pixbuf_expander_open = value; }
            },
            "stockDetail": {
              "get": function () { return this.stock_detail; },
              "set": function (value) { this.stock_detail = value; }
            },
            "stockId": {
              "get": function () { return this.stock_id; },
              "set": function (value) { this.stock_id = value; }
            },
            "stockSize": {
              "get": function () { return this.stock_size; },
              "set": function (value) { this.stock_size = value; }
            }
          },
          "static": {}
        },
        "CellRendererProgress": {
          "prototype": {
            "textXalign": {
              "get": function () { return this.text_xalign; },
              "set": function (value) { this.text_xalign = value; }
            },
            "textYalign": {
              "get": function () { return this.text_yalign; },
              "set": function (value) { this.text_yalign = value; }
            }
          },
          "static": {}
        },
        "CellRendererSpin": {
          "prototype": {
            "climbRate": {
              "get": function () { return this.climb_rate; },
              "set": function (value) { this.climb_rate = value; }
            }
          },
          "static": {}
        },
        "CellRendererSpinner": {
          "prototype": {},
          "static": {}
        },
        "CellRendererText": {
          "prototype": {
            "setFixedHeightFromFont": {
              "value": function () { return this.set_fixed_height_from_font.apply(this, arguments); }
            },
            "alignSet": {
              "get": function () { return this.align_set; },
              "set": function (value) { this.align_set = value; }
            },
            "backgroundGdk": {
              "get": function () { return this.background_gdk; },
              "set": function (value) { this.background_gdk = value; }
            },
            "backgroundRgba": {
              "get": function () { return this.background_rgba; },
              "set": function (value) { this.background_rgba = value; }
            },
            "backgroundSet": {
              "get": function () { return this.background_set; },
              "set": function (value) { this.background_set = value; }
            },
            "editableSet": {
              "get": function () { return this.editable_set; },
              "set": function (value) { this.editable_set = value; }
            },
            "ellipsizeSet": {
              "get": function () { return this.ellipsize_set; },
              "set": function (value) { this.ellipsize_set = value; }
            },
            "familySet": {
              "get": function () { return this.family_set; },
              "set": function (value) { this.family_set = value; }
            },
            "fontDesc": {
              "get": function () { return this.font_desc; },
              "set": function (value) { this.font_desc = value; }
            },
            "foregroundGdk": {
              "get": function () { return this.foreground_gdk; },
              "set": function (value) { this.foreground_gdk = value; }
            },
            "foregroundRgba": {
              "get": function () { return this.foreground_rgba; },
              "set": function (value) { this.foreground_rgba = value; }
            },
            "foregroundSet": {
              "get": function () { return this.foreground_set; },
              "set": function (value) { this.foreground_set = value; }
            },
            "languageSet": {
              "get": function () { return this.language_set; },
              "set": function (value) { this.language_set = value; }
            },
            "maxWidthChars": {
              "get": function () { return this.max_width_chars; },
              "set": function (value) { this.max_width_chars = value; }
            },
            "placeholderText": {
              "get": function () { return this.placeholder_text; },
              "set": function (value) { this.placeholder_text = value; }
            },
            "riseSet": {
              "get": function () { return this.rise_set; },
              "set": function (value) { this.rise_set = value; }
            },
            "scaleSet": {
              "get": function () { return this.scale_set; },
              "set": function (value) { this.scale_set = value; }
            },
            "singleParagraphMode": {
              "get": function () { return this.single_paragraph_mode; },
              "set": function (value) { this.single_paragraph_mode = value; }
            },
            "sizePoints": {
              "get": function () { return this.size_points; },
              "set": function (value) { this.size_points = value; }
            },
            "sizeSet": {
              "get": function () { return this.size_set; },
              "set": function (value) { this.size_set = value; }
            },
            "stretchSet": {
              "get": function () { return this.stretch_set; },
              "set": function (value) { this.stretch_set = value; }
            },
            "strikethroughSet": {
              "get": function () { return this.strikethrough_set; },
              "set": function (value) { this.strikethrough_set = value; }
            },
            "styleSet": {
              "get": function () { return this.style_set; },
              "set": function (value) { this.style_set = value; }
            },
            "underlineSet": {
              "get": function () { return this.underline_set; },
              "set": function (value) { this.underline_set = value; }
            },
            "variantSet": {
              "get": function () { return this.variant_set; },
              "set": function (value) { this.variant_set = value; }
            },
            "weightSet": {
              "get": function () { return this.weight_set; },
              "set": function (value) { this.weight_set = value; }
            },
            "widthChars": {
              "get": function () { return this.width_chars; },
              "set": function (value) { this.width_chars = value; }
            },
            "wrapMode": {
              "get": function () { return this.wrap_mode; },
              "set": function (value) { this.wrap_mode = value; }
            },
            "wrapWidth": {
              "get": function () { return this.wrap_width; },
              "set": function (value) { this.wrap_width = value; }
            }
          },
          "static": {}
        },
        "CellRendererToggle": {
          "prototype": {
            "getActivatable": {
              "value": function () { return this.get_activatable.apply(this, arguments); }
            },
            "getActive": {
              "value": function () { return this.get_active.apply(this, arguments); }
            },
            "getRadio": {
              "value": function () { return this.get_radio.apply(this, arguments); }
            },
            "setActivatable": {
              "value": function () { return this.set_activatable.apply(this, arguments); }
            },
            "setActive": {
              "value": function () { return this.set_active.apply(this, arguments); }
            },
            "setRadio": {
              "value": function () { return this.set_radio.apply(this, arguments); }
            },
            "indicatorSize": {
              "get": function () { return this.indicator_size; },
              "set": function (value) { this.indicator_size = value; }
            }
          },
          "static": {}
        },
        "CellView": {
          "prototype": {
            "getDisplayedRow": {
              "value": function () { return this.get_displayed_row.apply(this, arguments); }
            },
            "getDrawSensitive": {
              "value": function () { return this.get_draw_sensitive.apply(this, arguments); }
            },
            "getFitModel": {
              "value": function () { return this.get_fit_model.apply(this, arguments); }
            },
            "getModel": {
              "value": function () { return this.get_model.apply(this, arguments); }
            },
            "getSizeOfRow": {
              "value": function () { return this.get_size_of_row.apply(this, arguments); }
            },
            "setBackgroundColor": {
              "value": function () { return this.set_background_color.apply(this, arguments); }
            },
            "setBackgroundRgba": {
              "value": function () { return this.set_background_rgba.apply(this, arguments); }
            },
            "setDisplayedRow": {
              "value": function () { return this.set_displayed_row.apply(this, arguments); }
            },
            "setDrawSensitive": {
              "value": function () { return this.set_draw_sensitive.apply(this, arguments); }
            },
            "setFitModel": {
              "value": function () { return this.set_fit_model.apply(this, arguments); }
            },
            "setModel": {
              "value": function () { return this.set_model.apply(this, arguments); }
            },
            "backgroundGdk": {
              "get": function () { return this.background_gdk; },
              "set": function (value) { this.background_gdk = value; }
            },
            "backgroundRgba": {
              "get": function () { return this.background_rgba; },
              "set": function (value) { this.background_rgba = value; }
            },
            "backgroundSet": {
              "get": function () { return this.background_set; },
              "set": function (value) { this.background_set = value; }
            },
            "cellArea": {
              "get": function () { return this.cell_area; },
              "set": function (value) { this.cell_area = value; }
            },
            "cellAreaContext": {
              "get": function () { return this.cell_area_context; },
              "set": function (value) { this.cell_area_context = value; }
            },
            "drawSensitive": {
              "get": function () { return this.draw_sensitive; },
              "set": function (value) { this.draw_sensitive = value; }
            },
            "fitModel": {
              "get": function () { return this.fit_model; },
              "set": function (value) { this.fit_model = value; }
            }
          },
          "static": {}
        },
        "CheckButton": {
          "prototype": {},
          "static": {}
        },
        "CheckMenuItem": {
          "prototype": {
            "getActive": {
              "value": function () { return this.get_active.apply(this, arguments); }
            },
            "getDrawAsRadio": {
              "value": function () { return this.get_draw_as_radio.apply(this, arguments); }
            },
            "getInconsistent": {
              "value": function () { return this.get_inconsistent.apply(this, arguments); }
            },
            "setActive": {
              "value": function () { return this.set_active.apply(this, arguments); }
            },
            "setDrawAsRadio": {
              "value": function () { return this.set_draw_as_radio.apply(this, arguments); }
            },
            "setInconsistent": {
              "value": function () { return this.set_inconsistent.apply(this, arguments); }
            },
            "drawAsRadio": {
              "get": function () { return this.draw_as_radio; },
              "set": function (value) { this.draw_as_radio = value; }
            }
          },
          "static": {}
        },
        "CheckMenuItemAccessible": {
          "prototype": {},
          "static": {}
        },
        "Clipboard": {
          "prototype": {
            "getDisplay": {
              "value": function () { return this.get_display.apply(this, arguments); }
            },
            "getOwner": {
              "value": function () { return this.get_owner.apply(this, arguments); }
            },
            "requestContents": {
              "value": function () { return this.request_contents.apply(this, arguments); }
            },
            "requestImage": {
              "value": function () { return this.request_image.apply(this, arguments); }
            },
            "requestRichText": {
              "value": function () { return this.request_rich_text.apply(this, arguments); }
            },
            "requestTargets": {
              "value": function () { return this.request_targets.apply(this, arguments); }
            },
            "requestText": {
              "value": function () { return this.request_text.apply(this, arguments); }
            },
            "requestUris": {
              "value": function () { return this.request_uris.apply(this, arguments); }
            },
            "setCanStore": {
              "value": function () { return this.set_can_store.apply(this, arguments); }
            },
            "setImage": {
              "value": function () { return this.set_image.apply(this, arguments); }
            },
            "setText": {
              "value": function () { return this.set_text.apply(this, arguments); }
            },
            "setWithData": {
              "value": function () { return this.set_with_data.apply(this, arguments); }
            },
            "setWithOwner": {
              "value": function () { return this.set_with_owner.apply(this, arguments); }
            },
            "waitForContents": {
              "value": function () { return this.wait_for_contents.apply(this, arguments); }
            },
            "waitForImage": {
              "value": function () { return this.wait_for_image.apply(this, arguments); }
            },
            "waitForRichText": {
              "value": function () { return this.wait_for_rich_text.apply(this, arguments); }
            },
            "waitForTargets": {
              "value": function () { return this.wait_for_targets.apply(this, arguments); }
            },
            "waitForText": {
              "value": function () { return this.wait_for_text.apply(this, arguments); }
            },
            "waitForUris": {
              "value": function () { return this.wait_for_uris.apply(this, arguments); }
            },
            "waitIsImageAvailable": {
              "value": function () { return this.wait_is_image_available.apply(this, arguments); }
            },
            "waitIsRichTextAvailable": {
              "value": function () { return this.wait_is_rich_text_available.apply(this, arguments); }
            },
            "waitIsTargetAvailable": {
              "value": function () { return this.wait_is_target_available.apply(this, arguments); }
            },
            "waitIsTextAvailable": {
              "value": function () { return this.wait_is_text_available.apply(this, arguments); }
            },
            "waitIsUrisAvailable": {
              "value": function () { return this.wait_is_uris_available.apply(this, arguments); }
            }
          },
          "static": {
            "getDefault": {
              "value": function () { return this.get_default.apply(this, arguments); }
            },
            "getForDisplay": {
              "value": function () { return this.get_for_display.apply(this, arguments); }
            }
          }
        },
        "ColorButton": {
          "prototype": {
            "getAlpha": {
              "value": function () { return this.get_alpha.apply(this, arguments); }
            },
            "getColor": {
              "value": function () { return this.get_color.apply(this, arguments); }
            },
            "getRgba": {
              "value": function () { return this.get_rgba.apply(this, arguments); }
            },
            "getTitle": {
              "value": function () { return this.get_title.apply(this, arguments); }
            },
            "getUseAlpha": {
              "value": function () { return this.get_use_alpha.apply(this, arguments); }
            },
            "setAlpha": {
              "value": function () { return this.set_alpha.apply(this, arguments); }
            },
            "setColor": {
              "value": function () { return this.set_color.apply(this, arguments); }
            },
            "setRgba": {
              "value": function () { return this.set_rgba.apply(this, arguments); }
            },
            "setTitle": {
              "value": function () { return this.set_title.apply(this, arguments); }
            },
            "setUseAlpha": {
              "value": function () { return this.set_use_alpha.apply(this, arguments); }
            },
            "useAlpha": {
              "get": function () { return this.use_alpha; },
              "set": function (value) { this.use_alpha = value; }
            }
          },
          "static": {}
        },
        "ColorChooserDialog": {
          "prototype": {
            "showEditor": {
              "get": function () { return this.show_editor; },
              "set": function (value) { this.show_editor = value; }
            }
          },
          "static": {}
        },
        "ColorChooserWidget": {
          "prototype": {
            "showEditor": {
              "get": function () { return this.show_editor; },
              "set": function (value) { this.show_editor = value; }
            }
          },
          "static": {}
        },
        "ColorSelection": {
          "prototype": {
            "getCurrentAlpha": {
              "value": function () { return this.get_current_alpha.apply(this, arguments); }
            },
            "getCurrentColor": {
              "value": function () { return this.get_current_color.apply(this, arguments); }
            },
            "getCurrentRgba": {
              "value": function () { return this.get_current_rgba.apply(this, arguments); }
            },
            "getHasOpacityControl": {
              "value": function () { return this.get_has_opacity_control.apply(this, arguments); }
            },
            "getHasPalette": {
              "value": function () { return this.get_has_palette.apply(this, arguments); }
            },
            "getPreviousAlpha": {
              "value": function () { return this.get_previous_alpha.apply(this, arguments); }
            },
            "getPreviousColor": {
              "value": function () { return this.get_previous_color.apply(this, arguments); }
            },
            "getPreviousRgba": {
              "value": function () { return this.get_previous_rgba.apply(this, arguments); }
            },
            "isAdjusting": {
              "value": function () { return this.is_adjusting.apply(this, arguments); }
            },
            "setCurrentAlpha": {
              "value": function () { return this.set_current_alpha.apply(this, arguments); }
            },
            "setCurrentColor": {
              "value": function () { return this.set_current_color.apply(this, arguments); }
            },
            "setCurrentRgba": {
              "value": function () { return this.set_current_rgba.apply(this, arguments); }
            },
            "setHasOpacityControl": {
              "value": function () { return this.set_has_opacity_control.apply(this, arguments); }
            },
            "setHasPalette": {
              "value": function () { return this.set_has_palette.apply(this, arguments); }
            },
            "setPreviousAlpha": {
              "value": function () { return this.set_previous_alpha.apply(this, arguments); }
            },
            "setPreviousColor": {
              "value": function () { return this.set_previous_color.apply(this, arguments); }
            },
            "setPreviousRgba": {
              "value": function () { return this.set_previous_rgba.apply(this, arguments); }
            },
            "currentAlpha": {
              "get": function () { return this.current_alpha; },
              "set": function (value) { this.current_alpha = value; }
            },
            "currentColor": {
              "get": function () { return this.current_color; },
              "set": function (value) { this.current_color = value; }
            },
            "currentRgba": {
              "get": function () { return this.current_rgba; },
              "set": function (value) { this.current_rgba = value; }
            },
            "hasOpacityControl": {
              "get": function () { return this.has_opacity_control; },
              "set": function (value) { this.has_opacity_control = value; }
            },
            "hasPalette": {
              "get": function () { return this.has_palette; },
              "set": function (value) { this.has_palette = value; }
            }
          },
          "static": {
            "paletteFromString": {
              "value": function () { return this.palette_from_string.apply(this, arguments); }
            },
            "paletteToString": {
              "value": function () { return this.palette_to_string.apply(this, arguments); }
            },
            "setChangePaletteWithScreenHook": {
              "value": function () { return this.set_change_palette_with_screen_hook.apply(this, arguments); }
            }
          }
        },
        "ColorSelectionDialog": {
          "prototype": {
            "getColorSelection": {
              "value": function () { return this.get_color_selection.apply(this, arguments); }
            },
            "cancelButton": {
              "get": function () { return this.cancel_button; },
              "set": function (value) { this.cancel_button = value; }
            },
            "colorSelection": {
              "get": function () { return this.color_selection; },
              "set": function (value) { this.color_selection = value; }
            },
            "helpButton": {
              "get": function () { return this.help_button; },
              "set": function (value) { this.help_button = value; }
            },
            "okButton": {
              "get": function () { return this.ok_button; },
              "set": function (value) { this.ok_button = value; }
            }
          },
          "static": {}
        },
        "ComboBox": {
          "prototype": {
            "getActive": {
              "value": function () { return this.get_active.apply(this, arguments); }
            },
            "getActiveId": {
              "value": function () { return this.get_active_id.apply(this, arguments); }
            },
            "getActiveIter": {
              "value": function () { return this.get_active_iter.apply(this, arguments); }
            },
            "getAddTearoffs": {
              "value": function () { return this.get_add_tearoffs.apply(this, arguments); }
            },
            "getButtonSensitivity": {
              "value": function () { return this.get_button_sensitivity.apply(this, arguments); }
            },
            "getColumnSpanColumn": {
              "value": function () { return this.get_column_span_column.apply(this, arguments); }
            },
            "getEntryTextColumn": {
              "value": function () { return this.get_entry_text_column.apply(this, arguments); }
            },
            "getFocusOnClick": {
              "value": function () { return this.get_focus_on_click.apply(this, arguments); }
            },
            "getHasEntry": {
              "value": function () { return this.get_has_entry.apply(this, arguments); }
            },
            "getIdColumn": {
              "value": function () { return this.get_id_column.apply(this, arguments); }
            },
            "getModel": {
              "value": function () { return this.get_model.apply(this, arguments); }
            },
            "getPopupAccessible": {
              "value": function () { return this.get_popup_accessible.apply(this, arguments); }
            },
            "getPopupFixedWidth": {
              "value": function () { return this.get_popup_fixed_width.apply(this, arguments); }
            },
            "getRowSeparatorFunc": {
              "value": function () { return this.get_row_separator_func.apply(this, arguments); }
            },
            "getRowSpanColumn": {
              "value": function () { return this.get_row_span_column.apply(this, arguments); }
            },
            "getTitle": {
              "value": function () { return this.get_title.apply(this, arguments); }
            },
            "getWrapWidth": {
              "value": function () { return this.get_wrap_width.apply(this, arguments); }
            },
            "popupForDevice": {
              "value": function () { return this.popup_for_device.apply(this, arguments); }
            },
            "setActive": {
              "value": function () { return this.set_active.apply(this, arguments); }
            },
            "setActiveId": {
              "value": function () { return this.set_active_id.apply(this, arguments); }
            },
            "setActiveIter": {
              "value": function () { return this.set_active_iter.apply(this, arguments); }
            },
            "setAddTearoffs": {
              "value": function () { return this.set_add_tearoffs.apply(this, arguments); }
            },
            "setButtonSensitivity": {
              "value": function () { return this.set_button_sensitivity.apply(this, arguments); }
            },
            "setColumnSpanColumn": {
              "value": function () { return this.set_column_span_column.apply(this, arguments); }
            },
            "setEntryTextColumn": {
              "value": function () { return this.set_entry_text_column.apply(this, arguments); }
            },
            "setFocusOnClick": {
              "value": function () { return this.set_focus_on_click.apply(this, arguments); }
            },
            "setIdColumn": {
              "value": function () { return this.set_id_column.apply(this, arguments); }
            },
            "setModel": {
              "value": function () { return this.set_model.apply(this, arguments); }
            },
            "setPopupFixedWidth": {
              "value": function () { return this.set_popup_fixed_width.apply(this, arguments); }
            },
            "setRowSeparatorFunc": {
              "value": function () { return this.set_row_separator_func.apply(this, arguments); }
            },
            "setRowSpanColumn": {
              "value": function () { return this.set_row_span_column.apply(this, arguments); }
            },
            "setTitle": {
              "value": function () { return this.set_title.apply(this, arguments); }
            },
            "setWrapWidth": {
              "value": function () { return this.set_wrap_width.apply(this, arguments); }
            },
            "activeId": {
              "get": function () { return this.active_id; },
              "set": function (value) { this.active_id = value; }
            },
            "addTearoffs": {
              "get": function () { return this.add_tearoffs; },
              "set": function (value) { this.add_tearoffs = value; }
            },
            "buttonSensitivity": {
              "get": function () { return this.button_sensitivity; },
              "set": function (value) { this.button_sensitivity = value; }
            },
            "cellArea": {
              "get": function () { return this.cell_area; },
              "set": function (value) { this.cell_area = value; }
            },
            "columnSpanColumn": {
              "get": function () { return this.column_span_column; },
              "set": function (value) { this.column_span_column = value; }
            },
            "entryTextColumn": {
              "get": function () { return this.entry_text_column; },
              "set": function (value) { this.entry_text_column = value; }
            },
            "hasEntry": {
              "get": function () { return this.has_entry; },
              "set": function (value) { this.has_entry = value; }
            },
            "hasFrame": {
              "get": function () { return this.has_frame; },
              "set": function (value) { this.has_frame = value; }
            },
            "idColumn": {
              "get": function () { return this.id_column; },
              "set": function (value) { this.id_column = value; }
            },
            "popupFixedWidth": {
              "get": function () { return this.popup_fixed_width; },
              "set": function (value) { this.popup_fixed_width = value; }
            },
            "popupShown": {
              "get": function () { return this.popup_shown; },
              "set": function (value) { this.popup_shown = value; }
            },
            "rowSpanColumn": {
              "get": function () { return this.row_span_column; },
              "set": function (value) { this.row_span_column = value; }
            },
            "tearoffTitle": {
              "get": function () { return this.tearoff_title; },
              "set": function (value) { this.tearoff_title = value; }
            },
            "wrapWidth": {
              "get": function () { return this.wrap_width; },
              "set": function (value) { this.wrap_width = value; }
            }
          },
          "static": {}
        },
        "ComboBoxAccessible": {
          "prototype": {},
          "static": {}
        },
        "ComboBoxText": {
          "prototype": {
            "appendText": {
              "value": function () { return this.append_text.apply(this, arguments); }
            },
            "getActiveText": {
              "value": function () { return this.get_active_text.apply(this, arguments); }
            },
            "insertText": {
              "value": function () { return this.insert_text.apply(this, arguments); }
            },
            "prependText": {
              "value": function () { return this.prepend_text.apply(this, arguments); }
            },
            "removeAll": {
              "value": function () { return this.remove_all.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Container": {
          "prototype": {
            "addWithProperties": {
              "value": function () { return this.add_with_properties.apply(this, arguments); }
            },
            "checkResize": {
              "value": function () { return this.check_resize.apply(this, arguments); }
            },
            "childGet": {
              "value": function () { return this.child_get.apply(this, arguments); }
            },
            "childGetProperty": {
              "value": function () { return this.child_get_property.apply(this, arguments); }
            },
            "childGetValist": {
              "value": function () { return this.child_get_valist.apply(this, arguments); }
            },
            "childNotify": {
              "value": function () { return this.child_notify.apply(this, arguments); }
            },
            "childNotifyByPspec": {
              "value": function () { return this.child_notify_by_pspec.apply(this, arguments); }
            },
            "childSet": {
              "value": function () { return this.child_set.apply(this, arguments); }
            },
            "childSetProperty": {
              "value": function () { return this.child_set_property.apply(this, arguments); }
            },
            "childSetValist": {
              "value": function () { return this.child_set_valist.apply(this, arguments); }
            },
            "childType": {
              "value": function () { return this.child_type.apply(this, arguments); }
            },
            "getBorderWidth": {
              "value": function () { return this.get_border_width.apply(this, arguments); }
            },
            "getChildren": {
              "value": function () { return this.get_children.apply(this, arguments); }
            },
            "getFocusChain": {
              "value": function () { return this.get_focus_chain.apply(this, arguments); }
            },
            "getFocusChild": {
              "value": function () { return this.get_focus_child.apply(this, arguments); }
            },
            "getFocusHadjustment": {
              "value": function () { return this.get_focus_hadjustment.apply(this, arguments); }
            },
            "getFocusVadjustment": {
              "value": function () { return this.get_focus_vadjustment.apply(this, arguments); }
            },
            "getPathForChild": {
              "value": function () { return this.get_path_for_child.apply(this, arguments); }
            },
            "getResizeMode": {
              "value": function () { return this.get_resize_mode.apply(this, arguments); }
            },
            "propagateDraw": {
              "value": function () { return this.propagate_draw.apply(this, arguments); }
            },
            "resizeChildren": {
              "value": function () { return this.resize_children.apply(this, arguments); }
            },
            "setBorderWidth": {
              "value": function () { return this.set_border_width.apply(this, arguments); }
            },
            "setFocusChain": {
              "value": function () { return this.set_focus_chain.apply(this, arguments); }
            },
            "setFocusChild": {
              "value": function () { return this.set_focus_child.apply(this, arguments); }
            },
            "setFocusHadjustment": {
              "value": function () { return this.set_focus_hadjustment.apply(this, arguments); }
            },
            "setFocusVadjustment": {
              "value": function () { return this.set_focus_vadjustment.apply(this, arguments); }
            },
            "setReallocateRedraws": {
              "value": function () { return this.set_reallocate_redraws.apply(this, arguments); }
            },
            "setResizeMode": {
              "value": function () { return this.set_resize_mode.apply(this, arguments); }
            },
            "unsetFocusChain": {
              "value": function () { return this.unset_focus_chain.apply(this, arguments); }
            },
            "borderWidth": {
              "get": function () { return this.border_width; },
              "set": function (value) { this.border_width = value; }
            },
            "resizeMode": {
              "get": function () { return this.resize_mode; },
              "set": function (value) { this.resize_mode = value; }
            }
          },
          "static": {}
        },
        "ContainerAccessible": {
          "prototype": {},
          "static": {}
        },
        "ContainerCellAccessible": {
          "prototype": {
            "addChild": {
              "value": function () { return this.add_child.apply(this, arguments); }
            },
            "getChildren": {
              "value": function () { return this.get_children.apply(this, arguments); }
            },
            "removeChild": {
              "value": function () { return this.remove_child.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "CssProvider": {
          "prototype": {
            "loadFromData": {
              "value": function () { return this.load_from_data.apply(this, arguments); }
            },
            "loadFromFile": {
              "value": function () { return this.load_from_file.apply(this, arguments); }
            },
            "loadFromPath": {
              "value": function () { return this.load_from_path.apply(this, arguments); }
            },
            "loadFromResource": {
              "value": function () { return this.load_from_resource.apply(this, arguments); }
            },
            "toString": {
              "value": function () { return this.to_string.apply(this, arguments); }
            }
          },
          "static": {
            "getDefault": {
              "value": function () { return this.get_default.apply(this, arguments); }
            },
            "getNamed": {
              "value": function () { return this.get_named.apply(this, arguments); }
            }
          }
        },
        "Dialog": {
          "prototype": {
            "addActionWidget": {
              "value": function () { return this.add_action_widget.apply(this, arguments); }
            },
            "addButton": {
              "value": function () { return this.add_button.apply(this, arguments); }
            },
            "addButtons": {
              "value": function () { return this.add_buttons.apply(this, arguments); }
            },
            "getActionArea": {
              "value": function () { return this.get_action_area.apply(this, arguments); }
            },
            "getContentArea": {
              "value": function () { return this.get_content_area.apply(this, arguments); }
            },
            "getHeaderBar": {
              "value": function () { return this.get_header_bar.apply(this, arguments); }
            },
            "getResponseForWidget": {
              "value": function () { return this.get_response_for_widget.apply(this, arguments); }
            },
            "getWidgetForResponse": {
              "value": function () { return this.get_widget_for_response.apply(this, arguments); }
            },
            "setAlternativeButtonOrder": {
              "value": function () { return this.set_alternative_button_order.apply(this, arguments); }
            },
            "setAlternativeButtonOrderFromArray": {
              "value": function () { return this.set_alternative_button_order_from_array.apply(this, arguments); }
            },
            "setDefaultResponse": {
              "value": function () { return this.set_default_response.apply(this, arguments); }
            },
            "setResponseSensitive": {
              "value": function () { return this.set_response_sensitive.apply(this, arguments); }
            },
            "useHeaderBar": {
              "get": function () { return this.use_header_bar; },
              "set": function (value) { this.use_header_bar = value; }
            }
          },
          "static": {}
        },
        "DrawingArea": {
          "prototype": {},
          "static": {}
        },
        "Entry": {
          "prototype": {
            "getActivatesDefault": {
              "value": function () { return this.get_activates_default.apply(this, arguments); }
            },
            "getAlignment": {
              "value": function () { return this.get_alignment.apply(this, arguments); }
            },
            "getAttributes": {
              "value": function () { return this.get_attributes.apply(this, arguments); }
            },
            "getBuffer": {
              "value": function () { return this.get_buffer.apply(this, arguments); }
            },
            "getCompletion": {
              "value": function () { return this.get_completion.apply(this, arguments); }
            },
            "getCurrentIconDragSource": {
              "value": function () { return this.get_current_icon_drag_source.apply(this, arguments); }
            },
            "getCursorHadjustment": {
              "value": function () { return this.get_cursor_hadjustment.apply(this, arguments); }
            },
            "getHasFrame": {
              "value": function () { return this.get_has_frame.apply(this, arguments); }
            },
            "getIconActivatable": {
              "value": function () { return this.get_icon_activatable.apply(this, arguments); }
            },
            "getIconArea": {
              "value": function () { return this.get_icon_area.apply(this, arguments); }
            },
            "getIconAtPos": {
              "value": function () { return this.get_icon_at_pos.apply(this, arguments); }
            },
            "getIconGicon": {
              "value": function () { return this.get_icon_gicon.apply(this, arguments); }
            },
            "getIconName": {
              "value": function () { return this.get_icon_name.apply(this, arguments); }
            },
            "getIconPixbuf": {
              "value": function () { return this.get_icon_pixbuf.apply(this, arguments); }
            },
            "getIconSensitive": {
              "value": function () { return this.get_icon_sensitive.apply(this, arguments); }
            },
            "getIconStock": {
              "value": function () { return this.get_icon_stock.apply(this, arguments); }
            },
            "getIconStorageType": {
              "value": function () { return this.get_icon_storage_type.apply(this, arguments); }
            },
            "getIconTooltipMarkup": {
              "value": function () { return this.get_icon_tooltip_markup.apply(this, arguments); }
            },
            "getIconTooltipText": {
              "value": function () { return this.get_icon_tooltip_text.apply(this, arguments); }
            },
            "getInnerBorder": {
              "value": function () { return this.get_inner_border.apply(this, arguments); }
            },
            "getInputHints": {
              "value": function () { return this.get_input_hints.apply(this, arguments); }
            },
            "getInputPurpose": {
              "value": function () { return this.get_input_purpose.apply(this, arguments); }
            },
            "getInvisibleChar": {
              "value": function () { return this.get_invisible_char.apply(this, arguments); }
            },
            "getLayout": {
              "value": function () { return this.get_layout.apply(this, arguments); }
            },
            "getLayoutOffsets": {
              "value": function () { return this.get_layout_offsets.apply(this, arguments); }
            },
            "getMaxLength": {
              "value": function () { return this.get_max_length.apply(this, arguments); }
            },
            "getMaxWidthChars": {
              "value": function () { return this.get_max_width_chars.apply(this, arguments); }
            },
            "getOverwriteMode": {
              "value": function () { return this.get_overwrite_mode.apply(this, arguments); }
            },
            "getPlaceholderText": {
              "value": function () { return this.get_placeholder_text.apply(this, arguments); }
            },
            "getProgressFraction": {
              "value": function () { return this.get_progress_fraction.apply(this, arguments); }
            },
            "getProgressPulseStep": {
              "value": function () { return this.get_progress_pulse_step.apply(this, arguments); }
            },
            "getTabs": {
              "value": function () { return this.get_tabs.apply(this, arguments); }
            },
            "getText": {
              "value": function () { return this.get_text.apply(this, arguments); }
            },
            "getTextArea": {
              "value": function () { return this.get_text_area.apply(this, arguments); }
            },
            "getTextLength": {
              "value": function () { return this.get_text_length.apply(this, arguments); }
            },
            "getVisibility": {
              "value": function () { return this.get_visibility.apply(this, arguments); }
            },
            "getWidthChars": {
              "value": function () { return this.get_width_chars.apply(this, arguments); }
            },
            "grabFocusWithoutSelecting": {
              "value": function () { return this.grab_focus_without_selecting.apply(this, arguments); }
            },
            "imContextFilterKeypress": {
              "value": function () { return this.im_context_filter_keypress.apply(this, arguments); }
            },
            "layoutIndexToTextIndex": {
              "value": function () { return this.layout_index_to_text_index.apply(this, arguments); }
            },
            "progressPulse": {
              "value": function () { return this.progress_pulse.apply(this, arguments); }
            },
            "resetImContext": {
              "value": function () { return this.reset_im_context.apply(this, arguments); }
            },
            "setActivatesDefault": {
              "value": function () { return this.set_activates_default.apply(this, arguments); }
            },
            "setAlignment": {
              "value": function () { return this.set_alignment.apply(this, arguments); }
            },
            "setAttributes": {
              "value": function () { return this.set_attributes.apply(this, arguments); }
            },
            "setBuffer": {
              "value": function () { return this.set_buffer.apply(this, arguments); }
            },
            "setCompletion": {
              "value": function () { return this.set_completion.apply(this, arguments); }
            },
            "setCursorHadjustment": {
              "value": function () { return this.set_cursor_hadjustment.apply(this, arguments); }
            },
            "setHasFrame": {
              "value": function () { return this.set_has_frame.apply(this, arguments); }
            },
            "setIconActivatable": {
              "value": function () { return this.set_icon_activatable.apply(this, arguments); }
            },
            "setIconDragSource": {
              "value": function () { return this.set_icon_drag_source.apply(this, arguments); }
            },
            "setIconFromGicon": {
              "value": function () { return this.set_icon_from_gicon.apply(this, arguments); }
            },
            "setIconFromIconName": {
              "value": function () { return this.set_icon_from_icon_name.apply(this, arguments); }
            },
            "setIconFromPixbuf": {
              "value": function () { return this.set_icon_from_pixbuf.apply(this, arguments); }
            },
            "setIconFromStock": {
              "value": function () { return this.set_icon_from_stock.apply(this, arguments); }
            },
            "setIconSensitive": {
              "value": function () { return this.set_icon_sensitive.apply(this, arguments); }
            },
            "setIconTooltipMarkup": {
              "value": function () { return this.set_icon_tooltip_markup.apply(this, arguments); }
            },
            "setIconTooltipText": {
              "value": function () { return this.set_icon_tooltip_text.apply(this, arguments); }
            },
            "setInnerBorder": {
              "value": function () { return this.set_inner_border.apply(this, arguments); }
            },
            "setInputHints": {
              "value": function () { return this.set_input_hints.apply(this, arguments); }
            },
            "setInputPurpose": {
              "value": function () { return this.set_input_purpose.apply(this, arguments); }
            },
            "setInvisibleChar": {
              "value": function () { return this.set_invisible_char.apply(this, arguments); }
            },
            "setMaxLength": {
              "value": function () { return this.set_max_length.apply(this, arguments); }
            },
            "setMaxWidthChars": {
              "value": function () { return this.set_max_width_chars.apply(this, arguments); }
            },
            "setOverwriteMode": {
              "value": function () { return this.set_overwrite_mode.apply(this, arguments); }
            },
            "setPlaceholderText": {
              "value": function () { return this.set_placeholder_text.apply(this, arguments); }
            },
            "setProgressFraction": {
              "value": function () { return this.set_progress_fraction.apply(this, arguments); }
            },
            "setProgressPulseStep": {
              "value": function () { return this.set_progress_pulse_step.apply(this, arguments); }
            },
            "setTabs": {
              "value": function () { return this.set_tabs.apply(this, arguments); }
            },
            "setText": {
              "value": function () { return this.set_text.apply(this, arguments); }
            },
            "setVisibility": {
              "value": function () { return this.set_visibility.apply(this, arguments); }
            },
            "setWidthChars": {
              "value": function () { return this.set_width_chars.apply(this, arguments); }
            },
            "textIndexToLayoutIndex": {
              "value": function () { return this.text_index_to_layout_index.apply(this, arguments); }
            },
            "unsetInvisibleChar": {
              "value": function () { return this.unset_invisible_char.apply(this, arguments); }
            },
            "activatesDefault": {
              "get": function () { return this.activates_default; },
              "set": function (value) { this.activates_default = value; }
            },
            "capsLockWarning": {
              "get": function () { return this.caps_lock_warning; },
              "set": function (value) { this.caps_lock_warning = value; }
            },
            "cursorPosition": {
              "get": function () { return this.cursor_position; },
              "set": function (value) { this.cursor_position = value; }
            },
            "hasFrame": {
              "get": function () { return this.has_frame; },
              "set": function (value) { this.has_frame = value; }
            },
            "imModule": {
              "get": function () { return this.im_module; },
              "set": function (value) { this.im_module = value; }
            },
            "innerBorder": {
              "get": function () { return this.inner_border; },
              "set": function (value) { this.inner_border = value; }
            },
            "inputHints": {
              "get": function () { return this.input_hints; },
              "set": function (value) { this.input_hints = value; }
            },
            "inputPurpose": {
              "get": function () { return this.input_purpose; },
              "set": function (value) { this.input_purpose = value; }
            },
            "invisibleChar": {
              "get": function () { return this.invisible_char; },
              "set": function (value) { this.invisible_char = value; }
            },
            "invisibleCharSet": {
              "get": function () { return this.invisible_char_set; },
              "set": function (value) { this.invisible_char_set = value; }
            },
            "maxLength": {
              "get": function () { return this.max_length; },
              "set": function (value) { this.max_length = value; }
            },
            "maxWidthChars": {
              "get": function () { return this.max_width_chars; },
              "set": function (value) { this.max_width_chars = value; }
            },
            "overwriteMode": {
              "get": function () { return this.overwrite_mode; },
              "set": function (value) { this.overwrite_mode = value; }
            },
            "placeholderText": {
              "get": function () { return this.placeholder_text; },
              "set": function (value) { this.placeholder_text = value; }
            },
            "populateAll": {
              "get": function () { return this.populate_all; },
              "set": function (value) { this.populate_all = value; }
            },
            "primaryIconActivatable": {
              "get": function () { return this.primary_icon_activatable; },
              "set": function (value) { this.primary_icon_activatable = value; }
            },
            "primaryIconGicon": {
              "get": function () { return this.primary_icon_gicon; },
              "set": function (value) { this.primary_icon_gicon = value; }
            },
            "primaryIconName": {
              "get": function () { return this.primary_icon_name; },
              "set": function (value) { this.primary_icon_name = value; }
            },
            "primaryIconPixbuf": {
              "get": function () { return this.primary_icon_pixbuf; },
              "set": function (value) { this.primary_icon_pixbuf = value; }
            },
            "primaryIconSensitive": {
              "get": function () { return this.primary_icon_sensitive; },
              "set": function (value) { this.primary_icon_sensitive = value; }
            },
            "primaryIconStock": {
              "get": function () { return this.primary_icon_stock; },
              "set": function (value) { this.primary_icon_stock = value; }
            },
            "primaryIconStorageType": {
              "get": function () { return this.primary_icon_storage_type; },
              "set": function (value) { this.primary_icon_storage_type = value; }
            },
            "primaryIconTooltipMarkup": {
              "get": function () { return this.primary_icon_tooltip_markup; },
              "set": function (value) { this.primary_icon_tooltip_markup = value; }
            },
            "primaryIconTooltipText": {
              "get": function () { return this.primary_icon_tooltip_text; },
              "set": function (value) { this.primary_icon_tooltip_text = value; }
            },
            "progressFraction": {
              "get": function () { return this.progress_fraction; },
              "set": function (value) { this.progress_fraction = value; }
            },
            "progressPulseStep": {
              "get": function () { return this.progress_pulse_step; },
              "set": function (value) { this.progress_pulse_step = value; }
            },
            "scrollOffset": {
              "get": function () { return this.scroll_offset; },
              "set": function (value) { this.scroll_offset = value; }
            },
            "secondaryIconActivatable": {
              "get": function () { return this.secondary_icon_activatable; },
              "set": function (value) { this.secondary_icon_activatable = value; }
            },
            "secondaryIconGicon": {
              "get": function () { return this.secondary_icon_gicon; },
              "set": function (value) { this.secondary_icon_gicon = value; }
            },
            "secondaryIconName": {
              "get": function () { return this.secondary_icon_name; },
              "set": function (value) { this.secondary_icon_name = value; }
            },
            "secondaryIconPixbuf": {
              "get": function () { return this.secondary_icon_pixbuf; },
              "set": function (value) { this.secondary_icon_pixbuf = value; }
            },
            "secondaryIconSensitive": {
              "get": function () { return this.secondary_icon_sensitive; },
              "set": function (value) { this.secondary_icon_sensitive = value; }
            },
            "secondaryIconStock": {
              "get": function () { return this.secondary_icon_stock; },
              "set": function (value) { this.secondary_icon_stock = value; }
            },
            "secondaryIconStorageType": {
              "get": function () { return this.secondary_icon_storage_type; },
              "set": function (value) { this.secondary_icon_storage_type = value; }
            },
            "secondaryIconTooltipMarkup": {
              "get": function () { return this.secondary_icon_tooltip_markup; },
              "set": function (value) { this.secondary_icon_tooltip_markup = value; }
            },
            "secondaryIconTooltipText": {
              "get": function () { return this.secondary_icon_tooltip_text; },
              "set": function (value) { this.secondary_icon_tooltip_text = value; }
            },
            "selectionBound": {
              "get": function () { return this.selection_bound; },
              "set": function (value) { this.selection_bound = value; }
            },
            "shadowType": {
              "get": function () { return this.shadow_type; },
              "set": function (value) { this.shadow_type = value; }
            },
            "textLength": {
              "get": function () { return this.text_length; },
              "set": function (value) { this.text_length = value; }
            },
            "truncateMultiline": {
              "get": function () { return this.truncate_multiline; },
              "set": function (value) { this.truncate_multiline = value; }
            },
            "widthChars": {
              "get": function () { return this.width_chars; },
              "set": function (value) { this.width_chars = value; }
            }
          },
          "static": {}
        },
        "EntryAccessible": {
          "prototype": {},
          "static": {}
        },
        "EntryBuffer": {
          "prototype": {
            "deleteText": {
              "value": function () { return this.delete_text.apply(this, arguments); }
            },
            "emitDeletedText": {
              "value": function () { return this.emit_deleted_text.apply(this, arguments); }
            },
            "emitInsertedText": {
              "value": function () { return this.emit_inserted_text.apply(this, arguments); }
            },
            "getBytes": {
              "value": function () { return this.get_bytes.apply(this, arguments); }
            },
            "getLength": {
              "value": function () { return this.get_length.apply(this, arguments); }
            },
            "getMaxLength": {
              "value": function () { return this.get_max_length.apply(this, arguments); }
            },
            "getText": {
              "value": function () { return this.get_text.apply(this, arguments); }
            },
            "insertText": {
              "value": function () { return this.insert_text.apply(this, arguments); }
            },
            "setMaxLength": {
              "value": function () { return this.set_max_length.apply(this, arguments); }
            },
            "setText": {
              "value": function () { return this.set_text.apply(this, arguments); }
            },
            "maxLength": {
              "get": function () { return this.max_length; },
              "set": function (value) { this.max_length = value; }
            }
          },
          "static": {}
        },
        "EntryCompletion": {
          "prototype": {
            "computePrefix": {
              "value": function () { return this.compute_prefix.apply(this, arguments); }
            },
            "deleteAction": {
              "value": function () { return this.delete_action.apply(this, arguments); }
            },
            "getCompletionPrefix": {
              "value": function () { return this.get_completion_prefix.apply(this, arguments); }
            },
            "getEntry": {
              "value": function () { return this.get_entry.apply(this, arguments); }
            },
            "getInlineCompletion": {
              "value": function () { return this.get_inline_completion.apply(this, arguments); }
            },
            "getInlineSelection": {
              "value": function () { return this.get_inline_selection.apply(this, arguments); }
            },
            "getMinimumKeyLength": {
              "value": function () { return this.get_minimum_key_length.apply(this, arguments); }
            },
            "getModel": {
              "value": function () { return this.get_model.apply(this, arguments); }
            },
            "getPopupCompletion": {
              "value": function () { return this.get_popup_completion.apply(this, arguments); }
            },
            "getPopupSetWidth": {
              "value": function () { return this.get_popup_set_width.apply(this, arguments); }
            },
            "getPopupSingleMatch": {
              "value": function () { return this.get_popup_single_match.apply(this, arguments); }
            },
            "getTextColumn": {
              "value": function () { return this.get_text_column.apply(this, arguments); }
            },
            "insertActionMarkup": {
              "value": function () { return this.insert_action_markup.apply(this, arguments); }
            },
            "insertActionText": {
              "value": function () { return this.insert_action_text.apply(this, arguments); }
            },
            "insertPrefix": {
              "value": function () { return this.insert_prefix.apply(this, arguments); }
            },
            "setInlineCompletion": {
              "value": function () { return this.set_inline_completion.apply(this, arguments); }
            },
            "setInlineSelection": {
              "value": function () { return this.set_inline_selection.apply(this, arguments); }
            },
            "setMatchFunc": {
              "value": function () { return this.set_match_func.apply(this, arguments); }
            },
            "setMinimumKeyLength": {
              "value": function () { return this.set_minimum_key_length.apply(this, arguments); }
            },
            "setModel": {
              "value": function () { return this.set_model.apply(this, arguments); }
            },
            "setPopupCompletion": {
              "value": function () { return this.set_popup_completion.apply(this, arguments); }
            },
            "setPopupSetWidth": {
              "value": function () { return this.set_popup_set_width.apply(this, arguments); }
            },
            "setPopupSingleMatch": {
              "value": function () { return this.set_popup_single_match.apply(this, arguments); }
            },
            "setTextColumn": {
              "value": function () { return this.set_text_column.apply(this, arguments); }
            },
            "cellArea": {
              "get": function () { return this.cell_area; },
              "set": function (value) { this.cell_area = value; }
            },
            "inlineCompletion": {
              "get": function () { return this.inline_completion; },
              "set": function (value) { this.inline_completion = value; }
            },
            "inlineSelection": {
              "get": function () { return this.inline_selection; },
              "set": function (value) { this.inline_selection = value; }
            },
            "minimumKeyLength": {
              "get": function () { return this.minimum_key_length; },
              "set": function (value) { this.minimum_key_length = value; }
            },
            "popupCompletion": {
              "get": function () { return this.popup_completion; },
              "set": function (value) { this.popup_completion = value; }
            },
            "popupSetWidth": {
              "get": function () { return this.popup_set_width; },
              "set": function (value) { this.popup_set_width = value; }
            },
            "popupSingleMatch": {
              "get": function () { return this.popup_single_match; },
              "set": function (value) { this.popup_single_match = value; }
            },
            "textColumn": {
              "get": function () { return this.text_column; },
              "set": function (value) { this.text_column = value; }
            }
          },
          "static": {}
        },
        "EntryIconAccessible": {
          "prototype": {},
          "static": {}
        },
        "EventBox": {
          "prototype": {
            "getAboveChild": {
              "value": function () { return this.get_above_child.apply(this, arguments); }
            },
            "getVisibleWindow": {
              "value": function () { return this.get_visible_window.apply(this, arguments); }
            },
            "setAboveChild": {
              "value": function () { return this.set_above_child.apply(this, arguments); }
            },
            "setVisibleWindow": {
              "value": function () { return this.set_visible_window.apply(this, arguments); }
            },
            "aboveChild": {
              "get": function () { return this.above_child; },
              "set": function (value) { this.above_child = value; }
            },
            "visibleWindow": {
              "get": function () { return this.visible_window; },
              "set": function (value) { this.visible_window = value; }
            }
          },
          "static": {}
        },
        "EventController": {
          "prototype": {
            "getPropagationPhase": {
              "value": function () { return this.get_propagation_phase.apply(this, arguments); }
            },
            "getWidget": {
              "value": function () { return this.get_widget.apply(this, arguments); }
            },
            "handleEvent": {
              "value": function () { return this.handle_event.apply(this, arguments); }
            },
            "setPropagationPhase": {
              "value": function () { return this.set_propagation_phase.apply(this, arguments); }
            },
            "propagationPhase": {
              "get": function () { return this.propagation_phase; },
              "set": function (value) { this.propagation_phase = value; }
            }
          },
          "static": {}
        },
        "Expander": {
          "prototype": {
            "getExpanded": {
              "value": function () { return this.get_expanded.apply(this, arguments); }
            },
            "getLabel": {
              "value": function () { return this.get_label.apply(this, arguments); }
            },
            "getLabelFill": {
              "value": function () { return this.get_label_fill.apply(this, arguments); }
            },
            "getLabelWidget": {
              "value": function () { return this.get_label_widget.apply(this, arguments); }
            },
            "getResizeToplevel": {
              "value": function () { return this.get_resize_toplevel.apply(this, arguments); }
            },
            "getSpacing": {
              "value": function () { return this.get_spacing.apply(this, arguments); }
            },
            "getUseMarkup": {
              "value": function () { return this.get_use_markup.apply(this, arguments); }
            },
            "getUseUnderline": {
              "value": function () { return this.get_use_underline.apply(this, arguments); }
            },
            "setExpanded": {
              "value": function () { return this.set_expanded.apply(this, arguments); }
            },
            "setLabel": {
              "value": function () { return this.set_label.apply(this, arguments); }
            },
            "setLabelFill": {
              "value": function () { return this.set_label_fill.apply(this, arguments); }
            },
            "setLabelWidget": {
              "value": function () { return this.set_label_widget.apply(this, arguments); }
            },
            "setResizeToplevel": {
              "value": function () { return this.set_resize_toplevel.apply(this, arguments); }
            },
            "setSpacing": {
              "value": function () { return this.set_spacing.apply(this, arguments); }
            },
            "setUseMarkup": {
              "value": function () { return this.set_use_markup.apply(this, arguments); }
            },
            "setUseUnderline": {
              "value": function () { return this.set_use_underline.apply(this, arguments); }
            },
            "labelFill": {
              "get": function () { return this.label_fill; },
              "set": function (value) { this.label_fill = value; }
            },
            "labelWidget": {
              "get": function () { return this.label_widget; },
              "set": function (value) { this.label_widget = value; }
            },
            "resizeToplevel": {
              "get": function () { return this.resize_toplevel; },
              "set": function (value) { this.resize_toplevel = value; }
            },
            "useMarkup": {
              "get": function () { return this.use_markup; },
              "set": function (value) { this.use_markup = value; }
            },
            "useUnderline": {
              "get": function () { return this.use_underline; },
              "set": function (value) { this.use_underline = value; }
            }
          },
          "static": {}
        },
        "ExpanderAccessible": {
          "prototype": {},
          "static": {}
        },
        "FileChooserButton": {
          "prototype": {
            "getFocusOnClick": {
              "value": function () { return this.get_focus_on_click.apply(this, arguments); }
            },
            "getTitle": {
              "value": function () { return this.get_title.apply(this, arguments); }
            },
            "getWidthChars": {
              "value": function () { return this.get_width_chars.apply(this, arguments); }
            },
            "setFocusOnClick": {
              "value": function () { return this.set_focus_on_click.apply(this, arguments); }
            },
            "setTitle": {
              "value": function () { return this.set_title.apply(this, arguments); }
            },
            "setWidthChars": {
              "value": function () { return this.set_width_chars.apply(this, arguments); }
            },
            "widthChars": {
              "get": function () { return this.width_chars; },
              "set": function (value) { this.width_chars = value; }
            }
          },
          "static": {}
        },
        "FileChooserDialog": {
          "prototype": {},
          "static": {}
        },
        "FileChooserNative": {
          "prototype": {
            "getAcceptLabel": {
              "value": function () { return this.get_accept_label.apply(this, arguments); }
            },
            "getCancelLabel": {
              "value": function () { return this.get_cancel_label.apply(this, arguments); }
            },
            "setAcceptLabel": {
              "value": function () { return this.set_accept_label.apply(this, arguments); }
            },
            "setCancelLabel": {
              "value": function () { return this.set_cancel_label.apply(this, arguments); }
            },
            "acceptLabel": {
              "get": function () { return this.accept_label; },
              "set": function (value) { this.accept_label = value; }
            },
            "cancelLabel": {
              "get": function () { return this.cancel_label; },
              "set": function (value) { this.cancel_label = value; }
            }
          },
          "static": {}
        },
        "FileChooserWidget": {
          "prototype": {
            "searchMode": {
              "get": function () { return this.search_mode; },
              "set": function (value) { this.search_mode = value; }
            }
          },
          "static": {}
        },
        "FileFilter": {
          "prototype": {
            "addCustom": {
              "value": function () { return this.add_custom.apply(this, arguments); }
            },
            "addMimeType": {
              "value": function () { return this.add_mime_type.apply(this, arguments); }
            },
            "addPattern": {
              "value": function () { return this.add_pattern.apply(this, arguments); }
            },
            "addPixbufFormats": {
              "value": function () { return this.add_pixbuf_formats.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getNeeded": {
              "value": function () { return this.get_needed.apply(this, arguments); }
            },
            "setName": {
              "value": function () { return this.set_name.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Fixed": {
          "prototype": {},
          "static": {}
        },
        "FlowBox": {
          "prototype": {
            "bindModel": {
              "value": function () { return this.bind_model.apply(this, arguments); }
            },
            "getActivateOnSingleClick": {
              "value": function () { return this.get_activate_on_single_click.apply(this, arguments); }
            },
            "getChildAtIndex": {
              "value": function () { return this.get_child_at_index.apply(this, arguments); }
            },
            "getColumnSpacing": {
              "value": function () { return this.get_column_spacing.apply(this, arguments); }
            },
            "getHomogeneous": {
              "value": function () { return this.get_homogeneous.apply(this, arguments); }
            },
            "getMaxChildrenPerLine": {
              "value": function () { return this.get_max_children_per_line.apply(this, arguments); }
            },
            "getMinChildrenPerLine": {
              "value": function () { return this.get_min_children_per_line.apply(this, arguments); }
            },
            "getRowSpacing": {
              "value": function () { return this.get_row_spacing.apply(this, arguments); }
            },
            "getSelectedChildren": {
              "value": function () { return this.get_selected_children.apply(this, arguments); }
            },
            "getSelectionMode": {
              "value": function () { return this.get_selection_mode.apply(this, arguments); }
            },
            "invalidateFilter": {
              "value": function () { return this.invalidate_filter.apply(this, arguments); }
            },
            "invalidateSort": {
              "value": function () { return this.invalidate_sort.apply(this, arguments); }
            },
            "selectAll": {
              "value": function () { return this.select_all.apply(this, arguments); }
            },
            "selectChild": {
              "value": function () { return this.select_child.apply(this, arguments); }
            },
            "selectedForeach": {
              "value": function () { return this.selected_foreach.apply(this, arguments); }
            },
            "setActivateOnSingleClick": {
              "value": function () { return this.set_activate_on_single_click.apply(this, arguments); }
            },
            "setColumnSpacing": {
              "value": function () { return this.set_column_spacing.apply(this, arguments); }
            },
            "setFilterFunc": {
              "value": function () { return this.set_filter_func.apply(this, arguments); }
            },
            "setHadjustment": {
              "value": function () { return this.set_hadjustment.apply(this, arguments); }
            },
            "setHomogeneous": {
              "value": function () { return this.set_homogeneous.apply(this, arguments); }
            },
            "setMaxChildrenPerLine": {
              "value": function () { return this.set_max_children_per_line.apply(this, arguments); }
            },
            "setMinChildrenPerLine": {
              "value": function () { return this.set_min_children_per_line.apply(this, arguments); }
            },
            "setRowSpacing": {
              "value": function () { return this.set_row_spacing.apply(this, arguments); }
            },
            "setSelectionMode": {
              "value": function () { return this.set_selection_mode.apply(this, arguments); }
            },
            "setSortFunc": {
              "value": function () { return this.set_sort_func.apply(this, arguments); }
            },
            "setVadjustment": {
              "value": function () { return this.set_vadjustment.apply(this, arguments); }
            },
            "unselectAll": {
              "value": function () { return this.unselect_all.apply(this, arguments); }
            },
            "unselectChild": {
              "value": function () { return this.unselect_child.apply(this, arguments); }
            },
            "activateOnSingleClick": {
              "get": function () { return this.activate_on_single_click; },
              "set": function (value) { this.activate_on_single_click = value; }
            },
            "columnSpacing": {
              "get": function () { return this.column_spacing; },
              "set": function (value) { this.column_spacing = value; }
            },
            "maxChildrenPerLine": {
              "get": function () { return this.max_children_per_line; },
              "set": function (value) { this.max_children_per_line = value; }
            },
            "minChildrenPerLine": {
              "get": function () { return this.min_children_per_line; },
              "set": function (value) { this.min_children_per_line = value; }
            },
            "rowSpacing": {
              "get": function () { return this.row_spacing; },
              "set": function (value) { this.row_spacing = value; }
            },
            "selectionMode": {
              "get": function () { return this.selection_mode; },
              "set": function (value) { this.selection_mode = value; }
            }
          },
          "static": {}
        },
        "FlowBoxAccessible": {
          "prototype": {},
          "static": {}
        },
        "FlowBoxChild": {
          "prototype": {
            "getIndex": {
              "value": function () { return this.get_index.apply(this, arguments); }
            },
            "isSelected": {
              "value": function () { return this.is_selected.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "FlowBoxChildAccessible": {
          "prototype": {},
          "static": {}
        },
        "FontButton": {
          "prototype": {
            "getFontName": {
              "value": function () { return this.get_font_name.apply(this, arguments); }
            },
            "getShowSize": {
              "value": function () { return this.get_show_size.apply(this, arguments); }
            },
            "getShowStyle": {
              "value": function () { return this.get_show_style.apply(this, arguments); }
            },
            "getTitle": {
              "value": function () { return this.get_title.apply(this, arguments); }
            },
            "getUseFont": {
              "value": function () { return this.get_use_font.apply(this, arguments); }
            },
            "getUseSize": {
              "value": function () { return this.get_use_size.apply(this, arguments); }
            },
            "setFontName": {
              "value": function () { return this.set_font_name.apply(this, arguments); }
            },
            "setShowSize": {
              "value": function () { return this.set_show_size.apply(this, arguments); }
            },
            "setShowStyle": {
              "value": function () { return this.set_show_style.apply(this, arguments); }
            },
            "setTitle": {
              "value": function () { return this.set_title.apply(this, arguments); }
            },
            "setUseFont": {
              "value": function () { return this.set_use_font.apply(this, arguments); }
            },
            "setUseSize": {
              "value": function () { return this.set_use_size.apply(this, arguments); }
            },
            "fontName": {
              "get": function () { return this.font_name; },
              "set": function (value) { this.font_name = value; }
            },
            "showSize": {
              "get": function () { return this.show_size; },
              "set": function (value) { this.show_size = value; }
            },
            "showStyle": {
              "get": function () { return this.show_style; },
              "set": function (value) { this.show_style = value; }
            },
            "useFont": {
              "get": function () { return this.use_font; },
              "set": function (value) { this.use_font = value; }
            },
            "useSize": {
              "get": function () { return this.use_size; },
              "set": function (value) { this.use_size = value; }
            }
          },
          "static": {}
        },
        "FontChooserDialog": {
          "prototype": {},
          "static": {}
        },
        "FontChooserWidget": {
          "prototype": {},
          "static": {}
        },
        "FontSelection": {
          "prototype": {
            "getFace": {
              "value": function () { return this.get_face.apply(this, arguments); }
            },
            "getFaceList": {
              "value": function () { return this.get_face_list.apply(this, arguments); }
            },
            "getFamily": {
              "value": function () { return this.get_family.apply(this, arguments); }
            },
            "getFamilyList": {
              "value": function () { return this.get_family_list.apply(this, arguments); }
            },
            "getFontName": {
              "value": function () { return this.get_font_name.apply(this, arguments); }
            },
            "getPreviewEntry": {
              "value": function () { return this.get_preview_entry.apply(this, arguments); }
            },
            "getPreviewText": {
              "value": function () { return this.get_preview_text.apply(this, arguments); }
            },
            "getSize": {
              "value": function () { return this.get_size.apply(this, arguments); }
            },
            "getSizeEntry": {
              "value": function () { return this.get_size_entry.apply(this, arguments); }
            },
            "getSizeList": {
              "value": function () { return this.get_size_list.apply(this, arguments); }
            },
            "setFontName": {
              "value": function () { return this.set_font_name.apply(this, arguments); }
            },
            "setPreviewText": {
              "value": function () { return this.set_preview_text.apply(this, arguments); }
            },
            "fontName": {
              "get": function () { return this.font_name; },
              "set": function (value) { this.font_name = value; }
            },
            "previewText": {
              "get": function () { return this.preview_text; },
              "set": function (value) { this.preview_text = value; }
            }
          },
          "static": {}
        },
        "FontSelectionDialog": {
          "prototype": {
            "getCancelButton": {
              "value": function () { return this.get_cancel_button.apply(this, arguments); }
            },
            "getFontName": {
              "value": function () { return this.get_font_name.apply(this, arguments); }
            },
            "getFontSelection": {
              "value": function () { return this.get_font_selection.apply(this, arguments); }
            },
            "getOkButton": {
              "value": function () { return this.get_ok_button.apply(this, arguments); }
            },
            "getPreviewText": {
              "value": function () { return this.get_preview_text.apply(this, arguments); }
            },
            "setFontName": {
              "value": function () { return this.set_font_name.apply(this, arguments); }
            },
            "setPreviewText": {
              "value": function () { return this.set_preview_text.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Frame": {
          "prototype": {
            "getLabel": {
              "value": function () { return this.get_label.apply(this, arguments); }
            },
            "getLabelAlign": {
              "value": function () { return this.get_label_align.apply(this, arguments); }
            },
            "getLabelWidget": {
              "value": function () { return this.get_label_widget.apply(this, arguments); }
            },
            "getShadowType": {
              "value": function () { return this.get_shadow_type.apply(this, arguments); }
            },
            "setLabel": {
              "value": function () { return this.set_label.apply(this, arguments); }
            },
            "setLabelAlign": {
              "value": function () { return this.set_label_align.apply(this, arguments); }
            },
            "setLabelWidget": {
              "value": function () { return this.set_label_widget.apply(this, arguments); }
            },
            "setShadowType": {
              "value": function () { return this.set_shadow_type.apply(this, arguments); }
            },
            "labelWidget": {
              "get": function () { return this.label_widget; },
              "set": function (value) { this.label_widget = value; }
            },
            "labelXalign": {
              "get": function () { return this.label_xalign; },
              "set": function (value) { this.label_xalign = value; }
            },
            "labelYalign": {
              "get": function () { return this.label_yalign; },
              "set": function (value) { this.label_yalign = value; }
            },
            "shadowType": {
              "get": function () { return this.shadow_type; },
              "set": function (value) { this.shadow_type = value; }
            }
          },
          "static": {}
        },
        "FrameAccessible": {
          "prototype": {},
          "static": {}
        },
        "GLArea": {
          "prototype": {
            "attachBuffers": {
              "value": function () { return this.attach_buffers.apply(this, arguments); }
            },
            "getAutoRender": {
              "value": function () { return this.get_auto_render.apply(this, arguments); }
            },
            "getContext": {
              "value": function () { return this.get_context.apply(this, arguments); }
            },
            "getError": {
              "value": function () { return this.get_error.apply(this, arguments); }
            },
            "getHasAlpha": {
              "value": function () { return this.get_has_alpha.apply(this, arguments); }
            },
            "getHasDepthBuffer": {
              "value": function () { return this.get_has_depth_buffer.apply(this, arguments); }
            },
            "getHasStencilBuffer": {
              "value": function () { return this.get_has_stencil_buffer.apply(this, arguments); }
            },
            "getRequiredVersion": {
              "value": function () { return this.get_required_version.apply(this, arguments); }
            },
            "makeCurrent": {
              "value": function () { return this.make_current.apply(this, arguments); }
            },
            "queueRender": {
              "value": function () { return this.queue_render.apply(this, arguments); }
            },
            "setAutoRender": {
              "value": function () { return this.set_auto_render.apply(this, arguments); }
            },
            "setError": {
              "value": function () { return this.set_error.apply(this, arguments); }
            },
            "setHasAlpha": {
              "value": function () { return this.set_has_alpha.apply(this, arguments); }
            },
            "setHasDepthBuffer": {
              "value": function () { return this.set_has_depth_buffer.apply(this, arguments); }
            },
            "setHasStencilBuffer": {
              "value": function () { return this.set_has_stencil_buffer.apply(this, arguments); }
            },
            "setRequiredVersion": {
              "value": function () { return this.set_required_version.apply(this, arguments); }
            },
            "autoRender": {
              "get": function () { return this.auto_render; },
              "set": function (value) { this.auto_render = value; }
            },
            "hasAlpha": {
              "get": function () { return this.has_alpha; },
              "set": function (value) { this.has_alpha = value; }
            },
            "hasDepthBuffer": {
              "get": function () { return this.has_depth_buffer; },
              "set": function (value) { this.has_depth_buffer = value; }
            },
            "hasStencilBuffer": {
              "get": function () { return this.has_stencil_buffer; },
              "set": function (value) { this.has_stencil_buffer = value; }
            }
          },
          "static": {}
        },
        "Gesture": {
          "prototype": {
            "getBoundingBox": {
              "value": function () { return this.get_bounding_box.apply(this, arguments); }
            },
            "getBoundingBoxCenter": {
              "value": function () { return this.get_bounding_box_center.apply(this, arguments); }
            },
            "getDevice": {
              "value": function () { return this.get_device.apply(this, arguments); }
            },
            "getGroup": {
              "value": function () { return this.get_group.apply(this, arguments); }
            },
            "getLastEvent": {
              "value": function () { return this.get_last_event.apply(this, arguments); }
            },
            "getLastUpdatedSequence": {
              "value": function () { return this.get_last_updated_sequence.apply(this, arguments); }
            },
            "getPoint": {
              "value": function () { return this.get_point.apply(this, arguments); }
            },
            "getSequenceState": {
              "value": function () { return this.get_sequence_state.apply(this, arguments); }
            },
            "getSequences": {
              "value": function () { return this.get_sequences.apply(this, arguments); }
            },
            "getWindow": {
              "value": function () { return this.get_window.apply(this, arguments); }
            },
            "handlesSequence": {
              "value": function () { return this.handles_sequence.apply(this, arguments); }
            },
            "isActive": {
              "value": function () { return this.is_active.apply(this, arguments); }
            },
            "isGroupedWith": {
              "value": function () { return this.is_grouped_with.apply(this, arguments); }
            },
            "isRecognized": {
              "value": function () { return this.is_recognized.apply(this, arguments); }
            },
            "setSequenceState": {
              "value": function () { return this.set_sequence_state.apply(this, arguments); }
            },
            "setState": {
              "value": function () { return this.set_state.apply(this, arguments); }
            },
            "setWindow": {
              "value": function () { return this.set_window.apply(this, arguments); }
            },
            "nPoints": {
              "get": function () { return this.n_points; },
              "set": function (value) { this.n_points = value; }
            }
          },
          "static": {}
        },
        "GestureDrag": {
          "prototype": {
            "getOffset": {
              "value": function () { return this.get_offset.apply(this, arguments); }
            },
            "getStartPoint": {
              "value": function () { return this.get_start_point.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "GestureLongPress": {
          "prototype": {
            "delayFactor": {
              "get": function () { return this.delay_factor; },
              "set": function (value) { this.delay_factor = value; }
            }
          },
          "static": {}
        },
        "GestureMultiPress": {
          "prototype": {
            "getArea": {
              "value": function () { return this.get_area.apply(this, arguments); }
            },
            "setArea": {
              "value": function () { return this.set_area.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "GesturePan": {
          "prototype": {
            "getOrientation": {
              "value": function () { return this.get_orientation.apply(this, arguments); }
            },
            "setOrientation": {
              "value": function () { return this.set_orientation.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "GestureRotate": {
          "prototype": {
            "getAngleDelta": {
              "value": function () { return this.get_angle_delta.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "GestureSingle": {
          "prototype": {
            "getButton": {
              "value": function () { return this.get_button.apply(this, arguments); }
            },
            "getCurrentButton": {
              "value": function () { return this.get_current_button.apply(this, arguments); }
            },
            "getCurrentSequence": {
              "value": function () { return this.get_current_sequence.apply(this, arguments); }
            },
            "getExclusive": {
              "value": function () { return this.get_exclusive.apply(this, arguments); }
            },
            "getTouchOnly": {
              "value": function () { return this.get_touch_only.apply(this, arguments); }
            },
            "setButton": {
              "value": function () { return this.set_button.apply(this, arguments); }
            },
            "setExclusive": {
              "value": function () { return this.set_exclusive.apply(this, arguments); }
            },
            "setTouchOnly": {
              "value": function () { return this.set_touch_only.apply(this, arguments); }
            },
            "touchOnly": {
              "get": function () { return this.touch_only; },
              "set": function (value) { this.touch_only = value; }
            }
          },
          "static": {}
        },
        "GestureSwipe": {
          "prototype": {
            "getVelocity": {
              "value": function () { return this.get_velocity.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "GestureZoom": {
          "prototype": {
            "getScaleDelta": {
              "value": function () { return this.get_scale_delta.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Grid": {
          "prototype": {
            "attachNextTo": {
              "value": function () { return this.attach_next_to.apply(this, arguments); }
            },
            "getBaselineRow": {
              "value": function () { return this.get_baseline_row.apply(this, arguments); }
            },
            "getChildAt": {
              "value": function () { return this.get_child_at.apply(this, arguments); }
            },
            "getColumnHomogeneous": {
              "value": function () { return this.get_column_homogeneous.apply(this, arguments); }
            },
            "getColumnSpacing": {
              "value": function () { return this.get_column_spacing.apply(this, arguments); }
            },
            "getRowBaselinePosition": {
              "value": function () { return this.get_row_baseline_position.apply(this, arguments); }
            },
            "getRowHomogeneous": {
              "value": function () { return this.get_row_homogeneous.apply(this, arguments); }
            },
            "getRowSpacing": {
              "value": function () { return this.get_row_spacing.apply(this, arguments); }
            },
            "insertColumn": {
              "value": function () { return this.insert_column.apply(this, arguments); }
            },
            "insertNextTo": {
              "value": function () { return this.insert_next_to.apply(this, arguments); }
            },
            "insertRow": {
              "value": function () { return this.insert_row.apply(this, arguments); }
            },
            "removeColumn": {
              "value": function () { return this.remove_column.apply(this, arguments); }
            },
            "removeRow": {
              "value": function () { return this.remove_row.apply(this, arguments); }
            },
            "setBaselineRow": {
              "value": function () { return this.set_baseline_row.apply(this, arguments); }
            },
            "setColumnHomogeneous": {
              "value": function () { return this.set_column_homogeneous.apply(this, arguments); }
            },
            "setColumnSpacing": {
              "value": function () { return this.set_column_spacing.apply(this, arguments); }
            },
            "setRowBaselinePosition": {
              "value": function () { return this.set_row_baseline_position.apply(this, arguments); }
            },
            "setRowHomogeneous": {
              "value": function () { return this.set_row_homogeneous.apply(this, arguments); }
            },
            "setRowSpacing": {
              "value": function () { return this.set_row_spacing.apply(this, arguments); }
            },
            "baselineRow": {
              "get": function () { return this.baseline_row; },
              "set": function (value) { this.baseline_row = value; }
            },
            "columnHomogeneous": {
              "get": function () { return this.column_homogeneous; },
              "set": function (value) { this.column_homogeneous = value; }
            },
            "columnSpacing": {
              "get": function () { return this.column_spacing; },
              "set": function (value) { this.column_spacing = value; }
            },
            "rowHomogeneous": {
              "get": function () { return this.row_homogeneous; },
              "set": function (value) { this.row_homogeneous = value; }
            },
            "rowSpacing": {
              "get": function () { return this.row_spacing; },
              "set": function (value) { this.row_spacing = value; }
            }
          },
          "static": {}
        },
        "HBox": {
          "prototype": {},
          "static": {}
        },
        "HButtonBox": {
          "prototype": {},
          "static": {}
        },
        "HPaned": {
          "prototype": {},
          "static": {}
        },
        "HSV": {
          "prototype": {
            "getColor": {
              "value": function () { return this.get_color.apply(this, arguments); }
            },
            "getMetrics": {
              "value": function () { return this.get_metrics.apply(this, arguments); }
            },
            "isAdjusting": {
              "value": function () { return this.is_adjusting.apply(this, arguments); }
            },
            "setColor": {
              "value": function () { return this.set_color.apply(this, arguments); }
            },
            "setMetrics": {
              "value": function () { return this.set_metrics.apply(this, arguments); }
            }
          },
          "static": {
            "toRgb": {
              "value": function () { return this.to_rgb.apply(this, arguments); }
            }
          }
        },
        "HScale": {
          "prototype": {},
          "static": {}
        },
        "HScrollbar": {
          "prototype": {},
          "static": {}
        },
        "HSeparator": {
          "prototype": {},
          "static": {}
        },
        "HandleBox": {
          "prototype": {
            "getChildDetached": {
              "value": function () { return this.get_child_detached.apply(this, arguments); }
            },
            "getHandlePosition": {
              "value": function () { return this.get_handle_position.apply(this, arguments); }
            },
            "getShadowType": {
              "value": function () { return this.get_shadow_type.apply(this, arguments); }
            },
            "getSnapEdge": {
              "value": function () { return this.get_snap_edge.apply(this, arguments); }
            },
            "setHandlePosition": {
              "value": function () { return this.set_handle_position.apply(this, arguments); }
            },
            "setShadowType": {
              "value": function () { return this.set_shadow_type.apply(this, arguments); }
            },
            "setSnapEdge": {
              "value": function () { return this.set_snap_edge.apply(this, arguments); }
            },
            "childDetached": {
              "get": function () { return this.child_detached; },
              "set": function (value) { this.child_detached = value; }
            },
            "handlePosition": {
              "get": function () { return this.handle_position; },
              "set": function (value) { this.handle_position = value; }
            },
            "shadowType": {
              "get": function () { return this.shadow_type; },
              "set": function (value) { this.shadow_type = value; }
            },
            "snapEdge": {
              "get": function () { return this.snap_edge; },
              "set": function (value) { this.snap_edge = value; }
            },
            "snapEdgeSet": {
              "get": function () { return this.snap_edge_set; },
              "set": function (value) { this.snap_edge_set = value; }
            }
          },
          "static": {}
        },
        "HeaderBar": {
          "prototype": {
            "getCustomTitle": {
              "value": function () { return this.get_custom_title.apply(this, arguments); }
            },
            "getDecorationLayout": {
              "value": function () { return this.get_decoration_layout.apply(this, arguments); }
            },
            "getHasSubtitle": {
              "value": function () { return this.get_has_subtitle.apply(this, arguments); }
            },
            "getShowCloseButton": {
              "value": function () { return this.get_show_close_button.apply(this, arguments); }
            },
            "getSubtitle": {
              "value": function () { return this.get_subtitle.apply(this, arguments); }
            },
            "getTitle": {
              "value": function () { return this.get_title.apply(this, arguments); }
            },
            "packEnd": {
              "value": function () { return this.pack_end.apply(this, arguments); }
            },
            "packStart": {
              "value": function () { return this.pack_start.apply(this, arguments); }
            },
            "setCustomTitle": {
              "value": function () { return this.set_custom_title.apply(this, arguments); }
            },
            "setDecorationLayout": {
              "value": function () { return this.set_decoration_layout.apply(this, arguments); }
            },
            "setHasSubtitle": {
              "value": function () { return this.set_has_subtitle.apply(this, arguments); }
            },
            "setShowCloseButton": {
              "value": function () { return this.set_show_close_button.apply(this, arguments); }
            },
            "setSubtitle": {
              "value": function () { return this.set_subtitle.apply(this, arguments); }
            },
            "setTitle": {
              "value": function () { return this.set_title.apply(this, arguments); }
            },
            "customTitle": {
              "get": function () { return this.custom_title; },
              "set": function (value) { this.custom_title = value; }
            },
            "decorationLayout": {
              "get": function () { return this.decoration_layout; },
              "set": function (value) { this.decoration_layout = value; }
            },
            "decorationLayoutSet": {
              "get": function () { return this.decoration_layout_set; },
              "set": function (value) { this.decoration_layout_set = value; }
            },
            "hasSubtitle": {
              "get": function () { return this.has_subtitle; },
              "set": function (value) { this.has_subtitle = value; }
            },
            "showCloseButton": {
              "get": function () { return this.show_close_button; },
              "set": function (value) { this.show_close_button = value; }
            }
          },
          "static": {}
        },
        "IMContext": {
          "prototype": {
            "deleteSurrounding": {
              "value": function () { return this.delete_surrounding.apply(this, arguments); }
            },
            "filterKeypress": {
              "value": function () { return this.filter_keypress.apply(this, arguments); }
            },
            "focusIn": {
              "value": function () { return this.focus_in.apply(this, arguments); }
            },
            "focusOut": {
              "value": function () { return this.focus_out.apply(this, arguments); }
            },
            "getPreeditString": {
              "value": function () { return this.get_preedit_string.apply(this, arguments); }
            },
            "getSurrounding": {
              "value": function () { return this.get_surrounding.apply(this, arguments); }
            },
            "setClientWindow": {
              "value": function () { return this.set_client_window.apply(this, arguments); }
            },
            "setCursorLocation": {
              "value": function () { return this.set_cursor_location.apply(this, arguments); }
            },
            "setSurrounding": {
              "value": function () { return this.set_surrounding.apply(this, arguments); }
            },
            "setUsePreedit": {
              "value": function () { return this.set_use_preedit.apply(this, arguments); }
            },
            "inputHints": {
              "get": function () { return this.input_hints; },
              "set": function (value) { this.input_hints = value; }
            },
            "inputPurpose": {
              "get": function () { return this.input_purpose; },
              "set": function (value) { this.input_purpose = value; }
            }
          },
          "static": {}
        },
        "IMContextSimple": {
          "prototype": {
            "addComposeFile": {
              "value": function () { return this.add_compose_file.apply(this, arguments); }
            },
            "addTable": {
              "value": function () { return this.add_table.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "IMMulticontext": {
          "prototype": {
            "appendMenuitems": {
              "value": function () { return this.append_menuitems.apply(this, arguments); }
            },
            "getContextId": {
              "value": function () { return this.get_context_id.apply(this, arguments); }
            },
            "setContextId": {
              "value": function () { return this.set_context_id.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "IconFactory": {
          "prototype": {
            "addDefault": {
              "value": function () { return this.add_default.apply(this, arguments); }
            },
            "removeDefault": {
              "value": function () { return this.remove_default.apply(this, arguments); }
            }
          },
          "static": {
            "lookupDefault": {
              "value": function () { return this.lookup_default.apply(this, arguments); }
            }
          }
        },
        "IconInfo": {
          "prototype": {
            "getAttachPoints": {
              "value": function () { return this.get_attach_points.apply(this, arguments); }
            },
            "getBaseScale": {
              "value": function () { return this.get_base_scale.apply(this, arguments); }
            },
            "getBaseSize": {
              "value": function () { return this.get_base_size.apply(this, arguments); }
            },
            "getBuiltinPixbuf": {
              "value": function () { return this.get_builtin_pixbuf.apply(this, arguments); }
            },
            "getDisplayName": {
              "value": function () { return this.get_display_name.apply(this, arguments); }
            },
            "getEmbeddedRect": {
              "value": function () { return this.get_embedded_rect.apply(this, arguments); }
            },
            "getFilename": {
              "value": function () { return this.get_filename.apply(this, arguments); }
            },
            "isSymbolic": {
              "value": function () { return this.is_symbolic.apply(this, arguments); }
            },
            "loadIcon": {
              "value": function () { return this.load_icon.apply(this, arguments); }
            },
            "loadIconAsync": {
              "value": function () { return this.load_icon_async.apply(this, arguments); }
            },
            "loadIconFinish": {
              "value": function () { return this.load_icon_finish.apply(this, arguments); }
            },
            "loadSurface": {
              "value": function () { return this.load_surface.apply(this, arguments); }
            },
            "loadSymbolic": {
              "value": function () { return this.load_symbolic.apply(this, arguments); }
            },
            "loadSymbolicAsync": {
              "value": function () { return this.load_symbolic_async.apply(this, arguments); }
            },
            "loadSymbolicFinish": {
              "value": function () { return this.load_symbolic_finish.apply(this, arguments); }
            },
            "loadSymbolicForContext": {
              "value": function () { return this.load_symbolic_for_context.apply(this, arguments); }
            },
            "loadSymbolicForContextAsync": {
              "value": function () { return this.load_symbolic_for_context_async.apply(this, arguments); }
            },
            "loadSymbolicForContextFinish": {
              "value": function () { return this.load_symbolic_for_context_finish.apply(this, arguments); }
            },
            "loadSymbolicForStyle": {
              "value": function () { return this.load_symbolic_for_style.apply(this, arguments); }
            },
            "setRawCoordinates": {
              "value": function () { return this.set_raw_coordinates.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "IconTheme": {
          "prototype": {
            "addResourcePath": {
              "value": function () { return this.add_resource_path.apply(this, arguments); }
            },
            "appendSearchPath": {
              "value": function () { return this.append_search_path.apply(this, arguments); }
            },
            "chooseIcon": {
              "value": function () { return this.choose_icon.apply(this, arguments); }
            },
            "chooseIconForScale": {
              "value": function () { return this.choose_icon_for_scale.apply(this, arguments); }
            },
            "getExampleIconName": {
              "value": function () { return this.get_example_icon_name.apply(this, arguments); }
            },
            "getIconSizes": {
              "value": function () { return this.get_icon_sizes.apply(this, arguments); }
            },
            "getSearchPath": {
              "value": function () { return this.get_search_path.apply(this, arguments); }
            },
            "hasIcon": {
              "value": function () { return this.has_icon.apply(this, arguments); }
            },
            "listContexts": {
              "value": function () { return this.list_contexts.apply(this, arguments); }
            },
            "listIcons": {
              "value": function () { return this.list_icons.apply(this, arguments); }
            },
            "loadIcon": {
              "value": function () { return this.load_icon.apply(this, arguments); }
            },
            "loadIconForScale": {
              "value": function () { return this.load_icon_for_scale.apply(this, arguments); }
            },
            "loadSurface": {
              "value": function () { return this.load_surface.apply(this, arguments); }
            },
            "lookupByGicon": {
              "value": function () { return this.lookup_by_gicon.apply(this, arguments); }
            },
            "lookupByGiconForScale": {
              "value": function () { return this.lookup_by_gicon_for_scale.apply(this, arguments); }
            },
            "lookupIcon": {
              "value": function () { return this.lookup_icon.apply(this, arguments); }
            },
            "lookupIconForScale": {
              "value": function () { return this.lookup_icon_for_scale.apply(this, arguments); }
            },
            "prependSearchPath": {
              "value": function () { return this.prepend_search_path.apply(this, arguments); }
            },
            "rescanIfNeeded": {
              "value": function () { return this.rescan_if_needed.apply(this, arguments); }
            },
            "setCustomTheme": {
              "value": function () { return this.set_custom_theme.apply(this, arguments); }
            },
            "setScreen": {
              "value": function () { return this.set_screen.apply(this, arguments); }
            },
            "setSearchPath": {
              "value": function () { return this.set_search_path.apply(this, arguments); }
            }
          },
          "static": {
            "addBuiltinIcon": {
              "value": function () { return this.add_builtin_icon.apply(this, arguments); }
            },
            "getDefault": {
              "value": function () { return this.get_default.apply(this, arguments); }
            },
            "getForScreen": {
              "value": function () { return this.get_for_screen.apply(this, arguments); }
            }
          }
        },
        "IconView": {
          "prototype": {
            "convertWidgetToBinWindowCoords": {
              "value": function () { return this.convert_widget_to_bin_window_coords.apply(this, arguments); }
            },
            "createDragIcon": {
              "value": function () { return this.create_drag_icon.apply(this, arguments); }
            },
            "enableModelDragDest": {
              "value": function () { return this.enable_model_drag_dest.apply(this, arguments); }
            },
            "enableModelDragSource": {
              "value": function () { return this.enable_model_drag_source.apply(this, arguments); }
            },
            "getActivateOnSingleClick": {
              "value": function () { return this.get_activate_on_single_click.apply(this, arguments); }
            },
            "getCellRect": {
              "value": function () { return this.get_cell_rect.apply(this, arguments); }
            },
            "getColumnSpacing": {
              "value": function () { return this.get_column_spacing.apply(this, arguments); }
            },
            "getColumns": {
              "value": function () { return this.get_columns.apply(this, arguments); }
            },
            "getCursor": {
              "value": function () { return this.get_cursor.apply(this, arguments); }
            },
            "getDestItemAtPos": {
              "value": function () { return this.get_dest_item_at_pos.apply(this, arguments); }
            },
            "getDragDestItem": {
              "value": function () { return this.get_drag_dest_item.apply(this, arguments); }
            },
            "getItemAtPos": {
              "value": function () { return this.get_item_at_pos.apply(this, arguments); }
            },
            "getItemColumn": {
              "value": function () { return this.get_item_column.apply(this, arguments); }
            },
            "getItemOrientation": {
              "value": function () { return this.get_item_orientation.apply(this, arguments); }
            },
            "getItemPadding": {
              "value": function () { return this.get_item_padding.apply(this, arguments); }
            },
            "getItemRow": {
              "value": function () { return this.get_item_row.apply(this, arguments); }
            },
            "getItemWidth": {
              "value": function () { return this.get_item_width.apply(this, arguments); }
            },
            "getMargin": {
              "value": function () { return this.get_margin.apply(this, arguments); }
            },
            "getMarkupColumn": {
              "value": function () { return this.get_markup_column.apply(this, arguments); }
            },
            "getModel": {
              "value": function () { return this.get_model.apply(this, arguments); }
            },
            "getPathAtPos": {
              "value": function () { return this.get_path_at_pos.apply(this, arguments); }
            },
            "getPixbufColumn": {
              "value": function () { return this.get_pixbuf_column.apply(this, arguments); }
            },
            "getReorderable": {
              "value": function () { return this.get_reorderable.apply(this, arguments); }
            },
            "getRowSpacing": {
              "value": function () { return this.get_row_spacing.apply(this, arguments); }
            },
            "getSelectedItems": {
              "value": function () { return this.get_selected_items.apply(this, arguments); }
            },
            "getSelectionMode": {
              "value": function () { return this.get_selection_mode.apply(this, arguments); }
            },
            "getSpacing": {
              "value": function () { return this.get_spacing.apply(this, arguments); }
            },
            "getTextColumn": {
              "value": function () { return this.get_text_column.apply(this, arguments); }
            },
            "getTooltipColumn": {
              "value": function () { return this.get_tooltip_column.apply(this, arguments); }
            },
            "getTooltipContext": {
              "value": function () { return this.get_tooltip_context.apply(this, arguments); }
            },
            "getVisibleRange": {
              "value": function () { return this.get_visible_range.apply(this, arguments); }
            },
            "itemActivated": {
              "value": function () { return this.item_activated.apply(this, arguments); }
            },
            "pathIsSelected": {
              "value": function () { return this.path_is_selected.apply(this, arguments); }
            },
            "scrollToPath": {
              "value": function () { return this.scroll_to_path.apply(this, arguments); }
            },
            "selectAll": {
              "value": function () { return this.select_all.apply(this, arguments); }
            },
            "selectPath": {
              "value": function () { return this.select_path.apply(this, arguments); }
            },
            "selectedForeach": {
              "value": function () { return this.selected_foreach.apply(this, arguments); }
            },
            "setActivateOnSingleClick": {
              "value": function () { return this.set_activate_on_single_click.apply(this, arguments); }
            },
            "setColumnSpacing": {
              "value": function () { return this.set_column_spacing.apply(this, arguments); }
            },
            "setColumns": {
              "value": function () { return this.set_columns.apply(this, arguments); }
            },
            "setCursor": {
              "value": function () { return this.set_cursor.apply(this, arguments); }
            },
            "setDragDestItem": {
              "value": function () { return this.set_drag_dest_item.apply(this, arguments); }
            },
            "setItemOrientation": {
              "value": function () { return this.set_item_orientation.apply(this, arguments); }
            },
            "setItemPadding": {
              "value": function () { return this.set_item_padding.apply(this, arguments); }
            },
            "setItemWidth": {
              "value": function () { return this.set_item_width.apply(this, arguments); }
            },
            "setMargin": {
              "value": function () { return this.set_margin.apply(this, arguments); }
            },
            "setMarkupColumn": {
              "value": function () { return this.set_markup_column.apply(this, arguments); }
            },
            "setModel": {
              "value": function () { return this.set_model.apply(this, arguments); }
            },
            "setPixbufColumn": {
              "value": function () { return this.set_pixbuf_column.apply(this, arguments); }
            },
            "setReorderable": {
              "value": function () { return this.set_reorderable.apply(this, arguments); }
            },
            "setRowSpacing": {
              "value": function () { return this.set_row_spacing.apply(this, arguments); }
            },
            "setSelectionMode": {
              "value": function () { return this.set_selection_mode.apply(this, arguments); }
            },
            "setSpacing": {
              "value": function () { return this.set_spacing.apply(this, arguments); }
            },
            "setTextColumn": {
              "value": function () { return this.set_text_column.apply(this, arguments); }
            },
            "setTooltipCell": {
              "value": function () { return this.set_tooltip_cell.apply(this, arguments); }
            },
            "setTooltipColumn": {
              "value": function () { return this.set_tooltip_column.apply(this, arguments); }
            },
            "setTooltipItem": {
              "value": function () { return this.set_tooltip_item.apply(this, arguments); }
            },
            "unselectAll": {
              "value": function () { return this.unselect_all.apply(this, arguments); }
            },
            "unselectPath": {
              "value": function () { return this.unselect_path.apply(this, arguments); }
            },
            "unsetModelDragDest": {
              "value": function () { return this.unset_model_drag_dest.apply(this, arguments); }
            },
            "unsetModelDragSource": {
              "value": function () { return this.unset_model_drag_source.apply(this, arguments); }
            },
            "activateOnSingleClick": {
              "get": function () { return this.activate_on_single_click; },
              "set": function (value) { this.activate_on_single_click = value; }
            },
            "cellArea": {
              "get": function () { return this.cell_area; },
              "set": function (value) { this.cell_area = value; }
            },
            "columnSpacing": {
              "get": function () { return this.column_spacing; },
              "set": function (value) { this.column_spacing = value; }
            },
            "itemOrientation": {
              "get": function () { return this.item_orientation; },
              "set": function (value) { this.item_orientation = value; }
            },
            "itemPadding": {
              "get": function () { return this.item_padding; },
              "set": function (value) { this.item_padding = value; }
            },
            "itemWidth": {
              "get": function () { return this.item_width; },
              "set": function (value) { this.item_width = value; }
            },
            "markupColumn": {
              "get": function () { return this.markup_column; },
              "set": function (value) { this.markup_column = value; }
            },
            "pixbufColumn": {
              "get": function () { return this.pixbuf_column; },
              "set": function (value) { this.pixbuf_column = value; }
            },
            "rowSpacing": {
              "get": function () { return this.row_spacing; },
              "set": function (value) { this.row_spacing = value; }
            },
            "selectionMode": {
              "get": function () { return this.selection_mode; },
              "set": function (value) { this.selection_mode = value; }
            },
            "textColumn": {
              "get": function () { return this.text_column; },
              "set": function (value) { this.text_column = value; }
            },
            "tooltipColumn": {
              "get": function () { return this.tooltip_column; },
              "set": function (value) { this.tooltip_column = value; }
            }
          },
          "static": {}
        },
        "IconViewAccessible": {
          "prototype": {},
          "static": {}
        },
        "Image": {
          "prototype": {
            "getAnimation": {
              "value": function () { return this.get_animation.apply(this, arguments); }
            },
            "getGicon": {
              "value": function () { return this.get_gicon.apply(this, arguments); }
            },
            "getIconName": {
              "value": function () { return this.get_icon_name.apply(this, arguments); }
            },
            "getIconSet": {
              "value": function () { return this.get_icon_set.apply(this, arguments); }
            },
            "getPixbuf": {
              "value": function () { return this.get_pixbuf.apply(this, arguments); }
            },
            "getPixelSize": {
              "value": function () { return this.get_pixel_size.apply(this, arguments); }
            },
            "getStock": {
              "value": function () { return this.get_stock.apply(this, arguments); }
            },
            "getStorageType": {
              "value": function () { return this.get_storage_type.apply(this, arguments); }
            },
            "setFromAnimation": {
              "value": function () { return this.set_from_animation.apply(this, arguments); }
            },
            "setFromFile": {
              "value": function () { return this.set_from_file.apply(this, arguments); }
            },
            "setFromGicon": {
              "value": function () { return this.set_from_gicon.apply(this, arguments); }
            },
            "setFromIconName": {
              "value": function () { return this.set_from_icon_name.apply(this, arguments); }
            },
            "setFromIconSet": {
              "value": function () { return this.set_from_icon_set.apply(this, arguments); }
            },
            "setFromPixbuf": {
              "value": function () { return this.set_from_pixbuf.apply(this, arguments); }
            },
            "setFromResource": {
              "value": function () { return this.set_from_resource.apply(this, arguments); }
            },
            "setFromStock": {
              "value": function () { return this.set_from_stock.apply(this, arguments); }
            },
            "setFromSurface": {
              "value": function () { return this.set_from_surface.apply(this, arguments); }
            },
            "setPixelSize": {
              "value": function () { return this.set_pixel_size.apply(this, arguments); }
            },
            "iconName": {
              "get": function () { return this.icon_name; },
              "set": function (value) { this.icon_name = value; }
            },
            "iconSet": {
              "get": function () { return this.icon_set; },
              "set": function (value) { this.icon_set = value; }
            },
            "iconSize": {
              "get": function () { return this.icon_size; },
              "set": function (value) { this.icon_size = value; }
            },
            "pixbufAnimation": {
              "get": function () { return this.pixbuf_animation; },
              "set": function (value) { this.pixbuf_animation = value; }
            },
            "pixelSize": {
              "get": function () { return this.pixel_size; },
              "set": function (value) { this.pixel_size = value; }
            },
            "storageType": {
              "get": function () { return this.storage_type; },
              "set": function (value) { this.storage_type = value; }
            },
            "useFallback": {
              "get": function () { return this.use_fallback; },
              "set": function (value) { this.use_fallback = value; }
            }
          },
          "static": {}
        },
        "ImageAccessible": {
          "prototype": {},
          "static": {}
        },
        "ImageCellAccessible": {
          "prototype": {},
          "static": {}
        },
        "ImageMenuItem": {
          "prototype": {
            "getAlwaysShowImage": {
              "value": function () { return this.get_always_show_image.apply(this, arguments); }
            },
            "getImage": {
              "value": function () { return this.get_image.apply(this, arguments); }
            },
            "getUseStock": {
              "value": function () { return this.get_use_stock.apply(this, arguments); }
            },
            "setAccelGroup": {
              "value": function () { return this.set_accel_group.apply(this, arguments); }
            },
            "setAlwaysShowImage": {
              "value": function () { return this.set_always_show_image.apply(this, arguments); }
            },
            "setImage": {
              "value": function () { return this.set_image.apply(this, arguments); }
            },
            "setUseStock": {
              "value": function () { return this.set_use_stock.apply(this, arguments); }
            },
            "accelGroup": {
              "get": function () { return this.accel_group; },
              "set": function (value) { this.accel_group = value; }
            },
            "alwaysShowImage": {
              "get": function () { return this.always_show_image; },
              "set": function (value) { this.always_show_image = value; }
            },
            "useStock": {
              "get": function () { return this.use_stock; },
              "set": function (value) { this.use_stock = value; }
            }
          },
          "static": {}
        },
        "InfoBar": {
          "prototype": {
            "addActionWidget": {
              "value": function () { return this.add_action_widget.apply(this, arguments); }
            },
            "addButton": {
              "value": function () { return this.add_button.apply(this, arguments); }
            },
            "addButtons": {
              "value": function () { return this.add_buttons.apply(this, arguments); }
            },
            "getActionArea": {
              "value": function () { return this.get_action_area.apply(this, arguments); }
            },
            "getContentArea": {
              "value": function () { return this.get_content_area.apply(this, arguments); }
            },
            "getMessageType": {
              "value": function () { return this.get_message_type.apply(this, arguments); }
            },
            "getShowCloseButton": {
              "value": function () { return this.get_show_close_button.apply(this, arguments); }
            },
            "setDefaultResponse": {
              "value": function () { return this.set_default_response.apply(this, arguments); }
            },
            "setMessageType": {
              "value": function () { return this.set_message_type.apply(this, arguments); }
            },
            "setResponseSensitive": {
              "value": function () { return this.set_response_sensitive.apply(this, arguments); }
            },
            "setShowCloseButton": {
              "value": function () { return this.set_show_close_button.apply(this, arguments); }
            },
            "messageType": {
              "get": function () { return this.message_type; },
              "set": function (value) { this.message_type = value; }
            },
            "showCloseButton": {
              "get": function () { return this.show_close_button; },
              "set": function (value) { this.show_close_button = value; }
            }
          },
          "static": {}
        },
        "Invisible": {
          "prototype": {
            "getScreen": {
              "value": function () { return this.get_screen.apply(this, arguments); }
            },
            "setScreen": {
              "value": function () { return this.set_screen.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Label": {
          "prototype": {
            "getAngle": {
              "value": function () { return this.get_angle.apply(this, arguments); }
            },
            "getAttributes": {
              "value": function () { return this.get_attributes.apply(this, arguments); }
            },
            "getCurrentUri": {
              "value": function () { return this.get_current_uri.apply(this, arguments); }
            },
            "getEllipsize": {
              "value": function () { return this.get_ellipsize.apply(this, arguments); }
            },
            "getJustify": {
              "value": function () { return this.get_justify.apply(this, arguments); }
            },
            "getLabel": {
              "value": function () { return this.get_label.apply(this, arguments); }
            },
            "getLayout": {
              "value": function () { return this.get_layout.apply(this, arguments); }
            },
            "getLayoutOffsets": {
              "value": function () { return this.get_layout_offsets.apply(this, arguments); }
            },
            "getLineWrap": {
              "value": function () { return this.get_line_wrap.apply(this, arguments); }
            },
            "getLineWrapMode": {
              "value": function () { return this.get_line_wrap_mode.apply(this, arguments); }
            },
            "getLines": {
              "value": function () { return this.get_lines.apply(this, arguments); }
            },
            "getMaxWidthChars": {
              "value": function () { return this.get_max_width_chars.apply(this, arguments); }
            },
            "getMnemonicKeyval": {
              "value": function () { return this.get_mnemonic_keyval.apply(this, arguments); }
            },
            "getMnemonicWidget": {
              "value": function () { return this.get_mnemonic_widget.apply(this, arguments); }
            },
            "getSelectable": {
              "value": function () { return this.get_selectable.apply(this, arguments); }
            },
            "getSelectionBounds": {
              "value": function () { return this.get_selection_bounds.apply(this, arguments); }
            },
            "getSingleLineMode": {
              "value": function () { return this.get_single_line_mode.apply(this, arguments); }
            },
            "getText": {
              "value": function () { return this.get_text.apply(this, arguments); }
            },
            "getTrackVisitedLinks": {
              "value": function () { return this.get_track_visited_links.apply(this, arguments); }
            },
            "getUseMarkup": {
              "value": function () { return this.get_use_markup.apply(this, arguments); }
            },
            "getUseUnderline": {
              "value": function () { return this.get_use_underline.apply(this, arguments); }
            },
            "getWidthChars": {
              "value": function () { return this.get_width_chars.apply(this, arguments); }
            },
            "getXalign": {
              "value": function () { return this.get_xalign.apply(this, arguments); }
            },
            "getYalign": {
              "value": function () { return this.get_yalign.apply(this, arguments); }
            },
            "selectRegion": {
              "value": function () { return this.select_region.apply(this, arguments); }
            },
            "setAngle": {
              "value": function () { return this.set_angle.apply(this, arguments); }
            },
            "setAttributes": {
              "value": function () { return this.set_attributes.apply(this, arguments); }
            },
            "setEllipsize": {
              "value": function () { return this.set_ellipsize.apply(this, arguments); }
            },
            "setJustify": {
              "value": function () { return this.set_justify.apply(this, arguments); }
            },
            "setLabel": {
              "value": function () { return this.set_label.apply(this, arguments); }
            },
            "setLineWrap": {
              "value": function () { return this.set_line_wrap.apply(this, arguments); }
            },
            "setLineWrapMode": {
              "value": function () { return this.set_line_wrap_mode.apply(this, arguments); }
            },
            "setLines": {
              "value": function () { return this.set_lines.apply(this, arguments); }
            },
            "setMarkup": {
              "value": function () { return this.set_markup.apply(this, arguments); }
            },
            "setMarkupWithMnemonic": {
              "value": function () { return this.set_markup_with_mnemonic.apply(this, arguments); }
            },
            "setMaxWidthChars": {
              "value": function () { return this.set_max_width_chars.apply(this, arguments); }
            },
            "setMnemonicWidget": {
              "value": function () { return this.set_mnemonic_widget.apply(this, arguments); }
            },
            "setPattern": {
              "value": function () { return this.set_pattern.apply(this, arguments); }
            },
            "setSelectable": {
              "value": function () { return this.set_selectable.apply(this, arguments); }
            },
            "setSingleLineMode": {
              "value": function () { return this.set_single_line_mode.apply(this, arguments); }
            },
            "setText": {
              "value": function () { return this.set_text.apply(this, arguments); }
            },
            "setTextWithMnemonic": {
              "value": function () { return this.set_text_with_mnemonic.apply(this, arguments); }
            },
            "setTrackVisitedLinks": {
              "value": function () { return this.set_track_visited_links.apply(this, arguments); }
            },
            "setUseMarkup": {
              "value": function () { return this.set_use_markup.apply(this, arguments); }
            },
            "setUseUnderline": {
              "value": function () { return this.set_use_underline.apply(this, arguments); }
            },
            "setWidthChars": {
              "value": function () { return this.set_width_chars.apply(this, arguments); }
            },
            "setXalign": {
              "value": function () { return this.set_xalign.apply(this, arguments); }
            },
            "setYalign": {
              "value": function () { return this.set_yalign.apply(this, arguments); }
            },
            "cursorPosition": {
              "get": function () { return this.cursor_position; },
              "set": function (value) { this.cursor_position = value; }
            },
            "maxWidthChars": {
              "get": function () { return this.max_width_chars; },
              "set": function (value) { this.max_width_chars = value; }
            },
            "mnemonicKeyval": {
              "get": function () { return this.mnemonic_keyval; },
              "set": function (value) { this.mnemonic_keyval = value; }
            },
            "mnemonicWidget": {
              "get": function () { return this.mnemonic_widget; },
              "set": function (value) { this.mnemonic_widget = value; }
            },
            "selectionBound": {
              "get": function () { return this.selection_bound; },
              "set": function (value) { this.selection_bound = value; }
            },
            "singleLineMode": {
              "get": function () { return this.single_line_mode; },
              "set": function (value) { this.single_line_mode = value; }
            },
            "trackVisitedLinks": {
              "get": function () { return this.track_visited_links; },
              "set": function (value) { this.track_visited_links = value; }
            },
            "useMarkup": {
              "get": function () { return this.use_markup; },
              "set": function (value) { this.use_markup = value; }
            },
            "useUnderline": {
              "get": function () { return this.use_underline; },
              "set": function (value) { this.use_underline = value; }
            },
            "widthChars": {
              "get": function () { return this.width_chars; },
              "set": function (value) { this.width_chars = value; }
            },
            "wrapMode": {
              "get": function () { return this.wrap_mode; },
              "set": function (value) { this.wrap_mode = value; }
            }
          },
          "static": {}
        },
        "LabelAccessible": {
          "prototype": {},
          "static": {}
        },
        "Layout": {
          "prototype": {
            "getBinWindow": {
              "value": function () { return this.get_bin_window.apply(this, arguments); }
            },
            "getHadjustment": {
              "value": function () { return this.get_hadjustment.apply(this, arguments); }
            },
            "getSize": {
              "value": function () { return this.get_size.apply(this, arguments); }
            },
            "getVadjustment": {
              "value": function () { return this.get_vadjustment.apply(this, arguments); }
            },
            "setHadjustment": {
              "value": function () { return this.set_hadjustment.apply(this, arguments); }
            },
            "setSize": {
              "value": function () { return this.set_size.apply(this, arguments); }
            },
            "setVadjustment": {
              "value": function () { return this.set_vadjustment.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "LevelBar": {
          "prototype": {
            "addOffsetValue": {
              "value": function () { return this.add_offset_value.apply(this, arguments); }
            },
            "getInverted": {
              "value": function () { return this.get_inverted.apply(this, arguments); }
            },
            "getMaxValue": {
              "value": function () { return this.get_max_value.apply(this, arguments); }
            },
            "getMinValue": {
              "value": function () { return this.get_min_value.apply(this, arguments); }
            },
            "getMode": {
              "value": function () { return this.get_mode.apply(this, arguments); }
            },
            "getOffsetValue": {
              "value": function () { return this.get_offset_value.apply(this, arguments); }
            },
            "getValue": {
              "value": function () { return this.get_value.apply(this, arguments); }
            },
            "removeOffsetValue": {
              "value": function () { return this.remove_offset_value.apply(this, arguments); }
            },
            "setInverted": {
              "value": function () { return this.set_inverted.apply(this, arguments); }
            },
            "setMaxValue": {
              "value": function () { return this.set_max_value.apply(this, arguments); }
            },
            "setMinValue": {
              "value": function () { return this.set_min_value.apply(this, arguments); }
            },
            "setMode": {
              "value": function () { return this.set_mode.apply(this, arguments); }
            },
            "setValue": {
              "value": function () { return this.set_value.apply(this, arguments); }
            },
            "maxValue": {
              "get": function () { return this.max_value; },
              "set": function (value) { this.max_value = value; }
            },
            "minValue": {
              "get": function () { return this.min_value; },
              "set": function (value) { this.min_value = value; }
            }
          },
          "static": {}
        },
        "LevelBarAccessible": {
          "prototype": {},
          "static": {}
        },
        "LinkButton": {
          "prototype": {
            "getUri": {
              "value": function () { return this.get_uri.apply(this, arguments); }
            },
            "getVisited": {
              "value": function () { return this.get_visited.apply(this, arguments); }
            },
            "setUri": {
              "value": function () { return this.set_uri.apply(this, arguments); }
            },
            "setVisited": {
              "value": function () { return this.set_visited.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "LinkButtonAccessible": {
          "prototype": {},
          "static": {}
        },
        "ListBox": {
          "prototype": {
            "bindModel": {
              "value": function () { return this.bind_model.apply(this, arguments); }
            },
            "dragHighlightRow": {
              "value": function () { return this.drag_highlight_row.apply(this, arguments); }
            },
            "dragUnhighlightRow": {
              "value": function () { return this.drag_unhighlight_row.apply(this, arguments); }
            },
            "getActivateOnSingleClick": {
              "value": function () { return this.get_activate_on_single_click.apply(this, arguments); }
            },
            "getAdjustment": {
              "value": function () { return this.get_adjustment.apply(this, arguments); }
            },
            "getRowAtIndex": {
              "value": function () { return this.get_row_at_index.apply(this, arguments); }
            },
            "getRowAtY": {
              "value": function () { return this.get_row_at_y.apply(this, arguments); }
            },
            "getSelectedRow": {
              "value": function () { return this.get_selected_row.apply(this, arguments); }
            },
            "getSelectedRows": {
              "value": function () { return this.get_selected_rows.apply(this, arguments); }
            },
            "getSelectionMode": {
              "value": function () { return this.get_selection_mode.apply(this, arguments); }
            },
            "invalidateFilter": {
              "value": function () { return this.invalidate_filter.apply(this, arguments); }
            },
            "invalidateHeaders": {
              "value": function () { return this.invalidate_headers.apply(this, arguments); }
            },
            "invalidateSort": {
              "value": function () { return this.invalidate_sort.apply(this, arguments); }
            },
            "selectAll": {
              "value": function () { return this.select_all.apply(this, arguments); }
            },
            "selectRow": {
              "value": function () { return this.select_row.apply(this, arguments); }
            },
            "selectedForeach": {
              "value": function () { return this.selected_foreach.apply(this, arguments); }
            },
            "setActivateOnSingleClick": {
              "value": function () { return this.set_activate_on_single_click.apply(this, arguments); }
            },
            "setAdjustment": {
              "value": function () { return this.set_adjustment.apply(this, arguments); }
            },
            "setFilterFunc": {
              "value": function () { return this.set_filter_func.apply(this, arguments); }
            },
            "setHeaderFunc": {
              "value": function () { return this.set_header_func.apply(this, arguments); }
            },
            "setPlaceholder": {
              "value": function () { return this.set_placeholder.apply(this, arguments); }
            },
            "setSelectionMode": {
              "value": function () { return this.set_selection_mode.apply(this, arguments); }
            },
            "setSortFunc": {
              "value": function () { return this.set_sort_func.apply(this, arguments); }
            },
            "unselectAll": {
              "value": function () { return this.unselect_all.apply(this, arguments); }
            },
            "unselectRow": {
              "value": function () { return this.unselect_row.apply(this, arguments); }
            },
            "activateOnSingleClick": {
              "get": function () { return this.activate_on_single_click; },
              "set": function (value) { this.activate_on_single_click = value; }
            },
            "selectionMode": {
              "get": function () { return this.selection_mode; },
              "set": function (value) { this.selection_mode = value; }
            }
          },
          "static": {}
        },
        "ListBoxAccessible": {
          "prototype": {},
          "static": {}
        },
        "ListBoxRow": {
          "prototype": {
            "getActivatable": {
              "value": function () { return this.get_activatable.apply(this, arguments); }
            },
            "getHeader": {
              "value": function () { return this.get_header.apply(this, arguments); }
            },
            "getIndex": {
              "value": function () { return this.get_index.apply(this, arguments); }
            },
            "getSelectable": {
              "value": function () { return this.get_selectable.apply(this, arguments); }
            },
            "isSelected": {
              "value": function () { return this.is_selected.apply(this, arguments); }
            },
            "setActivatable": {
              "value": function () { return this.set_activatable.apply(this, arguments); }
            },
            "setHeader": {
              "value": function () { return this.set_header.apply(this, arguments); }
            },
            "setSelectable": {
              "value": function () { return this.set_selectable.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "ListBoxRowAccessible": {
          "prototype": {},
          "static": {}
        },
        "ListStore": {
          "prototype": {
            "insertAfter": {
              "value": function () { return this.insert_after.apply(this, arguments); }
            },
            "insertBefore": {
              "value": function () { return this.insert_before.apply(this, arguments); }
            },
            "insertWithValues": {
              "value": function () { return this.insert_with_values.apply(this, arguments); }
            },
            "insertWithValuesv": {
              "value": function () { return this.insert_with_valuesv.apply(this, arguments); }
            },
            "iterIsValid": {
              "value": function () { return this.iter_is_valid.apply(this, arguments); }
            },
            "moveAfter": {
              "value": function () { return this.move_after.apply(this, arguments); }
            },
            "moveBefore": {
              "value": function () { return this.move_before.apply(this, arguments); }
            },
            "setColumnTypes": {
              "value": function () { return this.set_column_types.apply(this, arguments); }
            },
            "setValist": {
              "value": function () { return this.set_valist.apply(this, arguments); }
            },
            "setValue": {
              "value": function () { return this.set_value.apply(this, arguments); }
            },
            "setValuesv": {
              "value": function () { return this.set_valuesv.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "LockButton": {
          "prototype": {
            "getPermission": {
              "value": function () { return this.get_permission.apply(this, arguments); }
            },
            "setPermission": {
              "value": function () { return this.set_permission.apply(this, arguments); }
            },
            "textLock": {
              "get": function () { return this.text_lock; },
              "set": function (value) { this.text_lock = value; }
            },
            "textUnlock": {
              "get": function () { return this.text_unlock; },
              "set": function (value) { this.text_unlock = value; }
            },
            "tooltipLock": {
              "get": function () { return this.tooltip_lock; },
              "set": function (value) { this.tooltip_lock = value; }
            },
            "tooltipNotAuthorized": {
              "get": function () { return this.tooltip_not_authorized; },
              "set": function (value) { this.tooltip_not_authorized = value; }
            },
            "tooltipUnlock": {
              "get": function () { return this.tooltip_unlock; },
              "set": function (value) { this.tooltip_unlock = value; }
            }
          },
          "static": {}
        },
        "LockButtonAccessible": {
          "prototype": {},
          "static": {}
        },
        "Menu": {
          "prototype": {
            "attachToWidget": {
              "value": function () { return this.attach_to_widget.apply(this, arguments); }
            },
            "getAccelGroup": {
              "value": function () { return this.get_accel_group.apply(this, arguments); }
            },
            "getAccelPath": {
              "value": function () { return this.get_accel_path.apply(this, arguments); }
            },
            "getActive": {
              "value": function () { return this.get_active.apply(this, arguments); }
            },
            "getAttachWidget": {
              "value": function () { return this.get_attach_widget.apply(this, arguments); }
            },
            "getMonitor": {
              "value": function () { return this.get_monitor.apply(this, arguments); }
            },
            "getReserveToggleSize": {
              "value": function () { return this.get_reserve_toggle_size.apply(this, arguments); }
            },
            "getTearoffState": {
              "value": function () { return this.get_tearoff_state.apply(this, arguments); }
            },
            "getTitle": {
              "value": function () { return this.get_title.apply(this, arguments); }
            },
            "popupForDevice": {
              "value": function () { return this.popup_for_device.apply(this, arguments); }
            },
            "reorderChild": {
              "value": function () { return this.reorder_child.apply(this, arguments); }
            },
            "setAccelGroup": {
              "value": function () { return this.set_accel_group.apply(this, arguments); }
            },
            "setAccelPath": {
              "value": function () { return this.set_accel_path.apply(this, arguments); }
            },
            "setActive": {
              "value": function () { return this.set_active.apply(this, arguments); }
            },
            "setMonitor": {
              "value": function () { return this.set_monitor.apply(this, arguments); }
            },
            "setReserveToggleSize": {
              "value": function () { return this.set_reserve_toggle_size.apply(this, arguments); }
            },
            "setScreen": {
              "value": function () { return this.set_screen.apply(this, arguments); }
            },
            "setTearoffState": {
              "value": function () { return this.set_tearoff_state.apply(this, arguments); }
            },
            "setTitle": {
              "value": function () { return this.set_title.apply(this, arguments); }
            },
            "accelGroup": {
              "get": function () { return this.accel_group; },
              "set": function (value) { this.accel_group = value; }
            },
            "accelPath": {
              "get": function () { return this.accel_path; },
              "set": function (value) { this.accel_path = value; }
            },
            "attachWidget": {
              "get": function () { return this.attach_widget; },
              "set": function (value) { this.attach_widget = value; }
            },
            "reserveToggleSize": {
              "get": function () { return this.reserve_toggle_size; },
              "set": function (value) { this.reserve_toggle_size = value; }
            },
            "tearoffState": {
              "get": function () { return this.tearoff_state; },
              "set": function (value) { this.tearoff_state = value; }
            },
            "tearoffTitle": {
              "get": function () { return this.tearoff_title; },
              "set": function (value) { this.tearoff_title = value; }
            }
          },
          "static": {
            "getForAttachWidget": {
              "value": function () { return this.get_for_attach_widget.apply(this, arguments); }
            }
          }
        },
        "MenuAccessible": {
          "prototype": {},
          "static": {}
        },
        "MenuBar": {
          "prototype": {
            "getChildPackDirection": {
              "value": function () { return this.get_child_pack_direction.apply(this, arguments); }
            },
            "getPackDirection": {
              "value": function () { return this.get_pack_direction.apply(this, arguments); }
            },
            "setChildPackDirection": {
              "value": function () { return this.set_child_pack_direction.apply(this, arguments); }
            },
            "setPackDirection": {
              "value": function () { return this.set_pack_direction.apply(this, arguments); }
            },
            "childPackDirection": {
              "get": function () { return this.child_pack_direction; },
              "set": function (value) { this.child_pack_direction = value; }
            },
            "packDirection": {
              "get": function () { return this.pack_direction; },
              "set": function (value) { this.pack_direction = value; }
            }
          },
          "static": {}
        },
        "MenuButton": {
          "prototype": {
            "getAlignWidget": {
              "value": function () { return this.get_align_widget.apply(this, arguments); }
            },
            "getDirection": {
              "value": function () { return this.get_direction.apply(this, arguments); }
            },
            "getMenuModel": {
              "value": function () { return this.get_menu_model.apply(this, arguments); }
            },
            "getPopover": {
              "value": function () { return this.get_popover.apply(this, arguments); }
            },
            "getPopup": {
              "value": function () { return this.get_popup.apply(this, arguments); }
            },
            "getUsePopover": {
              "value": function () { return this.get_use_popover.apply(this, arguments); }
            },
            "setAlignWidget": {
              "value": function () { return this.set_align_widget.apply(this, arguments); }
            },
            "setDirection": {
              "value": function () { return this.set_direction.apply(this, arguments); }
            },
            "setMenuModel": {
              "value": function () { return this.set_menu_model.apply(this, arguments); }
            },
            "setPopover": {
              "value": function () { return this.set_popover.apply(this, arguments); }
            },
            "setPopup": {
              "value": function () { return this.set_popup.apply(this, arguments); }
            },
            "setUsePopover": {
              "value": function () { return this.set_use_popover.apply(this, arguments); }
            },
            "alignWidget": {
              "get": function () { return this.align_widget; },
              "set": function (value) { this.align_widget = value; }
            },
            "menuModel": {
              "get": function () { return this.menu_model; },
              "set": function (value) { this.menu_model = value; }
            },
            "usePopover": {
              "get": function () { return this.use_popover; },
              "set": function (value) { this.use_popover = value; }
            }
          },
          "static": {}
        },
        "MenuButtonAccessible": {
          "prototype": {},
          "static": {}
        },
        "MenuItem": {
          "prototype": {
            "getAccelPath": {
              "value": function () { return this.get_accel_path.apply(this, arguments); }
            },
            "getLabel": {
              "value": function () { return this.get_label.apply(this, arguments); }
            },
            "getReserveIndicator": {
              "value": function () { return this.get_reserve_indicator.apply(this, arguments); }
            },
            "getRightJustified": {
              "value": function () { return this.get_right_justified.apply(this, arguments); }
            },
            "getSubmenu": {
              "value": function () { return this.get_submenu.apply(this, arguments); }
            },
            "getUseUnderline": {
              "value": function () { return this.get_use_underline.apply(this, arguments); }
            },
            "setAccelPath": {
              "value": function () { return this.set_accel_path.apply(this, arguments); }
            },
            "setLabel": {
              "value": function () { return this.set_label.apply(this, arguments); }
            },
            "setReserveIndicator": {
              "value": function () { return this.set_reserve_indicator.apply(this, arguments); }
            },
            "setRightJustified": {
              "value": function () { return this.set_right_justified.apply(this, arguments); }
            },
            "setSubmenu": {
              "value": function () { return this.set_submenu.apply(this, arguments); }
            },
            "setUseUnderline": {
              "value": function () { return this.set_use_underline.apply(this, arguments); }
            },
            "toggleSizeAllocate": {
              "value": function () { return this.toggle_size_allocate.apply(this, arguments); }
            },
            "toggleSizeRequest": {
              "value": function () { return this.toggle_size_request.apply(this, arguments); }
            },
            "accelPath": {
              "get": function () { return this.accel_path; },
              "set": function (value) { this.accel_path = value; }
            },
            "rightJustified": {
              "get": function () { return this.right_justified; },
              "set": function (value) { this.right_justified = value; }
            },
            "useUnderline": {
              "get": function () { return this.use_underline; },
              "set": function (value) { this.use_underline = value; }
            }
          },
          "static": {}
        },
        "MenuItemAccessible": {
          "prototype": {},
          "static": {}
        },
        "MenuShell": {
          "prototype": {
            "activateItem": {
              "value": function () { return this.activate_item.apply(this, arguments); }
            },
            "bindModel": {
              "value": function () { return this.bind_model.apply(this, arguments); }
            },
            "getParentShell": {
              "value": function () { return this.get_parent_shell.apply(this, arguments); }
            },
            "getSelectedItem": {
              "value": function () { return this.get_selected_item.apply(this, arguments); }
            },
            "getTakeFocus": {
              "value": function () { return this.get_take_focus.apply(this, arguments); }
            },
            "selectFirst": {
              "value": function () { return this.select_first.apply(this, arguments); }
            },
            "selectItem": {
              "value": function () { return this.select_item.apply(this, arguments); }
            },
            "setTakeFocus": {
              "value": function () { return this.set_take_focus.apply(this, arguments); }
            },
            "takeFocus": {
              "get": function () { return this.take_focus; },
              "set": function (value) { this.take_focus = value; }
            }
          },
          "static": {}
        },
        "MenuShellAccessible": {
          "prototype": {},
          "static": {}
        },
        "MenuToolButton": {
          "prototype": {
            "getMenu": {
              "value": function () { return this.get_menu.apply(this, arguments); }
            },
            "setArrowTooltipMarkup": {
              "value": function () { return this.set_arrow_tooltip_markup.apply(this, arguments); }
            },
            "setArrowTooltipText": {
              "value": function () { return this.set_arrow_tooltip_text.apply(this, arguments); }
            },
            "setMenu": {
              "value": function () { return this.set_menu.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "MessageDialog": {
          "prototype": {
            "formatSecondaryMarkup": {
              "value": function () { return this.format_secondary_markup.apply(this, arguments); }
            },
            "formatSecondaryText": {
              "value": function () { return this.format_secondary_text.apply(this, arguments); }
            },
            "getImage": {
              "value": function () { return this.get_image.apply(this, arguments); }
            },
            "getMessageArea": {
              "value": function () { return this.get_message_area.apply(this, arguments); }
            },
            "setImage": {
              "value": function () { return this.set_image.apply(this, arguments); }
            },
            "setMarkup": {
              "value": function () { return this.set_markup.apply(this, arguments); }
            },
            "messageArea": {
              "get": function () { return this.message_area; },
              "set": function (value) { this.message_area = value; }
            },
            "messageType": {
              "get": function () { return this.message_type; },
              "set": function (value) { this.message_type = value; }
            },
            "secondaryText": {
              "get": function () { return this.secondary_text; },
              "set": function (value) { this.secondary_text = value; }
            },
            "secondaryUseMarkup": {
              "get": function () { return this.secondary_use_markup; },
              "set": function (value) { this.secondary_use_markup = value; }
            },
            "useMarkup": {
              "get": function () { return this.use_markup; },
              "set": function (value) { this.use_markup = value; }
            }
          },
          "static": {}
        },
        "Misc": {
          "prototype": {
            "getAlignment": {
              "value": function () { return this.get_alignment.apply(this, arguments); }
            },
            "getPadding": {
              "value": function () { return this.get_padding.apply(this, arguments); }
            },
            "setAlignment": {
              "value": function () { return this.set_alignment.apply(this, arguments); }
            },
            "setPadding": {
              "value": function () { return this.set_padding.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "ModelButton": {
          "prototype": {
            "menuName": {
              "get": function () { return this.menu_name; },
              "set": function (value) { this.menu_name = value; }
            }
          },
          "static": {}
        },
        "MountOperation": {
          "prototype": {
            "getParent": {
              "value": function () { return this.get_parent.apply(this, arguments); }
            },
            "getScreen": {
              "value": function () { return this.get_screen.apply(this, arguments); }
            },
            "isShowing": {
              "get": function () { return this.is_showing; },
              "set": function (value) { this.is_showing = value; }
            },
            "setParent": {
              "value": function () { return this.set_parent.apply(this, arguments); }
            },
            "setScreen": {
              "value": function () { return this.set_screen.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "NativeDialog": {
          "prototype": {
            "getModal": {
              "value": function () { return this.get_modal.apply(this, arguments); }
            },
            "getTitle": {
              "value": function () { return this.get_title.apply(this, arguments); }
            },
            "getTransientFor": {
              "value": function () { return this.get_transient_for.apply(this, arguments); }
            },
            "getVisible": {
              "value": function () { return this.get_visible.apply(this, arguments); }
            },
            "setModal": {
              "value": function () { return this.set_modal.apply(this, arguments); }
            },
            "setTitle": {
              "value": function () { return this.set_title.apply(this, arguments); }
            },
            "setTransientFor": {
              "value": function () { return this.set_transient_for.apply(this, arguments); }
            },
            "transientFor": {
              "get": function () { return this.transient_for; },
              "set": function (value) { this.transient_for = value; }
            }
          },
          "static": {}
        },
        "Notebook": {
          "prototype": {
            "appendPage": {
              "value": function () { return this.append_page.apply(this, arguments); }
            },
            "appendPageMenu": {
              "value": function () { return this.append_page_menu.apply(this, arguments); }
            },
            "detachTab": {
              "value": function () { return this.detach_tab.apply(this, arguments); }
            },
            "getActionWidget": {
              "value": function () { return this.get_action_widget.apply(this, arguments); }
            },
            "getCurrentPage": {
              "value": function () { return this.get_current_page.apply(this, arguments); }
            },
            "getGroupName": {
              "value": function () { return this.get_group_name.apply(this, arguments); }
            },
            "getMenuLabel": {
              "value": function () { return this.get_menu_label.apply(this, arguments); }
            },
            "getMenuLabelText": {
              "value": function () { return this.get_menu_label_text.apply(this, arguments); }
            },
            "getNPages": {
              "value": function () { return this.get_n_pages.apply(this, arguments); }
            },
            "getNthPage": {
              "value": function () { return this.get_nth_page.apply(this, arguments); }
            },
            "getScrollable": {
              "value": function () { return this.get_scrollable.apply(this, arguments); }
            },
            "getShowBorder": {
              "value": function () { return this.get_show_border.apply(this, arguments); }
            },
            "getShowTabs": {
              "value": function () { return this.get_show_tabs.apply(this, arguments); }
            },
            "getTabDetachable": {
              "value": function () { return this.get_tab_detachable.apply(this, arguments); }
            },
            "getTabHborder": {
              "value": function () { return this.get_tab_hborder.apply(this, arguments); }
            },
            "getTabLabel": {
              "value": function () { return this.get_tab_label.apply(this, arguments); }
            },
            "getTabLabelText": {
              "value": function () { return this.get_tab_label_text.apply(this, arguments); }
            },
            "getTabPos": {
              "value": function () { return this.get_tab_pos.apply(this, arguments); }
            },
            "getTabReorderable": {
              "value": function () { return this.get_tab_reorderable.apply(this, arguments); }
            },
            "getTabVborder": {
              "value": function () { return this.get_tab_vborder.apply(this, arguments); }
            },
            "insertPage": {
              "value": function () { return this.insert_page.apply(this, arguments); }
            },
            "insertPageMenu": {
              "value": function () { return this.insert_page_menu.apply(this, arguments); }
            },
            "nextPage": {
              "value": function () { return this.next_page.apply(this, arguments); }
            },
            "pageNum": {
              "value": function () { return this.page_num.apply(this, arguments); }
            },
            "popupDisable": {
              "value": function () { return this.popup_disable.apply(this, arguments); }
            },
            "popupEnable": {
              "value": function () { return this.popup_enable.apply(this, arguments); }
            },
            "prependPage": {
              "value": function () { return this.prepend_page.apply(this, arguments); }
            },
            "prependPageMenu": {
              "value": function () { return this.prepend_page_menu.apply(this, arguments); }
            },
            "prevPage": {
              "value": function () { return this.prev_page.apply(this, arguments); }
            },
            "removePage": {
              "value": function () { return this.remove_page.apply(this, arguments); }
            },
            "reorderChild": {
              "value": function () { return this.reorder_child.apply(this, arguments); }
            },
            "setActionWidget": {
              "value": function () { return this.set_action_widget.apply(this, arguments); }
            },
            "setCurrentPage": {
              "value": function () { return this.set_current_page.apply(this, arguments); }
            },
            "setGroupName": {
              "value": function () { return this.set_group_name.apply(this, arguments); }
            },
            "setMenuLabel": {
              "value": function () { return this.set_menu_label.apply(this, arguments); }
            },
            "setMenuLabelText": {
              "value": function () { return this.set_menu_label_text.apply(this, arguments); }
            },
            "setScrollable": {
              "value": function () { return this.set_scrollable.apply(this, arguments); }
            },
            "setShowBorder": {
              "value": function () { return this.set_show_border.apply(this, arguments); }
            },
            "setShowTabs": {
              "value": function () { return this.set_show_tabs.apply(this, arguments); }
            },
            "setTabDetachable": {
              "value": function () { return this.set_tab_detachable.apply(this, arguments); }
            },
            "setTabLabel": {
              "value": function () { return this.set_tab_label.apply(this, arguments); }
            },
            "setTabLabelText": {
              "value": function () { return this.set_tab_label_text.apply(this, arguments); }
            },
            "setTabPos": {
              "value": function () { return this.set_tab_pos.apply(this, arguments); }
            },
            "setTabReorderable": {
              "value": function () { return this.set_tab_reorderable.apply(this, arguments); }
            },
            "enablePopup": {
              "get": function () { return this.enable_popup; },
              "set": function (value) { this.enable_popup = value; }
            },
            "groupName": {
              "get": function () { return this.group_name; },
              "set": function (value) { this.group_name = value; }
            },
            "showBorder": {
              "get": function () { return this.show_border; },
              "set": function (value) { this.show_border = value; }
            },
            "showTabs": {
              "get": function () { return this.show_tabs; },
              "set": function (value) { this.show_tabs = value; }
            },
            "tabPos": {
              "get": function () { return this.tab_pos; },
              "set": function (value) { this.tab_pos = value; }
            }
          },
          "static": {}
        },
        "NotebookAccessible": {
          "prototype": {},
          "static": {}
        },
        "NotebookPageAccessible": {
          "prototype": {},
          "static": {}
        },
        "NumerableIcon": {
          "prototype": {
            "getBackgroundGicon": {
              "value": function () { return this.get_background_gicon.apply(this, arguments); }
            },
            "getBackgroundIconName": {
              "value": function () { return this.get_background_icon_name.apply(this, arguments); }
            },
            "getCount": {
              "value": function () { return this.get_count.apply(this, arguments); }
            },
            "getLabel": {
              "value": function () { return this.get_label.apply(this, arguments); }
            },
            "getStyleContext": {
              "value": function () { return this.get_style_context.apply(this, arguments); }
            },
            "setBackgroundGicon": {
              "value": function () { return this.set_background_gicon.apply(this, arguments); }
            },
            "setBackgroundIconName": {
              "value": function () { return this.set_background_icon_name.apply(this, arguments); }
            },
            "setCount": {
              "value": function () { return this.set_count.apply(this, arguments); }
            },
            "setLabel": {
              "value": function () { return this.set_label.apply(this, arguments); }
            },
            "setStyleContext": {
              "value": function () { return this.set_style_context.apply(this, arguments); }
            },
            "backgroundIcon": {
              "get": function () { return this.background_icon; },
              "set": function (value) { this.background_icon = value; }
            },
            "backgroundIconName": {
              "get": function () { return this.background_icon_name; },
              "set": function (value) { this.background_icon_name = value; }
            },
            "styleContext": {
              "get": function () { return this.style_context; },
              "set": function (value) { this.style_context = value; }
            }
          },
          "static": {
            "newWithStyleContext": {
              "value": function () { return this.new_with_style_context.apply(this, arguments); }
            }
          }
        },
        "OffscreenWindow": {
          "prototype": {
            "getPixbuf": {
              "value": function () { return this.get_pixbuf.apply(this, arguments); }
            },
            "getSurface": {
              "value": function () { return this.get_surface.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Overlay": {
          "prototype": {
            "addOverlay": {
              "value": function () { return this.add_overlay.apply(this, arguments); }
            },
            "getOverlayPassThrough": {
              "value": function () { return this.get_overlay_pass_through.apply(this, arguments); }
            },
            "reorderOverlay": {
              "value": function () { return this.reorder_overlay.apply(this, arguments); }
            },
            "setOverlayPassThrough": {
              "value": function () { return this.set_overlay_pass_through.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "PageSetup": {
          "prototype": {
            "getBottomMargin": {
              "value": function () { return this.get_bottom_margin.apply(this, arguments); }
            },
            "getLeftMargin": {
              "value": function () { return this.get_left_margin.apply(this, arguments); }
            },
            "getOrientation": {
              "value": function () { return this.get_orientation.apply(this, arguments); }
            },
            "getPageHeight": {
              "value": function () { return this.get_page_height.apply(this, arguments); }
            },
            "getPageWidth": {
              "value": function () { return this.get_page_width.apply(this, arguments); }
            },
            "getPaperHeight": {
              "value": function () { return this.get_paper_height.apply(this, arguments); }
            },
            "getPaperSize": {
              "value": function () { return this.get_paper_size.apply(this, arguments); }
            },
            "getPaperWidth": {
              "value": function () { return this.get_paper_width.apply(this, arguments); }
            },
            "getRightMargin": {
              "value": function () { return this.get_right_margin.apply(this, arguments); }
            },
            "getTopMargin": {
              "value": function () { return this.get_top_margin.apply(this, arguments); }
            },
            "loadFile": {
              "value": function () { return this.load_file.apply(this, arguments); }
            },
            "loadKeyFile": {
              "value": function () { return this.load_key_file.apply(this, arguments); }
            },
            "setBottomMargin": {
              "value": function () { return this.set_bottom_margin.apply(this, arguments); }
            },
            "setLeftMargin": {
              "value": function () { return this.set_left_margin.apply(this, arguments); }
            },
            "setOrientation": {
              "value": function () { return this.set_orientation.apply(this, arguments); }
            },
            "setPaperSize": {
              "value": function () { return this.set_paper_size.apply(this, arguments); }
            },
            "setPaperSizeAndDefaultMargins": {
              "value": function () { return this.set_paper_size_and_default_margins.apply(this, arguments); }
            },
            "setRightMargin": {
              "value": function () { return this.set_right_margin.apply(this, arguments); }
            },
            "setTopMargin": {
              "value": function () { return this.set_top_margin.apply(this, arguments); }
            },
            "toFile": {
              "value": function () { return this.to_file.apply(this, arguments); }
            },
            "toKeyFile": {
              "value": function () { return this.to_key_file.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Paned": {
          "prototype": {
            "getChild1": {
              "value": function () { return this.get_child1.apply(this, arguments); }
            },
            "getChild2": {
              "value": function () { return this.get_child2.apply(this, arguments); }
            },
            "getHandleWindow": {
              "value": function () { return this.get_handle_window.apply(this, arguments); }
            },
            "getPosition": {
              "value": function () { return this.get_position.apply(this, arguments); }
            },
            "getWideHandle": {
              "value": function () { return this.get_wide_handle.apply(this, arguments); }
            },
            "setPosition": {
              "value": function () { return this.set_position.apply(this, arguments); }
            },
            "setWideHandle": {
              "value": function () { return this.set_wide_handle.apply(this, arguments); }
            },
            "maxPosition": {
              "get": function () { return this.max_position; },
              "set": function (value) { this.max_position = value; }
            },
            "minPosition": {
              "get": function () { return this.min_position; },
              "set": function (value) { this.min_position = value; }
            },
            "positionSet": {
              "get": function () { return this.position_set; },
              "set": function (value) { this.position_set = value; }
            },
            "wideHandle": {
              "get": function () { return this.wide_handle; },
              "set": function (value) { this.wide_handle = value; }
            }
          },
          "static": {}
        },
        "PanedAccessible": {
          "prototype": {},
          "static": {}
        },
        "PlacesSidebar": {
          "prototype": {
            "addShortcut": {
              "value": function () { return this.add_shortcut.apply(this, arguments); }
            },
            "getLocalOnly": {
              "value": function () { return this.get_local_only.apply(this, arguments); }
            },
            "getLocation": {
              "value": function () { return this.get_location.apply(this, arguments); }
            },
            "getNthBookmark": {
              "value": function () { return this.get_nth_bookmark.apply(this, arguments); }
            },
            "getOpenFlags": {
              "value": function () { return this.get_open_flags.apply(this, arguments); }
            },
            "getShowConnectToServer": {
              "value": function () { return this.get_show_connect_to_server.apply(this, arguments); }
            },
            "getShowDesktop": {
              "value": function () { return this.get_show_desktop.apply(this, arguments); }
            },
            "getShowEnterLocation": {
              "value": function () { return this.get_show_enter_location.apply(this, arguments); }
            },
            "getShowOtherLocations": {
              "value": function () { return this.get_show_other_locations.apply(this, arguments); }
            },
            "getShowRecent": {
              "value": function () { return this.get_show_recent.apply(this, arguments); }
            },
            "getShowTrash": {
              "value": function () { return this.get_show_trash.apply(this, arguments); }
            },
            "listShortcuts": {
              "value": function () { return this.list_shortcuts.apply(this, arguments); }
            },
            "removeShortcut": {
              "value": function () { return this.remove_shortcut.apply(this, arguments); }
            },
            "setDropTargetsVisible": {
              "value": function () { return this.set_drop_targets_visible.apply(this, arguments); }
            },
            "setLocalOnly": {
              "value": function () { return this.set_local_only.apply(this, arguments); }
            },
            "setLocation": {
              "value": function () { return this.set_location.apply(this, arguments); }
            },
            "setOpenFlags": {
              "value": function () { return this.set_open_flags.apply(this, arguments); }
            },
            "setShowConnectToServer": {
              "value": function () { return this.set_show_connect_to_server.apply(this, arguments); }
            },
            "setShowDesktop": {
              "value": function () { return this.set_show_desktop.apply(this, arguments); }
            },
            "setShowEnterLocation": {
              "value": function () { return this.set_show_enter_location.apply(this, arguments); }
            },
            "setShowOtherLocations": {
              "value": function () { return this.set_show_other_locations.apply(this, arguments); }
            },
            "setShowRecent": {
              "value": function () { return this.set_show_recent.apply(this, arguments); }
            },
            "setShowTrash": {
              "value": function () { return this.set_show_trash.apply(this, arguments); }
            },
            "localOnly": {
              "get": function () { return this.local_only; },
              "set": function (value) { this.local_only = value; }
            },
            "openFlags": {
              "get": function () { return this.open_flags; },
              "set": function (value) { this.open_flags = value; }
            },
            "populateAll": {
              "get": function () { return this.populate_all; },
              "set": function (value) { this.populate_all = value; }
            },
            "showConnectToServer": {
              "get": function () { return this.show_connect_to_server; },
              "set": function (value) { this.show_connect_to_server = value; }
            },
            "showDesktop": {
              "get": function () { return this.show_desktop; },
              "set": function (value) { this.show_desktop = value; }
            },
            "showEnterLocation": {
              "get": function () { return this.show_enter_location; },
              "set": function (value) { this.show_enter_location = value; }
            },
            "showOtherLocations": {
              "get": function () { return this.show_other_locations; },
              "set": function (value) { this.show_other_locations = value; }
            },
            "showRecent": {
              "get": function () { return this.show_recent; },
              "set": function (value) { this.show_recent = value; }
            },
            "showTrash": {
              "get": function () { return this.show_trash; },
              "set": function (value) { this.show_trash = value; }
            }
          },
          "static": {}
        },
        "Plug": {
          "prototype": {
            "constructForDisplay": {
              "value": function () { return this.construct_for_display.apply(this, arguments); }
            },
            "getEmbedded": {
              "value": function () { return this.get_embedded.apply(this, arguments); }
            },
            "getId": {
              "value": function () { return this.get_id.apply(this, arguments); }
            },
            "getSocketWindow": {
              "value": function () { return this.get_socket_window.apply(this, arguments); }
            },
            "socketWindow": {
              "get": function () { return this.socket_window; },
              "set": function (value) { this.socket_window = value; }
            }
          },
          "static": {}
        },
        "Popover": {
          "prototype": {
            "bindModel": {
              "value": function () { return this.bind_model.apply(this, arguments); }
            },
            "getConstrainTo": {
              "value": function () { return this.get_constrain_to.apply(this, arguments); }
            },
            "getDefaultWidget": {
              "value": function () { return this.get_default_widget.apply(this, arguments); }
            },
            "getModal": {
              "value": function () { return this.get_modal.apply(this, arguments); }
            },
            "getPointingTo": {
              "value": function () { return this.get_pointing_to.apply(this, arguments); }
            },
            "getPosition": {
              "value": function () { return this.get_position.apply(this, arguments); }
            },
            "getRelativeTo": {
              "value": function () { return this.get_relative_to.apply(this, arguments); }
            },
            "getTransitionsEnabled": {
              "value": function () { return this.get_transitions_enabled.apply(this, arguments); }
            },
            "setConstrainTo": {
              "value": function () { return this.set_constrain_to.apply(this, arguments); }
            },
            "setDefaultWidget": {
              "value": function () { return this.set_default_widget.apply(this, arguments); }
            },
            "setModal": {
              "value": function () { return this.set_modal.apply(this, arguments); }
            },
            "setPointingTo": {
              "value": function () { return this.set_pointing_to.apply(this, arguments); }
            },
            "setPosition": {
              "value": function () { return this.set_position.apply(this, arguments); }
            },
            "setRelativeTo": {
              "value": function () { return this.set_relative_to.apply(this, arguments); }
            },
            "setTransitionsEnabled": {
              "value": function () { return this.set_transitions_enabled.apply(this, arguments); }
            },
            "constrainTo": {
              "get": function () { return this.constrain_to; },
              "set": function (value) { this.constrain_to = value; }
            },
            "pointingTo": {
              "get": function () { return this.pointing_to; },
              "set": function (value) { this.pointing_to = value; }
            },
            "relativeTo": {
              "get": function () { return this.relative_to; },
              "set": function (value) { this.relative_to = value; }
            },
            "transitionsEnabled": {
              "get": function () { return this.transitions_enabled; },
              "set": function (value) { this.transitions_enabled = value; }
            }
          },
          "static": {}
        },
        "PopoverAccessible": {
          "prototype": {},
          "static": {}
        },
        "PopoverMenu": {
          "prototype": {
            "openSubmenu": {
              "value": function () { return this.open_submenu.apply(this, arguments); }
            },
            "visibleSubmenu": {
              "get": function () { return this.visible_submenu; },
              "set": function (value) { this.visible_submenu = value; }
            }
          },
          "static": {}
        },
        "PrintContext": {
          "prototype": {
            "createPangoContext": {
              "value": function () { return this.create_pango_context.apply(this, arguments); }
            },
            "createPangoLayout": {
              "value": function () { return this.create_pango_layout.apply(this, arguments); }
            },
            "getCairoContext": {
              "value": function () { return this.get_cairo_context.apply(this, arguments); }
            },
            "getDpiX": {
              "value": function () { return this.get_dpi_x.apply(this, arguments); }
            },
            "getDpiY": {
              "value": function () { return this.get_dpi_y.apply(this, arguments); }
            },
            "getHardMargins": {
              "value": function () { return this.get_hard_margins.apply(this, arguments); }
            },
            "getHeight": {
              "value": function () { return this.get_height.apply(this, arguments); }
            },
            "getPageSetup": {
              "value": function () { return this.get_page_setup.apply(this, arguments); }
            },
            "getPangoFontmap": {
              "value": function () { return this.get_pango_fontmap.apply(this, arguments); }
            },
            "getWidth": {
              "value": function () { return this.get_width.apply(this, arguments); }
            },
            "setCairoContext": {
              "value": function () { return this.set_cairo_context.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "PrintOperation": {
          "prototype": {
            "drawPageFinish": {
              "value": function () { return this.draw_page_finish.apply(this, arguments); }
            },
            "getDefaultPageSetup": {
              "value": function () { return this.get_default_page_setup.apply(this, arguments); }
            },
            "getEmbedPageSetup": {
              "value": function () { return this.get_embed_page_setup.apply(this, arguments); }
            },
            "getError": {
              "value": function () { return this.get_error.apply(this, arguments); }
            },
            "getHasSelection": {
              "value": function () { return this.get_has_selection.apply(this, arguments); }
            },
            "getNPagesToPrint": {
              "value": function () { return this.get_n_pages_to_print.apply(this, arguments); }
            },
            "getPrintSettings": {
              "value": function () { return this.get_print_settings.apply(this, arguments); }
            },
            "getStatus": {
              "value": function () { return this.get_status.apply(this, arguments); }
            },
            "getStatusString": {
              "value": function () { return this.get_status_string.apply(this, arguments); }
            },
            "getSupportSelection": {
              "value": function () { return this.get_support_selection.apply(this, arguments); }
            },
            "isFinished": {
              "value": function () { return this.is_finished.apply(this, arguments); }
            },
            "setAllowAsync": {
              "value": function () { return this.set_allow_async.apply(this, arguments); }
            },
            "setCurrentPage": {
              "value": function () { return this.set_current_page.apply(this, arguments); }
            },
            "setCustomTabLabel": {
              "value": function () { return this.set_custom_tab_label.apply(this, arguments); }
            },
            "setDefaultPageSetup": {
              "value": function () { return this.set_default_page_setup.apply(this, arguments); }
            },
            "setDeferDrawing": {
              "value": function () { return this.set_defer_drawing.apply(this, arguments); }
            },
            "setEmbedPageSetup": {
              "value": function () { return this.set_embed_page_setup.apply(this, arguments); }
            },
            "setExportFilename": {
              "value": function () { return this.set_export_filename.apply(this, arguments); }
            },
            "setHasSelection": {
              "value": function () { return this.set_has_selection.apply(this, arguments); }
            },
            "setJobName": {
              "value": function () { return this.set_job_name.apply(this, arguments); }
            },
            "setNPages": {
              "value": function () { return this.set_n_pages.apply(this, arguments); }
            },
            "setPrintSettings": {
              "value": function () { return this.set_print_settings.apply(this, arguments); }
            },
            "setShowProgress": {
              "value": function () { return this.set_show_progress.apply(this, arguments); }
            },
            "setSupportSelection": {
              "value": function () { return this.set_support_selection.apply(this, arguments); }
            },
            "setTrackPrintStatus": {
              "value": function () { return this.set_track_print_status.apply(this, arguments); }
            },
            "setUnit": {
              "value": function () { return this.set_unit.apply(this, arguments); }
            },
            "setUseFullPage": {
              "value": function () { return this.set_use_full_page.apply(this, arguments); }
            },
            "allowAsync": {
              "get": function () { return this.allow_async; },
              "set": function (value) { this.allow_async = value; }
            },
            "currentPage": {
              "get": function () { return this.current_page; },
              "set": function (value) { this.current_page = value; }
            },
            "customTabLabel": {
              "get": function () { return this.custom_tab_label; },
              "set": function (value) { this.custom_tab_label = value; }
            },
            "defaultPageSetup": {
              "get": function () { return this.default_page_setup; },
              "set": function (value) { this.default_page_setup = value; }
            },
            "embedPageSetup": {
              "get": function () { return this.embed_page_setup; },
              "set": function (value) { this.embed_page_setup = value; }
            },
            "exportFilename": {
              "get": function () { return this.export_filename; },
              "set": function (value) { this.export_filename = value; }
            },
            "hasSelection": {
              "get": function () { return this.has_selection; },
              "set": function (value) { this.has_selection = value; }
            },
            "jobName": {
              "get": function () { return this.job_name; },
              "set": function (value) { this.job_name = value; }
            },
            "nPages": {
              "get": function () { return this.n_pages; },
              "set": function (value) { this.n_pages = value; }
            },
            "nPagesToPrint": {
              "get": function () { return this.n_pages_to_print; },
              "set": function (value) { this.n_pages_to_print = value; }
            },
            "printSettings": {
              "get": function () { return this.print_settings; },
              "set": function (value) { this.print_settings = value; }
            },
            "showProgress": {
              "get": function () { return this.show_progress; },
              "set": function (value) { this.show_progress = value; }
            },
            "statusString": {
              "get": function () { return this.status_string; },
              "set": function (value) { this.status_string = value; }
            },
            "supportSelection": {
              "get": function () { return this.support_selection; },
              "set": function (value) { this.support_selection = value; }
            },
            "trackPrintStatus": {
              "get": function () { return this.track_print_status; },
              "set": function (value) { this.track_print_status = value; }
            },
            "useFullPage": {
              "get": function () { return this.use_full_page; },
              "set": function (value) { this.use_full_page = value; }
            }
          },
          "static": {}
        },
        "PrintSettings": {
          "prototype": {
            "getBool": {
              "value": function () { return this.get_bool.apply(this, arguments); }
            },
            "getCollate": {
              "value": function () { return this.get_collate.apply(this, arguments); }
            },
            "getDefaultSource": {
              "value": function () { return this.get_default_source.apply(this, arguments); }
            },
            "getDither": {
              "value": function () { return this.get_dither.apply(this, arguments); }
            },
            "getDouble": {
              "value": function () { return this.get_double.apply(this, arguments); }
            },
            "getDoubleWithDefault": {
              "value": function () { return this.get_double_with_default.apply(this, arguments); }
            },
            "getDuplex": {
              "value": function () { return this.get_duplex.apply(this, arguments); }
            },
            "getFinishings": {
              "value": function () { return this.get_finishings.apply(this, arguments); }
            },
            "getInt": {
              "value": function () { return this.get_int.apply(this, arguments); }
            },
            "getIntWithDefault": {
              "value": function () { return this.get_int_with_default.apply(this, arguments); }
            },
            "getLength": {
              "value": function () { return this.get_length.apply(this, arguments); }
            },
            "getMediaType": {
              "value": function () { return this.get_media_type.apply(this, arguments); }
            },
            "getNCopies": {
              "value": function () { return this.get_n_copies.apply(this, arguments); }
            },
            "getNumberUp": {
              "value": function () { return this.get_number_up.apply(this, arguments); }
            },
            "getNumberUpLayout": {
              "value": function () { return this.get_number_up_layout.apply(this, arguments); }
            },
            "getOrientation": {
              "value": function () { return this.get_orientation.apply(this, arguments); }
            },
            "getOutputBin": {
              "value": function () { return this.get_output_bin.apply(this, arguments); }
            },
            "getPageRanges": {
              "value": function () { return this.get_page_ranges.apply(this, arguments); }
            },
            "getPageSet": {
              "value": function () { return this.get_page_set.apply(this, arguments); }
            },
            "getPaperHeight": {
              "value": function () { return this.get_paper_height.apply(this, arguments); }
            },
            "getPaperSize": {
              "value": function () { return this.get_paper_size.apply(this, arguments); }
            },
            "getPaperWidth": {
              "value": function () { return this.get_paper_width.apply(this, arguments); }
            },
            "getPrintPages": {
              "value": function () { return this.get_print_pages.apply(this, arguments); }
            },
            "getPrinter": {
              "value": function () { return this.get_printer.apply(this, arguments); }
            },
            "getPrinterLpi": {
              "value": function () { return this.get_printer_lpi.apply(this, arguments); }
            },
            "getQuality": {
              "value": function () { return this.get_quality.apply(this, arguments); }
            },
            "getResolution": {
              "value": function () { return this.get_resolution.apply(this, arguments); }
            },
            "getResolutionX": {
              "value": function () { return this.get_resolution_x.apply(this, arguments); }
            },
            "getResolutionY": {
              "value": function () { return this.get_resolution_y.apply(this, arguments); }
            },
            "getReverse": {
              "value": function () { return this.get_reverse.apply(this, arguments); }
            },
            "getScale": {
              "value": function () { return this.get_scale.apply(this, arguments); }
            },
            "getUseColor": {
              "value": function () { return this.get_use_color.apply(this, arguments); }
            },
            "hasKey": {
              "value": function () { return this.has_key.apply(this, arguments); }
            },
            "loadFile": {
              "value": function () { return this.load_file.apply(this, arguments); }
            },
            "loadKeyFile": {
              "value": function () { return this.load_key_file.apply(this, arguments); }
            },
            "setBool": {
              "value": function () { return this.set_bool.apply(this, arguments); }
            },
            "setCollate": {
              "value": function () { return this.set_collate.apply(this, arguments); }
            },
            "setDefaultSource": {
              "value": function () { return this.set_default_source.apply(this, arguments); }
            },
            "setDither": {
              "value": function () { return this.set_dither.apply(this, arguments); }
            },
            "setDouble": {
              "value": function () { return this.set_double.apply(this, arguments); }
            },
            "setDuplex": {
              "value": function () { return this.set_duplex.apply(this, arguments); }
            },
            "setFinishings": {
              "value": function () { return this.set_finishings.apply(this, arguments); }
            },
            "setInt": {
              "value": function () { return this.set_int.apply(this, arguments); }
            },
            "setLength": {
              "value": function () { return this.set_length.apply(this, arguments); }
            },
            "setMediaType": {
              "value": function () { return this.set_media_type.apply(this, arguments); }
            },
            "setNCopies": {
              "value": function () { return this.set_n_copies.apply(this, arguments); }
            },
            "setNumberUp": {
              "value": function () { return this.set_number_up.apply(this, arguments); }
            },
            "setNumberUpLayout": {
              "value": function () { return this.set_number_up_layout.apply(this, arguments); }
            },
            "setOrientation": {
              "value": function () { return this.set_orientation.apply(this, arguments); }
            },
            "setOutputBin": {
              "value": function () { return this.set_output_bin.apply(this, arguments); }
            },
            "setPageRanges": {
              "value": function () { return this.set_page_ranges.apply(this, arguments); }
            },
            "setPageSet": {
              "value": function () { return this.set_page_set.apply(this, arguments); }
            },
            "setPaperHeight": {
              "value": function () { return this.set_paper_height.apply(this, arguments); }
            },
            "setPaperSize": {
              "value": function () { return this.set_paper_size.apply(this, arguments); }
            },
            "setPaperWidth": {
              "value": function () { return this.set_paper_width.apply(this, arguments); }
            },
            "setPrintPages": {
              "value": function () { return this.set_print_pages.apply(this, arguments); }
            },
            "setPrinter": {
              "value": function () { return this.set_printer.apply(this, arguments); }
            },
            "setPrinterLpi": {
              "value": function () { return this.set_printer_lpi.apply(this, arguments); }
            },
            "setQuality": {
              "value": function () { return this.set_quality.apply(this, arguments); }
            },
            "setResolution": {
              "value": function () { return this.set_resolution.apply(this, arguments); }
            },
            "setResolutionXy": {
              "value": function () { return this.set_resolution_xy.apply(this, arguments); }
            },
            "setReverse": {
              "value": function () { return this.set_reverse.apply(this, arguments); }
            },
            "setScale": {
              "value": function () { return this.set_scale.apply(this, arguments); }
            },
            "setUseColor": {
              "value": function () { return this.set_use_color.apply(this, arguments); }
            },
            "toFile": {
              "value": function () { return this.to_file.apply(this, arguments); }
            },
            "toKeyFile": {
              "value": function () { return this.to_key_file.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "ProgressBar": {
          "prototype": {
            "getEllipsize": {
              "value": function () { return this.get_ellipsize.apply(this, arguments); }
            },
            "getFraction": {
              "value": function () { return this.get_fraction.apply(this, arguments); }
            },
            "getInverted": {
              "value": function () { return this.get_inverted.apply(this, arguments); }
            },
            "getPulseStep": {
              "value": function () { return this.get_pulse_step.apply(this, arguments); }
            },
            "getShowText": {
              "value": function () { return this.get_show_text.apply(this, arguments); }
            },
            "getText": {
              "value": function () { return this.get_text.apply(this, arguments); }
            },
            "setEllipsize": {
              "value": function () { return this.set_ellipsize.apply(this, arguments); }
            },
            "setFraction": {
              "value": function () { return this.set_fraction.apply(this, arguments); }
            },
            "setInverted": {
              "value": function () { return this.set_inverted.apply(this, arguments); }
            },
            "setPulseStep": {
              "value": function () { return this.set_pulse_step.apply(this, arguments); }
            },
            "setShowText": {
              "value": function () { return this.set_show_text.apply(this, arguments); }
            },
            "setText": {
              "value": function () { return this.set_text.apply(this, arguments); }
            },
            "pulseStep": {
              "get": function () { return this.pulse_step; },
              "set": function (value) { this.pulse_step = value; }
            },
            "showText": {
              "get": function () { return this.show_text; },
              "set": function (value) { this.show_text = value; }
            }
          },
          "static": {}
        },
        "ProgressBarAccessible": {
          "prototype": {},
          "static": {}
        },
        "RadioAction": {
          "prototype": {
            "getCurrentValue": {
              "value": function () { return this.get_current_value.apply(this, arguments); }
            },
            "getGroup": {
              "value": function () { return this.get_group.apply(this, arguments); }
            },
            "joinGroup": {
              "value": function () { return this.join_group.apply(this, arguments); }
            },
            "setCurrentValue": {
              "value": function () { return this.set_current_value.apply(this, arguments); }
            },
            "setGroup": {
              "value": function () { return this.set_group.apply(this, arguments); }
            },
            "currentValue": {
              "get": function () { return this.current_value; },
              "set": function (value) { this.current_value = value; }
            }
          },
          "static": {}
        },
        "RadioButton": {
          "prototype": {
            "getGroup": {
              "value": function () { return this.get_group.apply(this, arguments); }
            },
            "joinGroup": {
              "value": function () { return this.join_group.apply(this, arguments); }
            },
            "setGroup": {
              "value": function () { return this.set_group.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "RadioButtonAccessible": {
          "prototype": {},
          "static": {}
        },
        "RadioMenuItem": {
          "prototype": {
            "getGroup": {
              "value": function () { return this.get_group.apply(this, arguments); }
            },
            "joinGroup": {
              "value": function () { return this.join_group.apply(this, arguments); }
            },
            "setGroup": {
              "value": function () { return this.set_group.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "RadioMenuItemAccessible": {
          "prototype": {},
          "static": {}
        },
        "RadioToolButton": {
          "prototype": {
            "getGroup": {
              "value": function () { return this.get_group.apply(this, arguments); }
            },
            "setGroup": {
              "value": function () { return this.set_group.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Range": {
          "prototype": {
            "getAdjustment": {
              "value": function () { return this.get_adjustment.apply(this, arguments); }
            },
            "getFillLevel": {
              "value": function () { return this.get_fill_level.apply(this, arguments); }
            },
            "getFlippable": {
              "value": function () { return this.get_flippable.apply(this, arguments); }
            },
            "getInverted": {
              "value": function () { return this.get_inverted.apply(this, arguments); }
            },
            "getLowerStepperSensitivity": {
              "value": function () { return this.get_lower_stepper_sensitivity.apply(this, arguments); }
            },
            "getMinSliderSize": {
              "value": function () { return this.get_min_slider_size.apply(this, arguments); }
            },
            "getRangeRect": {
              "value": function () { return this.get_range_rect.apply(this, arguments); }
            },
            "getRestrictToFillLevel": {
              "value": function () { return this.get_restrict_to_fill_level.apply(this, arguments); }
            },
            "getRoundDigits": {
              "value": function () { return this.get_round_digits.apply(this, arguments); }
            },
            "getShowFillLevel": {
              "value": function () { return this.get_show_fill_level.apply(this, arguments); }
            },
            "getSliderRange": {
              "value": function () { return this.get_slider_range.apply(this, arguments); }
            },
            "getSliderSizeFixed": {
              "value": function () { return this.get_slider_size_fixed.apply(this, arguments); }
            },
            "getUpperStepperSensitivity": {
              "value": function () { return this.get_upper_stepper_sensitivity.apply(this, arguments); }
            },
            "getValue": {
              "value": function () { return this.get_value.apply(this, arguments); }
            },
            "setAdjustment": {
              "value": function () { return this.set_adjustment.apply(this, arguments); }
            },
            "setFillLevel": {
              "value": function () { return this.set_fill_level.apply(this, arguments); }
            },
            "setFlippable": {
              "value": function () { return this.set_flippable.apply(this, arguments); }
            },
            "setIncrements": {
              "value": function () { return this.set_increments.apply(this, arguments); }
            },
            "setInverted": {
              "value": function () { return this.set_inverted.apply(this, arguments); }
            },
            "setLowerStepperSensitivity": {
              "value": function () { return this.set_lower_stepper_sensitivity.apply(this, arguments); }
            },
            "setMinSliderSize": {
              "value": function () { return this.set_min_slider_size.apply(this, arguments); }
            },
            "setRange": {
              "value": function () { return this.set_range.apply(this, arguments); }
            },
            "setRestrictToFillLevel": {
              "value": function () { return this.set_restrict_to_fill_level.apply(this, arguments); }
            },
            "setRoundDigits": {
              "value": function () { return this.set_round_digits.apply(this, arguments); }
            },
            "setShowFillLevel": {
              "value": function () { return this.set_show_fill_level.apply(this, arguments); }
            },
            "setSliderSizeFixed": {
              "value": function () { return this.set_slider_size_fixed.apply(this, arguments); }
            },
            "setUpperStepperSensitivity": {
              "value": function () { return this.set_upper_stepper_sensitivity.apply(this, arguments); }
            },
            "setValue": {
              "value": function () { return this.set_value.apply(this, arguments); }
            },
            "fillLevel": {
              "get": function () { return this.fill_level; },
              "set": function (value) { this.fill_level = value; }
            },
            "lowerStepperSensitivity": {
              "get": function () { return this.lower_stepper_sensitivity; },
              "set": function (value) { this.lower_stepper_sensitivity = value; }
            },
            "restrictToFillLevel": {
              "get": function () { return this.restrict_to_fill_level; },
              "set": function (value) { this.restrict_to_fill_level = value; }
            },
            "roundDigits": {
              "get": function () { return this.round_digits; },
              "set": function (value) { this.round_digits = value; }
            },
            "showFillLevel": {
              "get": function () { return this.show_fill_level; },
              "set": function (value) { this.show_fill_level = value; }
            },
            "upperStepperSensitivity": {
              "get": function () { return this.upper_stepper_sensitivity; },
              "set": function (value) { this.upper_stepper_sensitivity = value; }
            }
          },
          "static": {}
        },
        "RangeAccessible": {
          "prototype": {},
          "static": {}
        },
        "RcStyle": {
          "prototype": {},
          "static": {}
        },
        "RecentAction": {
          "prototype": {
            "getShowNumbers": {
              "value": function () { return this.get_show_numbers.apply(this, arguments); }
            },
            "setShowNumbers": {
              "value": function () { return this.set_show_numbers.apply(this, arguments); }
            },
            "showNumbers": {
              "get": function () { return this.show_numbers; },
              "set": function (value) { this.show_numbers = value; }
            }
          },
          "static": {}
        },
        "RecentChooserDialog": {
          "prototype": {},
          "static": {}
        },
        "RecentChooserMenu": {
          "prototype": {
            "getShowNumbers": {
              "value": function () { return this.get_show_numbers.apply(this, arguments); }
            },
            "setShowNumbers": {
              "value": function () { return this.set_show_numbers.apply(this, arguments); }
            },
            "showNumbers": {
              "get": function () { return this.show_numbers; },
              "set": function (value) { this.show_numbers = value; }
            }
          },
          "static": {}
        },
        "RecentChooserWidget": {
          "prototype": {},
          "static": {}
        },
        "RecentFilter": {
          "prototype": {
            "addAge": {
              "value": function () { return this.add_age.apply(this, arguments); }
            },
            "addApplication": {
              "value": function () { return this.add_application.apply(this, arguments); }
            },
            "addCustom": {
              "value": function () { return this.add_custom.apply(this, arguments); }
            },
            "addGroup": {
              "value": function () { return this.add_group.apply(this, arguments); }
            },
            "addMimeType": {
              "value": function () { return this.add_mime_type.apply(this, arguments); }
            },
            "addPattern": {
              "value": function () { return this.add_pattern.apply(this, arguments); }
            },
            "addPixbufFormats": {
              "value": function () { return this.add_pixbuf_formats.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getNeeded": {
              "value": function () { return this.get_needed.apply(this, arguments); }
            },
            "setName": {
              "value": function () { return this.set_name.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "RecentManager": {
          "prototype": {
            "addFull": {
              "value": function () { return this.add_full.apply(this, arguments); }
            },
            "addItem": {
              "value": function () { return this.add_item.apply(this, arguments); }
            },
            "getItems": {
              "value": function () { return this.get_items.apply(this, arguments); }
            },
            "hasItem": {
              "value": function () { return this.has_item.apply(this, arguments); }
            },
            "lookupItem": {
              "value": function () { return this.lookup_item.apply(this, arguments); }
            },
            "moveItem": {
              "value": function () { return this.move_item.apply(this, arguments); }
            },
            "purgeItems": {
              "value": function () { return this.purge_items.apply(this, arguments); }
            },
            "removeItem": {
              "value": function () { return this.remove_item.apply(this, arguments); }
            }
          },
          "static": {
            "getDefault": {
              "value": function () { return this.get_default.apply(this, arguments); }
            }
          }
        },
        "RendererCellAccessible": {
          "prototype": {},
          "static": {}
        },
        "Revealer": {
          "prototype": {
            "getChildRevealed": {
              "value": function () { return this.get_child_revealed.apply(this, arguments); }
            },
            "getRevealChild": {
              "value": function () { return this.get_reveal_child.apply(this, arguments); }
            },
            "getTransitionDuration": {
              "value": function () { return this.get_transition_duration.apply(this, arguments); }
            },
            "getTransitionType": {
              "value": function () { return this.get_transition_type.apply(this, arguments); }
            },
            "setRevealChild": {
              "value": function () { return this.set_reveal_child.apply(this, arguments); }
            },
            "setTransitionDuration": {
              "value": function () { return this.set_transition_duration.apply(this, arguments); }
            },
            "setTransitionType": {
              "value": function () { return this.set_transition_type.apply(this, arguments); }
            },
            "childRevealed": {
              "get": function () { return this.child_revealed; },
              "set": function (value) { this.child_revealed = value; }
            },
            "revealChild": {
              "get": function () { return this.reveal_child; },
              "set": function (value) { this.reveal_child = value; }
            },
            "transitionDuration": {
              "get": function () { return this.transition_duration; },
              "set": function (value) { this.transition_duration = value; }
            },
            "transitionType": {
              "get": function () { return this.transition_type; },
              "set": function (value) { this.transition_type = value; }
            }
          },
          "static": {}
        },
        "Scale": {
          "prototype": {
            "addMark": {
              "value": function () { return this.add_mark.apply(this, arguments); }
            },
            "clearMarks": {
              "value": function () { return this.clear_marks.apply(this, arguments); }
            },
            "getDigits": {
              "value": function () { return this.get_digits.apply(this, arguments); }
            },
            "getDrawValue": {
              "value": function () { return this.get_draw_value.apply(this, arguments); }
            },
            "getHasOrigin": {
              "value": function () { return this.get_has_origin.apply(this, arguments); }
            },
            "getLayout": {
              "value": function () { return this.get_layout.apply(this, arguments); }
            },
            "getLayoutOffsets": {
              "value": function () { return this.get_layout_offsets.apply(this, arguments); }
            },
            "getValuePos": {
              "value": function () { return this.get_value_pos.apply(this, arguments); }
            },
            "setDigits": {
              "value": function () { return this.set_digits.apply(this, arguments); }
            },
            "setDrawValue": {
              "value": function () { return this.set_draw_value.apply(this, arguments); }
            },
            "setHasOrigin": {
              "value": function () { return this.set_has_origin.apply(this, arguments); }
            },
            "setValuePos": {
              "value": function () { return this.set_value_pos.apply(this, arguments); }
            },
            "drawValue": {
              "get": function () { return this.draw_value; },
              "set": function (value) { this.draw_value = value; }
            },
            "hasOrigin": {
              "get": function () { return this.has_origin; },
              "set": function (value) { this.has_origin = value; }
            },
            "valuePos": {
              "get": function () { return this.value_pos; },
              "set": function (value) { this.value_pos = value; }
            }
          },
          "static": {}
        },
        "ScaleAccessible": {
          "prototype": {},
          "static": {}
        },
        "ScaleButton": {
          "prototype": {
            "getAdjustment": {
              "value": function () { return this.get_adjustment.apply(this, arguments); }
            },
            "getMinusButton": {
              "value": function () { return this.get_minus_button.apply(this, arguments); }
            },
            "getPlusButton": {
              "value": function () { return this.get_plus_button.apply(this, arguments); }
            },
            "getPopup": {
              "value": function () { return this.get_popup.apply(this, arguments); }
            },
            "getValue": {
              "value": function () { return this.get_value.apply(this, arguments); }
            },
            "setAdjustment": {
              "value": function () { return this.set_adjustment.apply(this, arguments); }
            },
            "setIcons": {
              "value": function () { return this.set_icons.apply(this, arguments); }
            },
            "setValue": {
              "value": function () { return this.set_value.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "ScaleButtonAccessible": {
          "prototype": {},
          "static": {}
        },
        "Scrollbar": {
          "prototype": {},
          "static": {}
        },
        "ScrolledWindow": {
          "prototype": {
            "addWithViewport": {
              "value": function () { return this.add_with_viewport.apply(this, arguments); }
            },
            "getCaptureButtonPress": {
              "value": function () { return this.get_capture_button_press.apply(this, arguments); }
            },
            "getHadjustment": {
              "value": function () { return this.get_hadjustment.apply(this, arguments); }
            },
            "getHscrollbar": {
              "value": function () { return this.get_hscrollbar.apply(this, arguments); }
            },
            "getKineticScrolling": {
              "value": function () { return this.get_kinetic_scrolling.apply(this, arguments); }
            },
            "getMinContentHeight": {
              "value": function () { return this.get_min_content_height.apply(this, arguments); }
            },
            "getMinContentWidth": {
              "value": function () { return this.get_min_content_width.apply(this, arguments); }
            },
            "getOverlayScrolling": {
              "value": function () { return this.get_overlay_scrolling.apply(this, arguments); }
            },
            "getPlacement": {
              "value": function () { return this.get_placement.apply(this, arguments); }
            },
            "getPolicy": {
              "value": function () { return this.get_policy.apply(this, arguments); }
            },
            "getShadowType": {
              "value": function () { return this.get_shadow_type.apply(this, arguments); }
            },
            "getVadjustment": {
              "value": function () { return this.get_vadjustment.apply(this, arguments); }
            },
            "getVscrollbar": {
              "value": function () { return this.get_vscrollbar.apply(this, arguments); }
            },
            "setCaptureButtonPress": {
              "value": function () { return this.set_capture_button_press.apply(this, arguments); }
            },
            "setHadjustment": {
              "value": function () { return this.set_hadjustment.apply(this, arguments); }
            },
            "setKineticScrolling": {
              "value": function () { return this.set_kinetic_scrolling.apply(this, arguments); }
            },
            "setMinContentHeight": {
              "value": function () { return this.set_min_content_height.apply(this, arguments); }
            },
            "setMinContentWidth": {
              "value": function () { return this.set_min_content_width.apply(this, arguments); }
            },
            "setOverlayScrolling": {
              "value": function () { return this.set_overlay_scrolling.apply(this, arguments); }
            },
            "setPlacement": {
              "value": function () { return this.set_placement.apply(this, arguments); }
            },
            "setPolicy": {
              "value": function () { return this.set_policy.apply(this, arguments); }
            },
            "setShadowType": {
              "value": function () { return this.set_shadow_type.apply(this, arguments); }
            },
            "setVadjustment": {
              "value": function () { return this.set_vadjustment.apply(this, arguments); }
            },
            "unsetPlacement": {
              "value": function () { return this.unset_placement.apply(this, arguments); }
            },
            "hscrollbarPolicy": {
              "get": function () { return this.hscrollbar_policy; },
              "set": function (value) { this.hscrollbar_policy = value; }
            },
            "kineticScrolling": {
              "get": function () { return this.kinetic_scrolling; },
              "set": function (value) { this.kinetic_scrolling = value; }
            },
            "minContentHeight": {
              "get": function () { return this.min_content_height; },
              "set": function (value) { this.min_content_height = value; }
            },
            "minContentWidth": {
              "get": function () { return this.min_content_width; },
              "set": function (value) { this.min_content_width = value; }
            },
            "overlayScrolling": {
              "get": function () { return this.overlay_scrolling; },
              "set": function (value) { this.overlay_scrolling = value; }
            },
            "shadowType": {
              "get": function () { return this.shadow_type; },
              "set": function (value) { this.shadow_type = value; }
            },
            "vscrollbarPolicy": {
              "get": function () { return this.vscrollbar_policy; },
              "set": function (value) { this.vscrollbar_policy = value; }
            },
            "windowPlacement": {
              "get": function () { return this.window_placement; },
              "set": function (value) { this.window_placement = value; }
            },
            "windowPlacementSet": {
              "get": function () { return this.window_placement_set; },
              "set": function (value) { this.window_placement_set = value; }
            }
          },
          "static": {}
        },
        "ScrolledWindowAccessible": {
          "prototype": {},
          "static": {}
        },
        "SearchBar": {
          "prototype": {
            "connectEntry": {
              "value": function () { return this.connect_entry.apply(this, arguments); }
            },
            "getSearchMode": {
              "value": function () { return this.get_search_mode.apply(this, arguments); }
            },
            "getShowCloseButton": {
              "value": function () { return this.get_show_close_button.apply(this, arguments); }
            },
            "handleEvent": {
              "value": function () { return this.handle_event.apply(this, arguments); }
            },
            "setSearchMode": {
              "value": function () { return this.set_search_mode.apply(this, arguments); }
            },
            "setShowCloseButton": {
              "value": function () { return this.set_show_close_button.apply(this, arguments); }
            },
            "searchModeEnabled": {
              "get": function () { return this.search_mode_enabled; },
              "set": function (value) { this.search_mode_enabled = value; }
            },
            "showCloseButton": {
              "get": function () { return this.show_close_button; },
              "set": function (value) { this.show_close_button = value; }
            }
          },
          "static": {}
        },
        "SearchEntry": {
          "prototype": {
            "handleEvent": {
              "value": function () { return this.handle_event.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Separator": {
          "prototype": {},
          "static": {}
        },
        "SeparatorMenuItem": {
          "prototype": {},
          "static": {}
        },
        "SeparatorToolItem": {
          "prototype": {
            "getDraw": {
              "value": function () { return this.get_draw.apply(this, arguments); }
            },
            "setDraw": {
              "value": function () { return this.set_draw.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Settings": {
          "prototype": {
            "resetProperty": {
              "value": function () { return this.reset_property.apply(this, arguments); }
            },
            "setDoubleProperty": {
              "value": function () { return this.set_double_property.apply(this, arguments); }
            },
            "setLongProperty": {
              "value": function () { return this.set_long_property.apply(this, arguments); }
            },
            "setPropertyValue": {
              "value": function () { return this.set_property_value.apply(this, arguments); }
            },
            "setStringProperty": {
              "value": function () { return this.set_string_property.apply(this, arguments); }
            },
            "colorHash": {
              "get": function () { return this.color_hash; },
              "set": function (value) { this.color_hash = value; }
            },
            "gtkAlternativeButtonOrder": {
              "get": function () { return this.gtk_alternative_button_order; },
              "set": function (value) { this.gtk_alternative_button_order = value; }
            },
            "gtkAlternativeSortArrows": {
              "get": function () { return this.gtk_alternative_sort_arrows; },
              "set": function (value) { this.gtk_alternative_sort_arrows = value; }
            },
            "gtkApplicationPreferDarkTheme": {
              "get": function () { return this.gtk_application_prefer_dark_theme; },
              "set": function (value) { this.gtk_application_prefer_dark_theme = value; }
            },
            "gtkAutoMnemonics": {
              "get": function () { return this.gtk_auto_mnemonics; },
              "set": function (value) { this.gtk_auto_mnemonics = value; }
            },
            "gtkButtonImages": {
              "get": function () { return this.gtk_button_images; },
              "set": function (value) { this.gtk_button_images = value; }
            },
            "gtkCanChangeAccels": {
              "get": function () { return this.gtk_can_change_accels; },
              "set": function (value) { this.gtk_can_change_accels = value; }
            },
            "gtkColorPalette": {
              "get": function () { return this.gtk_color_palette; },
              "set": function (value) { this.gtk_color_palette = value; }
            },
            "gtkColorScheme": {
              "get": function () { return this.gtk_color_scheme; },
              "set": function (value) { this.gtk_color_scheme = value; }
            },
            "gtkCursorBlink": {
              "get": function () { return this.gtk_cursor_blink; },
              "set": function (value) { this.gtk_cursor_blink = value; }
            },
            "gtkCursorBlinkTime": {
              "get": function () { return this.gtk_cursor_blink_time; },
              "set": function (value) { this.gtk_cursor_blink_time = value; }
            },
            "gtkCursorBlinkTimeout": {
              "get": function () { return this.gtk_cursor_blink_timeout; },
              "set": function (value) { this.gtk_cursor_blink_timeout = value; }
            },
            "gtkCursorThemeName": {
              "get": function () { return this.gtk_cursor_theme_name; },
              "set": function (value) { this.gtk_cursor_theme_name = value; }
            },
            "gtkCursorThemeSize": {
              "get": function () { return this.gtk_cursor_theme_size; },
              "set": function (value) { this.gtk_cursor_theme_size = value; }
            },
            "gtkDecorationLayout": {
              "get": function () { return this.gtk_decoration_layout; },
              "set": function (value) { this.gtk_decoration_layout = value; }
            },
            "gtkDialogsUseHeader": {
              "get": function () { return this.gtk_dialogs_use_header; },
              "set": function (value) { this.gtk_dialogs_use_header = value; }
            },
            "gtkDndDragThreshold": {
              "get": function () { return this.gtk_dnd_drag_threshold; },
              "set": function (value) { this.gtk_dnd_drag_threshold = value; }
            },
            "gtkDoubleClickDistance": {
              "get": function () { return this.gtk_double_click_distance; },
              "set": function (value) { this.gtk_double_click_distance = value; }
            },
            "gtkDoubleClickTime": {
              "get": function () { return this.gtk_double_click_time; },
              "set": function (value) { this.gtk_double_click_time = value; }
            },
            "gtkEnableAccels": {
              "get": function () { return this.gtk_enable_accels; },
              "set": function (value) { this.gtk_enable_accels = value; }
            },
            "gtkEnableAnimations": {
              "get": function () { return this.gtk_enable_animations; },
              "set": function (value) { this.gtk_enable_animations = value; }
            },
            "gtkEnableEventSounds": {
              "get": function () { return this.gtk_enable_event_sounds; },
              "set": function (value) { this.gtk_enable_event_sounds = value; }
            },
            "gtkEnableInputFeedbackSounds": {
              "get": function () { return this.gtk_enable_input_feedback_sounds; },
              "set": function (value) { this.gtk_enable_input_feedback_sounds = value; }
            },
            "gtkEnableMnemonics": {
              "get": function () { return this.gtk_enable_mnemonics; },
              "set": function (value) { this.gtk_enable_mnemonics = value; }
            },
            "gtkEnablePrimaryPaste": {
              "get": function () { return this.gtk_enable_primary_paste; },
              "set": function (value) { this.gtk_enable_primary_paste = value; }
            },
            "gtkEnableTooltips": {
              "get": function () { return this.gtk_enable_tooltips; },
              "set": function (value) { this.gtk_enable_tooltips = value; }
            },
            "gtkEntryPasswordHintTimeout": {
              "get": function () { return this.gtk_entry_password_hint_timeout; },
              "set": function (value) { this.gtk_entry_password_hint_timeout = value; }
            },
            "gtkEntrySelectOnFocus": {
              "get": function () { return this.gtk_entry_select_on_focus; },
              "set": function (value) { this.gtk_entry_select_on_focus = value; }
            },
            "gtkErrorBell": {
              "get": function () { return this.gtk_error_bell; },
              "set": function (value) { this.gtk_error_bell = value; }
            },
            "gtkFallbackIconTheme": {
              "get": function () { return this.gtk_fallback_icon_theme; },
              "set": function (value) { this.gtk_fallback_icon_theme = value; }
            },
            "gtkFileChooserBackend": {
              "get": function () { return this.gtk_file_chooser_backend; },
              "set": function (value) { this.gtk_file_chooser_backend = value; }
            },
            "gtkFontName": {
              "get": function () { return this.gtk_font_name; },
              "set": function (value) { this.gtk_font_name = value; }
            },
            "gtkFontconfigTimestamp": {
              "get": function () { return this.gtk_fontconfig_timestamp; },
              "set": function (value) { this.gtk_fontconfig_timestamp = value; }
            },
            "gtkIconSizes": {
              "get": function () { return this.gtk_icon_sizes; },
              "set": function (value) { this.gtk_icon_sizes = value; }
            },
            "gtkIconThemeName": {
              "get": function () { return this.gtk_icon_theme_name; },
              "set": function (value) { this.gtk_icon_theme_name = value; }
            },
            "gtkImModule": {
              "get": function () { return this.gtk_im_module; },
              "set": function (value) { this.gtk_im_module = value; }
            },
            "gtkImPreeditStyle": {
              "get": function () { return this.gtk_im_preedit_style; },
              "set": function (value) { this.gtk_im_preedit_style = value; }
            },
            "gtkImStatusStyle": {
              "get": function () { return this.gtk_im_status_style; },
              "set": function (value) { this.gtk_im_status_style = value; }
            },
            "gtkKeyThemeName": {
              "get": function () { return this.gtk_key_theme_name; },
              "set": function (value) { this.gtk_key_theme_name = value; }
            },
            "gtkKeynavCursorOnly": {
              "get": function () { return this.gtk_keynav_cursor_only; },
              "set": function (value) { this.gtk_keynav_cursor_only = value; }
            },
            "gtkKeynavWrapAround": {
              "get": function () { return this.gtk_keynav_wrap_around; },
              "set": function (value) { this.gtk_keynav_wrap_around = value; }
            },
            "gtkLabelSelectOnFocus": {
              "get": function () { return this.gtk_label_select_on_focus; },
              "set": function (value) { this.gtk_label_select_on_focus = value; }
            },
            "gtkLongPressTime": {
              "get": function () { return this.gtk_long_press_time; },
              "set": function (value) { this.gtk_long_press_time = value; }
            },
            "gtkMenuBarAccel": {
              "get": function () { return this.gtk_menu_bar_accel; },
              "set": function (value) { this.gtk_menu_bar_accel = value; }
            },
            "gtkMenuBarPopupDelay": {
              "get": function () { return this.gtk_menu_bar_popup_delay; },
              "set": function (value) { this.gtk_menu_bar_popup_delay = value; }
            },
            "gtkMenuImages": {
              "get": function () { return this.gtk_menu_images; },
              "set": function (value) { this.gtk_menu_images = value; }
            },
            "gtkMenuPopdownDelay": {
              "get": function () { return this.gtk_menu_popdown_delay; },
              "set": function (value) { this.gtk_menu_popdown_delay = value; }
            },
            "gtkMenuPopupDelay": {
              "get": function () { return this.gtk_menu_popup_delay; },
              "set": function (value) { this.gtk_menu_popup_delay = value; }
            },
            "gtkModules": {
              "get": function () { return this.gtk_modules; },
              "set": function (value) { this.gtk_modules = value; }
            },
            "gtkPrimaryButtonWarpsSlider": {
              "get": function () { return this.gtk_primary_button_warps_slider; },
              "set": function (value) { this.gtk_primary_button_warps_slider = value; }
            },
            "gtkPrintBackends": {
              "get": function () { return this.gtk_print_backends; },
              "set": function (value) { this.gtk_print_backends = value; }
            },
            "gtkPrintPreviewCommand": {
              "get": function () { return this.gtk_print_preview_command; },
              "set": function (value) { this.gtk_print_preview_command = value; }
            },
            "gtkRecentFilesEnabled": {
              "get": function () { return this.gtk_recent_files_enabled; },
              "set": function (value) { this.gtk_recent_files_enabled = value; }
            },
            "gtkRecentFilesLimit": {
              "get": function () { return this.gtk_recent_files_limit; },
              "set": function (value) { this.gtk_recent_files_limit = value; }
            },
            "gtkRecentFilesMaxAge": {
              "get": function () { return this.gtk_recent_files_max_age; },
              "set": function (value) { this.gtk_recent_files_max_age = value; }
            },
            "gtkScrolledWindowPlacement": {
              "get": function () { return this.gtk_scrolled_window_placement; },
              "set": function (value) { this.gtk_scrolled_window_placement = value; }
            },
            "gtkShellShowsAppMenu": {
              "get": function () { return this.gtk_shell_shows_app_menu; },
              "set": function (value) { this.gtk_shell_shows_app_menu = value; }
            },
            "gtkShellShowsDesktop": {
              "get": function () { return this.gtk_shell_shows_desktop; },
              "set": function (value) { this.gtk_shell_shows_desktop = value; }
            },
            "gtkShellShowsMenubar": {
              "get": function () { return this.gtk_shell_shows_menubar; },
              "set": function (value) { this.gtk_shell_shows_menubar = value; }
            },
            "gtkShowInputMethodMenu": {
              "get": function () { return this.gtk_show_input_method_menu; },
              "set": function (value) { this.gtk_show_input_method_menu = value; }
            },
            "gtkShowUnicodeMenu": {
              "get": function () { return this.gtk_show_unicode_menu; },
              "set": function (value) { this.gtk_show_unicode_menu = value; }
            },
            "gtkSoundThemeName": {
              "get": function () { return this.gtk_sound_theme_name; },
              "set": function (value) { this.gtk_sound_theme_name = value; }
            },
            "gtkSplitCursor": {
              "get": function () { return this.gtk_split_cursor; },
              "set": function (value) { this.gtk_split_cursor = value; }
            },
            "gtkThemeName": {
              "get": function () { return this.gtk_theme_name; },
              "set": function (value) { this.gtk_theme_name = value; }
            },
            "gtkTimeoutExpand": {
              "get": function () { return this.gtk_timeout_expand; },
              "set": function (value) { this.gtk_timeout_expand = value; }
            },
            "gtkTimeoutInitial": {
              "get": function () { return this.gtk_timeout_initial; },
              "set": function (value) { this.gtk_timeout_initial = value; }
            },
            "gtkTimeoutRepeat": {
              "get": function () { return this.gtk_timeout_repeat; },
              "set": function (value) { this.gtk_timeout_repeat = value; }
            },
            "gtkTitlebarDoubleClick": {
              "get": function () { return this.gtk_titlebar_double_click; },
              "set": function (value) { this.gtk_titlebar_double_click = value; }
            },
            "gtkTitlebarMiddleClick": {
              "get": function () { return this.gtk_titlebar_middle_click; },
              "set": function (value) { this.gtk_titlebar_middle_click = value; }
            },
            "gtkTitlebarRightClick": {
              "get": function () { return this.gtk_titlebar_right_click; },
              "set": function (value) { this.gtk_titlebar_right_click = value; }
            },
            "gtkToolbarIconSize": {
              "get": function () { return this.gtk_toolbar_icon_size; },
              "set": function (value) { this.gtk_toolbar_icon_size = value; }
            },
            "gtkToolbarStyle": {
              "get": function () { return this.gtk_toolbar_style; },
              "set": function (value) { this.gtk_toolbar_style = value; }
            },
            "gtkTooltipBrowseModeTimeout": {
              "get": function () { return this.gtk_tooltip_browse_mode_timeout; },
              "set": function (value) { this.gtk_tooltip_browse_mode_timeout = value; }
            },
            "gtkTooltipBrowseTimeout": {
              "get": function () { return this.gtk_tooltip_browse_timeout; },
              "set": function (value) { this.gtk_tooltip_browse_timeout = value; }
            },
            "gtkTooltipTimeout": {
              "get": function () { return this.gtk_tooltip_timeout; },
              "set": function (value) { this.gtk_tooltip_timeout = value; }
            },
            "gtkTouchscreenMode": {
              "get": function () { return this.gtk_touchscreen_mode; },
              "set": function (value) { this.gtk_touchscreen_mode = value; }
            },
            "gtkVisibleFocus": {
              "get": function () { return this.gtk_visible_focus; },
              "set": function (value) { this.gtk_visible_focus = value; }
            },
            "gtkXftAntialias": {
              "get": function () { return this.gtk_xft_antialias; },
              "set": function (value) { this.gtk_xft_antialias = value; }
            },
            "gtkXftDpi": {
              "get": function () { return this.gtk_xft_dpi; },
              "set": function (value) { this.gtk_xft_dpi = value; }
            },
            "gtkXftHinting": {
              "get": function () { return this.gtk_xft_hinting; },
              "set": function (value) { this.gtk_xft_hinting = value; }
            },
            "gtkXftHintstyle": {
              "get": function () { return this.gtk_xft_hintstyle; },
              "set": function (value) { this.gtk_xft_hintstyle = value; }
            },
            "gtkXftRgba": {
              "get": function () { return this.gtk_xft_rgba; },
              "set": function (value) { this.gtk_xft_rgba = value; }
            }
          },
          "static": {
            "getDefault": {
              "value": function () { return this.get_default.apply(this, arguments); }
            },
            "getForScreen": {
              "value": function () { return this.get_for_screen.apply(this, arguments); }
            },
            "installProperty": {
              "value": function () { return this.install_property.apply(this, arguments); }
            },
            "installPropertyParser": {
              "value": function () { return this.install_property_parser.apply(this, arguments); }
            }
          }
        },
        "ShortcutsGroup": {
          "prototype": {
            "accelSizeGroup": {
              "get": function () { return this.accel_size_group; },
              "set": function (value) { this.accel_size_group = value; }
            },
            "titleSizeGroup": {
              "get": function () { return this.title_size_group; },
              "set": function (value) { this.title_size_group = value; }
            }
          },
          "static": {}
        },
        "ShortcutsSection": {
          "prototype": {
            "maxHeight": {
              "get": function () { return this.max_height; },
              "set": function (value) { this.max_height = value; }
            },
            "sectionName": {
              "get": function () { return this.section_name; },
              "set": function (value) { this.section_name = value; }
            },
            "viewName": {
              "get": function () { return this.view_name; },
              "set": function (value) { this.view_name = value; }
            }
          },
          "static": {}
        },
        "ShortcutsShortcut": {
          "prototype": {
            "accelSizeGroup": {
              "get": function () { return this.accel_size_group; },
              "set": function (value) { this.accel_size_group = value; }
            },
            "iconSet": {
              "get": function () { return this.icon_set; },
              "set": function (value) { this.icon_set = value; }
            },
            "shortcutType": {
              "get": function () { return this.shortcut_type; },
              "set": function (value) { this.shortcut_type = value; }
            },
            "subtitleSet": {
              "get": function () { return this.subtitle_set; },
              "set": function (value) { this.subtitle_set = value; }
            },
            "titleSizeGroup": {
              "get": function () { return this.title_size_group; },
              "set": function (value) { this.title_size_group = value; }
            }
          },
          "static": {}
        },
        "ShortcutsWindow": {
          "prototype": {
            "sectionName": {
              "get": function () { return this.section_name; },
              "set": function (value) { this.section_name = value; }
            },
            "viewName": {
              "get": function () { return this.view_name; },
              "set": function (value) { this.view_name = value; }
            }
          },
          "static": {}
        },
        "SizeGroup": {
          "prototype": {
            "addWidget": {
              "value": function () { return this.add_widget.apply(this, arguments); }
            },
            "getIgnoreHidden": {
              "value": function () { return this.get_ignore_hidden.apply(this, arguments); }
            },
            "getMode": {
              "value": function () { return this.get_mode.apply(this, arguments); }
            },
            "getWidgets": {
              "value": function () { return this.get_widgets.apply(this, arguments); }
            },
            "removeWidget": {
              "value": function () { return this.remove_widget.apply(this, arguments); }
            },
            "setIgnoreHidden": {
              "value": function () { return this.set_ignore_hidden.apply(this, arguments); }
            },
            "setMode": {
              "value": function () { return this.set_mode.apply(this, arguments); }
            },
            "ignoreHidden": {
              "get": function () { return this.ignore_hidden; },
              "set": function (value) { this.ignore_hidden = value; }
            }
          },
          "static": {}
        },
        "Socket": {
          "prototype": {
            "addId": {
              "value": function () { return this.add_id.apply(this, arguments); }
            },
            "getId": {
              "value": function () { return this.get_id.apply(this, arguments); }
            },
            "getPlugWindow": {
              "value": function () { return this.get_plug_window.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "SpinButton": {
          "prototype": {
            "getAdjustment": {
              "value": function () { return this.get_adjustment.apply(this, arguments); }
            },
            "getDigits": {
              "value": function () { return this.get_digits.apply(this, arguments); }
            },
            "getIncrements": {
              "value": function () { return this.get_increments.apply(this, arguments); }
            },
            "getNumeric": {
              "value": function () { return this.get_numeric.apply(this, arguments); }
            },
            "getRange": {
              "value": function () { return this.get_range.apply(this, arguments); }
            },
            "getSnapToTicks": {
              "value": function () { return this.get_snap_to_ticks.apply(this, arguments); }
            },
            "getUpdatePolicy": {
              "value": function () { return this.get_update_policy.apply(this, arguments); }
            },
            "getValue": {
              "value": function () { return this.get_value.apply(this, arguments); }
            },
            "getValueAsInt": {
              "value": function () { return this.get_value_as_int.apply(this, arguments); }
            },
            "getWrap": {
              "value": function () { return this.get_wrap.apply(this, arguments); }
            },
            "setAdjustment": {
              "value": function () { return this.set_adjustment.apply(this, arguments); }
            },
            "setDigits": {
              "value": function () { return this.set_digits.apply(this, arguments); }
            },
            "setIncrements": {
              "value": function () { return this.set_increments.apply(this, arguments); }
            },
            "setNumeric": {
              "value": function () { return this.set_numeric.apply(this, arguments); }
            },
            "setRange": {
              "value": function () { return this.set_range.apply(this, arguments); }
            },
            "setSnapToTicks": {
              "value": function () { return this.set_snap_to_ticks.apply(this, arguments); }
            },
            "setUpdatePolicy": {
              "value": function () { return this.set_update_policy.apply(this, arguments); }
            },
            "setValue": {
              "value": function () { return this.set_value.apply(this, arguments); }
            },
            "setWrap": {
              "value": function () { return this.set_wrap.apply(this, arguments); }
            },
            "climbRate": {
              "get": function () { return this.climb_rate; },
              "set": function (value) { this.climb_rate = value; }
            },
            "snapToTicks": {
              "get": function () { return this.snap_to_ticks; },
              "set": function (value) { this.snap_to_ticks = value; }
            },
            "updatePolicy": {
              "get": function () { return this.update_policy; },
              "set": function (value) { this.update_policy = value; }
            }
          },
          "static": {}
        },
        "SpinButtonAccessible": {
          "prototype": {},
          "static": {}
        },
        "Spinner": {
          "prototype": {},
          "static": {}
        },
        "SpinnerAccessible": {
          "prototype": {},
          "static": {}
        },
        "Stack": {
          "prototype": {
            "addNamed": {
              "value": function () { return this.add_named.apply(this, arguments); }
            },
            "addTitled": {
              "value": function () { return this.add_titled.apply(this, arguments); }
            },
            "getChildByName": {
              "value": function () { return this.get_child_by_name.apply(this, arguments); }
            },
            "getHhomogeneous": {
              "value": function () { return this.get_hhomogeneous.apply(this, arguments); }
            },
            "getHomogeneous": {
              "value": function () { return this.get_homogeneous.apply(this, arguments); }
            },
            "getInterpolateSize": {
              "value": function () { return this.get_interpolate_size.apply(this, arguments); }
            },
            "getTransitionDuration": {
              "value": function () { return this.get_transition_duration.apply(this, arguments); }
            },
            "getTransitionRunning": {
              "value": function () { return this.get_transition_running.apply(this, arguments); }
            },
            "getTransitionType": {
              "value": function () { return this.get_transition_type.apply(this, arguments); }
            },
            "getVhomogeneous": {
              "value": function () { return this.get_vhomogeneous.apply(this, arguments); }
            },
            "getVisibleChild": {
              "value": function () { return this.get_visible_child.apply(this, arguments); }
            },
            "getVisibleChildName": {
              "value": function () { return this.get_visible_child_name.apply(this, arguments); }
            },
            "setHhomogeneous": {
              "value": function () { return this.set_hhomogeneous.apply(this, arguments); }
            },
            "setHomogeneous": {
              "value": function () { return this.set_homogeneous.apply(this, arguments); }
            },
            "setInterpolateSize": {
              "value": function () { return this.set_interpolate_size.apply(this, arguments); }
            },
            "setTransitionDuration": {
              "value": function () { return this.set_transition_duration.apply(this, arguments); }
            },
            "setTransitionType": {
              "value": function () { return this.set_transition_type.apply(this, arguments); }
            },
            "setVhomogeneous": {
              "value": function () { return this.set_vhomogeneous.apply(this, arguments); }
            },
            "setVisibleChild": {
              "value": function () { return this.set_visible_child.apply(this, arguments); }
            },
            "setVisibleChildFull": {
              "value": function () { return this.set_visible_child_full.apply(this, arguments); }
            },
            "setVisibleChildName": {
              "value": function () { return this.set_visible_child_name.apply(this, arguments); }
            },
            "interpolateSize": {
              "get": function () { return this.interpolate_size; },
              "set": function (value) { this.interpolate_size = value; }
            },
            "transitionDuration": {
              "get": function () { return this.transition_duration; },
              "set": function (value) { this.transition_duration = value; }
            },
            "transitionRunning": {
              "get": function () { return this.transition_running; },
              "set": function (value) { this.transition_running = value; }
            },
            "transitionType": {
              "get": function () { return this.transition_type; },
              "set": function (value) { this.transition_type = value; }
            },
            "visibleChild": {
              "get": function () { return this.visible_child; },
              "set": function (value) { this.visible_child = value; }
            },
            "visibleChildName": {
              "get": function () { return this.visible_child_name; },
              "set": function (value) { this.visible_child_name = value; }
            }
          },
          "static": {}
        },
        "StackSidebar": {
          "prototype": {
            "getStack": {
              "value": function () { return this.get_stack.apply(this, arguments); }
            },
            "setStack": {
              "value": function () { return this.set_stack.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "StackSwitcher": {
          "prototype": {
            "getStack": {
              "value": function () { return this.get_stack.apply(this, arguments); }
            },
            "setStack": {
              "value": function () { return this.set_stack.apply(this, arguments); }
            },
            "iconSize": {
              "get": function () { return this.icon_size; },
              "set": function (value) { this.icon_size = value; }
            }
          },
          "static": {}
        },
        "StatusIcon": {
          "prototype": {
            "getGeometry": {
              "value": function () { return this.get_geometry.apply(this, arguments); }
            },
            "getGicon": {
              "value": function () { return this.get_gicon.apply(this, arguments); }
            },
            "getHasTooltip": {
              "value": function () { return this.get_has_tooltip.apply(this, arguments); }
            },
            "getIconName": {
              "value": function () { return this.get_icon_name.apply(this, arguments); }
            },
            "getPixbuf": {
              "value": function () { return this.get_pixbuf.apply(this, arguments); }
            },
            "getScreen": {
              "value": function () { return this.get_screen.apply(this, arguments); }
            },
            "getSize": {
              "value": function () { return this.get_size.apply(this, arguments); }
            },
            "getStock": {
              "value": function () { return this.get_stock.apply(this, arguments); }
            },
            "getStorageType": {
              "value": function () { return this.get_storage_type.apply(this, arguments); }
            },
            "getTitle": {
              "value": function () { return this.get_title.apply(this, arguments); }
            },
            "getTooltipMarkup": {
              "value": function () { return this.get_tooltip_markup.apply(this, arguments); }
            },
            "getTooltipText": {
              "value": function () { return this.get_tooltip_text.apply(this, arguments); }
            },
            "getVisible": {
              "value": function () { return this.get_visible.apply(this, arguments); }
            },
            "getX11WindowId": {
              "value": function () { return this.get_x11_window_id.apply(this, arguments); }
            },
            "isEmbedded": {
              "value": function () { return this.is_embedded.apply(this, arguments); }
            },
            "setFromFile": {
              "value": function () { return this.set_from_file.apply(this, arguments); }
            },
            "setFromGicon": {
              "value": function () { return this.set_from_gicon.apply(this, arguments); }
            },
            "setFromIconName": {
              "value": function () { return this.set_from_icon_name.apply(this, arguments); }
            },
            "setFromPixbuf": {
              "value": function () { return this.set_from_pixbuf.apply(this, arguments); }
            },
            "setFromStock": {
              "value": function () { return this.set_from_stock.apply(this, arguments); }
            },
            "setHasTooltip": {
              "value": function () { return this.set_has_tooltip.apply(this, arguments); }
            },
            "setName": {
              "value": function () { return this.set_name.apply(this, arguments); }
            },
            "setScreen": {
              "value": function () { return this.set_screen.apply(this, arguments); }
            },
            "setTitle": {
              "value": function () { return this.set_title.apply(this, arguments); }
            },
            "setTooltipMarkup": {
              "value": function () { return this.set_tooltip_markup.apply(this, arguments); }
            },
            "setTooltipText": {
              "value": function () { return this.set_tooltip_text.apply(this, arguments); }
            },
            "setVisible": {
              "value": function () { return this.set_visible.apply(this, arguments); }
            },
            "hasTooltip": {
              "get": function () { return this.has_tooltip; },
              "set": function (value) { this.has_tooltip = value; }
            },
            "iconName": {
              "get": function () { return this.icon_name; },
              "set": function (value) { this.icon_name = value; }
            },
            "storageType": {
              "get": function () { return this.storage_type; },
              "set": function (value) { this.storage_type = value; }
            },
            "tooltipMarkup": {
              "get": function () { return this.tooltip_markup; },
              "set": function (value) { this.tooltip_markup = value; }
            },
            "tooltipText": {
              "get": function () { return this.tooltip_text; },
              "set": function (value) { this.tooltip_text = value; }
            }
          },
          "static": {
            "positionMenu": {
              "value": function () { return this.position_menu.apply(this, arguments); }
            }
          }
        },
        "Statusbar": {
          "prototype": {
            "getContextId": {
              "value": function () { return this.get_context_id.apply(this, arguments); }
            },
            "getMessageArea": {
              "value": function () { return this.get_message_area.apply(this, arguments); }
            },
            "removeAll": {
              "value": function () { return this.remove_all.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "StatusbarAccessible": {
          "prototype": {},
          "static": {}
        },
        "Style": {
          "prototype": {
            "applyDefaultBackground": {
              "value": function () { return this.apply_default_background.apply(this, arguments); }
            },
            "getStyleProperty": {
              "value": function () { return this.get_style_property.apply(this, arguments); }
            },
            "getValist": {
              "value": function () { return this.get_valist.apply(this, arguments); }
            },
            "hasContext": {
              "value": function () { return this.has_context.apply(this, arguments); }
            },
            "lookupColor": {
              "value": function () { return this.lookup_color.apply(this, arguments); }
            },
            "lookupIconSet": {
              "value": function () { return this.lookup_icon_set.apply(this, arguments); }
            },
            "renderIcon": {
              "value": function () { return this.render_icon.apply(this, arguments); }
            },
            "setBackground": {
              "value": function () { return this.set_background.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "StyleContext": {
          "prototype": {
            "addClass": {
              "value": function () { return this.add_class.apply(this, arguments); }
            },
            "addProvider": {
              "value": function () { return this.add_provider.apply(this, arguments); }
            },
            "addRegion": {
              "value": function () { return this.add_region.apply(this, arguments); }
            },
            "cancelAnimations": {
              "value": function () { return this.cancel_animations.apply(this, arguments); }
            },
            "getBackgroundColor": {
              "value": function () { return this.get_background_color.apply(this, arguments); }
            },
            "getBorder": {
              "value": function () { return this.get_border.apply(this, arguments); }
            },
            "getBorderColor": {
              "value": function () { return this.get_border_color.apply(this, arguments); }
            },
            "getColor": {
              "value": function () { return this.get_color.apply(this, arguments); }
            },
            "getDirection": {
              "value": function () { return this.get_direction.apply(this, arguments); }
            },
            "getFont": {
              "value": function () { return this.get_font.apply(this, arguments); }
            },
            "getFrameClock": {
              "value": function () { return this.get_frame_clock.apply(this, arguments); }
            },
            "getJunctionSides": {
              "value": function () { return this.get_junction_sides.apply(this, arguments); }
            },
            "getMargin": {
              "value": function () { return this.get_margin.apply(this, arguments); }
            },
            "getPadding": {
              "value": function () { return this.get_padding.apply(this, arguments); }
            },
            "getParent": {
              "value": function () { return this.get_parent.apply(this, arguments); }
            },
            "getPath": {
              "value": function () { return this.get_path.apply(this, arguments); }
            },
            "getProperty": {
              "value": function () { return this.get_property.apply(this, arguments); }
            },
            "getScale": {
              "value": function () { return this.get_scale.apply(this, arguments); }
            },
            "getScreen": {
              "value": function () { return this.get_screen.apply(this, arguments); }
            },
            "getSection": {
              "value": function () { return this.get_section.apply(this, arguments); }
            },
            "getState": {
              "value": function () { return this.get_state.apply(this, arguments); }
            },
            "getStyle": {
              "value": function () { return this.get_style.apply(this, arguments); }
            },
            "getStyleProperty": {
              "value": function () { return this.get_style_property.apply(this, arguments); }
            },
            "getStyleValist": {
              "value": function () { return this.get_style_valist.apply(this, arguments); }
            },
            "getValist": {
              "value": function () { return this.get_valist.apply(this, arguments); }
            },
            "hasClass": {
              "value": function () { return this.has_class.apply(this, arguments); }
            },
            "hasRegion": {
              "value": function () { return this.has_region.apply(this, arguments); }
            },
            "listClasses": {
              "value": function () { return this.list_classes.apply(this, arguments); }
            },
            "listRegions": {
              "value": function () { return this.list_regions.apply(this, arguments); }
            },
            "lookupColor": {
              "value": function () { return this.lookup_color.apply(this, arguments); }
            },
            "lookupIconSet": {
              "value": function () { return this.lookup_icon_set.apply(this, arguments); }
            },
            "notifyStateChange": {
              "value": function () { return this.notify_state_change.apply(this, arguments); }
            },
            "popAnimatableRegion": {
              "value": function () { return this.pop_animatable_region.apply(this, arguments); }
            },
            "pushAnimatableRegion": {
              "value": function () { return this.push_animatable_region.apply(this, arguments); }
            },
            "removeClass": {
              "value": function () { return this.remove_class.apply(this, arguments); }
            },
            "removeProvider": {
              "value": function () { return this.remove_provider.apply(this, arguments); }
            },
            "removeRegion": {
              "value": function () { return this.remove_region.apply(this, arguments); }
            },
            "scrollAnimations": {
              "value": function () { return this.scroll_animations.apply(this, arguments); }
            },
            "setBackground": {
              "value": function () { return this.set_background.apply(this, arguments); }
            },
            "setDirection": {
              "value": function () { return this.set_direction.apply(this, arguments); }
            },
            "setFrameClock": {
              "value": function () { return this.set_frame_clock.apply(this, arguments); }
            },
            "setJunctionSides": {
              "value": function () { return this.set_junction_sides.apply(this, arguments); }
            },
            "setParent": {
              "value": function () { return this.set_parent.apply(this, arguments); }
            },
            "setPath": {
              "value": function () { return this.set_path.apply(this, arguments); }
            },
            "setScale": {
              "value": function () { return this.set_scale.apply(this, arguments); }
            },
            "setScreen": {
              "value": function () { return this.set_screen.apply(this, arguments); }
            },
            "setState": {
              "value": function () { return this.set_state.apply(this, arguments); }
            },
            "stateIsRunning": {
              "value": function () { return this.state_is_running.apply(this, arguments); }
            },
            "paintClock": {
              "get": function () { return this.paint_clock; },
              "set": function (value) { this.paint_clock = value; }
            }
          },
          "static": {
            "addProviderForScreen": {
              "value": function () { return this.add_provider_for_screen.apply(this, arguments); }
            },
            "removeProviderForScreen": {
              "value": function () { return this.remove_provider_for_screen.apply(this, arguments); }
            },
            "resetWidgets": {
              "value": function () { return this.reset_widgets.apply(this, arguments); }
            }
          }
        },
        "StyleProperties": {
          "prototype": {
            "getProperty": {
              "value": function () { return this.get_property.apply(this, arguments); }
            },
            "getValist": {
              "value": function () { return this.get_valist.apply(this, arguments); }
            },
            "lookupColor": {
              "value": function () { return this.lookup_color.apply(this, arguments); }
            },
            "mapColor": {
              "value": function () { return this.map_color.apply(this, arguments); }
            },
            "setProperty": {
              "value": function () { return this.set_property.apply(this, arguments); }
            },
            "setValist": {
              "value": function () { return this.set_valist.apply(this, arguments); }
            },
            "unsetProperty": {
              "value": function () { return this.unset_property.apply(this, arguments); }
            }
          },
          "static": {
            "lookupProperty": {
              "value": function () { return this.lookup_property.apply(this, arguments); }
            },
            "registerProperty": {
              "value": function () { return this.register_property.apply(this, arguments); }
            }
          }
        },
        "Switch": {
          "prototype": {
            "getActive": {
              "value": function () { return this.get_active.apply(this, arguments); }
            },
            "getState": {
              "value": function () { return this.get_state.apply(this, arguments); }
            },
            "setActive": {
              "value": function () { return this.set_active.apply(this, arguments); }
            },
            "setState": {
              "value": function () { return this.set_state.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "SwitchAccessible": {
          "prototype": {},
          "static": {}
        },
        "Table": {
          "prototype": {
            "attachDefaults": {
              "value": function () { return this.attach_defaults.apply(this, arguments); }
            },
            "getColSpacing": {
              "value": function () { return this.get_col_spacing.apply(this, arguments); }
            },
            "getDefaultColSpacing": {
              "value": function () { return this.get_default_col_spacing.apply(this, arguments); }
            },
            "getDefaultRowSpacing": {
              "value": function () { return this.get_default_row_spacing.apply(this, arguments); }
            },
            "getHomogeneous": {
              "value": function () { return this.get_homogeneous.apply(this, arguments); }
            },
            "getRowSpacing": {
              "value": function () { return this.get_row_spacing.apply(this, arguments); }
            },
            "getSize": {
              "value": function () { return this.get_size.apply(this, arguments); }
            },
            "setColSpacing": {
              "value": function () { return this.set_col_spacing.apply(this, arguments); }
            },
            "setColSpacings": {
              "value": function () { return this.set_col_spacings.apply(this, arguments); }
            },
            "setHomogeneous": {
              "value": function () { return this.set_homogeneous.apply(this, arguments); }
            },
            "setRowSpacing": {
              "value": function () { return this.set_row_spacing.apply(this, arguments); }
            },
            "setRowSpacings": {
              "value": function () { return this.set_row_spacings.apply(this, arguments); }
            },
            "columnSpacing": {
              "get": function () { return this.column_spacing; },
              "set": function (value) { this.column_spacing = value; }
            },
            "nColumns": {
              "get": function () { return this.n_columns; },
              "set": function (value) { this.n_columns = value; }
            },
            "nRows": {
              "get": function () { return this.n_rows; },
              "set": function (value) { this.n_rows = value; }
            },
            "rowSpacing": {
              "get": function () { return this.row_spacing; },
              "set": function (value) { this.row_spacing = value; }
            }
          },
          "static": {}
        },
        "TearoffMenuItem": {
          "prototype": {},
          "static": {}
        },
        "TextBuffer": {
          "prototype": {
            "addMark": {
              "value": function () { return this.add_mark.apply(this, arguments); }
            },
            "addSelectionClipboard": {
              "value": function () { return this.add_selection_clipboard.apply(this, arguments); }
            },
            "applyTag": {
              "value": function () { return this.apply_tag.apply(this, arguments); }
            },
            "applyTagByName": {
              "value": function () { return this.apply_tag_by_name.apply(this, arguments); }
            },
            "beginUserAction": {
              "value": function () { return this.begin_user_action.apply(this, arguments); }
            },
            "copyClipboard": {
              "value": function () { return this.copy_clipboard.apply(this, arguments); }
            },
            "createChildAnchor": {
              "value": function () { return this.create_child_anchor.apply(this, arguments); }
            },
            "createMark": {
              "value": function () { return this.create_mark.apply(this, arguments); }
            },
            "createTag": {
              "value": function () { return this.create_tag.apply(this, arguments); }
            },
            "cutClipboard": {
              "value": function () { return this.cut_clipboard.apply(this, arguments); }
            },
            "deleteInteractive": {
              "value": function () { return this.delete_interactive.apply(this, arguments); }
            },
            "deleteMark": {
              "value": function () { return this.delete_mark.apply(this, arguments); }
            },
            "deleteMarkByName": {
              "value": function () { return this.delete_mark_by_name.apply(this, arguments); }
            },
            "deleteSelection": {
              "value": function () { return this.delete_selection.apply(this, arguments); }
            },
            "deserializeGetCanCreateTags": {
              "value": function () { return this.deserialize_get_can_create_tags.apply(this, arguments); }
            },
            "deserializeSetCanCreateTags": {
              "value": function () { return this.deserialize_set_can_create_tags.apply(this, arguments); }
            },
            "endUserAction": {
              "value": function () { return this.end_user_action.apply(this, arguments); }
            },
            "getBounds": {
              "value": function () { return this.get_bounds.apply(this, arguments); }
            },
            "getCharCount": {
              "value": function () { return this.get_char_count.apply(this, arguments); }
            },
            "getCopyTargetList": {
              "value": function () { return this.get_copy_target_list.apply(this, arguments); }
            },
            "getDeserializeFormats": {
              "value": function () { return this.get_deserialize_formats.apply(this, arguments); }
            },
            "getEndIter": {
              "value": function () { return this.get_end_iter.apply(this, arguments); }
            },
            "getHasSelection": {
              "value": function () { return this.get_has_selection.apply(this, arguments); }
            },
            "getInsert": {
              "value": function () { return this.get_insert.apply(this, arguments); }
            },
            "getIterAtChildAnchor": {
              "value": function () { return this.get_iter_at_child_anchor.apply(this, arguments); }
            },
            "getIterAtLine": {
              "value": function () { return this.get_iter_at_line.apply(this, arguments); }
            },
            "getIterAtLineIndex": {
              "value": function () { return this.get_iter_at_line_index.apply(this, arguments); }
            },
            "getIterAtLineOffset": {
              "value": function () { return this.get_iter_at_line_offset.apply(this, arguments); }
            },
            "getIterAtMark": {
              "value": function () { return this.get_iter_at_mark.apply(this, arguments); }
            },
            "getIterAtOffset": {
              "value": function () { return this.get_iter_at_offset.apply(this, arguments); }
            },
            "getLineCount": {
              "value": function () { return this.get_line_count.apply(this, arguments); }
            },
            "getMark": {
              "value": function () { return this.get_mark.apply(this, arguments); }
            },
            "getModified": {
              "value": function () { return this.get_modified.apply(this, arguments); }
            },
            "getPasteTargetList": {
              "value": function () { return this.get_paste_target_list.apply(this, arguments); }
            },
            "getSelectionBound": {
              "value": function () { return this.get_selection_bound.apply(this, arguments); }
            },
            "getSelectionBounds": {
              "value": function () { return this.get_selection_bounds.apply(this, arguments); }
            },
            "getSerializeFormats": {
              "value": function () { return this.get_serialize_formats.apply(this, arguments); }
            },
            "getSlice": {
              "value": function () { return this.get_slice.apply(this, arguments); }
            },
            "getStartIter": {
              "value": function () { return this.get_start_iter.apply(this, arguments); }
            },
            "getTagTable": {
              "value": function () { return this.get_tag_table.apply(this, arguments); }
            },
            "getText": {
              "value": function () { return this.get_text.apply(this, arguments); }
            },
            "insertAtCursor": {
              "value": function () { return this.insert_at_cursor.apply(this, arguments); }
            },
            "insertChildAnchor": {
              "value": function () { return this.insert_child_anchor.apply(this, arguments); }
            },
            "insertInteractive": {
              "value": function () { return this.insert_interactive.apply(this, arguments); }
            },
            "insertInteractiveAtCursor": {
              "value": function () { return this.insert_interactive_at_cursor.apply(this, arguments); }
            },
            "insertMarkup": {
              "value": function () { return this.insert_markup.apply(this, arguments); }
            },
            "insertPixbuf": {
              "value": function () { return this.insert_pixbuf.apply(this, arguments); }
            },
            "insertRange": {
              "value": function () { return this.insert_range.apply(this, arguments); }
            },
            "insertRangeInteractive": {
              "value": function () { return this.insert_range_interactive.apply(this, arguments); }
            },
            "insertWithTags": {
              "value": function () { return this.insert_with_tags.apply(this, arguments); }
            },
            "insertWithTagsByName": {
              "value": function () { return this.insert_with_tags_by_name.apply(this, arguments); }
            },
            "moveMark": {
              "value": function () { return this.move_mark.apply(this, arguments); }
            },
            "moveMarkByName": {
              "value": function () { return this.move_mark_by_name.apply(this, arguments); }
            },
            "pasteClipboard": {
              "value": function () { return this.paste_clipboard.apply(this, arguments); }
            },
            "placeCursor": {
              "value": function () { return this.place_cursor.apply(this, arguments); }
            },
            "registerDeserializeFormat": {
              "value": function () { return this.register_deserialize_format.apply(this, arguments); }
            },
            "registerDeserializeTagset": {
              "value": function () { return this.register_deserialize_tagset.apply(this, arguments); }
            },
            "registerSerializeFormat": {
              "value": function () { return this.register_serialize_format.apply(this, arguments); }
            },
            "registerSerializeTagset": {
              "value": function () { return this.register_serialize_tagset.apply(this, arguments); }
            },
            "removeAllTags": {
              "value": function () { return this.remove_all_tags.apply(this, arguments); }
            },
            "removeSelectionClipboard": {
              "value": function () { return this.remove_selection_clipboard.apply(this, arguments); }
            },
            "removeTag": {
              "value": function () { return this.remove_tag.apply(this, arguments); }
            },
            "removeTagByName": {
              "value": function () { return this.remove_tag_by_name.apply(this, arguments); }
            },
            "selectRange": {
              "value": function () { return this.select_range.apply(this, arguments); }
            },
            "setModified": {
              "value": function () { return this.set_modified.apply(this, arguments); }
            },
            "setText": {
              "value": function () { return this.set_text.apply(this, arguments); }
            },
            "unregisterDeserializeFormat": {
              "value": function () { return this.unregister_deserialize_format.apply(this, arguments); }
            },
            "unregisterSerializeFormat": {
              "value": function () { return this.unregister_serialize_format.apply(this, arguments); }
            },
            "copyTargetList": {
              "get": function () { return this.copy_target_list; },
              "set": function (value) { this.copy_target_list = value; }
            },
            "cursorPosition": {
              "get": function () { return this.cursor_position; },
              "set": function (value) { this.cursor_position = value; }
            },
            "hasSelection": {
              "get": function () { return this.has_selection; },
              "set": function (value) { this.has_selection = value; }
            },
            "pasteTargetList": {
              "get": function () { return this.paste_target_list; },
              "set": function (value) { this.paste_target_list = value; }
            },
            "tagTable": {
              "get": function () { return this.tag_table; },
              "set": function (value) { this.tag_table = value; }
            }
          },
          "static": {}
        },
        "TextCellAccessible": {
          "prototype": {},
          "static": {}
        },
        "TextChildAnchor": {
          "prototype": {
            "getDeleted": {
              "value": function () { return this.get_deleted.apply(this, arguments); }
            },
            "getWidgets": {
              "value": function () { return this.get_widgets.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "TextMark": {
          "prototype": {
            "getBuffer": {
              "value": function () { return this.get_buffer.apply(this, arguments); }
            },
            "getDeleted": {
              "value": function () { return this.get_deleted.apply(this, arguments); }
            },
            "getLeftGravity": {
              "value": function () { return this.get_left_gravity.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getVisible": {
              "value": function () { return this.get_visible.apply(this, arguments); }
            },
            "setVisible": {
              "value": function () { return this.set_visible.apply(this, arguments); }
            },
            "leftGravity": {
              "get": function () { return this.left_gravity; },
              "set": function (value) { this.left_gravity = value; }
            }
          },
          "static": {}
        },
        "TextTag": {
          "prototype": {
            "getPriority": {
              "value": function () { return this.get_priority.apply(this, arguments); }
            },
            "setPriority": {
              "value": function () { return this.set_priority.apply(this, arguments); }
            },
            "accumulativeMargin": {
              "get": function () { return this.accumulative_margin; },
              "set": function (value) { this.accumulative_margin = value; }
            },
            "backgroundFullHeight": {
              "get": function () { return this.background_full_height; },
              "set": function (value) { this.background_full_height = value; }
            },
            "backgroundFullHeightSet": {
              "get": function () { return this.background_full_height_set; },
              "set": function (value) { this.background_full_height_set = value; }
            },
            "backgroundGdk": {
              "get": function () { return this.background_gdk; },
              "set": function (value) { this.background_gdk = value; }
            },
            "backgroundRgba": {
              "get": function () { return this.background_rgba; },
              "set": function (value) { this.background_rgba = value; }
            },
            "backgroundSet": {
              "get": function () { return this.background_set; },
              "set": function (value) { this.background_set = value; }
            },
            "editableSet": {
              "get": function () { return this.editable_set; },
              "set": function (value) { this.editable_set = value; }
            },
            "fallbackSet": {
              "get": function () { return this.fallback_set; },
              "set": function (value) { this.fallback_set = value; }
            },
            "familySet": {
              "get": function () { return this.family_set; },
              "set": function (value) { this.family_set = value; }
            },
            "fontDesc": {
              "get": function () { return this.font_desc; },
              "set": function (value) { this.font_desc = value; }
            },
            "fontFeatures": {
              "get": function () { return this.font_features; },
              "set": function (value) { this.font_features = value; }
            },
            "fontFeaturesSet": {
              "get": function () { return this.font_features_set; },
              "set": function (value) { this.font_features_set = value; }
            },
            "foregroundGdk": {
              "get": function () { return this.foreground_gdk; },
              "set": function (value) { this.foreground_gdk = value; }
            },
            "foregroundRgba": {
              "get": function () { return this.foreground_rgba; },
              "set": function (value) { this.foreground_rgba = value; }
            },
            "foregroundSet": {
              "get": function () { return this.foreground_set; },
              "set": function (value) { this.foreground_set = value; }
            },
            "indentSet": {
              "get": function () { return this.indent_set; },
              "set": function (value) { this.indent_set = value; }
            },
            "invisibleSet": {
              "get": function () { return this.invisible_set; },
              "set": function (value) { this.invisible_set = value; }
            },
            "justificationSet": {
              "get": function () { return this.justification_set; },
              "set": function (value) { this.justification_set = value; }
            },
            "languageSet": {
              "get": function () { return this.language_set; },
              "set": function (value) { this.language_set = value; }
            },
            "leftMargin": {
              "get": function () { return this.left_margin; },
              "set": function (value) { this.left_margin = value; }
            },
            "leftMarginSet": {
              "get": function () { return this.left_margin_set; },
              "set": function (value) { this.left_margin_set = value; }
            },
            "letterSpacing": {
              "get": function () { return this.letter_spacing; },
              "set": function (value) { this.letter_spacing = value; }
            },
            "letterSpacingSet": {
              "get": function () { return this.letter_spacing_set; },
              "set": function (value) { this.letter_spacing_set = value; }
            },
            "paragraphBackground": {
              "get": function () { return this.paragraph_background; },
              "set": function (value) { this.paragraph_background = value; }
            },
            "paragraphBackgroundGdk": {
              "get": function () { return this.paragraph_background_gdk; },
              "set": function (value) { this.paragraph_background_gdk = value; }
            },
            "paragraphBackgroundRgba": {
              "get": function () { return this.paragraph_background_rgba; },
              "set": function (value) { this.paragraph_background_rgba = value; }
            },
            "paragraphBackgroundSet": {
              "get": function () { return this.paragraph_background_set; },
              "set": function (value) { this.paragraph_background_set = value; }
            },
            "pixelsAboveLines": {
              "get": function () { return this.pixels_above_lines; },
              "set": function (value) { this.pixels_above_lines = value; }
            },
            "pixelsAboveLinesSet": {
              "get": function () { return this.pixels_above_lines_set; },
              "set": function (value) { this.pixels_above_lines_set = value; }
            },
            "pixelsBelowLines": {
              "get": function () { return this.pixels_below_lines; },
              "set": function (value) { this.pixels_below_lines = value; }
            },
            "pixelsBelowLinesSet": {
              "get": function () { return this.pixels_below_lines_set; },
              "set": function (value) { this.pixels_below_lines_set = value; }
            },
            "pixelsInsideWrap": {
              "get": function () { return this.pixels_inside_wrap; },
              "set": function (value) { this.pixels_inside_wrap = value; }
            },
            "pixelsInsideWrapSet": {
              "get": function () { return this.pixels_inside_wrap_set; },
              "set": function (value) { this.pixels_inside_wrap_set = value; }
            },
            "rightMargin": {
              "get": function () { return this.right_margin; },
              "set": function (value) { this.right_margin = value; }
            },
            "rightMarginSet": {
              "get": function () { return this.right_margin_set; },
              "set": function (value) { this.right_margin_set = value; }
            },
            "riseSet": {
              "get": function () { return this.rise_set; },
              "set": function (value) { this.rise_set = value; }
            },
            "scaleSet": {
              "get": function () { return this.scale_set; },
              "set": function (value) { this.scale_set = value; }
            },
            "sizePoints": {
              "get": function () { return this.size_points; },
              "set": function (value) { this.size_points = value; }
            },
            "sizeSet": {
              "get": function () { return this.size_set; },
              "set": function (value) { this.size_set = value; }
            },
            "stretchSet": {
              "get": function () { return this.stretch_set; },
              "set": function (value) { this.stretch_set = value; }
            },
            "strikethroughRgba": {
              "get": function () { return this.strikethrough_rgba; },
              "set": function (value) { this.strikethrough_rgba = value; }
            },
            "strikethroughRgbaSet": {
              "get": function () { return this.strikethrough_rgba_set; },
              "set": function (value) { this.strikethrough_rgba_set = value; }
            },
            "strikethroughSet": {
              "get": function () { return this.strikethrough_set; },
              "set": function (value) { this.strikethrough_set = value; }
            },
            "styleSet": {
              "get": function () { return this.style_set; },
              "set": function (value) { this.style_set = value; }
            },
            "tabsSet": {
              "get": function () { return this.tabs_set; },
              "set": function (value) { this.tabs_set = value; }
            },
            "underlineRgba": {
              "get": function () { return this.underline_rgba; },
              "set": function (value) { this.underline_rgba = value; }
            },
            "underlineRgbaSet": {
              "get": function () { return this.underline_rgba_set; },
              "set": function (value) { this.underline_rgba_set = value; }
            },
            "underlineSet": {
              "get": function () { return this.underline_set; },
              "set": function (value) { this.underline_set = value; }
            },
            "variantSet": {
              "get": function () { return this.variant_set; },
              "set": function (value) { this.variant_set = value; }
            },
            "weightSet": {
              "get": function () { return this.weight_set; },
              "set": function (value) { this.weight_set = value; }
            },
            "wrapMode": {
              "get": function () { return this.wrap_mode; },
              "set": function (value) { this.wrap_mode = value; }
            },
            "wrapModeSet": {
              "get": function () { return this.wrap_mode_set; },
              "set": function (value) { this.wrap_mode_set = value; }
            }
          },
          "static": {}
        },
        "TextTagTable": {
          "prototype": {
            "getSize": {
              "value": function () { return this.get_size.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "TextView": {
          "prototype": {
            "addChildAtAnchor": {
              "value": function () { return this.add_child_at_anchor.apply(this, arguments); }
            },
            "addChildInWindow": {
              "value": function () { return this.add_child_in_window.apply(this, arguments); }
            },
            "backwardDisplayLine": {
              "value": function () { return this.backward_display_line.apply(this, arguments); }
            },
            "backwardDisplayLineStart": {
              "value": function () { return this.backward_display_line_start.apply(this, arguments); }
            },
            "bufferToWindowCoords": {
              "value": function () { return this.buffer_to_window_coords.apply(this, arguments); }
            },
            "forwardDisplayLine": {
              "value": function () { return this.forward_display_line.apply(this, arguments); }
            },
            "forwardDisplayLineEnd": {
              "value": function () { return this.forward_display_line_end.apply(this, arguments); }
            },
            "getAcceptsTab": {
              "value": function () { return this.get_accepts_tab.apply(this, arguments); }
            },
            "getBorderWindowSize": {
              "value": function () { return this.get_border_window_size.apply(this, arguments); }
            },
            "getBottomMargin": {
              "value": function () { return this.get_bottom_margin.apply(this, arguments); }
            },
            "getBuffer": {
              "value": function () { return this.get_buffer.apply(this, arguments); }
            },
            "getCursorLocations": {
              "value": function () { return this.get_cursor_locations.apply(this, arguments); }
            },
            "getCursorVisible": {
              "value": function () { return this.get_cursor_visible.apply(this, arguments); }
            },
            "getDefaultAttributes": {
              "value": function () { return this.get_default_attributes.apply(this, arguments); }
            },
            "getEditable": {
              "value": function () { return this.get_editable.apply(this, arguments); }
            },
            "getHadjustment": {
              "value": function () { return this.get_hadjustment.apply(this, arguments); }
            },
            "getIndent": {
              "value": function () { return this.get_indent.apply(this, arguments); }
            },
            "getInputHints": {
              "value": function () { return this.get_input_hints.apply(this, arguments); }
            },
            "getInputPurpose": {
              "value": function () { return this.get_input_purpose.apply(this, arguments); }
            },
            "getIterAtLocation": {
              "value": function () { return this.get_iter_at_location.apply(this, arguments); }
            },
            "getIterAtPosition": {
              "value": function () { return this.get_iter_at_position.apply(this, arguments); }
            },
            "getIterLocation": {
              "value": function () { return this.get_iter_location.apply(this, arguments); }
            },
            "getJustification": {
              "value": function () { return this.get_justification.apply(this, arguments); }
            },
            "getLeftMargin": {
              "value": function () { return this.get_left_margin.apply(this, arguments); }
            },
            "getLineAtY": {
              "value": function () { return this.get_line_at_y.apply(this, arguments); }
            },
            "getLineYrange": {
              "value": function () { return this.get_line_yrange.apply(this, arguments); }
            },
            "getMonospace": {
              "value": function () { return this.get_monospace.apply(this, arguments); }
            },
            "getOverwrite": {
              "value": function () { return this.get_overwrite.apply(this, arguments); }
            },
            "getPixelsAboveLines": {
              "value": function () { return this.get_pixels_above_lines.apply(this, arguments); }
            },
            "getPixelsBelowLines": {
              "value": function () { return this.get_pixels_below_lines.apply(this, arguments); }
            },
            "getPixelsInsideWrap": {
              "value": function () { return this.get_pixels_inside_wrap.apply(this, arguments); }
            },
            "getRightMargin": {
              "value": function () { return this.get_right_margin.apply(this, arguments); }
            },
            "getTabs": {
              "value": function () { return this.get_tabs.apply(this, arguments); }
            },
            "getTopMargin": {
              "value": function () { return this.get_top_margin.apply(this, arguments); }
            },
            "getVadjustment": {
              "value": function () { return this.get_vadjustment.apply(this, arguments); }
            },
            "getVisibleRect": {
              "value": function () { return this.get_visible_rect.apply(this, arguments); }
            },
            "getWindow": {
              "value": function () { return this.get_window.apply(this, arguments); }
            },
            "getWindowType": {
              "value": function () { return this.get_window_type.apply(this, arguments); }
            },
            "getWrapMode": {
              "value": function () { return this.get_wrap_mode.apply(this, arguments); }
            },
            "imContextFilterKeypress": {
              "value": function () { return this.im_context_filter_keypress.apply(this, arguments); }
            },
            "moveChild": {
              "value": function () { return this.move_child.apply(this, arguments); }
            },
            "moveMarkOnscreen": {
              "value": function () { return this.move_mark_onscreen.apply(this, arguments); }
            },
            "moveVisually": {
              "value": function () { return this.move_visually.apply(this, arguments); }
            },
            "placeCursorOnscreen": {
              "value": function () { return this.place_cursor_onscreen.apply(this, arguments); }
            },
            "resetImContext": {
              "value": function () { return this.reset_im_context.apply(this, arguments); }
            },
            "scrollMarkOnscreen": {
              "value": function () { return this.scroll_mark_onscreen.apply(this, arguments); }
            },
            "scrollToIter": {
              "value": function () { return this.scroll_to_iter.apply(this, arguments); }
            },
            "scrollToMark": {
              "value": function () { return this.scroll_to_mark.apply(this, arguments); }
            },
            "setAcceptsTab": {
              "value": function () { return this.set_accepts_tab.apply(this, arguments); }
            },
            "setBorderWindowSize": {
              "value": function () { return this.set_border_window_size.apply(this, arguments); }
            },
            "setBottomMargin": {
              "value": function () { return this.set_bottom_margin.apply(this, arguments); }
            },
            "setBuffer": {
              "value": function () { return this.set_buffer.apply(this, arguments); }
            },
            "setCursorVisible": {
              "value": function () { return this.set_cursor_visible.apply(this, arguments); }
            },
            "setEditable": {
              "value": function () { return this.set_editable.apply(this, arguments); }
            },
            "setIndent": {
              "value": function () { return this.set_indent.apply(this, arguments); }
            },
            "setInputHints": {
              "value": function () { return this.set_input_hints.apply(this, arguments); }
            },
            "setInputPurpose": {
              "value": function () { return this.set_input_purpose.apply(this, arguments); }
            },
            "setJustification": {
              "value": function () { return this.set_justification.apply(this, arguments); }
            },
            "setLeftMargin": {
              "value": function () { return this.set_left_margin.apply(this, arguments); }
            },
            "setMonospace": {
              "value": function () { return this.set_monospace.apply(this, arguments); }
            },
            "setOverwrite": {
              "value": function () { return this.set_overwrite.apply(this, arguments); }
            },
            "setPixelsAboveLines": {
              "value": function () { return this.set_pixels_above_lines.apply(this, arguments); }
            },
            "setPixelsBelowLines": {
              "value": function () { return this.set_pixels_below_lines.apply(this, arguments); }
            },
            "setPixelsInsideWrap": {
              "value": function () { return this.set_pixels_inside_wrap.apply(this, arguments); }
            },
            "setRightMargin": {
              "value": function () { return this.set_right_margin.apply(this, arguments); }
            },
            "setTabs": {
              "value": function () { return this.set_tabs.apply(this, arguments); }
            },
            "setTopMargin": {
              "value": function () { return this.set_top_margin.apply(this, arguments); }
            },
            "setWrapMode": {
              "value": function () { return this.set_wrap_mode.apply(this, arguments); }
            },
            "startsDisplayLine": {
              "value": function () { return this.starts_display_line.apply(this, arguments); }
            },
            "windowToBufferCoords": {
              "value": function () { return this.window_to_buffer_coords.apply(this, arguments); }
            },
            "acceptsTab": {
              "get": function () { return this.accepts_tab; },
              "set": function (value) { this.accepts_tab = value; }
            },
            "bottomMargin": {
              "get": function () { return this.bottom_margin; },
              "set": function (value) { this.bottom_margin = value; }
            },
            "cursorVisible": {
              "get": function () { return this.cursor_visible; },
              "set": function (value) { this.cursor_visible = value; }
            },
            "imModule": {
              "get": function () { return this.im_module; },
              "set": function (value) { this.im_module = value; }
            },
            "inputHints": {
              "get": function () { return this.input_hints; },
              "set": function (value) { this.input_hints = value; }
            },
            "inputPurpose": {
              "get": function () { return this.input_purpose; },
              "set": function (value) { this.input_purpose = value; }
            },
            "leftMargin": {
              "get": function () { return this.left_margin; },
              "set": function (value) { this.left_margin = value; }
            },
            "pixelsAboveLines": {
              "get": function () { return this.pixels_above_lines; },
              "set": function (value) { this.pixels_above_lines = value; }
            },
            "pixelsBelowLines": {
              "get": function () { return this.pixels_below_lines; },
              "set": function (value) { this.pixels_below_lines = value; }
            },
            "pixelsInsideWrap": {
              "get": function () { return this.pixels_inside_wrap; },
              "set": function (value) { this.pixels_inside_wrap = value; }
            },
            "populateAll": {
              "get": function () { return this.populate_all; },
              "set": function (value) { this.populate_all = value; }
            },
            "rightMargin": {
              "get": function () { return this.right_margin; },
              "set": function (value) { this.right_margin = value; }
            },
            "topMargin": {
              "get": function () { return this.top_margin; },
              "set": function (value) { this.top_margin = value; }
            },
            "wrapMode": {
              "get": function () { return this.wrap_mode; },
              "set": function (value) { this.wrap_mode = value; }
            }
          },
          "static": {}
        },
        "TextViewAccessible": {
          "prototype": {},
          "static": {}
        },
        "ThemingEngine": {
          "prototype": {
            "getBackgroundColor": {
              "value": function () { return this.get_background_color.apply(this, arguments); }
            },
            "getBorder": {
              "value": function () { return this.get_border.apply(this, arguments); }
            },
            "getBorderColor": {
              "value": function () { return this.get_border_color.apply(this, arguments); }
            },
            "getColor": {
              "value": function () { return this.get_color.apply(this, arguments); }
            },
            "getDirection": {
              "value": function () { return this.get_direction.apply(this, arguments); }
            },
            "getFont": {
              "value": function () { return this.get_font.apply(this, arguments); }
            },
            "getJunctionSides": {
              "value": function () { return this.get_junction_sides.apply(this, arguments); }
            },
            "getMargin": {
              "value": function () { return this.get_margin.apply(this, arguments); }
            },
            "getPadding": {
              "value": function () { return this.get_padding.apply(this, arguments); }
            },
            "getPath": {
              "value": function () { return this.get_path.apply(this, arguments); }
            },
            "getProperty": {
              "value": function () { return this.get_property.apply(this, arguments); }
            },
            "getScreen": {
              "value": function () { return this.get_screen.apply(this, arguments); }
            },
            "getState": {
              "value": function () { return this.get_state.apply(this, arguments); }
            },
            "getStyle": {
              "value": function () { return this.get_style.apply(this, arguments); }
            },
            "getStyleProperty": {
              "value": function () { return this.get_style_property.apply(this, arguments); }
            },
            "getStyleValist": {
              "value": function () { return this.get_style_valist.apply(this, arguments); }
            },
            "getValist": {
              "value": function () { return this.get_valist.apply(this, arguments); }
            },
            "hasClass": {
              "value": function () { return this.has_class.apply(this, arguments); }
            },
            "hasRegion": {
              "value": function () { return this.has_region.apply(this, arguments); }
            },
            "lookupColor": {
              "value": function () { return this.lookup_color.apply(this, arguments); }
            },
            "stateIsRunning": {
              "value": function () { return this.state_is_running.apply(this, arguments); }
            }
          },
          "static": {
            "registerProperty": {
              "value": function () { return this.register_property.apply(this, arguments); }
            }
          }
        },
        "ToggleAction": {
          "prototype": {
            "getActive": {
              "value": function () { return this.get_active.apply(this, arguments); }
            },
            "getDrawAsRadio": {
              "value": function () { return this.get_draw_as_radio.apply(this, arguments); }
            },
            "setActive": {
              "value": function () { return this.set_active.apply(this, arguments); }
            },
            "setDrawAsRadio": {
              "value": function () { return this.set_draw_as_radio.apply(this, arguments); }
            },
            "drawAsRadio": {
              "get": function () { return this.draw_as_radio; },
              "set": function (value) { this.draw_as_radio = value; }
            }
          },
          "static": {}
        },
        "ToggleButton": {
          "prototype": {
            "getActive": {
              "value": function () { return this.get_active.apply(this, arguments); }
            },
            "getInconsistent": {
              "value": function () { return this.get_inconsistent.apply(this, arguments); }
            },
            "getMode": {
              "value": function () { return this.get_mode.apply(this, arguments); }
            },
            "setActive": {
              "value": function () { return this.set_active.apply(this, arguments); }
            },
            "setInconsistent": {
              "value": function () { return this.set_inconsistent.apply(this, arguments); }
            },
            "setMode": {
              "value": function () { return this.set_mode.apply(this, arguments); }
            },
            "drawIndicator": {
              "get": function () { return this.draw_indicator; },
              "set": function (value) { this.draw_indicator = value; }
            }
          },
          "static": {}
        },
        "ToggleButtonAccessible": {
          "prototype": {},
          "static": {}
        },
        "ToggleToolButton": {
          "prototype": {
            "getActive": {
              "value": function () { return this.get_active.apply(this, arguments); }
            },
            "setActive": {
              "value": function () { return this.set_active.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "ToolButton": {
          "prototype": {
            "getIconName": {
              "value": function () { return this.get_icon_name.apply(this, arguments); }
            },
            "getIconWidget": {
              "value": function () { return this.get_icon_widget.apply(this, arguments); }
            },
            "getLabel": {
              "value": function () { return this.get_label.apply(this, arguments); }
            },
            "getLabelWidget": {
              "value": function () { return this.get_label_widget.apply(this, arguments); }
            },
            "getStockId": {
              "value": function () { return this.get_stock_id.apply(this, arguments); }
            },
            "getUseUnderline": {
              "value": function () { return this.get_use_underline.apply(this, arguments); }
            },
            "setIconName": {
              "value": function () { return this.set_icon_name.apply(this, arguments); }
            },
            "setIconWidget": {
              "value": function () { return this.set_icon_widget.apply(this, arguments); }
            },
            "setLabel": {
              "value": function () { return this.set_label.apply(this, arguments); }
            },
            "setLabelWidget": {
              "value": function () { return this.set_label_widget.apply(this, arguments); }
            },
            "setStockId": {
              "value": function () { return this.set_stock_id.apply(this, arguments); }
            },
            "setUseUnderline": {
              "value": function () { return this.set_use_underline.apply(this, arguments); }
            },
            "iconName": {
              "get": function () { return this.icon_name; },
              "set": function (value) { this.icon_name = value; }
            },
            "iconWidget": {
              "get": function () { return this.icon_widget; },
              "set": function (value) { this.icon_widget = value; }
            },
            "labelWidget": {
              "get": function () { return this.label_widget; },
              "set": function (value) { this.label_widget = value; }
            },
            "stockId": {
              "get": function () { return this.stock_id; },
              "set": function (value) { this.stock_id = value; }
            },
            "useUnderline": {
              "get": function () { return this.use_underline; },
              "set": function (value) { this.use_underline = value; }
            }
          },
          "static": {}
        },
        "ToolItem": {
          "prototype": {
            "getEllipsizeMode": {
              "value": function () { return this.get_ellipsize_mode.apply(this, arguments); }
            },
            "getExpand": {
              "value": function () { return this.get_expand.apply(this, arguments); }
            },
            "getHomogeneous": {
              "value": function () { return this.get_homogeneous.apply(this, arguments); }
            },
            "getIconSize": {
              "value": function () { return this.get_icon_size.apply(this, arguments); }
            },
            "getIsImportant": {
              "value": function () { return this.get_is_important.apply(this, arguments); }
            },
            "getOrientation": {
              "value": function () { return this.get_orientation.apply(this, arguments); }
            },
            "getProxyMenuItem": {
              "value": function () { return this.get_proxy_menu_item.apply(this, arguments); }
            },
            "getReliefStyle": {
              "value": function () { return this.get_relief_style.apply(this, arguments); }
            },
            "getTextAlignment": {
              "value": function () { return this.get_text_alignment.apply(this, arguments); }
            },
            "getTextOrientation": {
              "value": function () { return this.get_text_orientation.apply(this, arguments); }
            },
            "getTextSizeGroup": {
              "value": function () { return this.get_text_size_group.apply(this, arguments); }
            },
            "getToolbarStyle": {
              "value": function () { return this.get_toolbar_style.apply(this, arguments); }
            },
            "getUseDragWindow": {
              "value": function () { return this.get_use_drag_window.apply(this, arguments); }
            },
            "getVisibleHorizontal": {
              "value": function () { return this.get_visible_horizontal.apply(this, arguments); }
            },
            "getVisibleVertical": {
              "value": function () { return this.get_visible_vertical.apply(this, arguments); }
            },
            "rebuildMenu": {
              "value": function () { return this.rebuild_menu.apply(this, arguments); }
            },
            "retrieveProxyMenuItem": {
              "value": function () { return this.retrieve_proxy_menu_item.apply(this, arguments); }
            },
            "setExpand": {
              "value": function () { return this.set_expand.apply(this, arguments); }
            },
            "setHomogeneous": {
              "value": function () { return this.set_homogeneous.apply(this, arguments); }
            },
            "setIsImportant": {
              "value": function () { return this.set_is_important.apply(this, arguments); }
            },
            "setProxyMenuItem": {
              "value": function () { return this.set_proxy_menu_item.apply(this, arguments); }
            },
            "setTooltipMarkup": {
              "value": function () { return this.set_tooltip_markup.apply(this, arguments); }
            },
            "setTooltipText": {
              "value": function () { return this.set_tooltip_text.apply(this, arguments); }
            },
            "setUseDragWindow": {
              "value": function () { return this.set_use_drag_window.apply(this, arguments); }
            },
            "setVisibleHorizontal": {
              "value": function () { return this.set_visible_horizontal.apply(this, arguments); }
            },
            "setVisibleVertical": {
              "value": function () { return this.set_visible_vertical.apply(this, arguments); }
            },
            "toolbarReconfigured": {
              "value": function () { return this.toolbar_reconfigured.apply(this, arguments); }
            },
            "isImportant": {
              "get": function () { return this.is_important; },
              "set": function (value) { this.is_important = value; }
            },
            "visibleHorizontal": {
              "get": function () { return this.visible_horizontal; },
              "set": function (value) { this.visible_horizontal = value; }
            },
            "visibleVertical": {
              "get": function () { return this.visible_vertical; },
              "set": function (value) { this.visible_vertical = value; }
            }
          },
          "static": {}
        },
        "ToolItemGroup": {
          "prototype": {
            "getCollapsed": {
              "value": function () { return this.get_collapsed.apply(this, arguments); }
            },
            "getDropItem": {
              "value": function () { return this.get_drop_item.apply(this, arguments); }
            },
            "getEllipsize": {
              "value": function () { return this.get_ellipsize.apply(this, arguments); }
            },
            "getHeaderRelief": {
              "value": function () { return this.get_header_relief.apply(this, arguments); }
            },
            "getItemPosition": {
              "value": function () { return this.get_item_position.apply(this, arguments); }
            },
            "getLabel": {
              "value": function () { return this.get_label.apply(this, arguments); }
            },
            "getLabelWidget": {
              "value": function () { return this.get_label_widget.apply(this, arguments); }
            },
            "getNItems": {
              "value": function () { return this.get_n_items.apply(this, arguments); }
            },
            "getNthItem": {
              "value": function () { return this.get_nth_item.apply(this, arguments); }
            },
            "setCollapsed": {
              "value": function () { return this.set_collapsed.apply(this, arguments); }
            },
            "setEllipsize": {
              "value": function () { return this.set_ellipsize.apply(this, arguments); }
            },
            "setHeaderRelief": {
              "value": function () { return this.set_header_relief.apply(this, arguments); }
            },
            "setItemPosition": {
              "value": function () { return this.set_item_position.apply(this, arguments); }
            },
            "setLabel": {
              "value": function () { return this.set_label.apply(this, arguments); }
            },
            "setLabelWidget": {
              "value": function () { return this.set_label_widget.apply(this, arguments); }
            },
            "headerRelief": {
              "get": function () { return this.header_relief; },
              "set": function (value) { this.header_relief = value; }
            },
            "labelWidget": {
              "get": function () { return this.label_widget; },
              "set": function (value) { this.label_widget = value; }
            }
          },
          "static": {}
        },
        "ToolPalette": {
          "prototype": {
            "addDragDest": {
              "value": function () { return this.add_drag_dest.apply(this, arguments); }
            },
            "getDragItem": {
              "value": function () { return this.get_drag_item.apply(this, arguments); }
            },
            "getDropGroup": {
              "value": function () { return this.get_drop_group.apply(this, arguments); }
            },
            "getDropItem": {
              "value": function () { return this.get_drop_item.apply(this, arguments); }
            },
            "getExclusive": {
              "value": function () { return this.get_exclusive.apply(this, arguments); }
            },
            "getExpand": {
              "value": function () { return this.get_expand.apply(this, arguments); }
            },
            "getGroupPosition": {
              "value": function () { return this.get_group_position.apply(this, arguments); }
            },
            "getHadjustment": {
              "value": function () { return this.get_hadjustment.apply(this, arguments); }
            },
            "getIconSize": {
              "value": function () { return this.get_icon_size.apply(this, arguments); }
            },
            "getStyle": {
              "value": function () { return this.get_style.apply(this, arguments); }
            },
            "getVadjustment": {
              "value": function () { return this.get_vadjustment.apply(this, arguments); }
            },
            "setDragSource": {
              "value": function () { return this.set_drag_source.apply(this, arguments); }
            },
            "setExclusive": {
              "value": function () { return this.set_exclusive.apply(this, arguments); }
            },
            "setExpand": {
              "value": function () { return this.set_expand.apply(this, arguments); }
            },
            "setGroupPosition": {
              "value": function () { return this.set_group_position.apply(this, arguments); }
            },
            "setIconSize": {
              "value": function () { return this.set_icon_size.apply(this, arguments); }
            },
            "setStyle": {
              "value": function () { return this.set_style.apply(this, arguments); }
            },
            "unsetIconSize": {
              "value": function () { return this.unset_icon_size.apply(this, arguments); }
            },
            "unsetStyle": {
              "value": function () { return this.unset_style.apply(this, arguments); }
            },
            "iconSize": {
              "get": function () { return this.icon_size; },
              "set": function (value) { this.icon_size = value; }
            },
            "iconSizeSet": {
              "get": function () { return this.icon_size_set; },
              "set": function (value) { this.icon_size_set = value; }
            },
            "toolbarStyle": {
              "get": function () { return this.toolbar_style; },
              "set": function (value) { this.toolbar_style = value; }
            }
          },
          "static": {
            "getDragTargetGroup": {
              "value": function () { return this.get_drag_target_group.apply(this, arguments); }
            },
            "getDragTargetItem": {
              "value": function () { return this.get_drag_target_item.apply(this, arguments); }
            }
          }
        },
        "Toolbar": {
          "prototype": {
            "getDropIndex": {
              "value": function () { return this.get_drop_index.apply(this, arguments); }
            },
            "getIconSize": {
              "value": function () { return this.get_icon_size.apply(this, arguments); }
            },
            "getItemIndex": {
              "value": function () { return this.get_item_index.apply(this, arguments); }
            },
            "getNItems": {
              "value": function () { return this.get_n_items.apply(this, arguments); }
            },
            "getNthItem": {
              "value": function () { return this.get_nth_item.apply(this, arguments); }
            },
            "getReliefStyle": {
              "value": function () { return this.get_relief_style.apply(this, arguments); }
            },
            "getShowArrow": {
              "value": function () { return this.get_show_arrow.apply(this, arguments); }
            },
            "getStyle": {
              "value": function () { return this.get_style.apply(this, arguments); }
            },
            "setDropHighlightItem": {
              "value": function () { return this.set_drop_highlight_item.apply(this, arguments); }
            },
            "setIconSize": {
              "value": function () { return this.set_icon_size.apply(this, arguments); }
            },
            "setShowArrow": {
              "value": function () { return this.set_show_arrow.apply(this, arguments); }
            },
            "setStyle": {
              "value": function () { return this.set_style.apply(this, arguments); }
            },
            "unsetIconSize": {
              "value": function () { return this.unset_icon_size.apply(this, arguments); }
            },
            "unsetStyle": {
              "value": function () { return this.unset_style.apply(this, arguments); }
            },
            "iconSize": {
              "get": function () { return this.icon_size; },
              "set": function (value) { this.icon_size = value; }
            },
            "iconSizeSet": {
              "get": function () { return this.icon_size_set; },
              "set": function (value) { this.icon_size_set = value; }
            },
            "showArrow": {
              "get": function () { return this.show_arrow; },
              "set": function (value) { this.show_arrow = value; }
            },
            "toolbarStyle": {
              "get": function () { return this.toolbar_style; },
              "set": function (value) { this.toolbar_style = value; }
            }
          },
          "static": {}
        },
        "Tooltip": {
          "prototype": {
            "setCustom": {
              "value": function () { return this.set_custom.apply(this, arguments); }
            },
            "setIcon": {
              "value": function () { return this.set_icon.apply(this, arguments); }
            },
            "setIconFromGicon": {
              "value": function () { return this.set_icon_from_gicon.apply(this, arguments); }
            },
            "setIconFromIconName": {
              "value": function () { return this.set_icon_from_icon_name.apply(this, arguments); }
            },
            "setIconFromStock": {
              "value": function () { return this.set_icon_from_stock.apply(this, arguments); }
            },
            "setMarkup": {
              "value": function () { return this.set_markup.apply(this, arguments); }
            },
            "setText": {
              "value": function () { return this.set_text.apply(this, arguments); }
            },
            "setTipArea": {
              "value": function () { return this.set_tip_area.apply(this, arguments); }
            }
          },
          "static": {
            "triggerTooltipQuery": {
              "value": function () { return this.trigger_tooltip_query.apply(this, arguments); }
            }
          }
        },
        "ToplevelAccessible": {
          "prototype": {
            "getChildren": {
              "value": function () { return this.get_children.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "TreeModelFilter": {
          "prototype": {
            "clearCache": {
              "value": function () { return this.clear_cache.apply(this, arguments); }
            },
            "convertChildIterToIter": {
              "value": function () { return this.convert_child_iter_to_iter.apply(this, arguments); }
            },
            "convertChildPathToPath": {
              "value": function () { return this.convert_child_path_to_path.apply(this, arguments); }
            },
            "convertIterToChildIter": {
              "value": function () { return this.convert_iter_to_child_iter.apply(this, arguments); }
            },
            "convertPathToChildPath": {
              "value": function () { return this.convert_path_to_child_path.apply(this, arguments); }
            },
            "getModel": {
              "value": function () { return this.get_model.apply(this, arguments); }
            },
            "setModifyFunc": {
              "value": function () { return this.set_modify_func.apply(this, arguments); }
            },
            "setVisibleColumn": {
              "value": function () { return this.set_visible_column.apply(this, arguments); }
            },
            "setVisibleFunc": {
              "value": function () { return this.set_visible_func.apply(this, arguments); }
            },
            "childModel": {
              "get": function () { return this.child_model; },
              "set": function (value) { this.child_model = value; }
            },
            "virtualRoot": {
              "get": function () { return this.virtual_root; },
              "set": function (value) { this.virtual_root = value; }
            }
          },
          "static": {}
        },
        "TreeModelSort": {
          "prototype": {
            "clearCache": {
              "value": function () { return this.clear_cache.apply(this, arguments); }
            },
            "convertChildIterToIter": {
              "value": function () { return this.convert_child_iter_to_iter.apply(this, arguments); }
            },
            "convertChildPathToPath": {
              "value": function () { return this.convert_child_path_to_path.apply(this, arguments); }
            },
            "convertIterToChildIter": {
              "value": function () { return this.convert_iter_to_child_iter.apply(this, arguments); }
            },
            "convertPathToChildPath": {
              "value": function () { return this.convert_path_to_child_path.apply(this, arguments); }
            },
            "getModel": {
              "value": function () { return this.get_model.apply(this, arguments); }
            },
            "iterIsValid": {
              "value": function () { return this.iter_is_valid.apply(this, arguments); }
            },
            "resetDefaultSortFunc": {
              "value": function () { return this.reset_default_sort_func.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "TreeSelection": {
          "prototype": {
            "countSelectedRows": {
              "value": function () { return this.count_selected_rows.apply(this, arguments); }
            },
            "getMode": {
              "value": function () { return this.get_mode.apply(this, arguments); }
            },
            "getSelectFunction": {
              "value": function () { return this.get_select_function.apply(this, arguments); }
            },
            "getSelected": {
              "value": function () { return this.get_selected.apply(this, arguments); }
            },
            "getSelectedRows": {
              "value": function () { return this.get_selected_rows.apply(this, arguments); }
            },
            "getTreeView": {
              "value": function () { return this.get_tree_view.apply(this, arguments); }
            },
            "getUserData": {
              "value": function () { return this.get_user_data.apply(this, arguments); }
            },
            "iterIsSelected": {
              "value": function () { return this.iter_is_selected.apply(this, arguments); }
            },
            "pathIsSelected": {
              "value": function () { return this.path_is_selected.apply(this, arguments); }
            },
            "selectAll": {
              "value": function () { return this.select_all.apply(this, arguments); }
            },
            "selectIter": {
              "value": function () { return this.select_iter.apply(this, arguments); }
            },
            "selectPath": {
              "value": function () { return this.select_path.apply(this, arguments); }
            },
            "selectRange": {
              "value": function () { return this.select_range.apply(this, arguments); }
            },
            "selectedForeach": {
              "value": function () { return this.selected_foreach.apply(this, arguments); }
            },
            "setMode": {
              "value": function () { return this.set_mode.apply(this, arguments); }
            },
            "setSelectFunction": {
              "value": function () { return this.set_select_function.apply(this, arguments); }
            },
            "unselectAll": {
              "value": function () { return this.unselect_all.apply(this, arguments); }
            },
            "unselectIter": {
              "value": function () { return this.unselect_iter.apply(this, arguments); }
            },
            "unselectPath": {
              "value": function () { return this.unselect_path.apply(this, arguments); }
            },
            "unselectRange": {
              "value": function () { return this.unselect_range.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "TreeStore": {
          "prototype": {
            "insertAfter": {
              "value": function () { return this.insert_after.apply(this, arguments); }
            },
            "insertBefore": {
              "value": function () { return this.insert_before.apply(this, arguments); }
            },
            "insertWithValues": {
              "value": function () { return this.insert_with_values.apply(this, arguments); }
            },
            "insertWithValuesv": {
              "value": function () { return this.insert_with_valuesv.apply(this, arguments); }
            },
            "isAncestor": {
              "value": function () { return this.is_ancestor.apply(this, arguments); }
            },
            "iterDepth": {
              "value": function () { return this.iter_depth.apply(this, arguments); }
            },
            "iterIsValid": {
              "value": function () { return this.iter_is_valid.apply(this, arguments); }
            },
            "moveAfter": {
              "value": function () { return this.move_after.apply(this, arguments); }
            },
            "moveBefore": {
              "value": function () { return this.move_before.apply(this, arguments); }
            },
            "setColumnTypes": {
              "value": function () { return this.set_column_types.apply(this, arguments); }
            },
            "setValist": {
              "value": function () { return this.set_valist.apply(this, arguments); }
            },
            "setValue": {
              "value": function () { return this.set_value.apply(this, arguments); }
            },
            "setValuesv": {
              "value": function () { return this.set_valuesv.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "TreeView": {
          "prototype": {
            "appendColumn": {
              "value": function () { return this.append_column.apply(this, arguments); }
            },
            "collapseAll": {
              "value": function () { return this.collapse_all.apply(this, arguments); }
            },
            "collapseRow": {
              "value": function () { return this.collapse_row.apply(this, arguments); }
            },
            "columnsAutosize": {
              "value": function () { return this.columns_autosize.apply(this, arguments); }
            },
            "convertBinWindowToTreeCoords": {
              "value": function () { return this.convert_bin_window_to_tree_coords.apply(this, arguments); }
            },
            "convertBinWindowToWidgetCoords": {
              "value": function () { return this.convert_bin_window_to_widget_coords.apply(this, arguments); }
            },
            "convertTreeToBinWindowCoords": {
              "value": function () { return this.convert_tree_to_bin_window_coords.apply(this, arguments); }
            },
            "convertTreeToWidgetCoords": {
              "value": function () { return this.convert_tree_to_widget_coords.apply(this, arguments); }
            },
            "convertWidgetToBinWindowCoords": {
              "value": function () { return this.convert_widget_to_bin_window_coords.apply(this, arguments); }
            },
            "convertWidgetToTreeCoords": {
              "value": function () { return this.convert_widget_to_tree_coords.apply(this, arguments); }
            },
            "createRowDragIcon": {
              "value": function () { return this.create_row_drag_icon.apply(this, arguments); }
            },
            "enableModelDragDest": {
              "value": function () { return this.enable_model_drag_dest.apply(this, arguments); }
            },
            "enableModelDragSource": {
              "value": function () { return this.enable_model_drag_source.apply(this, arguments); }
            },
            "expandAll": {
              "value": function () { return this.expand_all.apply(this, arguments); }
            },
            "expandRow": {
              "value": function () { return this.expand_row.apply(this, arguments); }
            },
            "expandToPath": {
              "value": function () { return this.expand_to_path.apply(this, arguments); }
            },
            "getActivateOnSingleClick": {
              "value": function () { return this.get_activate_on_single_click.apply(this, arguments); }
            },
            "getBackgroundArea": {
              "value": function () { return this.get_background_area.apply(this, arguments); }
            },
            "getBinWindow": {
              "value": function () { return this.get_bin_window.apply(this, arguments); }
            },
            "getCellArea": {
              "value": function () { return this.get_cell_area.apply(this, arguments); }
            },
            "getColumn": {
              "value": function () { return this.get_column.apply(this, arguments); }
            },
            "getColumns": {
              "value": function () { return this.get_columns.apply(this, arguments); }
            },
            "getCursor": {
              "value": function () { return this.get_cursor.apply(this, arguments); }
            },
            "getDestRowAtPos": {
              "value": function () { return this.get_dest_row_at_pos.apply(this, arguments); }
            },
            "getDragDestRow": {
              "value": function () { return this.get_drag_dest_row.apply(this, arguments); }
            },
            "getEnableSearch": {
              "value": function () { return this.get_enable_search.apply(this, arguments); }
            },
            "getEnableTreeLines": {
              "value": function () { return this.get_enable_tree_lines.apply(this, arguments); }
            },
            "getExpanderColumn": {
              "value": function () { return this.get_expander_column.apply(this, arguments); }
            },
            "getFixedHeightMode": {
              "value": function () { return this.get_fixed_height_mode.apply(this, arguments); }
            },
            "getGridLines": {
              "value": function () { return this.get_grid_lines.apply(this, arguments); }
            },
            "getHadjustment": {
              "value": function () { return this.get_hadjustment.apply(this, arguments); }
            },
            "getHeadersClickable": {
              "value": function () { return this.get_headers_clickable.apply(this, arguments); }
            },
            "getHeadersVisible": {
              "value": function () { return this.get_headers_visible.apply(this, arguments); }
            },
            "getHoverExpand": {
              "value": function () { return this.get_hover_expand.apply(this, arguments); }
            },
            "getHoverSelection": {
              "value": function () { return this.get_hover_selection.apply(this, arguments); }
            },
            "getLevelIndentation": {
              "value": function () { return this.get_level_indentation.apply(this, arguments); }
            },
            "getModel": {
              "value": function () { return this.get_model.apply(this, arguments); }
            },
            "getNColumns": {
              "value": function () { return this.get_n_columns.apply(this, arguments); }
            },
            "getPathAtPos": {
              "value": function () { return this.get_path_at_pos.apply(this, arguments); }
            },
            "getReorderable": {
              "value": function () { return this.get_reorderable.apply(this, arguments); }
            },
            "getRowSeparatorFunc": {
              "value": function () { return this.get_row_separator_func.apply(this, arguments); }
            },
            "getRubberBanding": {
              "value": function () { return this.get_rubber_banding.apply(this, arguments); }
            },
            "getRulesHint": {
              "value": function () { return this.get_rules_hint.apply(this, arguments); }
            },
            "getSearchColumn": {
              "value": function () { return this.get_search_column.apply(this, arguments); }
            },
            "getSearchEntry": {
              "value": function () { return this.get_search_entry.apply(this, arguments); }
            },
            "getSearchEqualFunc": {
              "value": function () { return this.get_search_equal_func.apply(this, arguments); }
            },
            "getSearchPositionFunc": {
              "value": function () { return this.get_search_position_func.apply(this, arguments); }
            },
            "getSelection": {
              "value": function () { return this.get_selection.apply(this, arguments); }
            },
            "getShowExpanders": {
              "value": function () { return this.get_show_expanders.apply(this, arguments); }
            },
            "getTooltipColumn": {
              "value": function () { return this.get_tooltip_column.apply(this, arguments); }
            },
            "getTooltipContext": {
              "value": function () { return this.get_tooltip_context.apply(this, arguments); }
            },
            "getVadjustment": {
              "value": function () { return this.get_vadjustment.apply(this, arguments); }
            },
            "getVisibleRange": {
              "value": function () { return this.get_visible_range.apply(this, arguments); }
            },
            "getVisibleRect": {
              "value": function () { return this.get_visible_rect.apply(this, arguments); }
            },
            "insertColumn": {
              "value": function () { return this.insert_column.apply(this, arguments); }
            },
            "insertColumnWithAttributes": {
              "value": function () { return this.insert_column_with_attributes.apply(this, arguments); }
            },
            "insertColumnWithDataFunc": {
              "value": function () { return this.insert_column_with_data_func.apply(this, arguments); }
            },
            "isBlankAtPos": {
              "value": function () { return this.is_blank_at_pos.apply(this, arguments); }
            },
            "isRubberBandingActive": {
              "value": function () { return this.is_rubber_banding_active.apply(this, arguments); }
            },
            "mapExpandedRows": {
              "value": function () { return this.map_expanded_rows.apply(this, arguments); }
            },
            "moveColumnAfter": {
              "value": function () { return this.move_column_after.apply(this, arguments); }
            },
            "removeColumn": {
              "value": function () { return this.remove_column.apply(this, arguments); }
            },
            "rowActivated": {
              "value": function () { return this.row_activated.apply(this, arguments); }
            },
            "rowExpanded": {
              "value": function () { return this.row_expanded.apply(this, arguments); }
            },
            "scrollToCell": {
              "value": function () { return this.scroll_to_cell.apply(this, arguments); }
            },
            "scrollToPoint": {
              "value": function () { return this.scroll_to_point.apply(this, arguments); }
            },
            "setActivateOnSingleClick": {
              "value": function () { return this.set_activate_on_single_click.apply(this, arguments); }
            },
            "setColumnDragFunction": {
              "value": function () { return this.set_column_drag_function.apply(this, arguments); }
            },
            "setCursor": {
              "value": function () { return this.set_cursor.apply(this, arguments); }
            },
            "setCursorOnCell": {
              "value": function () { return this.set_cursor_on_cell.apply(this, arguments); }
            },
            "setDestroyCountFunc": {
              "value": function () { return this.set_destroy_count_func.apply(this, arguments); }
            },
            "setDragDestRow": {
              "value": function () { return this.set_drag_dest_row.apply(this, arguments); }
            },
            "setEnableSearch": {
              "value": function () { return this.set_enable_search.apply(this, arguments); }
            },
            "setEnableTreeLines": {
              "value": function () { return this.set_enable_tree_lines.apply(this, arguments); }
            },
            "setExpanderColumn": {
              "value": function () { return this.set_expander_column.apply(this, arguments); }
            },
            "setFixedHeightMode": {
              "value": function () { return this.set_fixed_height_mode.apply(this, arguments); }
            },
            "setGridLines": {
              "value": function () { return this.set_grid_lines.apply(this, arguments); }
            },
            "setHadjustment": {
              "value": function () { return this.set_hadjustment.apply(this, arguments); }
            },
            "setHeadersClickable": {
              "value": function () { return this.set_headers_clickable.apply(this, arguments); }
            },
            "setHeadersVisible": {
              "value": function () { return this.set_headers_visible.apply(this, arguments); }
            },
            "setHoverExpand": {
              "value": function () { return this.set_hover_expand.apply(this, arguments); }
            },
            "setHoverSelection": {
              "value": function () { return this.set_hover_selection.apply(this, arguments); }
            },
            "setLevelIndentation": {
              "value": function () { return this.set_level_indentation.apply(this, arguments); }
            },
            "setModel": {
              "value": function () { return this.set_model.apply(this, arguments); }
            },
            "setReorderable": {
              "value": function () { return this.set_reorderable.apply(this, arguments); }
            },
            "setRowSeparatorFunc": {
              "value": function () { return this.set_row_separator_func.apply(this, arguments); }
            },
            "setRubberBanding": {
              "value": function () { return this.set_rubber_banding.apply(this, arguments); }
            },
            "setRulesHint": {
              "value": function () { return this.set_rules_hint.apply(this, arguments); }
            },
            "setSearchColumn": {
              "value": function () { return this.set_search_column.apply(this, arguments); }
            },
            "setSearchEntry": {
              "value": function () { return this.set_search_entry.apply(this, arguments); }
            },
            "setSearchEqualFunc": {
              "value": function () { return this.set_search_equal_func.apply(this, arguments); }
            },
            "setSearchPositionFunc": {
              "value": function () { return this.set_search_position_func.apply(this, arguments); }
            },
            "setShowExpanders": {
              "value": function () { return this.set_show_expanders.apply(this, arguments); }
            },
            "setTooltipCell": {
              "value": function () { return this.set_tooltip_cell.apply(this, arguments); }
            },
            "setTooltipColumn": {
              "value": function () { return this.set_tooltip_column.apply(this, arguments); }
            },
            "setTooltipRow": {
              "value": function () { return this.set_tooltip_row.apply(this, arguments); }
            },
            "setVadjustment": {
              "value": function () { return this.set_vadjustment.apply(this, arguments); }
            },
            "unsetRowsDragDest": {
              "value": function () { return this.unset_rows_drag_dest.apply(this, arguments); }
            },
            "unsetRowsDragSource": {
              "value": function () { return this.unset_rows_drag_source.apply(this, arguments); }
            },
            "activateOnSingleClick": {
              "get": function () { return this.activate_on_single_click; },
              "set": function (value) { this.activate_on_single_click = value; }
            },
            "enableGridLines": {
              "get": function () { return this.enable_grid_lines; },
              "set": function (value) { this.enable_grid_lines = value; }
            },
            "enableSearch": {
              "get": function () { return this.enable_search; },
              "set": function (value) { this.enable_search = value; }
            },
            "enableTreeLines": {
              "get": function () { return this.enable_tree_lines; },
              "set": function (value) { this.enable_tree_lines = value; }
            },
            "expanderColumn": {
              "get": function () { return this.expander_column; },
              "set": function (value) { this.expander_column = value; }
            },
            "fixedHeightMode": {
              "get": function () { return this.fixed_height_mode; },
              "set": function (value) { this.fixed_height_mode = value; }
            },
            "headersClickable": {
              "get": function () { return this.headers_clickable; },
              "set": function (value) { this.headers_clickable = value; }
            },
            "headersVisible": {
              "get": function () { return this.headers_visible; },
              "set": function (value) { this.headers_visible = value; }
            },
            "hoverExpand": {
              "get": function () { return this.hover_expand; },
              "set": function (value) { this.hover_expand = value; }
            },
            "hoverSelection": {
              "get": function () { return this.hover_selection; },
              "set": function (value) { this.hover_selection = value; }
            },
            "levelIndentation": {
              "get": function () { return this.level_indentation; },
              "set": function (value) { this.level_indentation = value; }
            },
            "rubberBanding": {
              "get": function () { return this.rubber_banding; },
              "set": function (value) { this.rubber_banding = value; }
            },
            "rulesHint": {
              "get": function () { return this.rules_hint; },
              "set": function (value) { this.rules_hint = value; }
            },
            "searchColumn": {
              "get": function () { return this.search_column; },
              "set": function (value) { this.search_column = value; }
            },
            "showExpanders": {
              "get": function () { return this.show_expanders; },
              "set": function (value) { this.show_expanders = value; }
            },
            "tooltipColumn": {
              "get": function () { return this.tooltip_column; },
              "set": function (value) { this.tooltip_column = value; }
            }
          },
          "static": {}
        },
        "TreeViewAccessible": {
          "prototype": {},
          "static": {}
        },
        "TreeViewColumn": {
          "prototype": {
            "addAttribute": {
              "value": function () { return this.add_attribute.apply(this, arguments); }
            },
            "cellGetPosition": {
              "value": function () { return this.cell_get_position.apply(this, arguments); }
            },
            "cellGetSize": {
              "value": function () { return this.cell_get_size.apply(this, arguments); }
            },
            "cellIsVisible": {
              "value": function () { return this.cell_is_visible.apply(this, arguments); }
            },
            "cellSetCellData": {
              "value": function () { return this.cell_set_cell_data.apply(this, arguments); }
            },
            "clearAttributes": {
              "value": function () { return this.clear_attributes.apply(this, arguments); }
            },
            "focusCell": {
              "value": function () { return this.focus_cell.apply(this, arguments); }
            },
            "getAlignment": {
              "value": function () { return this.get_alignment.apply(this, arguments); }
            },
            "getButton": {
              "value": function () { return this.get_button.apply(this, arguments); }
            },
            "getClickable": {
              "value": function () { return this.get_clickable.apply(this, arguments); }
            },
            "getExpand": {
              "value": function () { return this.get_expand.apply(this, arguments); }
            },
            "getFixedWidth": {
              "value": function () { return this.get_fixed_width.apply(this, arguments); }
            },
            "getMaxWidth": {
              "value": function () { return this.get_max_width.apply(this, arguments); }
            },
            "getMinWidth": {
              "value": function () { return this.get_min_width.apply(this, arguments); }
            },
            "getReorderable": {
              "value": function () { return this.get_reorderable.apply(this, arguments); }
            },
            "getResizable": {
              "value": function () { return this.get_resizable.apply(this, arguments); }
            },
            "getSizing": {
              "value": function () { return this.get_sizing.apply(this, arguments); }
            },
            "getSortColumnId": {
              "value": function () { return this.get_sort_column_id.apply(this, arguments); }
            },
            "getSortIndicator": {
              "value": function () { return this.get_sort_indicator.apply(this, arguments); }
            },
            "getSortOrder": {
              "value": function () { return this.get_sort_order.apply(this, arguments); }
            },
            "getSpacing": {
              "value": function () { return this.get_spacing.apply(this, arguments); }
            },
            "getTitle": {
              "value": function () { return this.get_title.apply(this, arguments); }
            },
            "getTreeView": {
              "value": function () { return this.get_tree_view.apply(this, arguments); }
            },
            "getVisible": {
              "value": function () { return this.get_visible.apply(this, arguments); }
            },
            "getWidget": {
              "value": function () { return this.get_widget.apply(this, arguments); }
            },
            "getWidth": {
              "value": function () { return this.get_width.apply(this, arguments); }
            },
            "getXOffset": {
              "value": function () { return this.get_x_offset.apply(this, arguments); }
            },
            "packEnd": {
              "value": function () { return this.pack_end.apply(this, arguments); }
            },
            "packStart": {
              "value": function () { return this.pack_start.apply(this, arguments); }
            },
            "queueResize": {
              "value": function () { return this.queue_resize.apply(this, arguments); }
            },
            "setAlignment": {
              "value": function () { return this.set_alignment.apply(this, arguments); }
            },
            "setAttributes": {
              "value": function () { return this.set_attributes.apply(this, arguments); }
            },
            "setCellDataFunc": {
              "value": function () { return this.set_cell_data_func.apply(this, arguments); }
            },
            "setClickable": {
              "value": function () { return this.set_clickable.apply(this, arguments); }
            },
            "setExpand": {
              "value": function () { return this.set_expand.apply(this, arguments); }
            },
            "setFixedWidth": {
              "value": function () { return this.set_fixed_width.apply(this, arguments); }
            },
            "setMaxWidth": {
              "value": function () { return this.set_max_width.apply(this, arguments); }
            },
            "setMinWidth": {
              "value": function () { return this.set_min_width.apply(this, arguments); }
            },
            "setReorderable": {
              "value": function () { return this.set_reorderable.apply(this, arguments); }
            },
            "setResizable": {
              "value": function () { return this.set_resizable.apply(this, arguments); }
            },
            "setSizing": {
              "value": function () { return this.set_sizing.apply(this, arguments); }
            },
            "setSortColumnId": {
              "value": function () { return this.set_sort_column_id.apply(this, arguments); }
            },
            "setSortIndicator": {
              "value": function () { return this.set_sort_indicator.apply(this, arguments); }
            },
            "setSortOrder": {
              "value": function () { return this.set_sort_order.apply(this, arguments); }
            },
            "setSpacing": {
              "value": function () { return this.set_spacing.apply(this, arguments); }
            },
            "setTitle": {
              "value": function () { return this.set_title.apply(this, arguments); }
            },
            "setVisible": {
              "value": function () { return this.set_visible.apply(this, arguments); }
            },
            "setWidget": {
              "value": function () { return this.set_widget.apply(this, arguments); }
            },
            "cellArea": {
              "get": function () { return this.cell_area; },
              "set": function (value) { this.cell_area = value; }
            },
            "fixedWidth": {
              "get": function () { return this.fixed_width; },
              "set": function (value) { this.fixed_width = value; }
            },
            "maxWidth": {
              "get": function () { return this.max_width; },
              "set": function (value) { this.max_width = value; }
            },
            "minWidth": {
              "get": function () { return this.min_width; },
              "set": function (value) { this.min_width = value; }
            },
            "sortColumnId": {
              "get": function () { return this.sort_column_id; },
              "set": function (value) { this.sort_column_id = value; }
            },
            "sortIndicator": {
              "get": function () { return this.sort_indicator; },
              "set": function (value) { this.sort_indicator = value; }
            },
            "sortOrder": {
              "get": function () { return this.sort_order; },
              "set": function (value) { this.sort_order = value; }
            },
            "xOffset": {
              "get": function () { return this.x_offset; },
              "set": function (value) { this.x_offset = value; }
            }
          },
          "static": {}
        },
        "UIManager": {
          "prototype": {
            "addUi": {
              "value": function () { return this.add_ui.apply(this, arguments); }
            },
            "addUiFromFile": {
              "value": function () { return this.add_ui_from_file.apply(this, arguments); }
            },
            "addUiFromResource": {
              "value": function () { return this.add_ui_from_resource.apply(this, arguments); }
            },
            "addUiFromString": {
              "value": function () { return this.add_ui_from_string.apply(this, arguments); }
            },
            "ensureUpdate": {
              "value": function () { return this.ensure_update.apply(this, arguments); }
            },
            "getAccelGroup": {
              "value": function () { return this.get_accel_group.apply(this, arguments); }
            },
            "getAction": {
              "value": function () { return this.get_action.apply(this, arguments); }
            },
            "getActionGroups": {
              "value": function () { return this.get_action_groups.apply(this, arguments); }
            },
            "getAddTearoffs": {
              "value": function () { return this.get_add_tearoffs.apply(this, arguments); }
            },
            "getToplevels": {
              "value": function () { return this.get_toplevels.apply(this, arguments); }
            },
            "getUi": {
              "value": function () { return this.get_ui.apply(this, arguments); }
            },
            "getWidget": {
              "value": function () { return this.get_widget.apply(this, arguments); }
            },
            "insertActionGroup": {
              "value": function () { return this.insert_action_group.apply(this, arguments); }
            },
            "newMergeId": {
              "value": function () { return this.new_merge_id.apply(this, arguments); }
            },
            "removeActionGroup": {
              "value": function () { return this.remove_action_group.apply(this, arguments); }
            },
            "removeUi": {
              "value": function () { return this.remove_ui.apply(this, arguments); }
            },
            "setAddTearoffs": {
              "value": function () { return this.set_add_tearoffs.apply(this, arguments); }
            },
            "addTearoffs": {
              "get": function () { return this.add_tearoffs; },
              "set": function (value) { this.add_tearoffs = value; }
            }
          },
          "static": {}
        },
        "VBox": {
          "prototype": {},
          "static": {}
        },
        "VButtonBox": {
          "prototype": {},
          "static": {}
        },
        "VPaned": {
          "prototype": {},
          "static": {}
        },
        "VScale": {
          "prototype": {},
          "static": {}
        },
        "VScrollbar": {
          "prototype": {},
          "static": {}
        },
        "VSeparator": {
          "prototype": {},
          "static": {}
        },
        "Viewport": {
          "prototype": {
            "getBinWindow": {
              "value": function () { return this.get_bin_window.apply(this, arguments); }
            },
            "getHadjustment": {
              "value": function () { return this.get_hadjustment.apply(this, arguments); }
            },
            "getShadowType": {
              "value": function () { return this.get_shadow_type.apply(this, arguments); }
            },
            "getVadjustment": {
              "value": function () { return this.get_vadjustment.apply(this, arguments); }
            },
            "getViewWindow": {
              "value": function () { return this.get_view_window.apply(this, arguments); }
            },
            "setHadjustment": {
              "value": function () { return this.set_hadjustment.apply(this, arguments); }
            },
            "setShadowType": {
              "value": function () { return this.set_shadow_type.apply(this, arguments); }
            },
            "setVadjustment": {
              "value": function () { return this.set_vadjustment.apply(this, arguments); }
            },
            "shadowType": {
              "get": function () { return this.shadow_type; },
              "set": function (value) { this.shadow_type = value; }
            }
          },
          "static": {}
        },
        "VolumeButton": {
          "prototype": {
            "useSymbolic": {
              "get": function () { return this.use_symbolic; },
              "set": function (value) { this.use_symbolic = value; }
            }
          },
          "static": {}
        },
        "Widget": {
          "prototype": {
            "addAccelerator": {
              "value": function () { return this.add_accelerator.apply(this, arguments); }
            },
            "addDeviceEvents": {
              "value": function () { return this.add_device_events.apply(this, arguments); }
            },
            "addEvents": {
              "value": function () { return this.add_events.apply(this, arguments); }
            },
            "addMnemonicLabel": {
              "value": function () { return this.add_mnemonic_label.apply(this, arguments); }
            },
            "addTickCallback": {
              "value": function () { return this.add_tick_callback.apply(this, arguments); }
            },
            "canActivateAccel": {
              "value": function () { return this.can_activate_accel.apply(this, arguments); }
            },
            "childFocus": {
              "value": function () { return this.child_focus.apply(this, arguments); }
            },
            "childNotify": {
              "value": function () { return this.child_notify.apply(this, arguments); }
            },
            "classPath": {
              "value": function () { return this.class_path.apply(this, arguments); }
            },
            "computeExpand": {
              "value": function () { return this.compute_expand.apply(this, arguments); }
            },
            "createPangoContext": {
              "value": function () { return this.create_pango_context.apply(this, arguments); }
            },
            "createPangoLayout": {
              "value": function () { return this.create_pango_layout.apply(this, arguments); }
            },
            "deviceIsShadowed": {
              "value": function () { return this.device_is_shadowed.apply(this, arguments); }
            },
            "dragBegin": {
              "value": function () { return this.drag_begin.apply(this, arguments); }
            },
            "dragBeginWithCoordinates": {
              "value": function () { return this.drag_begin_with_coordinates.apply(this, arguments); }
            },
            "dragCheckThreshold": {
              "value": function () { return this.drag_check_threshold.apply(this, arguments); }
            },
            "dragDestAddImageTargets": {
              "value": function () { return this.drag_dest_add_image_targets.apply(this, arguments); }
            },
            "dragDestAddTextTargets": {
              "value": function () { return this.drag_dest_add_text_targets.apply(this, arguments); }
            },
            "dragDestAddUriTargets": {
              "value": function () { return this.drag_dest_add_uri_targets.apply(this, arguments); }
            },
            "dragDestFindTarget": {
              "value": function () { return this.drag_dest_find_target.apply(this, arguments); }
            },
            "dragDestGetTargetList": {
              "value": function () { return this.drag_dest_get_target_list.apply(this, arguments); }
            },
            "dragDestGetTrackMotion": {
              "value": function () { return this.drag_dest_get_track_motion.apply(this, arguments); }
            },
            "dragDestSet": {
              "value": function () { return this.drag_dest_set.apply(this, arguments); }
            },
            "dragDestSetProxy": {
              "value": function () { return this.drag_dest_set_proxy.apply(this, arguments); }
            },
            "dragDestSetTargetList": {
              "value": function () { return this.drag_dest_set_target_list.apply(this, arguments); }
            },
            "dragDestSetTrackMotion": {
              "value": function () { return this.drag_dest_set_track_motion.apply(this, arguments); }
            },
            "dragDestUnset": {
              "value": function () { return this.drag_dest_unset.apply(this, arguments); }
            },
            "dragGetData": {
              "value": function () { return this.drag_get_data.apply(this, arguments); }
            },
            "dragHighlight": {
              "value": function () { return this.drag_highlight.apply(this, arguments); }
            },
            "dragSourceAddImageTargets": {
              "value": function () { return this.drag_source_add_image_targets.apply(this, arguments); }
            },
            "dragSourceAddTextTargets": {
              "value": function () { return this.drag_source_add_text_targets.apply(this, arguments); }
            },
            "dragSourceAddUriTargets": {
              "value": function () { return this.drag_source_add_uri_targets.apply(this, arguments); }
            },
            "dragSourceGetTargetList": {
              "value": function () { return this.drag_source_get_target_list.apply(this, arguments); }
            },
            "dragSourceSet": {
              "value": function () { return this.drag_source_set.apply(this, arguments); }
            },
            "dragSourceSetIconGicon": {
              "value": function () { return this.drag_source_set_icon_gicon.apply(this, arguments); }
            },
            "dragSourceSetIconName": {
              "value": function () { return this.drag_source_set_icon_name.apply(this, arguments); }
            },
            "dragSourceSetIconPixbuf": {
              "value": function () { return this.drag_source_set_icon_pixbuf.apply(this, arguments); }
            },
            "dragSourceSetIconStock": {
              "value": function () { return this.drag_source_set_icon_stock.apply(this, arguments); }
            },
            "dragSourceSetTargetList": {
              "value": function () { return this.drag_source_set_target_list.apply(this, arguments); }
            },
            "dragSourceUnset": {
              "value": function () { return this.drag_source_unset.apply(this, arguments); }
            },
            "dragUnhighlight": {
              "value": function () { return this.drag_unhighlight.apply(this, arguments); }
            },
            "ensureStyle": {
              "value": function () { return this.ensure_style.apply(this, arguments); }
            },
            "errorBell": {
              "value": function () { return this.error_bell.apply(this, arguments); }
            },
            "freezeChildNotify": {
              "value": function () { return this.freeze_child_notify.apply(this, arguments); }
            },
            "getAccessible": {
              "value": function () { return this.get_accessible.apply(this, arguments); }
            },
            "getActionGroup": {
              "value": function () { return this.get_action_group.apply(this, arguments); }
            },
            "getAllocatedBaseline": {
              "value": function () { return this.get_allocated_baseline.apply(this, arguments); }
            },
            "getAllocatedHeight": {
              "value": function () { return this.get_allocated_height.apply(this, arguments); }
            },
            "getAllocatedSize": {
              "value": function () { return this.get_allocated_size.apply(this, arguments); }
            },
            "getAllocatedWidth": {
              "value": function () { return this.get_allocated_width.apply(this, arguments); }
            },
            "getAllocation": {
              "value": function () { return this.get_allocation.apply(this, arguments); }
            },
            "getAncestor": {
              "value": function () { return this.get_ancestor.apply(this, arguments); }
            },
            "getAppPaintable": {
              "value": function () { return this.get_app_paintable.apply(this, arguments); }
            },
            "getCanDefault": {
              "value": function () { return this.get_can_default.apply(this, arguments); }
            },
            "getCanFocus": {
              "value": function () { return this.get_can_focus.apply(this, arguments); }
            },
            "getChildRequisition": {
              "value": function () { return this.get_child_requisition.apply(this, arguments); }
            },
            "getChildVisible": {
              "value": function () { return this.get_child_visible.apply(this, arguments); }
            },
            "getClip": {
              "value": function () { return this.get_clip.apply(this, arguments); }
            },
            "getClipboard": {
              "value": function () { return this.get_clipboard.apply(this, arguments); }
            },
            "getCompositeName": {
              "value": function () { return this.get_composite_name.apply(this, arguments); }
            },
            "getDeviceEnabled": {
              "value": function () { return this.get_device_enabled.apply(this, arguments); }
            },
            "getDeviceEvents": {
              "value": function () { return this.get_device_events.apply(this, arguments); }
            },
            "getDirection": {
              "value": function () { return this.get_direction.apply(this, arguments); }
            },
            "getDisplay": {
              "value": function () { return this.get_display.apply(this, arguments); }
            },
            "getDoubleBuffered": {
              "value": function () { return this.get_double_buffered.apply(this, arguments); }
            },
            "getEvents": {
              "value": function () { return this.get_events.apply(this, arguments); }
            },
            "getFocusOnClick": {
              "value": function () { return this.get_focus_on_click.apply(this, arguments); }
            },
            "getFontMap": {
              "value": function () { return this.get_font_map.apply(this, arguments); }
            },
            "getFontOptions": {
              "value": function () { return this.get_font_options.apply(this, arguments); }
            },
            "getFrameClock": {
              "value": function () { return this.get_frame_clock.apply(this, arguments); }
            },
            "getHalign": {
              "value": function () { return this.get_halign.apply(this, arguments); }
            },
            "getHasTooltip": {
              "value": function () { return this.get_has_tooltip.apply(this, arguments); }
            },
            "getHasWindow": {
              "value": function () { return this.get_has_window.apply(this, arguments); }
            },
            "getHexpand": {
              "value": function () { return this.get_hexpand.apply(this, arguments); }
            },
            "getHexpandSet": {
              "value": function () { return this.get_hexpand_set.apply(this, arguments); }
            },
            "getMapped": {
              "value": function () { return this.get_mapped.apply(this, arguments); }
            },
            "getMarginBottom": {
              "value": function () { return this.get_margin_bottom.apply(this, arguments); }
            },
            "getMarginEnd": {
              "value": function () { return this.get_margin_end.apply(this, arguments); }
            },
            "getMarginLeft": {
              "value": function () { return this.get_margin_left.apply(this, arguments); }
            },
            "getMarginRight": {
              "value": function () { return this.get_margin_right.apply(this, arguments); }
            },
            "getMarginStart": {
              "value": function () { return this.get_margin_start.apply(this, arguments); }
            },
            "getMarginTop": {
              "value": function () { return this.get_margin_top.apply(this, arguments); }
            },
            "getModifierMask": {
              "value": function () { return this.get_modifier_mask.apply(this, arguments); }
            },
            "getModifierStyle": {
              "value": function () { return this.get_modifier_style.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getNoShowAll": {
              "value": function () { return this.get_no_show_all.apply(this, arguments); }
            },
            "getOpacity": {
              "value": function () { return this.get_opacity.apply(this, arguments); }
            },
            "getPangoContext": {
              "value": function () { return this.get_pango_context.apply(this, arguments); }
            },
            "getParent": {
              "value": function () { return this.get_parent.apply(this, arguments); }
            },
            "getParentWindow": {
              "value": function () { return this.get_parent_window.apply(this, arguments); }
            },
            "getPath": {
              "value": function () { return this.get_path.apply(this, arguments); }
            },
            "getPointer": {
              "value": function () { return this.get_pointer.apply(this, arguments); }
            },
            "getPreferredHeight": {
              "value": function () { return this.get_preferred_height.apply(this, arguments); }
            },
            "getPreferredHeightAndBaselineForWidth": {
              "value": function () { return this.get_preferred_height_and_baseline_for_width.apply(this, arguments); }
            },
            "getPreferredHeightForWidth": {
              "value": function () { return this.get_preferred_height_for_width.apply(this, arguments); }
            },
            "getPreferredSize": {
              "value": function () { return this.get_preferred_size.apply(this, arguments); }
            },
            "getPreferredWidth": {
              "value": function () { return this.get_preferred_width.apply(this, arguments); }
            },
            "getPreferredWidthForHeight": {
              "value": function () { return this.get_preferred_width_for_height.apply(this, arguments); }
            },
            "getRealized": {
              "value": function () { return this.get_realized.apply(this, arguments); }
            },
            "getReceivesDefault": {
              "value": function () { return this.get_receives_default.apply(this, arguments); }
            },
            "getRequestMode": {
              "value": function () { return this.get_request_mode.apply(this, arguments); }
            },
            "getRequisition": {
              "value": function () { return this.get_requisition.apply(this, arguments); }
            },
            "getRootWindow": {
              "value": function () { return this.get_root_window.apply(this, arguments); }
            },
            "getScaleFactor": {
              "value": function () { return this.get_scale_factor.apply(this, arguments); }
            },
            "getScreen": {
              "value": function () { return this.get_screen.apply(this, arguments); }
            },
            "getSensitive": {
              "value": function () { return this.get_sensitive.apply(this, arguments); }
            },
            "getSettings": {
              "value": function () { return this.get_settings.apply(this, arguments); }
            },
            "getSizeRequest": {
              "value": function () { return this.get_size_request.apply(this, arguments); }
            },
            "getState": {
              "value": function () { return this.get_state.apply(this, arguments); }
            },
            "getStateFlags": {
              "value": function () { return this.get_state_flags.apply(this, arguments); }
            },
            "getStyle": {
              "value": function () { return this.get_style.apply(this, arguments); }
            },
            "getStyleContext": {
              "value": function () { return this.get_style_context.apply(this, arguments); }
            },
            "getSupportMultidevice": {
              "value": function () { return this.get_support_multidevice.apply(this, arguments); }
            },
            "getTemplateChild": {
              "value": function () { return this.get_template_child.apply(this, arguments); }
            },
            "getTooltipMarkup": {
              "value": function () { return this.get_tooltip_markup.apply(this, arguments); }
            },
            "getTooltipText": {
              "value": function () { return this.get_tooltip_text.apply(this, arguments); }
            },
            "getTooltipWindow": {
              "value": function () { return this.get_tooltip_window.apply(this, arguments); }
            },
            "getToplevel": {
              "value": function () { return this.get_toplevel.apply(this, arguments); }
            },
            "getValign": {
              "value": function () { return this.get_valign.apply(this, arguments); }
            },
            "getValignWithBaseline": {
              "value": function () { return this.get_valign_with_baseline.apply(this, arguments); }
            },
            "getVexpand": {
              "value": function () { return this.get_vexpand.apply(this, arguments); }
            },
            "getVexpandSet": {
              "value": function () { return this.get_vexpand_set.apply(this, arguments); }
            },
            "getVisible": {
              "value": function () { return this.get_visible.apply(this, arguments); }
            },
            "getVisual": {
              "value": function () { return this.get_visual.apply(this, arguments); }
            },
            "getWindow": {
              "value": function () { return this.get_window.apply(this, arguments); }
            },
            "grabAdd": {
              "value": function () { return this.grab_add.apply(this, arguments); }
            },
            "grabDefault": {
              "value": function () { return this.grab_default.apply(this, arguments); }
            },
            "grabFocus": {
              "value": function () { return this.grab_focus.apply(this, arguments); }
            },
            "grabRemove": {
              "value": function () { return this.grab_remove.apply(this, arguments); }
            },
            "hasDefault": {
              "get": function () { return this.has_default; },
              "set": function (value) { this.has_default = value; }
            },
            "hasFocus": {
              "get": function () { return this.has_focus; },
              "set": function (value) { this.has_focus = value; }
            },
            "hasGrab": {
              "value": function () { return this.has_grab.apply(this, arguments); }
            },
            "hasRcStyle": {
              "value": function () { return this.has_rc_style.apply(this, arguments); }
            },
            "hasScreen": {
              "value": function () { return this.has_screen.apply(this, arguments); }
            },
            "hasVisibleFocus": {
              "value": function () { return this.has_visible_focus.apply(this, arguments); }
            },
            "hideOnDelete": {
              "value": function () { return this.hide_on_delete.apply(this, arguments); }
            },
            "inDestruction": {
              "value": function () { return this.in_destruction.apply(this, arguments); }
            },
            "initTemplate": {
              "value": function () { return this.init_template.apply(this, arguments); }
            },
            "inputShapeCombineRegion": {
              "value": function () { return this.input_shape_combine_region.apply(this, arguments); }
            },
            "insertActionGroup": {
              "value": function () { return this.insert_action_group.apply(this, arguments); }
            },
            "isAncestor": {
              "value": function () { return this.is_ancestor.apply(this, arguments); }
            },
            "isComposited": {
              "value": function () { return this.is_composited.apply(this, arguments); }
            },
            "isDrawable": {
              "value": function () { return this.is_drawable.apply(this, arguments); }
            },
            "isFocus": {
              "get": function () { return this.is_focus; },
              "set": function (value) { this.is_focus = value; }
            },
            "isSensitive": {
              "value": function () { return this.is_sensitive.apply(this, arguments); }
            },
            "isToplevel": {
              "value": function () { return this.is_toplevel.apply(this, arguments); }
            },
            "isVisible": {
              "value": function () { return this.is_visible.apply(this, arguments); }
            },
            "keynavFailed": {
              "value": function () { return this.keynav_failed.apply(this, arguments); }
            },
            "listAccelClosures": {
              "value": function () { return this.list_accel_closures.apply(this, arguments); }
            },
            "listActionPrefixes": {
              "value": function () { return this.list_action_prefixes.apply(this, arguments); }
            },
            "listMnemonicLabels": {
              "value": function () { return this.list_mnemonic_labels.apply(this, arguments); }
            },
            "mnemonicActivate": {
              "value": function () { return this.mnemonic_activate.apply(this, arguments); }
            },
            "modifyBase": {
              "value": function () { return this.modify_base.apply(this, arguments); }
            },
            "modifyBg": {
              "value": function () { return this.modify_bg.apply(this, arguments); }
            },
            "modifyCursor": {
              "value": function () { return this.modify_cursor.apply(this, arguments); }
            },
            "modifyFg": {
              "value": function () { return this.modify_fg.apply(this, arguments); }
            },
            "modifyFont": {
              "value": function () { return this.modify_font.apply(this, arguments); }
            },
            "modifyStyle": {
              "value": function () { return this.modify_style.apply(this, arguments); }
            },
            "modifyText": {
              "value": function () { return this.modify_text.apply(this, arguments); }
            },
            "overrideBackgroundColor": {
              "value": function () { return this.override_background_color.apply(this, arguments); }
            },
            "overrideColor": {
              "value": function () { return this.override_color.apply(this, arguments); }
            },
            "overrideCursor": {
              "value": function () { return this.override_cursor.apply(this, arguments); }
            },
            "overrideFont": {
              "value": function () { return this.override_font.apply(this, arguments); }
            },
            "overrideSymbolicColor": {
              "value": function () { return this.override_symbolic_color.apply(this, arguments); }
            },
            "queueAllocate": {
              "value": function () { return this.queue_allocate.apply(this, arguments); }
            },
            "queueComputeExpand": {
              "value": function () { return this.queue_compute_expand.apply(this, arguments); }
            },
            "queueDraw": {
              "value": function () { return this.queue_draw.apply(this, arguments); }
            },
            "queueDrawArea": {
              "value": function () { return this.queue_draw_area.apply(this, arguments); }
            },
            "queueDrawRegion": {
              "value": function () { return this.queue_draw_region.apply(this, arguments); }
            },
            "queueResize": {
              "value": function () { return this.queue_resize.apply(this, arguments); }
            },
            "queueResizeNoRedraw": {
              "value": function () { return this.queue_resize_no_redraw.apply(this, arguments); }
            },
            "regionIntersect": {
              "value": function () { return this.region_intersect.apply(this, arguments); }
            },
            "registerWindow": {
              "value": function () { return this.register_window.apply(this, arguments); }
            },
            "removeAccelerator": {
              "value": function () { return this.remove_accelerator.apply(this, arguments); }
            },
            "removeMnemonicLabel": {
              "value": function () { return this.remove_mnemonic_label.apply(this, arguments); }
            },
            "removeTickCallback": {
              "value": function () { return this.remove_tick_callback.apply(this, arguments); }
            },
            "renderIcon": {
              "value": function () { return this.render_icon.apply(this, arguments); }
            },
            "renderIconPixbuf": {
              "value": function () { return this.render_icon_pixbuf.apply(this, arguments); }
            },
            "resetRcStyles": {
              "value": function () { return this.reset_rc_styles.apply(this, arguments); }
            },
            "resetStyle": {
              "value": function () { return this.reset_style.apply(this, arguments); }
            },
            "sendExpose": {
              "value": function () { return this.send_expose.apply(this, arguments); }
            },
            "sendFocusChange": {
              "value": function () { return this.send_focus_change.apply(this, arguments); }
            },
            "setAccelPath": {
              "value": function () { return this.set_accel_path.apply(this, arguments); }
            },
            "setAllocation": {
              "value": function () { return this.set_allocation.apply(this, arguments); }
            },
            "setAppPaintable": {
              "value": function () { return this.set_app_paintable.apply(this, arguments); }
            },
            "setCanDefault": {
              "value": function () { return this.set_can_default.apply(this, arguments); }
            },
            "setCanFocus": {
              "value": function () { return this.set_can_focus.apply(this, arguments); }
            },
            "setChildVisible": {
              "value": function () { return this.set_child_visible.apply(this, arguments); }
            },
            "setClip": {
              "value": function () { return this.set_clip.apply(this, arguments); }
            },
            "setCompositeName": {
              "value": function () { return this.set_composite_name.apply(this, arguments); }
            },
            "setDeviceEnabled": {
              "value": function () { return this.set_device_enabled.apply(this, arguments); }
            },
            "setDeviceEvents": {
              "value": function () { return this.set_device_events.apply(this, arguments); }
            },
            "setDirection": {
              "value": function () { return this.set_direction.apply(this, arguments); }
            },
            "setDoubleBuffered": {
              "value": function () { return this.set_double_buffered.apply(this, arguments); }
            },
            "setEvents": {
              "value": function () { return this.set_events.apply(this, arguments); }
            },
            "setFocusOnClick": {
              "value": function () { return this.set_focus_on_click.apply(this, arguments); }
            },
            "setFontMap": {
              "value": function () { return this.set_font_map.apply(this, arguments); }
            },
            "setFontOptions": {
              "value": function () { return this.set_font_options.apply(this, arguments); }
            },
            "setHalign": {
              "value": function () { return this.set_halign.apply(this, arguments); }
            },
            "setHasTooltip": {
              "value": function () { return this.set_has_tooltip.apply(this, arguments); }
            },
            "setHasWindow": {
              "value": function () { return this.set_has_window.apply(this, arguments); }
            },
            "setHexpand": {
              "value": function () { return this.set_hexpand.apply(this, arguments); }
            },
            "setHexpandSet": {
              "value": function () { return this.set_hexpand_set.apply(this, arguments); }
            },
            "setMapped": {
              "value": function () { return this.set_mapped.apply(this, arguments); }
            },
            "setMarginBottom": {
              "value": function () { return this.set_margin_bottom.apply(this, arguments); }
            },
            "setMarginEnd": {
              "value": function () { return this.set_margin_end.apply(this, arguments); }
            },
            "setMarginLeft": {
              "value": function () { return this.set_margin_left.apply(this, arguments); }
            },
            "setMarginRight": {
              "value": function () { return this.set_margin_right.apply(this, arguments); }
            },
            "setMarginStart": {
              "value": function () { return this.set_margin_start.apply(this, arguments); }
            },
            "setMarginTop": {
              "value": function () { return this.set_margin_top.apply(this, arguments); }
            },
            "setName": {
              "value": function () { return this.set_name.apply(this, arguments); }
            },
            "setNoShowAll": {
              "value": function () { return this.set_no_show_all.apply(this, arguments); }
            },
            "setOpacity": {
              "value": function () { return this.set_opacity.apply(this, arguments); }
            },
            "setParent": {
              "value": function () { return this.set_parent.apply(this, arguments); }
            },
            "setParentWindow": {
              "value": function () { return this.set_parent_window.apply(this, arguments); }
            },
            "setRealized": {
              "value": function () { return this.set_realized.apply(this, arguments); }
            },
            "setReceivesDefault": {
              "value": function () { return this.set_receives_default.apply(this, arguments); }
            },
            "setRedrawOnAllocate": {
              "value": function () { return this.set_redraw_on_allocate.apply(this, arguments); }
            },
            "setSensitive": {
              "value": function () { return this.set_sensitive.apply(this, arguments); }
            },
            "setSizeRequest": {
              "value": function () { return this.set_size_request.apply(this, arguments); }
            },
            "setState": {
              "value": function () { return this.set_state.apply(this, arguments); }
            },
            "setStateFlags": {
              "value": function () { return this.set_state_flags.apply(this, arguments); }
            },
            "setStyle": {
              "value": function () { return this.set_style.apply(this, arguments); }
            },
            "setSupportMultidevice": {
              "value": function () { return this.set_support_multidevice.apply(this, arguments); }
            },
            "setTooltipMarkup": {
              "value": function () { return this.set_tooltip_markup.apply(this, arguments); }
            },
            "setTooltipText": {
              "value": function () { return this.set_tooltip_text.apply(this, arguments); }
            },
            "setTooltipWindow": {
              "value": function () { return this.set_tooltip_window.apply(this, arguments); }
            },
            "setValign": {
              "value": function () { return this.set_valign.apply(this, arguments); }
            },
            "setVexpand": {
              "value": function () { return this.set_vexpand.apply(this, arguments); }
            },
            "setVexpandSet": {
              "value": function () { return this.set_vexpand_set.apply(this, arguments); }
            },
            "setVisible": {
              "value": function () { return this.set_visible.apply(this, arguments); }
            },
            "setVisual": {
              "value": function () { return this.set_visual.apply(this, arguments); }
            },
            "setWindow": {
              "value": function () { return this.set_window.apply(this, arguments); }
            },
            "shapeCombineRegion": {
              "value": function () { return this.shape_combine_region.apply(this, arguments); }
            },
            "showAll": {
              "value": function () { return this.show_all.apply(this, arguments); }
            },
            "showNow": {
              "value": function () { return this.show_now.apply(this, arguments); }
            },
            "sizeAllocate": {
              "value": function () { return this.size_allocate.apply(this, arguments); }
            },
            "sizeAllocateWithBaseline": {
              "value": function () { return this.size_allocate_with_baseline.apply(this, arguments); }
            },
            "sizeRequest": {
              "value": function () { return this.size_request.apply(this, arguments); }
            },
            "styleAttach": {
              "value": function () { return this.style_attach.apply(this, arguments); }
            },
            "styleGet": {
              "value": function () { return this.style_get.apply(this, arguments); }
            },
            "styleGetProperty": {
              "value": function () { return this.style_get_property.apply(this, arguments); }
            },
            "styleGetValist": {
              "value": function () { return this.style_get_valist.apply(this, arguments); }
            },
            "thawChildNotify": {
              "value": function () { return this.thaw_child_notify.apply(this, arguments); }
            },
            "translateCoordinates": {
              "value": function () { return this.translate_coordinates.apply(this, arguments); }
            },
            "triggerTooltipQuery": {
              "value": function () { return this.trigger_tooltip_query.apply(this, arguments); }
            },
            "unregisterWindow": {
              "value": function () { return this.unregister_window.apply(this, arguments); }
            },
            "unsetStateFlags": {
              "value": function () { return this.unset_state_flags.apply(this, arguments); }
            },
            "appPaintable": {
              "get": function () { return this.app_paintable; },
              "set": function (value) { this.app_paintable = value; }
            },
            "canDefault": {
              "get": function () { return this.can_default; },
              "set": function (value) { this.can_default = value; }
            },
            "canFocus": {
              "get": function () { return this.can_focus; },
              "set": function (value) { this.can_focus = value; }
            },
            "compositeChild": {
              "get": function () { return this.composite_child; },
              "set": function (value) { this.composite_child = value; }
            },
            "doubleBuffered": {
              "get": function () { return this.double_buffered; },
              "set": function (value) { this.double_buffered = value; }
            },
            "focusOnClick": {
              "get": function () { return this.focus_on_click; },
              "set": function (value) { this.focus_on_click = value; }
            },
            "hasTooltip": {
              "get": function () { return this.has_tooltip; },
              "set": function (value) { this.has_tooltip = value; }
            },
            "heightRequest": {
              "get": function () { return this.height_request; },
              "set": function (value) { this.height_request = value; }
            },
            "hexpandSet": {
              "get": function () { return this.hexpand_set; },
              "set": function (value) { this.hexpand_set = value; }
            },
            "marginBottom": {
              "get": function () { return this.margin_bottom; },
              "set": function (value) { this.margin_bottom = value; }
            },
            "marginEnd": {
              "get": function () { return this.margin_end; },
              "set": function (value) { this.margin_end = value; }
            },
            "marginLeft": {
              "get": function () { return this.margin_left; },
              "set": function (value) { this.margin_left = value; }
            },
            "marginRight": {
              "get": function () { return this.margin_right; },
              "set": function (value) { this.margin_right = value; }
            },
            "marginStart": {
              "get": function () { return this.margin_start; },
              "set": function (value) { this.margin_start = value; }
            },
            "marginTop": {
              "get": function () { return this.margin_top; },
              "set": function (value) { this.margin_top = value; }
            },
            "noShowAll": {
              "get": function () { return this.no_show_all; },
              "set": function (value) { this.no_show_all = value; }
            },
            "receivesDefault": {
              "get": function () { return this.receives_default; },
              "set": function (value) { this.receives_default = value; }
            },
            "scaleFactor": {
              "get": function () { return this.scale_factor; },
              "set": function (value) { this.scale_factor = value; }
            },
            "tooltipMarkup": {
              "get": function () { return this.tooltip_markup; },
              "set": function (value) { this.tooltip_markup = value; }
            },
            "tooltipText": {
              "get": function () { return this.tooltip_text; },
              "set": function (value) { this.tooltip_text = value; }
            },
            "vexpandSet": {
              "get": function () { return this.vexpand_set; },
              "set": function (value) { this.vexpand_set = value; }
            },
            "widthRequest": {
              "get": function () { return this.width_request; },
              "set": function (value) { this.width_request = value; }
            }
          },
          "static": {
            "getDefaultDirection": {
              "value": function () { return this.get_default_direction.apply(this, arguments); }
            },
            "getDefaultStyle": {
              "value": function () { return this.get_default_style.apply(this, arguments); }
            },
            "popCompositeChild": {
              "value": function () { return this.pop_composite_child.apply(this, arguments); }
            },
            "pushCompositeChild": {
              "value": function () { return this.push_composite_child.apply(this, arguments); }
            },
            "setDefaultDirection": {
              "value": function () { return this.set_default_direction.apply(this, arguments); }
            }
          }
        },
        "WidgetAccessible": {
          "prototype": {},
          "static": {}
        },
        "Window": {
          "prototype": {
            "activateDefault": {
              "value": function () { return this.activate_default.apply(this, arguments); }
            },
            "activateFocus": {
              "value": function () { return this.activate_focus.apply(this, arguments); }
            },
            "activateKey": {
              "value": function () { return this.activate_key.apply(this, arguments); }
            },
            "addAccelGroup": {
              "value": function () { return this.add_accel_group.apply(this, arguments); }
            },
            "addMnemonic": {
              "value": function () { return this.add_mnemonic.apply(this, arguments); }
            },
            "beginMoveDrag": {
              "value": function () { return this.begin_move_drag.apply(this, arguments); }
            },
            "beginResizeDrag": {
              "value": function () { return this.begin_resize_drag.apply(this, arguments); }
            },
            "fullscreenOnMonitor": {
              "value": function () { return this.fullscreen_on_monitor.apply(this, arguments); }
            },
            "getAcceptFocus": {
              "value": function () { return this.get_accept_focus.apply(this, arguments); }
            },
            "getApplication": {
              "value": function () { return this.get_application.apply(this, arguments); }
            },
            "getAttachedTo": {
              "value": function () { return this.get_attached_to.apply(this, arguments); }
            },
            "getDecorated": {
              "value": function () { return this.get_decorated.apply(this, arguments); }
            },
            "getDefaultSize": {
              "value": function () { return this.get_default_size.apply(this, arguments); }
            },
            "getDefaultWidget": {
              "value": function () { return this.get_default_widget.apply(this, arguments); }
            },
            "getDeletable": {
              "value": function () { return this.get_deletable.apply(this, arguments); }
            },
            "getDestroyWithParent": {
              "value": function () { return this.get_destroy_with_parent.apply(this, arguments); }
            },
            "getFocus": {
              "value": function () { return this.get_focus.apply(this, arguments); }
            },
            "getFocusOnMap": {
              "value": function () { return this.get_focus_on_map.apply(this, arguments); }
            },
            "getFocusVisible": {
              "value": function () { return this.get_focus_visible.apply(this, arguments); }
            },
            "getGravity": {
              "value": function () { return this.get_gravity.apply(this, arguments); }
            },
            "getGroup": {
              "value": function () { return this.get_group.apply(this, arguments); }
            },
            "getHasResizeGrip": {
              "value": function () { return this.get_has_resize_grip.apply(this, arguments); }
            },
            "getHideTitlebarWhenMaximized": {
              "value": function () { return this.get_hide_titlebar_when_maximized.apply(this, arguments); }
            },
            "getIcon": {
              "value": function () { return this.get_icon.apply(this, arguments); }
            },
            "getIconList": {
              "value": function () { return this.get_icon_list.apply(this, arguments); }
            },
            "getIconName": {
              "value": function () { return this.get_icon_name.apply(this, arguments); }
            },
            "getMnemonicModifier": {
              "value": function () { return this.get_mnemonic_modifier.apply(this, arguments); }
            },
            "getMnemonicsVisible": {
              "value": function () { return this.get_mnemonics_visible.apply(this, arguments); }
            },
            "getModal": {
              "value": function () { return this.get_modal.apply(this, arguments); }
            },
            "getOpacity": {
              "value": function () { return this.get_opacity.apply(this, arguments); }
            },
            "getPosition": {
              "value": function () { return this.get_position.apply(this, arguments); }
            },
            "getResizable": {
              "value": function () { return this.get_resizable.apply(this, arguments); }
            },
            "getResizeGripArea": {
              "value": function () { return this.get_resize_grip_area.apply(this, arguments); }
            },
            "getRole": {
              "value": function () { return this.get_role.apply(this, arguments); }
            },
            "getScreen": {
              "value": function () { return this.get_screen.apply(this, arguments); }
            },
            "getSize": {
              "value": function () { return this.get_size.apply(this, arguments); }
            },
            "getSkipPagerHint": {
              "value": function () { return this.get_skip_pager_hint.apply(this, arguments); }
            },
            "getSkipTaskbarHint": {
              "value": function () { return this.get_skip_taskbar_hint.apply(this, arguments); }
            },
            "getTitle": {
              "value": function () { return this.get_title.apply(this, arguments); }
            },
            "getTitlebar": {
              "value": function () { return this.get_titlebar.apply(this, arguments); }
            },
            "getTransientFor": {
              "value": function () { return this.get_transient_for.apply(this, arguments); }
            },
            "getTypeHint": {
              "value": function () { return this.get_type_hint.apply(this, arguments); }
            },
            "getUrgencyHint": {
              "value": function () { return this.get_urgency_hint.apply(this, arguments); }
            },
            "getWindowType": {
              "value": function () { return this.get_window_type.apply(this, arguments); }
            },
            "hasGroup": {
              "value": function () { return this.has_group.apply(this, arguments); }
            },
            "hasToplevelFocus": {
              "get": function () { return this.has_toplevel_focus; },
              "set": function (value) { this.has_toplevel_focus = value; }
            },
            "isActive": {
              "get": function () { return this.is_active; },
              "set": function (value) { this.is_active = value; }
            },
            "isMaximized": {
              "get": function () { return this.is_maximized; },
              "set": function (value) { this.is_maximized = value; }
            },
            "mnemonicActivate": {
              "value": function () { return this.mnemonic_activate.apply(this, arguments); }
            },
            "parseGeometry": {
              "value": function () { return this.parse_geometry.apply(this, arguments); }
            },
            "presentWithTime": {
              "value": function () { return this.present_with_time.apply(this, arguments); }
            },
            "propagateKeyEvent": {
              "value": function () { return this.propagate_key_event.apply(this, arguments); }
            },
            "removeAccelGroup": {
              "value": function () { return this.remove_accel_group.apply(this, arguments); }
            },
            "removeMnemonic": {
              "value": function () { return this.remove_mnemonic.apply(this, arguments); }
            },
            "reshowWithInitialSize": {
              "value": function () { return this.reshow_with_initial_size.apply(this, arguments); }
            },
            "resizeGripIsVisible": {
              "value": function () { return this.resize_grip_is_visible.apply(this, arguments); }
            },
            "resizeToGeometry": {
              "value": function () { return this.resize_to_geometry.apply(this, arguments); }
            },
            "setAcceptFocus": {
              "value": function () { return this.set_accept_focus.apply(this, arguments); }
            },
            "setApplication": {
              "value": function () { return this.set_application.apply(this, arguments); }
            },
            "setAttachedTo": {
              "value": function () { return this.set_attached_to.apply(this, arguments); }
            },
            "setDecorated": {
              "value": function () { return this.set_decorated.apply(this, arguments); }
            },
            "setDefault": {
              "value": function () { return this.set_default.apply(this, arguments); }
            },
            "setDefaultGeometry": {
              "value": function () { return this.set_default_geometry.apply(this, arguments); }
            },
            "setDefaultSize": {
              "value": function () { return this.set_default_size.apply(this, arguments); }
            },
            "setDeletable": {
              "value": function () { return this.set_deletable.apply(this, arguments); }
            },
            "setDestroyWithParent": {
              "value": function () { return this.set_destroy_with_parent.apply(this, arguments); }
            },
            "setFocus": {
              "value": function () { return this.set_focus.apply(this, arguments); }
            },
            "setFocusOnMap": {
              "value": function () { return this.set_focus_on_map.apply(this, arguments); }
            },
            "setFocusVisible": {
              "value": function () { return this.set_focus_visible.apply(this, arguments); }
            },
            "setGeometryHints": {
              "value": function () { return this.set_geometry_hints.apply(this, arguments); }
            },
            "setGravity": {
              "value": function () { return this.set_gravity.apply(this, arguments); }
            },
            "setHasResizeGrip": {
              "value": function () { return this.set_has_resize_grip.apply(this, arguments); }
            },
            "setHasUserRefCount": {
              "value": function () { return this.set_has_user_ref_count.apply(this, arguments); }
            },
            "setHideTitlebarWhenMaximized": {
              "value": function () { return this.set_hide_titlebar_when_maximized.apply(this, arguments); }
            },
            "setIcon": {
              "value": function () { return this.set_icon.apply(this, arguments); }
            },
            "setIconFromFile": {
              "value": function () { return this.set_icon_from_file.apply(this, arguments); }
            },
            "setIconList": {
              "value": function () { return this.set_icon_list.apply(this, arguments); }
            },
            "setIconName": {
              "value": function () { return this.set_icon_name.apply(this, arguments); }
            },
            "setKeepAbove": {
              "value": function () { return this.set_keep_above.apply(this, arguments); }
            },
            "setKeepBelow": {
              "value": function () { return this.set_keep_below.apply(this, arguments); }
            },
            "setMnemonicModifier": {
              "value": function () { return this.set_mnemonic_modifier.apply(this, arguments); }
            },
            "setMnemonicsVisible": {
              "value": function () { return this.set_mnemonics_visible.apply(this, arguments); }
            },
            "setModal": {
              "value": function () { return this.set_modal.apply(this, arguments); }
            },
            "setOpacity": {
              "value": function () { return this.set_opacity.apply(this, arguments); }
            },
            "setPosition": {
              "value": function () { return this.set_position.apply(this, arguments); }
            },
            "setResizable": {
              "value": function () { return this.set_resizable.apply(this, arguments); }
            },
            "setRole": {
              "value": function () { return this.set_role.apply(this, arguments); }
            },
            "setScreen": {
              "value": function () { return this.set_screen.apply(this, arguments); }
            },
            "setSkipPagerHint": {
              "value": function () { return this.set_skip_pager_hint.apply(this, arguments); }
            },
            "setSkipTaskbarHint": {
              "value": function () { return this.set_skip_taskbar_hint.apply(this, arguments); }
            },
            "setStartupId": {
              "value": function () { return this.set_startup_id.apply(this, arguments); }
            },
            "setTitle": {
              "value": function () { return this.set_title.apply(this, arguments); }
            },
            "setTitlebar": {
              "value": function () { return this.set_titlebar.apply(this, arguments); }
            },
            "setTransientFor": {
              "value": function () { return this.set_transient_for.apply(this, arguments); }
            },
            "setTypeHint": {
              "value": function () { return this.set_type_hint.apply(this, arguments); }
            },
            "setUrgencyHint": {
              "value": function () { return this.set_urgency_hint.apply(this, arguments); }
            },
            "setWmclass": {
              "value": function () { return this.set_wmclass.apply(this, arguments); }
            },
            "acceptFocus": {
              "get": function () { return this.accept_focus; },
              "set": function (value) { this.accept_focus = value; }
            },
            "attachedTo": {
              "get": function () { return this.attached_to; },
              "set": function (value) { this.attached_to = value; }
            },
            "defaultHeight": {
              "get": function () { return this.default_height; },
              "set": function (value) { this.default_height = value; }
            },
            "defaultWidth": {
              "get": function () { return this.default_width; },
              "set": function (value) { this.default_width = value; }
            },
            "destroyWithParent": {
              "get": function () { return this.destroy_with_parent; },
              "set": function (value) { this.destroy_with_parent = value; }
            },
            "focusOnMap": {
              "get": function () { return this.focus_on_map; },
              "set": function (value) { this.focus_on_map = value; }
            },
            "focusVisible": {
              "get": function () { return this.focus_visible; },
              "set": function (value) { this.focus_visible = value; }
            },
            "hasResizeGrip": {
              "get": function () { return this.has_resize_grip; },
              "set": function (value) { this.has_resize_grip = value; }
            },
            "hideTitlebarWhenMaximized": {
              "get": function () { return this.hide_titlebar_when_maximized; },
              "set": function (value) { this.hide_titlebar_when_maximized = value; }
            },
            "iconName": {
              "get": function () { return this.icon_name; },
              "set": function (value) { this.icon_name = value; }
            },
            "mnemonicsVisible": {
              "get": function () { return this.mnemonics_visible; },
              "set": function (value) { this.mnemonics_visible = value; }
            },
            "resizeGripVisible": {
              "get": function () { return this.resize_grip_visible; },
              "set": function (value) { this.resize_grip_visible = value; }
            },
            "skipPagerHint": {
              "get": function () { return this.skip_pager_hint; },
              "set": function (value) { this.skip_pager_hint = value; }
            },
            "skipTaskbarHint": {
              "get": function () { return this.skip_taskbar_hint; },
              "set": function (value) { this.skip_taskbar_hint = value; }
            },
            "startupId": {
              "get": function () { return this.startup_id; },
              "set": function (value) { this.startup_id = value; }
            },
            "transientFor": {
              "get": function () { return this.transient_for; },
              "set": function (value) { this.transient_for = value; }
            },
            "typeHint": {
              "get": function () { return this.type_hint; },
              "set": function (value) { this.type_hint = value; }
            },
            "urgencyHint": {
              "get": function () { return this.urgency_hint; },
              "set": function (value) { this.urgency_hint = value; }
            },
            "windowPosition": {
              "get": function () { return this.window_position; },
              "set": function (value) { this.window_position = value; }
            }
          },
          "static": {
            "getDefaultIconList": {
              "value": function () { return this.get_default_icon_list.apply(this, arguments); }
            },
            "getDefaultIconName": {
              "value": function () { return this.get_default_icon_name.apply(this, arguments); }
            },
            "listToplevels": {
              "value": function () { return this.list_toplevels.apply(this, arguments); }
            },
            "setAutoStartupNotification": {
              "value": function () { return this.set_auto_startup_notification.apply(this, arguments); }
            },
            "setDefaultIcon": {
              "value": function () { return this.set_default_icon.apply(this, arguments); }
            },
            "setDefaultIconFromFile": {
              "value": function () { return this.set_default_icon_from_file.apply(this, arguments); }
            },
            "setDefaultIconList": {
              "value": function () { return this.set_default_icon_list.apply(this, arguments); }
            },
            "setDefaultIconName": {
              "value": function () { return this.set_default_icon_name.apply(this, arguments); }
            },
            "setInteractiveDebugging": {
              "value": function () { return this.set_interactive_debugging.apply(this, arguments); }
            }
          }
        },
        "WindowAccessible": {
          "prototype": {},
          "static": {}
        },
        "WindowGroup": {
          "prototype": {
            "addWindow": {
              "value": function () { return this.add_window.apply(this, arguments); }
            },
            "getCurrentDeviceGrab": {
              "value": function () { return this.get_current_device_grab.apply(this, arguments); }
            },
            "getCurrentGrab": {
              "value": function () { return this.get_current_grab.apply(this, arguments); }
            },
            "listWindows": {
              "value": function () { return this.list_windows.apply(this, arguments); }
            },
            "removeWindow": {
              "value": function () { return this.remove_window.apply(this, arguments); }
            }
          },
          "static": {}
        }
      },
      "static": {
        "accelGroupsActivate": {
          "value": function () { return this.accel_groups_activate.apply(this, arguments); }
        },
        "accelGroupsFromObject": {
          "value": function () { return this.accel_groups_from_object.apply(this, arguments); }
        },
        "acceleratorGetDefaultModMask": {
          "value": function () { return this.accelerator_get_default_mod_mask.apply(this, arguments); }
        },
        "acceleratorGetLabel": {
          "value": function () { return this.accelerator_get_label.apply(this, arguments); }
        },
        "acceleratorGetLabelWithKeycode": {
          "value": function () { return this.accelerator_get_label_with_keycode.apply(this, arguments); }
        },
        "acceleratorName": {
          "value": function () { return this.accelerator_name.apply(this, arguments); }
        },
        "acceleratorNameWithKeycode": {
          "value": function () { return this.accelerator_name_with_keycode.apply(this, arguments); }
        },
        "acceleratorParse": {
          "value": function () { return this.accelerator_parse.apply(this, arguments); }
        },
        "acceleratorParseWithKeycode": {
          "value": function () { return this.accelerator_parse_with_keycode.apply(this, arguments); }
        },
        "acceleratorSetDefaultModMask": {
          "value": function () { return this.accelerator_set_default_mod_mask.apply(this, arguments); }
        },
        "acceleratorValid": {
          "value": function () { return this.accelerator_valid.apply(this, arguments); }
        },
        "alternativeDialogButtonOrder": {
          "value": function () { return this.alternative_dialog_button_order.apply(this, arguments); }
        },
        "bindingEntryAddSignalFromString": {
          "value": function () { return this.binding_entry_add_signal_from_string.apply(this, arguments); }
        },
        "bindingEntryAddSignall": {
          "value": function () { return this.binding_entry_add_signall.apply(this, arguments); }
        },
        "bindingEntryRemove": {
          "value": function () { return this.binding_entry_remove.apply(this, arguments); }
        },
        "bindingEntrySkip": {
          "value": function () { return this.binding_entry_skip.apply(this, arguments); }
        },
        "bindingSetByClass": {
          "value": function () { return this.binding_set_by_class.apply(this, arguments); }
        },
        "bindingSetFind": {
          "value": function () { return this.binding_set_find.apply(this, arguments); }
        },
        "bindingSetNew": {
          "value": function () { return this.binding_set_new.apply(this, arguments); }
        },
        "bindingsActivate": {
          "value": function () { return this.bindings_activate.apply(this, arguments); }
        },
        "bindingsActivateEvent": {
          "value": function () { return this.bindings_activate_event.apply(this, arguments); }
        },
        "builderErrorQuark": {
          "value": function () { return this.builder_error_quark.apply(this, arguments); }
        },
        "cairoShouldDrawWindow": {
          "value": function () { return this.cairo_should_draw_window.apply(this, arguments); }
        },
        "cairoTransformToWindow": {
          "value": function () { return this.cairo_transform_to_window.apply(this, arguments); }
        },
        "checkVersion": {
          "value": function () { return this.check_version.apply(this, arguments); }
        },
        "cssProviderErrorQuark": {
          "value": function () { return this.css_provider_error_quark.apply(this, arguments); }
        },
        "deviceGrabAdd": {
          "value": function () { return this.device_grab_add.apply(this, arguments); }
        },
        "deviceGrabRemove": {
          "value": function () { return this.device_grab_remove.apply(this, arguments); }
        },
        "disableSetlocale": {
          "value": function () { return this.disable_setlocale.apply(this, arguments); }
        },
        "distributeNaturalAllocation": {
          "value": function () { return this.distribute_natural_allocation.apply(this, arguments); }
        },
        "dragCancel": {
          "value": function () { return this.drag_cancel.apply(this, arguments); }
        },
        "dragFinish": {
          "value": function () { return this.drag_finish.apply(this, arguments); }
        },
        "dragGetSourceWidget": {
          "value": function () { return this.drag_get_source_widget.apply(this, arguments); }
        },
        "dragSetIconDefault": {
          "value": function () { return this.drag_set_icon_default.apply(this, arguments); }
        },
        "dragSetIconGicon": {
          "value": function () { return this.drag_set_icon_gicon.apply(this, arguments); }
        },
        "dragSetIconName": {
          "value": function () { return this.drag_set_icon_name.apply(this, arguments); }
        },
        "dragSetIconPixbuf": {
          "value": function () { return this.drag_set_icon_pixbuf.apply(this, arguments); }
        },
        "dragSetIconStock": {
          "value": function () { return this.drag_set_icon_stock.apply(this, arguments); }
        },
        "dragSetIconSurface": {
          "value": function () { return this.drag_set_icon_surface.apply(this, arguments); }
        },
        "dragSetIconWidget": {
          "value": function () { return this.drag_set_icon_widget.apply(this, arguments); }
        },
        "drawInsertionCursor": {
          "value": function () { return this.draw_insertion_cursor.apply(this, arguments); }
        },
        "eventsPending": {
          "value": function () { return this.events_pending.apply(this, arguments); }
        },
        "fileChooserErrorQuark": {
          "value": function () { return this.file_chooser_error_quark.apply(this, arguments); }
        },
        "getBinaryAge": {
          "value": function () { return this.get_binary_age.apply(this, arguments); }
        },
        "getCurrentEvent": {
          "value": function () { return this.get_current_event.apply(this, arguments); }
        },
        "getCurrentEventDevice": {
          "value": function () { return this.get_current_event_device.apply(this, arguments); }
        },
        "getCurrentEventState": {
          "value": function () { return this.get_current_event_state.apply(this, arguments); }
        },
        "getCurrentEventTime": {
          "value": function () { return this.get_current_event_time.apply(this, arguments); }
        },
        "getDebugFlags": {
          "value": function () { return this.get_debug_flags.apply(this, arguments); }
        },
        "getDefaultLanguage": {
          "value": function () { return this.get_default_language.apply(this, arguments); }
        },
        "getEventWidget": {
          "value": function () { return this.get_event_widget.apply(this, arguments); }
        },
        "getInterfaceAge": {
          "value": function () { return this.get_interface_age.apply(this, arguments); }
        },
        "getLocaleDirection": {
          "value": function () { return this.get_locale_direction.apply(this, arguments); }
        },
        "getMajorVersion": {
          "value": function () { return this.get_major_version.apply(this, arguments); }
        },
        "getMicroVersion": {
          "value": function () { return this.get_micro_version.apply(this, arguments); }
        },
        "getMinorVersion": {
          "value": function () { return this.get_minor_version.apply(this, arguments); }
        },
        "getOptionGroup": {
          "value": function () { return this.get_option_group.apply(this, arguments); }
        },
        "grabGetCurrent": {
          "value": function () { return this.grab_get_current.apply(this, arguments); }
        },
        "iconSizeFromName": {
          "value": function () { return this.icon_size_from_name.apply(this, arguments); }
        },
        "iconSizeGetName": {
          "value": function () { return this.icon_size_get_name.apply(this, arguments); }
        },
        "iconSizeLookup": {
          "value": function () { return this.icon_size_lookup.apply(this, arguments); }
        },
        "iconSizeLookupForSettings": {
          "value": function () { return this.icon_size_lookup_for_settings.apply(this, arguments); }
        },
        "iconSizeRegister": {
          "value": function () { return this.icon_size_register.apply(this, arguments); }
        },
        "iconSizeRegisterAlias": {
          "value": function () { return this.icon_size_register_alias.apply(this, arguments); }
        },
        "iconThemeErrorQuark": {
          "value": function () { return this.icon_theme_error_quark.apply(this, arguments); }
        },
        "initCheck": {
          "value": function () { return this.init_check.apply(this, arguments); }
        },
        "initWithArgs": {
          "value": function () { return this.init_with_args.apply(this, arguments); }
        },
        "keySnooperInstall": {
          "value": function () { return this.key_snooper_install.apply(this, arguments); }
        },
        "keySnooperRemove": {
          "value": function () { return this.key_snooper_remove.apply(this, arguments); }
        },
        "mainDoEvent": {
          "value": function () { return this.main_do_event.apply(this, arguments); }
        },
        "mainIteration": {
          "value": function () { return this.main_iteration.apply(this, arguments); }
        },
        "mainIterationDo": {
          "value": function () { return this.main_iteration_do.apply(this, arguments); }
        },
        "mainLevel": {
          "value": function () { return this.main_level.apply(this, arguments); }
        },
        "mainQuit": {
          "value": function () { return this.main_quit.apply(this, arguments); }
        },
        "paintArrow": {
          "value": function () { return this.paint_arrow.apply(this, arguments); }
        },
        "paintBox": {
          "value": function () { return this.paint_box.apply(this, arguments); }
        },
        "paintBoxGap": {
          "value": function () { return this.paint_box_gap.apply(this, arguments); }
        },
        "paintCheck": {
          "value": function () { return this.paint_check.apply(this, arguments); }
        },
        "paintDiamond": {
          "value": function () { return this.paint_diamond.apply(this, arguments); }
        },
        "paintExpander": {
          "value": function () { return this.paint_expander.apply(this, arguments); }
        },
        "paintExtension": {
          "value": function () { return this.paint_extension.apply(this, arguments); }
        },
        "paintFlatBox": {
          "value": function () { return this.paint_flat_box.apply(this, arguments); }
        },
        "paintFocus": {
          "value": function () { return this.paint_focus.apply(this, arguments); }
        },
        "paintHandle": {
          "value": function () { return this.paint_handle.apply(this, arguments); }
        },
        "paintHline": {
          "value": function () { return this.paint_hline.apply(this, arguments); }
        },
        "paintLayout": {
          "value": function () { return this.paint_layout.apply(this, arguments); }
        },
        "paintOption": {
          "value": function () { return this.paint_option.apply(this, arguments); }
        },
        "paintResizeGrip": {
          "value": function () { return this.paint_resize_grip.apply(this, arguments); }
        },
        "paintShadow": {
          "value": function () { return this.paint_shadow.apply(this, arguments); }
        },
        "paintShadowGap": {
          "value": function () { return this.paint_shadow_gap.apply(this, arguments); }
        },
        "paintSlider": {
          "value": function () { return this.paint_slider.apply(this, arguments); }
        },
        "paintSpinner": {
          "value": function () { return this.paint_spinner.apply(this, arguments); }
        },
        "paintTab": {
          "value": function () { return this.paint_tab.apply(this, arguments); }
        },
        "paintVline": {
          "value": function () { return this.paint_vline.apply(this, arguments); }
        },
        "paperSizeGetDefault": {
          "value": function () { return this.paper_size_get_default.apply(this, arguments); }
        },
        "paperSizeGetPaperSizes": {
          "value": function () { return this.paper_size_get_paper_sizes.apply(this, arguments); }
        },
        "parseArgs": {
          "value": function () { return this.parse_args.apply(this, arguments); }
        },
        "printErrorQuark": {
          "value": function () { return this.print_error_quark.apply(this, arguments); }
        },
        "printRunPageSetupDialog": {
          "value": function () { return this.print_run_page_setup_dialog.apply(this, arguments); }
        },
        "printRunPageSetupDialogAsync": {
          "value": function () { return this.print_run_page_setup_dialog_async.apply(this, arguments); }
        },
        "propagateEvent": {
          "value": function () { return this.propagate_event.apply(this, arguments); }
        },
        "rcAddDefaultFile": {
          "value": function () { return this.rc_add_default_file.apply(this, arguments); }
        },
        "rcFindModuleInPath": {
          "value": function () { return this.rc_find_module_in_path.apply(this, arguments); }
        },
        "rcFindPixmapInPath": {
          "value": function () { return this.rc_find_pixmap_in_path.apply(this, arguments); }
        },
        "rcGetDefaultFiles": {
          "value": function () { return this.rc_get_default_files.apply(this, arguments); }
        },
        "rcGetImModuleFile": {
          "value": function () { return this.rc_get_im_module_file.apply(this, arguments); }
        },
        "rcGetImModulePath": {
          "value": function () { return this.rc_get_im_module_path.apply(this, arguments); }
        },
        "rcGetModuleDir": {
          "value": function () { return this.rc_get_module_dir.apply(this, arguments); }
        },
        "rcGetStyle": {
          "value": function () { return this.rc_get_style.apply(this, arguments); }
        },
        "rcGetStyleByPaths": {
          "value": function () { return this.rc_get_style_by_paths.apply(this, arguments); }
        },
        "rcGetThemeDir": {
          "value": function () { return this.rc_get_theme_dir.apply(this, arguments); }
        },
        "rcParse": {
          "value": function () { return this.rc_parse.apply(this, arguments); }
        },
        "rcParseColor": {
          "value": function () { return this.rc_parse_color.apply(this, arguments); }
        },
        "rcParseColorFull": {
          "value": function () { return this.rc_parse_color_full.apply(this, arguments); }
        },
        "rcParsePriority": {
          "value": function () { return this.rc_parse_priority.apply(this, arguments); }
        },
        "rcParseState": {
          "value": function () { return this.rc_parse_state.apply(this, arguments); }
        },
        "rcParseString": {
          "value": function () { return this.rc_parse_string.apply(this, arguments); }
        },
        "rcPropertyParseBorder": {
          "value": function () { return this.rc_property_parse_border.apply(this, arguments); }
        },
        "rcPropertyParseColor": {
          "value": function () { return this.rc_property_parse_color.apply(this, arguments); }
        },
        "rcPropertyParseEnum": {
          "value": function () { return this.rc_property_parse_enum.apply(this, arguments); }
        },
        "rcPropertyParseFlags": {
          "value": function () { return this.rc_property_parse_flags.apply(this, arguments); }
        },
        "rcPropertyParseRequisition": {
          "value": function () { return this.rc_property_parse_requisition.apply(this, arguments); }
        },
        "rcReparseAll": {
          "value": function () { return this.rc_reparse_all.apply(this, arguments); }
        },
        "rcReparseAllForSettings": {
          "value": function () { return this.rc_reparse_all_for_settings.apply(this, arguments); }
        },
        "rcResetStyles": {
          "value": function () { return this.rc_reset_styles.apply(this, arguments); }
        },
        "rcScannerNew": {
          "value": function () { return this.rc_scanner_new.apply(this, arguments); }
        },
        "rcSetDefaultFiles": {
          "value": function () { return this.rc_set_default_files.apply(this, arguments); }
        },
        "recentChooserErrorQuark": {
          "value": function () { return this.recent_chooser_error_quark.apply(this, arguments); }
        },
        "recentManagerErrorQuark": {
          "value": function () { return this.recent_manager_error_quark.apply(this, arguments); }
        },
        "renderActivity": {
          "value": function () { return this.render_activity.apply(this, arguments); }
        },
        "renderArrow": {
          "value": function () { return this.render_arrow.apply(this, arguments); }
        },
        "renderBackground": {
          "value": function () { return this.render_background.apply(this, arguments); }
        },
        "renderCheck": {
          "value": function () { return this.render_check.apply(this, arguments); }
        },
        "renderExpander": {
          "value": function () { return this.render_expander.apply(this, arguments); }
        },
        "renderExtension": {
          "value": function () { return this.render_extension.apply(this, arguments); }
        },
        "renderFocus": {
          "value": function () { return this.render_focus.apply(this, arguments); }
        },
        "renderFrame": {
          "value": function () { return this.render_frame.apply(this, arguments); }
        },
        "renderFrameGap": {
          "value": function () { return this.render_frame_gap.apply(this, arguments); }
        },
        "renderHandle": {
          "value": function () { return this.render_handle.apply(this, arguments); }
        },
        "renderIcon": {
          "value": function () { return this.render_icon.apply(this, arguments); }
        },
        "renderIconPixbuf": {
          "value": function () { return this.render_icon_pixbuf.apply(this, arguments); }
        },
        "renderIconSurface": {
          "value": function () { return this.render_icon_surface.apply(this, arguments); }
        },
        "renderInsertionCursor": {
          "value": function () { return this.render_insertion_cursor.apply(this, arguments); }
        },
        "renderLayout": {
          "value": function () { return this.render_layout.apply(this, arguments); }
        },
        "renderLine": {
          "value": function () { return this.render_line.apply(this, arguments); }
        },
        "renderOption": {
          "value": function () { return this.render_option.apply(this, arguments); }
        },
        "renderSlider": {
          "value": function () { return this.render_slider.apply(this, arguments); }
        },
        "rgbToHsv": {
          "value": function () { return this.rgb_to_hsv.apply(this, arguments); }
        },
        "selectionAddTarget": {
          "value": function () { return this.selection_add_target.apply(this, arguments); }
        },
        "selectionAddTargets": {
          "value": function () { return this.selection_add_targets.apply(this, arguments); }
        },
        "selectionClearTargets": {
          "value": function () { return this.selection_clear_targets.apply(this, arguments); }
        },
        "selectionConvert": {
          "value": function () { return this.selection_convert.apply(this, arguments); }
        },
        "selectionOwnerSet": {
          "value": function () { return this.selection_owner_set.apply(this, arguments); }
        },
        "selectionOwnerSetForDisplay": {
          "value": function () { return this.selection_owner_set_for_display.apply(this, arguments); }
        },
        "selectionRemoveAll": {
          "value": function () { return this.selection_remove_all.apply(this, arguments); }
        },
        "setDebugFlags": {
          "value": function () { return this.set_debug_flags.apply(this, arguments); }
        },
        "showAboutDialog": {
          "value": function () { return this.show_about_dialog.apply(this, arguments); }
        },
        "showUri": {
          "value": function () { return this.show_uri.apply(this, arguments); }
        },
        "stockAdd": {
          "value": function () { return this.stock_add.apply(this, arguments); }
        },
        "stockAddStatic": {
          "value": function () { return this.stock_add_static.apply(this, arguments); }
        },
        "stockListIds": {
          "value": function () { return this.stock_list_ids.apply(this, arguments); }
        },
        "stockLookup": {
          "value": function () { return this.stock_lookup.apply(this, arguments); }
        },
        "stockSetTranslateFunc": {
          "value": function () { return this.stock_set_translate_func.apply(this, arguments); }
        },
        "targetTableFree": {
          "value": function () { return this.target_table_free.apply(this, arguments); }
        },
        "targetTableNewFromList": {
          "value": function () { return this.target_table_new_from_list.apply(this, arguments); }
        },
        "targetsIncludeImage": {
          "value": function () { return this.targets_include_image.apply(this, arguments); }
        },
        "targetsIncludeRichText": {
          "value": function () { return this.targets_include_rich_text.apply(this, arguments); }
        },
        "targetsIncludeText": {
          "value": function () { return this.targets_include_text.apply(this, arguments); }
        },
        "targetsIncludeUri": {
          "value": function () { return this.targets_include_uri.apply(this, arguments); }
        },
        "testCreateSimpleWindow": {
          "value": function () { return this.test_create_simple_window.apply(this, arguments); }
        },
        "testCreateWidget": {
          "value": function () { return this.test_create_widget.apply(this, arguments); }
        },
        "testDisplayButtonWindow": {
          "value": function () { return this.test_display_button_window.apply(this, arguments); }
        },
        "testFindLabel": {
          "value": function () { return this.test_find_label.apply(this, arguments); }
        },
        "testFindSibling": {
          "value": function () { return this.test_find_sibling.apply(this, arguments); }
        },
        "testFindWidget": {
          "value": function () { return this.test_find_widget.apply(this, arguments); }
        },
        "testInit": {
          "value": function () { return this.test_init.apply(this, arguments); }
        },
        "testListAllTypes": {
          "value": function () { return this.test_list_all_types.apply(this, arguments); }
        },
        "testRegisterAllTypes": {
          "value": function () { return this.test_register_all_types.apply(this, arguments); }
        },
        "testSliderGetValue": {
          "value": function () { return this.test_slider_get_value.apply(this, arguments); }
        },
        "testSliderSetPerc": {
          "value": function () { return this.test_slider_set_perc.apply(this, arguments); }
        },
        "testSpinButtonClick": {
          "value": function () { return this.test_spin_button_click.apply(this, arguments); }
        },
        "testTextGet": {
          "value": function () { return this.test_text_get.apply(this, arguments); }
        },
        "testTextSet": {
          "value": function () { return this.test_text_set.apply(this, arguments); }
        },
        "testWidgetClick": {
          "value": function () { return this.test_widget_click.apply(this, arguments); }
        },
        "testWidgetSendKey": {
          "value": function () { return this.test_widget_send_key.apply(this, arguments); }
        },
        "testWidgetWaitForDraw": {
          "value": function () { return this.test_widget_wait_for_draw.apply(this, arguments); }
        },
        "treeGetRowDragData": {
          "value": function () { return this.tree_get_row_drag_data.apply(this, arguments); }
        },
        "treeRowReferenceDeleted": {
          "value": function () { return this.tree_row_reference_deleted.apply(this, arguments); }
        },
        "treeRowReferenceInserted": {
          "value": function () { return this.tree_row_reference_inserted.apply(this, arguments); }
        },
        "treeRowReferenceReordered": {
          "value": function () { return this.tree_row_reference_reordered.apply(this, arguments); }
        },
        "treeSetRowDragData": {
          "value": function () { return this.tree_set_row_drag_data.apply(this, arguments); }
        }
      }
    },
    "GtkClutter": {
      "class": {
        "Actor": {
          "prototype": {
            "getContents": {
              "value": function () { return this.get_contents.apply(this, arguments); }
            },
            "getWidget": {
              "value": function () { return this.get_widget.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Embed": {
          "prototype": {
            "getStage": {
              "value": function () { return this.get_stage.apply(this, arguments); }
            },
            "getUseLayoutSize": {
              "value": function () { return this.get_use_layout_size.apply(this, arguments); }
            },
            "setUseLayoutSize": {
              "value": function () { return this.set_use_layout_size.apply(this, arguments); }
            },
            "useLayoutSize": {
              "get": function () { return this.use_layout_size; },
              "set": function (value) { this.use_layout_size = value; }
            }
          },
          "static": {}
        },
        "Texture": {
          "prototype": {
            "setFromIconName": {
              "value": function () { return this.set_from_icon_name.apply(this, arguments); }
            },
            "setFromPixbuf": {
              "value": function () { return this.set_from_pixbuf.apply(this, arguments); }
            },
            "setFromStock": {
              "value": function () { return this.set_from_stock.apply(this, arguments); }
            }
          },
          "static": {
            "errorQuark": {
              "value": function () { return this.error_quark.apply(this, arguments); }
            }
          }
        },
        "Window": {
          "prototype": {
            "getStage": {
              "value": function () { return this.get_stage.apply(this, arguments); }
            }
          },
          "static": {}
        }
      },
      "static": {
        "getOptionGroup": {
          "value": function () { return this.get_option_group.apply(this, arguments); }
        },
        "initWithArgs": {
          "value": function () { return this.init_with_args.apply(this, arguments); }
        }
      }
    },
    "GtkSource": {
      "class": {
        "Buffer": {
          "prototype": {
            "backwardIterToSourceMark": {
              "value": function () { return this.backward_iter_to_source_mark.apply(this, arguments); }
            },
            "beginNotUndoableAction": {
              "value": function () { return this.begin_not_undoable_action.apply(this, arguments); }
            },
            "canRedo": {
              "get": function () { return this.can_redo; },
              "set": function (value) { this.can_redo = value; }
            },
            "canUndo": {
              "get": function () { return this.can_undo; },
              "set": function (value) { this.can_undo = value; }
            },
            "changeCase": {
              "value": function () { return this.change_case.apply(this, arguments); }
            },
            "createSourceMark": {
              "value": function () { return this.create_source_mark.apply(this, arguments); }
            },
            "createSourceTag": {
              "value": function () { return this.create_source_tag.apply(this, arguments); }
            },
            "endNotUndoableAction": {
              "value": function () { return this.end_not_undoable_action.apply(this, arguments); }
            },
            "ensureHighlight": {
              "value": function () { return this.ensure_highlight.apply(this, arguments); }
            },
            "forwardIterToSourceMark": {
              "value": function () { return this.forward_iter_to_source_mark.apply(this, arguments); }
            },
            "getContextClassesAtIter": {
              "value": function () { return this.get_context_classes_at_iter.apply(this, arguments); }
            },
            "getHighlightMatchingBrackets": {
              "value": function () { return this.get_highlight_matching_brackets.apply(this, arguments); }
            },
            "getHighlightSyntax": {
              "value": function () { return this.get_highlight_syntax.apply(this, arguments); }
            },
            "getImplicitTrailingNewline": {
              "value": function () { return this.get_implicit_trailing_newline.apply(this, arguments); }
            },
            "getLanguage": {
              "value": function () { return this.get_language.apply(this, arguments); }
            },
            "getMaxUndoLevels": {
              "value": function () { return this.get_max_undo_levels.apply(this, arguments); }
            },
            "getSourceMarksAtIter": {
              "value": function () { return this.get_source_marks_at_iter.apply(this, arguments); }
            },
            "getSourceMarksAtLine": {
              "value": function () { return this.get_source_marks_at_line.apply(this, arguments); }
            },
            "getStyleScheme": {
              "value": function () { return this.get_style_scheme.apply(this, arguments); }
            },
            "getUndoManager": {
              "value": function () { return this.get_undo_manager.apply(this, arguments); }
            },
            "iterBackwardToContextClassToggle": {
              "value": function () { return this.iter_backward_to_context_class_toggle.apply(this, arguments); }
            },
            "iterForwardToContextClassToggle": {
              "value": function () { return this.iter_forward_to_context_class_toggle.apply(this, arguments); }
            },
            "iterHasContextClass": {
              "value": function () { return this.iter_has_context_class.apply(this, arguments); }
            },
            "joinLines": {
              "value": function () { return this.join_lines.apply(this, arguments); }
            },
            "removeSourceMarks": {
              "value": function () { return this.remove_source_marks.apply(this, arguments); }
            },
            "setHighlightMatchingBrackets": {
              "value": function () { return this.set_highlight_matching_brackets.apply(this, arguments); }
            },
            "setHighlightSyntax": {
              "value": function () { return this.set_highlight_syntax.apply(this, arguments); }
            },
            "setImplicitTrailingNewline": {
              "value": function () { return this.set_implicit_trailing_newline.apply(this, arguments); }
            },
            "setLanguage": {
              "value": function () { return this.set_language.apply(this, arguments); }
            },
            "setMaxUndoLevels": {
              "value": function () { return this.set_max_undo_levels.apply(this, arguments); }
            },
            "setStyleScheme": {
              "value": function () { return this.set_style_scheme.apply(this, arguments); }
            },
            "setUndoManager": {
              "value": function () { return this.set_undo_manager.apply(this, arguments); }
            },
            "sortLines": {
              "value": function () { return this.sort_lines.apply(this, arguments); }
            },
            "highlightMatchingBrackets": {
              "get": function () { return this.highlight_matching_brackets; },
              "set": function (value) { this.highlight_matching_brackets = value; }
            },
            "highlightSyntax": {
              "get": function () { return this.highlight_syntax; },
              "set": function (value) { this.highlight_syntax = value; }
            },
            "implicitTrailingNewline": {
              "get": function () { return this.implicit_trailing_newline; },
              "set": function (value) { this.implicit_trailing_newline = value; }
            },
            "maxUndoLevels": {
              "get": function () { return this.max_undo_levels; },
              "set": function (value) { this.max_undo_levels = value; }
            },
            "styleScheme": {
              "get": function () { return this.style_scheme; },
              "set": function (value) { this.style_scheme = value; }
            },
            "undoManager": {
              "get": function () { return this.undo_manager; },
              "set": function (value) { this.undo_manager = value; }
            }
          },
          "static": {}
        },
        "Completion": {
          "prototype": {
            "addProvider": {
              "value": function () { return this.add_provider.apply(this, arguments); }
            },
            "blockInteractive": {
              "value": function () { return this.block_interactive.apply(this, arguments); }
            },
            "createContext": {
              "value": function () { return this.create_context.apply(this, arguments); }
            },
            "getInfoWindow": {
              "value": function () { return this.get_info_window.apply(this, arguments); }
            },
            "getProviders": {
              "value": function () { return this.get_providers.apply(this, arguments); }
            },
            "getView": {
              "value": function () { return this.get_view.apply(this, arguments); }
            },
            "moveWindow": {
              "value": function () { return this.move_window.apply(this, arguments); }
            },
            "removeProvider": {
              "value": function () { return this.remove_provider.apply(this, arguments); }
            },
            "unblockInteractive": {
              "value": function () { return this.unblock_interactive.apply(this, arguments); }
            },
            "autoCompleteDelay": {
              "get": function () { return this.auto_complete_delay; },
              "set": function (value) { this.auto_complete_delay = value; }
            },
            "proposalPageSize": {
              "get": function () { return this.proposal_page_size; },
              "set": function (value) { this.proposal_page_size = value; }
            },
            "providerPageSize": {
              "get": function () { return this.provider_page_size; },
              "set": function (value) { this.provider_page_size = value; }
            },
            "rememberInfoVisibility": {
              "get": function () { return this.remember_info_visibility; },
              "set": function (value) { this.remember_info_visibility = value; }
            },
            "selectOnShow": {
              "get": function () { return this.select_on_show; },
              "set": function (value) { this.select_on_show = value; }
            },
            "showHeaders": {
              "get": function () { return this.show_headers; },
              "set": function (value) { this.show_headers = value; }
            },
            "showIcons": {
              "get": function () { return this.show_icons; },
              "set": function (value) { this.show_icons = value; }
            }
          },
          "static": {}
        },
        "CompletionContext": {
          "prototype": {
            "addProposals": {
              "value": function () { return this.add_proposals.apply(this, arguments); }
            },
            "getActivation": {
              "value": function () { return this.get_activation.apply(this, arguments); }
            },
            "getIter": {
              "value": function () { return this.get_iter.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "CompletionInfo": {
          "prototype": {
            "getWidget": {
              "value": function () { return this.get_widget.apply(this, arguments); }
            },
            "moveToIter": {
              "value": function () { return this.move_to_iter.apply(this, arguments); }
            },
            "setWidget": {
              "value": function () { return this.set_widget.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "CompletionItem": {
          "prototype": {
            "iconName": {
              "get": function () { return this.icon_name; },
              "set": function (value) { this.icon_name = value; }
            }
          },
          "static": {}
        },
        "CompletionWords": {
          "prototype": {
            "interactiveDelay": {
              "get": function () { return this.interactive_delay; },
              "set": function (value) { this.interactive_delay = value; }
            },
            "minimumWordSize": {
              "get": function () { return this.minimum_word_size; },
              "set": function (value) { this.minimum_word_size = value; }
            },
            "proposalsBatchSize": {
              "get": function () { return this.proposals_batch_size; },
              "set": function (value) { this.proposals_batch_size = value; }
            },
            "scanBatchSize": {
              "get": function () { return this.scan_batch_size; },
              "set": function (value) { this.scan_batch_size = value; }
            }
          },
          "static": {}
        },
        "File": {
          "prototype": {
            "checkFileOnDisk": {
              "value": function () { return this.check_file_on_disk.apply(this, arguments); }
            },
            "getCompressionType": {
              "value": function () { return this.get_compression_type.apply(this, arguments); }
            },
            "getEncoding": {
              "value": function () { return this.get_encoding.apply(this, arguments); }
            },
            "getLocation": {
              "value": function () { return this.get_location.apply(this, arguments); }
            },
            "getNewlineType": {
              "value": function () { return this.get_newline_type.apply(this, arguments); }
            },
            "isDeleted": {
              "value": function () { return this.is_deleted.apply(this, arguments); }
            },
            "isExternallyModified": {
              "value": function () { return this.is_externally_modified.apply(this, arguments); }
            },
            "isLocal": {
              "value": function () { return this.is_local.apply(this, arguments); }
            },
            "isReadonly": {
              "value": function () { return this.is_readonly.apply(this, arguments); }
            },
            "setLocation": {
              "value": function () { return this.set_location.apply(this, arguments); }
            },
            "setMountOperationFactory": {
              "value": function () { return this.set_mount_operation_factory.apply(this, arguments); }
            },
            "compressionType": {
              "get": function () { return this.compression_type; },
              "set": function (value) { this.compression_type = value; }
            },
            "newlineType": {
              "get": function () { return this.newline_type; },
              "set": function (value) { this.newline_type = value; }
            },
            "readOnly": {
              "get": function () { return this.read_only; },
              "set": function (value) { this.read_only = value; }
            }
          },
          "static": {}
        },
        "FileLoader": {
          "prototype": {
            "getBuffer": {
              "value": function () { return this.get_buffer.apply(this, arguments); }
            },
            "getCompressionType": {
              "value": function () { return this.get_compression_type.apply(this, arguments); }
            },
            "getEncoding": {
              "value": function () { return this.get_encoding.apply(this, arguments); }
            },
            "getFile": {
              "value": function () { return this.get_file.apply(this, arguments); }
            },
            "getInputStream": {
              "value": function () { return this.get_input_stream.apply(this, arguments); }
            },
            "getLocation": {
              "value": function () { return this.get_location.apply(this, arguments); }
            },
            "getNewlineType": {
              "value": function () { return this.get_newline_type.apply(this, arguments); }
            },
            "loadAsync": {
              "value": function () { return this.load_async.apply(this, arguments); }
            },
            "loadFinish": {
              "value": function () { return this.load_finish.apply(this, arguments); }
            },
            "setCandidateEncodings": {
              "value": function () { return this.set_candidate_encodings.apply(this, arguments); }
            },
            "inputStream": {
              "get": function () { return this.input_stream; },
              "set": function (value) { this.input_stream = value; }
            }
          },
          "static": {}
        },
        "FileSaver": {
          "prototype": {
            "getBuffer": {
              "value": function () { return this.get_buffer.apply(this, arguments); }
            },
            "getCompressionType": {
              "value": function () { return this.get_compression_type.apply(this, arguments); }
            },
            "getEncoding": {
              "value": function () { return this.get_encoding.apply(this, arguments); }
            },
            "getFile": {
              "value": function () { return this.get_file.apply(this, arguments); }
            },
            "getFlags": {
              "value": function () { return this.get_flags.apply(this, arguments); }
            },
            "getLocation": {
              "value": function () { return this.get_location.apply(this, arguments); }
            },
            "getNewlineType": {
              "value": function () { return this.get_newline_type.apply(this, arguments); }
            },
            "saveAsync": {
              "value": function () { return this.save_async.apply(this, arguments); }
            },
            "saveFinish": {
              "value": function () { return this.save_finish.apply(this, arguments); }
            },
            "setCompressionType": {
              "value": function () { return this.set_compression_type.apply(this, arguments); }
            },
            "setEncoding": {
              "value": function () { return this.set_encoding.apply(this, arguments); }
            },
            "setFlags": {
              "value": function () { return this.set_flags.apply(this, arguments); }
            },
            "setNewlineType": {
              "value": function () { return this.set_newline_type.apply(this, arguments); }
            },
            "compressionType": {
              "get": function () { return this.compression_type; },
              "set": function (value) { this.compression_type = value; }
            },
            "newlineType": {
              "get": function () { return this.newline_type; },
              "set": function (value) { this.newline_type = value; }
            }
          },
          "static": {}
        },
        "Gutter": {
          "prototype": {
            "getPadding": {
              "value": function () { return this.get_padding.apply(this, arguments); }
            },
            "getRendererAtPos": {
              "value": function () { return this.get_renderer_at_pos.apply(this, arguments); }
            },
            "getWindow": {
              "value": function () { return this.get_window.apply(this, arguments); }
            },
            "queueDraw": {
              "value": function () { return this.queue_draw.apply(this, arguments); }
            },
            "setPadding": {
              "value": function () { return this.set_padding.apply(this, arguments); }
            },
            "windowType": {
              "get": function () { return this.window_type; },
              "set": function (value) { this.window_type = value; }
            }
          },
          "static": {}
        },
        "GutterRenderer": {
          "prototype": {
            "getAlignment": {
              "value": function () { return this.get_alignment.apply(this, arguments); }
            },
            "getAlignmentMode": {
              "value": function () { return this.get_alignment_mode.apply(this, arguments); }
            },
            "getBackground": {
              "value": function () { return this.get_background.apply(this, arguments); }
            },
            "getPadding": {
              "value": function () { return this.get_padding.apply(this, arguments); }
            },
            "getSize": {
              "value": function () { return this.get_size.apply(this, arguments); }
            },
            "getView": {
              "value": function () { return this.get_view.apply(this, arguments); }
            },
            "getVisible": {
              "value": function () { return this.get_visible.apply(this, arguments); }
            },
            "getWindowType": {
              "value": function () { return this.get_window_type.apply(this, arguments); }
            },
            "queryActivatable": {
              "value": function () { return this.query_activatable.apply(this, arguments); }
            },
            "queryData": {
              "value": function () { return this.query_data.apply(this, arguments); }
            },
            "queryTooltip": {
              "value": function () { return this.query_tooltip.apply(this, arguments); }
            },
            "queueDraw": {
              "value": function () { return this.queue_draw.apply(this, arguments); }
            },
            "setAlignment": {
              "value": function () { return this.set_alignment.apply(this, arguments); }
            },
            "setAlignmentMode": {
              "value": function () { return this.set_alignment_mode.apply(this, arguments); }
            },
            "setBackground": {
              "value": function () { return this.set_background.apply(this, arguments); }
            },
            "setPadding": {
              "value": function () { return this.set_padding.apply(this, arguments); }
            },
            "setSize": {
              "value": function () { return this.set_size.apply(this, arguments); }
            },
            "setVisible": {
              "value": function () { return this.set_visible.apply(this, arguments); }
            },
            "alignmentMode": {
              "get": function () { return this.alignment_mode; },
              "set": function (value) { this.alignment_mode = value; }
            },
            "backgroundRgba": {
              "get": function () { return this.background_rgba; },
              "set": function (value) { this.background_rgba = value; }
            },
            "backgroundSet": {
              "get": function () { return this.background_set; },
              "set": function (value) { this.background_set = value; }
            },
            "windowType": {
              "get": function () { return this.window_type; },
              "set": function (value) { this.window_type = value; }
            }
          },
          "static": {}
        },
        "GutterRendererPixbuf": {
          "prototype": {
            "getGicon": {
              "value": function () { return this.get_gicon.apply(this, arguments); }
            },
            "getIconName": {
              "value": function () { return this.get_icon_name.apply(this, arguments); }
            },
            "getPixbuf": {
              "value": function () { return this.get_pixbuf.apply(this, arguments); }
            },
            "getStockId": {
              "value": function () { return this.get_stock_id.apply(this, arguments); }
            },
            "setGicon": {
              "value": function () { return this.set_gicon.apply(this, arguments); }
            },
            "setIconName": {
              "value": function () { return this.set_icon_name.apply(this, arguments); }
            },
            "setPixbuf": {
              "value": function () { return this.set_pixbuf.apply(this, arguments); }
            },
            "setStockId": {
              "value": function () { return this.set_stock_id.apply(this, arguments); }
            },
            "iconName": {
              "get": function () { return this.icon_name; },
              "set": function (value) { this.icon_name = value; }
            },
            "stockId": {
              "get": function () { return this.stock_id; },
              "set": function (value) { this.stock_id = value; }
            }
          },
          "static": {}
        },
        "GutterRendererText": {
          "prototype": {
            "measureMarkup": {
              "value": function () { return this.measure_markup.apply(this, arguments); }
            },
            "setMarkup": {
              "value": function () { return this.set_markup.apply(this, arguments); }
            },
            "setText": {
              "value": function () { return this.set_text.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Language": {
          "prototype": {
            "getGlobs": {
              "value": function () { return this.get_globs.apply(this, arguments); }
            },
            "getHidden": {
              "value": function () { return this.get_hidden.apply(this, arguments); }
            },
            "getId": {
              "value": function () { return this.get_id.apply(this, arguments); }
            },
            "getMetadata": {
              "value": function () { return this.get_metadata.apply(this, arguments); }
            },
            "getMimeTypes": {
              "value": function () { return this.get_mime_types.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getSection": {
              "value": function () { return this.get_section.apply(this, arguments); }
            },
            "getStyleFallback": {
              "value": function () { return this.get_style_fallback.apply(this, arguments); }
            },
            "getStyleIds": {
              "value": function () { return this.get_style_ids.apply(this, arguments); }
            },
            "getStyleName": {
              "value": function () { return this.get_style_name.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "LanguageManager": {
          "prototype": {
            "getLanguage": {
              "value": function () { return this.get_language.apply(this, arguments); }
            },
            "getLanguageIds": {
              "value": function () { return this.get_language_ids.apply(this, arguments); }
            },
            "getSearchPath": {
              "value": function () { return this.get_search_path.apply(this, arguments); }
            },
            "guessLanguage": {
              "value": function () { return this.guess_language.apply(this, arguments); }
            },
            "setSearchPath": {
              "value": function () { return this.set_search_path.apply(this, arguments); }
            },
            "languageIds": {
              "get": function () { return this.language_ids; },
              "set": function (value) { this.language_ids = value; }
            },
            "searchPath": {
              "get": function () { return this.search_path; },
              "set": function (value) { this.search_path = value; }
            }
          },
          "static": {
            "getDefault": {
              "value": function () { return this.get_default.apply(this, arguments); }
            }
          }
        },
        "Map": {
          "prototype": {
            "getView": {
              "value": function () { return this.get_view.apply(this, arguments); }
            },
            "setView": {
              "value": function () { return this.set_view.apply(this, arguments); }
            },
            "fontDesc": {
              "get": function () { return this.font_desc; },
              "set": function (value) { this.font_desc = value; }
            }
          },
          "static": {}
        },
        "Mark": {
          "prototype": {
            "getCategory": {
              "value": function () { return this.get_category.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "MarkAttributes": {
          "prototype": {
            "getBackground": {
              "value": function () { return this.get_background.apply(this, arguments); }
            },
            "getGicon": {
              "value": function () { return this.get_gicon.apply(this, arguments); }
            },
            "getIconName": {
              "value": function () { return this.get_icon_name.apply(this, arguments); }
            },
            "getPixbuf": {
              "value": function () { return this.get_pixbuf.apply(this, arguments); }
            },
            "getStockId": {
              "value": function () { return this.get_stock_id.apply(this, arguments); }
            },
            "getTooltipMarkup": {
              "value": function () { return this.get_tooltip_markup.apply(this, arguments); }
            },
            "getTooltipText": {
              "value": function () { return this.get_tooltip_text.apply(this, arguments); }
            },
            "renderIcon": {
              "value": function () { return this.render_icon.apply(this, arguments); }
            },
            "setBackground": {
              "value": function () { return this.set_background.apply(this, arguments); }
            },
            "setGicon": {
              "value": function () { return this.set_gicon.apply(this, arguments); }
            },
            "setIconName": {
              "value": function () { return this.set_icon_name.apply(this, arguments); }
            },
            "setPixbuf": {
              "value": function () { return this.set_pixbuf.apply(this, arguments); }
            },
            "setStockId": {
              "value": function () { return this.set_stock_id.apply(this, arguments); }
            },
            "iconName": {
              "get": function () { return this.icon_name; },
              "set": function (value) { this.icon_name = value; }
            },
            "stockId": {
              "get": function () { return this.stock_id; },
              "set": function (value) { this.stock_id = value; }
            }
          },
          "static": {}
        },
        "PrintCompositor": {
          "prototype": {
            "drawPage": {
              "value": function () { return this.draw_page.apply(this, arguments); }
            },
            "getBodyFontName": {
              "value": function () { return this.get_body_font_name.apply(this, arguments); }
            },
            "getBottomMargin": {
              "value": function () { return this.get_bottom_margin.apply(this, arguments); }
            },
            "getBuffer": {
              "value": function () { return this.get_buffer.apply(this, arguments); }
            },
            "getFooterFontName": {
              "value": function () { return this.get_footer_font_name.apply(this, arguments); }
            },
            "getHeaderFontName": {
              "value": function () { return this.get_header_font_name.apply(this, arguments); }
            },
            "getHighlightSyntax": {
              "value": function () { return this.get_highlight_syntax.apply(this, arguments); }
            },
            "getLeftMargin": {
              "value": function () { return this.get_left_margin.apply(this, arguments); }
            },
            "getLineNumbersFontName": {
              "value": function () { return this.get_line_numbers_font_name.apply(this, arguments); }
            },
            "getNPages": {
              "value": function () { return this.get_n_pages.apply(this, arguments); }
            },
            "getPaginationProgress": {
              "value": function () { return this.get_pagination_progress.apply(this, arguments); }
            },
            "getPrintFooter": {
              "value": function () { return this.get_print_footer.apply(this, arguments); }
            },
            "getPrintHeader": {
              "value": function () { return this.get_print_header.apply(this, arguments); }
            },
            "getPrintLineNumbers": {
              "value": function () { return this.get_print_line_numbers.apply(this, arguments); }
            },
            "getRightMargin": {
              "value": function () { return this.get_right_margin.apply(this, arguments); }
            },
            "getTabWidth": {
              "value": function () { return this.get_tab_width.apply(this, arguments); }
            },
            "getTopMargin": {
              "value": function () { return this.get_top_margin.apply(this, arguments); }
            },
            "getWrapMode": {
              "value": function () { return this.get_wrap_mode.apply(this, arguments); }
            },
            "setBodyFontName": {
              "value": function () { return this.set_body_font_name.apply(this, arguments); }
            },
            "setBottomMargin": {
              "value": function () { return this.set_bottom_margin.apply(this, arguments); }
            },
            "setFooterFontName": {
              "value": function () { return this.set_footer_font_name.apply(this, arguments); }
            },
            "setFooterFormat": {
              "value": function () { return this.set_footer_format.apply(this, arguments); }
            },
            "setHeaderFontName": {
              "value": function () { return this.set_header_font_name.apply(this, arguments); }
            },
            "setHeaderFormat": {
              "value": function () { return this.set_header_format.apply(this, arguments); }
            },
            "setHighlightSyntax": {
              "value": function () { return this.set_highlight_syntax.apply(this, arguments); }
            },
            "setLeftMargin": {
              "value": function () { return this.set_left_margin.apply(this, arguments); }
            },
            "setLineNumbersFontName": {
              "value": function () { return this.set_line_numbers_font_name.apply(this, arguments); }
            },
            "setPrintFooter": {
              "value": function () { return this.set_print_footer.apply(this, arguments); }
            },
            "setPrintHeader": {
              "value": function () { return this.set_print_header.apply(this, arguments); }
            },
            "setPrintLineNumbers": {
              "value": function () { return this.set_print_line_numbers.apply(this, arguments); }
            },
            "setRightMargin": {
              "value": function () { return this.set_right_margin.apply(this, arguments); }
            },
            "setTabWidth": {
              "value": function () { return this.set_tab_width.apply(this, arguments); }
            },
            "setTopMargin": {
              "value": function () { return this.set_top_margin.apply(this, arguments); }
            },
            "setWrapMode": {
              "value": function () { return this.set_wrap_mode.apply(this, arguments); }
            },
            "bodyFontName": {
              "get": function () { return this.body_font_name; },
              "set": function (value) { this.body_font_name = value; }
            },
            "footerFontName": {
              "get": function () { return this.footer_font_name; },
              "set": function (value) { this.footer_font_name = value; }
            },
            "headerFontName": {
              "get": function () { return this.header_font_name; },
              "set": function (value) { this.header_font_name = value; }
            },
            "highlightSyntax": {
              "get": function () { return this.highlight_syntax; },
              "set": function (value) { this.highlight_syntax = value; }
            },
            "lineNumbersFontName": {
              "get": function () { return this.line_numbers_font_name; },
              "set": function (value) { this.line_numbers_font_name = value; }
            },
            "nPages": {
              "get": function () { return this.n_pages; },
              "set": function (value) { this.n_pages = value; }
            },
            "printFooter": {
              "get": function () { return this.print_footer; },
              "set": function (value) { this.print_footer = value; }
            },
            "printHeader": {
              "get": function () { return this.print_header; },
              "set": function (value) { this.print_header = value; }
            },
            "printLineNumbers": {
              "get": function () { return this.print_line_numbers; },
              "set": function (value) { this.print_line_numbers = value; }
            },
            "tabWidth": {
              "get": function () { return this.tab_width; },
              "set": function (value) { this.tab_width = value; }
            },
            "wrapMode": {
              "get": function () { return this.wrap_mode; },
              "set": function (value) { this.wrap_mode = value; }
            }
          },
          "static": {}
        },
        "SearchContext": {
          "prototype": {
            "backwardAsync": {
              "value": function () { return this.backward_async.apply(this, arguments); }
            },
            "backwardFinish": {
              "value": function () { return this.backward_finish.apply(this, arguments); }
            },
            "forwardAsync": {
              "value": function () { return this.forward_async.apply(this, arguments); }
            },
            "forwardFinish": {
              "value": function () { return this.forward_finish.apply(this, arguments); }
            },
            "getBuffer": {
              "value": function () { return this.get_buffer.apply(this, arguments); }
            },
            "getHighlight": {
              "value": function () { return this.get_highlight.apply(this, arguments); }
            },
            "getMatchStyle": {
              "value": function () { return this.get_match_style.apply(this, arguments); }
            },
            "getOccurrencePosition": {
              "value": function () { return this.get_occurrence_position.apply(this, arguments); }
            },
            "getOccurrencesCount": {
              "value": function () { return this.get_occurrences_count.apply(this, arguments); }
            },
            "getRegexError": {
              "value": function () { return this.get_regex_error.apply(this, arguments); }
            },
            "getSettings": {
              "value": function () { return this.get_settings.apply(this, arguments); }
            },
            "replaceAll": {
              "value": function () { return this.replace_all.apply(this, arguments); }
            },
            "setHighlight": {
              "value": function () { return this.set_highlight.apply(this, arguments); }
            },
            "setMatchStyle": {
              "value": function () { return this.set_match_style.apply(this, arguments); }
            },
            "setSettings": {
              "value": function () { return this.set_settings.apply(this, arguments); }
            },
            "matchStyle": {
              "get": function () { return this.match_style; },
              "set": function (value) { this.match_style = value; }
            },
            "occurrencesCount": {
              "get": function () { return this.occurrences_count; },
              "set": function (value) { this.occurrences_count = value; }
            },
            "regexError": {
              "get": function () { return this.regex_error; },
              "set": function (value) { this.regex_error = value; }
            }
          },
          "static": {}
        },
        "SearchSettings": {
          "prototype": {
            "getAtWordBoundaries": {
              "value": function () { return this.get_at_word_boundaries.apply(this, arguments); }
            },
            "getCaseSensitive": {
              "value": function () { return this.get_case_sensitive.apply(this, arguments); }
            },
            "getRegexEnabled": {
              "value": function () { return this.get_regex_enabled.apply(this, arguments); }
            },
            "getSearchText": {
              "value": function () { return this.get_search_text.apply(this, arguments); }
            },
            "getWrapAround": {
              "value": function () { return this.get_wrap_around.apply(this, arguments); }
            },
            "setAtWordBoundaries": {
              "value": function () { return this.set_at_word_boundaries.apply(this, arguments); }
            },
            "setCaseSensitive": {
              "value": function () { return this.set_case_sensitive.apply(this, arguments); }
            },
            "setRegexEnabled": {
              "value": function () { return this.set_regex_enabled.apply(this, arguments); }
            },
            "setSearchText": {
              "value": function () { return this.set_search_text.apply(this, arguments); }
            },
            "setWrapAround": {
              "value": function () { return this.set_wrap_around.apply(this, arguments); }
            },
            "atWordBoundaries": {
              "get": function () { return this.at_word_boundaries; },
              "set": function (value) { this.at_word_boundaries = value; }
            },
            "caseSensitive": {
              "get": function () { return this.case_sensitive; },
              "set": function (value) { this.case_sensitive = value; }
            },
            "regexEnabled": {
              "get": function () { return this.regex_enabled; },
              "set": function (value) { this.regex_enabled = value; }
            },
            "searchText": {
              "get": function () { return this.search_text; },
              "set": function (value) { this.search_text = value; }
            },
            "wrapAround": {
              "get": function () { return this.wrap_around; },
              "set": function (value) { this.wrap_around = value; }
            }
          },
          "static": {}
        },
        "Style": {
          "prototype": {
            "backgroundSet": {
              "get": function () { return this.background_set; },
              "set": function (value) { this.background_set = value; }
            },
            "boldSet": {
              "get": function () { return this.bold_set; },
              "set": function (value) { this.bold_set = value; }
            },
            "foregroundSet": {
              "get": function () { return this.foreground_set; },
              "set": function (value) { this.foreground_set = value; }
            },
            "italicSet": {
              "get": function () { return this.italic_set; },
              "set": function (value) { this.italic_set = value; }
            },
            "lineBackground": {
              "get": function () { return this.line_background; },
              "set": function (value) { this.line_background = value; }
            },
            "lineBackgroundSet": {
              "get": function () { return this.line_background_set; },
              "set": function (value) { this.line_background_set = value; }
            },
            "pangoUnderline": {
              "get": function () { return this.pango_underline; },
              "set": function (value) { this.pango_underline = value; }
            },
            "scaleSet": {
              "get": function () { return this.scale_set; },
              "set": function (value) { this.scale_set = value; }
            },
            "strikethroughSet": {
              "get": function () { return this.strikethrough_set; },
              "set": function (value) { this.strikethrough_set = value; }
            },
            "underlineColor": {
              "get": function () { return this.underline_color; },
              "set": function (value) { this.underline_color = value; }
            },
            "underlineColorSet": {
              "get": function () { return this.underline_color_set; },
              "set": function (value) { this.underline_color_set = value; }
            },
            "underlineSet": {
              "get": function () { return this.underline_set; },
              "set": function (value) { this.underline_set = value; }
            }
          },
          "static": {}
        },
        "StyleScheme": {
          "prototype": {
            "getAuthors": {
              "value": function () { return this.get_authors.apply(this, arguments); }
            },
            "getDescription": {
              "value": function () { return this.get_description.apply(this, arguments); }
            },
            "getFilename": {
              "value": function () { return this.get_filename.apply(this, arguments); }
            },
            "getId": {
              "value": function () { return this.get_id.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getStyle": {
              "value": function () { return this.get_style.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "StyleSchemeChooserButton": {
          "prototype": {},
          "static": {}
        },
        "StyleSchemeChooserWidget": {
          "prototype": {},
          "static": {}
        },
        "StyleSchemeManager": {
          "prototype": {
            "appendSearchPath": {
              "value": function () { return this.append_search_path.apply(this, arguments); }
            },
            "forceRescan": {
              "value": function () { return this.force_rescan.apply(this, arguments); }
            },
            "getScheme": {
              "value": function () { return this.get_scheme.apply(this, arguments); }
            },
            "getSchemeIds": {
              "value": function () { return this.get_scheme_ids.apply(this, arguments); }
            },
            "getSearchPath": {
              "value": function () { return this.get_search_path.apply(this, arguments); }
            },
            "prependSearchPath": {
              "value": function () { return this.prepend_search_path.apply(this, arguments); }
            },
            "setSearchPath": {
              "value": function () { return this.set_search_path.apply(this, arguments); }
            },
            "schemeIds": {
              "get": function () { return this.scheme_ids; },
              "set": function (value) { this.scheme_ids = value; }
            },
            "searchPath": {
              "get": function () { return this.search_path; },
              "set": function (value) { this.search_path = value; }
            }
          },
          "static": {
            "getDefault": {
              "value": function () { return this.get_default.apply(this, arguments); }
            }
          }
        },
        "Tag": {
          "prototype": {
            "drawSpaces": {
              "get": function () { return this.draw_spaces; },
              "set": function (value) { this.draw_spaces = value; }
            },
            "drawSpacesSet": {
              "get": function () { return this.draw_spaces_set; },
              "set": function (value) { this.draw_spaces_set = value; }
            }
          },
          "static": {}
        },
        "View": {
          "prototype": {
            "getAutoIndent": {
              "value": function () { return this.get_auto_indent.apply(this, arguments); }
            },
            "getBackgroundPattern": {
              "value": function () { return this.get_background_pattern.apply(this, arguments); }
            },
            "getCompletion": {
              "value": function () { return this.get_completion.apply(this, arguments); }
            },
            "getDrawSpaces": {
              "value": function () { return this.get_draw_spaces.apply(this, arguments); }
            },
            "getGutter": {
              "value": function () { return this.get_gutter.apply(this, arguments); }
            },
            "getHighlightCurrentLine": {
              "value": function () { return this.get_highlight_current_line.apply(this, arguments); }
            },
            "getIndentOnTab": {
              "value": function () { return this.get_indent_on_tab.apply(this, arguments); }
            },
            "getIndentWidth": {
              "value": function () { return this.get_indent_width.apply(this, arguments); }
            },
            "getInsertSpacesInsteadOfTabs": {
              "value": function () { return this.get_insert_spaces_instead_of_tabs.apply(this, arguments); }
            },
            "getMarkAttributes": {
              "value": function () { return this.get_mark_attributes.apply(this, arguments); }
            },
            "getRightMarginPosition": {
              "value": function () { return this.get_right_margin_position.apply(this, arguments); }
            },
            "getShowLineMarks": {
              "value": function () { return this.get_show_line_marks.apply(this, arguments); }
            },
            "getShowLineNumbers": {
              "value": function () { return this.get_show_line_numbers.apply(this, arguments); }
            },
            "getShowRightMargin": {
              "value": function () { return this.get_show_right_margin.apply(this, arguments); }
            },
            "getSmartBackspace": {
              "value": function () { return this.get_smart_backspace.apply(this, arguments); }
            },
            "getSmartHomeEnd": {
              "value": function () { return this.get_smart_home_end.apply(this, arguments); }
            },
            "getTabWidth": {
              "value": function () { return this.get_tab_width.apply(this, arguments); }
            },
            "getVisualColumn": {
              "value": function () { return this.get_visual_column.apply(this, arguments); }
            },
            "indentLines": {
              "value": function () { return this.indent_lines.apply(this, arguments); }
            },
            "setAutoIndent": {
              "value": function () { return this.set_auto_indent.apply(this, arguments); }
            },
            "setBackgroundPattern": {
              "value": function () { return this.set_background_pattern.apply(this, arguments); }
            },
            "setDrawSpaces": {
              "value": function () { return this.set_draw_spaces.apply(this, arguments); }
            },
            "setHighlightCurrentLine": {
              "value": function () { return this.set_highlight_current_line.apply(this, arguments); }
            },
            "setIndentOnTab": {
              "value": function () { return this.set_indent_on_tab.apply(this, arguments); }
            },
            "setIndentWidth": {
              "value": function () { return this.set_indent_width.apply(this, arguments); }
            },
            "setInsertSpacesInsteadOfTabs": {
              "value": function () { return this.set_insert_spaces_instead_of_tabs.apply(this, arguments); }
            },
            "setMarkAttributes": {
              "value": function () { return this.set_mark_attributes.apply(this, arguments); }
            },
            "setRightMarginPosition": {
              "value": function () { return this.set_right_margin_position.apply(this, arguments); }
            },
            "setShowLineMarks": {
              "value": function () { return this.set_show_line_marks.apply(this, arguments); }
            },
            "setShowLineNumbers": {
              "value": function () { return this.set_show_line_numbers.apply(this, arguments); }
            },
            "setShowRightMargin": {
              "value": function () { return this.set_show_right_margin.apply(this, arguments); }
            },
            "setSmartBackspace": {
              "value": function () { return this.set_smart_backspace.apply(this, arguments); }
            },
            "setSmartHomeEnd": {
              "value": function () { return this.set_smart_home_end.apply(this, arguments); }
            },
            "setTabWidth": {
              "value": function () { return this.set_tab_width.apply(this, arguments); }
            },
            "unindentLines": {
              "value": function () { return this.unindent_lines.apply(this, arguments); }
            },
            "autoIndent": {
              "get": function () { return this.auto_indent; },
              "set": function (value) { this.auto_indent = value; }
            },
            "backgroundPattern": {
              "get": function () { return this.background_pattern; },
              "set": function (value) { this.background_pattern = value; }
            },
            "drawSpaces": {
              "get": function () { return this.draw_spaces; },
              "set": function (value) { this.draw_spaces = value; }
            },
            "highlightCurrentLine": {
              "get": function () { return this.highlight_current_line; },
              "set": function (value) { this.highlight_current_line = value; }
            },
            "indentOnTab": {
              "get": function () { return this.indent_on_tab; },
              "set": function (value) { this.indent_on_tab = value; }
            },
            "indentWidth": {
              "get": function () { return this.indent_width; },
              "set": function (value) { this.indent_width = value; }
            },
            "insertSpacesInsteadOfTabs": {
              "get": function () { return this.insert_spaces_instead_of_tabs; },
              "set": function (value) { this.insert_spaces_instead_of_tabs = value; }
            },
            "rightMarginPosition": {
              "get": function () { return this.right_margin_position; },
              "set": function (value) { this.right_margin_position = value; }
            },
            "showLineMarks": {
              "get": function () { return this.show_line_marks; },
              "set": function (value) { this.show_line_marks = value; }
            },
            "showLineNumbers": {
              "get": function () { return this.show_line_numbers; },
              "set": function (value) { this.show_line_numbers = value; }
            },
            "showRightMargin": {
              "get": function () { return this.show_right_margin; },
              "set": function (value) { this.show_right_margin = value; }
            },
            "smartBackspace": {
              "get": function () { return this.smart_backspace; },
              "set": function (value) { this.smart_backspace = value; }
            },
            "smartHomeEnd": {
              "get": function () { return this.smart_home_end; },
              "set": function (value) { this.smart_home_end = value; }
            },
            "tabWidth": {
              "get": function () { return this.tab_width; },
              "set": function (value) { this.tab_width = value; }
            }
          },
          "static": {}
        }
      },
      "static": {
        "completionErrorQuark": {
          "value": function () { return this.completion_error_quark.apply(this, arguments); }
        },
        "encodingGetAll": {
          "value": function () { return this.encoding_get_all.apply(this, arguments); }
        },
        "encodingGetCurrent": {
          "value": function () { return this.encoding_get_current.apply(this, arguments); }
        },
        "encodingGetDefaultCandidates": {
          "value": function () { return this.encoding_get_default_candidates.apply(this, arguments); }
        },
        "encodingGetFromCharset": {
          "value": function () { return this.encoding_get_from_charset.apply(this, arguments); }
        },
        "encodingGetUtf8": {
          "value": function () { return this.encoding_get_utf8.apply(this, arguments); }
        },
        "fileLoaderErrorQuark": {
          "value": function () { return this.file_loader_error_quark.apply(this, arguments); }
        },
        "fileSaverErrorQuark": {
          "value": function () { return this.file_saver_error_quark.apply(this, arguments); }
        },
        "utilsEscapeSearchText": {
          "value": function () { return this.utils_escape_search_text.apply(this, arguments); }
        },
        "utilsUnescapeSearchText": {
          "value": function () { return this.utils_unescape_search_text.apply(this, arguments); }
        }
      }
    },
    "Notify": {
      "class": {
        "Notification": {
          "prototype": {
            "addAction": {
              "value": function () { return this.add_action.apply(this, arguments); }
            },
            "clearActions": {
              "value": function () { return this.clear_actions.apply(this, arguments); }
            },
            "clearHints": {
              "value": function () { return this.clear_hints.apply(this, arguments); }
            },
            "getClosedReason": {
              "value": function () { return this.get_closed_reason.apply(this, arguments); }
            },
            "setAppName": {
              "value": function () { return this.set_app_name.apply(this, arguments); }
            },
            "setCategory": {
              "value": function () { return this.set_category.apply(this, arguments); }
            },
            "setHint": {
              "value": function () { return this.set_hint.apply(this, arguments); }
            },
            "setHintByte": {
              "value": function () { return this.set_hint_byte.apply(this, arguments); }
            },
            "setHintByteArray": {
              "value": function () { return this.set_hint_byte_array.apply(this, arguments); }
            },
            "setHintDouble": {
              "value": function () { return this.set_hint_double.apply(this, arguments); }
            },
            "setHintInt32": {
              "value": function () { return this.set_hint_int32.apply(this, arguments); }
            },
            "setHintString": {
              "value": function () { return this.set_hint_string.apply(this, arguments); }
            },
            "setHintUint32": {
              "value": function () { return this.set_hint_uint32.apply(this, arguments); }
            },
            "setIconFromPixbuf": {
              "value": function () { return this.set_icon_from_pixbuf.apply(this, arguments); }
            },
            "setImageFromPixbuf": {
              "value": function () { return this.set_image_from_pixbuf.apply(this, arguments); }
            },
            "setTimeout": {
              "value": function () { return this.set_timeout.apply(this, arguments); }
            },
            "setUrgency": {
              "value": function () { return this.set_urgency.apply(this, arguments); }
            },
            "appName": {
              "get": function () { return this.app_name; },
              "set": function (value) { this.app_name = value; }
            },
            "closedReason": {
              "get": function () { return this.closed_reason; },
              "set": function (value) { this.closed_reason = value; }
            },
            "iconName": {
              "get": function () { return this.icon_name; },
              "set": function (value) { this.icon_name = value; }
            }
          },
          "static": {}
        }
      },
      "static": {
        "getAppName": {
          "value": function () { return this.get_app_name.apply(this, arguments); }
        },
        "getServerCaps": {
          "value": function () { return this.get_server_caps.apply(this, arguments); }
        },
        "getServerInfo": {
          "value": function () { return this.get_server_info.apply(this, arguments); }
        },
        "isInitted": {
          "value": function () { return this.is_initted.apply(this, arguments); }
        },
        "setAppName": {
          "value": function () { return this.set_app_name.apply(this, arguments); }
        }
      }
    },
    "Pango": {
      "class": {
        "Context": {
          "prototype": {
            "getBaseDir": {
              "value": function () { return this.get_base_dir.apply(this, arguments); }
            },
            "getBaseGravity": {
              "value": function () { return this.get_base_gravity.apply(this, arguments); }
            },
            "getFontDescription": {
              "value": function () { return this.get_font_description.apply(this, arguments); }
            },
            "getFontMap": {
              "value": function () { return this.get_font_map.apply(this, arguments); }
            },
            "getGravity": {
              "value": function () { return this.get_gravity.apply(this, arguments); }
            },
            "getGravityHint": {
              "value": function () { return this.get_gravity_hint.apply(this, arguments); }
            },
            "getLanguage": {
              "value": function () { return this.get_language.apply(this, arguments); }
            },
            "getMatrix": {
              "value": function () { return this.get_matrix.apply(this, arguments); }
            },
            "getMetrics": {
              "value": function () { return this.get_metrics.apply(this, arguments); }
            },
            "getSerial": {
              "value": function () { return this.get_serial.apply(this, arguments); }
            },
            "listFamilies": {
              "value": function () { return this.list_families.apply(this, arguments); }
            },
            "loadFont": {
              "value": function () { return this.load_font.apply(this, arguments); }
            },
            "loadFontset": {
              "value": function () { return this.load_fontset.apply(this, arguments); }
            },
            "setBaseDir": {
              "value": function () { return this.set_base_dir.apply(this, arguments); }
            },
            "setBaseGravity": {
              "value": function () { return this.set_base_gravity.apply(this, arguments); }
            },
            "setFontDescription": {
              "value": function () { return this.set_font_description.apply(this, arguments); }
            },
            "setFontMap": {
              "value": function () { return this.set_font_map.apply(this, arguments); }
            },
            "setGravityHint": {
              "value": function () { return this.set_gravity_hint.apply(this, arguments); }
            },
            "setLanguage": {
              "value": function () { return this.set_language.apply(this, arguments); }
            },
            "setMatrix": {
              "value": function () { return this.set_matrix.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Engine": {
          "prototype": {},
          "static": {}
        },
        "EngineLang": {
          "prototype": {},
          "static": {}
        },
        "EngineShape": {
          "prototype": {},
          "static": {}
        },
        "Font": {
          "prototype": {
            "describeWithAbsoluteSize": {
              "value": function () { return this.describe_with_absolute_size.apply(this, arguments); }
            },
            "findShaper": {
              "value": function () { return this.find_shaper.apply(this, arguments); }
            },
            "getCoverage": {
              "value": function () { return this.get_coverage.apply(this, arguments); }
            },
            "getFontMap": {
              "value": function () { return this.get_font_map.apply(this, arguments); }
            },
            "getGlyphExtents": {
              "value": function () { return this.get_glyph_extents.apply(this, arguments); }
            },
            "getMetrics": {
              "value": function () { return this.get_metrics.apply(this, arguments); }
            }
          },
          "static": {
            "descriptionsFree": {
              "value": function () { return this.descriptions_free.apply(this, arguments); }
            }
          }
        },
        "FontFace": {
          "prototype": {
            "getFaceName": {
              "value": function () { return this.get_face_name.apply(this, arguments); }
            },
            "isSynthesized": {
              "value": function () { return this.is_synthesized.apply(this, arguments); }
            },
            "listSizes": {
              "value": function () { return this.list_sizes.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "FontFamily": {
          "prototype": {
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "isMonospace": {
              "value": function () { return this.is_monospace.apply(this, arguments); }
            },
            "listFaces": {
              "value": function () { return this.list_faces.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "FontMap": {
          "prototype": {
            "createContext": {
              "value": function () { return this.create_context.apply(this, arguments); }
            },
            "getSerial": {
              "value": function () { return this.get_serial.apply(this, arguments); }
            },
            "getShapeEngineType": {
              "value": function () { return this.get_shape_engine_type.apply(this, arguments); }
            },
            "listFamilies": {
              "value": function () { return this.list_families.apply(this, arguments); }
            },
            "loadFont": {
              "value": function () { return this.load_font.apply(this, arguments); }
            },
            "loadFontset": {
              "value": function () { return this.load_fontset.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Fontset": {
          "prototype": {
            "getFont": {
              "value": function () { return this.get_font.apply(this, arguments); }
            },
            "getMetrics": {
              "value": function () { return this.get_metrics.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "FontsetSimple": {
          "prototype": {},
          "static": {}
        },
        "Layout": {
          "prototype": {
            "contextChanged": {
              "value": function () { return this.context_changed.apply(this, arguments); }
            },
            "getAlignment": {
              "value": function () { return this.get_alignment.apply(this, arguments); }
            },
            "getAttributes": {
              "value": function () { return this.get_attributes.apply(this, arguments); }
            },
            "getAutoDir": {
              "value": function () { return this.get_auto_dir.apply(this, arguments); }
            },
            "getBaseline": {
              "value": function () { return this.get_baseline.apply(this, arguments); }
            },
            "getCharacterCount": {
              "value": function () { return this.get_character_count.apply(this, arguments); }
            },
            "getContext": {
              "value": function () { return this.get_context.apply(this, arguments); }
            },
            "getCursorPos": {
              "value": function () { return this.get_cursor_pos.apply(this, arguments); }
            },
            "getEllipsize": {
              "value": function () { return this.get_ellipsize.apply(this, arguments); }
            },
            "getExtents": {
              "value": function () { return this.get_extents.apply(this, arguments); }
            },
            "getFontDescription": {
              "value": function () { return this.get_font_description.apply(this, arguments); }
            },
            "getHeight": {
              "value": function () { return this.get_height.apply(this, arguments); }
            },
            "getIndent": {
              "value": function () { return this.get_indent.apply(this, arguments); }
            },
            "getIter": {
              "value": function () { return this.get_iter.apply(this, arguments); }
            },
            "getJustify": {
              "value": function () { return this.get_justify.apply(this, arguments); }
            },
            "getLine": {
              "value": function () { return this.get_line.apply(this, arguments); }
            },
            "getLineCount": {
              "value": function () { return this.get_line_count.apply(this, arguments); }
            },
            "getLineReadonly": {
              "value": function () { return this.get_line_readonly.apply(this, arguments); }
            },
            "getLines": {
              "value": function () { return this.get_lines.apply(this, arguments); }
            },
            "getLinesReadonly": {
              "value": function () { return this.get_lines_readonly.apply(this, arguments); }
            },
            "getLogAttrs": {
              "value": function () { return this.get_log_attrs.apply(this, arguments); }
            },
            "getLogAttrsReadonly": {
              "value": function () { return this.get_log_attrs_readonly.apply(this, arguments); }
            },
            "getPixelExtents": {
              "value": function () { return this.get_pixel_extents.apply(this, arguments); }
            },
            "getPixelSize": {
              "value": function () { return this.get_pixel_size.apply(this, arguments); }
            },
            "getSerial": {
              "value": function () { return this.get_serial.apply(this, arguments); }
            },
            "getSingleParagraphMode": {
              "value": function () { return this.get_single_paragraph_mode.apply(this, arguments); }
            },
            "getSize": {
              "value": function () { return this.get_size.apply(this, arguments); }
            },
            "getSpacing": {
              "value": function () { return this.get_spacing.apply(this, arguments); }
            },
            "getTabs": {
              "value": function () { return this.get_tabs.apply(this, arguments); }
            },
            "getText": {
              "value": function () { return this.get_text.apply(this, arguments); }
            },
            "getUnknownGlyphsCount": {
              "value": function () { return this.get_unknown_glyphs_count.apply(this, arguments); }
            },
            "getWidth": {
              "value": function () { return this.get_width.apply(this, arguments); }
            },
            "getWrap": {
              "value": function () { return this.get_wrap.apply(this, arguments); }
            },
            "indexToLineX": {
              "value": function () { return this.index_to_line_x.apply(this, arguments); }
            },
            "indexToPos": {
              "value": function () { return this.index_to_pos.apply(this, arguments); }
            },
            "isEllipsized": {
              "value": function () { return this.is_ellipsized.apply(this, arguments); }
            },
            "isWrapped": {
              "value": function () { return this.is_wrapped.apply(this, arguments); }
            },
            "moveCursorVisually": {
              "value": function () { return this.move_cursor_visually.apply(this, arguments); }
            },
            "setAlignment": {
              "value": function () { return this.set_alignment.apply(this, arguments); }
            },
            "setAttributes": {
              "value": function () { return this.set_attributes.apply(this, arguments); }
            },
            "setAutoDir": {
              "value": function () { return this.set_auto_dir.apply(this, arguments); }
            },
            "setEllipsize": {
              "value": function () { return this.set_ellipsize.apply(this, arguments); }
            },
            "setFontDescription": {
              "value": function () { return this.set_font_description.apply(this, arguments); }
            },
            "setHeight": {
              "value": function () { return this.set_height.apply(this, arguments); }
            },
            "setIndent": {
              "value": function () { return this.set_indent.apply(this, arguments); }
            },
            "setJustify": {
              "value": function () { return this.set_justify.apply(this, arguments); }
            },
            "setMarkup": {
              "value": function () { return this.set_markup.apply(this, arguments); }
            },
            "setMarkupWithAccel": {
              "value": function () { return this.set_markup_with_accel.apply(this, arguments); }
            },
            "setSingleParagraphMode": {
              "value": function () { return this.set_single_paragraph_mode.apply(this, arguments); }
            },
            "setSpacing": {
              "value": function () { return this.set_spacing.apply(this, arguments); }
            },
            "setTabs": {
              "value": function () { return this.set_tabs.apply(this, arguments); }
            },
            "setText": {
              "value": function () { return this.set_text.apply(this, arguments); }
            },
            "setWidth": {
              "value": function () { return this.set_width.apply(this, arguments); }
            },
            "setWrap": {
              "value": function () { return this.set_wrap.apply(this, arguments); }
            },
            "xyToIndex": {
              "value": function () { return this.xy_to_index.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Renderer": {
          "prototype": {
            "drawErrorUnderline": {
              "value": function () { return this.draw_error_underline.apply(this, arguments); }
            },
            "drawGlyph": {
              "value": function () { return this.draw_glyph.apply(this, arguments); }
            },
            "drawGlyphItem": {
              "value": function () { return this.draw_glyph_item.apply(this, arguments); }
            },
            "drawGlyphs": {
              "value": function () { return this.draw_glyphs.apply(this, arguments); }
            },
            "drawLayout": {
              "value": function () { return this.draw_layout.apply(this, arguments); }
            },
            "drawLayoutLine": {
              "value": function () { return this.draw_layout_line.apply(this, arguments); }
            },
            "drawRectangle": {
              "value": function () { return this.draw_rectangle.apply(this, arguments); }
            },
            "drawTrapezoid": {
              "value": function () { return this.draw_trapezoid.apply(this, arguments); }
            },
            "getAlpha": {
              "value": function () { return this.get_alpha.apply(this, arguments); }
            },
            "getColor": {
              "value": function () { return this.get_color.apply(this, arguments); }
            },
            "getLayout": {
              "value": function () { return this.get_layout.apply(this, arguments); }
            },
            "getLayoutLine": {
              "value": function () { return this.get_layout_line.apply(this, arguments); }
            },
            "getMatrix": {
              "value": function () { return this.get_matrix.apply(this, arguments); }
            },
            "partChanged": {
              "value": function () { return this.part_changed.apply(this, arguments); }
            },
            "setAlpha": {
              "value": function () { return this.set_alpha.apply(this, arguments); }
            },
            "setColor": {
              "value": function () { return this.set_color.apply(this, arguments); }
            },
            "setMatrix": {
              "value": function () { return this.set_matrix.apply(this, arguments); }
            }
          },
          "static": {}
        }
      },
      "static": {
        "attrBackgroundAlphaNew": {
          "value": function () { return this.attr_background_alpha_new.apply(this, arguments); }
        },
        "attrBackgroundNew": {
          "value": function () { return this.attr_background_new.apply(this, arguments); }
        },
        "attrFallbackNew": {
          "value": function () { return this.attr_fallback_new.apply(this, arguments); }
        },
        "attrFamilyNew": {
          "value": function () { return this.attr_family_new.apply(this, arguments); }
        },
        "attrForegroundAlphaNew": {
          "value": function () { return this.attr_foreground_alpha_new.apply(this, arguments); }
        },
        "attrForegroundNew": {
          "value": function () { return this.attr_foreground_new.apply(this, arguments); }
        },
        "attrGravityHintNew": {
          "value": function () { return this.attr_gravity_hint_new.apply(this, arguments); }
        },
        "attrGravityNew": {
          "value": function () { return this.attr_gravity_new.apply(this, arguments); }
        },
        "attrLetterSpacingNew": {
          "value": function () { return this.attr_letter_spacing_new.apply(this, arguments); }
        },
        "attrRiseNew": {
          "value": function () { return this.attr_rise_new.apply(this, arguments); }
        },
        "attrScaleNew": {
          "value": function () { return this.attr_scale_new.apply(this, arguments); }
        },
        "attrStretchNew": {
          "value": function () { return this.attr_stretch_new.apply(this, arguments); }
        },
        "attrStrikethroughColorNew": {
          "value": function () { return this.attr_strikethrough_color_new.apply(this, arguments); }
        },
        "attrStrikethroughNew": {
          "value": function () { return this.attr_strikethrough_new.apply(this, arguments); }
        },
        "attrStyleNew": {
          "value": function () { return this.attr_style_new.apply(this, arguments); }
        },
        "attrTypeGetName": {
          "value": function () { return this.attr_type_get_name.apply(this, arguments); }
        },
        "attrTypeRegister": {
          "value": function () { return this.attr_type_register.apply(this, arguments); }
        },
        "attrUnderlineColorNew": {
          "value": function () { return this.attr_underline_color_new.apply(this, arguments); }
        },
        "attrUnderlineNew": {
          "value": function () { return this.attr_underline_new.apply(this, arguments); }
        },
        "attrVariantNew": {
          "value": function () { return this.attr_variant_new.apply(this, arguments); }
        },
        "attrWeightNew": {
          "value": function () { return this.attr_weight_new.apply(this, arguments); }
        },
        "bidiTypeForUnichar": {
          "value": function () { return this.bidi_type_for_unichar.apply(this, arguments); }
        },
        "configKeyGet": {
          "value": function () { return this.config_key_get.apply(this, arguments); }
        },
        "configKeyGetSystem": {
          "value": function () { return this.config_key_get_system.apply(this, arguments); }
        },
        "defaultBreak": {
          "value": function () { return this.default_break.apply(this, arguments); }
        },
        "extentsToPixels": {
          "value": function () { return this.extents_to_pixels.apply(this, arguments); }
        },
        "findBaseDir": {
          "value": function () { return this.find_base_dir.apply(this, arguments); }
        },
        "findMap": {
          "value": function () { return this.find_map.apply(this, arguments); }
        },
        "findParagraphBoundary": {
          "value": function () { return this.find_paragraph_boundary.apply(this, arguments); }
        },
        "fontDescriptionFromString": {
          "value": function () { return this.font_description_from_string.apply(this, arguments); }
        },
        "getLibSubdirectory": {
          "value": function () { return this.get_lib_subdirectory.apply(this, arguments); }
        },
        "getLogAttrs": {
          "value": function () { return this.get_log_attrs.apply(this, arguments); }
        },
        "getMirrorChar": {
          "value": function () { return this.get_mirror_char.apply(this, arguments); }
        },
        "getSysconfSubdirectory": {
          "value": function () { return this.get_sysconf_subdirectory.apply(this, arguments); }
        },
        "gravityGetForMatrix": {
          "value": function () { return this.gravity_get_for_matrix.apply(this, arguments); }
        },
        "gravityGetForScript": {
          "value": function () { return this.gravity_get_for_script.apply(this, arguments); }
        },
        "gravityGetForScriptAndWidth": {
          "value": function () { return this.gravity_get_for_script_and_width.apply(this, arguments); }
        },
        "gravityToRotation": {
          "value": function () { return this.gravity_to_rotation.apply(this, arguments); }
        },
        "isZeroWidth": {
          "value": function () { return this.is_zero_width.apply(this, arguments); }
        },
        "itemizeWithBaseDir": {
          "value": function () { return this.itemize_with_base_dir.apply(this, arguments); }
        },
        "languageFromString": {
          "value": function () { return this.language_from_string.apply(this, arguments); }
        },
        "languageGetDefault": {
          "value": function () { return this.language_get_default.apply(this, arguments); }
        },
        "log2visGetEmbeddingLevels": {
          "value": function () { return this.log2vis_get_embedding_levels.apply(this, arguments); }
        },
        "lookupAliases": {
          "value": function () { return this.lookup_aliases.apply(this, arguments); }
        },
        "markupParserFinish": {
          "value": function () { return this.markup_parser_finish.apply(this, arguments); }
        },
        "markupParserNew": {
          "value": function () { return this.markup_parser_new.apply(this, arguments); }
        },
        "moduleRegister": {
          "value": function () { return this.module_register.apply(this, arguments); }
        },
        "parseEnum": {
          "value": function () { return this.parse_enum.apply(this, arguments); }
        },
        "parseMarkup": {
          "value": function () { return this.parse_markup.apply(this, arguments); }
        },
        "parseStretch": {
          "value": function () { return this.parse_stretch.apply(this, arguments); }
        },
        "parseStyle": {
          "value": function () { return this.parse_style.apply(this, arguments); }
        },
        "parseVariant": {
          "value": function () { return this.parse_variant.apply(this, arguments); }
        },
        "parseWeight": {
          "value": function () { return this.parse_weight.apply(this, arguments); }
        },
        "quantizeLineGeometry": {
          "value": function () { return this.quantize_line_geometry.apply(this, arguments); }
        },
        "readLine": {
          "value": function () { return this.read_line.apply(this, arguments); }
        },
        "reorderItems": {
          "value": function () { return this.reorder_items.apply(this, arguments); }
        },
        "scanInt": {
          "value": function () { return this.scan_int.apply(this, arguments); }
        },
        "scanString": {
          "value": function () { return this.scan_string.apply(this, arguments); }
        },
        "scanWord": {
          "value": function () { return this.scan_word.apply(this, arguments); }
        },
        "scriptForUnichar": {
          "value": function () { return this.script_for_unichar.apply(this, arguments); }
        },
        "scriptGetSampleLanguage": {
          "value": function () { return this.script_get_sample_language.apply(this, arguments); }
        },
        "shapeFull": {
          "value": function () { return this.shape_full.apply(this, arguments); }
        },
        "skipSpace": {
          "value": function () { return this.skip_space.apply(this, arguments); }
        },
        "splitFileList": {
          "value": function () { return this.split_file_list.apply(this, arguments); }
        },
        "trimString": {
          "value": function () { return this.trim_string.apply(this, arguments); }
        },
        "unicharDirection": {
          "value": function () { return this.unichar_direction.apply(this, arguments); }
        },
        "unitsFromDouble": {
          "value": function () { return this.units_from_double.apply(this, arguments); }
        },
        "unitsToDouble": {
          "value": function () { return this.units_to_double.apply(this, arguments); }
        },
        "versionCheck": {
          "value": function () { return this.version_check.apply(this, arguments); }
        },
        "versionString": {
          "value": function () { return this.version_string.apply(this, arguments); }
        }
      }
    },
    "PangoCairo": {
      "class": {
        "FcFontMap": {
          "prototype": {},
          "static": {}
        }
      },
      "static": {
        "contextGetFontOptions": {
          "value": function () { return this.context_get_font_options.apply(this, arguments); }
        },
        "contextGetResolution": {
          "value": function () { return this.context_get_resolution.apply(this, arguments); }
        },
        "contextGetShapeRenderer": {
          "value": function () { return this.context_get_shape_renderer.apply(this, arguments); }
        },
        "contextSetFontOptions": {
          "value": function () { return this.context_set_font_options.apply(this, arguments); }
        },
        "contextSetResolution": {
          "value": function () { return this.context_set_resolution.apply(this, arguments); }
        },
        "contextSetShapeRenderer": {
          "value": function () { return this.context_set_shape_renderer.apply(this, arguments); }
        },
        "createContext": {
          "value": function () { return this.create_context.apply(this, arguments); }
        },
        "createLayout": {
          "value": function () { return this.create_layout.apply(this, arguments); }
        },
        "errorUnderlinePath": {
          "value": function () { return this.error_underline_path.apply(this, arguments); }
        },
        "fontMapGetDefault": {
          "value": function () { return this.font_map_get_default.apply(this, arguments); }
        },
        "fontMapNew": {
          "value": function () { return this.font_map_new.apply(this, arguments); }
        },
        "fontMapNewForFontType": {
          "value": function () { return this.font_map_new_for_font_type.apply(this, arguments); }
        },
        "glyphStringPath": {
          "value": function () { return this.glyph_string_path.apply(this, arguments); }
        },
        "layoutLinePath": {
          "value": function () { return this.layout_line_path.apply(this, arguments); }
        },
        "layoutPath": {
          "value": function () { return this.layout_path.apply(this, arguments); }
        },
        "showErrorUnderline": {
          "value": function () { return this.show_error_underline.apply(this, arguments); }
        },
        "showGlyphItem": {
          "value": function () { return this.show_glyph_item.apply(this, arguments); }
        },
        "showGlyphString": {
          "value": function () { return this.show_glyph_string.apply(this, arguments); }
        },
        "showLayout": {
          "value": function () { return this.show_layout.apply(this, arguments); }
        },
        "showLayoutLine": {
          "value": function () { return this.show_layout_line.apply(this, arguments); }
        },
        "updateContext": {
          "value": function () { return this.update_context.apply(this, arguments); }
        },
        "updateLayout": {
          "value": function () { return this.update_layout.apply(this, arguments); }
        }
      }
    },
    "Secret": {
      "class": {
        "Collection": {
          "prototype": {
            "deleteFinish": {
              "value": function () { return this.delete_finish.apply(this, arguments); }
            },
            "deleteSync": {
              "value": function () { return this.delete_sync.apply(this, arguments); }
            },
            "getCreated": {
              "value": function () { return this.get_created.apply(this, arguments); }
            },
            "getFlags": {
              "value": function () { return this.get_flags.apply(this, arguments); }
            },
            "getItems": {
              "value": function () { return this.get_items.apply(this, arguments); }
            },
            "getLabel": {
              "value": function () { return this.get_label.apply(this, arguments); }
            },
            "getLocked": {
              "value": function () { return this.get_locked.apply(this, arguments); }
            },
            "getModified": {
              "value": function () { return this.get_modified.apply(this, arguments); }
            },
            "getService": {
              "value": function () { return this.get_service.apply(this, arguments); }
            },
            "loadItems": {
              "value": function () { return this.load_items.apply(this, arguments); }
            },
            "loadItemsFinish": {
              "value": function () { return this.load_items_finish.apply(this, arguments); }
            },
            "loadItemsSync": {
              "value": function () { return this.load_items_sync.apply(this, arguments); }
            },
            "searchFinish": {
              "value": function () { return this.search_finish.apply(this, arguments); }
            },
            "searchForDbusPaths": {
              "value": function () { return this.search_for_dbus_paths.apply(this, arguments); }
            },
            "searchForDbusPathsFinish": {
              "value": function () { return this.search_for_dbus_paths_finish.apply(this, arguments); }
            },
            "searchForDbusPathsSync": {
              "value": function () { return this.search_for_dbus_paths_sync.apply(this, arguments); }
            },
            "searchSync": {
              "value": function () { return this.search_sync.apply(this, arguments); }
            },
            "setLabel": {
              "value": function () { return this.set_label.apply(this, arguments); }
            },
            "setLabelFinish": {
              "value": function () { return this.set_label_finish.apply(this, arguments); }
            },
            "setLabelSync": {
              "value": function () { return this.set_label_sync.apply(this, arguments); }
            }
          },
          "static": {
            "createFinish": {
              "value": function () { return this.create_finish.apply(this, arguments); }
            },
            "createSync": {
              "value": function () { return this.create_sync.apply(this, arguments); }
            },
            "forAlias": {
              "value": function () { return this.for_alias.apply(this, arguments); }
            },
            "forAliasFinish": {
              "value": function () { return this.for_alias_finish.apply(this, arguments); }
            },
            "forAliasSync": {
              "value": function () { return this.for_alias_sync.apply(this, arguments); }
            },
            "newForDbusPath": {
              "value": function () { return this.new_for_dbus_path.apply(this, arguments); }
            }
          }
        },
        "Item": {
          "prototype": {
            "deleteFinish": {
              "value": function () { return this.delete_finish.apply(this, arguments); }
            },
            "deleteSync": {
              "value": function () { return this.delete_sync.apply(this, arguments); }
            },
            "getAttributes": {
              "value": function () { return this.get_attributes.apply(this, arguments); }
            },
            "getCreated": {
              "value": function () { return this.get_created.apply(this, arguments); }
            },
            "getFlags": {
              "value": function () { return this.get_flags.apply(this, arguments); }
            },
            "getLabel": {
              "value": function () { return this.get_label.apply(this, arguments); }
            },
            "getLocked": {
              "value": function () { return this.get_locked.apply(this, arguments); }
            },
            "getModified": {
              "value": function () { return this.get_modified.apply(this, arguments); }
            },
            "getSchemaName": {
              "value": function () { return this.get_schema_name.apply(this, arguments); }
            },
            "getSecret": {
              "value": function () { return this.get_secret.apply(this, arguments); }
            },
            "getService": {
              "value": function () { return this.get_service.apply(this, arguments); }
            },
            "loadSecret": {
              "value": function () { return this.load_secret.apply(this, arguments); }
            },
            "loadSecretFinish": {
              "value": function () { return this.load_secret_finish.apply(this, arguments); }
            },
            "loadSecretSync": {
              "value": function () { return this.load_secret_sync.apply(this, arguments); }
            },
            "setAttributes": {
              "value": function () { return this.set_attributes.apply(this, arguments); }
            },
            "setAttributesFinish": {
              "value": function () { return this.set_attributes_finish.apply(this, arguments); }
            },
            "setAttributesSync": {
              "value": function () { return this.set_attributes_sync.apply(this, arguments); }
            },
            "setLabel": {
              "value": function () { return this.set_label.apply(this, arguments); }
            },
            "setLabelFinish": {
              "value": function () { return this.set_label_finish.apply(this, arguments); }
            },
            "setLabelSync": {
              "value": function () { return this.set_label_sync.apply(this, arguments); }
            },
            "setSecret": {
              "value": function () { return this.set_secret.apply(this, arguments); }
            },
            "setSecretFinish": {
              "value": function () { return this.set_secret_finish.apply(this, arguments); }
            },
            "setSecretSync": {
              "value": function () { return this.set_secret_sync.apply(this, arguments); }
            }
          },
          "static": {
            "createFinish": {
              "value": function () { return this.create_finish.apply(this, arguments); }
            },
            "createSync": {
              "value": function () { return this.create_sync.apply(this, arguments); }
            },
            "loadSecrets": {
              "value": function () { return this.load_secrets.apply(this, arguments); }
            },
            "loadSecretsFinish": {
              "value": function () { return this.load_secrets_finish.apply(this, arguments); }
            },
            "loadSecretsSync": {
              "value": function () { return this.load_secrets_sync.apply(this, arguments); }
            },
            "newForDbusPath": {
              "value": function () { return this.new_for_dbus_path.apply(this, arguments); }
            }
          }
        },
        "Prompt": {
          "prototype": {
            "performFinish": {
              "value": function () { return this.perform_finish.apply(this, arguments); }
            },
            "performSync": {
              "value": function () { return this.perform_sync.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Service": {
          "prototype": {
            "clearFinish": {
              "value": function () { return this.clear_finish.apply(this, arguments); }
            },
            "clearSync": {
              "value": function () { return this.clear_sync.apply(this, arguments); }
            },
            "createCollectionDbusPath": {
              "value": function () { return this.create_collection_dbus_path.apply(this, arguments); }
            },
            "createCollectionDbusPathFinish": {
              "value": function () { return this.create_collection_dbus_path_finish.apply(this, arguments); }
            },
            "createCollectionDbusPathSync": {
              "value": function () { return this.create_collection_dbus_path_sync.apply(this, arguments); }
            },
            "createItemDbusPath": {
              "value": function () { return this.create_item_dbus_path.apply(this, arguments); }
            },
            "createItemDbusPathFinish": {
              "value": function () { return this.create_item_dbus_path_finish.apply(this, arguments); }
            },
            "createItemDbusPathSync": {
              "value": function () { return this.create_item_dbus_path_sync.apply(this, arguments); }
            },
            "decodeDbusSecret": {
              "value": function () { return this.decode_dbus_secret.apply(this, arguments); }
            },
            "deleteItemDbusPath": {
              "value": function () { return this.delete_item_dbus_path.apply(this, arguments); }
            },
            "deleteItemDbusPathFinish": {
              "value": function () { return this.delete_item_dbus_path_finish.apply(this, arguments); }
            },
            "deleteItemDbusPathSync": {
              "value": function () { return this.delete_item_dbus_path_sync.apply(this, arguments); }
            },
            "encodeDbusSecret": {
              "value": function () { return this.encode_dbus_secret.apply(this, arguments); }
            },
            "ensureSession": {
              "value": function () { return this.ensure_session.apply(this, arguments); }
            },
            "ensureSessionFinish": {
              "value": function () { return this.ensure_session_finish.apply(this, arguments); }
            },
            "ensureSessionSync": {
              "value": function () { return this.ensure_session_sync.apply(this, arguments); }
            },
            "getCollectionGtype": {
              "value": function () { return this.get_collection_gtype.apply(this, arguments); }
            },
            "getCollections": {
              "value": function () { return this.get_collections.apply(this, arguments); }
            },
            "getFlags": {
              "value": function () { return this.get_flags.apply(this, arguments); }
            },
            "getItemGtype": {
              "value": function () { return this.get_item_gtype.apply(this, arguments); }
            },
            "getSecretForDbusPath": {
              "value": function () { return this.get_secret_for_dbus_path.apply(this, arguments); }
            },
            "getSecretForDbusPathFinish": {
              "value": function () { return this.get_secret_for_dbus_path_finish.apply(this, arguments); }
            },
            "getSecretForDbusPathSync": {
              "value": function () { return this.get_secret_for_dbus_path_sync.apply(this, arguments); }
            },
            "getSecretsForDbusPaths": {
              "value": function () { return this.get_secrets_for_dbus_paths.apply(this, arguments); }
            },
            "getSecretsForDbusPathsFinish": {
              "value": function () { return this.get_secrets_for_dbus_paths_finish.apply(this, arguments); }
            },
            "getSecretsForDbusPathsSync": {
              "value": function () { return this.get_secrets_for_dbus_paths_sync.apply(this, arguments); }
            },
            "getSessionAlgorithms": {
              "value": function () { return this.get_session_algorithms.apply(this, arguments); }
            },
            "getSessionDbusPath": {
              "value": function () { return this.get_session_dbus_path.apply(this, arguments); }
            },
            "loadCollections": {
              "value": function () { return this.load_collections.apply(this, arguments); }
            },
            "loadCollectionsFinish": {
              "value": function () { return this.load_collections_finish.apply(this, arguments); }
            },
            "loadCollectionsSync": {
              "value": function () { return this.load_collections_sync.apply(this, arguments); }
            },
            "lockDbusPaths": {
              "value": function () { return this.lock_dbus_paths.apply(this, arguments); }
            },
            "lockDbusPathsFinish": {
              "value": function () { return this.lock_dbus_paths_finish.apply(this, arguments); }
            },
            "lockDbusPathsSync": {
              "value": function () { return this.lock_dbus_paths_sync.apply(this, arguments); }
            },
            "lockFinish": {
              "value": function () { return this.lock_finish.apply(this, arguments); }
            },
            "lockSync": {
              "value": function () { return this.lock_sync.apply(this, arguments); }
            },
            "lookupFinish": {
              "value": function () { return this.lookup_finish.apply(this, arguments); }
            },
            "lookupSync": {
              "value": function () { return this.lookup_sync.apply(this, arguments); }
            },
            "promptAtDbusPath": {
              "value": function () { return this.prompt_at_dbus_path.apply(this, arguments); }
            },
            "promptAtDbusPathFinish": {
              "value": function () { return this.prompt_at_dbus_path_finish.apply(this, arguments); }
            },
            "promptAtDbusPathSync": {
              "value": function () { return this.prompt_at_dbus_path_sync.apply(this, arguments); }
            },
            "promptFinish": {
              "value": function () { return this.prompt_finish.apply(this, arguments); }
            },
            "promptSync": {
              "value": function () { return this.prompt_sync.apply(this, arguments); }
            },
            "readAliasDbusPath": {
              "value": function () { return this.read_alias_dbus_path.apply(this, arguments); }
            },
            "readAliasDbusPathFinish": {
              "value": function () { return this.read_alias_dbus_path_finish.apply(this, arguments); }
            },
            "readAliasDbusPathSync": {
              "value": function () { return this.read_alias_dbus_path_sync.apply(this, arguments); }
            },
            "searchFinish": {
              "value": function () { return this.search_finish.apply(this, arguments); }
            },
            "searchForDbusPaths": {
              "value": function () { return this.search_for_dbus_paths.apply(this, arguments); }
            },
            "searchForDbusPathsFinish": {
              "value": function () { return this.search_for_dbus_paths_finish.apply(this, arguments); }
            },
            "searchForDbusPathsSync": {
              "value": function () { return this.search_for_dbus_paths_sync.apply(this, arguments); }
            },
            "searchSync": {
              "value": function () { return this.search_sync.apply(this, arguments); }
            },
            "setAlias": {
              "value": function () { return this.set_alias.apply(this, arguments); }
            },
            "setAliasFinish": {
              "value": function () { return this.set_alias_finish.apply(this, arguments); }
            },
            "setAliasSync": {
              "value": function () { return this.set_alias_sync.apply(this, arguments); }
            },
            "setAliasToDbusPath": {
              "value": function () { return this.set_alias_to_dbus_path.apply(this, arguments); }
            },
            "setAliasToDbusPathFinish": {
              "value": function () { return this.set_alias_to_dbus_path_finish.apply(this, arguments); }
            },
            "setAliasToDbusPathSync": {
              "value": function () { return this.set_alias_to_dbus_path_sync.apply(this, arguments); }
            },
            "storeFinish": {
              "value": function () { return this.store_finish.apply(this, arguments); }
            },
            "storeSync": {
              "value": function () { return this.store_sync.apply(this, arguments); }
            },
            "unlockDbusPaths": {
              "value": function () { return this.unlock_dbus_paths.apply(this, arguments); }
            },
            "unlockDbusPathsFinish": {
              "value": function () { return this.unlock_dbus_paths_finish.apply(this, arguments); }
            },
            "unlockDbusPathsSync": {
              "value": function () { return this.unlock_dbus_paths_sync.apply(this, arguments); }
            },
            "unlockFinish": {
              "value": function () { return this.unlock_finish.apply(this, arguments); }
            },
            "unlockSync": {
              "value": function () { return this.unlock_sync.apply(this, arguments); }
            }
          },
          "static": {
            "getFinish": {
              "value": function () { return this.get_finish.apply(this, arguments); }
            },
            "getSync": {
              "value": function () { return this.get_sync.apply(this, arguments); }
            },
            "openFinish": {
              "value": function () { return this.open_finish.apply(this, arguments); }
            },
            "openSync": {
              "value": function () { return this.open_sync.apply(this, arguments); }
            }
          }
        }
      },
      "static": {
        "attributesBuild": {
          "value": function () { return this.attributes_build.apply(this, arguments); }
        },
        "attributesBuildv": {
          "value": function () { return this.attributes_buildv.apply(this, arguments); }
        },
        "errorGetQuark": {
          "value": function () { return this.error_get_quark.apply(this, arguments); }
        },
        "passwordClear": {
          "value": function () { return this.password_clear.apply(this, arguments); }
        },
        "passwordClearFinish": {
          "value": function () { return this.password_clear_finish.apply(this, arguments); }
        },
        "passwordClearSync": {
          "value": function () { return this.password_clear_sync.apply(this, arguments); }
        },
        "passwordClearv": {
          "value": function () { return this.password_clearv.apply(this, arguments); }
        },
        "passwordClearvSync": {
          "value": function () { return this.password_clearv_sync.apply(this, arguments); }
        },
        "passwordFree": {
          "value": function () { return this.password_free.apply(this, arguments); }
        },
        "passwordLookup": {
          "value": function () { return this.password_lookup.apply(this, arguments); }
        },
        "passwordLookupFinish": {
          "value": function () { return this.password_lookup_finish.apply(this, arguments); }
        },
        "passwordLookupNonpageableFinish": {
          "value": function () { return this.password_lookup_nonpageable_finish.apply(this, arguments); }
        },
        "passwordLookupNonpageableSync": {
          "value": function () { return this.password_lookup_nonpageable_sync.apply(this, arguments); }
        },
        "passwordLookupSync": {
          "value": function () { return this.password_lookup_sync.apply(this, arguments); }
        },
        "passwordLookupv": {
          "value": function () { return this.password_lookupv.apply(this, arguments); }
        },
        "passwordLookupvNonpageableSync": {
          "value": function () { return this.password_lookupv_nonpageable_sync.apply(this, arguments); }
        },
        "passwordLookupvSync": {
          "value": function () { return this.password_lookupv_sync.apply(this, arguments); }
        },
        "passwordStore": {
          "value": function () { return this.password_store.apply(this, arguments); }
        },
        "passwordStoreFinish": {
          "value": function () { return this.password_store_finish.apply(this, arguments); }
        },
        "passwordStoreSync": {
          "value": function () { return this.password_store_sync.apply(this, arguments); }
        },
        "passwordStorev": {
          "value": function () { return this.password_storev.apply(this, arguments); }
        },
        "passwordStorevSync": {
          "value": function () { return this.password_storev_sync.apply(this, arguments); }
        },
        "passwordWipe": {
          "value": function () { return this.password_wipe.apply(this, arguments); }
        }
      }
    },
    "Soup": {
      "class": {
        "Address": {
          "prototype": {
            "equalByIp": {
              "value": function () { return this.equal_by_ip.apply(this, arguments); }
            },
            "equalByName": {
              "value": function () { return this.equal_by_name.apply(this, arguments); }
            },
            "getGsockaddr": {
              "value": function () { return this.get_gsockaddr.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getPhysical": {
              "value": function () { return this.get_physical.apply(this, arguments); }
            },
            "getPort": {
              "value": function () { return this.get_port.apply(this, arguments); }
            },
            "getSockaddr": {
              "value": function () { return this.get_sockaddr.apply(this, arguments); }
            },
            "hashByIp": {
              "value": function () { return this.hash_by_ip.apply(this, arguments); }
            },
            "hashByName": {
              "value": function () { return this.hash_by_name.apply(this, arguments); }
            },
            "isResolved": {
              "value": function () { return this.is_resolved.apply(this, arguments); }
            },
            "resolveAsync": {
              "value": function () { return this.resolve_async.apply(this, arguments); }
            },
            "resolveSync": {
              "value": function () { return this.resolve_sync.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Auth": {
          "prototype": {
            "freeProtectionSpace": {
              "value": function () { return this.free_protection_space.apply(this, arguments); }
            },
            "getAuthorization": {
              "value": function () { return this.get_authorization.apply(this, arguments); }
            },
            "getHost": {
              "value": function () { return this.get_host.apply(this, arguments); }
            },
            "getInfo": {
              "value": function () { return this.get_info.apply(this, arguments); }
            },
            "getProtectionSpace": {
              "value": function () { return this.get_protection_space.apply(this, arguments); }
            },
            "getRealm": {
              "value": function () { return this.get_realm.apply(this, arguments); }
            },
            "getSavedPassword": {
              "value": function () { return this.get_saved_password.apply(this, arguments); }
            },
            "getSavedUsers": {
              "value": function () { return this.get_saved_users.apply(this, arguments); }
            },
            "getSchemeName": {
              "value": function () { return this.get_scheme_name.apply(this, arguments); }
            },
            "hasSavedPassword": {
              "value": function () { return this.has_saved_password.apply(this, arguments); }
            },
            "isAuthenticated": {
              "get": function () { return this.is_authenticated; },
              "set": function (value) { this.is_authenticated = value; }
            },
            "isForProxy": {
              "get": function () { return this.is_for_proxy; },
              "set": function (value) { this.is_for_proxy = value; }
            },
            "isReady": {
              "value": function () { return this.is_ready.apply(this, arguments); }
            },
            "savePassword": {
              "value": function () { return this.save_password.apply(this, arguments); }
            },
            "schemeName": {
              "get": function () { return this.scheme_name; },
              "set": function (value) { this.scheme_name = value; }
            }
          },
          "static": {}
        },
        "AuthBasic": {
          "prototype": {},
          "static": {}
        },
        "AuthDigest": {
          "prototype": {},
          "static": {}
        },
        "AuthDomain": {
          "prototype": {
            "addPath": {
              "get": function () { return this.add_path; },
              "set": function (value) { this.add_path = value; }
            },
            "basicSetAuthCallback": {
              "value": function () { return this.basic_set_auth_callback.apply(this, arguments); }
            },
            "checkPassword": {
              "value": function () { return this.check_password.apply(this, arguments); }
            },
            "digestSetAuthCallback": {
              "value": function () { return this.digest_set_auth_callback.apply(this, arguments); }
            },
            "getRealm": {
              "value": function () { return this.get_realm.apply(this, arguments); }
            },
            "removePath": {
              "get": function () { return this.remove_path; },
              "set": function (value) { this.remove_path = value; }
            },
            "setFilter": {
              "value": function () { return this.set_filter.apply(this, arguments); }
            },
            "setGenericAuthCallback": {
              "value": function () { return this.set_generic_auth_callback.apply(this, arguments); }
            },
            "tryGenericAuthCallback": {
              "value": function () { return this.try_generic_auth_callback.apply(this, arguments); }
            },
            "filterData": {
              "get": function () { return this.filter_data; },
              "set": function (value) { this.filter_data = value; }
            },
            "genericAuthCallback": {
              "get": function () { return this.generic_auth_callback; },
              "set": function (value) { this.generic_auth_callback = value; }
            },
            "genericAuthData": {
              "get": function () { return this.generic_auth_data; },
              "set": function (value) { this.generic_auth_data = value; }
            }
          },
          "static": {}
        },
        "AuthDomainBasic": {
          "prototype": {
            "authCallback": {
              "get": function () { return this.auth_callback; },
              "set": function (value) { this.auth_callback = value; }
            },
            "authData": {
              "get": function () { return this.auth_data; },
              "set": function (value) { this.auth_data = value; }
            }
          },
          "static": {}
        },
        "AuthDomainDigest": {
          "prototype": {
            "authCallback": {
              "get": function () { return this.auth_callback; },
              "set": function (value) { this.auth_callback = value; }
            },
            "authData": {
              "get": function () { return this.auth_data; },
              "set": function (value) { this.auth_data = value; }
            }
          },
          "static": {
            "encodePassword": {
              "value": function () { return this.encode_password.apply(this, arguments); }
            }
          }
        },
        "AuthManager": {
          "prototype": {
            "useAuth": {
              "value": function () { return this.use_auth.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "AuthNTLM": {
          "prototype": {},
          "static": {}
        },
        "Cache": {
          "prototype": {
            "getMaxSize": {
              "value": function () { return this.get_max_size.apply(this, arguments); }
            },
            "setMaxSize": {
              "value": function () { return this.set_max_size.apply(this, arguments); }
            },
            "cacheDir": {
              "get": function () { return this.cache_dir; },
              "set": function (value) { this.cache_dir = value; }
            },
            "cacheType": {
              "get": function () { return this.cache_type; },
              "set": function (value) { this.cache_type = value; }
            }
          },
          "static": {}
        },
        "ContentDecoder": {
          "prototype": {},
          "static": {}
        },
        "ContentSniffer": {
          "prototype": {
            "getBufferSize": {
              "value": function () { return this.get_buffer_size.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "CookieJar": {
          "prototype": {
            "addCookie": {
              "value": function () { return this.add_cookie.apply(this, arguments); }
            },
            "addCookieWithFirstParty": {
              "value": function () { return this.add_cookie_with_first_party.apply(this, arguments); }
            },
            "allCookies": {
              "value": function () { return this.all_cookies.apply(this, arguments); }
            },
            "deleteCookie": {
              "value": function () { return this.delete_cookie.apply(this, arguments); }
            },
            "getAcceptPolicy": {
              "value": function () { return this.get_accept_policy.apply(this, arguments); }
            },
            "getCookieList": {
              "value": function () { return this.get_cookie_list.apply(this, arguments); }
            },
            "getCookies": {
              "value": function () { return this.get_cookies.apply(this, arguments); }
            },
            "isPersistent": {
              "value": function () { return this.is_persistent.apply(this, arguments); }
            },
            "setAcceptPolicy": {
              "value": function () { return this.set_accept_policy.apply(this, arguments); }
            },
            "setCookie": {
              "value": function () { return this.set_cookie.apply(this, arguments); }
            },
            "setCookieWithFirstParty": {
              "value": function () { return this.set_cookie_with_first_party.apply(this, arguments); }
            },
            "acceptPolicy": {
              "get": function () { return this.accept_policy; },
              "set": function (value) { this.accept_policy = value; }
            },
            "readOnly": {
              "get": function () { return this.read_only; },
              "set": function (value) { this.read_only = value; }
            }
          },
          "static": {}
        },
        "CookieJarDB": {
          "prototype": {},
          "static": {}
        },
        "CookieJarText": {
          "prototype": {},
          "static": {}
        },
        "Logger": {
          "prototype": {
            "setPrinter": {
              "value": function () { return this.set_printer.apply(this, arguments); }
            },
            "setRequestFilter": {
              "value": function () { return this.set_request_filter.apply(this, arguments); }
            },
            "setResponseFilter": {
              "value": function () { return this.set_response_filter.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Message": {
          "prototype": {
            "addHeaderHandler": {
              "value": function () { return this.add_header_handler.apply(this, arguments); }
            },
            "addStatusCodeHandler": {
              "value": function () { return this.add_status_code_handler.apply(this, arguments); }
            },
            "contentSniffed": {
              "value": function () { return this.content_sniffed.apply(this, arguments); }
            },
            "disableFeature": {
              "value": function () { return this.disable_feature.apply(this, arguments); }
            },
            "getAddress": {
              "value": function () { return this.get_address.apply(this, arguments); }
            },
            "getFirstParty": {
              "value": function () { return this.get_first_party.apply(this, arguments); }
            },
            "getFlags": {
              "value": function () { return this.get_flags.apply(this, arguments); }
            },
            "getHttpVersion": {
              "value": function () { return this.get_http_version.apply(this, arguments); }
            },
            "getHttpsStatus": {
              "value": function () { return this.get_https_status.apply(this, arguments); }
            },
            "getPriority": {
              "value": function () { return this.get_priority.apply(this, arguments); }
            },
            "getSoupRequest": {
              "value": function () { return this.get_soup_request.apply(this, arguments); }
            },
            "getUri": {
              "value": function () { return this.get_uri.apply(this, arguments); }
            },
            "gotBody": {
              "value": function () { return this.got_body.apply(this, arguments); }
            },
            "gotChunk": {
              "value": function () { return this.got_chunk.apply(this, arguments); }
            },
            "gotHeaders": {
              "value": function () { return this.got_headers.apply(this, arguments); }
            },
            "gotInformational": {
              "value": function () { return this.got_informational.apply(this, arguments); }
            },
            "isKeepalive": {
              "value": function () { return this.is_keepalive.apply(this, arguments); }
            },
            "setChunkAllocator": {
              "value": function () { return this.set_chunk_allocator.apply(this, arguments); }
            },
            "setFirstParty": {
              "value": function () { return this.set_first_party.apply(this, arguments); }
            },
            "setFlags": {
              "value": function () { return this.set_flags.apply(this, arguments); }
            },
            "setHttpVersion": {
              "value": function () { return this.set_http_version.apply(this, arguments); }
            },
            "setPriority": {
              "value": function () { return this.set_priority.apply(this, arguments); }
            },
            "setRedirect": {
              "value": function () { return this.set_redirect.apply(this, arguments); }
            },
            "setRequest": {
              "value": function () { return this.set_request.apply(this, arguments); }
            },
            "setResponse": {
              "value": function () { return this.set_response.apply(this, arguments); }
            },
            "setStatus": {
              "value": function () { return this.set_status.apply(this, arguments); }
            },
            "setStatusFull": {
              "value": function () { return this.set_status_full.apply(this, arguments); }
            },
            "setUri": {
              "value": function () { return this.set_uri.apply(this, arguments); }
            },
            "wroteBody": {
              "value": function () { return this.wrote_body.apply(this, arguments); }
            },
            "wroteBodyData": {
              "value": function () { return this.wrote_body_data.apply(this, arguments); }
            },
            "wroteChunk": {
              "value": function () { return this.wrote_chunk.apply(this, arguments); }
            },
            "wroteHeaders": {
              "value": function () { return this.wrote_headers.apply(this, arguments); }
            },
            "wroteInformational": {
              "value": function () { return this.wrote_informational.apply(this, arguments); }
            },
            "firstParty": {
              "get": function () { return this.first_party; },
              "set": function (value) { this.first_party = value; }
            },
            "httpVersion": {
              "get": function () { return this.http_version; },
              "set": function (value) { this.http_version = value; }
            },
            "reasonPhrase": {
              "get": function () { return this.reason_phrase; },
              "set": function (value) { this.reason_phrase = value; }
            },
            "requestBody": {
              "get": function () { return this.request_body; },
              "set": function (value) { this.request_body = value; }
            },
            "requestBodyData": {
              "get": function () { return this.request_body_data; },
              "set": function (value) { this.request_body_data = value; }
            },
            "requestHeaders": {
              "get": function () { return this.request_headers; },
              "set": function (value) { this.request_headers = value; }
            },
            "responseBody": {
              "get": function () { return this.response_body; },
              "set": function (value) { this.response_body = value; }
            },
            "responseBodyData": {
              "get": function () { return this.response_body_data; },
              "set": function (value) { this.response_body_data = value; }
            },
            "responseHeaders": {
              "get": function () { return this.response_headers; },
              "set": function (value) { this.response_headers = value; }
            },
            "serverSide": {
              "get": function () { return this.server_side; },
              "set": function (value) { this.server_side = value; }
            },
            "statusCode": {
              "get": function () { return this.status_code; },
              "set": function (value) { this.status_code = value; }
            },
            "tlsCertificate": {
              "get": function () { return this.tls_certificate; },
              "set": function (value) { this.tls_certificate = value; }
            },
            "tlsErrors": {
              "get": function () { return this.tls_errors; },
              "set": function (value) { this.tls_errors = value; }
            }
          },
          "static": {}
        },
        "MultipartInputStream": {
          "prototype": {
            "getHeaders": {
              "value": function () { return this.get_headers.apply(this, arguments); }
            },
            "nextPart": {
              "value": function () { return this.next_part.apply(this, arguments); }
            },
            "nextPartAsync": {
              "value": function () { return this.next_part_async.apply(this, arguments); }
            },
            "nextPartFinish": {
              "value": function () { return this.next_part_finish.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "ProxyResolverDefault": {
          "prototype": {
            "gproxyResolver": {
              "get": function () { return this.gproxy_resolver; },
              "set": function (value) { this.gproxy_resolver = value; }
            }
          },
          "static": {}
        },
        "Request": {
          "prototype": {
            "getContentLength": {
              "value": function () { return this.get_content_length.apply(this, arguments); }
            },
            "getContentType": {
              "value": function () { return this.get_content_type.apply(this, arguments); }
            },
            "getSession": {
              "value": function () { return this.get_session.apply(this, arguments); }
            },
            "getUri": {
              "value": function () { return this.get_uri.apply(this, arguments); }
            },
            "sendAsync": {
              "value": function () { return this.send_async.apply(this, arguments); }
            },
            "sendFinish": {
              "value": function () { return this.send_finish.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "RequestData": {
          "prototype": {},
          "static": {}
        },
        "RequestFile": {
          "prototype": {
            "getFile": {
              "value": function () { return this.get_file.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "RequestHTTP": {
          "prototype": {
            "getMessage": {
              "value": function () { return this.get_message.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Requester": {
          "prototype": {
            "requestUri": {
              "value": function () { return this.request_uri.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Server": {
          "prototype": {
            "acceptIostream": {
              "value": function () { return this.accept_iostream.apply(this, arguments); }
            },
            "addAuthDomain": {
              "value": function () { return this.add_auth_domain.apply(this, arguments); }
            },
            "addEarlyHandler": {
              "value": function () { return this.add_early_handler.apply(this, arguments); }
            },
            "addHandler": {
              "value": function () { return this.add_handler.apply(this, arguments); }
            },
            "addWebsocketHandler": {
              "value": function () { return this.add_websocket_handler.apply(this, arguments); }
            },
            "getAsyncContext": {
              "value": function () { return this.get_async_context.apply(this, arguments); }
            },
            "getListener": {
              "value": function () { return this.get_listener.apply(this, arguments); }
            },
            "getListeners": {
              "value": function () { return this.get_listeners.apply(this, arguments); }
            },
            "getPort": {
              "value": function () { return this.get_port.apply(this, arguments); }
            },
            "getUris": {
              "value": function () { return this.get_uris.apply(this, arguments); }
            },
            "isHttps": {
              "value": function () { return this.is_https.apply(this, arguments); }
            },
            "listenAll": {
              "value": function () { return this.listen_all.apply(this, arguments); }
            },
            "listenFd": {
              "value": function () { return this.listen_fd.apply(this, arguments); }
            },
            "listenLocal": {
              "value": function () { return this.listen_local.apply(this, arguments); }
            },
            "listenSocket": {
              "value": function () { return this.listen_socket.apply(this, arguments); }
            },
            "pauseMessage": {
              "value": function () { return this.pause_message.apply(this, arguments); }
            },
            "removeAuthDomain": {
              "value": function () { return this.remove_auth_domain.apply(this, arguments); }
            },
            "removeHandler": {
              "value": function () { return this.remove_handler.apply(this, arguments); }
            },
            "runAsync": {
              "value": function () { return this.run_async.apply(this, arguments); }
            },
            "setSslCertFile": {
              "value": function () { return this.set_ssl_cert_file.apply(this, arguments); }
            },
            "unpauseMessage": {
              "value": function () { return this.unpause_message.apply(this, arguments); }
            },
            "asyncContext": {
              "get": function () { return this.async_context; },
              "set": function (value) { this.async_context = value; }
            },
            "httpAliases": {
              "get": function () { return this.http_aliases; },
              "set": function (value) { this.http_aliases = value; }
            },
            "httpsAliases": {
              "get": function () { return this.https_aliases; },
              "set": function (value) { this.https_aliases = value; }
            },
            "rawPaths": {
              "get": function () { return this.raw_paths; },
              "set": function (value) { this.raw_paths = value; }
            },
            "serverHeader": {
              "get": function () { return this.server_header; },
              "set": function (value) { this.server_header = value; }
            },
            "sslCertFile": {
              "get": function () { return this.ssl_cert_file; },
              "set": function (value) { this.ssl_cert_file = value; }
            },
            "sslKeyFile": {
              "get": function () { return this.ssl_key_file; },
              "set": function (value) { this.ssl_key_file = value; }
            },
            "tlsCertificate": {
              "get": function () { return this.tls_certificate; },
              "set": function (value) { this.tls_certificate = value; }
            }
          },
          "static": {}
        },
        "Session": {
          "prototype": {
            "addFeature": {
              "get": function () { return this.add_feature; },
              "set": function (value) { this.add_feature = value; }
            },
            "addFeatureByType": {
              "get": function () { return this.add_feature_by_type; },
              "set": function (value) { this.add_feature_by_type = value; }
            },
            "cancelMessage": {
              "value": function () { return this.cancel_message.apply(this, arguments); }
            },
            "getAsyncContext": {
              "value": function () { return this.get_async_context.apply(this, arguments); }
            },
            "getFeature": {
              "value": function () { return this.get_feature.apply(this, arguments); }
            },
            "getFeatureForMessage": {
              "value": function () { return this.get_feature_for_message.apply(this, arguments); }
            },
            "getFeatures": {
              "value": function () { return this.get_features.apply(this, arguments); }
            },
            "hasFeature": {
              "value": function () { return this.has_feature.apply(this, arguments); }
            },
            "pauseMessage": {
              "value": function () { return this.pause_message.apply(this, arguments); }
            },
            "prefetchDns": {
              "value": function () { return this.prefetch_dns.apply(this, arguments); }
            },
            "prepareForUri": {
              "value": function () { return this.prepare_for_uri.apply(this, arguments); }
            },
            "queueMessage": {
              "value": function () { return this.queue_message.apply(this, arguments); }
            },
            "redirectMessage": {
              "value": function () { return this.redirect_message.apply(this, arguments); }
            },
            "removeFeature": {
              "value": function () { return this.remove_feature.apply(this, arguments); }
            },
            "removeFeatureByType": {
              "get": function () { return this.remove_feature_by_type; },
              "set": function (value) { this.remove_feature_by_type = value; }
            },
            "requestHttp": {
              "value": function () { return this.request_http.apply(this, arguments); }
            },
            "requestHttpUri": {
              "value": function () { return this.request_http_uri.apply(this, arguments); }
            },
            "requestUri": {
              "value": function () { return this.request_uri.apply(this, arguments); }
            },
            "requeueMessage": {
              "value": function () { return this.requeue_message.apply(this, arguments); }
            },
            "sendAsync": {
              "value": function () { return this.send_async.apply(this, arguments); }
            },
            "sendFinish": {
              "value": function () { return this.send_finish.apply(this, arguments); }
            },
            "sendMessage": {
              "value": function () { return this.send_message.apply(this, arguments); }
            },
            "stealConnection": {
              "value": function () { return this.steal_connection.apply(this, arguments); }
            },
            "unpauseMessage": {
              "value": function () { return this.unpause_message.apply(this, arguments); }
            },
            "websocketConnectAsync": {
              "value": function () { return this.websocket_connect_async.apply(this, arguments); }
            },
            "websocketConnectFinish": {
              "value": function () { return this.websocket_connect_finish.apply(this, arguments); }
            },
            "wouldRedirect": {
              "value": function () { return this.would_redirect.apply(this, arguments); }
            },
            "acceptLanguage": {
              "get": function () { return this.accept_language; },
              "set": function (value) { this.accept_language = value; }
            },
            "acceptLanguageAuto": {
              "get": function () { return this.accept_language_auto; },
              "set": function (value) { this.accept_language_auto = value; }
            },
            "asyncContext": {
              "get": function () { return this.async_context; },
              "set": function (value) { this.async_context = value; }
            },
            "httpAliases": {
              "get": function () { return this.http_aliases; },
              "set": function (value) { this.http_aliases = value; }
            },
            "httpsAliases": {
              "get": function () { return this.https_aliases; },
              "set": function (value) { this.https_aliases = value; }
            },
            "idleTimeout": {
              "get": function () { return this.idle_timeout; },
              "set": function (value) { this.idle_timeout = value; }
            },
            "localAddress": {
              "get": function () { return this.local_address; },
              "set": function (value) { this.local_address = value; }
            },
            "maxConns": {
              "get": function () { return this.max_conns; },
              "set": function (value) { this.max_conns = value; }
            },
            "maxConnsPerHost": {
              "get": function () { return this.max_conns_per_host; },
              "set": function (value) { this.max_conns_per_host = value; }
            },
            "proxyResolver": {
              "get": function () { return this.proxy_resolver; },
              "set": function (value) { this.proxy_resolver = value; }
            },
            "proxyUri": {
              "get": function () { return this.proxy_uri; },
              "set": function (value) { this.proxy_uri = value; }
            },
            "sslCaFile": {
              "get": function () { return this.ssl_ca_file; },
              "set": function (value) { this.ssl_ca_file = value; }
            },
            "sslStrict": {
              "get": function () { return this.ssl_strict; },
              "set": function (value) { this.ssl_strict = value; }
            },
            "sslUseSystemCaFile": {
              "get": function () { return this.ssl_use_system_ca_file; },
              "set": function (value) { this.ssl_use_system_ca_file = value; }
            },
            "tlsDatabase": {
              "get": function () { return this.tls_database; },
              "set": function (value) { this.tls_database = value; }
            },
            "tlsInteraction": {
              "get": function () { return this.tls_interaction; },
              "set": function (value) { this.tls_interaction = value; }
            },
            "useNtlm": {
              "get": function () { return this.use_ntlm; },
              "set": function (value) { this.use_ntlm = value; }
            },
            "useThreadContext": {
              "get": function () { return this.use_thread_context; },
              "set": function (value) { this.use_thread_context = value; }
            },
            "userAgent": {
              "get": function () { return this.user_agent; },
              "set": function (value) { this.user_agent = value; }
            }
          },
          "static": {}
        },
        "SessionAsync": {
          "prototype": {},
          "static": {}
        },
        "SessionSync": {
          "prototype": {},
          "static": {}
        },
        "Socket": {
          "prototype": {
            "connectAsync": {
              "value": function () { return this.connect_async.apply(this, arguments); }
            },
            "connectSync": {
              "value": function () { return this.connect_sync.apply(this, arguments); }
            },
            "getFd": {
              "value": function () { return this.get_fd.apply(this, arguments); }
            },
            "getLocalAddress": {
              "value": function () { return this.get_local_address.apply(this, arguments); }
            },
            "getRemoteAddress": {
              "value": function () { return this.get_remote_address.apply(this, arguments); }
            },
            "isConnected": {
              "value": function () { return this.is_connected.apply(this, arguments); }
            },
            "isSsl": {
              "value": function () { return this.is_ssl.apply(this, arguments); }
            },
            "readUntil": {
              "value": function () { return this.read_until.apply(this, arguments); }
            },
            "startProxySsl": {
              "value": function () { return this.start_proxy_ssl.apply(this, arguments); }
            },
            "startSsl": {
              "value": function () { return this.start_ssl.apply(this, arguments); }
            },
            "asyncContext": {
              "get": function () { return this.async_context; },
              "set": function (value) { this.async_context = value; }
            },
            "ipv6Only": {
              "get": function () { return this.ipv6_only; },
              "set": function (value) { this.ipv6_only = value; }
            },
            "isServer": {
              "get": function () { return this.is_server; },
              "set": function (value) { this.is_server = value; }
            },
            "localAddress": {
              "get": function () { return this.local_address; },
              "set": function (value) { this.local_address = value; }
            },
            "nonBlocking": {
              "get": function () { return this.non_blocking; },
              "set": function (value) { this.non_blocking = value; }
            },
            "remoteAddress": {
              "get": function () { return this.remote_address; },
              "set": function (value) { this.remote_address = value; }
            },
            "socketProperties": {
              "get": function () { return this.socket_properties; },
              "set": function (value) { this.socket_properties = value; }
            },
            "sslCreds": {
              "get": function () { return this.ssl_creds; },
              "set": function (value) { this.ssl_creds = value; }
            },
            "sslFallback": {
              "get": function () { return this.ssl_fallback; },
              "set": function (value) { this.ssl_fallback = value; }
            },
            "sslStrict": {
              "get": function () { return this.ssl_strict; },
              "set": function (value) { this.ssl_strict = value; }
            },
            "tlsCertificate": {
              "get": function () { return this.tls_certificate; },
              "set": function (value) { this.tls_certificate = value; }
            },
            "tlsErrors": {
              "get": function () { return this.tls_errors; },
              "set": function (value) { this.tls_errors = value; }
            },
            "trustedCertificate": {
              "get": function () { return this.trusted_certificate; },
              "set": function (value) { this.trusted_certificate = value; }
            },
            "useThreadContext": {
              "get": function () { return this.use_thread_context; },
              "set": function (value) { this.use_thread_context = value; }
            }
          },
          "static": {}
        },
        "WebsocketConnection": {
          "prototype": {
            "getCloseCode": {
              "value": function () { return this.get_close_code.apply(this, arguments); }
            },
            "getCloseData": {
              "value": function () { return this.get_close_data.apply(this, arguments); }
            },
            "getConnectionType": {
              "value": function () { return this.get_connection_type.apply(this, arguments); }
            },
            "getIoStream": {
              "value": function () { return this.get_io_stream.apply(this, arguments); }
            },
            "getOrigin": {
              "value": function () { return this.get_origin.apply(this, arguments); }
            },
            "getProtocol": {
              "value": function () { return this.get_protocol.apply(this, arguments); }
            },
            "getState": {
              "value": function () { return this.get_state.apply(this, arguments); }
            },
            "getUri": {
              "value": function () { return this.get_uri.apply(this, arguments); }
            },
            "sendBinary": {
              "value": function () { return this.send_binary.apply(this, arguments); }
            },
            "sendText": {
              "value": function () { return this.send_text.apply(this, arguments); }
            },
            "connectionType": {
              "get": function () { return this.connection_type; },
              "set": function (value) { this.connection_type = value; }
            },
            "ioStream": {
              "get": function () { return this.io_stream; },
              "set": function (value) { this.io_stream = value; }
            }
          },
          "static": {}
        }
      },
      "static": {
        "addCompletion": {
          "value": function () { return this.add_completion.apply(this, arguments); }
        },
        "addIdle": {
          "value": function () { return this.add_idle.apply(this, arguments); }
        },
        "addIoWatch": {
          "value": function () { return this.add_io_watch.apply(this, arguments); }
        },
        "addTimeout": {
          "value": function () { return this.add_timeout.apply(this, arguments); }
        },
        "cookieParse": {
          "value": function () { return this.cookie_parse.apply(this, arguments); }
        },
        "cookiesFree": {
          "value": function () { return this.cookies_free.apply(this, arguments); }
        },
        "cookiesFromRequest": {
          "value": function () { return this.cookies_from_request.apply(this, arguments); }
        },
        "cookiesFromResponse": {
          "value": function () { return this.cookies_from_response.apply(this, arguments); }
        },
        "cookiesToCookieHeader": {
          "value": function () { return this.cookies_to_cookie_header.apply(this, arguments); }
        },
        "cookiesToRequest": {
          "value": function () { return this.cookies_to_request.apply(this, arguments); }
        },
        "cookiesToResponse": {
          "value": function () { return this.cookies_to_response.apply(this, arguments); }
        },
        "formDecode": {
          "value": function () { return this.form_decode.apply(this, arguments); }
        },
        "formDecodeMultipart": {
          "value": function () { return this.form_decode_multipart.apply(this, arguments); }
        },
        "formEncode": {
          "value": function () { return this.form_encode.apply(this, arguments); }
        },
        "formEncodeDatalist": {
          "value": function () { return this.form_encode_datalist.apply(this, arguments); }
        },
        "formEncodeHash": {
          "value": function () { return this.form_encode_hash.apply(this, arguments); }
        },
        "formEncodeValist": {
          "value": function () { return this.form_encode_valist.apply(this, arguments); }
        },
        "formRequestNew": {
          "value": function () { return this.form_request_new.apply(this, arguments); }
        },
        "formRequestNewFromDatalist": {
          "value": function () { return this.form_request_new_from_datalist.apply(this, arguments); }
        },
        "formRequestNewFromHash": {
          "value": function () { return this.form_request_new_from_hash.apply(this, arguments); }
        },
        "formRequestNewFromMultipart": {
          "value": function () { return this.form_request_new_from_multipart.apply(this, arguments); }
        },
        "headerContains": {
          "value": function () { return this.header_contains.apply(this, arguments); }
        },
        "headerFreeList": {
          "value": function () { return this.header_free_list.apply(this, arguments); }
        },
        "headerFreeParamList": {
          "value": function () { return this.header_free_param_list.apply(this, arguments); }
        },
        "headerGStringAppendParam": {
          "value": function () { return this.header_g_string_append_param.apply(this, arguments); }
        },
        "headerGStringAppendParamQuoted": {
          "value": function () { return this.header_g_string_append_param_quoted.apply(this, arguments); }
        },
        "headerParseList": {
          "value": function () { return this.header_parse_list.apply(this, arguments); }
        },
        "headerParseParamList": {
          "value": function () { return this.header_parse_param_list.apply(this, arguments); }
        },
        "headerParseQualityList": {
          "value": function () { return this.header_parse_quality_list.apply(this, arguments); }
        },
        "headerParseSemiParamList": {
          "value": function () { return this.header_parse_semi_param_list.apply(this, arguments); }
        },
        "headersParse": {
          "value": function () { return this.headers_parse.apply(this, arguments); }
        },
        "headersParseRequest": {
          "value": function () { return this.headers_parse_request.apply(this, arguments); }
        },
        "headersParseResponse": {
          "value": function () { return this.headers_parse_response.apply(this, arguments); }
        },
        "headersParseStatusLine": {
          "value": function () { return this.headers_parse_status_line.apply(this, arguments); }
        },
        "httpErrorQuark": {
          "value": function () { return this.http_error_quark.apply(this, arguments); }
        },
        "messageHeadersIterInit": {
          "value": function () { return this.message_headers_iter_init.apply(this, arguments); }
        },
        "requestErrorQuark": {
          "value": function () { return this.request_error_quark.apply(this, arguments); }
        },
        "requesterErrorQuark": {
          "value": function () { return this.requester_error_quark.apply(this, arguments); }
        },
        "statusGetPhrase": {
          "value": function () { return this.status_get_phrase.apply(this, arguments); }
        },
        "statusProxify": {
          "value": function () { return this.status_proxify.apply(this, arguments); }
        },
        "strCaseEqual": {
          "value": function () { return this.str_case_equal.apply(this, arguments); }
        },
        "strCaseHash": {
          "value": function () { return this.str_case_hash.apply(this, arguments); }
        },
        "tldDomainIsPublicSuffix": {
          "value": function () { return this.tld_domain_is_public_suffix.apply(this, arguments); }
        },
        "tldErrorQuark": {
          "value": function () { return this.tld_error_quark.apply(this, arguments); }
        },
        "tldGetBaseDomain": {
          "value": function () { return this.tld_get_base_domain.apply(this, arguments); }
        },
        "uriDecode": {
          "value": function () { return this.uri_decode.apply(this, arguments); }
        },
        "uriEncode": {
          "value": function () { return this.uri_encode.apply(this, arguments); }
        },
        "uriNormalize": {
          "value": function () { return this.uri_normalize.apply(this, arguments); }
        },
        "valueArrayAppend": {
          "value": function () { return this.value_array_append.apply(this, arguments); }
        },
        "valueArrayAppendVals": {
          "value": function () { return this.value_array_append_vals.apply(this, arguments); }
        },
        "valueArrayFromArgs": {
          "value": function () { return this.value_array_from_args.apply(this, arguments); }
        },
        "valueArrayGetNth": {
          "value": function () { return this.value_array_get_nth.apply(this, arguments); }
        },
        "valueArrayInsert": {
          "value": function () { return this.value_array_insert.apply(this, arguments); }
        },
        "valueArrayNew": {
          "value": function () { return this.value_array_new.apply(this, arguments); }
        },
        "valueArrayNewWithVals": {
          "value": function () { return this.value_array_new_with_vals.apply(this, arguments); }
        },
        "valueArrayToArgs": {
          "value": function () { return this.value_array_to_args.apply(this, arguments); }
        },
        "valueHashInsert": {
          "value": function () { return this.value_hash_insert.apply(this, arguments); }
        },
        "valueHashInsertVals": {
          "value": function () { return this.value_hash_insert_vals.apply(this, arguments); }
        },
        "valueHashInsertValue": {
          "value": function () { return this.value_hash_insert_value.apply(this, arguments); }
        },
        "valueHashLookup": {
          "value": function () { return this.value_hash_lookup.apply(this, arguments); }
        },
        "valueHashLookupVals": {
          "value": function () { return this.value_hash_lookup_vals.apply(this, arguments); }
        },
        "valueHashNew": {
          "value": function () { return this.value_hash_new.apply(this, arguments); }
        },
        "valueHashNewWithVals": {
          "value": function () { return this.value_hash_new_with_vals.apply(this, arguments); }
        },
        "websocketClientPrepareHandshake": {
          "value": function () { return this.websocket_client_prepare_handshake.apply(this, arguments); }
        },
        "websocketClientVerifyHandshake": {
          "value": function () { return this.websocket_client_verify_handshake.apply(this, arguments); }
        },
        "websocketErrorGetQuark": {
          "value": function () { return this.websocket_error_get_quark.apply(this, arguments); }
        },
        "websocketServerCheckHandshake": {
          "value": function () { return this.websocket_server_check_handshake.apply(this, arguments); }
        },
        "websocketServerProcessHandshake": {
          "value": function () { return this.websocket_server_process_handshake.apply(this, arguments); }
        },
        "xmlrpcBuildFault": {
          "value": function () { return this.xmlrpc_build_fault.apply(this, arguments); }
        },
        "xmlrpcBuildMethodCall": {
          "value": function () { return this.xmlrpc_build_method_call.apply(this, arguments); }
        },
        "xmlrpcBuildMethodResponse": {
          "value": function () { return this.xmlrpc_build_method_response.apply(this, arguments); }
        },
        "xmlrpcBuildRequest": {
          "value": function () { return this.xmlrpc_build_request.apply(this, arguments); }
        },
        "xmlrpcBuildResponse": {
          "value": function () { return this.xmlrpc_build_response.apply(this, arguments); }
        },
        "xmlrpcErrorQuark": {
          "value": function () { return this.xmlrpc_error_quark.apply(this, arguments); }
        },
        "xmlrpcExtractMethodCall": {
          "value": function () { return this.xmlrpc_extract_method_call.apply(this, arguments); }
        },
        "xmlrpcExtractMethodResponse": {
          "value": function () { return this.xmlrpc_extract_method_response.apply(this, arguments); }
        },
        "xmlrpcFaultQuark": {
          "value": function () { return this.xmlrpc_fault_quark.apply(this, arguments); }
        },
        "xmlrpcMessageNew": {
          "value": function () { return this.xmlrpc_message_new.apply(this, arguments); }
        },
        "xmlrpcMessageSetFault": {
          "value": function () { return this.xmlrpc_message_set_fault.apply(this, arguments); }
        },
        "xmlrpcMessageSetResponse": {
          "value": function () { return this.xmlrpc_message_set_response.apply(this, arguments); }
        },
        "xmlrpcParseMethodCall": {
          "value": function () { return this.xmlrpc_parse_method_call.apply(this, arguments); }
        },
        "xmlrpcParseMethodResponse": {
          "value": function () { return this.xmlrpc_parse_method_response.apply(this, arguments); }
        },
        "xmlrpcParseRequest": {
          "value": function () { return this.xmlrpc_parse_request.apply(this, arguments); }
        },
        "xmlrpcParseResponse": {
          "value": function () { return this.xmlrpc_parse_response.apply(this, arguments); }
        },
        "xmlrpcRequestNew": {
          "value": function () { return this.xmlrpc_request_new.apply(this, arguments); }
        },
        "xmlrpcSetFault": {
          "value": function () { return this.xmlrpc_set_fault.apply(this, arguments); }
        },
        "xmlrpcSetResponse": {
          "value": function () { return this.xmlrpc_set_response.apply(this, arguments); }
        },
        "xmlrpcVariantGetDatetime": {
          "value": function () { return this.xmlrpc_variant_get_datetime.apply(this, arguments); }
        },
        "xmlrpcVariantNewDatetime": {
          "value": function () { return this.xmlrpc_variant_new_datetime.apply(this, arguments); }
        }
      }
    },
    "TelepathyGLib": {
      "class": {
        "Account": {
          "prototype": {
            "associatedWithUriScheme": {
              "value": function () { return this.associated_with_uri_scheme.apply(this, arguments); }
            },
            "bindConnectionStatusToProperty": {
              "value": function () { return this.bind_connection_status_to_property.apply(this, arguments); }
            },
            "dupDetailedErrorVardict": {
              "value": function () { return this.dup_detailed_error_vardict.apply(this, arguments); }
            },
            "dupParametersVardict": {
              "value": function () { return this.dup_parameters_vardict.apply(this, arguments); }
            },
            "dupStorageIdentifierVariant": {
              "value": function () { return this.dup_storage_identifier_variant.apply(this, arguments); }
            },
            "dupStorageSpecificInformationVardictAsync": {
              "value": function () { return this.dup_storage_specific_information_vardict_async.apply(this, arguments); }
            },
            "dupStorageSpecificInformationVardictFinish": {
              "value": function () { return this.dup_storage_specific_information_vardict_finish.apply(this, arguments); }
            },
            "ensureConnection": {
              "value": function () { return this.ensure_connection.apply(this, arguments); }
            },
            "getAutomaticPresence": {
              "value": function () { return this.get_automatic_presence.apply(this, arguments); }
            },
            "getAvatarAsync": {
              "value": function () { return this.get_avatar_async.apply(this, arguments); }
            },
            "getAvatarFinish": {
              "value": function () { return this.get_avatar_finish.apply(this, arguments); }
            },
            "getChangingPresence": {
              "value": function () { return this.get_changing_presence.apply(this, arguments); }
            },
            "getCmName": {
              "value": function () { return this.get_cm_name.apply(this, arguments); }
            },
            "getConnectAutomatically": {
              "value": function () { return this.get_connect_automatically.apply(this, arguments); }
            },
            "getConnection": {
              "value": function () { return this.get_connection.apply(this, arguments); }
            },
            "getConnectionManager": {
              "value": function () { return this.get_connection_manager.apply(this, arguments); }
            },
            "getConnectionStatus": {
              "value": function () { return this.get_connection_status.apply(this, arguments); }
            },
            "getCurrentPresence": {
              "value": function () { return this.get_current_presence.apply(this, arguments); }
            },
            "getDetailedError": {
              "value": function () { return this.get_detailed_error.apply(this, arguments); }
            },
            "getDisplayName": {
              "value": function () { return this.get_display_name.apply(this, arguments); }
            },
            "getHasBeenOnline": {
              "value": function () { return this.get_has_been_online.apply(this, arguments); }
            },
            "getIconName": {
              "value": function () { return this.get_icon_name.apply(this, arguments); }
            },
            "getNickname": {
              "value": function () { return this.get_nickname.apply(this, arguments); }
            },
            "getNormalizedName": {
              "value": function () { return this.get_normalized_name.apply(this, arguments); }
            },
            "getParameters": {
              "value": function () { return this.get_parameters.apply(this, arguments); }
            },
            "getPathSuffix": {
              "value": function () { return this.get_path_suffix.apply(this, arguments); }
            },
            "getProtocol": {
              "value": function () { return this.get_protocol.apply(this, arguments); }
            },
            "getProtocolName": {
              "value": function () { return this.get_protocol_name.apply(this, arguments); }
            },
            "getRequestedPresence": {
              "value": function () { return this.get_requested_presence.apply(this, arguments); }
            },
            "getService": {
              "value": function () { return this.get_service.apply(this, arguments); }
            },
            "getStorageIdentifier": {
              "value": function () { return this.get_storage_identifier.apply(this, arguments); }
            },
            "getStorageProvider": {
              "value": function () { return this.get_storage_provider.apply(this, arguments); }
            },
            "getStorageRestrictions": {
              "value": function () { return this.get_storage_restrictions.apply(this, arguments); }
            },
            "getStorageSpecificInformationAsync": {
              "value": function () { return this.get_storage_specific_information_async.apply(this, arguments); }
            },
            "getStorageSpecificInformationFinish": {
              "value": function () { return this.get_storage_specific_information_finish.apply(this, arguments); }
            },
            "getSupersedes": {
              "value": function () { return this.get_supersedes.apply(this, arguments); }
            },
            "getUriSchemes": {
              "value": function () { return this.get_uri_schemes.apply(this, arguments); }
            },
            "isEnabled": {
              "value": function () { return this.is_enabled.apply(this, arguments); }
            },
            "isPrepared": {
              "value": function () { return this.is_prepared.apply(this, arguments); }
            },
            "isValid": {
              "value": function () { return this.is_valid.apply(this, arguments); }
            },
            "prepareAsync": {
              "value": function () { return this.prepare_async.apply(this, arguments); }
            },
            "prepareFinish": {
              "value": function () { return this.prepare_finish.apply(this, arguments); }
            },
            "reconnectAsync": {
              "value": function () { return this.reconnect_async.apply(this, arguments); }
            },
            "reconnectFinish": {
              "value": function () { return this.reconnect_finish.apply(this, arguments); }
            },
            "removeAsync": {
              "value": function () { return this.remove_async.apply(this, arguments); }
            },
            "removeFinish": {
              "value": function () { return this.remove_finish.apply(this, arguments); }
            },
            "requestPresenceAsync": {
              "value": function () { return this.request_presence_async.apply(this, arguments); }
            },
            "requestPresenceFinish": {
              "value": function () { return this.request_presence_finish.apply(this, arguments); }
            },
            "setAutomaticPresenceAsync": {
              "value": function () { return this.set_automatic_presence_async.apply(this, arguments); }
            },
            "setAutomaticPresenceFinish": {
              "value": function () { return this.set_automatic_presence_finish.apply(this, arguments); }
            },
            "setAvatarAsync": {
              "value": function () { return this.set_avatar_async.apply(this, arguments); }
            },
            "setAvatarFinish": {
              "value": function () { return this.set_avatar_finish.apply(this, arguments); }
            },
            "setConnectAutomaticallyAsync": {
              "value": function () { return this.set_connect_automatically_async.apply(this, arguments); }
            },
            "setConnectAutomaticallyFinish": {
              "value": function () { return this.set_connect_automatically_finish.apply(this, arguments); }
            },
            "setDisplayNameAsync": {
              "value": function () { return this.set_display_name_async.apply(this, arguments); }
            },
            "setDisplayNameFinish": {
              "value": function () { return this.set_display_name_finish.apply(this, arguments); }
            },
            "setEnabledAsync": {
              "value": function () { return this.set_enabled_async.apply(this, arguments); }
            },
            "setEnabledFinish": {
              "value": function () { return this.set_enabled_finish.apply(this, arguments); }
            },
            "setIconNameAsync": {
              "value": function () { return this.set_icon_name_async.apply(this, arguments); }
            },
            "setIconNameFinish": {
              "value": function () { return this.set_icon_name_finish.apply(this, arguments); }
            },
            "setNicknameAsync": {
              "value": function () { return this.set_nickname_async.apply(this, arguments); }
            },
            "setNicknameFinish": {
              "value": function () { return this.set_nickname_finish.apply(this, arguments); }
            },
            "setServiceAsync": {
              "value": function () { return this.set_service_async.apply(this, arguments); }
            },
            "setServiceFinish": {
              "value": function () { return this.set_service_finish.apply(this, arguments); }
            },
            "setUriSchemeAssociationAsync": {
              "value": function () { return this.set_uri_scheme_association_async.apply(this, arguments); }
            },
            "setUriSchemeAssociationFinish": {
              "value": function () { return this.set_uri_scheme_association_finish.apply(this, arguments); }
            },
            "updateParametersAsync": {
              "value": function () { return this.update_parameters_async.apply(this, arguments); }
            },
            "updateParametersFinish": {
              "value": function () { return this.update_parameters_finish.apply(this, arguments); }
            },
            "updateParametersVardictAsync": {
              "value": function () { return this.update_parameters_vardict_async.apply(this, arguments); }
            },
            "updateParametersVardictFinish": {
              "value": function () { return this.update_parameters_vardict_finish.apply(this, arguments); }
            },
            "automaticPresenceType": {
              "get": function () { return this.automatic_presence_type; },
              "set": function (value) { this.automatic_presence_type = value; }
            },
            "automaticStatus": {
              "get": function () { return this.automatic_status; },
              "set": function (value) { this.automatic_status = value; }
            },
            "automaticStatusMessage": {
              "get": function () { return this.automatic_status_message; },
              "set": function (value) { this.automatic_status_message = value; }
            },
            "changingPresence": {
              "get": function () { return this.changing_presence; },
              "set": function (value) { this.changing_presence = value; }
            },
            "cmName": {
              "get": function () { return this.cm_name; },
              "set": function (value) { this.cm_name = value; }
            },
            "connectAutomatically": {
              "get": function () { return this.connect_automatically; },
              "set": function (value) { this.connect_automatically = value; }
            },
            "connectionError": {
              "get": function () { return this.connection_error; },
              "set": function (value) { this.connection_error = value; }
            },
            "connectionErrorDetails": {
              "get": function () { return this.connection_error_details; },
              "set": function (value) { this.connection_error_details = value; }
            },
            "connectionManager": {
              "get": function () { return this.connection_manager; },
              "set": function (value) { this.connection_manager = value; }
            },
            "connectionStatus": {
              "get": function () { return this.connection_status; },
              "set": function (value) { this.connection_status = value; }
            },
            "connectionStatusReason": {
              "get": function () { return this.connection_status_reason; },
              "set": function (value) { this.connection_status_reason = value; }
            },
            "currentPresenceType": {
              "get": function () { return this.current_presence_type; },
              "set": function (value) { this.current_presence_type = value; }
            },
            "currentStatus": {
              "get": function () { return this.current_status; },
              "set": function (value) { this.current_status = value; }
            },
            "currentStatusMessage": {
              "get": function () { return this.current_status_message; },
              "set": function (value) { this.current_status_message = value; }
            },
            "displayName": {
              "get": function () { return this.display_name; },
              "set": function (value) { this.display_name = value; }
            },
            "hasBeenOnline": {
              "get": function () { return this.has_been_online; },
              "set": function (value) { this.has_been_online = value; }
            },
            "iconName": {
              "get": function () { return this.icon_name; },
              "set": function (value) { this.icon_name = value; }
            },
            "normalizedName": {
              "get": function () { return this.normalized_name; },
              "set": function (value) { this.normalized_name = value; }
            },
            "protocolName": {
              "get": function () { return this.protocol_name; },
              "set": function (value) { this.protocol_name = value; }
            },
            "requestedPresenceType": {
              "get": function () { return this.requested_presence_type; },
              "set": function (value) { this.requested_presence_type = value; }
            },
            "requestedStatus": {
              "get": function () { return this.requested_status; },
              "set": function (value) { this.requested_status = value; }
            },
            "requestedStatusMessage": {
              "get": function () { return this.requested_status_message; },
              "set": function (value) { this.requested_status_message = value; }
            },
            "storageIdentifier": {
              "get": function () { return this.storage_identifier; },
              "set": function (value) { this.storage_identifier = value; }
            },
            "storageIdentifierVariant": {
              "get": function () { return this.storage_identifier_variant; },
              "set": function (value) { this.storage_identifier_variant = value; }
            },
            "storageProvider": {
              "get": function () { return this.storage_provider; },
              "set": function (value) { this.storage_provider = value; }
            },
            "storageRestrictions": {
              "get": function () { return this.storage_restrictions; },
              "set": function (value) { this.storage_restrictions = value; }
            },
            "uriSchemes": {
              "get": function () { return this.uri_schemes; },
              "set": function (value) { this.uri_schemes = value; }
            }
          },
          "static": {
            "getFeatureQuarkAddressing": {
              "value": function () { return this.get_feature_quark_addressing.apply(this, arguments); }
            },
            "getFeatureQuarkConnection": {
              "value": function () { return this.get_feature_quark_connection.apply(this, arguments); }
            },
            "getFeatureQuarkCore": {
              "value": function () { return this.get_feature_quark_core.apply(this, arguments); }
            },
            "getFeatureQuarkStorage": {
              "value": function () { return this.get_feature_quark_storage.apply(this, arguments); }
            },
            "initKnownInterfaces": {
              "value": function () { return this.init_known_interfaces.apply(this, arguments); }
            },
            "parseObjectPath": {
              "value": function () { return this.parse_object_path.apply(this, arguments); }
            }
          }
        },
        "AccountChannelRequest": {
          "prototype": {
            "createAndHandleChannelAsync": {
              "value": function () { return this.create_and_handle_channel_async.apply(this, arguments); }
            },
            "createAndHandleChannelFinish": {
              "value": function () { return this.create_and_handle_channel_finish.apply(this, arguments); }
            },
            "createAndObserveChannelAsync": {
              "value": function () { return this.create_and_observe_channel_async.apply(this, arguments); }
            },
            "createAndObserveChannelFinish": {
              "value": function () { return this.create_and_observe_channel_finish.apply(this, arguments); }
            },
            "createChannelAsync": {
              "value": function () { return this.create_channel_async.apply(this, arguments); }
            },
            "createChannelFinish": {
              "value": function () { return this.create_channel_finish.apply(this, arguments); }
            },
            "dupRequest": {
              "value": function () { return this.dup_request.apply(this, arguments); }
            },
            "ensureAndHandleChannelAsync": {
              "value": function () { return this.ensure_and_handle_channel_async.apply(this, arguments); }
            },
            "ensureAndHandleChannelFinish": {
              "value": function () { return this.ensure_and_handle_channel_finish.apply(this, arguments); }
            },
            "ensureAndObserveChannelAsync": {
              "value": function () { return this.ensure_and_observe_channel_async.apply(this, arguments); }
            },
            "ensureAndObserveChannelFinish": {
              "value": function () { return this.ensure_and_observe_channel_finish.apply(this, arguments); }
            },
            "ensureChannelAsync": {
              "value": function () { return this.ensure_channel_async.apply(this, arguments); }
            },
            "ensureChannelFinish": {
              "value": function () { return this.ensure_channel_finish.apply(this, arguments); }
            },
            "getAccount": {
              "value": function () { return this.get_account.apply(this, arguments); }
            },
            "getChannelRequest": {
              "value": function () { return this.get_channel_request.apply(this, arguments); }
            },
            "getRequest": {
              "value": function () { return this.get_request.apply(this, arguments); }
            },
            "getUserActionTime": {
              "value": function () { return this.get_user_action_time.apply(this, arguments); }
            },
            "setChannelFactory": {
              "value": function () { return this.set_channel_factory.apply(this, arguments); }
            },
            "setConferenceInitialChannels": {
              "value": function () { return this.set_conference_initial_channels.apply(this, arguments); }
            },
            "setDelegateToPreferredHandler": {
              "value": function () { return this.set_delegate_to_preferred_handler.apply(this, arguments); }
            },
            "setDelegatedChannelCallback": {
              "value": function () { return this.set_delegated_channel_callback.apply(this, arguments); }
            },
            "setFileTransferDescription": {
              "value": function () { return this.set_file_transfer_description.apply(this, arguments); }
            },
            "setFileTransferHash": {
              "value": function () { return this.set_file_transfer_hash.apply(this, arguments); }
            },
            "setFileTransferInitialOffset": {
              "value": function () { return this.set_file_transfer_initial_offset.apply(this, arguments); }
            },
            "setFileTransferTimestamp": {
              "value": function () { return this.set_file_transfer_timestamp.apply(this, arguments); }
            },
            "setFileTransferUri": {
              "value": function () { return this.set_file_transfer_uri.apply(this, arguments); }
            },
            "setHint": {
              "value": function () { return this.set_hint.apply(this, arguments); }
            },
            "setHints": {
              "value": function () { return this.set_hints.apply(this, arguments); }
            },
            "setInitialInviteeIds": {
              "value": function () { return this.set_initial_invitee_ids.apply(this, arguments); }
            },
            "setInitialInvitees": {
              "value": function () { return this.set_initial_invitees.apply(this, arguments); }
            },
            "setRequestProperty": {
              "value": function () { return this.set_request_property.apply(this, arguments); }
            },
            "setSmsChannel": {
              "value": function () { return this.set_sms_channel.apply(this, arguments); }
            },
            "setTargetContact": {
              "value": function () { return this.set_target_contact.apply(this, arguments); }
            },
            "setTargetId": {
              "value": function () { return this.set_target_id.apply(this, arguments); }
            },
            "channelRequest": {
              "get": function () { return this.channel_request; },
              "set": function (value) { this.channel_request = value; }
            },
            "requestVardict": {
              "get": function () { return this.request_vardict; },
              "set": function (value) { this.request_vardict = value; }
            },
            "userActionTime": {
              "get": function () { return this.user_action_time; },
              "set": function (value) { this.user_action_time = value; }
            }
          },
          "static": {}
        },
        "AccountManager": {
          "prototype": {
            "createAccountAsync": {
              "value": function () { return this.create_account_async.apply(this, arguments); }
            },
            "createAccountFinish": {
              "value": function () { return this.create_account_finish.apply(this, arguments); }
            },
            "dupValidAccounts": {
              "value": function () { return this.dup_valid_accounts.apply(this, arguments); }
            },
            "enableRestart": {
              "value": function () { return this.enable_restart.apply(this, arguments); }
            },
            "ensureAccount": {
              "value": function () { return this.ensure_account.apply(this, arguments); }
            },
            "getMostAvailablePresence": {
              "value": function () { return this.get_most_available_presence.apply(this, arguments); }
            },
            "getValidAccounts": {
              "value": function () { return this.get_valid_accounts.apply(this, arguments); }
            },
            "isPrepared": {
              "value": function () { return this.is_prepared.apply(this, arguments); }
            },
            "prepareAsync": {
              "value": function () { return this.prepare_async.apply(this, arguments); }
            },
            "prepareFinish": {
              "value": function () { return this.prepare_finish.apply(this, arguments); }
            },
            "setAllRequestedPresences": {
              "value": function () { return this.set_all_requested_presences.apply(this, arguments); }
            },
            "setDefault": {
              "value": function () { return this.set_default.apply(this, arguments); }
            }
          },
          "static": {
            "canSetDefault": {
              "value": function () { return this.can_set_default.apply(this, arguments); }
            },
            "getFeatureQuarkCore": {
              "value": function () { return this.get_feature_quark_core.apply(this, arguments); }
            },
            "initKnownInterfaces": {
              "value": function () { return this.init_known_interfaces.apply(this, arguments); }
            }
          }
        },
        "AccountRequest": {
          "prototype": {
            "addSupersedes": {
              "value": function () { return this.add_supersedes.apply(this, arguments); }
            },
            "createAccountAsync": {
              "value": function () { return this.create_account_async.apply(this, arguments); }
            },
            "createAccountFinish": {
              "value": function () { return this.create_account_finish.apply(this, arguments); }
            },
            "setAutomaticPresence": {
              "value": function () { return this.set_automatic_presence.apply(this, arguments); }
            },
            "setAvatar": {
              "value": function () { return this.set_avatar.apply(this, arguments); }
            },
            "setConnectAutomatically": {
              "value": function () { return this.set_connect_automatically.apply(this, arguments); }
            },
            "setDisplayName": {
              "value": function () { return this.set_display_name.apply(this, arguments); }
            },
            "setEnabled": {
              "value": function () { return this.set_enabled.apply(this, arguments); }
            },
            "setIconName": {
              "value": function () { return this.set_icon_name.apply(this, arguments); }
            },
            "setNickname": {
              "value": function () { return this.set_nickname.apply(this, arguments); }
            },
            "setParameter": {
              "value": function () { return this.set_parameter.apply(this, arguments); }
            },
            "setParameterString": {
              "value": function () { return this.set_parameter_string.apply(this, arguments); }
            },
            "setRequestedPresence": {
              "value": function () { return this.set_requested_presence.apply(this, arguments); }
            },
            "setService": {
              "value": function () { return this.set_service.apply(this, arguments); }
            },
            "setStorageProvider": {
              "value": function () { return this.set_storage_provider.apply(this, arguments); }
            },
            "unsetParameter": {
              "value": function () { return this.unset_parameter.apply(this, arguments); }
            },
            "accountManager": {
              "get": function () { return this.account_manager; },
              "set": function (value) { this.account_manager = value; }
            },
            "automaticPresenceType": {
              "get": function () { return this.automatic_presence_type; },
              "set": function (value) { this.automatic_presence_type = value; }
            },
            "automaticStatus": {
              "get": function () { return this.automatic_status; },
              "set": function (value) { this.automatic_status = value; }
            },
            "automaticStatusMessage": {
              "get": function () { return this.automatic_status_message; },
              "set": function (value) { this.automatic_status_message = value; }
            },
            "avatarMimeType": {
              "get": function () { return this.avatar_mime_type; },
              "set": function (value) { this.avatar_mime_type = value; }
            },
            "connectAutomatically": {
              "get": function () { return this.connect_automatically; },
              "set": function (value) { this.connect_automatically = value; }
            },
            "connectionManager": {
              "get": function () { return this.connection_manager; },
              "set": function (value) { this.connection_manager = value; }
            },
            "displayName": {
              "get": function () { return this.display_name; },
              "set": function (value) { this.display_name = value; }
            },
            "iconName": {
              "get": function () { return this.icon_name; },
              "set": function (value) { this.icon_name = value; }
            },
            "requestedPresenceType": {
              "get": function () { return this.requested_presence_type; },
              "set": function (value) { this.requested_presence_type = value; }
            },
            "requestedStatus": {
              "get": function () { return this.requested_status; },
              "set": function (value) { this.requested_status = value; }
            },
            "requestedStatusMessage": {
              "get": function () { return this.requested_status_message; },
              "set": function (value) { this.requested_status_message = value; }
            },
            "storageProvider": {
              "get": function () { return this.storage_provider; },
              "set": function (value) { this.storage_provider = value; }
            }
          },
          "static": {}
        },
        "AddDispatchOperationContext": {
          "prototype": {
            "dbusContext": {
              "get": function () { return this.dbus_context; },
              "set": function (value) { this.dbus_context = value; }
            },
            "dispatchOperation": {
              "get": function () { return this.dispatch_operation; },
              "set": function (value) { this.dispatch_operation = value; }
            }
          },
          "static": {}
        },
        "AutomaticClientFactory": {
          "prototype": {},
          "static": {}
        },
        "AutomaticProxyFactory": {
          "prototype": {},
          "static": {}
        },
        "BaseClient": {
          "prototype": {
            "addAccountFeatures": {
              "value": function () { return this.add_account_features.apply(this, arguments); }
            },
            "addAccountFeaturesVarargs": {
              "value": function () { return this.add_account_features_varargs.apply(this, arguments); }
            },
            "addApproverFilter": {
              "value": function () { return this.add_approver_filter.apply(this, arguments); }
            },
            "addApproverFilterVardict": {
              "value": function () { return this.add_approver_filter_vardict.apply(this, arguments); }
            },
            "addChannelFeatures": {
              "value": function () { return this.add_channel_features.apply(this, arguments); }
            },
            "addChannelFeaturesVarargs": {
              "value": function () { return this.add_channel_features_varargs.apply(this, arguments); }
            },
            "addConnectionFeatures": {
              "value": function () { return this.add_connection_features.apply(this, arguments); }
            },
            "addConnectionFeaturesVarargs": {
              "value": function () { return this.add_connection_features_varargs.apply(this, arguments); }
            },
            "addHandlerCapabilities": {
              "value": function () { return this.add_handler_capabilities.apply(this, arguments); }
            },
            "addHandlerCapabilitiesVarargs": {
              "value": function () { return this.add_handler_capabilities_varargs.apply(this, arguments); }
            },
            "addHandlerCapability": {
              "value": function () { return this.add_handler_capability.apply(this, arguments); }
            },
            "addHandlerFilter": {
              "value": function () { return this.add_handler_filter.apply(this, arguments); }
            },
            "addHandlerFilterVardict": {
              "value": function () { return this.add_handler_filter_vardict.apply(this, arguments); }
            },
            "addObserverFilter": {
              "value": function () { return this.add_observer_filter.apply(this, arguments); }
            },
            "addObserverFilterVardict": {
              "value": function () { return this.add_observer_filter_vardict.apply(this, arguments); }
            },
            "beAHandler": {
              "value": function () { return this.be_a_handler.apply(this, arguments); }
            },
            "delegateChannelsAsync": {
              "value": function () { return this.delegate_channels_async.apply(this, arguments); }
            },
            "delegateChannelsFinish": {
              "value": function () { return this.delegate_channels_finish.apply(this, arguments); }
            },
            "dupHandledChannels": {
              "value": function () { return this.dup_handled_channels.apply(this, arguments); }
            },
            "dupPendingRequests": {
              "value": function () { return this.dup_pending_requests.apply(this, arguments); }
            },
            "getAccountManager": {
              "value": function () { return this.get_account_manager.apply(this, arguments); }
            },
            "getBusName": {
              "value": function () { return this.get_bus_name.apply(this, arguments); }
            },
            "getChannelFactory": {
              "value": function () { return this.get_channel_factory.apply(this, arguments); }
            },
            "getDbusDaemon": {
              "value": function () { return this.get_dbus_daemon.apply(this, arguments); }
            },
            "getHandledChannels": {
              "value": function () { return this.get_handled_channels.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getObjectPath": {
              "value": function () { return this.get_object_path.apply(this, arguments); }
            },
            "getPendingRequests": {
              "value": function () { return this.get_pending_requests.apply(this, arguments); }
            },
            "getUniquifyName": {
              "value": function () { return this.get_uniquify_name.apply(this, arguments); }
            },
            "isHandlingChannel": {
              "value": function () { return this.is_handling_channel.apply(this, arguments); }
            },
            "setChannelFactory": {
              "value": function () { return this.set_channel_factory.apply(this, arguments); }
            },
            "setDelegatedChannelsCallback": {
              "value": function () { return this.set_delegated_channels_callback.apply(this, arguments); }
            },
            "setHandlerBypassApproval": {
              "value": function () { return this.set_handler_bypass_approval.apply(this, arguments); }
            },
            "setHandlerRequestNotification": {
              "value": function () { return this.set_handler_request_notification.apply(this, arguments); }
            },
            "setObserverDelayApprovers": {
              "value": function () { return this.set_observer_delay_approvers.apply(this, arguments); }
            },
            "setObserverRecover": {
              "value": function () { return this.set_observer_recover.apply(this, arguments); }
            },
            "takeApproverFilter": {
              "value": function () { return this.take_approver_filter.apply(this, arguments); }
            },
            "takeHandlerFilter": {
              "value": function () { return this.take_handler_filter.apply(this, arguments); }
            },
            "takeObserverFilter": {
              "value": function () { return this.take_observer_filter.apply(this, arguments); }
            },
            "accountManager": {
              "get": function () { return this.account_manager; },
              "set": function (value) { this.account_manager = value; }
            },
            "channelFactory": {
              "get": function () { return this.channel_factory; },
              "set": function (value) { this.channel_factory = value; }
            },
            "dbusDaemon": {
              "get": function () { return this.dbus_daemon; },
              "set": function (value) { this.dbus_daemon = value; }
            },
            "uniquifyName": {
              "get": function () { return this.uniquify_name; },
              "set": function (value) { this.uniquify_name = value; }
            }
          },
          "static": {
            "implementAddDispatchOperation": {
              "value": function () { return this.implement_add_dispatch_operation.apply(this, arguments); }
            },
            "implementHandleChannels": {
              "value": function () { return this.implement_handle_channels.apply(this, arguments); }
            },
            "implementObserveChannels": {
              "value": function () { return this.implement_observe_channels.apply(this, arguments); }
            }
          }
        },
        "BaseConnection": {
          "prototype": {
            "addClientInterest": {
              "value": function () { return this.add_client_interest.apply(this, arguments); }
            },
            "addInterfaces": {
              "value": function () { return this.add_interfaces.apply(this, arguments); }
            },
            "addPossibleClientInterest": {
              "value": function () { return this.add_possible_client_interest.apply(this, arguments); }
            },
            "changeStatus": {
              "value": function () { return this.change_status.apply(this, arguments); }
            },
            "checkConnected": {
              "value": function () { return this.check_connected.apply(this, arguments); }
            },
            "disconnectWithDbusError": {
              "value": function () { return this.disconnect_with_dbus_error.apply(this, arguments); }
            },
            "disconnectWithDbusErrorVardict": {
              "value": function () { return this.disconnect_with_dbus_error_vardict.apply(this, arguments); }
            },
            "finishShutdown": {
              "value": function () { return this.finish_shutdown.apply(this, arguments); }
            },
            "getAccountPathSuffix": {
              "value": function () { return this.get_account_path_suffix.apply(this, arguments); }
            },
            "getBusName": {
              "value": function () { return this.get_bus_name.apply(this, arguments); }
            },
            "getDbusDaemon": {
              "value": function () { return this.get_dbus_daemon.apply(this, arguments); }
            },
            "getHandles": {
              "value": function () { return this.get_handles.apply(this, arguments); }
            },
            "getObjectPath": {
              "value": function () { return this.get_object_path.apply(this, arguments); }
            },
            "getSelfHandle": {
              "value": function () { return this.get_self_handle.apply(this, arguments); }
            },
            "getStatus": {
              "value": function () { return this.get_status.apply(this, arguments); }
            },
            "isDestroyed": {
              "value": function () { return this.is_destroyed.apply(this, arguments); }
            },
            "registerWithContactsMixin": {
              "value": function () { return this.register_with_contacts_mixin.apply(this, arguments); }
            },
            "setSelfHandle": {
              "value": function () { return this.set_self_handle.apply(this, arguments); }
            },
            "accountPathSuffix": {
              "get": function () { return this.account_path_suffix; },
              "set": function (value) { this.account_path_suffix = value; }
            },
            "dbusDaemon": {
              "get": function () { return this.dbus_daemon; },
              "set": function (value) { this.dbus_daemon = value; }
            },
            "dbusStatus": {
              "get": function () { return this.dbus_status; },
              "set": function (value) { this.dbus_status = value; }
            },
            "hasImmortalHandles": {
              "get": function () { return this.has_immortal_handles; },
              "set": function (value) { this.has_immortal_handles = value; }
            },
            "selfHandle": {
              "get": function () { return this.self_handle; },
              "set": function (value) { this.self_handle = value; }
            },
            "selfId": {
              "get": function () { return this.self_id; },
              "set": function (value) { this.self_id = value; }
            }
          },
          "static": {
            "channelManagerIterInit": {
              "value": function () { return this.channel_manager_iter_init.apply(this, arguments); }
            },
            "channelManagerIterNext": {
              "value": function () { return this.channel_manager_iter_next.apply(this, arguments); }
            },
            "dbusRequestHandles": {
              "value": function () { return this.dbus_request_handles.apply(this, arguments); }
            }
          }
        },
        "BasicProxyFactory": {
          "prototype": {},
          "static": {}
        },
        "CallChannel": {
          "prototype": {
            "acceptAsync": {
              "value": function () { return this.accept_async.apply(this, arguments); }
            },
            "acceptFinish": {
              "value": function () { return this.accept_finish.apply(this, arguments); }
            },
            "addContentAsync": {
              "value": function () { return this.add_content_async.apply(this, arguments); }
            },
            "addContentFinish": {
              "value": function () { return this.add_content_finish.apply(this, arguments); }
            },
            "getContents": {
              "value": function () { return this.get_contents.apply(this, arguments); }
            },
            "getMembers": {
              "value": function () { return this.get_members.apply(this, arguments); }
            },
            "getState": {
              "value": function () { return this.get_state.apply(this, arguments); }
            },
            "hangupAsync": {
              "value": function () { return this.hangup_async.apply(this, arguments); }
            },
            "hangupFinish": {
              "value": function () { return this.hangup_finish.apply(this, arguments); }
            },
            "hasDtmf": {
              "value": function () { return this.has_dtmf.apply(this, arguments); }
            },
            "hasHardwareStreaming": {
              "value": function () { return this.has_hardware_streaming.apply(this, arguments); }
            },
            "hasHold": {
              "value": function () { return this.has_hold.apply(this, arguments); }
            },
            "hasInitialAudio": {
              "value": function () { return this.has_initial_audio.apply(this, arguments); }
            },
            "hasInitialVideo": {
              "value": function () { return this.has_initial_video.apply(this, arguments); }
            },
            "hasMutableContents": {
              "value": function () { return this.has_mutable_contents.apply(this, arguments); }
            },
            "requestHoldAsync": {
              "value": function () { return this.request_hold_async.apply(this, arguments); }
            },
            "requestHoldFinish": {
              "value": function () { return this.request_hold_finish.apply(this, arguments); }
            },
            "sendTonesAsync": {
              "value": function () { return this.send_tones_async.apply(this, arguments); }
            },
            "sendTonesFinish": {
              "value": function () { return this.send_tones_finish.apply(this, arguments); }
            },
            "setQueuedAsync": {
              "value": function () { return this.set_queued_async.apply(this, arguments); }
            },
            "setQueuedFinish": {
              "value": function () { return this.set_queued_finish.apply(this, arguments); }
            },
            "setRingingAsync": {
              "value": function () { return this.set_ringing_async.apply(this, arguments); }
            },
            "setRingingFinish": {
              "value": function () { return this.set_ringing_finish.apply(this, arguments); }
            },
            "hardwareStreaming": {
              "get": function () { return this.hardware_streaming; },
              "set": function (value) { this.hardware_streaming = value; }
            },
            "holdState": {
              "get": function () { return this.hold_state; },
              "set": function (value) { this.hold_state = value; }
            },
            "holdStateReason": {
              "get": function () { return this.hold_state_reason; },
              "set": function (value) { this.hold_state_reason = value; }
            },
            "initialAudio": {
              "get": function () { return this.initial_audio; },
              "set": function (value) { this.initial_audio = value; }
            },
            "initialAudioName": {
              "get": function () { return this.initial_audio_name; },
              "set": function (value) { this.initial_audio_name = value; }
            },
            "initialVideo": {
              "get": function () { return this.initial_video; },
              "set": function (value) { this.initial_video = value; }
            },
            "initialVideoName": {
              "get": function () { return this.initial_video_name; },
              "set": function (value) { this.initial_video_name = value; }
            },
            "mutableContents": {
              "get": function () { return this.mutable_contents; },
              "set": function (value) { this.mutable_contents = value; }
            },
            "stateDetails": {
              "get": function () { return this.state_details; },
              "set": function (value) { this.state_details = value; }
            },
            "stateReason": {
              "get": function () { return this.state_reason; },
              "set": function (value) { this.state_reason = value; }
            }
          },
          "static": {
            "getFeatureQuarkCore": {
              "value": function () { return this.get_feature_quark_core.apply(this, arguments); }
            }
          }
        },
        "CallContent": {
          "prototype": {
            "getDisposition": {
              "value": function () { return this.get_disposition.apply(this, arguments); }
            },
            "getMediaType": {
              "value": function () { return this.get_media_type.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getStreams": {
              "value": function () { return this.get_streams.apply(this, arguments); }
            },
            "removeAsync": {
              "value": function () { return this.remove_async.apply(this, arguments); }
            },
            "removeFinish": {
              "value": function () { return this.remove_finish.apply(this, arguments); }
            },
            "sendTonesAsync": {
              "value": function () { return this.send_tones_async.apply(this, arguments); }
            },
            "sendTonesFinish": {
              "value": function () { return this.send_tones_finish.apply(this, arguments); }
            },
            "mediaType": {
              "get": function () { return this.media_type; },
              "set": function (value) { this.media_type = value; }
            }
          },
          "static": {
            "getFeatureQuarkCore": {
              "value": function () { return this.get_feature_quark_core.apply(this, arguments); }
            },
            "initKnownInterfaces": {
              "value": function () { return this.init_known_interfaces.apply(this, arguments); }
            }
          }
        },
        "CallStream": {
          "prototype": {
            "canRequestReceiving": {
              "get": function () { return this.can_request_receiving; },
              "set": function (value) { this.can_request_receiving = value; }
            },
            "getLocalSendingState": {
              "value": function () { return this.get_local_sending_state.apply(this, arguments); }
            },
            "getRemoteMembers": {
              "value": function () { return this.get_remote_members.apply(this, arguments); }
            },
            "requestReceivingAsync": {
              "value": function () { return this.request_receiving_async.apply(this, arguments); }
            },
            "requestReceivingFinish": {
              "value": function () { return this.request_receiving_finish.apply(this, arguments); }
            },
            "setSendingAsync": {
              "value": function () { return this.set_sending_async.apply(this, arguments); }
            },
            "setSendingFinish": {
              "value": function () { return this.set_sending_finish.apply(this, arguments); }
            },
            "localSendingState": {
              "get": function () { return this.local_sending_state; },
              "set": function (value) { this.local_sending_state = value; }
            }
          },
          "static": {
            "getFeatureQuarkCore": {
              "value": function () { return this.get_feature_quark_core.apply(this, arguments); }
            },
            "initKnownInterfaces": {
              "value": function () { return this.init_known_interfaces.apply(this, arguments); }
            }
          }
        },
        "Capabilities": {
          "prototype": {
            "dupChannelClassesVariant": {
              "value": function () { return this.dup_channel_classes_variant.apply(this, arguments); }
            },
            "getChannelClasses": {
              "value": function () { return this.get_channel_classes.apply(this, arguments); }
            },
            "isSpecificToContact": {
              "value": function () { return this.is_specific_to_contact.apply(this, arguments); }
            },
            "supportsAudioCall": {
              "value": function () { return this.supports_audio_call.apply(this, arguments); }
            },
            "supportsAudioVideoCall": {
              "value": function () { return this.supports_audio_video_call.apply(this, arguments); }
            },
            "supportsContactSearch": {
              "value": function () { return this.supports_contact_search.apply(this, arguments); }
            },
            "supportsDbusTubes": {
              "value": function () { return this.supports_dbus_tubes.apply(this, arguments); }
            },
            "supportsFileTransfer": {
              "value": function () { return this.supports_file_transfer.apply(this, arguments); }
            },
            "supportsFileTransferDescription": {
              "value": function () { return this.supports_file_transfer_description.apply(this, arguments); }
            },
            "supportsFileTransferInitialOffset": {
              "value": function () { return this.supports_file_transfer_initial_offset.apply(this, arguments); }
            },
            "supportsFileTransferTimestamp": {
              "value": function () { return this.supports_file_transfer_timestamp.apply(this, arguments); }
            },
            "supportsFileTransferUri": {
              "value": function () { return this.supports_file_transfer_uri.apply(this, arguments); }
            },
            "supportsRoomList": {
              "value": function () { return this.supports_room_list.apply(this, arguments); }
            },
            "supportsSms": {
              "value": function () { return this.supports_sms.apply(this, arguments); }
            },
            "supportsStreamTubes": {
              "value": function () { return this.supports_stream_tubes.apply(this, arguments); }
            },
            "supportsTextChatrooms": {
              "value": function () { return this.supports_text_chatrooms.apply(this, arguments); }
            },
            "supportsTextChats": {
              "value": function () { return this.supports_text_chats.apply(this, arguments); }
            },
            "channelClasses": {
              "get": function () { return this.channel_classes; },
              "set": function (value) { this.channel_classes = value; }
            },
            "channelClassesVariant": {
              "get": function () { return this.channel_classes_variant; },
              "set": function (value) { this.channel_classes_variant = value; }
            },
            "contactSpecific": {
              "get": function () { return this.contact_specific; },
              "set": function (value) { this.contact_specific = value; }
            }
          },
          "static": {}
        },
        "Channel": {
          "prototype": {
            "borrowConnection": {
              "value": function () { return this.borrow_connection.apply(this, arguments); }
            },
            "borrowImmutableProperties": {
              "value": function () { return this.borrow_immutable_properties.apply(this, arguments); }
            },
            "callWhenReady": {
              "value": function () { return this.call_when_ready.apply(this, arguments); }
            },
            "closeAsync": {
              "value": function () { return this.close_async.apply(this, arguments); }
            },
            "closeFinish": {
              "value": function () { return this.close_finish.apply(this, arguments); }
            },
            "destroyAsync": {
              "value": function () { return this.destroy_async.apply(this, arguments); }
            },
            "destroyFinish": {
              "value": function () { return this.destroy_finish.apply(this, arguments); }
            },
            "dupImmutableProperties": {
              "value": function () { return this.dup_immutable_properties.apply(this, arguments); }
            },
            "getChannelType": {
              "value": function () { return this.get_channel_type.apply(this, arguments); }
            },
            "getChannelTypeId": {
              "value": function () { return this.get_channel_type_id.apply(this, arguments); }
            },
            "getChatState": {
              "value": function () { return this.get_chat_state.apply(this, arguments); }
            },
            "getConnection": {
              "value": function () { return this.get_connection.apply(this, arguments); }
            },
            "getHandle": {
              "value": function () { return this.get_handle.apply(this, arguments); }
            },
            "getIdentifier": {
              "value": function () { return this.get_identifier.apply(this, arguments); }
            },
            "getInitiatorContact": {
              "value": function () { return this.get_initiator_contact.apply(this, arguments); }
            },
            "getInitiatorHandle": {
              "value": function () { return this.get_initiator_handle.apply(this, arguments); }
            },
            "getInitiatorIdentifier": {
              "value": function () { return this.get_initiator_identifier.apply(this, arguments); }
            },
            "getRequested": {
              "value": function () { return this.get_requested.apply(this, arguments); }
            },
            "getTargetContact": {
              "value": function () { return this.get_target_contact.apply(this, arguments); }
            },
            "groupDupLocalPendingContacts": {
              "value": function () { return this.group_dup_local_pending_contacts.apply(this, arguments); }
            },
            "groupDupMembersContacts": {
              "value": function () { return this.group_dup_members_contacts.apply(this, arguments); }
            },
            "groupDupRemotePendingContacts": {
              "value": function () { return this.group_dup_remote_pending_contacts.apply(this, arguments); }
            },
            "groupGetContactOwner": {
              "value": function () { return this.group_get_contact_owner.apply(this, arguments); }
            },
            "groupGetFlags": {
              "value": function () { return this.group_get_flags.apply(this, arguments); }
            },
            "groupGetHandleOwner": {
              "value": function () { return this.group_get_handle_owner.apply(this, arguments); }
            },
            "groupGetLocalPending": {
              "value": function () { return this.group_get_local_pending.apply(this, arguments); }
            },
            "groupGetLocalPendingContactInfo": {
              "value": function () { return this.group_get_local_pending_contact_info.apply(this, arguments); }
            },
            "groupGetLocalPendingInfo": {
              "value": function () { return this.group_get_local_pending_info.apply(this, arguments); }
            },
            "groupGetMembers": {
              "value": function () { return this.group_get_members.apply(this, arguments); }
            },
            "groupGetRemotePending": {
              "value": function () { return this.group_get_remote_pending.apply(this, arguments); }
            },
            "groupGetSelfContact": {
              "value": function () { return this.group_get_self_contact.apply(this, arguments); }
            },
            "groupGetSelfHandle": {
              "value": function () { return this.group_get_self_handle.apply(this, arguments); }
            },
            "isReady": {
              "value": function () { return this.is_ready.apply(this, arguments); }
            },
            "joinAsync": {
              "value": function () { return this.join_async.apply(this, arguments); }
            },
            "joinFinish": {
              "value": function () { return this.join_finish.apply(this, arguments); }
            },
            "leaveAsync": {
              "value": function () { return this.leave_async.apply(this, arguments); }
            },
            "leaveFinish": {
              "value": function () { return this.leave_finish.apply(this, arguments); }
            },
            "passwordNeeded": {
              "get": function () { return this.password_needed; },
              "set": function (value) { this.password_needed = value; }
            },
            "providePasswordAsync": {
              "value": function () { return this.provide_password_async.apply(this, arguments); }
            },
            "providePasswordFinish": {
              "value": function () { return this.provide_password_finish.apply(this, arguments); }
            },
            "runUntilReady": {
              "value": function () { return this.run_until_ready.apply(this, arguments); }
            },
            "channelProperties": {
              "get": function () { return this.channel_properties; },
              "set": function (value) { this.channel_properties = value; }
            },
            "channelReady": {
              "get": function () { return this.channel_ready; },
              "set": function (value) { this.channel_ready = value; }
            },
            "groupFlags": {
              "get": function () { return this.group_flags; },
              "set": function (value) { this.group_flags = value; }
            },
            "groupSelfContact": {
              "get": function () { return this.group_self_contact; },
              "set": function (value) { this.group_self_contact = value; }
            },
            "groupSelfHandle": {
              "get": function () { return this.group_self_handle; },
              "set": function (value) { this.group_self_handle = value; }
            },
            "initiatorContact": {
              "get": function () { return this.initiator_contact; },
              "set": function (value) { this.initiator_contact = value; }
            },
            "initiatorHandle": {
              "get": function () { return this.initiator_handle; },
              "set": function (value) { this.initiator_handle = value; }
            },
            "initiatorIdentifier": {
              "get": function () { return this.initiator_identifier; },
              "set": function (value) { this.initiator_identifier = value; }
            },
            "targetContact": {
              "get": function () { return this.target_contact; },
              "set": function (value) { this.target_contact = value; }
            }
          },
          "static": {
            "getFeatureQuarkChatStates": {
              "value": function () { return this.get_feature_quark_chat_states.apply(this, arguments); }
            },
            "getFeatureQuarkContacts": {
              "value": function () { return this.get_feature_quark_contacts.apply(this, arguments); }
            },
            "getFeatureQuarkCore": {
              "value": function () { return this.get_feature_quark_core.apply(this, arguments); }
            },
            "getFeatureQuarkGroup": {
              "value": function () { return this.get_feature_quark_group.apply(this, arguments); }
            },
            "getFeatureQuarkPassword": {
              "value": function () { return this.get_feature_quark_password.apply(this, arguments); }
            },
            "initKnownInterfaces": {
              "value": function () { return this.init_known_interfaces.apply(this, arguments); }
            }
          }
        },
        "ChannelDispatchOperation": {
          "prototype": {
            "borrowAccount": {
              "value": function () { return this.borrow_account.apply(this, arguments); }
            },
            "borrowChannels": {
              "value": function () { return this.borrow_channels.apply(this, arguments); }
            },
            "borrowConnection": {
              "value": function () { return this.borrow_connection.apply(this, arguments); }
            },
            "borrowImmutableProperties": {
              "value": function () { return this.borrow_immutable_properties.apply(this, arguments); }
            },
            "borrowPossibleHandlers": {
              "value": function () { return this.borrow_possible_handlers.apply(this, arguments); }
            },
            "claimAsync": {
              "value": function () { return this.claim_async.apply(this, arguments); }
            },
            "claimFinish": {
              "value": function () { return this.claim_finish.apply(this, arguments); }
            },
            "claimWithAsync": {
              "value": function () { return this.claim_with_async.apply(this, arguments); }
            },
            "claimWithFinish": {
              "value": function () { return this.claim_with_finish.apply(this, arguments); }
            },
            "closeChannelsAsync": {
              "value": function () { return this.close_channels_async.apply(this, arguments); }
            },
            "closeChannelsFinish": {
              "value": function () { return this.close_channels_finish.apply(this, arguments); }
            },
            "destroyChannelsAsync": {
              "value": function () { return this.destroy_channels_async.apply(this, arguments); }
            },
            "destroyChannelsFinish": {
              "value": function () { return this.destroy_channels_finish.apply(this, arguments); }
            },
            "getAccount": {
              "value": function () { return this.get_account.apply(this, arguments); }
            },
            "getChannels": {
              "value": function () { return this.get_channels.apply(this, arguments); }
            },
            "getConnection": {
              "value": function () { return this.get_connection.apply(this, arguments); }
            },
            "getPossibleHandlers": {
              "value": function () { return this.get_possible_handlers.apply(this, arguments); }
            },
            "handleWithAsync": {
              "value": function () { return this.handle_with_async.apply(this, arguments); }
            },
            "handleWithFinish": {
              "value": function () { return this.handle_with_finish.apply(this, arguments); }
            },
            "handleWithTimeAsync": {
              "value": function () { return this.handle_with_time_async.apply(this, arguments); }
            },
            "handleWithTimeFinish": {
              "value": function () { return this.handle_with_time_finish.apply(this, arguments); }
            },
            "leaveChannelsAsync": {
              "value": function () { return this.leave_channels_async.apply(this, arguments); }
            },
            "leaveChannelsFinish": {
              "value": function () { return this.leave_channels_finish.apply(this, arguments); }
            },
            "cdoProperties": {
              "get": function () { return this.cdo_properties; },
              "set": function (value) { this.cdo_properties = value; }
            },
            "possibleHandlers": {
              "get": function () { return this.possible_handlers; },
              "set": function (value) { this.possible_handlers = value; }
            }
          },
          "static": {
            "getFeatureQuarkCore": {
              "value": function () { return this.get_feature_quark_core.apply(this, arguments); }
            },
            "initKnownInterfaces": {
              "value": function () { return this.init_known_interfaces.apply(this, arguments); }
            }
          }
        },
        "ChannelDispatcher": {
          "prototype": {
            "presentChannelAsync": {
              "value": function () { return this.present_channel_async.apply(this, arguments); }
            },
            "presentChannelFinish": {
              "value": function () { return this.present_channel_finish.apply(this, arguments); }
            }
          },
          "static": {
            "initKnownInterfaces": {
              "value": function () { return this.init_known_interfaces.apply(this, arguments); }
            }
          }
        },
        "ChannelRequest": {
          "prototype": {
            "dupHints": {
              "value": function () { return this.dup_hints.apply(this, arguments); }
            },
            "dupImmutableProperties": {
              "value": function () { return this.dup_immutable_properties.apply(this, arguments); }
            },
            "getAccount": {
              "value": function () { return this.get_account.apply(this, arguments); }
            },
            "getHints": {
              "value": function () { return this.get_hints.apply(this, arguments); }
            },
            "getImmutableProperties": {
              "value": function () { return this.get_immutable_properties.apply(this, arguments); }
            },
            "getPreferredHandler": {
              "value": function () { return this.get_preferred_handler.apply(this, arguments); }
            },
            "getUserActionTime": {
              "value": function () { return this.get_user_action_time.apply(this, arguments); }
            },
            "setChannelFactory": {
              "value": function () { return this.set_channel_factory.apply(this, arguments); }
            },
            "channelFactory": {
              "get": function () { return this.channel_factory; },
              "set": function (value) { this.channel_factory = value; }
            },
            "hintsVardict": {
              "get": function () { return this.hints_vardict; },
              "set": function (value) { this.hints_vardict = value; }
            },
            "immutableProperties": {
              "get": function () { return this.immutable_properties; },
              "set": function (value) { this.immutable_properties = value; }
            },
            "immutablePropertiesVardict": {
              "get": function () { return this.immutable_properties_vardict; },
              "set": function (value) { this.immutable_properties_vardict = value; }
            },
            "preferredHandler": {
              "get": function () { return this.preferred_handler; },
              "set": function (value) { this.preferred_handler = value; }
            },
            "userActionTime": {
              "get": function () { return this.user_action_time; },
              "set": function (value) { this.user_action_time = value; }
            }
          },
          "static": {
            "initKnownInterfaces": {
              "value": function () { return this.init_known_interfaces.apply(this, arguments); }
            }
          }
        },
        "ClientMessage": {
          "prototype": {},
          "static": {}
        },
        "Connection": {
          "prototype": {
            "addClientInterest": {
              "value": function () { return this.add_client_interest.apply(this, arguments); }
            },
            "addClientInterestById": {
              "value": function () { return this.add_client_interest_by_id.apply(this, arguments); }
            },
            "addToGroupAsync": {
              "value": function () { return this.add_to_group_async.apply(this, arguments); }
            },
            "addToGroupFinish": {
              "value": function () { return this.add_to_group_finish.apply(this, arguments); }
            },
            "authorizePublicationAsync": {
              "value": function () { return this.authorize_publication_async.apply(this, arguments); }
            },
            "authorizePublicationFinish": {
              "value": function () { return this.authorize_publication_finish.apply(this, arguments); }
            },
            "bindConnectionStatusToProperty": {
              "value": function () { return this.bind_connection_status_to_property.apply(this, arguments); }
            },
            "blockContactsAsync": {
              "value": function () { return this.block_contacts_async.apply(this, arguments); }
            },
            "blockContactsFinish": {
              "value": function () { return this.block_contacts_finish.apply(this, arguments); }
            },
            "callWhenReady": {
              "value": function () { return this.call_when_ready.apply(this, arguments); }
            },
            "canReportAbusive": {
              "get": function () { return this.can_report_abusive; },
              "set": function (value) { this.can_report_abusive = value; }
            },
            "canSetContactAlias": {
              "value": function () { return this.can_set_contact_alias.apply(this, arguments); }
            },
            "disconnectAsync": {
              "value": function () { return this.disconnect_async.apply(this, arguments); }
            },
            "disconnectFinish": {
              "value": function () { return this.disconnect_finish.apply(this, arguments); }
            },
            "dupContactByIdAsync": {
              "value": function () { return this.dup_contact_by_id_async.apply(this, arguments); }
            },
            "dupContactByIdFinish": {
              "value": function () { return this.dup_contact_by_id_finish.apply(this, arguments); }
            },
            "dupContactIfPossible": {
              "value": function () { return this.dup_contact_if_possible.apply(this, arguments); }
            },
            "dupContactInfoSupportedFields": {
              "value": function () { return this.dup_contact_info_supported_fields.apply(this, arguments); }
            },
            "dupContactList": {
              "value": function () { return this.dup_contact_list.apply(this, arguments); }
            },
            "dupDetailedErrorVardict": {
              "value": function () { return this.dup_detailed_error_vardict.apply(this, arguments); }
            },
            "getAccount": {
              "value": function () { return this.get_account.apply(this, arguments); }
            },
            "getAvatarRequirements": {
              "value": function () { return this.get_avatar_requirements.apply(this, arguments); }
            },
            "getBalance": {
              "value": function () { return this.get_balance.apply(this, arguments); }
            },
            "getBalanceUri": {
              "value": function () { return this.get_balance_uri.apply(this, arguments); }
            },
            "getBlockedContacts": {
              "value": function () { return this.get_blocked_contacts.apply(this, arguments); }
            },
            "getCanChangeContactList": {
              "value": function () { return this.get_can_change_contact_list.apply(this, arguments); }
            },
            "getCapabilities": {
              "value": function () { return this.get_capabilities.apply(this, arguments); }
            },
            "getCmName": {
              "value": function () { return this.get_cm_name.apply(this, arguments); }
            },
            "getConnectionManagerName": {
              "value": function () { return this.get_connection_manager_name.apply(this, arguments); }
            },
            "getContactAttributes": {
              "value": function () { return this.get_contact_attributes.apply(this, arguments); }
            },
            "getContactGroups": {
              "value": function () { return this.get_contact_groups.apply(this, arguments); }
            },
            "getContactInfoFlags": {
              "value": function () { return this.get_contact_info_flags.apply(this, arguments); }
            },
            "getContactInfoSupportedFields": {
              "value": function () { return this.get_contact_info_supported_fields.apply(this, arguments); }
            },
            "getContactListAttributes": {
              "value": function () { return this.get_contact_list_attributes.apply(this, arguments); }
            },
            "getContactListPersists": {
              "value": function () { return this.get_contact_list_persists.apply(this, arguments); }
            },
            "getContactListState": {
              "value": function () { return this.get_contact_list_state.apply(this, arguments); }
            },
            "getContactsByHandle": {
              "value": function () { return this.get_contacts_by_handle.apply(this, arguments); }
            },
            "getContactsById": {
              "value": function () { return this.get_contacts_by_id.apply(this, arguments); }
            },
            "getDetailedError": {
              "value": function () { return this.get_detailed_error.apply(this, arguments); }
            },
            "getDisjointGroups": {
              "value": function () { return this.get_disjoint_groups.apply(this, arguments); }
            },
            "getGroupStorage": {
              "value": function () { return this.get_group_storage.apply(this, arguments); }
            },
            "getProtocolName": {
              "value": function () { return this.get_protocol_name.apply(this, arguments); }
            },
            "getRequestUsesMessage": {
              "value": function () { return this.get_request_uses_message.apply(this, arguments); }
            },
            "getSelfContact": {
              "value": function () { return this.get_self_contact.apply(this, arguments); }
            },
            "getSelfHandle": {
              "value": function () { return this.get_self_handle.apply(this, arguments); }
            },
            "getStatus": {
              "value": function () { return this.get_status.apply(this, arguments); }
            },
            "hasImmortalHandles": {
              "value": function () { return this.has_immortal_handles.apply(this, arguments); }
            },
            "holdHandles": {
              "value": function () { return this.hold_handles.apply(this, arguments); }
            },
            "isReady": {
              "value": function () { return this.is_ready.apply(this, arguments); }
            },
            "parseObjectPath": {
              "value": function () { return this.parse_object_path.apply(this, arguments); }
            },
            "refreshContactInfo": {
              "value": function () { return this.refresh_contact_info.apply(this, arguments); }
            },
            "removeContactsAsync": {
              "value": function () { return this.remove_contacts_async.apply(this, arguments); }
            },
            "removeContactsFinish": {
              "value": function () { return this.remove_contacts_finish.apply(this, arguments); }
            },
            "removeFromGroupAsync": {
              "value": function () { return this.remove_from_group_async.apply(this, arguments); }
            },
            "removeFromGroupFinish": {
              "value": function () { return this.remove_from_group_finish.apply(this, arguments); }
            },
            "removeGroupAsync": {
              "value": function () { return this.remove_group_async.apply(this, arguments); }
            },
            "removeGroupFinish": {
              "value": function () { return this.remove_group_finish.apply(this, arguments); }
            },
            "renameGroupAsync": {
              "value": function () { return this.rename_group_async.apply(this, arguments); }
            },
            "renameGroupFinish": {
              "value": function () { return this.rename_group_finish.apply(this, arguments); }
            },
            "requestHandles": {
              "value": function () { return this.request_handles.apply(this, arguments); }
            },
            "requestSubscriptionAsync": {
              "value": function () { return this.request_subscription_async.apply(this, arguments); }
            },
            "requestSubscriptionFinish": {
              "value": function () { return this.request_subscription_finish.apply(this, arguments); }
            },
            "runUntilReady": {
              "value": function () { return this.run_until_ready.apply(this, arguments); }
            },
            "setContactInfoAsync": {
              "value": function () { return this.set_contact_info_async.apply(this, arguments); }
            },
            "setContactInfoFinish": {
              "value": function () { return this.set_contact_info_finish.apply(this, arguments); }
            },
            "setGroupMembersAsync": {
              "value": function () { return this.set_group_members_async.apply(this, arguments); }
            },
            "setGroupMembersFinish": {
              "value": function () { return this.set_group_members_finish.apply(this, arguments); }
            },
            "unblockContactsAsync": {
              "value": function () { return this.unblock_contacts_async.apply(this, arguments); }
            },
            "unblockContactsFinish": {
              "value": function () { return this.unblock_contacts_finish.apply(this, arguments); }
            },
            "unpublishAsync": {
              "value": function () { return this.unpublish_async.apply(this, arguments); }
            },
            "unpublishFinish": {
              "value": function () { return this.unpublish_finish.apply(this, arguments); }
            },
            "unrefHandles": {
              "value": function () { return this.unref_handles.apply(this, arguments); }
            },
            "unsubscribeAsync": {
              "value": function () { return this.unsubscribe_async.apply(this, arguments); }
            },
            "unsubscribeFinish": {
              "value": function () { return this.unsubscribe_finish.apply(this, arguments); }
            },
            "upgradeContacts": {
              "value": function () { return this.upgrade_contacts.apply(this, arguments); }
            },
            "upgradeContactsAsync": {
              "value": function () { return this.upgrade_contacts_async.apply(this, arguments); }
            },
            "upgradeContactsFinish": {
              "value": function () { return this.upgrade_contacts_finish.apply(this, arguments); }
            },
            "balanceCurrency": {
              "get": function () { return this.balance_currency; },
              "set": function (value) { this.balance_currency = value; }
            },
            "balanceScale": {
              "get": function () { return this.balance_scale; },
              "set": function (value) { this.balance_scale = value; }
            },
            "balanceUri": {
              "get": function () { return this.balance_uri; },
              "set": function (value) { this.balance_uri = value; }
            },
            "blockedContacts": {
              "get": function () { return this.blocked_contacts; },
              "set": function (value) { this.blocked_contacts = value; }
            },
            "canChangeContactList": {
              "get": function () { return this.can_change_contact_list; },
              "set": function (value) { this.can_change_contact_list = value; }
            },
            "cmName": {
              "get": function () { return this.cm_name; },
              "set": function (value) { this.cm_name = value; }
            },
            "connectionManagerName": {
              "get": function () { return this.connection_manager_name; },
              "set": function (value) { this.connection_manager_name = value; }
            },
            "connectionReady": {
              "get": function () { return this.connection_ready; },
              "set": function (value) { this.connection_ready = value; }
            },
            "contactGroups": {
              "get": function () { return this.contact_groups; },
              "set": function (value) { this.contact_groups = value; }
            },
            "contactListPersists": {
              "get": function () { return this.contact_list_persists; },
              "set": function (value) { this.contact_list_persists = value; }
            },
            "contactListState": {
              "get": function () { return this.contact_list_state; },
              "set": function (value) { this.contact_list_state = value; }
            },
            "disjointGroups": {
              "get": function () { return this.disjoint_groups; },
              "set": function (value) { this.disjoint_groups = value; }
            },
            "groupStorage": {
              "get": function () { return this.group_storage; },
              "set": function (value) { this.group_storage = value; }
            },
            "protocolName": {
              "get": function () { return this.protocol_name; },
              "set": function (value) { this.protocol_name = value; }
            },
            "requestUsesMessage": {
              "get": function () { return this.request_uses_message; },
              "set": function (value) { this.request_uses_message = value; }
            },
            "selfContact": {
              "get": function () { return this.self_contact; },
              "set": function (value) { this.self_contact = value; }
            },
            "selfHandle": {
              "get": function () { return this.self_handle; },
              "set": function (value) { this.self_handle = value; }
            },
            "statusReason": {
              "get": function () { return this.status_reason; },
              "set": function (value) { this.status_reason = value; }
            }
          },
          "static": {
            "getFeatureQuarkAliasing": {
              "value": function () { return this.get_feature_quark_aliasing.apply(this, arguments); }
            },
            "getFeatureQuarkAvatarRequirements": {
              "value": function () { return this.get_feature_quark_avatar_requirements.apply(this, arguments); }
            },
            "getFeatureQuarkBalance": {
              "value": function () { return this.get_feature_quark_balance.apply(this, arguments); }
            },
            "getFeatureQuarkCapabilities": {
              "value": function () { return this.get_feature_quark_capabilities.apply(this, arguments); }
            },
            "getFeatureQuarkConnected": {
              "value": function () { return this.get_feature_quark_connected.apply(this, arguments); }
            },
            "getFeatureQuarkContactBlocking": {
              "value": function () { return this.get_feature_quark_contact_blocking.apply(this, arguments); }
            },
            "getFeatureQuarkContactGroups": {
              "value": function () { return this.get_feature_quark_contact_groups.apply(this, arguments); }
            },
            "getFeatureQuarkContactInfo": {
              "value": function () { return this.get_feature_quark_contact_info.apply(this, arguments); }
            },
            "getFeatureQuarkContactList": {
              "value": function () { return this.get_feature_quark_contact_list.apply(this, arguments); }
            },
            "getFeatureQuarkContactListProperties": {
              "value": function () { return this.get_feature_quark_contact_list_properties.apply(this, arguments); }
            },
            "getFeatureQuarkCore": {
              "value": function () { return this.get_feature_quark_core.apply(this, arguments); }
            },
            "initKnownInterfaces": {
              "value": function () { return this.init_known_interfaces.apply(this, arguments); }
            },
            "presenceTypeCmpAvailability": {
              "value": function () { return this.presence_type_cmp_availability.apply(this, arguments); }
            }
          }
        },
        "ConnectionManager": {
          "prototype": {
            "callWhenReady": {
              "value": function () { return this.call_when_ready.apply(this, arguments); }
            },
            "dupProtocolNames": {
              "value": function () { return this.dup_protocol_names.apply(this, arguments); }
            },
            "dupProtocols": {
              "value": function () { return this.dup_protocols.apply(this, arguments); }
            },
            "getInfoSource": {
              "value": function () { return this.get_info_source.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getProtocol": {
              "value": function () { return this.get_protocol.apply(this, arguments); }
            },
            "getProtocolObject": {
              "value": function () { return this.get_protocol_object.apply(this, arguments); }
            },
            "hasProtocol": {
              "value": function () { return this.has_protocol.apply(this, arguments); }
            },
            "isReady": {
              "value": function () { return this.is_ready.apply(this, arguments); }
            },
            "isRunning": {
              "value": function () { return this.is_running.apply(this, arguments); }
            },
            "alwaysIntrospect": {
              "get": function () { return this.always_introspect; },
              "set": function (value) { this.always_introspect = value; }
            },
            "cmName": {
              "get": function () { return this.cm_name; },
              "set": function (value) { this.cm_name = value; }
            },
            "connectionManager": {
              "get": function () { return this.connection_manager; },
              "set": function (value) { this.connection_manager = value; }
            },
            "infoSource": {
              "get": function () { return this.info_source; },
              "set": function (value) { this.info_source = value; }
            },
            "managerFile": {
              "get": function () { return this.manager_file; },
              "set": function (value) { this.manager_file = value; }
            }
          },
          "static": {
            "checkValidName": {
              "value": function () { return this.check_valid_name.apply(this, arguments); }
            },
            "checkValidProtocolName": {
              "value": function () { return this.check_valid_protocol_name.apply(this, arguments); }
            },
            "getFeatureQuarkCore": {
              "value": function () { return this.get_feature_quark_core.apply(this, arguments); }
            },
            "initKnownInterfaces": {
              "value": function () { return this.init_known_interfaces.apply(this, arguments); }
            }
          }
        },
        "Contact": {
          "prototype": {
            "addToGroupAsync": {
              "value": function () { return this.add_to_group_async.apply(this, arguments); }
            },
            "addToGroupFinish": {
              "value": function () { return this.add_to_group_finish.apply(this, arguments); }
            },
            "authorizePublicationAsync": {
              "value": function () { return this.authorize_publication_async.apply(this, arguments); }
            },
            "authorizePublicationFinish": {
              "value": function () { return this.authorize_publication_finish.apply(this, arguments); }
            },
            "blockAsync": {
              "value": function () { return this.block_async.apply(this, arguments); }
            },
            "blockFinish": {
              "value": function () { return this.block_finish.apply(this, arguments); }
            },
            "dupContactInfo": {
              "value": function () { return this.dup_contact_info.apply(this, arguments); }
            },
            "dupLocation": {
              "value": function () { return this.dup_location.apply(this, arguments); }
            },
            "getAccount": {
              "value": function () { return this.get_account.apply(this, arguments); }
            },
            "getAlias": {
              "value": function () { return this.get_alias.apply(this, arguments); }
            },
            "getAvatarFile": {
              "value": function () { return this.get_avatar_file.apply(this, arguments); }
            },
            "getAvatarMimeType": {
              "value": function () { return this.get_avatar_mime_type.apply(this, arguments); }
            },
            "getAvatarToken": {
              "value": function () { return this.get_avatar_token.apply(this, arguments); }
            },
            "getCapabilities": {
              "value": function () { return this.get_capabilities.apply(this, arguments); }
            },
            "getClientTypes": {
              "value": function () { return this.get_client_types.apply(this, arguments); }
            },
            "getConnection": {
              "value": function () { return this.get_connection.apply(this, arguments); }
            },
            "getContactGroups": {
              "value": function () { return this.get_contact_groups.apply(this, arguments); }
            },
            "getContactInfo": {
              "value": function () { return this.get_contact_info.apply(this, arguments); }
            },
            "getHandle": {
              "value": function () { return this.get_handle.apply(this, arguments); }
            },
            "getIdentifier": {
              "value": function () { return this.get_identifier.apply(this, arguments); }
            },
            "getLocation": {
              "value": function () { return this.get_location.apply(this, arguments); }
            },
            "getPresenceMessage": {
              "value": function () { return this.get_presence_message.apply(this, arguments); }
            },
            "getPresenceStatus": {
              "value": function () { return this.get_presence_status.apply(this, arguments); }
            },
            "getPresenceType": {
              "value": function () { return this.get_presence_type.apply(this, arguments); }
            },
            "getPublishRequest": {
              "value": function () { return this.get_publish_request.apply(this, arguments); }
            },
            "getPublishState": {
              "value": function () { return this.get_publish_state.apply(this, arguments); }
            },
            "getSubscribeState": {
              "value": function () { return this.get_subscribe_state.apply(this, arguments); }
            },
            "hasFeature": {
              "value": function () { return this.has_feature.apply(this, arguments); }
            },
            "isBlocked": {
              "get": function () { return this.is_blocked; },
              "set": function (value) { this.is_blocked = value; }
            },
            "removeAsync": {
              "value": function () { return this.remove_async.apply(this, arguments); }
            },
            "removeFinish": {
              "value": function () { return this.remove_finish.apply(this, arguments); }
            },
            "removeFromGroupAsync": {
              "value": function () { return this.remove_from_group_async.apply(this, arguments); }
            },
            "removeFromGroupFinish": {
              "value": function () { return this.remove_from_group_finish.apply(this, arguments); }
            },
            "requestContactInfoAsync": {
              "value": function () { return this.request_contact_info_async.apply(this, arguments); }
            },
            "requestContactInfoFinish": {
              "value": function () { return this.request_contact_info_finish.apply(this, arguments); }
            },
            "requestSubscriptionAsync": {
              "value": function () { return this.request_subscription_async.apply(this, arguments); }
            },
            "requestSubscriptionFinish": {
              "value": function () { return this.request_subscription_finish.apply(this, arguments); }
            },
            "setContactGroupsAsync": {
              "value": function () { return this.set_contact_groups_async.apply(this, arguments); }
            },
            "setContactGroupsFinish": {
              "value": function () { return this.set_contact_groups_finish.apply(this, arguments); }
            },
            "unblockAsync": {
              "value": function () { return this.unblock_async.apply(this, arguments); }
            },
            "unblockFinish": {
              "value": function () { return this.unblock_finish.apply(this, arguments); }
            },
            "unpublishAsync": {
              "value": function () { return this.unpublish_async.apply(this, arguments); }
            },
            "unpublishFinish": {
              "value": function () { return this.unpublish_finish.apply(this, arguments); }
            },
            "unsubscribeAsync": {
              "value": function () { return this.unsubscribe_async.apply(this, arguments); }
            },
            "unsubscribeFinish": {
              "value": function () { return this.unsubscribe_finish.apply(this, arguments); }
            },
            "avatarFile": {
              "get": function () { return this.avatar_file; },
              "set": function (value) { this.avatar_file = value; }
            },
            "avatarMimeType": {
              "get": function () { return this.avatar_mime_type; },
              "set": function (value) { this.avatar_mime_type = value; }
            },
            "avatarToken": {
              "get": function () { return this.avatar_token; },
              "set": function (value) { this.avatar_token = value; }
            },
            "clientTypes": {
              "get": function () { return this.client_types; },
              "set": function (value) { this.client_types = value; }
            },
            "contactGroups": {
              "get": function () { return this.contact_groups; },
              "set": function (value) { this.contact_groups = value; }
            },
            "contactInfo": {
              "get": function () { return this.contact_info; },
              "set": function (value) { this.contact_info = value; }
            },
            "locationVardict": {
              "get": function () { return this.location_vardict; },
              "set": function (value) { this.location_vardict = value; }
            },
            "presenceMessage": {
              "get": function () { return this.presence_message; },
              "set": function (value) { this.presence_message = value; }
            },
            "presenceStatus": {
              "get": function () { return this.presence_status; },
              "set": function (value) { this.presence_status = value; }
            },
            "presenceType": {
              "get": function () { return this.presence_type; },
              "set": function (value) { this.presence_type = value; }
            },
            "publishRequest": {
              "get": function () { return this.publish_request; },
              "set": function (value) { this.publish_request = value; }
            },
            "publishState": {
              "get": function () { return this.publish_state; },
              "set": function (value) { this.publish_state = value; }
            },
            "subscribeState": {
              "get": function () { return this.subscribe_state; },
              "set": function (value) { this.subscribe_state = value; }
            }
          },
          "static": {}
        },
        "ContactSearch": {
          "prototype": {
            "getAccount": {
              "value": function () { return this.get_account.apply(this, arguments); }
            },
            "getLimit": {
              "value": function () { return this.get_limit.apply(this, arguments); }
            },
            "getSearchKeys": {
              "value": function () { return this.get_search_keys.apply(this, arguments); }
            },
            "getServer": {
              "value": function () { return this.get_server.apply(this, arguments); }
            },
            "resetAsync": {
              "value": function () { return this.reset_async.apply(this, arguments); }
            },
            "resetFinish": {
              "value": function () { return this.reset_finish.apply(this, arguments); }
            }
          },
          "static": {
            "newAsync": {
              "value": function () { return this.new_async.apply(this, arguments); }
            }
          }
        },
        "ContactSearchResult": {
          "prototype": {
            "dupFields": {
              "value": function () { return this.dup_fields.apply(this, arguments); }
            },
            "getField": {
              "value": function () { return this.get_field.apply(this, arguments); }
            },
            "getFields": {
              "value": function () { return this.get_fields.apply(this, arguments); }
            },
            "getIdentifier": {
              "value": function () { return this.get_identifier.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DBusDaemon": {
          "prototype": {
            "cancelNameOwnerWatch": {
              "value": function () { return this.cancel_name_owner_watch.apply(this, arguments); }
            },
            "getUniqueName": {
              "value": function () { return this.get_unique_name.apply(this, arguments); }
            },
            "listActivatableNames": {
              "value": function () { return this.list_activatable_names.apply(this, arguments); }
            },
            "listNames": {
              "value": function () { return this.list_names.apply(this, arguments); }
            },
            "registerObject": {
              "value": function () { return this.register_object.apply(this, arguments); }
            },
            "releaseName": {
              "value": function () { return this.release_name.apply(this, arguments); }
            },
            "requestName": {
              "value": function () { return this.request_name.apply(this, arguments); }
            },
            "unregisterObject": {
              "value": function () { return this.unregister_object.apply(this, arguments); }
            },
            "watchNameOwner": {
              "value": function () { return this.watch_name_owner.apply(this, arguments); }
            }
          },
          "static": {
            "initKnownInterfaces": {
              "value": function () { return this.init_known_interfaces.apply(this, arguments); }
            }
          }
        },
        "DBusTubeChannel": {
          "prototype": {
            "acceptAsync": {
              "value": function () { return this.accept_async.apply(this, arguments); }
            },
            "acceptFinish": {
              "value": function () { return this.accept_finish.apply(this, arguments); }
            },
            "dupParametersVardict": {
              "value": function () { return this.dup_parameters_vardict.apply(this, arguments); }
            },
            "getParameters": {
              "value": function () { return this.get_parameters.apply(this, arguments); }
            },
            "getServiceName": {
              "value": function () { return this.get_service_name.apply(this, arguments); }
            },
            "offerAsync": {
              "value": function () { return this.offer_async.apply(this, arguments); }
            },
            "offerFinish": {
              "value": function () { return this.offer_finish.apply(this, arguments); }
            },
            "parametersVardict": {
              "get": function () { return this.parameters_vardict; },
              "set": function (value) { this.parameters_vardict = value; }
            },
            "serviceName": {
              "get": function () { return this.service_name; },
              "set": function (value) { this.service_name = value; }
            }
          },
          "static": {
            "featureQuarkCore": {
              "value": function () { return this.feature_quark_core.apply(this, arguments); }
            }
          }
        },
        "DebugClient": {
          "prototype": {
            "getMessagesAsync": {
              "value": function () { return this.get_messages_async.apply(this, arguments); }
            },
            "getMessagesFinish": {
              "value": function () { return this.get_messages_finish.apply(this, arguments); }
            },
            "isEnabled": {
              "value": function () { return this.is_enabled.apply(this, arguments); }
            },
            "setEnabledAsync": {
              "value": function () { return this.set_enabled_async.apply(this, arguments); }
            },
            "setEnabledFinish": {
              "value": function () { return this.set_enabled_finish.apply(this, arguments); }
            }
          },
          "static": {
            "getFeatureQuarkCore": {
              "value": function () { return this.get_feature_quark_core.apply(this, arguments); }
            },
            "initKnownInterfaces": {
              "value": function () { return this.init_known_interfaces.apply(this, arguments); }
            }
          }
        },
        "DebugMessage": {
          "prototype": {
            "getCategory": {
              "value": function () { return this.get_category.apply(this, arguments); }
            },
            "getDomain": {
              "value": function () { return this.get_domain.apply(this, arguments); }
            },
            "getLevel": {
              "value": function () { return this.get_level.apply(this, arguments); }
            },
            "getMessage": {
              "value": function () { return this.get_message.apply(this, arguments); }
            },
            "getTime": {
              "value": function () { return this.get_time.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "FileTransferChannel": {
          "prototype": {
            "acceptFileAsync": {
              "value": function () { return this.accept_file_async.apply(this, arguments); }
            },
            "acceptFileFinish": {
              "value": function () { return this.accept_file_finish.apply(this, arguments); }
            },
            "getDate": {
              "value": function () { return this.get_date.apply(this, arguments); }
            },
            "getDescription": {
              "value": function () { return this.get_description.apply(this, arguments); }
            },
            "getFilename": {
              "value": function () { return this.get_filename.apply(this, arguments); }
            },
            "getMetadata": {
              "value": function () { return this.get_metadata.apply(this, arguments); }
            },
            "getMimeType": {
              "value": function () { return this.get_mime_type.apply(this, arguments); }
            },
            "getServiceName": {
              "value": function () { return this.get_service_name.apply(this, arguments); }
            },
            "getSize": {
              "value": function () { return this.get_size.apply(this, arguments); }
            },
            "getState": {
              "value": function () { return this.get_state.apply(this, arguments); }
            },
            "getTransferredBytes": {
              "value": function () { return this.get_transferred_bytes.apply(this, arguments); }
            },
            "provideFileAsync": {
              "value": function () { return this.provide_file_async.apply(this, arguments); }
            },
            "provideFileFinish": {
              "value": function () { return this.provide_file_finish.apply(this, arguments); }
            },
            "initialOffset": {
              "get": function () { return this.initial_offset; },
              "set": function (value) { this.initial_offset = value; }
            },
            "mimeType": {
              "get": function () { return this.mime_type; },
              "set": function (value) { this.mime_type = value; }
            },
            "serviceName": {
              "get": function () { return this.service_name; },
              "set": function (value) { this.service_name = value; }
            },
            "transferredBytes": {
              "get": function () { return this.transferred_bytes; },
              "set": function (value) { this.transferred_bytes = value; }
            }
          },
          "static": {
            "getFeatureQuarkCore": {
              "value": function () { return this.get_feature_quark_core.apply(this, arguments); }
            }
          }
        },
        "HandleChannelsContext": {
          "prototype": {
            "getHandlerInfo": {
              "value": function () { return this.get_handler_info.apply(this, arguments); }
            },
            "getRequests": {
              "value": function () { return this.get_requests.apply(this, arguments); }
            },
            "dbusContext": {
              "get": function () { return this.dbus_context; },
              "set": function (value) { this.dbus_context = value; }
            },
            "handlerInfo": {
              "get": function () { return this.handler_info; },
              "set": function (value) { this.handler_info = value; }
            },
            "requestsSatisfied": {
              "get": function () { return this.requests_satisfied; },
              "set": function (value) { this.requests_satisfied = value; }
            },
            "userActionTime": {
              "get": function () { return this.user_action_time; },
              "set": function (value) { this.user_action_time = value; }
            }
          },
          "static": {}
        },
        "Message": {
          "prototype": {
            "appendPart": {
              "value": function () { return this.append_part.apply(this, arguments); }
            },
            "countParts": {
              "value": function () { return this.count_parts.apply(this, arguments); }
            },
            "deleteKey": {
              "value": function () { return this.delete_key.apply(this, arguments); }
            },
            "deletePart": {
              "value": function () { return this.delete_part.apply(this, arguments); }
            },
            "dupPart": {
              "value": function () { return this.dup_part.apply(this, arguments); }
            },
            "getMessageType": {
              "value": function () { return this.get_message_type.apply(this, arguments); }
            },
            "getPendingMessageId": {
              "value": function () { return this.get_pending_message_id.apply(this, arguments); }
            },
            "getReceivedTimestamp": {
              "value": function () { return this.get_received_timestamp.apply(this, arguments); }
            },
            "getSentTimestamp": {
              "value": function () { return this.get_sent_timestamp.apply(this, arguments); }
            },
            "getSpecificToInterface": {
              "value": function () { return this.get_specific_to_interface.apply(this, arguments); }
            },
            "getSupersedes": {
              "value": function () { return this.get_supersedes.apply(this, arguments); }
            },
            "getToken": {
              "value": function () { return this.get_token.apply(this, arguments); }
            },
            "isDeliveryReport": {
              "value": function () { return this.is_delivery_report.apply(this, arguments); }
            },
            "isMutable": {
              "value": function () { return this.is_mutable.apply(this, arguments); }
            },
            "isRescued": {
              "value": function () { return this.is_rescued.apply(this, arguments); }
            },
            "isScrollback": {
              "value": function () { return this.is_scrollback.apply(this, arguments); }
            },
            "refHandle": {
              "value": function () { return this.ref_handle.apply(this, arguments); }
            },
            "setBoolean": {
              "value": function () { return this.set_boolean.apply(this, arguments); }
            },
            "setBytes": {
              "value": function () { return this.set_bytes.apply(this, arguments); }
            },
            "setHandle": {
              "value": function () { return this.set_handle.apply(this, arguments); }
            },
            "setInt32": {
              "value": function () { return this.set_int32.apply(this, arguments); }
            },
            "setInt64": {
              "value": function () { return this.set_int64.apply(this, arguments); }
            },
            "setString": {
              "value": function () { return this.set_string.apply(this, arguments); }
            },
            "setStringPrintf": {
              "value": function () { return this.set_string_printf.apply(this, arguments); }
            },
            "setUint32": {
              "value": function () { return this.set_uint32.apply(this, arguments); }
            },
            "setUint64": {
              "value": function () { return this.set_uint64.apply(this, arguments); }
            },
            "setVariant": {
              "value": function () { return this.set_variant.apply(this, arguments); }
            },
            "takeMessage": {
              "value": function () { return this.take_message.apply(this, arguments); }
            },
            "toText": {
              "value": function () { return this.to_text.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "ObserveChannelsContext": {
          "prototype": {
            "getRequests": {
              "value": function () { return this.get_requests.apply(this, arguments); }
            },
            "isRecovering": {
              "value": function () { return this.is_recovering.apply(this, arguments); }
            },
            "dbusContext": {
              "get": function () { return this.dbus_context; },
              "set": function (value) { this.dbus_context = value; }
            },
            "dispatchOperation": {
              "get": function () { return this.dispatch_operation; },
              "set": function (value) { this.dispatch_operation = value; }
            },
            "observerInfo": {
              "get": function () { return this.observer_info; },
              "set": function (value) { this.observer_info = value; }
            }
          },
          "static": {}
        },
        "Protocol": {
          "prototype": {
            "borrowParams": {
              "value": function () { return this.borrow_params.apply(this, arguments); }
            },
            "canRegister": {
              "value": function () { return this.can_register.apply(this, arguments); }
            },
            "dupImmutableProperties": {
              "value": function () { return this.dup_immutable_properties.apply(this, arguments); }
            },
            "dupParam": {
              "value": function () { return this.dup_param.apply(this, arguments); }
            },
            "dupParamNames": {
              "value": function () { return this.dup_param_names.apply(this, arguments); }
            },
            "dupParams": {
              "value": function () { return this.dup_params.apply(this, arguments); }
            },
            "dupPresenceStatuses": {
              "value": function () { return this.dup_presence_statuses.apply(this, arguments); }
            },
            "getAddressableUriSchemes": {
              "value": function () { return this.get_addressable_uri_schemes.apply(this, arguments); }
            },
            "getAddressableVcardFields": {
              "value": function () { return this.get_addressable_vcard_fields.apply(this, arguments); }
            },
            "getAuthenticationTypes": {
              "value": function () { return this.get_authentication_types.apply(this, arguments); }
            },
            "getAvatarRequirements": {
              "value": function () { return this.get_avatar_requirements.apply(this, arguments); }
            },
            "getCapabilities": {
              "value": function () { return this.get_capabilities.apply(this, arguments); }
            },
            "getCmName": {
              "value": function () { return this.get_cm_name.apply(this, arguments); }
            },
            "getEnglishName": {
              "value": function () { return this.get_english_name.apply(this, arguments); }
            },
            "getIconName": {
              "value": function () { return this.get_icon_name.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getParam": {
              "value": function () { return this.get_param.apply(this, arguments); }
            },
            "getVcardField": {
              "value": function () { return this.get_vcard_field.apply(this, arguments); }
            },
            "hasParam": {
              "value": function () { return this.has_param.apply(this, arguments); }
            },
            "identifyAccountAsync": {
              "value": function () { return this.identify_account_async.apply(this, arguments); }
            },
            "identifyAccountFinish": {
              "value": function () { return this.identify_account_finish.apply(this, arguments); }
            },
            "normalizeContactAsync": {
              "value": function () { return this.normalize_contact_async.apply(this, arguments); }
            },
            "normalizeContactFinish": {
              "value": function () { return this.normalize_contact_finish.apply(this, arguments); }
            },
            "normalizeContactUriAsync": {
              "value": function () { return this.normalize_contact_uri_async.apply(this, arguments); }
            },
            "normalizeContactUriFinish": {
              "value": function () { return this.normalize_contact_uri_finish.apply(this, arguments); }
            },
            "normalizeVcardAddressAsync": {
              "value": function () { return this.normalize_vcard_address_async.apply(this, arguments); }
            },
            "normalizeVcardAddressFinish": {
              "value": function () { return this.normalize_vcard_address_finish.apply(this, arguments); }
            },
            "addressableUriSchemes": {
              "get": function () { return this.addressable_uri_schemes; },
              "set": function (value) { this.addressable_uri_schemes = value; }
            },
            "addressableVcardFields": {
              "get": function () { return this.addressable_vcard_fields; },
              "set": function (value) { this.addressable_vcard_fields = value; }
            },
            "authenticationTypes": {
              "get": function () { return this.authentication_types; },
              "set": function (value) { this.authentication_types = value; }
            },
            "avatarRequirements": {
              "get": function () { return this.avatar_requirements; },
              "set": function (value) { this.avatar_requirements = value; }
            },
            "cmName": {
              "get": function () { return this.cm_name; },
              "set": function (value) { this.cm_name = value; }
            },
            "englishName": {
              "get": function () { return this.english_name; },
              "set": function (value) { this.english_name = value; }
            },
            "iconName": {
              "get": function () { return this.icon_name; },
              "set": function (value) { this.icon_name = value; }
            },
            "paramNames": {
              "get": function () { return this.param_names; },
              "set": function (value) { this.param_names = value; }
            },
            "protocolName": {
              "get": function () { return this.protocol_name; },
              "set": function (value) { this.protocol_name = value; }
            },
            "protocolProperties": {
              "get": function () { return this.protocol_properties; },
              "set": function (value) { this.protocol_properties = value; }
            },
            "protocolPropertiesVardict": {
              "get": function () { return this.protocol_properties_vardict; },
              "set": function (value) { this.protocol_properties_vardict = value; }
            },
            "vcardField": {
              "get": function () { return this.vcard_field; },
              "set": function (value) { this.vcard_field = value; }
            }
          },
          "static": {
            "getFeatureQuarkCore": {
              "value": function () { return this.get_feature_quark_core.apply(this, arguments); }
            },
            "getFeatureQuarkParameters": {
              "value": function () { return this.get_feature_quark_parameters.apply(this, arguments); }
            },
            "initKnownInterfaces": {
              "value": function () { return this.init_known_interfaces.apply(this, arguments); }
            }
          }
        },
        "Proxy": {
          "prototype": {
            "dbusErrorToGerror": {
              "value": function () { return this.dbus_error_to_gerror.apply(this, arguments); }
            },
            "getBusName": {
              "value": function () { return this.get_bus_name.apply(this, arguments); }
            },
            "getDbusConnection": {
              "value": function () { return this.get_dbus_connection.apply(this, arguments); }
            },
            "getDbusDaemon": {
              "value": function () { return this.get_dbus_daemon.apply(this, arguments); }
            },
            "getFactory": {
              "value": function () { return this.get_factory.apply(this, arguments); }
            },
            "getInvalidated": {
              "value": function () { return this.get_invalidated.apply(this, arguments); }
            },
            "getObjectPath": {
              "value": function () { return this.get_object_path.apply(this, arguments); }
            },
            "hasInterface": {
              "value": function () { return this.has_interface.apply(this, arguments); }
            },
            "hasInterfaceById": {
              "value": function () { return this.has_interface_by_id.apply(this, arguments); }
            },
            "isPrepared": {
              "value": function () { return this.is_prepared.apply(this, arguments); }
            },
            "prepareAsync": {
              "value": function () { return this.prepare_async.apply(this, arguments); }
            },
            "prepareFinish": {
              "value": function () { return this.prepare_finish.apply(this, arguments); }
            },
            "busName": {
              "get": function () { return this.bus_name; },
              "set": function (value) { this.bus_name = value; }
            },
            "dbusConnection": {
              "get": function () { return this.dbus_connection; },
              "set": function (value) { this.dbus_connection = value; }
            },
            "dbusDaemon": {
              "get": function () { return this.dbus_daemon; },
              "set": function (value) { this.dbus_daemon = value; }
            },
            "objectPath": {
              "get": function () { return this.object_path; },
              "set": function (value) { this.object_path = value; }
            }
          },
          "static": {}
        },
        "RoomInfo": {
          "prototype": {
            "getChannelType": {
              "value": function () { return this.get_channel_type.apply(this, arguments); }
            },
            "getDescription": {
              "value": function () { return this.get_description.apply(this, arguments); }
            },
            "getHandle": {
              "value": function () { return this.get_handle.apply(this, arguments); }
            },
            "getHandleName": {
              "value": function () { return this.get_handle_name.apply(this, arguments); }
            },
            "getInviteOnly": {
              "value": function () { return this.get_invite_only.apply(this, arguments); }
            },
            "getMembersCount": {
              "value": function () { return this.get_members_count.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getRequiresPassword": {
              "value": function () { return this.get_requires_password.apply(this, arguments); }
            },
            "getRoomId": {
              "value": function () { return this.get_room_id.apply(this, arguments); }
            },
            "getServer": {
              "value": function () { return this.get_server.apply(this, arguments); }
            },
            "getSubject": {
              "value": function () { return this.get_subject.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "RoomList": {
          "prototype": {
            "getAccount": {
              "value": function () { return this.get_account.apply(this, arguments); }
            },
            "getServer": {
              "value": function () { return this.get_server.apply(this, arguments); }
            },
            "isListing": {
              "value": function () { return this.is_listing.apply(this, arguments); }
            }
          },
          "static": {
            "newAsync": {
              "value": function () { return this.new_async.apply(this, arguments); }
            }
          }
        },
        "SignalledMessage": {
          "prototype": {},
          "static": {
            "getSender": {
              "value": function () { return this.get_sender.apply(this, arguments); }
            }
          }
        },
        "SimpleApprover": {
          "prototype": {
            "userData": {
              "get": function () { return this.user_data; },
              "set": function (value) { this.user_data = value; }
            }
          },
          "static": {}
        },
        "SimpleClientFactory": {
          "prototype": {
            "addAccountFeatures": {
              "value": function () { return this.add_account_features.apply(this, arguments); }
            },
            "addAccountFeaturesVarargs": {
              "value": function () { return this.add_account_features_varargs.apply(this, arguments); }
            },
            "addChannelFeatures": {
              "value": function () { return this.add_channel_features.apply(this, arguments); }
            },
            "addChannelFeaturesVarargs": {
              "value": function () { return this.add_channel_features_varargs.apply(this, arguments); }
            },
            "addConnectionFeatures": {
              "value": function () { return this.add_connection_features.apply(this, arguments); }
            },
            "addConnectionFeaturesVarargs": {
              "value": function () { return this.add_connection_features_varargs.apply(this, arguments); }
            },
            "addContactFeatures": {
              "value": function () { return this.add_contact_features.apply(this, arguments); }
            },
            "addContactFeaturesVarargs": {
              "value": function () { return this.add_contact_features_varargs.apply(this, arguments); }
            },
            "dupAccountFeatures": {
              "value": function () { return this.dup_account_features.apply(this, arguments); }
            },
            "dupChannelFeatures": {
              "value": function () { return this.dup_channel_features.apply(this, arguments); }
            },
            "dupConnectionFeatures": {
              "value": function () { return this.dup_connection_features.apply(this, arguments); }
            },
            "dupContactFeatures": {
              "value": function () { return this.dup_contact_features.apply(this, arguments); }
            },
            "ensureAccount": {
              "value": function () { return this.ensure_account.apply(this, arguments); }
            },
            "ensureChannel": {
              "value": function () { return this.ensure_channel.apply(this, arguments); }
            },
            "ensureConnection": {
              "value": function () { return this.ensure_connection.apply(this, arguments); }
            },
            "ensureContact": {
              "value": function () { return this.ensure_contact.apply(this, arguments); }
            },
            "ensureContactByIdAsync": {
              "value": function () { return this.ensure_contact_by_id_async.apply(this, arguments); }
            },
            "ensureContactByIdFinish": {
              "value": function () { return this.ensure_contact_by_id_finish.apply(this, arguments); }
            },
            "getDbusDaemon": {
              "value": function () { return this.get_dbus_daemon.apply(this, arguments); }
            },
            "upgradeContactsAsync": {
              "value": function () { return this.upgrade_contacts_async.apply(this, arguments); }
            },
            "upgradeContactsFinish": {
              "value": function () { return this.upgrade_contacts_finish.apply(this, arguments); }
            },
            "dbusDaemon": {
              "get": function () { return this.dbus_daemon; },
              "set": function (value) { this.dbus_daemon = value; }
            }
          },
          "static": {}
        },
        "SimpleHandler": {
          "prototype": {
            "bypassApproval": {
              "get": function () { return this.bypass_approval; },
              "set": function (value) { this.bypass_approval = value; }
            },
            "userData": {
              "get": function () { return this.user_data; },
              "set": function (value) { this.user_data = value; }
            }
          },
          "static": {}
        },
        "SimpleObserver": {
          "prototype": {
            "userData": {
              "get": function () { return this.user_data; },
              "set": function (value) { this.user_data = value; }
            }
          },
          "static": {}
        },
        "StreamTubeChannel": {
          "prototype": {
            "acceptAsync": {
              "value": function () { return this.accept_async.apply(this, arguments); }
            },
            "acceptFinish": {
              "value": function () { return this.accept_finish.apply(this, arguments); }
            },
            "dupParametersVardict": {
              "value": function () { return this.dup_parameters_vardict.apply(this, arguments); }
            },
            "getParameters": {
              "value": function () { return this.get_parameters.apply(this, arguments); }
            },
            "getService": {
              "value": function () { return this.get_service.apply(this, arguments); }
            },
            "offerAsync": {
              "value": function () { return this.offer_async.apply(this, arguments); }
            },
            "offerFinish": {
              "value": function () { return this.offer_finish.apply(this, arguments); }
            },
            "parametersVardict": {
              "get": function () { return this.parameters_vardict; },
              "set": function (value) { this.parameters_vardict = value; }
            }
          },
          "static": {}
        },
        "StreamTubeConnection": {
          "prototype": {
            "getChannel": {
              "value": function () { return this.get_channel.apply(this, arguments); }
            },
            "getContact": {
              "value": function () { return this.get_contact.apply(this, arguments); }
            },
            "getSocketConnection": {
              "value": function () { return this.get_socket_connection.apply(this, arguments); }
            },
            "socketConnection": {
              "get": function () { return this.socket_connection; },
              "set": function (value) { this.socket_connection = value; }
            }
          },
          "static": {}
        },
        "TLSCertificate": {
          "prototype": {
            "acceptAsync": {
              "value": function () { return this.accept_async.apply(this, arguments); }
            },
            "acceptFinish": {
              "value": function () { return this.accept_finish.apply(this, arguments); }
            },
            "addRejection": {
              "value": function () { return this.add_rejection.apply(this, arguments); }
            },
            "getCertData": {
              "value": function () { return this.get_cert_data.apply(this, arguments); }
            },
            "getCertType": {
              "value": function () { return this.get_cert_type.apply(this, arguments); }
            },
            "getNthRejection": {
              "value": function () { return this.get_nth_rejection.apply(this, arguments); }
            },
            "getRejection": {
              "value": function () { return this.get_rejection.apply(this, arguments); }
            },
            "getState": {
              "value": function () { return this.get_state.apply(this, arguments); }
            },
            "rejectAsync": {
              "value": function () { return this.reject_async.apply(this, arguments); }
            },
            "rejectFinish": {
              "value": function () { return this.reject_finish.apply(this, arguments); }
            },
            "certData": {
              "get": function () { return this.cert_data; },
              "set": function (value) { this.cert_data = value; }
            },
            "certType": {
              "get": function () { return this.cert_type; },
              "set": function (value) { this.cert_type = value; }
            }
          },
          "static": {
            "getFeatureQuarkCore": {
              "value": function () { return this.get_feature_quark_core.apply(this, arguments); }
            },
            "initKnownInterfaces": {
              "value": function () { return this.init_known_interfaces.apply(this, arguments); }
            }
          }
        },
        "TLSCertificateRejection": {
          "prototype": {
            "getDbusError": {
              "value": function () { return this.get_dbus_error.apply(this, arguments); }
            },
            "getDetails": {
              "value": function () { return this.get_details.apply(this, arguments); }
            },
            "getError": {
              "value": function () { return this.get_error.apply(this, arguments); }
            },
            "getReason": {
              "value": function () { return this.get_reason.apply(this, arguments); }
            },
            "raiseError": {
              "value": function () { return this.raise_error.apply(this, arguments); }
            },
            "dbusError": {
              "get": function () { return this.dbus_error; },
              "set": function (value) { this.dbus_error = value; }
            }
          },
          "static": {}
        },
        "TextChannel": {
          "prototype": {
            "ackAllPendingMessagesAsync": {
              "value": function () { return this.ack_all_pending_messages_async.apply(this, arguments); }
            },
            "ackAllPendingMessagesFinish": {
              "value": function () { return this.ack_all_pending_messages_finish.apply(this, arguments); }
            },
            "ackMessageAsync": {
              "value": function () { return this.ack_message_async.apply(this, arguments); }
            },
            "ackMessageFinish": {
              "value": function () { return this.ack_message_finish.apply(this, arguments); }
            },
            "ackMessagesAsync": {
              "value": function () { return this.ack_messages_async.apply(this, arguments); }
            },
            "ackMessagesFinish": {
              "value": function () { return this.ack_messages_finish.apply(this, arguments); }
            },
            "dupPendingMessages": {
              "value": function () { return this.dup_pending_messages.apply(this, arguments); }
            },
            "getChatState": {
              "value": function () { return this.get_chat_state.apply(this, arguments); }
            },
            "getDeliveryReportingSupport": {
              "value": function () { return this.get_delivery_reporting_support.apply(this, arguments); }
            },
            "getMessagePartSupportFlags": {
              "value": function () { return this.get_message_part_support_flags.apply(this, arguments); }
            },
            "getMessageTypes": {
              "value": function () { return this.get_message_types.apply(this, arguments); }
            },
            "getPendingMessages": {
              "value": function () { return this.get_pending_messages.apply(this, arguments); }
            },
            "getSmsFlash": {
              "value": function () { return this.get_sms_flash.apply(this, arguments); }
            },
            "getSmsLengthAsync": {
              "value": function () { return this.get_sms_length_async.apply(this, arguments); }
            },
            "getSmsLengthFinish": {
              "value": function () { return this.get_sms_length_finish.apply(this, arguments); }
            },
            "getSupportedContentTypes": {
              "value": function () { return this.get_supported_content_types.apply(this, arguments); }
            },
            "isSmsChannel": {
              "get": function () { return this.is_sms_channel; },
              "set": function (value) { this.is_sms_channel = value; }
            },
            "sendMessageAsync": {
              "value": function () { return this.send_message_async.apply(this, arguments); }
            },
            "sendMessageFinish": {
              "value": function () { return this.send_message_finish.apply(this, arguments); }
            },
            "setChatStateAsync": {
              "value": function () { return this.set_chat_state_async.apply(this, arguments); }
            },
            "setChatStateFinish": {
              "value": function () { return this.set_chat_state_finish.apply(this, arguments); }
            },
            "supportsMessageType": {
              "value": function () { return this.supports_message_type.apply(this, arguments); }
            },
            "deliveryReportingSupport": {
              "get": function () { return this.delivery_reporting_support; },
              "set": function (value) { this.delivery_reporting_support = value; }
            },
            "messagePartSupportFlags": {
              "get": function () { return this.message_part_support_flags; },
              "set": function (value) { this.message_part_support_flags = value; }
            },
            "messageTypes": {
              "get": function () { return this.message_types; },
              "set": function (value) { this.message_types = value; }
            },
            "smsFlash": {
              "get": function () { return this.sms_flash; },
              "set": function (value) { this.sms_flash = value; }
            },
            "supportedContentTypes": {
              "get": function () { return this.supported_content_types; },
              "set": function (value) { this.supported_content_types = value; }
            }
          },
          "static": {
            "getFeatureQuarkChatStates": {
              "value": function () { return this.get_feature_quark_chat_states.apply(this, arguments); }
            },
            "getFeatureQuarkIncomingMessages": {
              "value": function () { return this.get_feature_quark_incoming_messages.apply(this, arguments); }
            },
            "getFeatureQuarkSms": {
              "value": function () { return this.get_feature_quark_sms.apply(this, arguments); }
            }
          }
        }
      },
      "static": {
        "asvDump": {
          "value": function () { return this.asv_dump.apply(this, arguments); }
        },
        "asvGetBoolean": {
          "value": function () { return this.asv_get_boolean.apply(this, arguments); }
        },
        "asvGetBoxed": {
          "value": function () { return this.asv_get_boxed.apply(this, arguments); }
        },
        "asvGetBytes": {
          "value": function () { return this.asv_get_bytes.apply(this, arguments); }
        },
        "asvGetDouble": {
          "value": function () { return this.asv_get_double.apply(this, arguments); }
        },
        "asvGetInt32": {
          "value": function () { return this.asv_get_int32.apply(this, arguments); }
        },
        "asvGetInt64": {
          "value": function () { return this.asv_get_int64.apply(this, arguments); }
        },
        "asvGetObjectPath": {
          "value": function () { return this.asv_get_object_path.apply(this, arguments); }
        },
        "asvGetString": {
          "value": function () { return this.asv_get_string.apply(this, arguments); }
        },
        "asvGetStrv": {
          "value": function () { return this.asv_get_strv.apply(this, arguments); }
        },
        "asvGetUint32": {
          "value": function () { return this.asv_get_uint32.apply(this, arguments); }
        },
        "asvGetUint64": {
          "value": function () { return this.asv_get_uint64.apply(this, arguments); }
        },
        "asvLookup": {
          "value": function () { return this.asv_lookup.apply(this, arguments); }
        },
        "asvNew": {
          "value": function () { return this.asv_new.apply(this, arguments); }
        },
        "asvSetBoolean": {
          "value": function () { return this.asv_set_boolean.apply(this, arguments); }
        },
        "asvSetBoxed": {
          "value": function () { return this.asv_set_boxed.apply(this, arguments); }
        },
        "asvSetBytes": {
          "value": function () { return this.asv_set_bytes.apply(this, arguments); }
        },
        "asvSetDouble": {
          "value": function () { return this.asv_set_double.apply(this, arguments); }
        },
        "asvSetInt32": {
          "value": function () { return this.asv_set_int32.apply(this, arguments); }
        },
        "asvSetInt64": {
          "value": function () { return this.asv_set_int64.apply(this, arguments); }
        },
        "asvSetObjectPath": {
          "value": function () { return this.asv_set_object_path.apply(this, arguments); }
        },
        "asvSetStaticBoxed": {
          "value": function () { return this.asv_set_static_boxed.apply(this, arguments); }
        },
        "asvSetStaticObjectPath": {
          "value": function () { return this.asv_set_static_object_path.apply(this, arguments); }
        },
        "asvSetStaticString": {
          "value": function () { return this.asv_set_static_string.apply(this, arguments); }
        },
        "asvSetString": {
          "value": function () { return this.asv_set_string.apply(this, arguments); }
        },
        "asvSetStrv": {
          "value": function () { return this.asv_set_strv.apply(this, arguments); }
        },
        "asvSetUint32": {
          "value": function () { return this.asv_set_uint32.apply(this, arguments); }
        },
        "asvSetUint64": {
          "value": function () { return this.asv_set_uint64.apply(this, arguments); }
        },
        "asvTakeBoxed": {
          "value": function () { return this.asv_take_boxed.apply(this, arguments); }
        },
        "asvTakeBytes": {
          "value": function () { return this.asv_take_bytes.apply(this, arguments); }
        },
        "asvTakeObjectPath": {
          "value": function () { return this.asv_take_object_path.apply(this, arguments); }
        },
        "asvTakeString": {
          "value": function () { return this.asv_take_string.apply(this, arguments); }
        },
        "contactInfoListCopy": {
          "value": function () { return this.contact_info_list_copy.apply(this, arguments); }
        },
        "contactInfoListFree": {
          "value": function () { return this.contact_info_list_free.apply(this, arguments); }
        },
        "contactInfoSpecListCopy": {
          "value": function () { return this.contact_info_spec_list_copy.apply(this, arguments); }
        },
        "contactInfoSpecListFree": {
          "value": function () { return this.contact_info_spec_list_free.apply(this, arguments); }
        },
        "contactsMixinAddContactAttributesIface": {
          "value": function () { return this.contacts_mixin_add_contact_attributes_iface.apply(this, arguments); }
        },
        "contactsMixinClassGetOffsetQuark": {
          "value": function () { return this.contacts_mixin_class_get_offset_quark.apply(this, arguments); }
        },
        "contactsMixinClassInit": {
          "value": function () { return this.contacts_mixin_class_init.apply(this, arguments); }
        },
        "contactsMixinFinalize": {
          "value": function () { return this.contacts_mixin_finalize.apply(this, arguments); }
        },
        "contactsMixinGetContactAttributes": {
          "value": function () { return this.contacts_mixin_get_contact_attributes.apply(this, arguments); }
        },
        "contactsMixinGetOffsetQuark": {
          "value": function () { return this.contacts_mixin_get_offset_quark.apply(this, arguments); }
        },
        "contactsMixinIfaceInit": {
          "value": function () { return this.contacts_mixin_iface_init.apply(this, arguments); }
        },
        "contactsMixinInit": {
          "value": function () { return this.contacts_mixin_init.apply(this, arguments); }
        },
        "contactsMixinSetContactAttribute": {
          "value": function () { return this.contacts_mixin_set_contact_attribute.apply(this, arguments); }
        },
        "dbusCheckValidBusName": {
          "value": function () { return this.dbus_check_valid_bus_name.apply(this, arguments); }
        },
        "dbusCheckValidInterfaceName": {
          "value": function () { return this.dbus_check_valid_interface_name.apply(this, arguments); }
        },
        "dbusCheckValidMemberName": {
          "value": function () { return this.dbus_check_valid_member_name.apply(this, arguments); }
        },
        "dbusCheckValidObjectPath": {
          "value": function () { return this.dbus_check_valid_object_path.apply(this, arguments); }
        },
        "dbusErrorsQuark": {
          "value": function () { return this.dbus_errors_quark.apply(this, arguments); }
        },
        "dbusGMethodReturnNotImplemented": {
          "value": function () { return this.dbus_g_method_return_not_implemented.apply(this, arguments); }
        },
        "dbusPropertiesMixinClassInit": {
          "value": function () { return this.dbus_properties_mixin_class_init.apply(this, arguments); }
        },
        "dbusPropertiesMixinDupAll": {
          "value": function () { return this.dbus_properties_mixin_dup_all.apply(this, arguments); }
        },
        "dbusPropertiesMixinEmitPropertiesChanged": {
          "value": function () { return this.dbus_properties_mixin_emit_properties_changed.apply(this, arguments); }
        },
        "dbusPropertiesMixinEmitPropertiesChangedVarargs": {
          "value": function () { return this.dbus_properties_mixin_emit_properties_changed_varargs.apply(this, arguments); }
        },
        "dbusPropertiesMixinFillPropertiesHash": {
          "value": function () { return this.dbus_properties_mixin_fill_properties_hash.apply(this, arguments); }
        },
        "dbusPropertiesMixinGet": {
          "value": function () { return this.dbus_properties_mixin_get.apply(this, arguments); }
        },
        "dbusPropertiesMixinGetterGobjectProperties": {
          "value": function () { return this.dbus_properties_mixin_getter_gobject_properties.apply(this, arguments); }
        },
        "dbusPropertiesMixinIfaceInit": {
          "value": function () { return this.dbus_properties_mixin_iface_init.apply(this, arguments); }
        },
        "dbusPropertiesMixinImplementInterface": {
          "value": function () { return this.dbus_properties_mixin_implement_interface.apply(this, arguments); }
        },
        "dbusPropertiesMixinMakePropertiesHash": {
          "value": function () { return this.dbus_properties_mixin_make_properties_hash.apply(this, arguments); }
        },
        "dbusPropertiesMixinSet": {
          "value": function () { return this.dbus_properties_mixin_set.apply(this, arguments); }
        },
        "dbusPropertiesMixinSetterGobjectProperties": {
          "value": function () { return this.dbus_properties_mixin_setter_gobject_properties.apply(this, arguments); }
        },
        "debugDivertMessages": {
          "value": function () { return this.debug_divert_messages.apply(this, arguments); }
        },
        "debugSetAllFlags": {
          "value": function () { return this.debug_set_all_flags.apply(this, arguments); }
        },
        "debugSetFlags": {
          "value": function () { return this.debug_set_flags.apply(this, arguments); }
        },
        "debugSetFlagsFromEnv": {
          "value": function () { return this.debug_set_flags_from_env.apply(this, arguments); }
        },
        "debugSetFlagsFromString": {
          "value": function () { return this.debug_set_flags_from_string.apply(this, arguments); }
        },
        "debugSetPersistent": {
          "value": function () { return this.debug_set_persistent.apply(this, arguments); }
        },
        "debugTimestampedLogHandler": {
          "value": function () { return this.debug_timestamped_log_handler.apply(this, arguments); }
        },
        "errorGetDbusName": {
          "value": function () { return this.error_get_dbus_name.apply(this, arguments); }
        },
        "errorQuark": {
          "value": function () { return this.error_quark.apply(this, arguments); }
        },
        "errorsDisconnectedQuark": {
          "value": function () { return this.errors_disconnected_quark.apply(this, arguments); }
        },
        "errorsQuark": {
          "value": function () { return this.errors_quark.apply(this, arguments); }
        },
        "errorsRemovedFromGroupQuark": {
          "value": function () { return this.errors_removed_from_group_quark.apply(this, arguments); }
        },
        "escapeAsIdentifier": {
          "value": function () { return this.escape_as_identifier.apply(this, arguments); }
        },
        "externalGroupMixinFinalize": {
          "value": function () { return this.external_group_mixin_finalize.apply(this, arguments); }
        },
        "externalGroupMixinGetDbusProperty": {
          "value": function () { return this.external_group_mixin_get_dbus_property.apply(this, arguments); }
        },
        "externalGroupMixinIfaceInit": {
          "value": function () { return this.external_group_mixin_iface_init.apply(this, arguments); }
        },
        "externalGroupMixinInit": {
          "value": function () { return this.external_group_mixin_init.apply(this, arguments); }
        },
        "externalGroupMixinInitDbusProperties": {
          "value": function () { return this.external_group_mixin_init_dbus_properties.apply(this, arguments); }
        },
        "gHashTableUpdate": {
          "value": function () { return this.g_hash_table_update.apply(this, arguments); }
        },
        "gKeyFileGetInt64": {
          "value": function () { return this.g_key_file_get_int64.apply(this, arguments); }
        },
        "gKeyFileGetUint64": {
          "value": function () { return this.g_key_file_get_uint64.apply(this, arguments); }
        },
        "gPtrArrayContains": {
          "value": function () { return this.g_ptr_array_contains.apply(this, arguments); }
        },
        "gPtrArrayExtend": {
          "value": function () { return this.g_ptr_array_extend.apply(this, arguments); }
        },
        "gSetErrorInvalidHandleType": {
          "value": function () { return this.g_set_error_invalid_handle_type.apply(this, arguments); }
        },
        "gSetErrorUnsupportedHandleType": {
          "value": function () { return this.g_set_error_unsupported_handle_type.apply(this, arguments); }
        },
        "gSignalConnectObject": {
          "value": function () { return this.g_signal_connect_object.apply(this, arguments); }
        },
        "gValueSliceDup": {
          "value": function () { return this.g_value_slice_dup.apply(this, arguments); }
        },
        "gValueSliceFree": {
          "value": function () { return this.g_value_slice_free.apply(this, arguments); }
        },
        "getBus": {
          "value": function () { return this.get_bus.apply(this, arguments); }
        },
        "getBusProxy": {
          "value": function () { return this.get_bus_proxy.apply(this, arguments); }
        },
        "groupMixinAddHandleOwner": {
          "value": function () { return this.group_mixin_add_handle_owner.apply(this, arguments); }
        },
        "groupMixinAddHandleOwners": {
          "value": function () { return this.group_mixin_add_handle_owners.apply(this, arguments); }
        },
        "groupMixinAddMembers": {
          "value": function () { return this.group_mixin_add_members.apply(this, arguments); }
        },
        "groupMixinChangeFlags": {
          "value": function () { return this.group_mixin_change_flags.apply(this, arguments); }
        },
        "groupMixinChangeMembers": {
          "value": function () { return this.group_mixin_change_members.apply(this, arguments); }
        },
        "groupMixinChangeMembersDetailed": {
          "value": function () { return this.group_mixin_change_members_detailed.apply(this, arguments); }
        },
        "groupMixinChangeSelfHandle": {
          "value": function () { return this.group_mixin_change_self_handle.apply(this, arguments); }
        },
        "groupMixinClassAllowSelfRemoval": {
          "value": function () { return this.group_mixin_class_allow_self_removal.apply(this, arguments); }
        },
        "groupMixinClassGetOffsetQuark": {
          "value": function () { return this.group_mixin_class_get_offset_quark.apply(this, arguments); }
        },
        "groupMixinClassInit": {
          "value": function () { return this.group_mixin_class_init.apply(this, arguments); }
        },
        "groupMixinClassSetRemoveWithReasonFunc": {
          "value": function () { return this.group_mixin_class_set_remove_with_reason_func.apply(this, arguments); }
        },
        "groupMixinFinalize": {
          "value": function () { return this.group_mixin_finalize.apply(this, arguments); }
        },
        "groupMixinGetAllMembers": {
          "value": function () { return this.group_mixin_get_all_members.apply(this, arguments); }
        },
        "groupMixinGetDbusProperty": {
          "value": function () { return this.group_mixin_get_dbus_property.apply(this, arguments); }
        },
        "groupMixinGetGroupFlags": {
          "value": function () { return this.group_mixin_get_group_flags.apply(this, arguments); }
        },
        "groupMixinGetHandleOwners": {
          "value": function () { return this.group_mixin_get_handle_owners.apply(this, arguments); }
        },
        "groupMixinGetLocalPendingMembers": {
          "value": function () { return this.group_mixin_get_local_pending_members.apply(this, arguments); }
        },
        "groupMixinGetLocalPendingMembersWithInfo": {
          "value": function () { return this.group_mixin_get_local_pending_members_with_info.apply(this, arguments); }
        },
        "groupMixinGetMembers": {
          "value": function () { return this.group_mixin_get_members.apply(this, arguments); }
        },
        "groupMixinGetOffsetQuark": {
          "value": function () { return this.group_mixin_get_offset_quark.apply(this, arguments); }
        },
        "groupMixinGetRemotePendingMembers": {
          "value": function () { return this.group_mixin_get_remote_pending_members.apply(this, arguments); }
        },
        "groupMixinGetSelfHandle": {
          "value": function () { return this.group_mixin_get_self_handle.apply(this, arguments); }
        },
        "groupMixinIfaceInit": {
          "value": function () { return this.group_mixin_iface_init.apply(this, arguments); }
        },
        "groupMixinInit": {
          "value": function () { return this.group_mixin_init.apply(this, arguments); }
        },
        "groupMixinInitDbusProperties": {
          "value": function () { return this.group_mixin_init_dbus_properties.apply(this, arguments); }
        },
        "groupMixinRemoveMembers": {
          "value": function () { return this.group_mixin_remove_members.apply(this, arguments); }
        },
        "groupMixinRemoveMembersWithReason": {
          "value": function () { return this.group_mixin_remove_members_with_reason.apply(this, arguments); }
        },
        "handleClientHold": {
          "value": function () { return this.handle_client_hold.apply(this, arguments); }
        },
        "handleClientRelease": {
          "value": function () { return this.handle_client_release.apply(this, arguments); }
        },
        "handleEnsure": {
          "value": function () { return this.handle_ensure.apply(this, arguments); }
        },
        "handleEnsureAsync": {
          "value": function () { return this.handle_ensure_async.apply(this, arguments); }
        },
        "handleEnsureFinish": {
          "value": function () { return this.handle_ensure_finish.apply(this, arguments); }
        },
        "handleGetQdata": {
          "value": function () { return this.handle_get_qdata.apply(this, arguments); }
        },
        "handleInspect": {
          "value": function () { return this.handle_inspect.apply(this, arguments); }
        },
        "handleIsValid": {
          "value": function () { return this.handle_is_valid.apply(this, arguments); }
        },
        "handleLookup": {
          "value": function () { return this.handle_lookup.apply(this, arguments); }
        },
        "handleRef": {
          "value": function () { return this.handle_ref.apply(this, arguments); }
        },
        "handleSetQdata": {
          "value": function () { return this.handle_set_qdata.apply(this, arguments); }
        },
        "handleTypeIsValid": {
          "value": function () { return this.handle_type_is_valid.apply(this, arguments); }
        },
        "handleTypeToString": {
          "value": function () { return this.handle_type_to_string.apply(this, arguments); }
        },
        "handleUnref": {
          "value": function () { return this.handle_unref.apply(this, arguments); }
        },
        "handlesAreValid": {
          "value": function () { return this.handles_are_valid.apply(this, arguments); }
        },
        "handlesClientHold": {
          "value": function () { return this.handles_client_hold.apply(this, arguments); }
        },
        "handlesClientRelease": {
          "value": function () { return this.handles_client_release.apply(this, arguments); }
        },
        "handlesRef": {
          "value": function () { return this.handles_ref.apply(this, arguments); }
        },
        "handlesSupportedAndValid": {
          "value": function () { return this.handles_supported_and_valid.apply(this, arguments); }
        },
        "handlesUnref": {
          "value": function () { return this.handles_unref.apply(this, arguments); }
        },
        "ifaceQuarkAccount": {
          "value": function () { return this.iface_quark_account.apply(this, arguments); }
        },
        "ifaceQuarkAccountInterfaceAddressing": {
          "value": function () { return this.iface_quark_account_interface_addressing.apply(this, arguments); }
        },
        "ifaceQuarkAccountInterfaceAvatar": {
          "value": function () { return this.iface_quark_account_interface_avatar.apply(this, arguments); }
        },
        "ifaceQuarkAccountInterfaceStorage": {
          "value": function () { return this.iface_quark_account_interface_storage.apply(this, arguments); }
        },
        "ifaceQuarkAccountManager": {
          "value": function () { return this.iface_quark_account_manager.apply(this, arguments); }
        },
        "ifaceQuarkAuthenticationTlsCertificate": {
          "value": function () { return this.iface_quark_authentication_tls_certificate.apply(this, arguments); }
        },
        "ifaceQuarkCallContent": {
          "value": function () { return this.iface_quark_call_content.apply(this, arguments); }
        },
        "ifaceQuarkCallContentInterfaceAudioControl": {
          "value": function () { return this.iface_quark_call_content_interface_audio_control.apply(this, arguments); }
        },
        "ifaceQuarkCallContentInterfaceDtmf": {
          "value": function () { return this.iface_quark_call_content_interface_dtmf.apply(this, arguments); }
        },
        "ifaceQuarkCallContentInterfaceMedia": {
          "value": function () { return this.iface_quark_call_content_interface_media.apply(this, arguments); }
        },
        "ifaceQuarkCallContentInterfaceVideoControl": {
          "value": function () { return this.iface_quark_call_content_interface_video_control.apply(this, arguments); }
        },
        "ifaceQuarkCallContentMediaDescription": {
          "value": function () { return this.iface_quark_call_content_media_description.apply(this, arguments); }
        },
        "ifaceQuarkCallContentMediaDescriptionInterfaceRtcpExtendedReports": {
          "value": function () { return this.iface_quark_call_content_media_description_interface_rtcp_extended_reports.apply(this, arguments); }
        },
        "ifaceQuarkCallContentMediaDescriptionInterfaceRtcpFeedback": {
          "value": function () { return this.iface_quark_call_content_media_description_interface_rtcp_feedback.apply(this, arguments); }
        },
        "ifaceQuarkCallContentMediaDescriptionInterfaceRtpHeaderExtensions": {
          "value": function () { return this.iface_quark_call_content_media_description_interface_rtp_header_extensions.apply(this, arguments); }
        },
        "ifaceQuarkCallStream": {
          "value": function () { return this.iface_quark_call_stream.apply(this, arguments); }
        },
        "ifaceQuarkCallStreamEndpoint": {
          "value": function () { return this.iface_quark_call_stream_endpoint.apply(this, arguments); }
        },
        "ifaceQuarkCallStreamInterfaceMedia": {
          "value": function () { return this.iface_quark_call_stream_interface_media.apply(this, arguments); }
        },
        "ifaceQuarkChannel": {
          "value": function () { return this.iface_quark_channel.apply(this, arguments); }
        },
        "ifaceQuarkChannelDispatchOperation": {
          "value": function () { return this.iface_quark_channel_dispatch_operation.apply(this, arguments); }
        },
        "ifaceQuarkChannelDispatcher": {
          "value": function () { return this.iface_quark_channel_dispatcher.apply(this, arguments); }
        },
        "ifaceQuarkChannelDispatcherInterfaceMessages1": {
          "value": function () { return this.iface_quark_channel_dispatcher_interface_messages1.apply(this, arguments); }
        },
        "ifaceQuarkChannelDispatcherInterfaceOperationList": {
          "value": function () { return this.iface_quark_channel_dispatcher_interface_operation_list.apply(this, arguments); }
        },
        "ifaceQuarkChannelInterfaceAnonymity": {
          "value": function () { return this.iface_quark_channel_interface_anonymity.apply(this, arguments); }
        },
        "ifaceQuarkChannelInterfaceCallState": {
          "value": function () { return this.iface_quark_channel_interface_call_state.apply(this, arguments); }
        },
        "ifaceQuarkChannelInterfaceCaptchaAuthentication": {
          "value": function () { return this.iface_quark_channel_interface_captcha_authentication.apply(this, arguments); }
        },
        "ifaceQuarkChannelInterfaceChatState": {
          "value": function () { return this.iface_quark_channel_interface_chat_state.apply(this, arguments); }
        },
        "ifaceQuarkChannelInterfaceConference": {
          "value": function () { return this.iface_quark_channel_interface_conference.apply(this, arguments); }
        },
        "ifaceQuarkChannelInterfaceDestroyable": {
          "value": function () { return this.iface_quark_channel_interface_destroyable.apply(this, arguments); }
        },
        "ifaceQuarkChannelInterfaceDtmf": {
          "value": function () { return this.iface_quark_channel_interface_dtmf.apply(this, arguments); }
        },
        "ifaceQuarkChannelInterfaceFileTransferMetadata": {
          "value": function () { return this.iface_quark_channel_interface_file_transfer_metadata.apply(this, arguments); }
        },
        "ifaceQuarkChannelInterfaceGroup": {
          "value": function () { return this.iface_quark_channel_interface_group.apply(this, arguments); }
        },
        "ifaceQuarkChannelInterfaceHold": {
          "value": function () { return this.iface_quark_channel_interface_hold.apply(this, arguments); }
        },
        "ifaceQuarkChannelInterfaceMediaSignalling": {
          "value": function () { return this.iface_quark_channel_interface_media_signalling.apply(this, arguments); }
        },
        "ifaceQuarkChannelInterfaceMessages": {
          "value": function () { return this.iface_quark_channel_interface_messages.apply(this, arguments); }
        },
        "ifaceQuarkChannelInterfacePassword": {
          "value": function () { return this.iface_quark_channel_interface_password.apply(this, arguments); }
        },
        "ifaceQuarkChannelInterfaceRoom": {
          "value": function () { return this.iface_quark_channel_interface_room.apply(this, arguments); }
        },
        "ifaceQuarkChannelInterfaceRoomConfig": {
          "value": function () { return this.iface_quark_channel_interface_room_config.apply(this, arguments); }
        },
        "ifaceQuarkChannelInterfaceSaslAuthentication": {
          "value": function () { return this.iface_quark_channel_interface_sasl_authentication.apply(this, arguments); }
        },
        "ifaceQuarkChannelInterfaceSecurable": {
          "value": function () { return this.iface_quark_channel_interface_securable.apply(this, arguments); }
        },
        "ifaceQuarkChannelInterfaceServicePoint": {
          "value": function () { return this.iface_quark_channel_interface_service_point.apply(this, arguments); }
        },
        "ifaceQuarkChannelInterfaceSms": {
          "value": function () { return this.iface_quark_channel_interface_sms.apply(this, arguments); }
        },
        "ifaceQuarkChannelInterfaceSubject": {
          "value": function () { return this.iface_quark_channel_interface_subject.apply(this, arguments); }
        },
        "ifaceQuarkChannelInterfaceTube": {
          "value": function () { return this.iface_quark_channel_interface_tube.apply(this, arguments); }
        },
        "ifaceQuarkChannelRequest": {
          "value": function () { return this.iface_quark_channel_request.apply(this, arguments); }
        },
        "ifaceQuarkChannelTypeCall": {
          "value": function () { return this.iface_quark_channel_type_call.apply(this, arguments); }
        },
        "ifaceQuarkChannelTypeContactList": {
          "value": function () { return this.iface_quark_channel_type_contact_list.apply(this, arguments); }
        },
        "ifaceQuarkChannelTypeContactSearch": {
          "value": function () { return this.iface_quark_channel_type_contact_search.apply(this, arguments); }
        },
        "ifaceQuarkChannelTypeDbusTube": {
          "value": function () { return this.iface_quark_channel_type_dbus_tube.apply(this, arguments); }
        },
        "ifaceQuarkChannelTypeFileTransfer": {
          "value": function () { return this.iface_quark_channel_type_file_transfer.apply(this, arguments); }
        },
        "ifaceQuarkChannelTypeRoomList": {
          "value": function () { return this.iface_quark_channel_type_room_list.apply(this, arguments); }
        },
        "ifaceQuarkChannelTypeServerAuthentication": {
          "value": function () { return this.iface_quark_channel_type_server_authentication.apply(this, arguments); }
        },
        "ifaceQuarkChannelTypeServerTlsConnection": {
          "value": function () { return this.iface_quark_channel_type_server_tls_connection.apply(this, arguments); }
        },
        "ifaceQuarkChannelTypeStreamTube": {
          "value": function () { return this.iface_quark_channel_type_stream_tube.apply(this, arguments); }
        },
        "ifaceQuarkChannelTypeStreamedMedia": {
          "value": function () { return this.iface_quark_channel_type_streamed_media.apply(this, arguments); }
        },
        "ifaceQuarkChannelTypeText": {
          "value": function () { return this.iface_quark_channel_type_text.apply(this, arguments); }
        },
        "ifaceQuarkChannelTypeTubes": {
          "value": function () { return this.iface_quark_channel_type_tubes.apply(this, arguments); }
        },
        "ifaceQuarkClient": {
          "value": function () { return this.iface_quark_client.apply(this, arguments); }
        },
        "ifaceQuarkClientApprover": {
          "value": function () { return this.iface_quark_client_approver.apply(this, arguments); }
        },
        "ifaceQuarkClientHandler": {
          "value": function () { return this.iface_quark_client_handler.apply(this, arguments); }
        },
        "ifaceQuarkClientInterfaceRequests": {
          "value": function () { return this.iface_quark_client_interface_requests.apply(this, arguments); }
        },
        "ifaceQuarkClientObserver": {
          "value": function () { return this.iface_quark_client_observer.apply(this, arguments); }
        },
        "ifaceQuarkConnection": {
          "value": function () { return this.iface_quark_connection.apply(this, arguments); }
        },
        "ifaceQuarkConnectionInterfaceAddressing": {
          "value": function () { return this.iface_quark_connection_interface_addressing.apply(this, arguments); }
        },
        "ifaceQuarkConnectionInterfaceAliasing": {
          "value": function () { return this.iface_quark_connection_interface_aliasing.apply(this, arguments); }
        },
        "ifaceQuarkConnectionInterfaceAnonymity": {
          "value": function () { return this.iface_quark_connection_interface_anonymity.apply(this, arguments); }
        },
        "ifaceQuarkConnectionInterfaceAvatars": {
          "value": function () { return this.iface_quark_connection_interface_avatars.apply(this, arguments); }
        },
        "ifaceQuarkConnectionInterfaceBalance": {
          "value": function () { return this.iface_quark_connection_interface_balance.apply(this, arguments); }
        },
        "ifaceQuarkConnectionInterfaceCapabilities": {
          "value": function () { return this.iface_quark_connection_interface_capabilities.apply(this, arguments); }
        },
        "ifaceQuarkConnectionInterfaceCellular": {
          "value": function () { return this.iface_quark_connection_interface_cellular.apply(this, arguments); }
        },
        "ifaceQuarkConnectionInterfaceClientTypes": {
          "value": function () { return this.iface_quark_connection_interface_client_types.apply(this, arguments); }
        },
        "ifaceQuarkConnectionInterfaceContactBlocking": {
          "value": function () { return this.iface_quark_connection_interface_contact_blocking.apply(this, arguments); }
        },
        "ifaceQuarkConnectionInterfaceContactCapabilities": {
          "value": function () { return this.iface_quark_connection_interface_contact_capabilities.apply(this, arguments); }
        },
        "ifaceQuarkConnectionInterfaceContactGroups": {
          "value": function () { return this.iface_quark_connection_interface_contact_groups.apply(this, arguments); }
        },
        "ifaceQuarkConnectionInterfaceContactInfo": {
          "value": function () { return this.iface_quark_connection_interface_contact_info.apply(this, arguments); }
        },
        "ifaceQuarkConnectionInterfaceContactList": {
          "value": function () { return this.iface_quark_connection_interface_contact_list.apply(this, arguments); }
        },
        "ifaceQuarkConnectionInterfaceContacts": {
          "value": function () { return this.iface_quark_connection_interface_contacts.apply(this, arguments); }
        },
        "ifaceQuarkConnectionInterfaceLocation": {
          "value": function () { return this.iface_quark_connection_interface_location.apply(this, arguments); }
        },
        "ifaceQuarkConnectionInterfaceMailNotification": {
          "value": function () { return this.iface_quark_connection_interface_mail_notification.apply(this, arguments); }
        },
        "ifaceQuarkConnectionInterfacePowerSaving": {
          "value": function () { return this.iface_quark_connection_interface_power_saving.apply(this, arguments); }
        },
        "ifaceQuarkConnectionInterfacePresence": {
          "value": function () { return this.iface_quark_connection_interface_presence.apply(this, arguments); }
        },
        "ifaceQuarkConnectionInterfaceRenaming": {
          "value": function () { return this.iface_quark_connection_interface_renaming.apply(this, arguments); }
        },
        "ifaceQuarkConnectionInterfaceRequests": {
          "value": function () { return this.iface_quark_connection_interface_requests.apply(this, arguments); }
        },
        "ifaceQuarkConnectionInterfaceServicePoint": {
          "value": function () { return this.iface_quark_connection_interface_service_point.apply(this, arguments); }
        },
        "ifaceQuarkConnectionInterfaceSidecars1": {
          "value": function () { return this.iface_quark_connection_interface_sidecars1.apply(this, arguments); }
        },
        "ifaceQuarkConnectionInterfaceSimplePresence": {
          "value": function () { return this.iface_quark_connection_interface_simple_presence.apply(this, arguments); }
        },
        "ifaceQuarkConnectionManager": {
          "value": function () { return this.iface_quark_connection_manager.apply(this, arguments); }
        },
        "ifaceQuarkDbusDaemon": {
          "value": function () { return this.iface_quark_dbus_daemon.apply(this, arguments); }
        },
        "ifaceQuarkDbusIntrospectable": {
          "value": function () { return this.iface_quark_dbus_introspectable.apply(this, arguments); }
        },
        "ifaceQuarkDbusPeer": {
          "value": function () { return this.iface_quark_dbus_peer.apply(this, arguments); }
        },
        "ifaceQuarkDbusProperties": {
          "value": function () { return this.iface_quark_dbus_properties.apply(this, arguments); }
        },
        "ifaceQuarkDebug": {
          "value": function () { return this.iface_quark_debug.apply(this, arguments); }
        },
        "ifaceQuarkMediaSessionHandler": {
          "value": function () { return this.iface_quark_media_session_handler.apply(this, arguments); }
        },
        "ifaceQuarkMediaStreamHandler": {
          "value": function () { return this.iface_quark_media_stream_handler.apply(this, arguments); }
        },
        "ifaceQuarkPropertiesInterface": {
          "value": function () { return this.iface_quark_properties_interface.apply(this, arguments); }
        },
        "ifaceQuarkProtocol": {
          "value": function () { return this.iface_quark_protocol.apply(this, arguments); }
        },
        "ifaceQuarkProtocolInterfaceAddressing": {
          "value": function () { return this.iface_quark_protocol_interface_addressing.apply(this, arguments); }
        },
        "ifaceQuarkProtocolInterfaceAvatars": {
          "value": function () { return this.iface_quark_protocol_interface_avatars.apply(this, arguments); }
        },
        "ifaceQuarkProtocolInterfacePresence": {
          "value": function () { return this.iface_quark_protocol_interface_presence.apply(this, arguments); }
        },
        "intsetFromArray": {
          "value": function () { return this.intset_from_array.apply(this, arguments); }
        },
        "listConnectionManagers": {
          "value": function () { return this.list_connection_managers.apply(this, arguments); }
        },
        "listConnectionManagersAsync": {
          "value": function () { return this.list_connection_managers_async.apply(this, arguments); }
        },
        "listConnectionManagersFinish": {
          "value": function () { return this.list_connection_managers_finish.apply(this, arguments); }
        },
        "listConnectionNames": {
          "value": function () { return this.list_connection_names.apply(this, arguments); }
        },
        "mixinClassGetOffset": {
          "value": function () { return this.mixin_class_get_offset.apply(this, arguments); }
        },
        "mixinInstanceGetOffset": {
          "value": function () { return this.mixin_instance_get_offset.apply(this, arguments); }
        },
        "mixinOffsetCast": {
          "value": function () { return this.mixin_offset_cast.apply(this, arguments); }
        },
        "presenceMixinClassGetOffsetQuark": {
          "value": function () { return this.presence_mixin_class_get_offset_quark.apply(this, arguments); }
        },
        "presenceMixinClassInit": {
          "value": function () { return this.presence_mixin_class_init.apply(this, arguments); }
        },
        "presenceMixinEmitOnePresenceUpdate": {
          "value": function () { return this.presence_mixin_emit_one_presence_update.apply(this, arguments); }
        },
        "presenceMixinEmitPresenceUpdate": {
          "value": function () { return this.presence_mixin_emit_presence_update.apply(this, arguments); }
        },
        "presenceMixinFinalize": {
          "value": function () { return this.presence_mixin_finalize.apply(this, arguments); }
        },
        "presenceMixinGetOffsetQuark": {
          "value": function () { return this.presence_mixin_get_offset_quark.apply(this, arguments); }
        },
        "presenceMixinIfaceInit": {
          "value": function () { return this.presence_mixin_iface_init.apply(this, arguments); }
        },
        "presenceMixinInit": {
          "value": function () { return this.presence_mixin_init.apply(this, arguments); }
        },
        "presenceMixinSimplePresenceIfaceInit": {
          "value": function () { return this.presence_mixin_simple_presence_iface_init.apply(this, arguments); }
        },
        "presenceMixinSimplePresenceInitDbusProperties": {
          "value": function () { return this.presence_mixin_simple_presence_init_dbus_properties.apply(this, arguments); }
        },
        "presenceMixinSimplePresenceRegisterWithContactsMixin": {
          "value": function () { return this.presence_mixin_simple_presence_register_with_contacts_mixin.apply(this, arguments); }
        },
        "presenceStatusNew": {
          "value": function () { return this.presence_status_new.apply(this, arguments); }
        },
        "simpleAsyncReportSuccessInIdle": {
          "value": function () { return this.simple_async_report_success_in_idle.apply(this, arguments); }
        },
        "strvContains": {
          "value": function () { return this.strv_contains.apply(this, arguments); }
        },
        "svcInterfaceGetDbusPropertiesInfo": {
          "value": function () { return this.svc_interface_get_dbus_properties_info.apply(this, arguments); }
        },
        "svcInterfaceSetDbusPropertiesInfo": {
          "value": function () { return this.svc_interface_set_dbus_properties_info.apply(this, arguments); }
        },
        "userActionTimeFromX11": {
          "value": function () { return this.user_action_time_from_x11.apply(this, arguments); }
        },
        "userActionTimeShouldPresent": {
          "value": function () { return this.user_action_time_should_present.apply(this, arguments); }
        },
        "utf8MakeValid": {
          "value": function () { return this.utf8_make_valid.apply(this, arguments); }
        },
        "valueArrayBuild": {
          "value": function () { return this.value_array_build.apply(this, arguments); }
        },
        "valueArrayFree": {
          "value": function () { return this.value_array_free.apply(this, arguments); }
        },
        "valueArrayUnpack": {
          "value": function () { return this.value_array_unpack.apply(this, arguments); }
        },
        "weakRefNew": {
          "value": function () { return this.weak_ref_new.apply(this, arguments); }
        }
      }
    },
    "cairo": {
      "class": {},
      "static": {
        "imageSurfaceCreate": {
          "value": function () { return this.image_surface_create.apply(this, arguments); }
        }
      }
    }
  }
));