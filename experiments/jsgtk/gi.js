(function (exports, gir) {"use strict";
  // WARNING file generated automatically. DO NOT MODIFY
  Object.defineProperties(exports, {
    AccountsService: {configurable: true, get: () => augment("AccountsService")},
    Atk: {configurable: true, get: () => augment("Atk")},
    Atspi: {configurable: true, get: () => augment("Atspi")},
    Avahi: {configurable: true, get: () => augment("Avahi")},
    AvahiCore: {configurable: true, get: () => augment("AvahiCore")},
    BraseroBurn: {configurable: true, get: () => augment("BraseroBurn")},
    BraseroMedia: {configurable: true, get: () => augment("BraseroMedia")},
    Cally: {configurable: true, get: () => augment("Cally")},
    Caribou: {configurable: true, get: () => augment("Caribou")},
    Champlain: {configurable: true, get: () => augment("Champlain")},
    Cheese: {configurable: true, get: () => augment("Cheese")},
    Clutter: {configurable: true, get: () => augment("Clutter")},
    ClutterGdk: {configurable: true, get: () => augment("ClutterGdk")},
    ClutterGst: {configurable: true, get: () => augment("ClutterGst")},
    ClutterX11: {configurable: true, get: () => augment("ClutterX11")},
    Cogl: {configurable: true, get: () => augment("Cogl")},
    CoglPango: {configurable: true, get: () => augment("CoglPango")},
    ColorHug: {configurable: true, get: () => augment("ColorHug")},
    Colord: {configurable: true, get: () => augment("Colord")},
    ColordGtk: {configurable: true, get: () => augment("ColordGtk")},
    CryptUI: {configurable: true, get: () => augment("CryptUI")},
    DBus: {configurable: true, get: () => augment("DBus")},
    DBusGLib: {configurable: true, get: () => augment("DBusGLib")},
    EBook: {configurable: true, get: () => augment("EBook")},
    EBookContacts: {configurable: true, get: () => augment("EBookContacts")},
    EDataServer: {configurable: true, get: () => augment("EDataServer")},
    EvinceDocument: {configurable: true, get: () => augment("EvinceDocument")},
    EvinceView: {configurable: true, get: () => augment("EvinceView")},
    Farstream: {configurable: true, get: () => augment("Farstream")},
    Folks: {configurable: true, get: () => augment("Folks")},
    FolksDummy: {configurable: true, get: () => augment("FolksDummy")},
    FolksEds: {configurable: true, get: () => augment("FolksEds")},
    FolksTelepathy: {configurable: true, get: () => augment("FolksTelepathy")},
    GConf: {configurable: true, get: () => augment("GConf")},
    GData: {configurable: true, get: () => augment("GData")},
    GDesktopEnums: {configurable: true, get: () => augment("GDesktopEnums")},
    GIRepository: {configurable: true, get: () => augment("GIRepository")},
    GL: {configurable: true, get: () => augment("GL")},
    GLib: {configurable: true, get: () => augment("GLib")},
    GMenu: {configurable: true, get: () => augment("GMenu")},
    GMime: {configurable: true, get: () => augment("GMime")},
    GModule: {configurable: true, get: () => augment("GModule")},
    GObject: {configurable: true, get: () => augment("GObject")},
    GUdev: {configurable: true, get: () => augment("GUdev")},
    GUsb: {configurable: true, get: () => augment("GUsb")},
    GWeather: {configurable: true, get: () => augment("GWeather")},
    GXPS: {configurable: true, get: () => augment("GXPS")},
    Gck: {configurable: true, get: () => augment("Gck")},
    Gcr: {configurable: true, get: () => augment("Gcr")},
    GcrUi: {configurable: true, get: () => augment("GcrUi")},
    Gdk: {configurable: true, get: () => augment("Gdk")},
    GdkPixbuf: {configurable: true, get: () => augment("GdkPixbuf")},
    GdkX11: {configurable: true, get: () => augment("GdkX11")},
    Gdm: {configurable: true, get: () => augment("Gdm")},
    Gee: {configurable: true, get: () => augment("Gee")},
    Geoclue: {configurable: true, get: () => augment("Geoclue")},
    GeocodeGlib: {configurable: true, get: () => augment("GeocodeGlib")},
    Gio: {configurable: true, get: () => augment("Gio")},
    Gkbd: {configurable: true, get: () => augment("Gkbd")},
    GnomeBluetooth: {configurable: true, get: () => augment("GnomeBluetooth")},
    GnomeDesktop: {configurable: true, get: () => augment("GnomeDesktop")},
    GnomeKeyring: {configurable: true, get: () => augment("GnomeKeyring")},
    Goa: {configurable: true, get: () => augment("Goa")},
    Gom: {configurable: true, get: () => augment("Gom")},
    Graphene: {configurable: true, get: () => augment("Graphene")},
    Grl: {configurable: true, get: () => augment("Grl")},
    GrlNet: {configurable: true, get: () => augment("GrlNet")},
    GrlPls: {configurable: true, get: () => augment("GrlPls")},
    Gsf: {configurable: true, get: () => augment("Gsf")},
    Gst: {configurable: true, get: () => augment("Gst")},
    GstAllocators: {configurable: true, get: () => augment("GstAllocators")},
    GstApp: {configurable: true, get: () => augment("GstApp")},
    GstAudio: {configurable: true, get: () => augment("GstAudio")},
    GstBase: {configurable: true, get: () => augment("GstBase")},
    GstCheck: {configurable: true, get: () => augment("GstCheck")},
    GstController: {configurable: true, get: () => augment("GstController")},
    GstFft: {configurable: true, get: () => augment("GstFft")},
    GstGL: {configurable: true, get: () => augment("GstGL")},
    GstInsertBin: {configurable: true, get: () => augment("GstInsertBin")},
    GstInterfaces: {configurable: true, get: () => augment("GstInterfaces")},
    GstMpegts: {configurable: true, get: () => augment("GstMpegts")},
    GstNet: {configurable: true, get: () => augment("GstNet")},
    GstNetbuffer: {configurable: true, get: () => augment("GstNetbuffer")},
    GstPbutils: {configurable: true, get: () => augment("GstPbutils")},
    GstRiff: {configurable: true, get: () => augment("GstRiff")},
    GstRtp: {configurable: true, get: () => augment("GstRtp")},
    GstRtsp: {configurable: true, get: () => augment("GstRtsp")},
    GstSdp: {configurable: true, get: () => augment("GstSdp")},
    GstTag: {configurable: true, get: () => augment("GstTag")},
    GstVideo: {configurable: true, get: () => augment("GstVideo")},
    Gtk: {configurable: true, get: () => augment("Gtk")},
    GtkChamplain: {configurable: true, get: () => augment("GtkChamplain")},
    GtkClutter: {configurable: true, get: () => augment("GtkClutter")},
    GtkSource: {configurable: true, get: () => augment("GtkSource")},
    GtkSpell: {configurable: true, get: () => augment("GtkSpell")},
    Gucharmap: {configurable: true, get: () => augment("Gucharmap")},
    HarfBuzz: {configurable: true, get: () => augment("HarfBuzz")},
    IBus: {configurable: true, get: () => augment("IBus")},
    JavaScriptCore: {configurable: true, get: () => augment("JavaScriptCore")},
    Json: {configurable: true, get: () => augment("Json")},
    LangTag: {configurable: true, get: () => augment("LangTag")},
    Libosinfo: {configurable: true, get: () => augment("Libosinfo")},
    MediaArt: {configurable: true, get: () => augment("MediaArt")},
    ModemManager: {configurable: true, get: () => augment("ModemManager")},
    NM: {configurable: true, get: () => augment("NM")},
    NMClient: {configurable: true, get: () => augment("NMClient")},
    NMGtk: {configurable: true, get: () => augment("NMGtk")},
    Nautilus: {configurable: true, get: () => augment("Nautilus")},
    NetworkManager: {configurable: true, get: () => augment("NetworkManager")},
    Notify: {configurable: true, get: () => augment("Notify")},
    PackageKitGlib: {configurable: true, get: () => augment("PackageKitGlib")},
    Pango: {configurable: true, get: () => augment("Pango")},
    PangoCairo: {configurable: true, get: () => augment("PangoCairo")},
    PangoFT2: {configurable: true, get: () => augment("PangoFT2")},
    PangoXft: {configurable: true, get: () => augment("PangoXft")},
    Peas: {configurable: true, get: () => augment("Peas")},
    PeasGtk: {configurable: true, get: () => augment("PeasGtk")},
    Polkit: {configurable: true, get: () => augment("Polkit")},
    PolkitAgent: {configurable: true, get: () => augment("PolkitAgent")},
    Poppler: {configurable: true, get: () => augment("Poppler")},
    Rest: {configurable: true, get: () => augment("Rest")},
    RestExtras: {configurable: true, get: () => augment("RestExtras")},
    Rsvg: {configurable: true, get: () => augment("Rsvg")},
    Secret: {configurable: true, get: () => augment("Secret")},
    Soup: {configurable: true, get: () => augment("Soup")},
    SoupGNOME: {configurable: true, get: () => augment("SoupGNOME")},
    TelepathyFarstream: {configurable: true, get: () => augment("TelepathyFarstream")},
    TelepathyGLib: {configurable: true, get: () => augment("TelepathyGLib")},
    TelepathyLogger: {configurable: true, get: () => augment("TelepathyLogger")},
    Totem: {configurable: true, get: () => augment("Totem")},
    TotemPlParser: {configurable: true, get: () => augment("TotemPlParser")},
    Tracker: {configurable: true, get: () => augment("Tracker")},
    TrackerControl: {configurable: true, get: () => augment("TrackerControl")},
    TrackerMiner: {configurable: true, get: () => augment("TrackerMiner")},
    UDisks: {configurable: true, get: () => augment("UDisks")},
    UPowerGlib: {configurable: true, get: () => augment("UPowerGlib")},
    Vte: {configurable: true, get: () => augment("Vte")},
    WebKit: {configurable: true, get: () => augment("WebKit")},
    WebKit2: {configurable: true, get: () => augment("WebKit2")},
    WebKit2WebExtension: {configurable: true, get: () => augment("WebKit2WebExtension")},
    Wnck: {configurable: true, get: () => augment("Wnck")},
    Xkl: {configurable: true, get: () => augment("Xkl")},
    Zeitgeist: {configurable: true, get: () => augment("Zeitgeist")},
    cairo: {configurable: true, get: () => augment("cairo")},
    fontconfig: {configurable: true, get: () => augment("fontconfig")},
    freetype2: {configurable: true, get: () => augment("freetype2")},
    libxml2: {configurable: true, get: () => augment("libxml2")},
    win32: {configurable: true, get: () => augment("win32")},
    xfixes: {configurable: true, get: () => augment("xfixes")},
    xft: {configurable: true, get: () => augment("xft")},
    xlib: {configurable: true, get: () => augment("xlib")},
    xrandr: {configurable: true, get: () => augment("xrandr")}
  });
  function augment(namespace) {
    let NameSpace = imports.gi[namespace];
    Object.defineProperty(exports, namespace, {value: NameSpace});
    if (gir.hasOwnProperty(namespace)) {
      let info = gir[namespace];
      Object.defineProperties(NameSpace, info.static);
      Object.keys(info.class).forEach((Class) => {
        if (NameSpace[Class]) {
          augmentClass(NameSpace[Class], info.class[Class]);
        }
      });
    }
    return NameSpace;
  }
  function augmentClass(Class, descriptors) {
    Object.defineProperties(Class, descriptors.static);
    Object.defineProperties(Class.prototype, descriptors.prototype);
  }
}(
  this,
  {
    "AccountsService": {
      "class": {
        "User": {
          "prototype": {
            "getAccountType": {
              "value": function () { return this.get_account_type.apply(this, arguments); }
            },
            "getAutomaticLogin": {
              "value": function () { return this.get_automatic_login.apply(this, arguments); }
            },
            "getEmail": {
              "value": function () { return this.get_email.apply(this, arguments); }
            },
            "getHomeDir": {
              "value": function () { return this.get_home_dir.apply(this, arguments); }
            },
            "getIconFile": {
              "value": function () { return this.get_icon_file.apply(this, arguments); }
            },
            "getLanguage": {
              "value": function () { return this.get_language.apply(this, arguments); }
            },
            "getLocation": {
              "value": function () { return this.get_location.apply(this, arguments); }
            },
            "getLocked": {
              "value": function () { return this.get_locked.apply(this, arguments); }
            },
            "getLoginFrequency": {
              "value": function () { return this.get_login_frequency.apply(this, arguments); }
            },
            "getLoginHistory": {
              "value": function () { return this.get_login_history.apply(this, arguments); }
            },
            "getLoginTime": {
              "value": function () { return this.get_login_time.apply(this, arguments); }
            },
            "getNumSessions": {
              "value": function () { return this.get_num_sessions.apply(this, arguments); }
            },
            "getNumSessionsAnywhere": {
              "value": function () { return this.get_num_sessions_anywhere.apply(this, arguments); }
            },
            "getObjectPath": {
              "value": function () { return this.get_object_path.apply(this, arguments); }
            },
            "getPasswordHint": {
              "value": function () { return this.get_password_hint.apply(this, arguments); }
            },
            "getPasswordMode": {
              "value": function () { return this.get_password_mode.apply(this, arguments); }
            },
            "getPrimarySessionId": {
              "value": function () { return this.get_primary_session_id.apply(this, arguments); }
            },
            "getRealName": {
              "value": function () { return this.get_real_name.apply(this, arguments); }
            },
            "getShell": {
              "value": function () { return this.get_shell.apply(this, arguments); }
            },
            "getUid": {
              "value": function () { return this.get_uid.apply(this, arguments); }
            },
            "getUserName": {
              "value": function () { return this.get_user_name.apply(this, arguments); }
            },
            "getXSession": {
              "value": function () { return this.get_x_session.apply(this, arguments); }
            },
            "isLoaded": {
              "get": function () { return this.is_loaded; },
              "set": function (value) { this.is_loaded = value; }
            },
            "isLocalAccount": {
              "value": function () { return this.is_local_account.apply(this, arguments); }
            },
            "isLoggedIn": {
              "value": function () { return this.is_logged_in.apply(this, arguments); }
            },
            "isLoggedInAnywhere": {
              "value": function () { return this.is_logged_in_anywhere.apply(this, arguments); }
            },
            "isNonexistent": {
              "value": function () { return this.is_nonexistent.apply(this, arguments); }
            },
            "isSystemAccount": {
              "value": function () { return this.is_system_account.apply(this, arguments); }
            },
            "setAccountType": {
              "value": function () { return this.set_account_type.apply(this, arguments); }
            },
            "setAutomaticLogin": {
              "value": function () { return this.set_automatic_login.apply(this, arguments); }
            },
            "setEmail": {
              "value": function () { return this.set_email.apply(this, arguments); }
            },
            "setIconFile": {
              "value": function () { return this.set_icon_file.apply(this, arguments); }
            },
            "setLanguage": {
              "value": function () { return this.set_language.apply(this, arguments); }
            },
            "setLocation": {
              "value": function () { return this.set_location.apply(this, arguments); }
            },
            "setLocked": {
              "value": function () { return this.set_locked.apply(this, arguments); }
            },
            "setPassword": {
              "value": function () { return this.set_password.apply(this, arguments); }
            },
            "setPasswordMode": {
              "value": function () { return this.set_password_mode.apply(this, arguments); }
            },
            "setRealName": {
              "value": function () { return this.set_real_name.apply(this, arguments); }
            },
            "setUserName": {
              "value": function () { return this.set_user_name.apply(this, arguments); }
            },
            "setXSession": {
              "value": function () { return this.set_x_session.apply(this, arguments); }
            },
            "accountType": {
              "get": function () { return this.account_type; },
              "set": function (value) { this.account_type = value; }
            },
            "automaticLogin": {
              "get": function () { return this.automatic_login; },
              "set": function (value) { this.automatic_login = value; }
            },
            "homeDirectory": {
              "get": function () { return this.home_directory; },
              "set": function (value) { this.home_directory = value; }
            },
            "iconFile": {
              "get": function () { return this.icon_file; },
              "set": function (value) { this.icon_file = value; }
            },
            "localAccount": {
              "get": function () { return this.local_account; },
              "set": function (value) { this.local_account = value; }
            },
            "loginFrequency": {
              "get": function () { return this.login_frequency; },
              "set": function (value) { this.login_frequency = value; }
            },
            "loginHistory": {
              "get": function () { return this.login_history; },
              "set": function (value) { this.login_history = value; }
            },
            "loginTime": {
              "get": function () { return this.login_time; },
              "set": function (value) { this.login_time = value; }
            },
            "passwordHint": {
              "get": function () { return this.password_hint; },
              "set": function (value) { this.password_hint = value; }
            },
            "passwordMode": {
              "get": function () { return this.password_mode; },
              "set": function (value) { this.password_mode = value; }
            },
            "realName": {
              "get": function () { return this.real_name; },
              "set": function (value) { this.real_name = value; }
            },
            "systemAccount": {
              "get": function () { return this.system_account; },
              "set": function (value) { this.system_account = value; }
            },
            "userName": {
              "get": function () { return this.user_name; },
              "set": function (value) { this.user_name = value; }
            },
            "xSession": {
              "get": function () { return this.x_session; },
              "set": function (value) { this.x_session = value; }
            }
          },
          "static": {}
        },
        "UserManager": {
          "prototype": {
            "activateUserSession": {
              "value": function () { return this.activate_user_session.apply(this, arguments); }
            },
            "cacheUser": {
              "value": function () { return this.cache_user.apply(this, arguments); }
            },
            "cacheUserAsync": {
              "value": function () { return this.cache_user_async.apply(this, arguments); }
            },
            "cacheUserFinish": {
              "value": function () { return this.cache_user_finish.apply(this, arguments); }
            },
            "canSwitch": {
              "value": function () { return this.can_switch.apply(this, arguments); }
            },
            "createUser": {
              "value": function () { return this.create_user.apply(this, arguments); }
            },
            "createUserAsync": {
              "value": function () { return this.create_user_async.apply(this, arguments); }
            },
            "createUserFinish": {
              "value": function () { return this.create_user_finish.apply(this, arguments); }
            },
            "deleteUser": {
              "value": function () { return this.delete_user.apply(this, arguments); }
            },
            "deleteUserAsync": {
              "value": function () { return this.delete_user_async.apply(this, arguments); }
            },
            "deleteUserFinish": {
              "value": function () { return this.delete_user_finish.apply(this, arguments); }
            },
            "getUser": {
              "value": function () { return this.get_user.apply(this, arguments); }
            },
            "getUserById": {
              "value": function () { return this.get_user_by_id.apply(this, arguments); }
            },
            "gotoLoginSession": {
              "value": function () { return this.goto_login_session.apply(this, arguments); }
            },
            "listUsers": {
              "value": function () { return this.list_users.apply(this, arguments); }
            },
            "noService": {
              "value": function () { return this.no_service.apply(this, arguments); }
            },
            "uncacheUser": {
              "value": function () { return this.uncache_user.apply(this, arguments); }
            },
            "uncacheUserAsync": {
              "value": function () { return this.uncache_user_async.apply(this, arguments); }
            },
            "uncacheUserFinish": {
              "value": function () { return this.uncache_user_finish.apply(this, arguments); }
            },
            "excludeUsernamesList": {
              "get": function () { return this.exclude_usernames_list; },
              "set": function (value) { this.exclude_usernames_list = value; }
            },
            "hasMultipleUsers": {
              "get": function () { return this.has_multiple_users; },
              "set": function (value) { this.has_multiple_users = value; }
            },
            "includeUsernamesList": {
              "get": function () { return this.include_usernames_list; },
              "set": function (value) { this.include_usernames_list = value; }
            },
            "isLoaded": {
              "get": function () { return this.is_loaded; },
              "set": function (value) { this.is_loaded = value; }
            }
          },
          "static": {
            "getDefault": {
              "value": function () { return this.get_default.apply(this, arguments); }
            }
          }
        }
      },
      "static": {
        "userManagerErrorQuark": {
          "value": function () { return this.user_manager_error_quark.apply(this, arguments); }
        }
      }
    },
    "Atk": {
      "class": {
        "GObjectAccessible": {
          "prototype": {
            "getObject": {
              "value": function () { return this.get_object.apply(this, arguments); }
            }
          },
          "static": {
            "forObject": {
              "value": function () { return this.for_object.apply(this, arguments); }
            }
          }
        },
        "Hyperlink": {
          "prototype": {
            "getEndIndex": {
              "value": function () { return this.get_end_index.apply(this, arguments); }
            },
            "getNAnchors": {
              "value": function () { return this.get_n_anchors.apply(this, arguments); }
            },
            "getObject": {
              "value": function () { return this.get_object.apply(this, arguments); }
            },
            "getStartIndex": {
              "value": function () { return this.get_start_index.apply(this, arguments); }
            },
            "getUri": {
              "value": function () { return this.get_uri.apply(this, arguments); }
            },
            "isInline": {
              "value": function () { return this.is_inline.apply(this, arguments); }
            },
            "isSelectedLink": {
              "value": function () { return this.is_selected_link.apply(this, arguments); }
            },
            "isValid": {
              "value": function () { return this.is_valid.apply(this, arguments); }
            },
            "endIndex": {
              "get": function () { return this.end_index; },
              "set": function (value) { this.end_index = value; }
            },
            "numberOfAnchors": {
              "get": function () { return this.number_of_anchors; },
              "set": function (value) { this.number_of_anchors = value; }
            },
            "selectedLink": {
              "get": function () { return this.selected_link; },
              "set": function (value) { this.selected_link = value; }
            },
            "startIndex": {
              "get": function () { return this.start_index; },
              "set": function (value) { this.start_index = value; }
            }
          },
          "static": {}
        },
        "Misc": {
          "prototype": {
            "threadsEnter": {
              "value": function () { return this.threads_enter.apply(this, arguments); }
            },
            "threadsLeave": {
              "value": function () { return this.threads_leave.apply(this, arguments); }
            }
          },
          "static": {
            "getInstance": {
              "value": function () { return this.get_instance.apply(this, arguments); }
            }
          }
        },
        "NoOpObject": {
          "prototype": {},
          "static": {}
        },
        "NoOpObjectFactory": {
          "prototype": {},
          "static": {}
        },
        "Object": {
          "prototype": {
            "addRelationship": {
              "value": function () { return this.add_relationship.apply(this, arguments); }
            },
            "connectPropertyChangeHandler": {
              "value": function () { return this.connect_property_change_handler.apply(this, arguments); }
            },
            "getAttributes": {
              "value": function () { return this.get_attributes.apply(this, arguments); }
            },
            "getDescription": {
              "value": function () { return this.get_description.apply(this, arguments); }
            },
            "getIndexInParent": {
              "value": function () { return this.get_index_in_parent.apply(this, arguments); }
            },
            "getLayer": {
              "value": function () { return this.get_layer.apply(this, arguments); }
            },
            "getMdiZorder": {
              "value": function () { return this.get_mdi_zorder.apply(this, arguments); }
            },
            "getNAccessibleChildren": {
              "value": function () { return this.get_n_accessible_children.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getObjectLocale": {
              "value": function () { return this.get_object_locale.apply(this, arguments); }
            },
            "getParent": {
              "value": function () { return this.get_parent.apply(this, arguments); }
            },
            "getRole": {
              "value": function () { return this.get_role.apply(this, arguments); }
            },
            "notifyStateChange": {
              "value": function () { return this.notify_state_change.apply(this, arguments); }
            },
            "peekParent": {
              "value": function () { return this.peek_parent.apply(this, arguments); }
            },
            "refAccessibleChild": {
              "value": function () { return this.ref_accessible_child.apply(this, arguments); }
            },
            "refRelationSet": {
              "value": function () { return this.ref_relation_set.apply(this, arguments); }
            },
            "refStateSet": {
              "value": function () { return this.ref_state_set.apply(this, arguments); }
            },
            "removePropertyChangeHandler": {
              "value": function () { return this.remove_property_change_handler.apply(this, arguments); }
            },
            "removeRelationship": {
              "value": function () { return this.remove_relationship.apply(this, arguments); }
            },
            "setDescription": {
              "value": function () { return this.set_description.apply(this, arguments); }
            },
            "setName": {
              "value": function () { return this.set_name.apply(this, arguments); }
            },
            "setParent": {
              "value": function () { return this.set_parent.apply(this, arguments); }
            },
            "setRole": {
              "value": function () { return this.set_role.apply(this, arguments); }
            },
            "accessibleComponentLayer": {
              "get": function () { return this.accessible_component_layer; },
              "set": function (value) { this.accessible_component_layer = value; }
            },
            "accessibleComponentMdiZorder": {
              "get": function () { return this.accessible_component_mdi_zorder; },
              "set": function (value) { this.accessible_component_mdi_zorder = value; }
            },
            "accessibleDescription": {
              "get": function () { return this.accessible_description; },
              "set": function (value) { this.accessible_description = value; }
            },
            "accessibleHypertextNlinks": {
              "get": function () { return this.accessible_hypertext_nlinks; },
              "set": function (value) { this.accessible_hypertext_nlinks = value; }
            },
            "accessibleName": {
              "get": function () { return this.accessible_name; },
              "set": function (value) { this.accessible_name = value; }
            },
            "accessibleParent": {
              "get": function () { return this.accessible_parent; },
              "set": function (value) { this.accessible_parent = value; }
            },
            "accessibleRole": {
              "get": function () { return this.accessible_role; },
              "set": function (value) { this.accessible_role = value; }
            },
            "accessibleTableCaption": {
              "get": function () { return this.accessible_table_caption; },
              "set": function (value) { this.accessible_table_caption = value; }
            },
            "accessibleTableCaptionObject": {
              "get": function () { return this.accessible_table_caption_object; },
              "set": function (value) { this.accessible_table_caption_object = value; }
            },
            "accessibleTableColumnDescription": {
              "get": function () { return this.accessible_table_column_description; },
              "set": function (value) { this.accessible_table_column_description = value; }
            },
            "accessibleTableColumnHeader": {
              "get": function () { return this.accessible_table_column_header; },
              "set": function (value) { this.accessible_table_column_header = value; }
            },
            "accessibleTableRowDescription": {
              "get": function () { return this.accessible_table_row_description; },
              "set": function (value) { this.accessible_table_row_description = value; }
            },
            "accessibleTableRowHeader": {
              "get": function () { return this.accessible_table_row_header; },
              "set": function (value) { this.accessible_table_row_header = value; }
            },
            "accessibleTableSummary": {
              "get": function () { return this.accessible_table_summary; },
              "set": function (value) { this.accessible_table_summary = value; }
            },
            "accessibleValue": {
              "get": function () { return this.accessible_value; },
              "set": function (value) { this.accessible_value = value; }
            }
          },
          "static": {}
        },
        "ObjectFactory": {
          "prototype": {
            "createAccessible": {
              "value": function () { return this.create_accessible.apply(this, arguments); }
            },
            "getAccessibleType": {
              "value": function () { return this.get_accessible_type.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Plug": {
          "prototype": {
            "getId": {
              "value": function () { return this.get_id.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Registry": {
          "prototype": {
            "getFactory": {
              "value": function () { return this.get_factory.apply(this, arguments); }
            },
            "getFactoryType": {
              "value": function () { return this.get_factory_type.apply(this, arguments); }
            },
            "setFactoryType": {
              "value": function () { return this.set_factory_type.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Relation": {
          "prototype": {
            "addTarget": {
              "value": function () { return this.add_target.apply(this, arguments); }
            },
            "getRelationType": {
              "value": function () { return this.get_relation_type.apply(this, arguments); }
            },
            "getTarget": {
              "value": function () { return this.get_target.apply(this, arguments); }
            },
            "removeTarget": {
              "value": function () { return this.remove_target.apply(this, arguments); }
            },
            "relationType": {
              "get": function () { return this.relation_type; },
              "set": function (value) { this.relation_type = value; }
            }
          },
          "static": {}
        },
        "RelationSet": {
          "prototype": {
            "addRelationByType": {
              "value": function () { return this.add_relation_by_type.apply(this, arguments); }
            },
            "containsTarget": {
              "value": function () { return this.contains_target.apply(this, arguments); }
            },
            "getNRelations": {
              "value": function () { return this.get_n_relations.apply(this, arguments); }
            },
            "getRelation": {
              "value": function () { return this.get_relation.apply(this, arguments); }
            },
            "getRelationByType": {
              "value": function () { return this.get_relation_by_type.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Socket": {
          "prototype": {
            "isOccupied": {
              "value": function () { return this.is_occupied.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "StateSet": {
          "prototype": {
            "addState": {
              "value": function () { return this.add_state.apply(this, arguments); }
            },
            "addStates": {
              "value": function () { return this.add_states.apply(this, arguments); }
            },
            "andSets": {
              "value": function () { return this.and_sets.apply(this, arguments); }
            },
            "clearStates": {
              "value": function () { return this.clear_states.apply(this, arguments); }
            },
            "containsState": {
              "value": function () { return this.contains_state.apply(this, arguments); }
            },
            "containsStates": {
              "value": function () { return this.contains_states.apply(this, arguments); }
            },
            "isEmpty": {
              "value": function () { return this.is_empty.apply(this, arguments); }
            },
            "orSets": {
              "value": function () { return this.or_sets.apply(this, arguments); }
            },
            "removeState": {
              "value": function () { return this.remove_state.apply(this, arguments); }
            },
            "xorSets": {
              "value": function () { return this.xor_sets.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Util": {
          "prototype": {},
          "static": {}
        }
      },
      "static": {
        "addFocusTracker": {
          "value": function () { return this.add_focus_tracker.apply(this, arguments); }
        },
        "addGlobalEventListener": {
          "value": function () { return this.add_global_event_listener.apply(this, arguments); }
        },
        "addKeyEventListener": {
          "value": function () { return this.add_key_event_listener.apply(this, arguments); }
        },
        "attributeSetFree": {
          "value": function () { return this.attribute_set_free.apply(this, arguments); }
        },
        "focusTrackerInit": {
          "value": function () { return this.focus_tracker_init.apply(this, arguments); }
        },
        "focusTrackerNotify": {
          "value": function () { return this.focus_tracker_notify.apply(this, arguments); }
        },
        "getBinaryAge": {
          "value": function () { return this.get_binary_age.apply(this, arguments); }
        },
        "getDefaultRegistry": {
          "value": function () { return this.get_default_registry.apply(this, arguments); }
        },
        "getFocusObject": {
          "value": function () { return this.get_focus_object.apply(this, arguments); }
        },
        "getInterfaceAge": {
          "value": function () { return this.get_interface_age.apply(this, arguments); }
        },
        "getMajorVersion": {
          "value": function () { return this.get_major_version.apply(this, arguments); }
        },
        "getMicroVersion": {
          "value": function () { return this.get_micro_version.apply(this, arguments); }
        },
        "getMinorVersion": {
          "value": function () { return this.get_minor_version.apply(this, arguments); }
        },
        "getRoot": {
          "value": function () { return this.get_root.apply(this, arguments); }
        },
        "getToolkitName": {
          "value": function () { return this.get_toolkit_name.apply(this, arguments); }
        },
        "getToolkitVersion": {
          "value": function () { return this.get_toolkit_version.apply(this, arguments); }
        },
        "getVersion": {
          "value": function () { return this.get_version.apply(this, arguments); }
        },
        "relationTypeForName": {
          "value": function () { return this.relation_type_for_name.apply(this, arguments); }
        },
        "relationTypeGetName": {
          "value": function () { return this.relation_type_get_name.apply(this, arguments); }
        },
        "relationTypeRegister": {
          "value": function () { return this.relation_type_register.apply(this, arguments); }
        },
        "removeFocusTracker": {
          "value": function () { return this.remove_focus_tracker.apply(this, arguments); }
        },
        "removeGlobalEventListener": {
          "value": function () { return this.remove_global_event_listener.apply(this, arguments); }
        },
        "removeKeyEventListener": {
          "value": function () { return this.remove_key_event_listener.apply(this, arguments); }
        },
        "roleForName": {
          "value": function () { return this.role_for_name.apply(this, arguments); }
        },
        "roleGetLocalizedName": {
          "value": function () { return this.role_get_localized_name.apply(this, arguments); }
        },
        "roleGetName": {
          "value": function () { return this.role_get_name.apply(this, arguments); }
        },
        "roleRegister": {
          "value": function () { return this.role_register.apply(this, arguments); }
        },
        "stateTypeForName": {
          "value": function () { return this.state_type_for_name.apply(this, arguments); }
        },
        "stateTypeGetName": {
          "value": function () { return this.state_type_get_name.apply(this, arguments); }
        },
        "stateTypeRegister": {
          "value": function () { return this.state_type_register.apply(this, arguments); }
        },
        "textAttributeForName": {
          "value": function () { return this.text_attribute_for_name.apply(this, arguments); }
        },
        "textAttributeGetName": {
          "value": function () { return this.text_attribute_get_name.apply(this, arguments); }
        },
        "textAttributeGetValue": {
          "value": function () { return this.text_attribute_get_value.apply(this, arguments); }
        },
        "textAttributeRegister": {
          "value": function () { return this.text_attribute_register.apply(this, arguments); }
        },
        "textFreeRanges": {
          "value": function () { return this.text_free_ranges.apply(this, arguments); }
        },
        "valueTypeGetLocalizedName": {
          "value": function () { return this.value_type_get_localized_name.apply(this, arguments); }
        },
        "valueTypeGetName": {
          "value": function () { return this.value_type_get_name.apply(this, arguments); }
        }
      }
    },
    "Atspi": {
      "class": {
        "Accessible": {
          "prototype": {
            "clearCache": {
              "value": function () { return this.clear_cache.apply(this, arguments); }
            },
            "getAction": {
              "value": function () { return this.get_action.apply(this, arguments); }
            },
            "getActionIface": {
              "value": function () { return this.get_action_iface.apply(this, arguments); }
            },
            "getApplication": {
              "value": function () { return this.get_application.apply(this, arguments); }
            },
            "getAtspiVersion": {
              "value": function () { return this.get_atspi_version.apply(this, arguments); }
            },
            "getAttributes": {
              "value": function () { return this.get_attributes.apply(this, arguments); }
            },
            "getAttributesAsArray": {
              "value": function () { return this.get_attributes_as_array.apply(this, arguments); }
            },
            "getChildAtIndex": {
              "value": function () { return this.get_child_at_index.apply(this, arguments); }
            },
            "getChildCount": {
              "value": function () { return this.get_child_count.apply(this, arguments); }
            },
            "getCollection": {
              "value": function () { return this.get_collection.apply(this, arguments); }
            },
            "getCollectionIface": {
              "value": function () { return this.get_collection_iface.apply(this, arguments); }
            },
            "getComponent": {
              "value": function () { return this.get_component.apply(this, arguments); }
            },
            "getComponentIface": {
              "value": function () { return this.get_component_iface.apply(this, arguments); }
            },
            "getDescription": {
              "value": function () { return this.get_description.apply(this, arguments); }
            },
            "getDocument": {
              "value": function () { return this.get_document.apply(this, arguments); }
            },
            "getDocumentIface": {
              "value": function () { return this.get_document_iface.apply(this, arguments); }
            },
            "getEditableText": {
              "value": function () { return this.get_editable_text.apply(this, arguments); }
            },
            "getEditableTextIface": {
              "value": function () { return this.get_editable_text_iface.apply(this, arguments); }
            },
            "getHyperlink": {
              "value": function () { return this.get_hyperlink.apply(this, arguments); }
            },
            "getHypertext": {
              "value": function () { return this.get_hypertext.apply(this, arguments); }
            },
            "getHypertextIface": {
              "value": function () { return this.get_hypertext_iface.apply(this, arguments); }
            },
            "getId": {
              "value": function () { return this.get_id.apply(this, arguments); }
            },
            "getImage": {
              "value": function () { return this.get_image.apply(this, arguments); }
            },
            "getImageIface": {
              "value": function () { return this.get_image_iface.apply(this, arguments); }
            },
            "getIndexInParent": {
              "value": function () { return this.get_index_in_parent.apply(this, arguments); }
            },
            "getInterfaces": {
              "value": function () { return this.get_interfaces.apply(this, arguments); }
            },
            "getLocalizedRoleName": {
              "value": function () { return this.get_localized_role_name.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getObjectLocale": {
              "value": function () { return this.get_object_locale.apply(this, arguments); }
            },
            "getParent": {
              "value": function () { return this.get_parent.apply(this, arguments); }
            },
            "getProcessId": {
              "value": function () { return this.get_process_id.apply(this, arguments); }
            },
            "getRelationSet": {
              "value": function () { return this.get_relation_set.apply(this, arguments); }
            },
            "getRole": {
              "value": function () { return this.get_role.apply(this, arguments); }
            },
            "getRoleName": {
              "value": function () { return this.get_role_name.apply(this, arguments); }
            },
            "getSelection": {
              "value": function () { return this.get_selection.apply(this, arguments); }
            },
            "getSelectionIface": {
              "value": function () { return this.get_selection_iface.apply(this, arguments); }
            },
            "getStateSet": {
              "value": function () { return this.get_state_set.apply(this, arguments); }
            },
            "getTable": {
              "value": function () { return this.get_table.apply(this, arguments); }
            },
            "getTableCell": {
              "value": function () { return this.get_table_cell.apply(this, arguments); }
            },
            "getTableIface": {
              "value": function () { return this.get_table_iface.apply(this, arguments); }
            },
            "getText": {
              "value": function () { return this.get_text.apply(this, arguments); }
            },
            "getTextIface": {
              "value": function () { return this.get_text_iface.apply(this, arguments); }
            },
            "getToolkitName": {
              "value": function () { return this.get_toolkit_name.apply(this, arguments); }
            },
            "getToolkitVersion": {
              "value": function () { return this.get_toolkit_version.apply(this, arguments); }
            },
            "getValue": {
              "value": function () { return this.get_value.apply(this, arguments); }
            },
            "getValueIface": {
              "value": function () { return this.get_value_iface.apply(this, arguments); }
            },
            "setCacheMask": {
              "value": function () { return this.set_cache_mask.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DeviceListener": {
          "prototype": {
            "addCallback": {
              "value": function () { return this.add_callback.apply(this, arguments); }
            },
            "removeCallback": {
              "value": function () { return this.remove_callback.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "EventListener": {
          "prototype": {
            "registerFull": {
              "value": function () { return this.register_full.apply(this, arguments); }
            }
          },
          "static": {
            "deregisterFromCallback": {
              "value": function () { return this.deregister_from_callback.apply(this, arguments); }
            },
            "deregisterNoData": {
              "value": function () { return this.deregister_no_data.apply(this, arguments); }
            },
            "registerFromCallback": {
              "value": function () { return this.register_from_callback.apply(this, arguments); }
            },
            "registerFromCallbackFull": {
              "value": function () { return this.register_from_callback_full.apply(this, arguments); }
            },
            "registerNoData": {
              "value": function () { return this.register_no_data.apply(this, arguments); }
            }
          }
        },
        "Hyperlink": {
          "prototype": {
            "getEndIndex": {
              "value": function () { return this.get_end_index.apply(this, arguments); }
            },
            "getIndexRange": {
              "value": function () { return this.get_index_range.apply(this, arguments); }
            },
            "getNAnchors": {
              "value": function () { return this.get_n_anchors.apply(this, arguments); }
            },
            "getObject": {
              "value": function () { return this.get_object.apply(this, arguments); }
            },
            "getStartIndex": {
              "value": function () { return this.get_start_index.apply(this, arguments); }
            },
            "getUri": {
              "value": function () { return this.get_uri.apply(this, arguments); }
            },
            "isValid": {
              "value": function () { return this.is_valid.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "MatchRule": {
          "prototype": {},
          "static": {}
        },
        "Object": {
          "prototype": {},
          "static": {}
        },
        "Relation": {
          "prototype": {
            "getNTargets": {
              "value": function () { return this.get_n_targets.apply(this, arguments); }
            },
            "getRelationType": {
              "value": function () { return this.get_relation_type.apply(this, arguments); }
            },
            "getTarget": {
              "value": function () { return this.get_target.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "StateSet": {
          "prototype": {
            "getStates": {
              "value": function () { return this.get_states.apply(this, arguments); }
            },
            "isEmpty": {
              "value": function () { return this.is_empty.apply(this, arguments); }
            },
            "setByName": {
              "value": function () { return this.set_by_name.apply(this, arguments); }
            }
          },
          "static": {}
        }
      },
      "static": {
        "dbusConnectionSetupWithGMain": {
          "value": function () { return this.dbus_connection_setup_with_g_main.apply(this, arguments); }
        },
        "dbusServerSetupWithGMain": {
          "value": function () { return this.dbus_server_setup_with_g_main.apply(this, arguments); }
        },
        "deregisterDeviceEventListener": {
          "value": function () { return this.deregister_device_event_listener.apply(this, arguments); }
        },
        "deregisterKeystrokeListener": {
          "value": function () { return this.deregister_keystroke_listener.apply(this, arguments); }
        },
        "eventMain": {
          "value": function () { return this.event_main.apply(this, arguments); }
        },
        "eventQuit": {
          "value": function () { return this.event_quit.apply(this, arguments); }
        },
        "generateKeyboardEvent": {
          "value": function () { return this.generate_keyboard_event.apply(this, arguments); }
        },
        "generateMouseEvent": {
          "value": function () { return this.generate_mouse_event.apply(this, arguments); }
        },
        "getA11yBus": {
          "value": function () { return this.get_a11y_bus.apply(this, arguments); }
        },
        "getDesktop": {
          "value": function () { return this.get_desktop.apply(this, arguments); }
        },
        "getDesktopCount": {
          "value": function () { return this.get_desktop_count.apply(this, arguments); }
        },
        "getDesktopList": {
          "value": function () { return this.get_desktop_list.apply(this, arguments); }
        },
        "isInitialized": {
          "value": function () { return this.is_initialized.apply(this, arguments); }
        },
        "registerDeviceEventListener": {
          "value": function () { return this.register_device_event_listener.apply(this, arguments); }
        },
        "registerKeystrokeListener": {
          "value": function () { return this.register_keystroke_listener.apply(this, arguments); }
        },
        "roleGetName": {
          "value": function () { return this.role_get_name.apply(this, arguments); }
        },
        "setMainContext": {
          "value": function () { return this.set_main_context.apply(this, arguments); }
        },
        "setTimeout": {
          "value": function () { return this.set_timeout.apply(this, arguments); }
        }
      }
    },
    "Avahi": {
      "class": {
        "Client": {
          "prototype": {},
          "static": {}
        },
        "EntryGroup": {
          "prototype": {
            "addRecord": {
              "value": function () { return this.add_record.apply(this, arguments); }
            },
            "addRecordFull": {
              "value": function () { return this.add_record_full.apply(this, arguments); }
            },
            "addService": {
              "value": function () { return this.add_service.apply(this, arguments); }
            },
            "addServiceFull": {
              "value": function () { return this.add_service_full.apply(this, arguments); }
            },
            "addServiceFullStrlist": {
              "value": function () { return this.add_service_full_strlist.apply(this, arguments); }
            },
            "addServiceStrlist": {
              "value": function () { return this.add_service_strlist.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "RecordBrowser": {
          "prototype": {},
          "static": {}
        },
        "ServiceBrowser": {
          "prototype": {},
          "static": {}
        },
        "ServiceResolver": {
          "prototype": {
            "getAddress": {
              "value": function () { return this.get_address.apply(this, arguments); }
            }
          },
          "static": {}
        }
      },
      "static": {
        "errorQuark": {
          "value": function () { return this.error_quark.apply(this, arguments); }
        }
      }
    },
    "AvahiCore": {
      "class": {},
      "static": {
        "serverGetHostName": {
          "value": function () { return this.server_get_host_name.apply(this, arguments); }
        }
      }
    },
    "BraseroBurn": {
      "class": {
        "Burn": {
          "prototype": {
            "getActionString": {
              "value": function () { return this.get_action_string.apply(this, arguments); }
            }
          },
          "static": {
            "libraryCanChecksum": {
              "value": function () { return this.library_can_checksum.apply(this, arguments); }
            },
            "libraryGetMediaCapabilities": {
              "value": function () { return this.library_get_media_capabilities.apply(this, arguments); }
            },
            "libraryGetOptionGroup": {
              "value": function () { return this.library_get_option_group.apply(this, arguments); }
            },
            "libraryGetPluginsList": {
              "value": function () { return this.library_get_plugins_list.apply(this, arguments); }
            },
            "libraryInputSupported": {
              "value": function () { return this.library_input_supported.apply(this, arguments); }
            },
            "libraryStart": {
              "value": function () { return this.library_start.apply(this, arguments); }
            },
            "libraryStop": {
              "value": function () { return this.library_stop.apply(this, arguments); }
            }
          }
        },
        "BurnDialog": {
          "prototype": {
            "runMulti": {
              "value": function () { return this.run_multi.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "BurnOptions": {
          "prototype": {
            "addOptions": {
              "value": function () { return this.add_options.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "BurnSession": {
          "prototype": {
            "addFlag": {
              "value": function () { return this.add_flag.apply(this, arguments); }
            },
            "addTrack": {
              "value": function () { return this.add_track.apply(this, arguments); }
            },
            "canBlank": {
              "value": function () { return this.can_blank.apply(this, arguments); }
            },
            "canBurn": {
              "value": function () { return this.can_burn.apply(this, arguments); }
            },
            "getBlankFlags": {
              "value": function () { return this.get_blank_flags.apply(this, arguments); }
            },
            "getBurnFlags": {
              "value": function () { return this.get_burn_flags.apply(this, arguments); }
            },
            "getBurner": {
              "value": function () { return this.get_burner.apply(this, arguments); }
            },
            "getDefaultOutputFormat": {
              "value": function () { return this.get_default_output_format.apply(this, arguments); }
            },
            "getFlags": {
              "value": function () { return this.get_flags.apply(this, arguments); }
            },
            "getInputType": {
              "value": function () { return this.get_input_type.apply(this, arguments); }
            },
            "getLabel": {
              "value": function () { return this.get_label.apply(this, arguments); }
            },
            "getOutput": {
              "value": function () { return this.get_output.apply(this, arguments); }
            },
            "getOutputFormat": {
              "value": function () { return this.get_output_format.apply(this, arguments); }
            },
            "getOutputType": {
              "value": function () { return this.get_output_type.apply(this, arguments); }
            },
            "getPossibleOutputFormats": {
              "value": function () { return this.get_possible_output_formats.apply(this, arguments); }
            },
            "getRate": {
              "value": function () { return this.get_rate.apply(this, arguments); }
            },
            "getRequiredMediaType": {
              "value": function () { return this.get_required_media_type.apply(this, arguments); }
            },
            "getSize": {
              "value": function () { return this.get_size.apply(this, arguments); }
            },
            "getStatus": {
              "value": function () { return this.get_status.apply(this, arguments); }
            },
            "getStrictSupport": {
              "value": function () { return this.get_strict_support.apply(this, arguments); }
            },
            "getTmpdir": {
              "value": function () { return this.get_tmpdir.apply(this, arguments); }
            },
            "getTracks": {
              "value": function () { return this.get_tracks.apply(this, arguments); }
            },
            "inputSupported": {
              "value": function () { return this.input_supported.apply(this, arguments); }
            },
            "moveTrack": {
              "value": function () { return this.move_track.apply(this, arguments); }
            },
            "outputSupported": {
              "value": function () { return this.output_supported.apply(this, arguments); }
            },
            "removeFlag": {
              "value": function () { return this.remove_flag.apply(this, arguments); }
            },
            "removeTrack": {
              "value": function () { return this.remove_track.apply(this, arguments); }
            },
            "setBurner": {
              "value": function () { return this.set_burner.apply(this, arguments); }
            },
            "setFlags": {
              "value": function () { return this.set_flags.apply(this, arguments); }
            },
            "setImageOutputFormat": {
              "value": function () { return this.set_image_output_format.apply(this, arguments); }
            },
            "setImageOutputFull": {
              "value": function () { return this.set_image_output_full.apply(this, arguments); }
            },
            "setLabel": {
              "value": function () { return this.set_label.apply(this, arguments); }
            },
            "setRate": {
              "value": function () { return this.set_rate.apply(this, arguments); }
            },
            "setStrictSupport": {
              "value": function () { return this.set_strict_support.apply(this, arguments); }
            },
            "setTmpdir": {
              "value": function () { return this.set_tmpdir.apply(this, arguments); }
            },
            "tagAdd": {
              "value": function () { return this.tag_add.apply(this, arguments); }
            },
            "tagAddInt": {
              "value": function () { return this.tag_add_int.apply(this, arguments); }
            },
            "tagLookup": {
              "value": function () { return this.tag_lookup.apply(this, arguments); }
            },
            "tagLookupInt": {
              "value": function () { return this.tag_lookup_int.apply(this, arguments); }
            },
            "tagRemove": {
              "value": function () { return this.tag_remove.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "SessionCfg": {
          "prototype": {
            "addFlags": {
              "value": function () { return this.add_flags.apply(this, arguments); }
            },
            "getError": {
              "value": function () { return this.get_error.apply(this, arguments); }
            },
            "hasDefaultOutputPath": {
              "value": function () { return this.has_default_output_path.apply(this, arguments); }
            },
            "isCompulsory": {
              "value": function () { return this.is_compulsory.apply(this, arguments); }
            },
            "isSupported": {
              "value": function () { return this.is_supported.apply(this, arguments); }
            },
            "removeFlags": {
              "value": function () { return this.remove_flags.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "SessionSpan": {
          "prototype": {
            "getMaxSpace": {
              "value": function () { return this.get_max_space.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Status": {
          "prototype": {
            "getCurrentAction": {
              "value": function () { return this.get_current_action.apply(this, arguments); }
            },
            "getError": {
              "value": function () { return this.get_error.apply(this, arguments); }
            },
            "getProgress": {
              "value": function () { return this.get_progress.apply(this, arguments); }
            },
            "getResult": {
              "value": function () { return this.get_result.apply(this, arguments); }
            },
            "setCompleted": {
              "value": function () { return this.set_completed.apply(this, arguments); }
            },
            "setError": {
              "value": function () { return this.set_error.apply(this, arguments); }
            },
            "setNotReady": {
              "value": function () { return this.set_not_ready.apply(this, arguments); }
            },
            "setRunning": {
              "value": function () { return this.set_running.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "SumDialog": {
          "prototype": {},
          "static": {}
        },
        "ToolDialog": {
          "prototype": {
            "setMedium": {
              "value": function () { return this.set_medium.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Track": {
          "prototype": {
            "getChecksum": {
              "value": function () { return this.get_checksum.apply(this, arguments); }
            },
            "getChecksumType": {
              "value": function () { return this.get_checksum_type.apply(this, arguments); }
            },
            "getSize": {
              "value": function () { return this.get_size.apply(this, arguments); }
            },
            "getStatus": {
              "value": function () { return this.get_status.apply(this, arguments); }
            },
            "getTrackType": {
              "value": function () { return this.get_track_type.apply(this, arguments); }
            },
            "setChecksum": {
              "value": function () { return this.set_checksum.apply(this, arguments); }
            },
            "tagAdd": {
              "value": function () { return this.tag_add.apply(this, arguments); }
            },
            "tagAddInt": {
              "value": function () { return this.tag_add_int.apply(this, arguments); }
            },
            "tagAddString": {
              "value": function () { return this.tag_add_string.apply(this, arguments); }
            },
            "tagCopyMissing": {
              "value": function () { return this.tag_copy_missing.apply(this, arguments); }
            },
            "tagLookup": {
              "value": function () { return this.tag_lookup.apply(this, arguments); }
            },
            "tagLookupInt": {
              "value": function () { return this.tag_lookup_int.apply(this, arguments); }
            },
            "tagLookupString": {
              "value": function () { return this.tag_lookup_string.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "TrackData": {
          "prototype": {
            "addFs": {
              "value": function () { return this.add_fs.apply(this, arguments); }
            },
            "getExcludedList": {
              "value": function () { return this.get_excluded_list.apply(this, arguments); }
            },
            "getFileNum": {
              "value": function () { return this.get_file_num.apply(this, arguments); }
            },
            "getFs": {
              "value": function () { return this.get_fs.apply(this, arguments); }
            },
            "getGrafts": {
              "value": function () { return this.get_grafts.apply(this, arguments); }
            },
            "rmFs": {
              "value": function () { return this.rm_fs.apply(this, arguments); }
            },
            "setDataBlocks": {
              "value": function () { return this.set_data_blocks.apply(this, arguments); }
            },
            "setFileNum": {
              "value": function () { return this.set_file_num.apply(this, arguments); }
            },
            "setSource": {
              "value": function () { return this.set_source.apply(this, arguments); }
            },
            "writeToPaths": {
              "value": function () { return this.write_to_paths.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "TrackDataCfg": {
          "prototype": {
            "addEmptyDirectory": {
              "value": function () { return this.add_empty_directory.apply(this, arguments); }
            },
            "dontFilterUri": {
              "value": function () { return this.dont_filter_uri.apply(this, arguments); }
            },
            "getAvailableMedia": {
              "value": function () { return this.get_available_media.apply(this, arguments); }
            },
            "getCurrentMedium": {
              "value": function () { return this.get_current_medium.apply(this, arguments); }
            },
            "getFilteredModel": {
              "value": function () { return this.get_filtered_model.apply(this, arguments); }
            },
            "getIcon": {
              "value": function () { return this.get_icon.apply(this, arguments); }
            },
            "getIconPath": {
              "value": function () { return this.get_icon_path.apply(this, arguments); }
            },
            "getRestoredList": {
              "value": function () { return this.get_restored_list.apply(this, arguments); }
            },
            "loadMedium": {
              "value": function () { return this.load_medium.apply(this, arguments); }
            },
            "setIcon": {
              "value": function () { return this.set_icon.apply(this, arguments); }
            },
            "spanAgain": {
              "value": function () { return this.span_again.apply(this, arguments); }
            },
            "spanMaxSpace": {
              "value": function () { return this.span_max_space.apply(this, arguments); }
            },
            "spanPossible": {
              "value": function () { return this.span_possible.apply(this, arguments); }
            },
            "spanStop": {
              "value": function () { return this.span_stop.apply(this, arguments); }
            },
            "unloadCurrentMedium": {
              "value": function () { return this.unload_current_medium.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "TrackDisc": {
          "prototype": {
            "getDrive": {
              "value": function () { return this.get_drive.apply(this, arguments); }
            },
            "getMediumType": {
              "value": function () { return this.get_medium_type.apply(this, arguments); }
            },
            "getTrackNum": {
              "value": function () { return this.get_track_num.apply(this, arguments); }
            },
            "setDrive": {
              "value": function () { return this.set_drive.apply(this, arguments); }
            },
            "setTrackNum": {
              "value": function () { return this.set_track_num.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "TrackImage": {
          "prototype": {
            "getFormat": {
              "value": function () { return this.get_format.apply(this, arguments); }
            },
            "getSource": {
              "value": function () { return this.get_source.apply(this, arguments); }
            },
            "getTocSource": {
              "value": function () { return this.get_toc_source.apply(this, arguments); }
            },
            "needByteSwap": {
              "value": function () { return this.need_byte_swap.apply(this, arguments); }
            },
            "setBlockNum": {
              "value": function () { return this.set_block_num.apply(this, arguments); }
            },
            "setSource": {
              "value": function () { return this.set_source.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "TrackImageCfg": {
          "prototype": {
            "forceFormat": {
              "value": function () { return this.force_format.apply(this, arguments); }
            },
            "getForcedFormat": {
              "value": function () { return this.get_forced_format.apply(this, arguments); }
            },
            "setSource": {
              "value": function () { return this.set_source.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "TrackStream": {
          "prototype": {
            "getEnd": {
              "value": function () { return this.get_end.apply(this, arguments); }
            },
            "getFormat": {
              "value": function () { return this.get_format.apply(this, arguments); }
            },
            "getGap": {
              "value": function () { return this.get_gap.apply(this, arguments); }
            },
            "getLength": {
              "value": function () { return this.get_length.apply(this, arguments); }
            },
            "getSource": {
              "value": function () { return this.get_source.apply(this, arguments); }
            },
            "getStart": {
              "value": function () { return this.get_start.apply(this, arguments); }
            },
            "setBoundaries": {
              "value": function () { return this.set_boundaries.apply(this, arguments); }
            },
            "setFormat": {
              "value": function () { return this.set_format.apply(this, arguments); }
            },
            "setSource": {
              "value": function () { return this.set_source.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "TrackStreamCfg": {
          "prototype": {},
          "static": {}
        }
      },
      "static": {
        "graftPointCopy": {
          "value": function () { return this.graft_point_copy.apply(this, arguments); }
        },
        "graftPointFree": {
          "value": function () { return this.graft_point_free.apply(this, arguments); }
        },
        "sessionForeachPluginError": {
          "value": function () { return this.session_foreach_plugin_error.apply(this, arguments); }
        }
      }
    },
    "BraseroMedia": {
      "class": {
        "Drive": {
          "prototype": {
            "canEject": {
              "value": function () { return this.can_eject.apply(this, arguments); }
            },
            "canUseExclusively": {
              "value": function () { return this.can_use_exclusively.apply(this, arguments); }
            },
            "canWrite": {
              "value": function () { return this.can_write.apply(this, arguments); }
            },
            "canWriteMedia": {
              "value": function () { return this.can_write_media.apply(this, arguments); }
            },
            "cancelCurrentOperation": {
              "value": function () { return this.cancel_current_operation.apply(this, arguments); }
            },
            "getBlockDevice": {
              "value": function () { return this.get_block_device.apply(this, arguments); }
            },
            "getBusTargetLunString": {
              "value": function () { return this.get_bus_target_lun_string.apply(this, arguments); }
            },
            "getCaps": {
              "value": function () { return this.get_caps.apply(this, arguments); }
            },
            "getDevice": {
              "value": function () { return this.get_device.apply(this, arguments); }
            },
            "getDisplayName": {
              "value": function () { return this.get_display_name.apply(this, arguments); }
            },
            "getGdrive": {
              "value": function () { return this.get_gdrive.apply(this, arguments); }
            },
            "getMedium": {
              "value": function () { return this.get_medium.apply(this, arguments); }
            },
            "getUdi": {
              "value": function () { return this.get_udi.apply(this, arguments); }
            },
            "isDoorOpen": {
              "value": function () { return this.is_door_open.apply(this, arguments); }
            },
            "isFake": {
              "value": function () { return this.is_fake.apply(this, arguments); }
            },
            "isLocked": {
              "value": function () { return this.is_locked.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DriveSelection": {
          "prototype": {
            "getActive": {
              "value": function () { return this.get_active.apply(this, arguments); }
            },
            "setActive": {
              "value": function () { return this.set_active.apply(this, arguments); }
            },
            "showType": {
              "value": function () { return this.show_type.apply(this, arguments); }
            },
            "driveType": {
              "get": function () { return this.drive_type; },
              "set": function (value) { this.drive_type = value; }
            }
          },
          "static": {}
        },
        "Medium": {
          "prototype": {
            "canBeRewritten": {
              "value": function () { return this.can_be_rewritten.apply(this, arguments); }
            },
            "canBeWritten": {
              "value": function () { return this.can_be_written.apply(this, arguments); }
            },
            "canUseBurnfree": {
              "value": function () { return this.can_use_burnfree.apply(this, arguments); }
            },
            "canUseDummyForSao": {
              "value": function () { return this.can_use_dummy_for_sao.apply(this, arguments); }
            },
            "canUseDummyForTao": {
              "value": function () { return this.can_use_dummy_for_tao.apply(this, arguments); }
            },
            "canUseSao": {
              "value": function () { return this.can_use_sao.apply(this, arguments); }
            },
            "canUseTao": {
              "value": function () { return this.can_use_tao.apply(this, arguments); }
            },
            "getCDTEXTTitle": {
              "value": function () { return this.get_CD_TEXT_title.apply(this, arguments); }
            },
            "getCapacity": {
              "value": function () { return this.get_capacity.apply(this, arguments); }
            },
            "getDataSize": {
              "value": function () { return this.get_data_size.apply(this, arguments); }
            },
            "getDrive": {
              "value": function () { return this.get_drive.apply(this, arguments); }
            },
            "getFreeSpace": {
              "value": function () { return this.get_free_space.apply(this, arguments); }
            },
            "getLastDataTrackAddress": {
              "value": function () { return this.get_last_data_track_address.apply(this, arguments); }
            },
            "getLastDataTrackSpace": {
              "value": function () { return this.get_last_data_track_space.apply(this, arguments); }
            },
            "getMaxWriteSpeed": {
              "value": function () { return this.get_max_write_speed.apply(this, arguments); }
            },
            "getNextWritableAddress": {
              "value": function () { return this.get_next_writable_address.apply(this, arguments); }
            },
            "getStatus": {
              "value": function () { return this.get_status.apply(this, arguments); }
            },
            "getTooltip": {
              "value": function () { return this.get_tooltip.apply(this, arguments); }
            },
            "getTrackAddress": {
              "value": function () { return this.get_track_address.apply(this, arguments); }
            },
            "getTrackNum": {
              "value": function () { return this.get_track_num.apply(this, arguments); }
            },
            "getTrackSpace": {
              "value": function () { return this.get_track_space.apply(this, arguments); }
            },
            "getTypeString": {
              "value": function () { return this.get_type_string.apply(this, arguments); }
            },
            "getWriteSpeeds": {
              "value": function () { return this.get_write_speeds.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "MediumMonitor": {
          "prototype": {
            "getDrive": {
              "value": function () { return this.get_drive.apply(this, arguments); }
            },
            "getDrives": {
              "value": function () { return this.get_drives.apply(this, arguments); }
            },
            "getMedia": {
              "value": function () { return this.get_media.apply(this, arguments); }
            },
            "isProbing": {
              "value": function () { return this.is_probing.apply(this, arguments); }
            }
          },
          "static": {
            "getDefault": {
              "value": function () { return this.get_default.apply(this, arguments); }
            }
          }
        },
        "MediumSelection": {
          "prototype": {
            "getActive": {
              "value": function () { return this.get_active.apply(this, arguments); }
            },
            "setActive": {
              "value": function () { return this.set_active.apply(this, arguments); }
            },
            "showMediaType": {
              "value": function () { return this.show_media_type.apply(this, arguments); }
            },
            "mediaType": {
              "get": function () { return this.media_type; },
              "set": function (value) { this.media_type = value; }
            }
          },
          "static": {}
        },
        "Volume": {
          "prototype": {
            "cancelCurrentOperation": {
              "value": function () { return this.cancel_current_operation.apply(this, arguments); }
            },
            "getGvolume": {
              "value": function () { return this.get_gvolume.apply(this, arguments); }
            },
            "getIcon": {
              "value": function () { return this.get_icon.apply(this, arguments); }
            },
            "getMountPoint": {
              "value": function () { return this.get_mount_point.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "isMounted": {
              "value": function () { return this.is_mounted.apply(this, arguments); }
            }
          },
          "static": {}
        }
      },
      "static": {
        "mediaGetOptionGroup": {
          "value": function () { return this.media_get_option_group.apply(this, arguments); }
        },
        "mediaLibraryStart": {
          "value": function () { return this.media_library_start.apply(this, arguments); }
        },
        "mediaLibraryStop": {
          "value": function () { return this.media_library_stop.apply(this, arguments); }
        },
        "mediaQuark": {
          "value": function () { return this.media_quark.apply(this, arguments); }
        },
        "unitsGetTimeString": {
          "value": function () { return this.units_get_time_string.apply(this, arguments); }
        },
        "unitsGetTimeStringFromSize": {
          "value": function () { return this.units_get_time_string_from_size.apply(this, arguments); }
        }
      }
    },
    "Cally": {
      "class": {
        "Actor": {
          "prototype": {
            "addAction": {
              "value": function () { return this.add_action.apply(this, arguments); }
            },
            "addActionFull": {
              "value": function () { return this.add_action_full.apply(this, arguments); }
            },
            "removeAction": {
              "value": function () { return this.remove_action.apply(this, arguments); }
            },
            "removeActionByName": {
              "value": function () { return this.remove_action_by_name.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Clone": {
          "prototype": {},
          "static": {}
        },
        "Group": {
          "prototype": {},
          "static": {}
        },
        "Rectangle": {
          "prototype": {},
          "static": {}
        },
        "Root": {
          "prototype": {},
          "static": {}
        },
        "Stage": {
          "prototype": {},
          "static": {}
        },
        "Text": {
          "prototype": {},
          "static": {}
        },
        "Texture": {
          "prototype": {},
          "static": {}
        },
        "Util": {
          "prototype": {},
          "static": {}
        }
      },
      "static": {
        "accessibilityInit": {
          "value": function () { return this.accessibility_init.apply(this, arguments); }
        },
        "getCallyInitialized": {
          "value": function () { return this.get_cally_initialized.apply(this, arguments); }
        }
      }
    },
    "Caribou": {
      "class": {
        "ColumnModel": {
          "prototype": {
            "getKey": {
              "value": function () { return this.get_key.apply(this, arguments); }
            },
            "firstKey": {
              "value": function () { return this.first_key.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DisplayAdapter": {
          "prototype": {
            "keyvalPress": {
              "value": function () { return this.keyval_press.apply(this, arguments); }
            },
            "keyvalRelease": {
              "value": function () { return this.keyval_release.apply(this, arguments); }
            },
            "modLock": {
              "value": function () { return this.mod_lock.apply(this, arguments); }
            },
            "modUnlock": {
              "value": function () { return this.mod_unlock.apply(this, arguments); }
            },
            "modLatch": {
              "value": function () { return this.mod_latch.apply(this, arguments); }
            },
            "modUnlatch": {
              "value": function () { return this.mod_unlatch.apply(this, arguments); }
            },
            "getCurrentGroup": {
              "value": function () { return this.get_current_group.apply(this, arguments); }
            },
            "getGroups": {
              "value": function () { return this.get_groups.apply(this, arguments); }
            },
            "registerKeyFunc": {
              "value": function () { return this.register_key_func.apply(this, arguments); }
            },
            "registerButtonFunc": {
              "value": function () { return this.register_button_func.apply(this, arguments); }
            },
            "getDisplay": {
              "value": function () { return this.get_display.apply(this, arguments); }
            }
          },
          "static": {
            "getDefault": {
              "value": function () { return this.get_default.apply(this, arguments); }
            },
            "setDefault": {
              "value": function () { return this.set_default.apply(this, arguments); }
            }
          }
        },
        "GroupModel": {
          "prototype": {
            "getLevels": {
              "value": function () { return this.get_levels.apply(this, arguments); }
            },
            "getLevel": {
              "value": function () { return this.get_level.apply(this, arguments); }
            },
            "getActiveLevel": {
              "value": function () { return this.get_active_level.apply(this, arguments); }
            },
            "activeLevel": {
              "get": function () { return this.active_level; },
              "set": function (value) { this.active_level = value; }
            }
          },
          "static": {
            "createGroupName": {
              "value": function () { return this.create_group_name.apply(this, arguments); }
            }
          }
        },
        "KeyModel": {
          "prototype": {
            "getExtendedKeys": {
              "value": function () { return this.get_extended_keys.apply(this, arguments); }
            },
            "getAlign": {
              "value": function () { return this.get_align.apply(this, arguments); }
            },
            "setAlign": {
              "value": function () { return this.set_align.apply(this, arguments); }
            },
            "getWidth": {
              "value": function () { return this.get_width.apply(this, arguments); }
            },
            "setWidth": {
              "value": function () { return this.set_width.apply(this, arguments); }
            },
            "getToggle": {
              "value": function () { return this.get_toggle.apply(this, arguments); }
            },
            "setToggle": {
              "value": function () { return this.set_toggle.apply(this, arguments); }
            },
            "getRepeatable": {
              "value": function () { return this.get_repeatable.apply(this, arguments); }
            },
            "setRepeatable": {
              "value": function () { return this.set_repeatable.apply(this, arguments); }
            },
            "getIsModifier": {
              "value": function () { return this.get_is_modifier.apply(this, arguments); }
            },
            "setIsModifier": {
              "value": function () { return this.set_is_modifier.apply(this, arguments); }
            },
            "getShowSubkeys": {
              "value": function () { return this.get_show_subkeys.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getKeyval": {
              "value": function () { return this.get_keyval.apply(this, arguments); }
            },
            "getText": {
              "value": function () { return this.get_text.apply(this, arguments); }
            },
            "getLabel": {
              "value": function () { return this.get_label.apply(this, arguments); }
            },
            "setLabel": {
              "value": function () { return this.set_label.apply(this, arguments); }
            },
            "isModifier": {
              "get": function () { return this.is_modifier; },
              "set": function (value) { this.is_modifier = value; }
            },
            "showSubkeys": {
              "get": function () { return this.show_subkeys; },
              "set": function (value) { this.show_subkeys = value; }
            }
          },
          "static": {}
        },
        "KeyboardModel": {
          "prototype": {
            "getGroups": {
              "value": function () { return this.get_groups.apply(this, arguments); }
            },
            "getGroup": {
              "value": function () { return this.get_group.apply(this, arguments); }
            },
            "getActiveGroup": {
              "value": function () { return this.get_active_group.apply(this, arguments); }
            },
            "getKeyboardType": {
              "value": function () { return this.get_keyboard_type.apply(this, arguments); }
            },
            "getKeyboardFile": {
              "value": function () { return this.get_keyboard_file.apply(this, arguments); }
            },
            "activeGroup": {
              "get": function () { return this.active_group; },
              "set": function (value) { this.active_group = value; }
            },
            "keyboardType": {
              "get": function () { return this.keyboard_type; },
              "set": function (value) { this.keyboard_type = value; }
            },
            "keyboardFile": {
              "get": function () { return this.keyboard_file; },
              "set": function (value) { this.keyboard_file = value; }
            }
          },
          "static": {}
        },
        "KeyboardService": {
          "prototype": {
            "setCursorLocation": {
              "value": function () { return this.set_cursor_location.apply(this, arguments); }
            },
            "setEntryLocation": {
              "value": function () { return this.set_entry_location.apply(this, arguments); }
            },
            "registerKeyboard": {
              "value": function () { return this.register_keyboard.apply(this, arguments); }
            },
            "nameLost": {
              "value": function () { return this.name_lost.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "LevelModel": {
          "prototype": {
            "getRows": {
              "value": function () { return this.get_rows.apply(this, arguments); }
            },
            "getMode": {
              "value": function () { return this.get_mode.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "NullAdapter": {
          "prototype": {},
          "static": {}
        },
        "RowModel": {
          "prototype": {
            "getColumns": {
              "value": function () { return this.get_columns.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "ScannableGroup": {
          "prototype": {
            "getScanChildren": {
              "value": function () { return this.get_scan_children.apply(this, arguments); }
            },
            "childSelect": {
              "value": function () { return this.child_select.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Scanner": {
          "prototype": {
            "setKeyboard": {
              "value": function () { return this.set_keyboard.apply(this, arguments); }
            },
            "getBindSettings": {
              "value": function () { return this.get_bind_settings.apply(this, arguments); }
            },
            "getScanGrouping": {
              "value": function () { return this.get_scan_grouping.apply(this, arguments); }
            },
            "setScanGrouping": {
              "value": function () { return this.set_scan_grouping.apply(this, arguments); }
            },
            "getScanEnabled": {
              "value": function () { return this.get_scan_enabled.apply(this, arguments); }
            },
            "setScanEnabled": {
              "value": function () { return this.set_scan_enabled.apply(this, arguments); }
            },
            "getStepTime": {
              "value": function () { return this.get_step_time.apply(this, arguments); }
            },
            "setStepTime": {
              "value": function () { return this.set_step_time.apply(this, arguments); }
            },
            "getSwitchDevice": {
              "value": function () { return this.get_switch_device.apply(this, arguments); }
            },
            "setSwitchDevice": {
              "value": function () { return this.set_switch_device.apply(this, arguments); }
            },
            "getKeyboardKey": {
              "value": function () { return this.get_keyboard_key.apply(this, arguments); }
            },
            "setKeyboardKey": {
              "value": function () { return this.set_keyboard_key.apply(this, arguments); }
            },
            "getMouseButton": {
              "value": function () { return this.get_mouse_button.apply(this, arguments); }
            },
            "setMouseButton": {
              "value": function () { return this.set_mouse_button.apply(this, arguments); }
            },
            "getScanCycles": {
              "value": function () { return this.get_scan_cycles.apply(this, arguments); }
            },
            "setScanCycles": {
              "value": function () { return this.set_scan_cycles.apply(this, arguments); }
            },
            "getAutorestart": {
              "value": function () { return this.get_autorestart.apply(this, arguments); }
            },
            "setAutorestart": {
              "value": function () { return this.set_autorestart.apply(this, arguments); }
            },
            "getInverseScanning": {
              "value": function () { return this.get_inverse_scanning.apply(this, arguments); }
            },
            "setInverseScanning": {
              "value": function () { return this.set_inverse_scanning.apply(this, arguments); }
            },
            "bindSettings": {
              "get": function () { return this.bind_settings; },
              "set": function (value) { this.bind_settings = value; }
            },
            "scanGrouping": {
              "get": function () { return this.scan_grouping; },
              "set": function (value) { this.scan_grouping = value; }
            },
            "scanEnabled": {
              "get": function () { return this.scan_enabled; },
              "set": function (value) { this.scan_enabled = value; }
            },
            "stepTime": {
              "get": function () { return this.step_time; },
              "set": function (value) { this.step_time = value; }
            },
            "switchDevice": {
              "get": function () { return this.switch_device; },
              "set": function (value) { this.switch_device = value; }
            },
            "keyboardKey": {
              "get": function () { return this.keyboard_key; },
              "set": function (value) { this.keyboard_key = value; }
            },
            "mouseButton": {
              "get": function () { return this.mouse_button; },
              "set": function (value) { this.mouse_button = value; }
            },
            "scanCycles": {
              "get": function () { return this.scan_cycles; },
              "set": function (value) { this.scan_cycles = value; }
            },
            "inverseScanning": {
              "get": function () { return this.inverse_scanning; },
              "set": function (value) { this.inverse_scanning = value; }
            }
          },
          "static": {}
        },
        "XAdapter": {
          "prototype": {},
          "static": {}
        }
      },
      "static": {}
    },
    "Champlain": {
      "class": {
        "Adjustment": {
          "prototype": {
            "getValue": {
              "value": function () { return this.get_value.apply(this, arguments); }
            },
            "getValues": {
              "value": function () { return this.get_values.apply(this, arguments); }
            },
            "interpolateStop": {
              "value": function () { return this.interpolate_stop.apply(this, arguments); }
            },
            "setValue": {
              "value": function () { return this.set_value.apply(this, arguments); }
            },
            "setValues": {
              "value": function () { return this.set_values.apply(this, arguments); }
            },
            "stepIncrement": {
              "get": function () { return this.step_increment; },
              "set": function (value) { this.step_increment = value; }
            }
          },
          "static": {}
        },
        "Coordinate": {
          "prototype": {},
          "static": {}
        },
        "CustomMarker": {
          "prototype": {},
          "static": {}
        },
        "ErrorTileRenderer": {
          "prototype": {
            "getTileSize": {
              "value": function () { return this.get_tile_size.apply(this, arguments); }
            },
            "setTileSize": {
              "value": function () { return this.set_tile_size.apply(this, arguments); }
            },
            "tileSize": {
              "get": function () { return this.tile_size; },
              "set": function (value) { this.tile_size = value; }
            }
          },
          "static": {}
        },
        "FileCache": {
          "prototype": {
            "getCacheDir": {
              "value": function () { return this.get_cache_dir.apply(this, arguments); }
            },
            "getSizeLimit": {
              "value": function () { return this.get_size_limit.apply(this, arguments); }
            },
            "purgeOnIdle": {
              "value": function () { return this.purge_on_idle.apply(this, arguments); }
            },
            "setSizeLimit": {
              "value": function () { return this.set_size_limit.apply(this, arguments); }
            },
            "cacheDir": {
              "get": function () { return this.cache_dir; },
              "set": function (value) { this.cache_dir = value; }
            },
            "sizeLimit": {
              "get": function () { return this.size_limit; },
              "set": function (value) { this.size_limit = value; }
            }
          },
          "static": {}
        },
        "FileTileSource": {
          "prototype": {
            "loadMapData": {
              "value": function () { return this.load_map_data.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "ImageRenderer": {
          "prototype": {},
          "static": {}
        },
        "KineticScrollView": {
          "prototype": {
            "decelRate": {
              "get": function () { return this.decel_rate; },
              "set": function (value) { this.decel_rate = value; }
            },
            "motionBuffer": {
              "get": function () { return this.motion_buffer; },
              "set": function (value) { this.motion_buffer = value; }
            }
          },
          "static": {}
        },
        "Label": {
          "prototype": {
            "getAlignment": {
              "value": function () { return this.get_alignment.apply(this, arguments); }
            },
            "getAttributes": {
              "value": function () { return this.get_attributes.apply(this, arguments); }
            },
            "getColor": {
              "value": function () { return this.get_color.apply(this, arguments); }
            },
            "getDrawBackground": {
              "value": function () { return this.get_draw_background.apply(this, arguments); }
            },
            "getDrawShadow": {
              "value": function () { return this.get_draw_shadow.apply(this, arguments); }
            },
            "getEllipsize": {
              "value": function () { return this.get_ellipsize.apply(this, arguments); }
            },
            "getFontName": {
              "value": function () { return this.get_font_name.apply(this, arguments); }
            },
            "getImage": {
              "value": function () { return this.get_image.apply(this, arguments); }
            },
            "getSingleLineMode": {
              "value": function () { return this.get_single_line_mode.apply(this, arguments); }
            },
            "getText": {
              "value": function () { return this.get_text.apply(this, arguments); }
            },
            "getTextColor": {
              "value": function () { return this.get_text_color.apply(this, arguments); }
            },
            "getUseMarkup": {
              "value": function () { return this.get_use_markup.apply(this, arguments); }
            },
            "getWrap": {
              "value": function () { return this.get_wrap.apply(this, arguments); }
            },
            "getWrapMode": {
              "value": function () { return this.get_wrap_mode.apply(this, arguments); }
            },
            "setAlignment": {
              "value": function () { return this.set_alignment.apply(this, arguments); }
            },
            "setAttributes": {
              "value": function () { return this.set_attributes.apply(this, arguments); }
            },
            "setColor": {
              "value": function () { return this.set_color.apply(this, arguments); }
            },
            "setDrawBackground": {
              "value": function () { return this.set_draw_background.apply(this, arguments); }
            },
            "setDrawShadow": {
              "value": function () { return this.set_draw_shadow.apply(this, arguments); }
            },
            "setEllipsize": {
              "value": function () { return this.set_ellipsize.apply(this, arguments); }
            },
            "setFontName": {
              "value": function () { return this.set_font_name.apply(this, arguments); }
            },
            "setImage": {
              "value": function () { return this.set_image.apply(this, arguments); }
            },
            "setSingleLineMode": {
              "value": function () { return this.set_single_line_mode.apply(this, arguments); }
            },
            "setText": {
              "value": function () { return this.set_text.apply(this, arguments); }
            },
            "setTextColor": {
              "value": function () { return this.set_text_color.apply(this, arguments); }
            },
            "setUseMarkup": {
              "value": function () { return this.set_use_markup.apply(this, arguments); }
            },
            "setWrap": {
              "value": function () { return this.set_wrap.apply(this, arguments); }
            },
            "setWrapMode": {
              "value": function () { return this.set_wrap_mode.apply(this, arguments); }
            },
            "drawBackground": {
              "get": function () { return this.draw_background; },
              "set": function (value) { this.draw_background = value; }
            },
            "drawShadow": {
              "get": function () { return this.draw_shadow; },
              "set": function (value) { this.draw_shadow = value; }
            },
            "fontName": {
              "get": function () { return this.font_name; },
              "set": function (value) { this.font_name = value; }
            },
            "singleLineMode": {
              "get": function () { return this.single_line_mode; },
              "set": function (value) { this.single_line_mode = value; }
            },
            "textColor": {
              "get": function () { return this.text_color; },
              "set": function (value) { this.text_color = value; }
            },
            "useMarkup": {
              "get": function () { return this.use_markup; },
              "set": function (value) { this.use_markup = value; }
            },
            "wrapMode": {
              "get": function () { return this.wrap_mode; },
              "set": function (value) { this.wrap_mode = value; }
            }
          },
          "static": {}
        },
        "Layer": {
          "prototype": {
            "getBoundingBox": {
              "value": function () { return this.get_bounding_box.apply(this, arguments); }
            },
            "setView": {
              "value": function () { return this.set_view.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "License": {
          "prototype": {
            "connectView": {
              "value": function () { return this.connect_view.apply(this, arguments); }
            },
            "disconnectView": {
              "value": function () { return this.disconnect_view.apply(this, arguments); }
            },
            "getAlignment": {
              "value": function () { return this.get_alignment.apply(this, arguments); }
            },
            "getExtraText": {
              "value": function () { return this.get_extra_text.apply(this, arguments); }
            },
            "setAlignment": {
              "value": function () { return this.set_alignment.apply(this, arguments); }
            },
            "setExtraText": {
              "value": function () { return this.set_extra_text.apply(this, arguments); }
            },
            "extraText": {
              "get": function () { return this.extra_text; },
              "set": function (value) { this.extra_text = value; }
            }
          },
          "static": {}
        },
        "MapSource": {
          "prototype": {
            "fillTile": {
              "value": function () { return this.fill_tile.apply(this, arguments); }
            },
            "getColumnCount": {
              "value": function () { return this.get_column_count.apply(this, arguments); }
            },
            "getId": {
              "value": function () { return this.get_id.apply(this, arguments); }
            },
            "getLatitude": {
              "value": function () { return this.get_latitude.apply(this, arguments); }
            },
            "getLicense": {
              "value": function () { return this.get_license.apply(this, arguments); }
            },
            "getLicenseUri": {
              "value": function () { return this.get_license_uri.apply(this, arguments); }
            },
            "getLongitude": {
              "value": function () { return this.get_longitude.apply(this, arguments); }
            },
            "getMaxZoomLevel": {
              "value": function () { return this.get_max_zoom_level.apply(this, arguments); }
            },
            "getMetersPerPixel": {
              "value": function () { return this.get_meters_per_pixel.apply(this, arguments); }
            },
            "getMinZoomLevel": {
              "value": function () { return this.get_min_zoom_level.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getNextSource": {
              "value": function () { return this.get_next_source.apply(this, arguments); }
            },
            "getProjection": {
              "value": function () { return this.get_projection.apply(this, arguments); }
            },
            "getRenderer": {
              "value": function () { return this.get_renderer.apply(this, arguments); }
            },
            "getRowCount": {
              "value": function () { return this.get_row_count.apply(this, arguments); }
            },
            "getTileSize": {
              "value": function () { return this.get_tile_size.apply(this, arguments); }
            },
            "getX": {
              "value": function () { return this.get_x.apply(this, arguments); }
            },
            "getY": {
              "value": function () { return this.get_y.apply(this, arguments); }
            },
            "setNextSource": {
              "value": function () { return this.set_next_source.apply(this, arguments); }
            },
            "setRenderer": {
              "value": function () { return this.set_renderer.apply(this, arguments); }
            },
            "nextSource": {
              "get": function () { return this.next_source; },
              "set": function (value) { this.next_source = value; }
            }
          },
          "static": {}
        },
        "MapSourceChain": {
          "prototype": {},
          "static": {}
        },
        "MapSourceDesc": {
          "prototype": {
            "getConstructor": {
              "value": function () { return this.get_constructor.apply(this, arguments); }
            },
            "getData": {
              "value": function () { return this.get_data.apply(this, arguments); }
            },
            "getId": {
              "value": function () { return this.get_id.apply(this, arguments); }
            },
            "getLicense": {
              "value": function () { return this.get_license.apply(this, arguments); }
            },
            "getLicenseUri": {
              "value": function () { return this.get_license_uri.apply(this, arguments); }
            },
            "getMaxZoomLevel": {
              "value": function () { return this.get_max_zoom_level.apply(this, arguments); }
            },
            "getMinZoomLevel": {
              "value": function () { return this.get_min_zoom_level.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getProjection": {
              "value": function () { return this.get_projection.apply(this, arguments); }
            },
            "getTileSize": {
              "value": function () { return this.get_tile_size.apply(this, arguments); }
            },
            "getUriFormat": {
              "value": function () { return this.get_uri_format.apply(this, arguments); }
            },
            "licenseUri": {
              "get": function () { return this.license_uri; },
              "set": function (value) { this.license_uri = value; }
            },
            "maxZoomLevel": {
              "get": function () { return this.max_zoom_level; },
              "set": function (value) { this.max_zoom_level = value; }
            },
            "minZoomLevel": {
              "get": function () { return this.min_zoom_level; },
              "set": function (value) { this.min_zoom_level = value; }
            },
            "tileSize": {
              "get": function () { return this.tile_size; },
              "set": function (value) { this.tile_size = value; }
            },
            "uriFormat": {
              "get": function () { return this.uri_format; },
              "set": function (value) { this.uri_format = value; }
            }
          },
          "static": {}
        },
        "MapSourceFactory": {
          "prototype": {
            "createCachedSource": {
              "value": function () { return this.create_cached_source.apply(this, arguments); }
            },
            "createErrorSource": {
              "value": function () { return this.create_error_source.apply(this, arguments); }
            },
            "createMemcachedSource": {
              "value": function () { return this.create_memcached_source.apply(this, arguments); }
            },
            "getRegistered": {
              "value": function () { return this.get_registered.apply(this, arguments); }
            }
          },
          "static": {
            "dupDefault": {
              "value": function () { return this.dup_default.apply(this, arguments); }
            }
          }
        },
        "Marker": {
          "prototype": {
            "animateIn": {
              "value": function () { return this.animate_in.apply(this, arguments); }
            },
            "animateInWithDelay": {
              "value": function () { return this.animate_in_with_delay.apply(this, arguments); }
            },
            "animateOut": {
              "value": function () { return this.animate_out.apply(this, arguments); }
            },
            "animateOutWithDelay": {
              "value": function () { return this.animate_out_with_delay.apply(this, arguments); }
            },
            "getDraggable": {
              "value": function () { return this.get_draggable.apply(this, arguments); }
            },
            "getSelectable": {
              "value": function () { return this.get_selectable.apply(this, arguments); }
            },
            "getSelected": {
              "value": function () { return this.get_selected.apply(this, arguments); }
            },
            "setDraggable": {
              "value": function () { return this.set_draggable.apply(this, arguments); }
            },
            "setSelectable": {
              "value": function () { return this.set_selectable.apply(this, arguments); }
            },
            "setSelected": {
              "value": function () { return this.set_selected.apply(this, arguments); }
            }
          },
          "static": {
            "getSelectionColor": {
              "value": function () { return this.get_selection_color.apply(this, arguments); }
            },
            "getSelectionTextColor": {
              "value": function () { return this.get_selection_text_color.apply(this, arguments); }
            },
            "setSelectionColor": {
              "value": function () { return this.set_selection_color.apply(this, arguments); }
            },
            "setSelectionTextColor": {
              "value": function () { return this.set_selection_text_color.apply(this, arguments); }
            }
          }
        },
        "MarkerLayer": {
          "prototype": {
            "addMarker": {
              "value": function () { return this.add_marker.apply(this, arguments); }
            },
            "animateInAllMarkers": {
              "value": function () { return this.animate_in_all_markers.apply(this, arguments); }
            },
            "animateOutAllMarkers": {
              "value": function () { return this.animate_out_all_markers.apply(this, arguments); }
            },
            "getMarkers": {
              "value": function () { return this.get_markers.apply(this, arguments); }
            },
            "getSelected": {
              "value": function () { return this.get_selected.apply(this, arguments); }
            },
            "getSelectionMode": {
              "value": function () { return this.get_selection_mode.apply(this, arguments); }
            },
            "hideAllMarkers": {
              "value": function () { return this.hide_all_markers.apply(this, arguments); }
            },
            "removeAll": {
              "value": function () { return this.remove_all.apply(this, arguments); }
            },
            "removeMarker": {
              "value": function () { return this.remove_marker.apply(this, arguments); }
            },
            "selectAllMarkers": {
              "value": function () { return this.select_all_markers.apply(this, arguments); }
            },
            "setAllMarkersDraggable": {
              "value": function () { return this.set_all_markers_draggable.apply(this, arguments); }
            },
            "setAllMarkersUndraggable": {
              "value": function () { return this.set_all_markers_undraggable.apply(this, arguments); }
            },
            "setSelectionMode": {
              "value": function () { return this.set_selection_mode.apply(this, arguments); }
            },
            "showAllMarkers": {
              "value": function () { return this.show_all_markers.apply(this, arguments); }
            },
            "unselectAllMarkers": {
              "value": function () { return this.unselect_all_markers.apply(this, arguments); }
            },
            "selectionMode": {
              "get": function () { return this.selection_mode; },
              "set": function (value) { this.selection_mode = value; }
            }
          },
          "static": {}
        },
        "MemoryCache": {
          "prototype": {
            "getSizeLimit": {
              "value": function () { return this.get_size_limit.apply(this, arguments); }
            },
            "setSizeLimit": {
              "value": function () { return this.set_size_limit.apply(this, arguments); }
            },
            "sizeLimit": {
              "get": function () { return this.size_limit; },
              "set": function (value) { this.size_limit = value; }
            }
          },
          "static": {}
        },
        "NetworkBboxTileSource": {
          "prototype": {
            "getApiUri": {
              "value": function () { return this.get_api_uri.apply(this, arguments); }
            },
            "loadMapData": {
              "value": function () { return this.load_map_data.apply(this, arguments); }
            },
            "setApiUri": {
              "value": function () { return this.set_api_uri.apply(this, arguments); }
            },
            "apiUri": {
              "get": function () { return this.api_uri; },
              "set": function (value) { this.api_uri = value; }
            },
            "proxyUri": {
              "get": function () { return this.proxy_uri; },
              "set": function (value) { this.proxy_uri = value; }
            }
          },
          "static": {}
        },
        "NetworkTileSource": {
          "prototype": {
            "getOffline": {
              "value": function () { return this.get_offline.apply(this, arguments); }
            },
            "getProxyUri": {
              "value": function () { return this.get_proxy_uri.apply(this, arguments); }
            },
            "getUriFormat": {
              "value": function () { return this.get_uri_format.apply(this, arguments); }
            },
            "setOffline": {
              "value": function () { return this.set_offline.apply(this, arguments); }
            },
            "setProxyUri": {
              "value": function () { return this.set_proxy_uri.apply(this, arguments); }
            },
            "setUriFormat": {
              "value": function () { return this.set_uri_format.apply(this, arguments); }
            },
            "proxyUri": {
              "get": function () { return this.proxy_uri; },
              "set": function (value) { this.proxy_uri = value; }
            },
            "uriFormat": {
              "get": function () { return this.uri_format; },
              "set": function (value) { this.uri_format = value; }
            }
          },
          "static": {}
        },
        "NullTileSource": {
          "prototype": {},
          "static": {}
        },
        "PathLayer": {
          "prototype": {
            "addNode": {
              "value": function () { return this.add_node.apply(this, arguments); }
            },
            "getClosed": {
              "value": function () { return this.get_closed.apply(this, arguments); }
            },
            "getDash": {
              "value": function () { return this.get_dash.apply(this, arguments); }
            },
            "getFill": {
              "value": function () { return this.get_fill.apply(this, arguments); }
            },
            "getFillColor": {
              "value": function () { return this.get_fill_color.apply(this, arguments); }
            },
            "getNodes": {
              "value": function () { return this.get_nodes.apply(this, arguments); }
            },
            "getStroke": {
              "value": function () { return this.get_stroke.apply(this, arguments); }
            },
            "getStrokeColor": {
              "value": function () { return this.get_stroke_color.apply(this, arguments); }
            },
            "getStrokeWidth": {
              "value": function () { return this.get_stroke_width.apply(this, arguments); }
            },
            "getVisible": {
              "value": function () { return this.get_visible.apply(this, arguments); }
            },
            "insertNode": {
              "value": function () { return this.insert_node.apply(this, arguments); }
            },
            "removeAll": {
              "value": function () { return this.remove_all.apply(this, arguments); }
            },
            "removeNode": {
              "value": function () { return this.remove_node.apply(this, arguments); }
            },
            "setClosed": {
              "value": function () { return this.set_closed.apply(this, arguments); }
            },
            "setDash": {
              "value": function () { return this.set_dash.apply(this, arguments); }
            },
            "setFill": {
              "value": function () { return this.set_fill.apply(this, arguments); }
            },
            "setFillColor": {
              "value": function () { return this.set_fill_color.apply(this, arguments); }
            },
            "setStroke": {
              "value": function () { return this.set_stroke.apply(this, arguments); }
            },
            "setStrokeColor": {
              "value": function () { return this.set_stroke_color.apply(this, arguments); }
            },
            "setStrokeWidth": {
              "value": function () { return this.set_stroke_width.apply(this, arguments); }
            },
            "setVisible": {
              "value": function () { return this.set_visible.apply(this, arguments); }
            },
            "fillColor": {
              "get": function () { return this.fill_color; },
              "set": function (value) { this.fill_color = value; }
            },
            "strokeColor": {
              "get": function () { return this.stroke_color; },
              "set": function (value) { this.stroke_color = value; }
            },
            "strokeWidth": {
              "get": function () { return this.stroke_width; },
              "set": function (value) { this.stroke_width = value; }
            }
          },
          "static": {}
        },
        "Point": {
          "prototype": {
            "getColor": {
              "value": function () { return this.get_color.apply(this, arguments); }
            },
            "getSize": {
              "value": function () { return this.get_size.apply(this, arguments); }
            },
            "setColor": {
              "value": function () { return this.set_color.apply(this, arguments); }
            },
            "setSize": {
              "value": function () { return this.set_size.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Renderer": {
          "prototype": {
            "setData": {
              "value": function () { return this.set_data.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Scale": {
          "prototype": {
            "connectView": {
              "value": function () { return this.connect_view.apply(this, arguments); }
            },
            "disconnectView": {
              "value": function () { return this.disconnect_view.apply(this, arguments); }
            },
            "getMaxWidth": {
              "value": function () { return this.get_max_width.apply(this, arguments); }
            },
            "getUnit": {
              "value": function () { return this.get_unit.apply(this, arguments); }
            },
            "setMaxWidth": {
              "value": function () { return this.set_max_width.apply(this, arguments); }
            },
            "setUnit": {
              "value": function () { return this.set_unit.apply(this, arguments); }
            },
            "maxWidth": {
              "get": function () { return this.max_width; },
              "set": function (value) { this.max_width = value; }
            }
          },
          "static": {}
        },
        "Tile": {
          "prototype": {
            "displayContent": {
              "value": function () { return this.display_content.apply(this, arguments); }
            },
            "getContent": {
              "value": function () { return this.get_content.apply(this, arguments); }
            },
            "getEtag": {
              "value": function () { return this.get_etag.apply(this, arguments); }
            },
            "getFadeIn": {
              "value": function () { return this.get_fade_in.apply(this, arguments); }
            },
            "getModifiedTime": {
              "value": function () { return this.get_modified_time.apply(this, arguments); }
            },
            "getSize": {
              "value": function () { return this.get_size.apply(this, arguments); }
            },
            "getState": {
              "value": function () { return this.get_state.apply(this, arguments); }
            },
            "getX": {
              "value": function () { return this.get_x.apply(this, arguments); }
            },
            "getY": {
              "value": function () { return this.get_y.apply(this, arguments); }
            },
            "getZoomLevel": {
              "value": function () { return this.get_zoom_level.apply(this, arguments); }
            },
            "setContent": {
              "value": function () { return this.set_content.apply(this, arguments); }
            },
            "setEtag": {
              "value": function () { return this.set_etag.apply(this, arguments); }
            },
            "setFadeIn": {
              "value": function () { return this.set_fade_in.apply(this, arguments); }
            },
            "setModifiedTime": {
              "value": function () { return this.set_modified_time.apply(this, arguments); }
            },
            "setSize": {
              "value": function () { return this.set_size.apply(this, arguments); }
            },
            "setState": {
              "value": function () { return this.set_state.apply(this, arguments); }
            },
            "setX": {
              "value": function () { return this.set_x.apply(this, arguments); }
            },
            "setY": {
              "value": function () { return this.set_y.apply(this, arguments); }
            },
            "setZoomLevel": {
              "value": function () { return this.set_zoom_level.apply(this, arguments); }
            },
            "fadeIn": {
              "get": function () { return this.fade_in; },
              "set": function (value) { this.fade_in = value; }
            },
            "zoomLevel": {
              "get": function () { return this.zoom_level; },
              "set": function (value) { this.zoom_level = value; }
            }
          },
          "static": {}
        },
        "TileCache": {
          "prototype": {
            "onTileFilled": {
              "value": function () { return this.on_tile_filled.apply(this, arguments); }
            },
            "refreshTileTime": {
              "value": function () { return this.refresh_tile_time.apply(this, arguments); }
            },
            "storeTile": {
              "value": function () { return this.store_tile.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "TileSource": {
          "prototype": {
            "getCache": {
              "value": function () { return this.get_cache.apply(this, arguments); }
            },
            "setCache": {
              "value": function () { return this.set_cache.apply(this, arguments); }
            },
            "setId": {
              "value": function () { return this.set_id.apply(this, arguments); }
            },
            "setLicense": {
              "value": function () { return this.set_license.apply(this, arguments); }
            },
            "setLicenseUri": {
              "value": function () { return this.set_license_uri.apply(this, arguments); }
            },
            "setMaxZoomLevel": {
              "value": function () { return this.set_max_zoom_level.apply(this, arguments); }
            },
            "setMinZoomLevel": {
              "value": function () { return this.set_min_zoom_level.apply(this, arguments); }
            },
            "setName": {
              "value": function () { return this.set_name.apply(this, arguments); }
            },
            "setProjection": {
              "value": function () { return this.set_projection.apply(this, arguments); }
            },
            "setTileSize": {
              "value": function () { return this.set_tile_size.apply(this, arguments); }
            },
            "licenseUri": {
              "get": function () { return this.license_uri; },
              "set": function (value) { this.license_uri = value; }
            },
            "maxZoomLevel": {
              "get": function () { return this.max_zoom_level; },
              "set": function (value) { this.max_zoom_level = value; }
            },
            "minZoomLevel": {
              "get": function () { return this.min_zoom_level; },
              "set": function (value) { this.min_zoom_level = value; }
            },
            "tileSize": {
              "get": function () { return this.tile_size; },
              "set": function (value) { this.tile_size = value; }
            }
          },
          "static": {}
        },
        "View": {
          "prototype": {
            "addLayer": {
              "value": function () { return this.add_layer.apply(this, arguments); }
            },
            "addOverlaySource": {
              "value": function () { return this.add_overlay_source.apply(this, arguments); }
            },
            "binLayoutAdd": {
              "value": function () { return this.bin_layout_add.apply(this, arguments); }
            },
            "centerOn": {
              "value": function () { return this.center_on.apply(this, arguments); }
            },
            "ensureLayersVisible": {
              "value": function () { return this.ensure_layers_visible.apply(this, arguments); }
            },
            "ensureVisible": {
              "value": function () { return this.ensure_visible.apply(this, arguments); }
            },
            "getAnimateZoom": {
              "value": function () { return this.get_animate_zoom.apply(this, arguments); }
            },
            "getBackgroundPattern": {
              "value": function () { return this.get_background_pattern.apply(this, arguments); }
            },
            "getBoundingBox": {
              "value": function () { return this.get_bounding_box.apply(this, arguments); }
            },
            "getBoundingBoxForZoomLevel": {
              "value": function () { return this.get_bounding_box_for_zoom_level.apply(this, arguments); }
            },
            "getCenterLatitude": {
              "value": function () { return this.get_center_latitude.apply(this, arguments); }
            },
            "getCenterLongitude": {
              "value": function () { return this.get_center_longitude.apply(this, arguments); }
            },
            "getDeceleration": {
              "value": function () { return this.get_deceleration.apply(this, arguments); }
            },
            "getKeepCenterOnResize": {
              "value": function () { return this.get_keep_center_on_resize.apply(this, arguments); }
            },
            "getKineticMode": {
              "value": function () { return this.get_kinetic_mode.apply(this, arguments); }
            },
            "getLicenseActor": {
              "value": function () { return this.get_license_actor.apply(this, arguments); }
            },
            "getMapSource": {
              "value": function () { return this.get_map_source.apply(this, arguments); }
            },
            "getMaxZoomLevel": {
              "value": function () { return this.get_max_zoom_level.apply(this, arguments); }
            },
            "getMinZoomLevel": {
              "value": function () { return this.get_min_zoom_level.apply(this, arguments); }
            },
            "getOverlaySources": {
              "value": function () { return this.get_overlay_sources.apply(this, arguments); }
            },
            "getState": {
              "value": function () { return this.get_state.apply(this, arguments); }
            },
            "getViewportOrigin": {
              "value": function () { return this.get_viewport_origin.apply(this, arguments); }
            },
            "getWorld": {
              "value": function () { return this.get_world.apply(this, arguments); }
            },
            "getZoomLevel": {
              "value": function () { return this.get_zoom_level.apply(this, arguments); }
            },
            "getZoomOnDoubleClick": {
              "value": function () { return this.get_zoom_on_double_click.apply(this, arguments); }
            },
            "goTo": {
              "value": function () { return this.go_to.apply(this, arguments); }
            },
            "latitudeToY": {
              "value": function () { return this.latitude_to_y.apply(this, arguments); }
            },
            "longitudeToX": {
              "value": function () { return this.longitude_to_x.apply(this, arguments); }
            },
            "reloadTiles": {
              "value": function () { return this.reload_tiles.apply(this, arguments); }
            },
            "removeLayer": {
              "value": function () { return this.remove_layer.apply(this, arguments); }
            },
            "removeOverlaySource": {
              "value": function () { return this.remove_overlay_source.apply(this, arguments); }
            },
            "setAnimateZoom": {
              "value": function () { return this.set_animate_zoom.apply(this, arguments); }
            },
            "setBackgroundPattern": {
              "value": function () { return this.set_background_pattern.apply(this, arguments); }
            },
            "setDeceleration": {
              "value": function () { return this.set_deceleration.apply(this, arguments); }
            },
            "setKeepCenterOnResize": {
              "value": function () { return this.set_keep_center_on_resize.apply(this, arguments); }
            },
            "setKineticMode": {
              "value": function () { return this.set_kinetic_mode.apply(this, arguments); }
            },
            "setMapSource": {
              "value": function () { return this.set_map_source.apply(this, arguments); }
            },
            "setMaxZoomLevel": {
              "value": function () { return this.set_max_zoom_level.apply(this, arguments); }
            },
            "setMinZoomLevel": {
              "value": function () { return this.set_min_zoom_level.apply(this, arguments); }
            },
            "setWorld": {
              "value": function () { return this.set_world.apply(this, arguments); }
            },
            "setZoomLevel": {
              "value": function () { return this.set_zoom_level.apply(this, arguments); }
            },
            "setZoomOnDoubleClick": {
              "value": function () { return this.set_zoom_on_double_click.apply(this, arguments); }
            },
            "stopGoTo": {
              "value": function () { return this.stop_go_to.apply(this, arguments); }
            },
            "toSurface": {
              "value": function () { return this.to_surface.apply(this, arguments); }
            },
            "xToLongitude": {
              "value": function () { return this.x_to_longitude.apply(this, arguments); }
            },
            "yToLatitude": {
              "value": function () { return this.y_to_latitude.apply(this, arguments); }
            },
            "zoomIn": {
              "value": function () { return this.zoom_in.apply(this, arguments); }
            },
            "zoomOut": {
              "value": function () { return this.zoom_out.apply(this, arguments); }
            },
            "animateZoom": {
              "get": function () { return this.animate_zoom; },
              "set": function (value) { this.animate_zoom = value; }
            },
            "backgroundPattern": {
              "get": function () { return this.background_pattern; },
              "set": function (value) { this.background_pattern = value; }
            },
            "gotoAnimationDuration": {
              "get": function () { return this.goto_animation_duration; },
              "set": function (value) { this.goto_animation_duration = value; }
            },
            "gotoAnimationMode": {
              "get": function () { return this.goto_animation_mode; },
              "set": function (value) { this.goto_animation_mode = value; }
            },
            "keepCenterOnResize": {
              "get": function () { return this.keep_center_on_resize; },
              "set": function (value) { this.keep_center_on_resize = value; }
            },
            "kineticMode": {
              "get": function () { return this.kinetic_mode; },
              "set": function (value) { this.kinetic_mode = value; }
            },
            "mapSource": {
              "get": function () { return this.map_source; },
              "set": function (value) { this.map_source = value; }
            },
            "maxZoomLevel": {
              "get": function () { return this.max_zoom_level; },
              "set": function (value) { this.max_zoom_level = value; }
            },
            "minZoomLevel": {
              "get": function () { return this.min_zoom_level; },
              "set": function (value) { this.min_zoom_level = value; }
            },
            "zoomLevel": {
              "get": function () { return this.zoom_level; },
              "set": function (value) { this.zoom_level = value; }
            },
            "zoomOnDoubleClick": {
              "get": function () { return this.zoom_on_double_click; },
              "set": function (value) { this.zoom_on_double_click = value; }
            }
          },
          "static": {}
        },
        "Viewport": {
          "prototype": {
            "getAdjustments": {
              "value": function () { return this.get_adjustments.apply(this, arguments); }
            },
            "getAnchor": {
              "value": function () { return this.get_anchor.apply(this, arguments); }
            },
            "getOrigin": {
              "value": function () { return this.get_origin.apply(this, arguments); }
            },
            "setActorPosition": {
              "value": function () { return this.set_actor_position.apply(this, arguments); }
            },
            "setAdjustments": {
              "value": function () { return this.set_adjustments.apply(this, arguments); }
            },
            "setChild": {
              "value": function () { return this.set_child.apply(this, arguments); }
            },
            "setOrigin": {
              "value": function () { return this.set_origin.apply(this, arguments); }
            },
            "xOrigin": {
              "get": function () { return this.x_origin; },
              "set": function (value) { this.x_origin = value; }
            },
            "yOrigin": {
              "get": function () { return this.y_origin; },
              "set": function (value) { this.y_origin = value; }
            }
          },
          "static": {}
        }
      },
      "static": {}
    },
    "Cheese": {
      "class": {
        "Camera": {
          "prototype": {
            "connectEffectTexture": {
              "value": function () { return this.connect_effect_texture.apply(this, arguments); }
            },
            "getBalancePropertyRange": {
              "value": function () { return this.get_balance_property_range.apply(this, arguments); }
            },
            "getCameraDevices": {
              "value": function () { return this.get_camera_devices.apply(this, arguments); }
            },
            "getCurrentVideoFormat": {
              "value": function () { return this.get_current_video_format.apply(this, arguments); }
            },
            "getRecordedTime": {
              "value": function () { return this.get_recorded_time.apply(this, arguments); }
            },
            "getSelectedDevice": {
              "value": function () { return this.get_selected_device.apply(this, arguments); }
            },
            "getVideoFormats": {
              "value": function () { return this.get_video_formats.apply(this, arguments); }
            },
            "setBalanceProperty": {
              "value": function () { return this.set_balance_property.apply(this, arguments); }
            },
            "setDevice": {
              "value": function () { return this.set_device.apply(this, arguments); }
            },
            "setEffect": {
              "value": function () { return this.set_effect.apply(this, arguments); }
            },
            "setVideoFormat": {
              "value": function () { return this.set_video_format.apply(this, arguments); }
            },
            "startVideoRecording": {
              "value": function () { return this.start_video_recording.apply(this, arguments); }
            },
            "stopVideoRecording": {
              "value": function () { return this.stop_video_recording.apply(this, arguments); }
            },
            "switchCameraDevice": {
              "value": function () { return this.switch_camera_device.apply(this, arguments); }
            },
            "takePhoto": {
              "value": function () { return this.take_photo.apply(this, arguments); }
            },
            "takePhotoPixbuf": {
              "value": function () { return this.take_photo_pixbuf.apply(this, arguments); }
            },
            "toggleEffectsPipeline": {
              "value": function () { return this.toggle_effects_pipeline.apply(this, arguments); }
            },
            "numCameraDevices": {
              "get": function () { return this.num_camera_devices; },
              "set": function (value) { this.num_camera_devices = value; }
            },
            "videoTexture": {
              "get": function () { return this.video_texture; },
              "set": function (value) { this.video_texture = value; }
            }
          },
          "static": {}
        },
        "CameraDevice": {
          "prototype": {
            "getBestFormat": {
              "value": function () { return this.get_best_format.apply(this, arguments); }
            },
            "getCapsForFormat": {
              "value": function () { return this.get_caps_for_format.apply(this, arguments); }
            },
            "getFormatList": {
              "value": function () { return this.get_format_list.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getSrc": {
              "value": function () { return this.get_src.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "CameraDeviceMonitor": {
          "prototype": {},
          "static": {}
        },
        "Effect": {
          "prototype": {
            "disablePreview": {
              "value": function () { return this.disable_preview.apply(this, arguments); }
            },
            "enablePreview": {
              "value": function () { return this.enable_preview.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getPipelineDesc": {
              "value": function () { return this.get_pipeline_desc.apply(this, arguments); }
            },
            "isPreviewConnected": {
              "value": function () { return this.is_preview_connected.apply(this, arguments); }
            },
            "controlValve": {
              "get": function () { return this.control_valve; },
              "set": function (value) { this.control_valve = value; }
            },
            "pipelineDesc": {
              "get": function () { return this.pipeline_desc; },
              "set": function (value) { this.pipeline_desc = value; }
            }
          },
          "static": {
            "loadEffects": {
              "value": function () { return this.load_effects.apply(this, arguments); }
            },
            "loadFromFile": {
              "value": function () { return this.load_from_file.apply(this, arguments); }
            }
          }
        },
        "FileUtil": {
          "prototype": {
            "getNewMediaFilename": {
              "value": function () { return this.get_new_media_filename.apply(this, arguments); }
            },
            "getPhotoPath": {
              "value": function () { return this.get_photo_path.apply(this, arguments); }
            },
            "getVideoPath": {
              "value": function () { return this.get_video_path.apply(this, arguments); }
            },
            "resetBurst": {
              "value": function () { return this.reset_burst.apply(this, arguments); }
            }
          },
          "static": {}
        }
      },
      "static": {}
    },
    "Clutter": {
      "class": {
        "Action": {
          "prototype": {},
          "static": {}
        },
        "Actor": {
          "prototype": {
            "addAction": {
              "value": function () { return this.add_action.apply(this, arguments); }
            },
            "addActionWithName": {
              "value": function () { return this.add_action_with_name.apply(this, arguments); }
            },
            "addChild": {
              "value": function () { return this.add_child.apply(this, arguments); }
            },
            "addConstraint": {
              "value": function () { return this.add_constraint.apply(this, arguments); }
            },
            "addConstraintWithName": {
              "value": function () { return this.add_constraint_with_name.apply(this, arguments); }
            },
            "addEffect": {
              "value": function () { return this.add_effect.apply(this, arguments); }
            },
            "addEffectWithName": {
              "value": function () { return this.add_effect_with_name.apply(this, arguments); }
            },
            "addTransition": {
              "value": function () { return this.add_transition.apply(this, arguments); }
            },
            "allocateAlignFill": {
              "value": function () { return this.allocate_align_fill.apply(this, arguments); }
            },
            "allocateAvailableSize": {
              "value": function () { return this.allocate_available_size.apply(this, arguments); }
            },
            "allocatePreferredSize": {
              "value": function () { return this.allocate_preferred_size.apply(this, arguments); }
            },
            "animateWithAlpha": {
              "value": function () { return this.animate_with_alpha.apply(this, arguments); }
            },
            "animateWithAlphav": {
              "value": function () { return this.animate_with_alphav.apply(this, arguments); }
            },
            "animateWithTimeline": {
              "value": function () { return this.animate_with_timeline.apply(this, arguments); }
            },
            "animateWithTimelinev": {
              "value": function () { return this.animate_with_timelinev.apply(this, arguments); }
            },
            "applyRelativeTransformToPoint": {
              "value": function () { return this.apply_relative_transform_to_point.apply(this, arguments); }
            },
            "applyTransformToPoint": {
              "value": function () { return this.apply_transform_to_point.apply(this, arguments); }
            },
            "bindModel": {
              "value": function () { return this.bind_model.apply(this, arguments); }
            },
            "bindModelWithProperties": {
              "value": function () { return this.bind_model_with_properties.apply(this, arguments); }
            },
            "clearActions": {
              "value": function () { return this.clear_actions.apply(this, arguments); }
            },
            "clearConstraints": {
              "value": function () { return this.clear_constraints.apply(this, arguments); }
            },
            "clearEffects": {
              "value": function () { return this.clear_effects.apply(this, arguments); }
            },
            "continuePaint": {
              "value": function () { return this.continue_paint.apply(this, arguments); }
            },
            "createPangoContext": {
              "value": function () { return this.create_pango_context.apply(this, arguments); }
            },
            "createPangoLayout": {
              "value": function () { return this.create_pango_layout.apply(this, arguments); }
            },
            "destroyAllChildren": {
              "value": function () { return this.destroy_all_children.apply(this, arguments); }
            },
            "detachAnimation": {
              "value": function () { return this.detach_animation.apply(this, arguments); }
            },
            "getAbsAllocationVertices": {
              "value": function () { return this.get_abs_allocation_vertices.apply(this, arguments); }
            },
            "getAccessible": {
              "value": function () { return this.get_accessible.apply(this, arguments); }
            },
            "getAction": {
              "value": function () { return this.get_action.apply(this, arguments); }
            },
            "getActions": {
              "value": function () { return this.get_actions.apply(this, arguments); }
            },
            "getAllocationBox": {
              "value": function () { return this.get_allocation_box.apply(this, arguments); }
            },
            "getAllocationGeometry": {
              "value": function () { return this.get_allocation_geometry.apply(this, arguments); }
            },
            "getAllocationVertices": {
              "value": function () { return this.get_allocation_vertices.apply(this, arguments); }
            },
            "getAnchorPoint": {
              "value": function () { return this.get_anchor_point.apply(this, arguments); }
            },
            "getAnchorPointGravity": {
              "value": function () { return this.get_anchor_point_gravity.apply(this, arguments); }
            },
            "getAnimation": {
              "value": function () { return this.get_animation.apply(this, arguments); }
            },
            "getBackgroundColor": {
              "value": function () { return this.get_background_color.apply(this, arguments); }
            },
            "getChildAtIndex": {
              "value": function () { return this.get_child_at_index.apply(this, arguments); }
            },
            "getChildTransform": {
              "value": function () { return this.get_child_transform.apply(this, arguments); }
            },
            "getChildren": {
              "value": function () { return this.get_children.apply(this, arguments); }
            },
            "getClip": {
              "value": function () { return this.get_clip.apply(this, arguments); }
            },
            "getClipToAllocation": {
              "value": function () { return this.get_clip_to_allocation.apply(this, arguments); }
            },
            "getConstraint": {
              "value": function () { return this.get_constraint.apply(this, arguments); }
            },
            "getConstraints": {
              "value": function () { return this.get_constraints.apply(this, arguments); }
            },
            "getContent": {
              "value": function () { return this.get_content.apply(this, arguments); }
            },
            "getContentBox": {
              "value": function () { return this.get_content_box.apply(this, arguments); }
            },
            "getContentGravity": {
              "value": function () { return this.get_content_gravity.apply(this, arguments); }
            },
            "getContentRepeat": {
              "value": function () { return this.get_content_repeat.apply(this, arguments); }
            },
            "getContentScalingFilters": {
              "value": function () { return this.get_content_scaling_filters.apply(this, arguments); }
            },
            "getDefaultPaintVolume": {
              "value": function () { return this.get_default_paint_volume.apply(this, arguments); }
            },
            "getDepth": {
              "value": function () { return this.get_depth.apply(this, arguments); }
            },
            "getEasingDelay": {
              "value": function () { return this.get_easing_delay.apply(this, arguments); }
            },
            "getEasingDuration": {
              "value": function () { return this.get_easing_duration.apply(this, arguments); }
            },
            "getEasingMode": {
              "value": function () { return this.get_easing_mode.apply(this, arguments); }
            },
            "getEffect": {
              "value": function () { return this.get_effect.apply(this, arguments); }
            },
            "getEffects": {
              "value": function () { return this.get_effects.apply(this, arguments); }
            },
            "getFirstChild": {
              "value": function () { return this.get_first_child.apply(this, arguments); }
            },
            "getFixedPositionSet": {
              "value": function () { return this.get_fixed_position_set.apply(this, arguments); }
            },
            "getFlags": {
              "value": function () { return this.get_flags.apply(this, arguments); }
            },
            "getGeometry": {
              "value": function () { return this.get_geometry.apply(this, arguments); }
            },
            "getGid": {
              "value": function () { return this.get_gid.apply(this, arguments); }
            },
            "getHeight": {
              "value": function () { return this.get_height.apply(this, arguments); }
            },
            "getLastChild": {
              "value": function () { return this.get_last_child.apply(this, arguments); }
            },
            "getLayoutManager": {
              "value": function () { return this.get_layout_manager.apply(this, arguments); }
            },
            "getMargin": {
              "value": function () { return this.get_margin.apply(this, arguments); }
            },
            "getMarginBottom": {
              "value": function () { return this.get_margin_bottom.apply(this, arguments); }
            },
            "getMarginLeft": {
              "value": function () { return this.get_margin_left.apply(this, arguments); }
            },
            "getMarginRight": {
              "value": function () { return this.get_margin_right.apply(this, arguments); }
            },
            "getMarginTop": {
              "value": function () { return this.get_margin_top.apply(this, arguments); }
            },
            "getNChildren": {
              "value": function () { return this.get_n_children.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getNextSibling": {
              "value": function () { return this.get_next_sibling.apply(this, arguments); }
            },
            "getOffscreenRedirect": {
              "value": function () { return this.get_offscreen_redirect.apply(this, arguments); }
            },
            "getOpacity": {
              "value": function () { return this.get_opacity.apply(this, arguments); }
            },
            "getPaintBox": {
              "value": function () { return this.get_paint_box.apply(this, arguments); }
            },
            "getPaintOpacity": {
              "value": function () { return this.get_paint_opacity.apply(this, arguments); }
            },
            "getPaintVisibility": {
              "value": function () { return this.get_paint_visibility.apply(this, arguments); }
            },
            "getPaintVolume": {
              "value": function () { return this.get_paint_volume.apply(this, arguments); }
            },
            "getPangoContext": {
              "value": function () { return this.get_pango_context.apply(this, arguments); }
            },
            "getParent": {
              "value": function () { return this.get_parent.apply(this, arguments); }
            },
            "getPivotPoint": {
              "value": function () { return this.get_pivot_point.apply(this, arguments); }
            },
            "getPivotPointZ": {
              "value": function () { return this.get_pivot_point_z.apply(this, arguments); }
            },
            "getPosition": {
              "value": function () { return this.get_position.apply(this, arguments); }
            },
            "getPreferredHeight": {
              "value": function () { return this.get_preferred_height.apply(this, arguments); }
            },
            "getPreferredSize": {
              "value": function () { return this.get_preferred_size.apply(this, arguments); }
            },
            "getPreferredWidth": {
              "value": function () { return this.get_preferred_width.apply(this, arguments); }
            },
            "getPreviousSibling": {
              "value": function () { return this.get_previous_sibling.apply(this, arguments); }
            },
            "getReactive": {
              "value": function () { return this.get_reactive.apply(this, arguments); }
            },
            "getRequestMode": {
              "value": function () { return this.get_request_mode.apply(this, arguments); }
            },
            "getRotation": {
              "value": function () { return this.get_rotation.apply(this, arguments); }
            },
            "getRotationAngle": {
              "value": function () { return this.get_rotation_angle.apply(this, arguments); }
            },
            "getScale": {
              "value": function () { return this.get_scale.apply(this, arguments); }
            },
            "getScaleCenter": {
              "value": function () { return this.get_scale_center.apply(this, arguments); }
            },
            "getScaleGravity": {
              "value": function () { return this.get_scale_gravity.apply(this, arguments); }
            },
            "getScaleZ": {
              "value": function () { return this.get_scale_z.apply(this, arguments); }
            },
            "getShader": {
              "value": function () { return this.get_shader.apply(this, arguments); }
            },
            "getSize": {
              "value": function () { return this.get_size.apply(this, arguments); }
            },
            "getStage": {
              "value": function () { return this.get_stage.apply(this, arguments); }
            },
            "getTextDirection": {
              "value": function () { return this.get_text_direction.apply(this, arguments); }
            },
            "getTransform": {
              "value": function () { return this.get_transform.apply(this, arguments); }
            },
            "getTransformationMatrix": {
              "value": function () { return this.get_transformation_matrix.apply(this, arguments); }
            },
            "getTransformedPaintVolume": {
              "value": function () { return this.get_transformed_paint_volume.apply(this, arguments); }
            },
            "getTransformedPosition": {
              "value": function () { return this.get_transformed_position.apply(this, arguments); }
            },
            "getTransformedSize": {
              "value": function () { return this.get_transformed_size.apply(this, arguments); }
            },
            "getTransition": {
              "value": function () { return this.get_transition.apply(this, arguments); }
            },
            "getTranslation": {
              "value": function () { return this.get_translation.apply(this, arguments); }
            },
            "getWidth": {
              "value": function () { return this.get_width.apply(this, arguments); }
            },
            "getX": {
              "value": function () { return this.get_x.apply(this, arguments); }
            },
            "getXAlign": {
              "value": function () { return this.get_x_align.apply(this, arguments); }
            },
            "getXExpand": {
              "value": function () { return this.get_x_expand.apply(this, arguments); }
            },
            "getY": {
              "value": function () { return this.get_y.apply(this, arguments); }
            },
            "getYAlign": {
              "value": function () { return this.get_y_align.apply(this, arguments); }
            },
            "getYExpand": {
              "value": function () { return this.get_y_expand.apply(this, arguments); }
            },
            "getZPosition": {
              "value": function () { return this.get_z_position.apply(this, arguments); }
            },
            "getZRotationGravity": {
              "value": function () { return this.get_z_rotation_gravity.apply(this, arguments); }
            },
            "grabKeyFocus": {
              "value": function () { return this.grab_key_focus.apply(this, arguments); }
            },
            "hasActions": {
              "value": function () { return this.has_actions.apply(this, arguments); }
            },
            "hasAllocation": {
              "value": function () { return this.has_allocation.apply(this, arguments); }
            },
            "hasClip": {
              "get": function () { return this.has_clip; },
              "set": function (value) { this.has_clip = value; }
            },
            "hasConstraints": {
              "value": function () { return this.has_constraints.apply(this, arguments); }
            },
            "hasEffects": {
              "value": function () { return this.has_effects.apply(this, arguments); }
            },
            "hasKeyFocus": {
              "value": function () { return this.has_key_focus.apply(this, arguments); }
            },
            "hasOverlaps": {
              "value": function () { return this.has_overlaps.apply(this, arguments); }
            },
            "hasPointer": {
              "get": function () { return this.has_pointer; },
              "set": function (value) { this.has_pointer = value; }
            },
            "hideAll": {
              "value": function () { return this.hide_all.apply(this, arguments); }
            },
            "insertChildAbove": {
              "value": function () { return this.insert_child_above.apply(this, arguments); }
            },
            "insertChildAtIndex": {
              "value": function () { return this.insert_child_at_index.apply(this, arguments); }
            },
            "insertChildBelow": {
              "value": function () { return this.insert_child_below.apply(this, arguments); }
            },
            "isInClonePaint": {
              "value": function () { return this.is_in_clone_paint.apply(this, arguments); }
            },
            "isMapped": {
              "value": function () { return this.is_mapped.apply(this, arguments); }
            },
            "isRealized": {
              "value": function () { return this.is_realized.apply(this, arguments); }
            },
            "isRotated": {
              "value": function () { return this.is_rotated.apply(this, arguments); }
            },
            "isScaled": {
              "value": function () { return this.is_scaled.apply(this, arguments); }
            },
            "isVisible": {
              "value": function () { return this.is_visible.apply(this, arguments); }
            },
            "lowerBottom": {
              "value": function () { return this.lower_bottom.apply(this, arguments); }
            },
            "moveAnchorPoint": {
              "value": function () { return this.move_anchor_point.apply(this, arguments); }
            },
            "moveAnchorPointFromGravity": {
              "value": function () { return this.move_anchor_point_from_gravity.apply(this, arguments); }
            },
            "moveBy": {
              "value": function () { return this.move_by.apply(this, arguments); }
            },
            "needsExpand": {
              "value": function () { return this.needs_expand.apply(this, arguments); }
            },
            "popInternal": {
              "value": function () { return this.pop_internal.apply(this, arguments); }
            },
            "pushInternal": {
              "value": function () { return this.push_internal.apply(this, arguments); }
            },
            "queueRedraw": {
              "value": function () { return this.queue_redraw.apply(this, arguments); }
            },
            "queueRedrawWithClip": {
              "value": function () { return this.queue_redraw_with_clip.apply(this, arguments); }
            },
            "queueRelayout": {
              "value": function () { return this.queue_relayout.apply(this, arguments); }
            },
            "raiseTop": {
              "value": function () { return this.raise_top.apply(this, arguments); }
            },
            "removeAction": {
              "value": function () { return this.remove_action.apply(this, arguments); }
            },
            "removeActionByName": {
              "value": function () { return this.remove_action_by_name.apply(this, arguments); }
            },
            "removeAllChildren": {
              "value": function () { return this.remove_all_children.apply(this, arguments); }
            },
            "removeAllTransitions": {
              "value": function () { return this.remove_all_transitions.apply(this, arguments); }
            },
            "removeChild": {
              "value": function () { return this.remove_child.apply(this, arguments); }
            },
            "removeClip": {
              "value": function () { return this.remove_clip.apply(this, arguments); }
            },
            "removeConstraint": {
              "value": function () { return this.remove_constraint.apply(this, arguments); }
            },
            "removeConstraintByName": {
              "value": function () { return this.remove_constraint_by_name.apply(this, arguments); }
            },
            "removeEffect": {
              "value": function () { return this.remove_effect.apply(this, arguments); }
            },
            "removeEffectByName": {
              "value": function () { return this.remove_effect_by_name.apply(this, arguments); }
            },
            "removeTransition": {
              "value": function () { return this.remove_transition.apply(this, arguments); }
            },
            "replaceChild": {
              "value": function () { return this.replace_child.apply(this, arguments); }
            },
            "restoreEasingState": {
              "value": function () { return this.restore_easing_state.apply(this, arguments); }
            },
            "saveEasingState": {
              "value": function () { return this.save_easing_state.apply(this, arguments); }
            },
            "setAllocation": {
              "value": function () { return this.set_allocation.apply(this, arguments); }
            },
            "setAnchorPoint": {
              "value": function () { return this.set_anchor_point.apply(this, arguments); }
            },
            "setAnchorPointFromGravity": {
              "value": function () { return this.set_anchor_point_from_gravity.apply(this, arguments); }
            },
            "setBackgroundColor": {
              "value": function () { return this.set_background_color.apply(this, arguments); }
            },
            "setChildAboveSibling": {
              "value": function () { return this.set_child_above_sibling.apply(this, arguments); }
            },
            "setChildAtIndex": {
              "value": function () { return this.set_child_at_index.apply(this, arguments); }
            },
            "setChildBelowSibling": {
              "value": function () { return this.set_child_below_sibling.apply(this, arguments); }
            },
            "setChildTransform": {
              "value": function () { return this.set_child_transform.apply(this, arguments); }
            },
            "setClip": {
              "value": function () { return this.set_clip.apply(this, arguments); }
            },
            "setClipToAllocation": {
              "value": function () { return this.set_clip_to_allocation.apply(this, arguments); }
            },
            "setContent": {
              "value": function () { return this.set_content.apply(this, arguments); }
            },
            "setContentGravity": {
              "value": function () { return this.set_content_gravity.apply(this, arguments); }
            },
            "setContentRepeat": {
              "value": function () { return this.set_content_repeat.apply(this, arguments); }
            },
            "setContentScalingFilters": {
              "value": function () { return this.set_content_scaling_filters.apply(this, arguments); }
            },
            "setDepth": {
              "value": function () { return this.set_depth.apply(this, arguments); }
            },
            "setEasingDelay": {
              "value": function () { return this.set_easing_delay.apply(this, arguments); }
            },
            "setEasingDuration": {
              "value": function () { return this.set_easing_duration.apply(this, arguments); }
            },
            "setEasingMode": {
              "value": function () { return this.set_easing_mode.apply(this, arguments); }
            },
            "setFixedPositionSet": {
              "value": function () { return this.set_fixed_position_set.apply(this, arguments); }
            },
            "setFlags": {
              "value": function () { return this.set_flags.apply(this, arguments); }
            },
            "setGeometry": {
              "value": function () { return this.set_geometry.apply(this, arguments); }
            },
            "setHeight": {
              "value": function () { return this.set_height.apply(this, arguments); }
            },
            "setLayoutManager": {
              "value": function () { return this.set_layout_manager.apply(this, arguments); }
            },
            "setMargin": {
              "value": function () { return this.set_margin.apply(this, arguments); }
            },
            "setMarginBottom": {
              "value": function () { return this.set_margin_bottom.apply(this, arguments); }
            },
            "setMarginLeft": {
              "value": function () { return this.set_margin_left.apply(this, arguments); }
            },
            "setMarginRight": {
              "value": function () { return this.set_margin_right.apply(this, arguments); }
            },
            "setMarginTop": {
              "value": function () { return this.set_margin_top.apply(this, arguments); }
            },
            "setName": {
              "value": function () { return this.set_name.apply(this, arguments); }
            },
            "setOffscreenRedirect": {
              "value": function () { return this.set_offscreen_redirect.apply(this, arguments); }
            },
            "setOpacity": {
              "value": function () { return this.set_opacity.apply(this, arguments); }
            },
            "setParent": {
              "value": function () { return this.set_parent.apply(this, arguments); }
            },
            "setPivotPoint": {
              "value": function () { return this.set_pivot_point.apply(this, arguments); }
            },
            "setPivotPointZ": {
              "value": function () { return this.set_pivot_point_z.apply(this, arguments); }
            },
            "setPosition": {
              "value": function () { return this.set_position.apply(this, arguments); }
            },
            "setReactive": {
              "value": function () { return this.set_reactive.apply(this, arguments); }
            },
            "setRequestMode": {
              "value": function () { return this.set_request_mode.apply(this, arguments); }
            },
            "setRotation": {
              "value": function () { return this.set_rotation.apply(this, arguments); }
            },
            "setRotationAngle": {
              "value": function () { return this.set_rotation_angle.apply(this, arguments); }
            },
            "setScale": {
              "value": function () { return this.set_scale.apply(this, arguments); }
            },
            "setScaleFull": {
              "value": function () { return this.set_scale_full.apply(this, arguments); }
            },
            "setScaleWithGravity": {
              "value": function () { return this.set_scale_with_gravity.apply(this, arguments); }
            },
            "setScaleZ": {
              "value": function () { return this.set_scale_z.apply(this, arguments); }
            },
            "setShader": {
              "value": function () { return this.set_shader.apply(this, arguments); }
            },
            "setShaderParam": {
              "value": function () { return this.set_shader_param.apply(this, arguments); }
            },
            "setShaderParamFloat": {
              "value": function () { return this.set_shader_param_float.apply(this, arguments); }
            },
            "setShaderParamInt": {
              "value": function () { return this.set_shader_param_int.apply(this, arguments); }
            },
            "setSize": {
              "value": function () { return this.set_size.apply(this, arguments); }
            },
            "setTextDirection": {
              "value": function () { return this.set_text_direction.apply(this, arguments); }
            },
            "setTransform": {
              "value": function () { return this.set_transform.apply(this, arguments); }
            },
            "setTranslation": {
              "value": function () { return this.set_translation.apply(this, arguments); }
            },
            "setWidth": {
              "value": function () { return this.set_width.apply(this, arguments); }
            },
            "setX": {
              "value": function () { return this.set_x.apply(this, arguments); }
            },
            "setXAlign": {
              "value": function () { return this.set_x_align.apply(this, arguments); }
            },
            "setXExpand": {
              "value": function () { return this.set_x_expand.apply(this, arguments); }
            },
            "setY": {
              "value": function () { return this.set_y.apply(this, arguments); }
            },
            "setYAlign": {
              "value": function () { return this.set_y_align.apply(this, arguments); }
            },
            "setYExpand": {
              "value": function () { return this.set_y_expand.apply(this, arguments); }
            },
            "setZPosition": {
              "value": function () { return this.set_z_position.apply(this, arguments); }
            },
            "setZRotationFromGravity": {
              "value": function () { return this.set_z_rotation_from_gravity.apply(this, arguments); }
            },
            "shouldPickPaint": {
              "value": function () { return this.should_pick_paint.apply(this, arguments); }
            },
            "showAll": {
              "value": function () { return this.show_all.apply(this, arguments); }
            },
            "transformStagePoint": {
              "value": function () { return this.transform_stage_point.apply(this, arguments); }
            },
            "unsetFlags": {
              "value": function () { return this.unset_flags.apply(this, arguments); }
            },
            "anchorGravity": {
              "get": function () { return this.anchor_gravity; },
              "set": function (value) { this.anchor_gravity = value; }
            },
            "anchorX": {
              "get": function () { return this.anchor_x; },
              "set": function (value) { this.anchor_x = value; }
            },
            "anchorY": {
              "get": function () { return this.anchor_y; },
              "set": function (value) { this.anchor_y = value; }
            },
            "backgroundColor": {
              "get": function () { return this.background_color; },
              "set": function (value) { this.background_color = value; }
            },
            "backgroundColorSet": {
              "get": function () { return this.background_color_set; },
              "set": function (value) { this.background_color_set = value; }
            },
            "childTransform": {
              "get": function () { return this.child_transform; },
              "set": function (value) { this.child_transform = value; }
            },
            "childTransformSet": {
              "get": function () { return this.child_transform_set; },
              "set": function (value) { this.child_transform_set = value; }
            },
            "clipRect": {
              "get": function () { return this.clip_rect; },
              "set": function (value) { this.clip_rect = value; }
            },
            "clipToAllocation": {
              "get": function () { return this.clip_to_allocation; },
              "set": function (value) { this.clip_to_allocation = value; }
            },
            "contentBox": {
              "get": function () { return this.content_box; },
              "set": function (value) { this.content_box = value; }
            },
            "contentGravity": {
              "get": function () { return this.content_gravity; },
              "set": function (value) { this.content_gravity = value; }
            },
            "contentRepeat": {
              "get": function () { return this.content_repeat; },
              "set": function (value) { this.content_repeat = value; }
            },
            "firstChild": {
              "get": function () { return this.first_child; },
              "set": function (value) { this.first_child = value; }
            },
            "fixedPositionSet": {
              "get": function () { return this.fixed_position_set; },
              "set": function (value) { this.fixed_position_set = value; }
            },
            "fixedX": {
              "get": function () { return this.fixed_x; },
              "set": function (value) { this.fixed_x = value; }
            },
            "fixedY": {
              "get": function () { return this.fixed_y; },
              "set": function (value) { this.fixed_y = value; }
            },
            "lastChild": {
              "get": function () { return this.last_child; },
              "set": function (value) { this.last_child = value; }
            },
            "layoutManager": {
              "get": function () { return this.layout_manager; },
              "set": function (value) { this.layout_manager = value; }
            },
            "magnificationFilter": {
              "get": function () { return this.magnification_filter; },
              "set": function (value) { this.magnification_filter = value; }
            },
            "marginBottom": {
              "get": function () { return this.margin_bottom; },
              "set": function (value) { this.margin_bottom = value; }
            },
            "marginLeft": {
              "get": function () { return this.margin_left; },
              "set": function (value) { this.margin_left = value; }
            },
            "marginRight": {
              "get": function () { return this.margin_right; },
              "set": function (value) { this.margin_right = value; }
            },
            "marginTop": {
              "get": function () { return this.margin_top; },
              "set": function (value) { this.margin_top = value; }
            },
            "minHeight": {
              "get": function () { return this.min_height; },
              "set": function (value) { this.min_height = value; }
            },
            "minHeightSet": {
              "get": function () { return this.min_height_set; },
              "set": function (value) { this.min_height_set = value; }
            },
            "minWidth": {
              "get": function () { return this.min_width; },
              "set": function (value) { this.min_width = value; }
            },
            "minWidthSet": {
              "get": function () { return this.min_width_set; },
              "set": function (value) { this.min_width_set = value; }
            },
            "minificationFilter": {
              "get": function () { return this.minification_filter; },
              "set": function (value) { this.minification_filter = value; }
            },
            "naturalHeight": {
              "get": function () { return this.natural_height; },
              "set": function (value) { this.natural_height = value; }
            },
            "naturalHeightSet": {
              "get": function () { return this.natural_height_set; },
              "set": function (value) { this.natural_height_set = value; }
            },
            "naturalWidth": {
              "get": function () { return this.natural_width; },
              "set": function (value) { this.natural_width = value; }
            },
            "naturalWidthSet": {
              "get": function () { return this.natural_width_set; },
              "set": function (value) { this.natural_width_set = value; }
            },
            "offscreenRedirect": {
              "get": function () { return this.offscreen_redirect; },
              "set": function (value) { this.offscreen_redirect = value; }
            },
            "pivotPoint": {
              "get": function () { return this.pivot_point; },
              "set": function (value) { this.pivot_point = value; }
            },
            "pivotPointZ": {
              "get": function () { return this.pivot_point_z; },
              "set": function (value) { this.pivot_point_z = value; }
            },
            "requestMode": {
              "get": function () { return this.request_mode; },
              "set": function (value) { this.request_mode = value; }
            },
            "rotationAngleX": {
              "get": function () { return this.rotation_angle_x; },
              "set": function (value) { this.rotation_angle_x = value; }
            },
            "rotationAngleY": {
              "get": function () { return this.rotation_angle_y; },
              "set": function (value) { this.rotation_angle_y = value; }
            },
            "rotationAngleZ": {
              "get": function () { return this.rotation_angle_z; },
              "set": function (value) { this.rotation_angle_z = value; }
            },
            "rotationCenterX": {
              "get": function () { return this.rotation_center_x; },
              "set": function (value) { this.rotation_center_x = value; }
            },
            "rotationCenterY": {
              "get": function () { return this.rotation_center_y; },
              "set": function (value) { this.rotation_center_y = value; }
            },
            "rotationCenterZ": {
              "get": function () { return this.rotation_center_z; },
              "set": function (value) { this.rotation_center_z = value; }
            },
            "rotationCenterZGravity": {
              "get": function () { return this.rotation_center_z_gravity; },
              "set": function (value) { this.rotation_center_z_gravity = value; }
            },
            "scaleCenterX": {
              "get": function () { return this.scale_center_x; },
              "set": function (value) { this.scale_center_x = value; }
            },
            "scaleCenterY": {
              "get": function () { return this.scale_center_y; },
              "set": function (value) { this.scale_center_y = value; }
            },
            "scaleGravity": {
              "get": function () { return this.scale_gravity; },
              "set": function (value) { this.scale_gravity = value; }
            },
            "scaleX": {
              "get": function () { return this.scale_x; },
              "set": function (value) { this.scale_x = value; }
            },
            "scaleY": {
              "get": function () { return this.scale_y; },
              "set": function (value) { this.scale_y = value; }
            },
            "scaleZ": {
              "get": function () { return this.scale_z; },
              "set": function (value) { this.scale_z = value; }
            },
            "showOnSetParent": {
              "get": function () { return this.show_on_set_parent; },
              "set": function (value) { this.show_on_set_parent = value; }
            },
            "textDirection": {
              "get": function () { return this.text_direction; },
              "set": function (value) { this.text_direction = value; }
            },
            "transformSet": {
              "get": function () { return this.transform_set; },
              "set": function (value) { this.transform_set = value; }
            },
            "translationX": {
              "get": function () { return this.translation_x; },
              "set": function (value) { this.translation_x = value; }
            },
            "translationY": {
              "get": function () { return this.translation_y; },
              "set": function (value) { this.translation_y = value; }
            },
            "translationZ": {
              "get": function () { return this.translation_z; },
              "set": function (value) { this.translation_z = value; }
            },
            "xAlign": {
              "get": function () { return this.x_align; },
              "set": function (value) { this.x_align = value; }
            },
            "xExpand": {
              "get": function () { return this.x_expand; },
              "set": function (value) { this.x_expand = value; }
            },
            "yAlign": {
              "get": function () { return this.y_align; },
              "set": function (value) { this.y_align = value; }
            },
            "yExpand": {
              "get": function () { return this.y_expand; },
              "set": function (value) { this.y_expand = value; }
            },
            "zPosition": {
              "get": function () { return this.z_position; },
              "set": function (value) { this.z_position = value; }
            }
          },
          "static": {}
        },
        "ActorMeta": {
          "prototype": {
            "getActor": {
              "value": function () { return this.get_actor.apply(this, arguments); }
            },
            "getEnabled": {
              "value": function () { return this.get_enabled.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "setEnabled": {
              "value": function () { return this.set_enabled.apply(this, arguments); }
            },
            "setName": {
              "value": function () { return this.set_name.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "AlignConstraint": {
          "prototype": {
            "getAlignAxis": {
              "value": function () { return this.get_align_axis.apply(this, arguments); }
            },
            "getFactor": {
              "value": function () { return this.get_factor.apply(this, arguments); }
            },
            "getSource": {
              "value": function () { return this.get_source.apply(this, arguments); }
            },
            "setAlignAxis": {
              "value": function () { return this.set_align_axis.apply(this, arguments); }
            },
            "setFactor": {
              "value": function () { return this.set_factor.apply(this, arguments); }
            },
            "setSource": {
              "value": function () { return this.set_source.apply(this, arguments); }
            },
            "alignAxis": {
              "get": function () { return this.align_axis; },
              "set": function (value) { this.align_axis = value; }
            }
          },
          "static": {}
        },
        "Alpha": {
          "prototype": {
            "getAlpha": {
              "value": function () { return this.get_alpha.apply(this, arguments); }
            },
            "getMode": {
              "value": function () { return this.get_mode.apply(this, arguments); }
            },
            "getTimeline": {
              "value": function () { return this.get_timeline.apply(this, arguments); }
            },
            "setClosure": {
              "value": function () { return this.set_closure.apply(this, arguments); }
            },
            "setFunc": {
              "value": function () { return this.set_func.apply(this, arguments); }
            },
            "setMode": {
              "value": function () { return this.set_mode.apply(this, arguments); }
            },
            "setTimeline": {
              "value": function () { return this.set_timeline.apply(this, arguments); }
            }
          },
          "static": {
            "registerClosure": {
              "value": function () { return this.register_closure.apply(this, arguments); }
            },
            "registerFunc": {
              "value": function () { return this.register_func.apply(this, arguments); }
            }
          }
        },
        "Animation": {
          "prototype": {
            "bindInterval": {
              "value": function () { return this.bind_interval.apply(this, arguments); }
            },
            "getAlpha": {
              "value": function () { return this.get_alpha.apply(this, arguments); }
            },
            "getDuration": {
              "value": function () { return this.get_duration.apply(this, arguments); }
            },
            "getInterval": {
              "value": function () { return this.get_interval.apply(this, arguments); }
            },
            "getLoop": {
              "value": function () { return this.get_loop.apply(this, arguments); }
            },
            "getMode": {
              "value": function () { return this.get_mode.apply(this, arguments); }
            },
            "getObject": {
              "value": function () { return this.get_object.apply(this, arguments); }
            },
            "getTimeline": {
              "value": function () { return this.get_timeline.apply(this, arguments); }
            },
            "hasProperty": {
              "value": function () { return this.has_property.apply(this, arguments); }
            },
            "setAlpha": {
              "value": function () { return this.set_alpha.apply(this, arguments); }
            },
            "setDuration": {
              "value": function () { return this.set_duration.apply(this, arguments); }
            },
            "setLoop": {
              "value": function () { return this.set_loop.apply(this, arguments); }
            },
            "setMode": {
              "value": function () { return this.set_mode.apply(this, arguments); }
            },
            "setObject": {
              "value": function () { return this.set_object.apply(this, arguments); }
            },
            "setTimeline": {
              "value": function () { return this.set_timeline.apply(this, arguments); }
            },
            "unbindProperty": {
              "value": function () { return this.unbind_property.apply(this, arguments); }
            },
            "updateInterval": {
              "value": function () { return this.update_interval.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Animator": {
          "prototype": {
            "computeValue": {
              "value": function () { return this.compute_value.apply(this, arguments); }
            },
            "getDuration": {
              "value": function () { return this.get_duration.apply(this, arguments); }
            },
            "getKeys": {
              "value": function () { return this.get_keys.apply(this, arguments); }
            },
            "getTimeline": {
              "value": function () { return this.get_timeline.apply(this, arguments); }
            },
            "propertyGetEaseIn": {
              "value": function () { return this.property_get_ease_in.apply(this, arguments); }
            },
            "propertyGetInterpolation": {
              "value": function () { return this.property_get_interpolation.apply(this, arguments); }
            },
            "propertySetEaseIn": {
              "value": function () { return this.property_set_ease_in.apply(this, arguments); }
            },
            "propertySetInterpolation": {
              "value": function () { return this.property_set_interpolation.apply(this, arguments); }
            },
            "removeKey": {
              "value": function () { return this.remove_key.apply(this, arguments); }
            },
            "setDuration": {
              "value": function () { return this.set_duration.apply(this, arguments); }
            },
            "setKey": {
              "value": function () { return this.set_key.apply(this, arguments); }
            },
            "setTimeline": {
              "value": function () { return this.set_timeline.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Backend": {
          "prototype": {
            "getDoubleClickDistance": {
              "value": function () { return this.get_double_click_distance.apply(this, arguments); }
            },
            "getDoubleClickTime": {
              "value": function () { return this.get_double_click_time.apply(this, arguments); }
            },
            "getFontName": {
              "value": function () { return this.get_font_name.apply(this, arguments); }
            },
            "getFontOptions": {
              "value": function () { return this.get_font_options.apply(this, arguments); }
            },
            "getResolution": {
              "value": function () { return this.get_resolution.apply(this, arguments); }
            },
            "setDoubleClickDistance": {
              "value": function () { return this.set_double_click_distance.apply(this, arguments); }
            },
            "setDoubleClickTime": {
              "value": function () { return this.set_double_click_time.apply(this, arguments); }
            },
            "setFontName": {
              "value": function () { return this.set_font_name.apply(this, arguments); }
            },
            "setFontOptions": {
              "value": function () { return this.set_font_options.apply(this, arguments); }
            },
            "setResolution": {
              "value": function () { return this.set_resolution.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Behaviour": {
          "prototype": {
            "actorsForeach": {
              "value": function () { return this.actors_foreach.apply(this, arguments); }
            },
            "getActors": {
              "value": function () { return this.get_actors.apply(this, arguments); }
            },
            "getAlpha": {
              "value": function () { return this.get_alpha.apply(this, arguments); }
            },
            "getNActors": {
              "value": function () { return this.get_n_actors.apply(this, arguments); }
            },
            "getNthActor": {
              "value": function () { return this.get_nth_actor.apply(this, arguments); }
            },
            "isApplied": {
              "value": function () { return this.is_applied.apply(this, arguments); }
            },
            "removeAll": {
              "value": function () { return this.remove_all.apply(this, arguments); }
            },
            "setAlpha": {
              "value": function () { return this.set_alpha.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "BehaviourDepth": {
          "prototype": {
            "getBounds": {
              "value": function () { return this.get_bounds.apply(this, arguments); }
            },
            "setBounds": {
              "value": function () { return this.set_bounds.apply(this, arguments); }
            },
            "depthEnd": {
              "get": function () { return this.depth_end; },
              "set": function (value) { this.depth_end = value; }
            },
            "depthStart": {
              "get": function () { return this.depth_start; },
              "set": function (value) { this.depth_start = value; }
            }
          },
          "static": {}
        },
        "BehaviourEllipse": {
          "prototype": {
            "getAngleEnd": {
              "value": function () { return this.get_angle_end.apply(this, arguments); }
            },
            "getAngleStart": {
              "value": function () { return this.get_angle_start.apply(this, arguments); }
            },
            "getAngleTilt": {
              "value": function () { return this.get_angle_tilt.apply(this, arguments); }
            },
            "getCenter": {
              "value": function () { return this.get_center.apply(this, arguments); }
            },
            "getDirection": {
              "value": function () { return this.get_direction.apply(this, arguments); }
            },
            "getHeight": {
              "value": function () { return this.get_height.apply(this, arguments); }
            },
            "getTilt": {
              "value": function () { return this.get_tilt.apply(this, arguments); }
            },
            "getWidth": {
              "value": function () { return this.get_width.apply(this, arguments); }
            },
            "setAngleEnd": {
              "value": function () { return this.set_angle_end.apply(this, arguments); }
            },
            "setAngleStart": {
              "value": function () { return this.set_angle_start.apply(this, arguments); }
            },
            "setAngleTilt": {
              "value": function () { return this.set_angle_tilt.apply(this, arguments); }
            },
            "setCenter": {
              "value": function () { return this.set_center.apply(this, arguments); }
            },
            "setDirection": {
              "value": function () { return this.set_direction.apply(this, arguments); }
            },
            "setHeight": {
              "value": function () { return this.set_height.apply(this, arguments); }
            },
            "setTilt": {
              "value": function () { return this.set_tilt.apply(this, arguments); }
            },
            "setWidth": {
              "value": function () { return this.set_width.apply(this, arguments); }
            },
            "angleEnd": {
              "get": function () { return this.angle_end; },
              "set": function (value) { this.angle_end = value; }
            },
            "angleStart": {
              "get": function () { return this.angle_start; },
              "set": function (value) { this.angle_start = value; }
            },
            "angleTiltX": {
              "get": function () { return this.angle_tilt_x; },
              "set": function (value) { this.angle_tilt_x = value; }
            },
            "angleTiltY": {
              "get": function () { return this.angle_tilt_y; },
              "set": function (value) { this.angle_tilt_y = value; }
            },
            "angleTiltZ": {
              "get": function () { return this.angle_tilt_z; },
              "set": function (value) { this.angle_tilt_z = value; }
            }
          },
          "static": {}
        },
        "BehaviourOpacity": {
          "prototype": {
            "getBounds": {
              "value": function () { return this.get_bounds.apply(this, arguments); }
            },
            "setBounds": {
              "value": function () { return this.set_bounds.apply(this, arguments); }
            },
            "opacityEnd": {
              "get": function () { return this.opacity_end; },
              "set": function (value) { this.opacity_end = value; }
            },
            "opacityStart": {
              "get": function () { return this.opacity_start; },
              "set": function (value) { this.opacity_start = value; }
            }
          },
          "static": {}
        },
        "BehaviourPath": {
          "prototype": {
            "getPath": {
              "value": function () { return this.get_path.apply(this, arguments); }
            },
            "setPath": {
              "value": function () { return this.set_path.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "BehaviourRotate": {
          "prototype": {
            "getAxis": {
              "value": function () { return this.get_axis.apply(this, arguments); }
            },
            "getBounds": {
              "value": function () { return this.get_bounds.apply(this, arguments); }
            },
            "getCenter": {
              "value": function () { return this.get_center.apply(this, arguments); }
            },
            "getDirection": {
              "value": function () { return this.get_direction.apply(this, arguments); }
            },
            "setAxis": {
              "value": function () { return this.set_axis.apply(this, arguments); }
            },
            "setBounds": {
              "value": function () { return this.set_bounds.apply(this, arguments); }
            },
            "setCenter": {
              "value": function () { return this.set_center.apply(this, arguments); }
            },
            "setDirection": {
              "value": function () { return this.set_direction.apply(this, arguments); }
            },
            "angleEnd": {
              "get": function () { return this.angle_end; },
              "set": function (value) { this.angle_end = value; }
            },
            "angleStart": {
              "get": function () { return this.angle_start; },
              "set": function (value) { this.angle_start = value; }
            },
            "centerX": {
              "get": function () { return this.center_x; },
              "set": function (value) { this.center_x = value; }
            },
            "centerY": {
              "get": function () { return this.center_y; },
              "set": function (value) { this.center_y = value; }
            },
            "centerZ": {
              "get": function () { return this.center_z; },
              "set": function (value) { this.center_z = value; }
            }
          },
          "static": {}
        },
        "BehaviourScale": {
          "prototype": {
            "getBounds": {
              "value": function () { return this.get_bounds.apply(this, arguments); }
            },
            "setBounds": {
              "value": function () { return this.set_bounds.apply(this, arguments); }
            },
            "xScaleEnd": {
              "get": function () { return this.x_scale_end; },
              "set": function (value) { this.x_scale_end = value; }
            },
            "xScaleStart": {
              "get": function () { return this.x_scale_start; },
              "set": function (value) { this.x_scale_start = value; }
            },
            "yScaleEnd": {
              "get": function () { return this.y_scale_end; },
              "set": function (value) { this.y_scale_end = value; }
            },
            "yScaleStart": {
              "get": function () { return this.y_scale_start; },
              "set": function (value) { this.y_scale_start = value; }
            }
          },
          "static": {}
        },
        "BinLayout": {
          "prototype": {
            "getAlignment": {
              "value": function () { return this.get_alignment.apply(this, arguments); }
            },
            "setAlignment": {
              "value": function () { return this.set_alignment.apply(this, arguments); }
            },
            "xAlign": {
              "get": function () { return this.x_align; },
              "set": function (value) { this.x_align = value; }
            },
            "yAlign": {
              "get": function () { return this.y_align; },
              "set": function (value) { this.y_align = value; }
            }
          },
          "static": {}
        },
        "BindConstraint": {
          "prototype": {
            "getCoordinate": {
              "value": function () { return this.get_coordinate.apply(this, arguments); }
            },
            "getOffset": {
              "value": function () { return this.get_offset.apply(this, arguments); }
            },
            "getSource": {
              "value": function () { return this.get_source.apply(this, arguments); }
            },
            "setCoordinate": {
              "value": function () { return this.set_coordinate.apply(this, arguments); }
            },
            "setOffset": {
              "value": function () { return this.set_offset.apply(this, arguments); }
            },
            "setSource": {
              "value": function () { return this.set_source.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "BindingPool": {
          "prototype": {
            "blockAction": {
              "value": function () { return this.block_action.apply(this, arguments); }
            },
            "findAction": {
              "value": function () { return this.find_action.apply(this, arguments); }
            },
            "installAction": {
              "value": function () { return this.install_action.apply(this, arguments); }
            },
            "installClosure": {
              "value": function () { return this.install_closure.apply(this, arguments); }
            },
            "overrideAction": {
              "value": function () { return this.override_action.apply(this, arguments); }
            },
            "overrideClosure": {
              "value": function () { return this.override_closure.apply(this, arguments); }
            },
            "removeAction": {
              "value": function () { return this.remove_action.apply(this, arguments); }
            },
            "unblockAction": {
              "value": function () { return this.unblock_action.apply(this, arguments); }
            }
          },
          "static": {
            "getForClass": {
              "value": function () { return this.get_for_class.apply(this, arguments); }
            }
          }
        },
        "BlurEffect": {
          "prototype": {},
          "static": {}
        },
        "Box": {
          "prototype": {
            "getColor": {
              "value": function () { return this.get_color.apply(this, arguments); }
            },
            "getLayoutManager": {
              "value": function () { return this.get_layout_manager.apply(this, arguments); }
            },
            "packAfter": {
              "value": function () { return this.pack_after.apply(this, arguments); }
            },
            "packAt": {
              "value": function () { return this.pack_at.apply(this, arguments); }
            },
            "packBefore": {
              "value": function () { return this.pack_before.apply(this, arguments); }
            },
            "setColor": {
              "value": function () { return this.set_color.apply(this, arguments); }
            },
            "setLayoutManager": {
              "value": function () { return this.set_layout_manager.apply(this, arguments); }
            },
            "colorSet": {
              "get": function () { return this.color_set; },
              "set": function (value) { this.color_set = value; }
            }
          },
          "static": {}
        },
        "BoxLayout": {
          "prototype": {
            "getAlignment": {
              "value": function () { return this.get_alignment.apply(this, arguments); }
            },
            "getEasingDuration": {
              "value": function () { return this.get_easing_duration.apply(this, arguments); }
            },
            "getEasingMode": {
              "value": function () { return this.get_easing_mode.apply(this, arguments); }
            },
            "getExpand": {
              "value": function () { return this.get_expand.apply(this, arguments); }
            },
            "getFill": {
              "value": function () { return this.get_fill.apply(this, arguments); }
            },
            "getHomogeneous": {
              "value": function () { return this.get_homogeneous.apply(this, arguments); }
            },
            "getOrientation": {
              "value": function () { return this.get_orientation.apply(this, arguments); }
            },
            "getPackStart": {
              "value": function () { return this.get_pack_start.apply(this, arguments); }
            },
            "getSpacing": {
              "value": function () { return this.get_spacing.apply(this, arguments); }
            },
            "getUseAnimations": {
              "value": function () { return this.get_use_animations.apply(this, arguments); }
            },
            "getVertical": {
              "value": function () { return this.get_vertical.apply(this, arguments); }
            },
            "setAlignment": {
              "value": function () { return this.set_alignment.apply(this, arguments); }
            },
            "setEasingDuration": {
              "value": function () { return this.set_easing_duration.apply(this, arguments); }
            },
            "setEasingMode": {
              "value": function () { return this.set_easing_mode.apply(this, arguments); }
            },
            "setExpand": {
              "value": function () { return this.set_expand.apply(this, arguments); }
            },
            "setFill": {
              "value": function () { return this.set_fill.apply(this, arguments); }
            },
            "setHomogeneous": {
              "value": function () { return this.set_homogeneous.apply(this, arguments); }
            },
            "setOrientation": {
              "value": function () { return this.set_orientation.apply(this, arguments); }
            },
            "setPackStart": {
              "value": function () { return this.set_pack_start.apply(this, arguments); }
            },
            "setSpacing": {
              "value": function () { return this.set_spacing.apply(this, arguments); }
            },
            "setUseAnimations": {
              "value": function () { return this.set_use_animations.apply(this, arguments); }
            },
            "setVertical": {
              "value": function () { return this.set_vertical.apply(this, arguments); }
            },
            "easingDuration": {
              "get": function () { return this.easing_duration; },
              "set": function (value) { this.easing_duration = value; }
            },
            "easingMode": {
              "get": function () { return this.easing_mode; },
              "set": function (value) { this.easing_mode = value; }
            },
            "packStart": {
              "get": function () { return this.pack_start; },
              "set": function (value) { this.pack_start = value; }
            },
            "useAnimations": {
              "get": function () { return this.use_animations; },
              "set": function (value) { this.use_animations = value; }
            }
          },
          "static": {}
        },
        "BrightnessContrastEffect": {
          "prototype": {
            "getBrightness": {
              "value": function () { return this.get_brightness.apply(this, arguments); }
            },
            "getContrast": {
              "value": function () { return this.get_contrast.apply(this, arguments); }
            },
            "setBrightness": {
              "value": function () { return this.set_brightness.apply(this, arguments); }
            },
            "setBrightnessFull": {
              "value": function () { return this.set_brightness_full.apply(this, arguments); }
            },
            "setContrast": {
              "value": function () { return this.set_contrast.apply(this, arguments); }
            },
            "setContrastFull": {
              "value": function () { return this.set_contrast_full.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "CairoTexture": {
          "prototype": {
            "createRegion": {
              "value": function () { return this.create_region.apply(this, arguments); }
            },
            "getAutoResize": {
              "value": function () { return this.get_auto_resize.apply(this, arguments); }
            },
            "getSurfaceSize": {
              "value": function () { return this.get_surface_size.apply(this, arguments); }
            },
            "invalidateRectangle": {
              "value": function () { return this.invalidate_rectangle.apply(this, arguments); }
            },
            "setAutoResize": {
              "value": function () { return this.set_auto_resize.apply(this, arguments); }
            },
            "setSurfaceSize": {
              "value": function () { return this.set_surface_size.apply(this, arguments); }
            },
            "autoResize": {
              "get": function () { return this.auto_resize; },
              "set": function (value) { this.auto_resize = value; }
            },
            "surfaceHeight": {
              "get": function () { return this.surface_height; },
              "set": function (value) { this.surface_height = value; }
            },
            "surfaceWidth": {
              "get": function () { return this.surface_width; },
              "set": function (value) { this.surface_width = value; }
            }
          },
          "static": {}
        },
        "Canvas": {
          "prototype": {
            "getScaleFactor": {
              "value": function () { return this.get_scale_factor.apply(this, arguments); }
            },
            "setScaleFactor": {
              "value": function () { return this.set_scale_factor.apply(this, arguments); }
            },
            "setSize": {
              "value": function () { return this.set_size.apply(this, arguments); }
            },
            "scaleFactor": {
              "get": function () { return this.scale_factor; },
              "set": function (value) { this.scale_factor = value; }
            },
            "scaleFactorSet": {
              "get": function () { return this.scale_factor_set; },
              "set": function (value) { this.scale_factor_set = value; }
            }
          },
          "static": {}
        },
        "ChildMeta": {
          "prototype": {
            "getActor": {
              "value": function () { return this.get_actor.apply(this, arguments); }
            },
            "getContainer": {
              "value": function () { return this.get_container.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "ClickAction": {
          "prototype": {
            "getButton": {
              "value": function () { return this.get_button.apply(this, arguments); }
            },
            "getCoords": {
              "value": function () { return this.get_coords.apply(this, arguments); }
            },
            "getState": {
              "value": function () { return this.get_state.apply(this, arguments); }
            },
            "longPressDuration": {
              "get": function () { return this.long_press_duration; },
              "set": function (value) { this.long_press_duration = value; }
            },
            "longPressThreshold": {
              "get": function () { return this.long_press_threshold; },
              "set": function (value) { this.long_press_threshold = value; }
            }
          },
          "static": {}
        },
        "ClipNode": {
          "prototype": {},
          "static": {}
        },
        "Clone": {
          "prototype": {
            "getSource": {
              "value": function () { return this.get_source.apply(this, arguments); }
            },
            "setSource": {
              "value": function () { return this.set_source.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "ColorNode": {
          "prototype": {},
          "static": {}
        },
        "ColorizeEffect": {
          "prototype": {
            "getTint": {
              "value": function () { return this.get_tint.apply(this, arguments); }
            },
            "setTint": {
              "value": function () { return this.set_tint.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Constraint": {
          "prototype": {},
          "static": {}
        },
        "DeformEffect": {
          "prototype": {
            "getBackMaterial": {
              "value": function () { return this.get_back_material.apply(this, arguments); }
            },
            "getNTiles": {
              "value": function () { return this.get_n_tiles.apply(this, arguments); }
            },
            "setBackMaterial": {
              "value": function () { return this.set_back_material.apply(this, arguments); }
            },
            "setNTiles": {
              "value": function () { return this.set_n_tiles.apply(this, arguments); }
            },
            "backMaterial": {
              "get": function () { return this.back_material; },
              "set": function (value) { this.back_material = value; }
            },
            "xTiles": {
              "get": function () { return this.x_tiles; },
              "set": function (value) { this.x_tiles = value; }
            },
            "yTiles": {
              "get": function () { return this.y_tiles; },
              "set": function (value) { this.y_tiles = value; }
            }
          },
          "static": {}
        },
        "DesaturateEffect": {
          "prototype": {
            "getFactor": {
              "value": function () { return this.get_factor.apply(this, arguments); }
            },
            "setFactor": {
              "value": function () { return this.set_factor.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DeviceManager": {
          "prototype": {
            "getCoreDevice": {
              "value": function () { return this.get_core_device.apply(this, arguments); }
            },
            "getDevice": {
              "value": function () { return this.get_device.apply(this, arguments); }
            },
            "listDevices": {
              "value": function () { return this.list_devices.apply(this, arguments); }
            },
            "peekDevices": {
              "value": function () { return this.peek_devices.apply(this, arguments); }
            }
          },
          "static": {
            "getDefault": {
              "value": function () { return this.get_default.apply(this, arguments); }
            }
          }
        },
        "DragAction": {
          "prototype": {
            "getDragArea": {
              "value": function () { return this.get_drag_area.apply(this, arguments); }
            },
            "getDragAxis": {
              "value": function () { return this.get_drag_axis.apply(this, arguments); }
            },
            "getDragHandle": {
              "value": function () { return this.get_drag_handle.apply(this, arguments); }
            },
            "getDragThreshold": {
              "value": function () { return this.get_drag_threshold.apply(this, arguments); }
            },
            "getMotionCoords": {
              "value": function () { return this.get_motion_coords.apply(this, arguments); }
            },
            "getPressCoords": {
              "value": function () { return this.get_press_coords.apply(this, arguments); }
            },
            "setDragArea": {
              "value": function () { return this.set_drag_area.apply(this, arguments); }
            },
            "setDragAxis": {
              "value": function () { return this.set_drag_axis.apply(this, arguments); }
            },
            "setDragHandle": {
              "value": function () { return this.set_drag_handle.apply(this, arguments); }
            },
            "setDragThreshold": {
              "value": function () { return this.set_drag_threshold.apply(this, arguments); }
            },
            "dragArea": {
              "get": function () { return this.drag_area; },
              "set": function (value) { this.drag_area = value; }
            },
            "dragAreaSet": {
              "get": function () { return this.drag_area_set; },
              "set": function (value) { this.drag_area_set = value; }
            },
            "dragAxis": {
              "get": function () { return this.drag_axis; },
              "set": function (value) { this.drag_axis = value; }
            },
            "dragHandle": {
              "get": function () { return this.drag_handle; },
              "set": function (value) { this.drag_handle = value; }
            },
            "xDragThreshold": {
              "get": function () { return this.x_drag_threshold; },
              "set": function (value) { this.x_drag_threshold = value; }
            },
            "yDragThreshold": {
              "get": function () { return this.y_drag_threshold; },
              "set": function (value) { this.y_drag_threshold = value; }
            }
          },
          "static": {}
        },
        "DropAction": {
          "prototype": {},
          "static": {}
        },
        "Effect": {
          "prototype": {
            "queueRepaint": {
              "value": function () { return this.queue_repaint.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "FixedLayout": {
          "prototype": {},
          "static": {}
        },
        "FlowLayout": {
          "prototype": {
            "getColumnSpacing": {
              "value": function () { return this.get_column_spacing.apply(this, arguments); }
            },
            "getColumnWidth": {
              "value": function () { return this.get_column_width.apply(this, arguments); }
            },
            "getHomogeneous": {
              "value": function () { return this.get_homogeneous.apply(this, arguments); }
            },
            "getOrientation": {
              "value": function () { return this.get_orientation.apply(this, arguments); }
            },
            "getRowHeight": {
              "value": function () { return this.get_row_height.apply(this, arguments); }
            },
            "getRowSpacing": {
              "value": function () { return this.get_row_spacing.apply(this, arguments); }
            },
            "getSnapToGrid": {
              "value": function () { return this.get_snap_to_grid.apply(this, arguments); }
            },
            "setColumnSpacing": {
              "value": function () { return this.set_column_spacing.apply(this, arguments); }
            },
            "setColumnWidth": {
              "value": function () { return this.set_column_width.apply(this, arguments); }
            },
            "setHomogeneous": {
              "value": function () { return this.set_homogeneous.apply(this, arguments); }
            },
            "setOrientation": {
              "value": function () { return this.set_orientation.apply(this, arguments); }
            },
            "setRowHeight": {
              "value": function () { return this.set_row_height.apply(this, arguments); }
            },
            "setRowSpacing": {
              "value": function () { return this.set_row_spacing.apply(this, arguments); }
            },
            "setSnapToGrid": {
              "value": function () { return this.set_snap_to_grid.apply(this, arguments); }
            },
            "columnSpacing": {
              "get": function () { return this.column_spacing; },
              "set": function (value) { this.column_spacing = value; }
            },
            "maxColumnWidth": {
              "get": function () { return this.max_column_width; },
              "set": function (value) { this.max_column_width = value; }
            },
            "maxRowHeight": {
              "get": function () { return this.max_row_height; },
              "set": function (value) { this.max_row_height = value; }
            },
            "minColumnWidth": {
              "get": function () { return this.min_column_width; },
              "set": function (value) { this.min_column_width = value; }
            },
            "minRowHeight": {
              "get": function () { return this.min_row_height; },
              "set": function (value) { this.min_row_height = value; }
            },
            "rowSpacing": {
              "get": function () { return this.row_spacing; },
              "set": function (value) { this.row_spacing = value; }
            },
            "snapToGrid": {
              "get": function () { return this.snap_to_grid; },
              "set": function (value) { this.snap_to_grid = value; }
            }
          },
          "static": {}
        },
        "GestureAction": {
          "prototype": {
            "getDevice": {
              "value": function () { return this.get_device.apply(this, arguments); }
            },
            "getLastEvent": {
              "value": function () { return this.get_last_event.apply(this, arguments); }
            },
            "getMotionCoords": {
              "value": function () { return this.get_motion_coords.apply(this, arguments); }
            },
            "getMotionDelta": {
              "value": function () { return this.get_motion_delta.apply(this, arguments); }
            },
            "getNCurrentPoints": {
              "value": function () { return this.get_n_current_points.apply(this, arguments); }
            },
            "getNTouchPoints": {
              "value": function () { return this.get_n_touch_points.apply(this, arguments); }
            },
            "getPressCoords": {
              "value": function () { return this.get_press_coords.apply(this, arguments); }
            },
            "getReleaseCoords": {
              "value": function () { return this.get_release_coords.apply(this, arguments); }
            },
            "getSequence": {
              "value": function () { return this.get_sequence.apply(this, arguments); }
            },
            "getThresholdTriggerDistance": {
              "value": function () { return this.get_threshold_trigger_distance.apply(this, arguments); }
            },
            "getThresholdTriggerEdge": {
              "value": function () { return this.get_threshold_trigger_edge.apply(this, arguments); }
            },
            "getThresholdTriggerEgde": {
              "value": function () { return this.get_threshold_trigger_egde.apply(this, arguments); }
            },
            "getVelocity": {
              "value": function () { return this.get_velocity.apply(this, arguments); }
            },
            "setNTouchPoints": {
              "value": function () { return this.set_n_touch_points.apply(this, arguments); }
            },
            "setThresholdTriggerDistance": {
              "value": function () { return this.set_threshold_trigger_distance.apply(this, arguments); }
            },
            "setThresholdTriggerEdge": {
              "value": function () { return this.set_threshold_trigger_edge.apply(this, arguments); }
            },
            "nTouchPoints": {
              "get": function () { return this.n_touch_points; },
              "set": function (value) { this.n_touch_points = value; }
            },
            "thresholdTriggerDistanceX": {
              "get": function () { return this.threshold_trigger_distance_x; },
              "set": function (value) { this.threshold_trigger_distance_x = value; }
            },
            "thresholdTriggerDistanceY": {
              "get": function () { return this.threshold_trigger_distance_y; },
              "set": function (value) { this.threshold_trigger_distance_y = value; }
            },
            "thresholdTriggerEdge": {
              "get": function () { return this.threshold_trigger_edge; },
              "set": function (value) { this.threshold_trigger_edge = value; }
            }
          },
          "static": {}
        },
        "GridLayout": {
          "prototype": {
            "attachNextTo": {
              "value": function () { return this.attach_next_to.apply(this, arguments); }
            },
            "getChildAt": {
              "value": function () { return this.get_child_at.apply(this, arguments); }
            },
            "getColumnHomogeneous": {
              "value": function () { return this.get_column_homogeneous.apply(this, arguments); }
            },
            "getColumnSpacing": {
              "value": function () { return this.get_column_spacing.apply(this, arguments); }
            },
            "getOrientation": {
              "value": function () { return this.get_orientation.apply(this, arguments); }
            },
            "getRowHomogeneous": {
              "value": function () { return this.get_row_homogeneous.apply(this, arguments); }
            },
            "getRowSpacing": {
              "value": function () { return this.get_row_spacing.apply(this, arguments); }
            },
            "insertColumn": {
              "value": function () { return this.insert_column.apply(this, arguments); }
            },
            "insertNextTo": {
              "value": function () { return this.insert_next_to.apply(this, arguments); }
            },
            "insertRow": {
              "value": function () { return this.insert_row.apply(this, arguments); }
            },
            "setColumnHomogeneous": {
              "value": function () { return this.set_column_homogeneous.apply(this, arguments); }
            },
            "setColumnSpacing": {
              "value": function () { return this.set_column_spacing.apply(this, arguments); }
            },
            "setOrientation": {
              "value": function () { return this.set_orientation.apply(this, arguments); }
            },
            "setRowHomogeneous": {
              "value": function () { return this.set_row_homogeneous.apply(this, arguments); }
            },
            "setRowSpacing": {
              "value": function () { return this.set_row_spacing.apply(this, arguments); }
            },
            "columnHomogeneous": {
              "get": function () { return this.column_homogeneous; },
              "set": function (value) { this.column_homogeneous = value; }
            },
            "columnSpacing": {
              "get": function () { return this.column_spacing; },
              "set": function (value) { this.column_spacing = value; }
            },
            "rowHomogeneous": {
              "get": function () { return this.row_homogeneous; },
              "set": function (value) { this.row_homogeneous = value; }
            },
            "rowSpacing": {
              "get": function () { return this.row_spacing; },
              "set": function (value) { this.row_spacing = value; }
            }
          },
          "static": {}
        },
        "Group": {
          "prototype": {
            "getNChildren": {
              "value": function () { return this.get_n_children.apply(this, arguments); }
            },
            "getNthChild": {
              "value": function () { return this.get_nth_child.apply(this, arguments); }
            },
            "removeAll": {
              "value": function () { return this.remove_all.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Image": {
          "prototype": {
            "setArea": {
              "value": function () { return this.set_area.apply(this, arguments); }
            },
            "setBytes": {
              "value": function () { return this.set_bytes.apply(this, arguments); }
            },
            "setData": {
              "value": function () { return this.set_data.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "InputDevice": {
          "prototype": {
            "getAssociatedDevice": {
              "value": function () { return this.get_associated_device.apply(this, arguments); }
            },
            "getAxis": {
              "value": function () { return this.get_axis.apply(this, arguments); }
            },
            "getAxisValue": {
              "value": function () { return this.get_axis_value.apply(this, arguments); }
            },
            "getCoords": {
              "value": function () { return this.get_coords.apply(this, arguments); }
            },
            "getDeviceCoords": {
              "value": function () { return this.get_device_coords.apply(this, arguments); }
            },
            "getDeviceId": {
              "value": function () { return this.get_device_id.apply(this, arguments); }
            },
            "getDeviceMode": {
              "value": function () { return this.get_device_mode.apply(this, arguments); }
            },
            "getDeviceName": {
              "value": function () { return this.get_device_name.apply(this, arguments); }
            },
            "getDeviceType": {
              "value": function () { return this.get_device_type.apply(this, arguments); }
            },
            "getEnabled": {
              "value": function () { return this.get_enabled.apply(this, arguments); }
            },
            "getGrabbedActor": {
              "value": function () { return this.get_grabbed_actor.apply(this, arguments); }
            },
            "getHasCursor": {
              "value": function () { return this.get_has_cursor.apply(this, arguments); }
            },
            "getKey": {
              "value": function () { return this.get_key.apply(this, arguments); }
            },
            "getModifierState": {
              "value": function () { return this.get_modifier_state.apply(this, arguments); }
            },
            "getNAxes": {
              "value": function () { return this.get_n_axes.apply(this, arguments); }
            },
            "getNKeys": {
              "value": function () { return this.get_n_keys.apply(this, arguments); }
            },
            "getPointerActor": {
              "value": function () { return this.get_pointer_actor.apply(this, arguments); }
            },
            "getPointerStage": {
              "value": function () { return this.get_pointer_stage.apply(this, arguments); }
            },
            "getProductId": {
              "value": function () { return this.get_product_id.apply(this, arguments); }
            },
            "getSlaveDevices": {
              "value": function () { return this.get_slave_devices.apply(this, arguments); }
            },
            "getVendorId": {
              "value": function () { return this.get_vendor_id.apply(this, arguments); }
            },
            "keycodeToEvdev": {
              "value": function () { return this.keycode_to_evdev.apply(this, arguments); }
            },
            "sequenceGetGrabbedActor": {
              "value": function () { return this.sequence_get_grabbed_actor.apply(this, arguments); }
            },
            "sequenceGrab": {
              "value": function () { return this.sequence_grab.apply(this, arguments); }
            },
            "sequenceUngrab": {
              "value": function () { return this.sequence_ungrab.apply(this, arguments); }
            },
            "setEnabled": {
              "value": function () { return this.set_enabled.apply(this, arguments); }
            },
            "setKey": {
              "value": function () { return this.set_key.apply(this, arguments); }
            },
            "updateFromEvent": {
              "value": function () { return this.update_from_event.apply(this, arguments); }
            },
            "deviceManager": {
              "get": function () { return this.device_manager; },
              "set": function (value) { this.device_manager = value; }
            },
            "deviceMode": {
              "get": function () { return this.device_mode; },
              "set": function (value) { this.device_mode = value; }
            },
            "deviceType": {
              "get": function () { return this.device_type; },
              "set": function (value) { this.device_type = value; }
            },
            "hasCursor": {
              "get": function () { return this.has_cursor; },
              "set": function (value) { this.has_cursor = value; }
            },
            "nAxes": {
              "get": function () { return this.n_axes; },
              "set": function (value) { this.n_axes = value; }
            },
            "productId": {
              "get": function () { return this.product_id; },
              "set": function (value) { this.product_id = value; }
            },
            "vendorId": {
              "get": function () { return this.vendor_id; },
              "set": function (value) { this.vendor_id = value; }
            }
          },
          "static": {}
        },
        "Interval": {
          "prototype": {
            "computeValue": {
              "value": function () { return this.compute_value.apply(this, arguments); }
            },
            "getFinalValue": {
              "value": function () { return this.get_final_value.apply(this, arguments); }
            },
            "getInitialValue": {
              "value": function () { return this.get_initial_value.apply(this, arguments); }
            },
            "getInterval": {
              "value": function () { return this.get_interval.apply(this, arguments); }
            },
            "getValueType": {
              "value": function () { return this.get_value_type.apply(this, arguments); }
            },
            "isValid": {
              "value": function () { return this.is_valid.apply(this, arguments); }
            },
            "peekFinalValue": {
              "value": function () { return this.peek_final_value.apply(this, arguments); }
            },
            "peekInitialValue": {
              "value": function () { return this.peek_initial_value.apply(this, arguments); }
            },
            "setFinal": {
              "value": function () { return this.set_final.apply(this, arguments); }
            },
            "setFinalValue": {
              "value": function () { return this.set_final_value.apply(this, arguments); }
            },
            "setInitial": {
              "value": function () { return this.set_initial.apply(this, arguments); }
            },
            "setInitialValue": {
              "value": function () { return this.set_initial_value.apply(this, arguments); }
            },
            "setInterval": {
              "value": function () { return this.set_interval.apply(this, arguments); }
            },
            "valueType": {
              "get": function () { return this.value_type; },
              "set": function (value) { this.value_type = value; }
            }
          },
          "static": {
            "registerProgressFunc": {
              "value": function () { return this.register_progress_func.apply(this, arguments); }
            }
          }
        },
        "KeyframeTransition": {
          "prototype": {
            "getKeyFrame": {
              "value": function () { return this.get_key_frame.apply(this, arguments); }
            },
            "getNKeyFrames": {
              "value": function () { return this.get_n_key_frames.apply(this, arguments); }
            },
            "setKeyFrame": {
              "value": function () { return this.set_key_frame.apply(this, arguments); }
            },
            "setKeyFrames": {
              "value": function () { return this.set_key_frames.apply(this, arguments); }
            },
            "setModes": {
              "value": function () { return this.set_modes.apply(this, arguments); }
            },
            "setValues": {
              "value": function () { return this.set_values.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "LayoutManager": {
          "prototype": {
            "beginAnimation": {
              "value": function () { return this.begin_animation.apply(this, arguments); }
            },
            "childGet": {
              "value": function () { return this.child_get.apply(this, arguments); }
            },
            "childGetProperty": {
              "value": function () { return this.child_get_property.apply(this, arguments); }
            },
            "childSet": {
              "value": function () { return this.child_set.apply(this, arguments); }
            },
            "childSetProperty": {
              "value": function () { return this.child_set_property.apply(this, arguments); }
            },
            "endAnimation": {
              "value": function () { return this.end_animation.apply(this, arguments); }
            },
            "findChildProperty": {
              "value": function () { return this.find_child_property.apply(this, arguments); }
            },
            "getAnimationProgress": {
              "value": function () { return this.get_animation_progress.apply(this, arguments); }
            },
            "getChildMeta": {
              "value": function () { return this.get_child_meta.apply(this, arguments); }
            },
            "getPreferredHeight": {
              "value": function () { return this.get_preferred_height.apply(this, arguments); }
            },
            "getPreferredWidth": {
              "value": function () { return this.get_preferred_width.apply(this, arguments); }
            },
            "layoutChanged": {
              "value": function () { return this.layout_changed.apply(this, arguments); }
            },
            "listChildProperties": {
              "value": function () { return this.list_child_properties.apply(this, arguments); }
            },
            "setContainer": {
              "value": function () { return this.set_container.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "LayoutMeta": {
          "prototype": {
            "getManager": {
              "value": function () { return this.get_manager.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "ListModel": {
          "prototype": {},
          "static": {}
        },
        "Model": {
          "prototype": {
            "filterIter": {
              "value": function () { return this.filter_iter.apply(this, arguments); }
            },
            "filterRow": {
              "value": function () { return this.filter_row.apply(this, arguments); }
            },
            "getColumnName": {
              "value": function () { return this.get_column_name.apply(this, arguments); }
            },
            "getColumnType": {
              "value": function () { return this.get_column_type.apply(this, arguments); }
            },
            "getFilterSet": {
              "value": function () { return this.get_filter_set.apply(this, arguments); }
            },
            "getFirstIter": {
              "value": function () { return this.get_first_iter.apply(this, arguments); }
            },
            "getIterAtRow": {
              "value": function () { return this.get_iter_at_row.apply(this, arguments); }
            },
            "getLastIter": {
              "value": function () { return this.get_last_iter.apply(this, arguments); }
            },
            "getNColumns": {
              "value": function () { return this.get_n_columns.apply(this, arguments); }
            },
            "getNRows": {
              "value": function () { return this.get_n_rows.apply(this, arguments); }
            },
            "getSortingColumn": {
              "value": function () { return this.get_sorting_column.apply(this, arguments); }
            },
            "insertValue": {
              "value": function () { return this.insert_value.apply(this, arguments); }
            },
            "setFilter": {
              "value": function () { return this.set_filter.apply(this, arguments); }
            },
            "setNames": {
              "value": function () { return this.set_names.apply(this, arguments); }
            },
            "setSort": {
              "value": function () { return this.set_sort.apply(this, arguments); }
            },
            "setSortingColumn": {
              "value": function () { return this.set_sorting_column.apply(this, arguments); }
            },
            "setTypes": {
              "value": function () { return this.set_types.apply(this, arguments); }
            },
            "filterSet": {
              "get": function () { return this.filter_set; },
              "set": function (value) { this.filter_set = value; }
            }
          },
          "static": {}
        },
        "ModelIter": {
          "prototype": {
            "getModel": {
              "value": function () { return this.get_model.apply(this, arguments); }
            },
            "getRow": {
              "value": function () { return this.get_row.apply(this, arguments); }
            },
            "getValist": {
              "value": function () { return this.get_valist.apply(this, arguments); }
            },
            "getValue": {
              "value": function () { return this.get_value.apply(this, arguments); }
            },
            "isFirst": {
              "value": function () { return this.is_first.apply(this, arguments); }
            },
            "isLast": {
              "value": function () { return this.is_last.apply(this, arguments); }
            },
            "setValist": {
              "value": function () { return this.set_valist.apply(this, arguments); }
            },
            "setValue": {
              "value": function () { return this.set_value.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "OffscreenEffect": {
          "prototype": {
            "createTexture": {
              "value": function () { return this.create_texture.apply(this, arguments); }
            },
            "getTarget": {
              "value": function () { return this.get_target.apply(this, arguments); }
            },
            "getTargetRect": {
              "value": function () { return this.get_target_rect.apply(this, arguments); }
            },
            "getTargetSize": {
              "value": function () { return this.get_target_size.apply(this, arguments); }
            },
            "getTexture": {
              "value": function () { return this.get_texture.apply(this, arguments); }
            },
            "paintTarget": {
              "value": function () { return this.paint_target.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "PageTurnEffect": {
          "prototype": {
            "getAngle": {
              "value": function () { return this.get_angle.apply(this, arguments); }
            },
            "getPeriod": {
              "value": function () { return this.get_period.apply(this, arguments); }
            },
            "getRadius": {
              "value": function () { return this.get_radius.apply(this, arguments); }
            },
            "setAngle": {
              "value": function () { return this.set_angle.apply(this, arguments); }
            },
            "setPeriod": {
              "value": function () { return this.set_period.apply(this, arguments); }
            },
            "setRadius": {
              "value": function () { return this.set_radius.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "PaintNode": {
          "prototype": {
            "addChild": {
              "value": function () { return this.add_child.apply(this, arguments); }
            },
            "addRectangle": {
              "value": function () { return this.add_rectangle.apply(this, arguments); }
            },
            "addTextureRectangle": {
              "value": function () { return this.add_texture_rectangle.apply(this, arguments); }
            },
            "setName": {
              "value": function () { return this.set_name.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "PanAction": {
          "prototype": {
            "getAccelerationFactor": {
              "value": function () { return this.get_acceleration_factor.apply(this, arguments); }
            },
            "getConstrainedMotionDelta": {
              "value": function () { return this.get_constrained_motion_delta.apply(this, arguments); }
            },
            "getDeceleration": {
              "value": function () { return this.get_deceleration.apply(this, arguments); }
            },
            "getInterpolate": {
              "value": function () { return this.get_interpolate.apply(this, arguments); }
            },
            "getInterpolatedCoords": {
              "value": function () { return this.get_interpolated_coords.apply(this, arguments); }
            },
            "getInterpolatedDelta": {
              "value": function () { return this.get_interpolated_delta.apply(this, arguments); }
            },
            "getMotionCoords": {
              "value": function () { return this.get_motion_coords.apply(this, arguments); }
            },
            "getMotionDelta": {
              "value": function () { return this.get_motion_delta.apply(this, arguments); }
            },
            "getPanAxis": {
              "value": function () { return this.get_pan_axis.apply(this, arguments); }
            },
            "setAccelerationFactor": {
              "value": function () { return this.set_acceleration_factor.apply(this, arguments); }
            },
            "setDeceleration": {
              "value": function () { return this.set_deceleration.apply(this, arguments); }
            },
            "setInterpolate": {
              "value": function () { return this.set_interpolate.apply(this, arguments); }
            },
            "setPanAxis": {
              "value": function () { return this.set_pan_axis.apply(this, arguments); }
            },
            "accelerationFactor": {
              "get": function () { return this.acceleration_factor; },
              "set": function (value) { this.acceleration_factor = value; }
            },
            "panAxis": {
              "get": function () { return this.pan_axis; },
              "set": function (value) { this.pan_axis = value; }
            }
          },
          "static": {}
        },
        "ParamSpecColor": {
          "prototype": {},
          "static": {}
        },
        "ParamSpecFixed": {
          "prototype": {},
          "static": {}
        },
        "ParamSpecUnit": {
          "prototype": {},
          "static": {}
        },
        "Path": {
          "prototype": {
            "addCairoPath": {
              "value": function () { return this.add_cairo_path.apply(this, arguments); }
            },
            "addClose": {
              "value": function () { return this.add_close.apply(this, arguments); }
            },
            "addCurveTo": {
              "value": function () { return this.add_curve_to.apply(this, arguments); }
            },
            "addLineTo": {
              "value": function () { return this.add_line_to.apply(this, arguments); }
            },
            "addMoveTo": {
              "value": function () { return this.add_move_to.apply(this, arguments); }
            },
            "addNode": {
              "value": function () { return this.add_node.apply(this, arguments); }
            },
            "addRelCurveTo": {
              "value": function () { return this.add_rel_curve_to.apply(this, arguments); }
            },
            "addRelLineTo": {
              "value": function () { return this.add_rel_line_to.apply(this, arguments); }
            },
            "addRelMoveTo": {
              "value": function () { return this.add_rel_move_to.apply(this, arguments); }
            },
            "addString": {
              "value": function () { return this.add_string.apply(this, arguments); }
            },
            "getDescription": {
              "value": function () { return this.get_description.apply(this, arguments); }
            },
            "getLength": {
              "value": function () { return this.get_length.apply(this, arguments); }
            },
            "getNNodes": {
              "value": function () { return this.get_n_nodes.apply(this, arguments); }
            },
            "getNode": {
              "value": function () { return this.get_node.apply(this, arguments); }
            },
            "getNodes": {
              "value": function () { return this.get_nodes.apply(this, arguments); }
            },
            "getPosition": {
              "value": function () { return this.get_position.apply(this, arguments); }
            },
            "insertNode": {
              "value": function () { return this.insert_node.apply(this, arguments); }
            },
            "removeNode": {
              "value": function () { return this.remove_node.apply(this, arguments); }
            },
            "replaceNode": {
              "value": function () { return this.replace_node.apply(this, arguments); }
            },
            "setDescription": {
              "value": function () { return this.set_description.apply(this, arguments); }
            },
            "toCairoPath": {
              "value": function () { return this.to_cairo_path.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "PathConstraint": {
          "prototype": {
            "getOffset": {
              "value": function () { return this.get_offset.apply(this, arguments); }
            },
            "getPath": {
              "value": function () { return this.get_path.apply(this, arguments); }
            },
            "setOffset": {
              "value": function () { return this.set_offset.apply(this, arguments); }
            },
            "setPath": {
              "value": function () { return this.set_path.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "PipelineNode": {
          "prototype": {},
          "static": {}
        },
        "PropertyTransition": {
          "prototype": {
            "getPropertyName": {
              "value": function () { return this.get_property_name.apply(this, arguments); }
            },
            "setPropertyName": {
              "value": function () { return this.set_property_name.apply(this, arguments); }
            },
            "propertyName": {
              "get": function () { return this.property_name; },
              "set": function (value) { this.property_name = value; }
            }
          },
          "static": {}
        },
        "Rectangle": {
          "prototype": {
            "getBorderColor": {
              "value": function () { return this.get_border_color.apply(this, arguments); }
            },
            "getBorderWidth": {
              "value": function () { return this.get_border_width.apply(this, arguments); }
            },
            "getColor": {
              "value": function () { return this.get_color.apply(this, arguments); }
            },
            "setBorderColor": {
              "value": function () { return this.set_border_color.apply(this, arguments); }
            },
            "setBorderWidth": {
              "value": function () { return this.set_border_width.apply(this, arguments); }
            },
            "setColor": {
              "value": function () { return this.set_color.apply(this, arguments); }
            },
            "borderColor": {
              "get": function () { return this.border_color; },
              "set": function (value) { this.border_color = value; }
            },
            "borderWidth": {
              "get": function () { return this.border_width; },
              "set": function (value) { this.border_width = value; }
            },
            "hasBorder": {
              "get": function () { return this.has_border; },
              "set": function (value) { this.has_border = value; }
            }
          },
          "static": {}
        },
        "RotateAction": {
          "prototype": {},
          "static": {}
        },
        "Score": {
          "prototype": {
            "appendAtMarker": {
              "value": function () { return this.append_at_marker.apply(this, arguments); }
            },
            "getLoop": {
              "value": function () { return this.get_loop.apply(this, arguments); }
            },
            "getTimeline": {
              "value": function () { return this.get_timeline.apply(this, arguments); }
            },
            "isPlaying": {
              "value": function () { return this.is_playing.apply(this, arguments); }
            },
            "listTimelines": {
              "value": function () { return this.list_timelines.apply(this, arguments); }
            },
            "removeAll": {
              "value": function () { return this.remove_all.apply(this, arguments); }
            },
            "setLoop": {
              "value": function () { return this.set_loop.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Script": {
          "prototype": {
            "addSearchPaths": {
              "value": function () { return this.add_search_paths.apply(this, arguments); }
            },
            "addStates": {
              "value": function () { return this.add_states.apply(this, arguments); }
            },
            "connectSignals": {
              "value": function () { return this.connect_signals.apply(this, arguments); }
            },
            "connectSignalsFull": {
              "value": function () { return this.connect_signals_full.apply(this, arguments); }
            },
            "ensureObjects": {
              "value": function () { return this.ensure_objects.apply(this, arguments); }
            },
            "getObject": {
              "value": function () { return this.get_object.apply(this, arguments); }
            },
            "getObjects": {
              "value": function () { return this.get_objects.apply(this, arguments); }
            },
            "getStates": {
              "value": function () { return this.get_states.apply(this, arguments); }
            },
            "getTranslationDomain": {
              "value": function () { return this.get_translation_domain.apply(this, arguments); }
            },
            "getTypeFromName": {
              "value": function () { return this.get_type_from_name.apply(this, arguments); }
            },
            "listObjects": {
              "value": function () { return this.list_objects.apply(this, arguments); }
            },
            "loadFromData": {
              "value": function () { return this.load_from_data.apply(this, arguments); }
            },
            "loadFromFile": {
              "value": function () { return this.load_from_file.apply(this, arguments); }
            },
            "loadFromResource": {
              "value": function () { return this.load_from_resource.apply(this, arguments); }
            },
            "lookupFilename": {
              "value": function () { return this.lookup_filename.apply(this, arguments); }
            },
            "setTranslationDomain": {
              "value": function () { return this.set_translation_domain.apply(this, arguments); }
            },
            "unmergeObjects": {
              "value": function () { return this.unmerge_objects.apply(this, arguments); }
            },
            "filenameSet": {
              "get": function () { return this.filename_set; },
              "set": function (value) { this.filename_set = value; }
            },
            "translationDomain": {
              "get": function () { return this.translation_domain; },
              "set": function (value) { this.translation_domain = value; }
            }
          },
          "static": {}
        },
        "ScrollActor": {
          "prototype": {
            "getScrollMode": {
              "value": function () { return this.get_scroll_mode.apply(this, arguments); }
            },
            "scrollToPoint": {
              "value": function () { return this.scroll_to_point.apply(this, arguments); }
            },
            "scrollToRect": {
              "value": function () { return this.scroll_to_rect.apply(this, arguments); }
            },
            "setScrollMode": {
              "value": function () { return this.set_scroll_mode.apply(this, arguments); }
            },
            "scrollMode": {
              "get": function () { return this.scroll_mode; },
              "set": function (value) { this.scroll_mode = value; }
            }
          },
          "static": {}
        },
        "Settings": {
          "prototype": {
            "dndDragThreshold": {
              "get": function () { return this.dnd_drag_threshold; },
              "set": function (value) { this.dnd_drag_threshold = value; }
            },
            "doubleClickDistance": {
              "get": function () { return this.double_click_distance; },
              "set": function (value) { this.double_click_distance = value; }
            },
            "doubleClickTime": {
              "get": function () { return this.double_click_time; },
              "set": function (value) { this.double_click_time = value; }
            },
            "fontAntialias": {
              "get": function () { return this.font_antialias; },
              "set": function (value) { this.font_antialias = value; }
            },
            "fontDpi": {
              "get": function () { return this.font_dpi; },
              "set": function (value) { this.font_dpi = value; }
            },
            "fontHintStyle": {
              "get": function () { return this.font_hint_style; },
              "set": function (value) { this.font_hint_style = value; }
            },
            "fontHinting": {
              "get": function () { return this.font_hinting; },
              "set": function (value) { this.font_hinting = value; }
            },
            "fontName": {
              "get": function () { return this.font_name; },
              "set": function (value) { this.font_name = value; }
            },
            "fontSubpixelOrder": {
              "get": function () { return this.font_subpixel_order; },
              "set": function (value) { this.font_subpixel_order = value; }
            },
            "fontconfigTimestamp": {
              "get": function () { return this.fontconfig_timestamp; },
              "set": function (value) { this.fontconfig_timestamp = value; }
            },
            "longPressDuration": {
              "get": function () { return this.long_press_duration; },
              "set": function (value) { this.long_press_duration = value; }
            },
            "passwordHintTime": {
              "get": function () { return this.password_hint_time; },
              "set": function (value) { this.password_hint_time = value; }
            },
            "unscaledFontDpi": {
              "get": function () { return this.unscaled_font_dpi; },
              "set": function (value) { this.unscaled_font_dpi = value; }
            },
            "windowScalingFactor": {
              "get": function () { return this.window_scaling_factor; },
              "set": function (value) { this.window_scaling_factor = value; }
            }
          },
          "static": {
            "getDefault": {
              "value": function () { return this.get_default.apply(this, arguments); }
            }
          }
        },
        "Shader": {
          "prototype": {
            "getCoglFragmentShader": {
              "value": function () { return this.get_cogl_fragment_shader.apply(this, arguments); }
            },
            "getCoglProgram": {
              "value": function () { return this.get_cogl_program.apply(this, arguments); }
            },
            "getCoglVertexShader": {
              "value": function () { return this.get_cogl_vertex_shader.apply(this, arguments); }
            },
            "getFragmentSource": {
              "value": function () { return this.get_fragment_source.apply(this, arguments); }
            },
            "getIsEnabled": {
              "value": function () { return this.get_is_enabled.apply(this, arguments); }
            },
            "getVertexSource": {
              "value": function () { return this.get_vertex_source.apply(this, arguments); }
            },
            "isCompiled": {
              "value": function () { return this.is_compiled.apply(this, arguments); }
            },
            "setFragmentSource": {
              "value": function () { return this.set_fragment_source.apply(this, arguments); }
            },
            "setIsEnabled": {
              "value": function () { return this.set_is_enabled.apply(this, arguments); }
            },
            "setUniform": {
              "value": function () { return this.set_uniform.apply(this, arguments); }
            },
            "setVertexSource": {
              "value": function () { return this.set_vertex_source.apply(this, arguments); }
            },
            "fragmentSource": {
              "get": function () { return this.fragment_source; },
              "set": function (value) { this.fragment_source = value; }
            },
            "vertexSource": {
              "get": function () { return this.vertex_source; },
              "set": function (value) { this.vertex_source = value; }
            }
          },
          "static": {}
        },
        "ShaderEffect": {
          "prototype": {
            "getProgram": {
              "value": function () { return this.get_program.apply(this, arguments); }
            },
            "getShader": {
              "value": function () { return this.get_shader.apply(this, arguments); }
            },
            "setShaderSource": {
              "value": function () { return this.set_shader_source.apply(this, arguments); }
            },
            "setUniform": {
              "value": function () { return this.set_uniform.apply(this, arguments); }
            },
            "setUniformValue": {
              "value": function () { return this.set_uniform_value.apply(this, arguments); }
            },
            "shaderType": {
              "get": function () { return this.shader_type; },
              "set": function (value) { this.shader_type = value; }
            }
          },
          "static": {}
        },
        "ShaderFloat": {
          "prototype": {},
          "static": {}
        },
        "ShaderInt": {
          "prototype": {},
          "static": {}
        },
        "ShaderMatrix": {
          "prototype": {},
          "static": {}
        },
        "SnapConstraint": {
          "prototype": {
            "getEdges": {
              "value": function () { return this.get_edges.apply(this, arguments); }
            },
            "getOffset": {
              "value": function () { return this.get_offset.apply(this, arguments); }
            },
            "getSource": {
              "value": function () { return this.get_source.apply(this, arguments); }
            },
            "setEdges": {
              "value": function () { return this.set_edges.apply(this, arguments); }
            },
            "setOffset": {
              "value": function () { return this.set_offset.apply(this, arguments); }
            },
            "setSource": {
              "value": function () { return this.set_source.apply(this, arguments); }
            },
            "fromEdge": {
              "get": function () { return this.from_edge; },
              "set": function (value) { this.from_edge = value; }
            },
            "toEdge": {
              "get": function () { return this.to_edge; },
              "set": function (value) { this.to_edge = value; }
            }
          },
          "static": {}
        },
        "Stage": {
          "prototype": {
            "ensureCurrent": {
              "value": function () { return this.ensure_current.apply(this, arguments); }
            },
            "ensureRedraw": {
              "value": function () { return this.ensure_redraw.apply(this, arguments); }
            },
            "ensureViewport": {
              "value": function () { return this.ensure_viewport.apply(this, arguments); }
            },
            "getAcceptFocus": {
              "value": function () { return this.get_accept_focus.apply(this, arguments); }
            },
            "getActorAtPos": {
              "value": function () { return this.get_actor_at_pos.apply(this, arguments); }
            },
            "getColor": {
              "value": function () { return this.get_color.apply(this, arguments); }
            },
            "getFog": {
              "value": function () { return this.get_fog.apply(this, arguments); }
            },
            "getFullscreen": {
              "value": function () { return this.get_fullscreen.apply(this, arguments); }
            },
            "getKeyFocus": {
              "value": function () { return this.get_key_focus.apply(this, arguments); }
            },
            "getMinimumSize": {
              "value": function () { return this.get_minimum_size.apply(this, arguments); }
            },
            "getMotionEventsEnabled": {
              "value": function () { return this.get_motion_events_enabled.apply(this, arguments); }
            },
            "getNoClearHint": {
              "value": function () { return this.get_no_clear_hint.apply(this, arguments); }
            },
            "getPerspective": {
              "value": function () { return this.get_perspective.apply(this, arguments); }
            },
            "getRedrawClipBounds": {
              "value": function () { return this.get_redraw_clip_bounds.apply(this, arguments); }
            },
            "getThrottleMotionEvents": {
              "value": function () { return this.get_throttle_motion_events.apply(this, arguments); }
            },
            "getTitle": {
              "value": function () { return this.get_title.apply(this, arguments); }
            },
            "getUseAlpha": {
              "value": function () { return this.get_use_alpha.apply(this, arguments); }
            },
            "getUseFog": {
              "value": function () { return this.get_use_fog.apply(this, arguments); }
            },
            "getUserResizable": {
              "value": function () { return this.get_user_resizable.apply(this, arguments); }
            },
            "hideCursor": {
              "value": function () { return this.hide_cursor.apply(this, arguments); }
            },
            "isDefault": {
              "value": function () { return this.is_default.apply(this, arguments); }
            },
            "queueRedraw": {
              "value": function () { return this.queue_redraw.apply(this, arguments); }
            },
            "readPixels": {
              "value": function () { return this.read_pixels.apply(this, arguments); }
            },
            "setAcceptFocus": {
              "value": function () { return this.set_accept_focus.apply(this, arguments); }
            },
            "setColor": {
              "value": function () { return this.set_color.apply(this, arguments); }
            },
            "setFog": {
              "value": function () { return this.set_fog.apply(this, arguments); }
            },
            "setFullscreen": {
              "value": function () { return this.set_fullscreen.apply(this, arguments); }
            },
            "setKeyFocus": {
              "value": function () { return this.set_key_focus.apply(this, arguments); }
            },
            "setMinimumSize": {
              "value": function () { return this.set_minimum_size.apply(this, arguments); }
            },
            "setMotionEventsEnabled": {
              "value": function () { return this.set_motion_events_enabled.apply(this, arguments); }
            },
            "setNoClearHint": {
              "value": function () { return this.set_no_clear_hint.apply(this, arguments); }
            },
            "setPerspective": {
              "value": function () { return this.set_perspective.apply(this, arguments); }
            },
            "setThrottleMotionEvents": {
              "value": function () { return this.set_throttle_motion_events.apply(this, arguments); }
            },
            "setTitle": {
              "value": function () { return this.set_title.apply(this, arguments); }
            },
            "setUseAlpha": {
              "value": function () { return this.set_use_alpha.apply(this, arguments); }
            },
            "setUseFog": {
              "value": function () { return this.set_use_fog.apply(this, arguments); }
            },
            "setUserResizable": {
              "value": function () { return this.set_user_resizable.apply(this, arguments); }
            },
            "showCursor": {
              "value": function () { return this.show_cursor.apply(this, arguments); }
            },
            "acceptFocus": {
              "get": function () { return this.accept_focus; },
              "set": function (value) { this.accept_focus = value; }
            },
            "cursorVisible": {
              "get": function () { return this.cursor_visible; },
              "set": function (value) { this.cursor_visible = value; }
            },
            "fullscreenSet": {
              "get": function () { return this.fullscreen_set; },
              "set": function (value) { this.fullscreen_set = value; }
            },
            "keyFocus": {
              "get": function () { return this.key_focus; },
              "set": function (value) { this.key_focus = value; }
            },
            "noClearHint": {
              "get": function () { return this.no_clear_hint; },
              "set": function (value) { this.no_clear_hint = value; }
            },
            "useAlpha": {
              "get": function () { return this.use_alpha; },
              "set": function (value) { this.use_alpha = value; }
            },
            "useFog": {
              "get": function () { return this.use_fog; },
              "set": function (value) { this.use_fog = value; }
            },
            "userResizable": {
              "get": function () { return this.user_resizable; },
              "set": function (value) { this.user_resizable = value; }
            }
          },
          "static": {
            "getDefault": {
              "value": function () { return this.get_default.apply(this, arguments); }
            }
          }
        },
        "StageManager": {
          "prototype": {
            "getDefaultStage": {
              "value": function () { return this.get_default_stage.apply(this, arguments); }
            },
            "listStages": {
              "value": function () { return this.list_stages.apply(this, arguments); }
            },
            "peekStages": {
              "value": function () { return this.peek_stages.apply(this, arguments); }
            },
            "setDefaultStage": {
              "value": function () { return this.set_default_stage.apply(this, arguments); }
            },
            "defaultStage": {
              "get": function () { return this.default_stage; },
              "set": function (value) { this.default_stage = value; }
            }
          },
          "static": {
            "getDefault": {
              "value": function () { return this.get_default.apply(this, arguments); }
            }
          }
        },
        "State": {
          "prototype": {
            "getAnimator": {
              "value": function () { return this.get_animator.apply(this, arguments); }
            },
            "getDuration": {
              "value": function () { return this.get_duration.apply(this, arguments); }
            },
            "getKeys": {
              "value": function () { return this.get_keys.apply(this, arguments); }
            },
            "getState": {
              "value": function () { return this.get_state.apply(this, arguments); }
            },
            "getStates": {
              "value": function () { return this.get_states.apply(this, arguments); }
            },
            "getTimeline": {
              "value": function () { return this.get_timeline.apply(this, arguments); }
            },
            "removeKey": {
              "value": function () { return this.remove_key.apply(this, arguments); }
            },
            "setAnimator": {
              "value": function () { return this.set_animator.apply(this, arguments); }
            },
            "setDuration": {
              "value": function () { return this.set_duration.apply(this, arguments); }
            },
            "setKey": {
              "value": function () { return this.set_key.apply(this, arguments); }
            },
            "setState": {
              "value": function () { return this.set_state.apply(this, arguments); }
            },
            "warpToState": {
              "value": function () { return this.warp_to_state.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "SwipeAction": {
          "prototype": {},
          "static": {}
        },
        "TableLayout": {
          "prototype": {
            "getAlignment": {
              "value": function () { return this.get_alignment.apply(this, arguments); }
            },
            "getColumnCount": {
              "value": function () { return this.get_column_count.apply(this, arguments); }
            },
            "getColumnSpacing": {
              "value": function () { return this.get_column_spacing.apply(this, arguments); }
            },
            "getEasingDuration": {
              "value": function () { return this.get_easing_duration.apply(this, arguments); }
            },
            "getEasingMode": {
              "value": function () { return this.get_easing_mode.apply(this, arguments); }
            },
            "getExpand": {
              "value": function () { return this.get_expand.apply(this, arguments); }
            },
            "getFill": {
              "value": function () { return this.get_fill.apply(this, arguments); }
            },
            "getRowCount": {
              "value": function () { return this.get_row_count.apply(this, arguments); }
            },
            "getRowSpacing": {
              "value": function () { return this.get_row_spacing.apply(this, arguments); }
            },
            "getSpan": {
              "value": function () { return this.get_span.apply(this, arguments); }
            },
            "getUseAnimations": {
              "value": function () { return this.get_use_animations.apply(this, arguments); }
            },
            "setAlignment": {
              "value": function () { return this.set_alignment.apply(this, arguments); }
            },
            "setColumnSpacing": {
              "value": function () { return this.set_column_spacing.apply(this, arguments); }
            },
            "setEasingDuration": {
              "value": function () { return this.set_easing_duration.apply(this, arguments); }
            },
            "setEasingMode": {
              "value": function () { return this.set_easing_mode.apply(this, arguments); }
            },
            "setExpand": {
              "value": function () { return this.set_expand.apply(this, arguments); }
            },
            "setFill": {
              "value": function () { return this.set_fill.apply(this, arguments); }
            },
            "setRowSpacing": {
              "value": function () { return this.set_row_spacing.apply(this, arguments); }
            },
            "setSpan": {
              "value": function () { return this.set_span.apply(this, arguments); }
            },
            "setUseAnimations": {
              "value": function () { return this.set_use_animations.apply(this, arguments); }
            },
            "columnSpacing": {
              "get": function () { return this.column_spacing; },
              "set": function (value) { this.column_spacing = value; }
            },
            "easingDuration": {
              "get": function () { return this.easing_duration; },
              "set": function (value) { this.easing_duration = value; }
            },
            "easingMode": {
              "get": function () { return this.easing_mode; },
              "set": function (value) { this.easing_mode = value; }
            },
            "rowSpacing": {
              "get": function () { return this.row_spacing; },
              "set": function (value) { this.row_spacing = value; }
            },
            "useAnimations": {
              "get": function () { return this.use_animations; },
              "set": function (value) { this.use_animations = value; }
            }
          },
          "static": {}
        },
        "TapAction": {
          "prototype": {},
          "static": {}
        },
        "Text": {
          "prototype": {
            "coordsToPosition": {
              "value": function () { return this.coords_to_position.apply(this, arguments); }
            },
            "deleteChars": {
              "value": function () { return this.delete_chars.apply(this, arguments); }
            },
            "deleteSelection": {
              "value": function () { return this.delete_selection.apply(this, arguments); }
            },
            "deleteText": {
              "value": function () { return this.delete_text.apply(this, arguments); }
            },
            "getActivatable": {
              "value": function () { return this.get_activatable.apply(this, arguments); }
            },
            "getAttributes": {
              "value": function () { return this.get_attributes.apply(this, arguments); }
            },
            "getBuffer": {
              "value": function () { return this.get_buffer.apply(this, arguments); }
            },
            "getChars": {
              "value": function () { return this.get_chars.apply(this, arguments); }
            },
            "getColor": {
              "value": function () { return this.get_color.apply(this, arguments); }
            },
            "getCursorColor": {
              "value": function () { return this.get_cursor_color.apply(this, arguments); }
            },
            "getCursorPosition": {
              "value": function () { return this.get_cursor_position.apply(this, arguments); }
            },
            "getCursorRect": {
              "value": function () { return this.get_cursor_rect.apply(this, arguments); }
            },
            "getCursorSize": {
              "value": function () { return this.get_cursor_size.apply(this, arguments); }
            },
            "getCursorVisible": {
              "value": function () { return this.get_cursor_visible.apply(this, arguments); }
            },
            "getEditable": {
              "value": function () { return this.get_editable.apply(this, arguments); }
            },
            "getEllipsize": {
              "value": function () { return this.get_ellipsize.apply(this, arguments); }
            },
            "getFontDescription": {
              "value": function () { return this.get_font_description.apply(this, arguments); }
            },
            "getFontName": {
              "value": function () { return this.get_font_name.apply(this, arguments); }
            },
            "getJustify": {
              "value": function () { return this.get_justify.apply(this, arguments); }
            },
            "getLayout": {
              "value": function () { return this.get_layout.apply(this, arguments); }
            },
            "getLayoutOffsets": {
              "value": function () { return this.get_layout_offsets.apply(this, arguments); }
            },
            "getLineAlignment": {
              "value": function () { return this.get_line_alignment.apply(this, arguments); }
            },
            "getLineWrap": {
              "value": function () { return this.get_line_wrap.apply(this, arguments); }
            },
            "getLineWrapMode": {
              "value": function () { return this.get_line_wrap_mode.apply(this, arguments); }
            },
            "getMaxLength": {
              "value": function () { return this.get_max_length.apply(this, arguments); }
            },
            "getPasswordChar": {
              "value": function () { return this.get_password_char.apply(this, arguments); }
            },
            "getSelectable": {
              "value": function () { return this.get_selectable.apply(this, arguments); }
            },
            "getSelectedTextColor": {
              "value": function () { return this.get_selected_text_color.apply(this, arguments); }
            },
            "getSelection": {
              "value": function () { return this.get_selection.apply(this, arguments); }
            },
            "getSelectionBound": {
              "value": function () { return this.get_selection_bound.apply(this, arguments); }
            },
            "getSelectionColor": {
              "value": function () { return this.get_selection_color.apply(this, arguments); }
            },
            "getSingleLineMode": {
              "value": function () { return this.get_single_line_mode.apply(this, arguments); }
            },
            "getText": {
              "value": function () { return this.get_text.apply(this, arguments); }
            },
            "getUseMarkup": {
              "value": function () { return this.get_use_markup.apply(this, arguments); }
            },
            "insertText": {
              "value": function () { return this.insert_text.apply(this, arguments); }
            },
            "insertUnichar": {
              "value": function () { return this.insert_unichar.apply(this, arguments); }
            },
            "positionToCoords": {
              "value": function () { return this.position_to_coords.apply(this, arguments); }
            },
            "setActivatable": {
              "value": function () { return this.set_activatable.apply(this, arguments); }
            },
            "setAttributes": {
              "value": function () { return this.set_attributes.apply(this, arguments); }
            },
            "setBuffer": {
              "value": function () { return this.set_buffer.apply(this, arguments); }
            },
            "setColor": {
              "value": function () { return this.set_color.apply(this, arguments); }
            },
            "setCursorColor": {
              "value": function () { return this.set_cursor_color.apply(this, arguments); }
            },
            "setCursorPosition": {
              "value": function () { return this.set_cursor_position.apply(this, arguments); }
            },
            "setCursorSize": {
              "value": function () { return this.set_cursor_size.apply(this, arguments); }
            },
            "setCursorVisible": {
              "value": function () { return this.set_cursor_visible.apply(this, arguments); }
            },
            "setEditable": {
              "value": function () { return this.set_editable.apply(this, arguments); }
            },
            "setEllipsize": {
              "value": function () { return this.set_ellipsize.apply(this, arguments); }
            },
            "setFontDescription": {
              "value": function () { return this.set_font_description.apply(this, arguments); }
            },
            "setFontName": {
              "value": function () { return this.set_font_name.apply(this, arguments); }
            },
            "setJustify": {
              "value": function () { return this.set_justify.apply(this, arguments); }
            },
            "setLineAlignment": {
              "value": function () { return this.set_line_alignment.apply(this, arguments); }
            },
            "setLineWrap": {
              "value": function () { return this.set_line_wrap.apply(this, arguments); }
            },
            "setLineWrapMode": {
              "value": function () { return this.set_line_wrap_mode.apply(this, arguments); }
            },
            "setMarkup": {
              "value": function () { return this.set_markup.apply(this, arguments); }
            },
            "setMaxLength": {
              "value": function () { return this.set_max_length.apply(this, arguments); }
            },
            "setPasswordChar": {
              "value": function () { return this.set_password_char.apply(this, arguments); }
            },
            "setPreeditString": {
              "value": function () { return this.set_preedit_string.apply(this, arguments); }
            },
            "setSelectable": {
              "value": function () { return this.set_selectable.apply(this, arguments); }
            },
            "setSelectedTextColor": {
              "value": function () { return this.set_selected_text_color.apply(this, arguments); }
            },
            "setSelection": {
              "value": function () { return this.set_selection.apply(this, arguments); }
            },
            "setSelectionBound": {
              "value": function () { return this.set_selection_bound.apply(this, arguments); }
            },
            "setSelectionColor": {
              "value": function () { return this.set_selection_color.apply(this, arguments); }
            },
            "setSingleLineMode": {
              "value": function () { return this.set_single_line_mode.apply(this, arguments); }
            },
            "setText": {
              "value": function () { return this.set_text.apply(this, arguments); }
            },
            "setUseMarkup": {
              "value": function () { return this.set_use_markup.apply(this, arguments); }
            },
            "cursorColor": {
              "get": function () { return this.cursor_color; },
              "set": function (value) { this.cursor_color = value; }
            },
            "cursorColorSet": {
              "get": function () { return this.cursor_color_set; },
              "set": function (value) { this.cursor_color_set = value; }
            },
            "cursorPosition": {
              "get": function () { return this.cursor_position; },
              "set": function (value) { this.cursor_position = value; }
            },
            "cursorSize": {
              "get": function () { return this.cursor_size; },
              "set": function (value) { this.cursor_size = value; }
            },
            "cursorVisible": {
              "get": function () { return this.cursor_visible; },
              "set": function (value) { this.cursor_visible = value; }
            },
            "fontDescription": {
              "get": function () { return this.font_description; },
              "set": function (value) { this.font_description = value; }
            },
            "fontName": {
              "get": function () { return this.font_name; },
              "set": function (value) { this.font_name = value; }
            },
            "lineAlignment": {
              "get": function () { return this.line_alignment; },
              "set": function (value) { this.line_alignment = value; }
            },
            "lineWrap": {
              "get": function () { return this.line_wrap; },
              "set": function (value) { this.line_wrap = value; }
            },
            "lineWrapMode": {
              "get": function () { return this.line_wrap_mode; },
              "set": function (value) { this.line_wrap_mode = value; }
            },
            "maxLength": {
              "get": function () { return this.max_length; },
              "set": function (value) { this.max_length = value; }
            },
            "passwordChar": {
              "get": function () { return this.password_char; },
              "set": function (value) { this.password_char = value; }
            },
            "selectedTextColor": {
              "get": function () { return this.selected_text_color; },
              "set": function (value) { this.selected_text_color = value; }
            },
            "selectedTextColorSet": {
              "get": function () { return this.selected_text_color_set; },
              "set": function (value) { this.selected_text_color_set = value; }
            },
            "selectionBound": {
              "get": function () { return this.selection_bound; },
              "set": function (value) { this.selection_bound = value; }
            },
            "selectionColor": {
              "get": function () { return this.selection_color; },
              "set": function (value) { this.selection_color = value; }
            },
            "selectionColorSet": {
              "get": function () { return this.selection_color_set; },
              "set": function (value) { this.selection_color_set = value; }
            },
            "singleLineMode": {
              "get": function () { return this.single_line_mode; },
              "set": function (value) { this.single_line_mode = value; }
            },
            "useMarkup": {
              "get": function () { return this.use_markup; },
              "set": function (value) { this.use_markup = value; }
            }
          },
          "static": {}
        },
        "TextBuffer": {
          "prototype": {
            "deleteText": {
              "value": function () { return this.delete_text.apply(this, arguments); }
            },
            "emitDeletedText": {
              "value": function () { return this.emit_deleted_text.apply(this, arguments); }
            },
            "emitInsertedText": {
              "value": function () { return this.emit_inserted_text.apply(this, arguments); }
            },
            "getBytes": {
              "value": function () { return this.get_bytes.apply(this, arguments); }
            },
            "getLength": {
              "value": function () { return this.get_length.apply(this, arguments); }
            },
            "getMaxLength": {
              "value": function () { return this.get_max_length.apply(this, arguments); }
            },
            "getText": {
              "value": function () { return this.get_text.apply(this, arguments); }
            },
            "insertText": {
              "value": function () { return this.insert_text.apply(this, arguments); }
            },
            "setMaxLength": {
              "value": function () { return this.set_max_length.apply(this, arguments); }
            },
            "setText": {
              "value": function () { return this.set_text.apply(this, arguments); }
            },
            "maxLength": {
              "get": function () { return this.max_length; },
              "set": function (value) { this.max_length = value; }
            }
          },
          "static": {}
        },
        "TextNode": {
          "prototype": {},
          "static": {}
        },
        "Texture": {
          "prototype": {
            "getBaseSize": {
              "value": function () { return this.get_base_size.apply(this, arguments); }
            },
            "getCoglMaterial": {
              "value": function () { return this.get_cogl_material.apply(this, arguments); }
            },
            "getCoglTexture": {
              "value": function () { return this.get_cogl_texture.apply(this, arguments); }
            },
            "getFilterQuality": {
              "value": function () { return this.get_filter_quality.apply(this, arguments); }
            },
            "getKeepAspectRatio": {
              "value": function () { return this.get_keep_aspect_ratio.apply(this, arguments); }
            },
            "getLoadAsync": {
              "value": function () { return this.get_load_async.apply(this, arguments); }
            },
            "getLoadDataAsync": {
              "value": function () { return this.get_load_data_async.apply(this, arguments); }
            },
            "getMaxTileWaste": {
              "value": function () { return this.get_max_tile_waste.apply(this, arguments); }
            },
            "getPickWithAlpha": {
              "value": function () { return this.get_pick_with_alpha.apply(this, arguments); }
            },
            "getPixelFormat": {
              "value": function () { return this.get_pixel_format.apply(this, arguments); }
            },
            "getRepeat": {
              "value": function () { return this.get_repeat.apply(this, arguments); }
            },
            "getSyncSize": {
              "value": function () { return this.get_sync_size.apply(this, arguments); }
            },
            "setAreaFromRgbData": {
              "value": function () { return this.set_area_from_rgb_data.apply(this, arguments); }
            },
            "setCoglMaterial": {
              "value": function () { return this.set_cogl_material.apply(this, arguments); }
            },
            "setCoglTexture": {
              "value": function () { return this.set_cogl_texture.apply(this, arguments); }
            },
            "setFilterQuality": {
              "value": function () { return this.set_filter_quality.apply(this, arguments); }
            },
            "setFromFile": {
              "value": function () { return this.set_from_file.apply(this, arguments); }
            },
            "setFromRgbData": {
              "value": function () { return this.set_from_rgb_data.apply(this, arguments); }
            },
            "setFromYuvData": {
              "value": function () { return this.set_from_yuv_data.apply(this, arguments); }
            },
            "setKeepAspectRatio": {
              "value": function () { return this.set_keep_aspect_ratio.apply(this, arguments); }
            },
            "setLoadAsync": {
              "value": function () { return this.set_load_async.apply(this, arguments); }
            },
            "setLoadDataAsync": {
              "value": function () { return this.set_load_data_async.apply(this, arguments); }
            },
            "setPickWithAlpha": {
              "value": function () { return this.set_pick_with_alpha.apply(this, arguments); }
            },
            "setRepeat": {
              "value": function () { return this.set_repeat.apply(this, arguments); }
            },
            "setSyncSize": {
              "value": function () { return this.set_sync_size.apply(this, arguments); }
            },
            "coglMaterial": {
              "get": function () { return this.cogl_material; },
              "set": function (value) { this.cogl_material = value; }
            },
            "coglTexture": {
              "get": function () { return this.cogl_texture; },
              "set": function (value) { this.cogl_texture = value; }
            },
            "disableSlicing": {
              "get": function () { return this.disable_slicing; },
              "set": function (value) { this.disable_slicing = value; }
            },
            "filterQuality": {
              "get": function () { return this.filter_quality; },
              "set": function (value) { this.filter_quality = value; }
            },
            "keepAspectRatio": {
              "get": function () { return this.keep_aspect_ratio; },
              "set": function (value) { this.keep_aspect_ratio = value; }
            },
            "loadAsync": {
              "get": function () { return this.load_async; },
              "set": function (value) { this.load_async = value; }
            },
            "loadDataAsync": {
              "get": function () { return this.load_data_async; },
              "set": function (value) { this.load_data_async = value; }
            },
            "pickWithAlpha": {
              "get": function () { return this.pick_with_alpha; },
              "set": function (value) { this.pick_with_alpha = value; }
            },
            "pixelFormat": {
              "get": function () { return this.pixel_format; },
              "set": function (value) { this.pixel_format = value; }
            },
            "repeatX": {
              "get": function () { return this.repeat_x; },
              "set": function (value) { this.repeat_x = value; }
            },
            "repeatY": {
              "get": function () { return this.repeat_y; },
              "set": function (value) { this.repeat_y = value; }
            },
            "syncSize": {
              "get": function () { return this.sync_size; },
              "set": function (value) { this.sync_size = value; }
            },
            "tileWaste": {
              "get": function () { return this.tile_waste; },
              "set": function (value) { this.tile_waste = value; }
            }
          },
          "static": {}
        },
        "TextureNode": {
          "prototype": {},
          "static": {}
        },
        "Timeline": {
          "prototype": {
            "addMarker": {
              "value": function () { return this.add_marker.apply(this, arguments); }
            },
            "addMarkerAtTime": {
              "value": function () { return this.add_marker_at_time.apply(this, arguments); }
            },
            "advanceToMarker": {
              "value": function () { return this.advance_to_marker.apply(this, arguments); }
            },
            "getAutoReverse": {
              "value": function () { return this.get_auto_reverse.apply(this, arguments); }
            },
            "getCubicBezierProgress": {
              "value": function () { return this.get_cubic_bezier_progress.apply(this, arguments); }
            },
            "getCurrentRepeat": {
              "value": function () { return this.get_current_repeat.apply(this, arguments); }
            },
            "getDelay": {
              "value": function () { return this.get_delay.apply(this, arguments); }
            },
            "getDelta": {
              "value": function () { return this.get_delta.apply(this, arguments); }
            },
            "getDirection": {
              "value": function () { return this.get_direction.apply(this, arguments); }
            },
            "getDuration": {
              "value": function () { return this.get_duration.apply(this, arguments); }
            },
            "getDurationHint": {
              "value": function () { return this.get_duration_hint.apply(this, arguments); }
            },
            "getElapsedTime": {
              "value": function () { return this.get_elapsed_time.apply(this, arguments); }
            },
            "getLoop": {
              "value": function () { return this.get_loop.apply(this, arguments); }
            },
            "getProgress": {
              "value": function () { return this.get_progress.apply(this, arguments); }
            },
            "getProgressMode": {
              "value": function () { return this.get_progress_mode.apply(this, arguments); }
            },
            "getRepeatCount": {
              "value": function () { return this.get_repeat_count.apply(this, arguments); }
            },
            "getStepProgress": {
              "value": function () { return this.get_step_progress.apply(this, arguments); }
            },
            "hasMarker": {
              "value": function () { return this.has_marker.apply(this, arguments); }
            },
            "isPlaying": {
              "value": function () { return this.is_playing.apply(this, arguments); }
            },
            "listMarkers": {
              "value": function () { return this.list_markers.apply(this, arguments); }
            },
            "removeMarker": {
              "value": function () { return this.remove_marker.apply(this, arguments); }
            },
            "setAutoReverse": {
              "value": function () { return this.set_auto_reverse.apply(this, arguments); }
            },
            "setCubicBezierProgress": {
              "value": function () { return this.set_cubic_bezier_progress.apply(this, arguments); }
            },
            "setDelay": {
              "value": function () { return this.set_delay.apply(this, arguments); }
            },
            "setDirection": {
              "value": function () { return this.set_direction.apply(this, arguments); }
            },
            "setDuration": {
              "value": function () { return this.set_duration.apply(this, arguments); }
            },
            "setLoop": {
              "value": function () { return this.set_loop.apply(this, arguments); }
            },
            "setProgressFunc": {
              "value": function () { return this.set_progress_func.apply(this, arguments); }
            },
            "setProgressMode": {
              "value": function () { return this.set_progress_mode.apply(this, arguments); }
            },
            "setRepeatCount": {
              "value": function () { return this.set_repeat_count.apply(this, arguments); }
            },
            "setStepProgress": {
              "value": function () { return this.set_step_progress.apply(this, arguments); }
            },
            "autoReverse": {
              "get": function () { return this.auto_reverse; },
              "set": function (value) { this.auto_reverse = value; }
            },
            "progressMode": {
              "get": function () { return this.progress_mode; },
              "set": function (value) { this.progress_mode = value; }
            },
            "repeatCount": {
              "get": function () { return this.repeat_count; },
              "set": function (value) { this.repeat_count = value; }
            }
          },
          "static": {}
        },
        "Transition": {
          "prototype": {
            "getAnimatable": {
              "value": function () { return this.get_animatable.apply(this, arguments); }
            },
            "getInterval": {
              "value": function () { return this.get_interval.apply(this, arguments); }
            },
            "getRemoveOnComplete": {
              "value": function () { return this.get_remove_on_complete.apply(this, arguments); }
            },
            "setAnimatable": {
              "value": function () { return this.set_animatable.apply(this, arguments); }
            },
            "setFrom": {
              "value": function () { return this.set_from.apply(this, arguments); }
            },
            "setFromValue": {
              "value": function () { return this.set_from_value.apply(this, arguments); }
            },
            "setInterval": {
              "value": function () { return this.set_interval.apply(this, arguments); }
            },
            "setRemoveOnComplete": {
              "value": function () { return this.set_remove_on_complete.apply(this, arguments); }
            },
            "setTo": {
              "value": function () { return this.set_to.apply(this, arguments); }
            },
            "setToValue": {
              "value": function () { return this.set_to_value.apply(this, arguments); }
            },
            "removeOnComplete": {
              "get": function () { return this.remove_on_complete; },
              "set": function (value) { this.remove_on_complete = value; }
            }
          },
          "static": {}
        },
        "TransitionGroup": {
          "prototype": {
            "addTransition": {
              "value": function () { return this.add_transition.apply(this, arguments); }
            },
            "removeAll": {
              "value": function () { return this.remove_all.apply(this, arguments); }
            },
            "removeTransition": {
              "value": function () { return this.remove_transition.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "ZoomAction": {
          "prototype": {
            "getFocalPoint": {
              "value": function () { return this.get_focal_point.apply(this, arguments); }
            },
            "getTransformedFocalPoint": {
              "value": function () { return this.get_transformed_focal_point.apply(this, arguments); }
            },
            "getZoomAxis": {
              "value": function () { return this.get_zoom_axis.apply(this, arguments); }
            },
            "setZoomAxis": {
              "value": function () { return this.set_zoom_axis.apply(this, arguments); }
            },
            "zoomAxis": {
              "get": function () { return this.zoom_axis; },
              "set": function (value) { this.zoom_axis = value; }
            }
          },
          "static": {}
        }
      },
      "static": {
        "actorBoxAlloc": {
          "value": function () { return this.actor_box_alloc.apply(this, arguments); }
        },
        "baseInit": {
          "value": function () { return this.base_init.apply(this, arguments); }
        },
        "cairoClear": {
          "value": function () { return this.cairo_clear.apply(this, arguments); }
        },
        "cairoSetSourceColor": {
          "value": function () { return this.cairo_set_source_color.apply(this, arguments); }
        },
        "checkVersion": {
          "value": function () { return this.check_version.apply(this, arguments); }
        },
        "checkWindowingBackend": {
          "value": function () { return this.check_windowing_backend.apply(this, arguments); }
        },
        "clearGlyphCache": {
          "value": function () { return this.clear_glyph_cache.apply(this, arguments); }
        },
        "colorFromHls": {
          "value": function () { return this.color_from_hls.apply(this, arguments); }
        },
        "colorFromPixel": {
          "value": function () { return this.color_from_pixel.apply(this, arguments); }
        },
        "colorFromString": {
          "value": function () { return this.color_from_string.apply(this, arguments); }
        },
        "colorGetStatic": {
          "value": function () { return this.color_get_static.apply(this, arguments); }
        },
        "containerClassFindChildProperty": {
          "value": function () { return this.container_class_find_child_property.apply(this, arguments); }
        },
        "containerClassListChildProperties": {
          "value": function () { return this.container_class_list_child_properties.apply(this, arguments); }
        },
        "disableAccessibility": {
          "value": function () { return this.disable_accessibility.apply(this, arguments); }
        },
        "doEvent": {
          "value": function () { return this.do_event.apply(this, arguments); }
        },
        "eventAddFilter": {
          "value": function () { return this.event_add_filter.apply(this, arguments); }
        },
        "eventGet": {
          "value": function () { return this.event_get.apply(this, arguments); }
        },
        "eventPeek": {
          "value": function () { return this.event_peek.apply(this, arguments); }
        },
        "eventRemoveFilter": {
          "value": function () { return this.event_remove_filter.apply(this, arguments); }
        },
        "eventsPending": {
          "value": function () { return this.events_pending.apply(this, arguments); }
        },
        "featureAvailable": {
          "value": function () { return this.feature_available.apply(this, arguments); }
        },
        "featureGetAll": {
          "value": function () { return this.feature_get_all.apply(this, arguments); }
        },
        "frameSourceAdd": {
          "value": function () { return this.frame_source_add.apply(this, arguments); }
        },
        "frameSourceAddFull": {
          "value": function () { return this.frame_source_add_full.apply(this, arguments); }
        },
        "getAccessibilityEnabled": {
          "value": function () { return this.get_accessibility_enabled.apply(this, arguments); }
        },
        "getActorByGid": {
          "value": function () { return this.get_actor_by_gid.apply(this, arguments); }
        },
        "getCurrentEvent": {
          "value": function () { return this.get_current_event.apply(this, arguments); }
        },
        "getCurrentEventTime": {
          "value": function () { return this.get_current_event_time.apply(this, arguments); }
        },
        "getDebugEnabled": {
          "value": function () { return this.get_debug_enabled.apply(this, arguments); }
        },
        "getDefaultBackend": {
          "value": function () { return this.get_default_backend.apply(this, arguments); }
        },
        "getDefaultFrameRate": {
          "value": function () { return this.get_default_frame_rate.apply(this, arguments); }
        },
        "getDefaultTextDirection": {
          "value": function () { return this.get_default_text_direction.apply(this, arguments); }
        },
        "getFontFlags": {
          "value": function () { return this.get_font_flags.apply(this, arguments); }
        },
        "getFontMap": {
          "value": function () { return this.get_font_map.apply(this, arguments); }
        },
        "getInputDeviceForId": {
          "value": function () { return this.get_input_device_for_id.apply(this, arguments); }
        },
        "getKeyboardGrab": {
          "value": function () { return this.get_keyboard_grab.apply(this, arguments); }
        },
        "getMotionEventsEnabled": {
          "value": function () { return this.get_motion_events_enabled.apply(this, arguments); }
        },
        "getOptionGroup": {
          "value": function () { return this.get_option_group.apply(this, arguments); }
        },
        "getOptionGroupWithoutInit": {
          "value": function () { return this.get_option_group_without_init.apply(this, arguments); }
        },
        "getPointerGrab": {
          "value": function () { return this.get_pointer_grab.apply(this, arguments); }
        },
        "getScriptId": {
          "value": function () { return this.get_script_id.apply(this, arguments); }
        },
        "getShowFps": {
          "value": function () { return this.get_show_fps.apply(this, arguments); }
        },
        "getTimestamp": {
          "value": function () { return this.get_timestamp.apply(this, arguments); }
        },
        "grabKeyboard": {
          "value": function () { return this.grab_keyboard.apply(this, arguments); }
        },
        "grabPointer": {
          "value": function () { return this.grab_pointer.apply(this, arguments); }
        },
        "grabPointerForDevice": {
          "value": function () { return this.grab_pointer_for_device.apply(this, arguments); }
        },
        "imageErrorQuark": {
          "value": function () { return this.image_error_quark.apply(this, arguments); }
        },
        "initErrorQuark": {
          "value": function () { return this.init_error_quark.apply(this, arguments); }
        },
        "initWithArgs": {
          "value": function () { return this.init_with_args.apply(this, arguments); }
        },
        "keysymToUnicode": {
          "value": function () { return this.keysym_to_unicode.apply(this, arguments); }
        },
        "mainLevel": {
          "value": function () { return this.main_level.apply(this, arguments); }
        },
        "mainQuit": {
          "value": function () { return this.main_quit.apply(this, arguments); }
        },
        "matrixAlloc": {
          "value": function () { return this.matrix_alloc.apply(this, arguments); }
        },
        "matrixFree": {
          "value": function () { return this.matrix_free.apply(this, arguments); }
        },
        "matrixGetType": {
          "value": function () { return this.matrix_get_type.apply(this, arguments); }
        },
        "matrixInitFromArray": {
          "value": function () { return this.matrix_init_from_array.apply(this, arguments); }
        },
        "matrixInitFromMatrix": {
          "value": function () { return this.matrix_init_from_matrix.apply(this, arguments); }
        },
        "matrixInitIdentity": {
          "value": function () { return this.matrix_init_identity.apply(this, arguments); }
        },
        "paramSpecColor": {
          "value": function () { return this.param_spec_color.apply(this, arguments); }
        },
        "paramSpecFixed": {
          "value": function () { return this.param_spec_fixed.apply(this, arguments); }
        },
        "paramSpecUnits": {
          "value": function () { return this.param_spec_units.apply(this, arguments); }
        },
        "pointZero": {
          "value": function () { return this.point_zero.apply(this, arguments); }
        },
        "rectZero": {
          "value": function () { return this.rect_zero.apply(this, arguments); }
        },
        "scriptErrorQuark": {
          "value": function () { return this.script_error_quark.apply(this, arguments); }
        },
        "setDefaultFrameRate": {
          "value": function () { return this.set_default_frame_rate.apply(this, arguments); }
        },
        "setFontFlags": {
          "value": function () { return this.set_font_flags.apply(this, arguments); }
        },
        "setMotionEventsEnabled": {
          "value": function () { return this.set_motion_events_enabled.apply(this, arguments); }
        },
        "setWindowingBackend": {
          "value": function () { return this.set_windowing_backend.apply(this, arguments); }
        },
        "shaderErrorQuark": {
          "value": function () { return this.shader_error_quark.apply(this, arguments); }
        },
        "testAdd": {
          "value": function () { return this.test_add.apply(this, arguments); }
        },
        "testAddData": {
          "value": function () { return this.test_add_data.apply(this, arguments); }
        },
        "testAddDataFull": {
          "value": function () { return this.test_add_data_full.apply(this, arguments); }
        },
        "testCheckActorAtPoint": {
          "value": function () { return this.test_check_actor_at_point.apply(this, arguments); }
        },
        "testCheckColorAtPoint": {
          "value": function () { return this.test_check_color_at_point.apply(this, arguments); }
        },
        "testGetStage": {
          "value": function () { return this.test_get_stage.apply(this, arguments); }
        },
        "testInit": {
          "value": function () { return this.test_init.apply(this, arguments); }
        },
        "testRun": {
          "value": function () { return this.test_run.apply(this, arguments); }
        },
        "textureErrorQuark": {
          "value": function () { return this.texture_error_quark.apply(this, arguments); }
        },
        "threadsAddFrameSource": {
          "value": function () { return this.threads_add_frame_source.apply(this, arguments); }
        },
        "threadsAddFrameSourceFull": {
          "value": function () { return this.threads_add_frame_source_full.apply(this, arguments); }
        },
        "threadsAddIdle": {
          "value": function () { return this.threads_add_idle.apply(this, arguments); }
        },
        "threadsAddIdleFull": {
          "value": function () { return this.threads_add_idle_full.apply(this, arguments); }
        },
        "threadsAddRepaintFunc": {
          "value": function () { return this.threads_add_repaint_func.apply(this, arguments); }
        },
        "threadsAddRepaintFuncFull": {
          "value": function () { return this.threads_add_repaint_func_full.apply(this, arguments); }
        },
        "threadsAddTimeout": {
          "value": function () { return this.threads_add_timeout.apply(this, arguments); }
        },
        "threadsAddTimeoutFull": {
          "value": function () { return this.threads_add_timeout_full.apply(this, arguments); }
        },
        "threadsEnter": {
          "value": function () { return this.threads_enter.apply(this, arguments); }
        },
        "threadsInit": {
          "value": function () { return this.threads_init.apply(this, arguments); }
        },
        "threadsLeave": {
          "value": function () { return this.threads_leave.apply(this, arguments); }
        },
        "threadsRemoveRepaintFunc": {
          "value": function () { return this.threads_remove_repaint_func.apply(this, arguments); }
        },
        "threadsSetLockFunctions": {
          "value": function () { return this.threads_set_lock_functions.apply(this, arguments); }
        },
        "timeoutPoolNew": {
          "value": function () { return this.timeout_pool_new.apply(this, arguments); }
        },
        "ungrabKeyboard": {
          "value": function () { return this.ungrab_keyboard.apply(this, arguments); }
        },
        "ungrabPointer": {
          "value": function () { return this.ungrab_pointer.apply(this, arguments); }
        },
        "ungrabPointerForDevice": {
          "value": function () { return this.ungrab_pointer_for_device.apply(this, arguments); }
        },
        "unicodeToKeysym": {
          "value": function () { return this.unicode_to_keysym.apply(this, arguments); }
        },
        "unitsFromCm": {
          "value": function () { return this.units_from_cm.apply(this, arguments); }
        },
        "unitsFromEm": {
          "value": function () { return this.units_from_em.apply(this, arguments); }
        },
        "unitsFromEmForFont": {
          "value": function () { return this.units_from_em_for_font.apply(this, arguments); }
        },
        "unitsFromMm": {
          "value": function () { return this.units_from_mm.apply(this, arguments); }
        },
        "unitsFromPixels": {
          "value": function () { return this.units_from_pixels.apply(this, arguments); }
        },
        "unitsFromPt": {
          "value": function () { return this.units_from_pt.apply(this, arguments); }
        },
        "unitsFromString": {
          "value": function () { return this.units_from_string.apply(this, arguments); }
        },
        "utilNextP2": {
          "value": function () { return this.util_next_p2.apply(this, arguments); }
        },
        "valueDupPaintNode": {
          "value": function () { return this.value_dup_paint_node.apply(this, arguments); }
        },
        "valueGetColor": {
          "value": function () { return this.value_get_color.apply(this, arguments); }
        },
        "valueGetFixed": {
          "value": function () { return this.value_get_fixed.apply(this, arguments); }
        },
        "valueGetPaintNode": {
          "value": function () { return this.value_get_paint_node.apply(this, arguments); }
        },
        "valueGetShaderFloat": {
          "value": function () { return this.value_get_shader_float.apply(this, arguments); }
        },
        "valueGetShaderInt": {
          "value": function () { return this.value_get_shader_int.apply(this, arguments); }
        },
        "valueGetShaderMatrix": {
          "value": function () { return this.value_get_shader_matrix.apply(this, arguments); }
        },
        "valueGetUnits": {
          "value": function () { return this.value_get_units.apply(this, arguments); }
        },
        "valueSetColor": {
          "value": function () { return this.value_set_color.apply(this, arguments); }
        },
        "valueSetFixed": {
          "value": function () { return this.value_set_fixed.apply(this, arguments); }
        },
        "valueSetPaintNode": {
          "value": function () { return this.value_set_paint_node.apply(this, arguments); }
        },
        "valueSetShaderFloat": {
          "value": function () { return this.value_set_shader_float.apply(this, arguments); }
        },
        "valueSetShaderInt": {
          "value": function () { return this.value_set_shader_int.apply(this, arguments); }
        },
        "valueSetShaderMatrix": {
          "value": function () { return this.value_set_shader_matrix.apply(this, arguments); }
        },
        "valueSetUnits": {
          "value": function () { return this.value_set_units.apply(this, arguments); }
        },
        "valueTakePaintNode": {
          "value": function () { return this.value_take_paint_node.apply(this, arguments); }
        }
      }
    },
    "ClutterGdk": {
      "class": {},
      "static": {
        "disableEventRetrieval": {
          "value": function () { return this.disable_event_retrieval.apply(this, arguments); }
        },
        "getDefaultDisplay": {
          "value": function () { return this.get_default_display.apply(this, arguments); }
        },
        "getStageFromWindow": {
          "value": function () { return this.get_stage_from_window.apply(this, arguments); }
        },
        "getStageWindow": {
          "value": function () { return this.get_stage_window.apply(this, arguments); }
        },
        "getVisual": {
          "value": function () { return this.get_visual.apply(this, arguments); }
        },
        "handleEvent": {
          "value": function () { return this.handle_event.apply(this, arguments); }
        },
        "setDisplay": {
          "value": function () { return this.set_display.apply(this, arguments); }
        },
        "setStageForeign": {
          "value": function () { return this.set_stage_foreign.apply(this, arguments); }
        }
      }
    },
    "ClutterGst": {
      "class": {
        "Aspectratio": {
          "prototype": {
            "fillAllocation": {
              "get": function () { return this.fill_allocation; },
              "set": function (value) { this.fill_allocation = value; }
            },
            "paintBorders": {
              "get": function () { return this.paint_borders; },
              "set": function (value) { this.paint_borders = value; }
            }
          },
          "static": {}
        },
        "Camera": {
          "prototype": {
            "getBrightness": {
              "value": function () { return this.get_brightness.apply(this, arguments); }
            },
            "getBrightnessRange": {
              "value": function () { return this.get_brightness_range.apply(this, arguments); }
            },
            "getCameraDevice": {
              "value": function () { return this.get_camera_device.apply(this, arguments); }
            },
            "getColorBalanceProperty": {
              "value": function () { return this.get_color_balance_property.apply(this, arguments); }
            },
            "getColorBalancePropertyRange": {
              "value": function () { return this.get_color_balance_property_range.apply(this, arguments); }
            },
            "getContrast": {
              "value": function () { return this.get_contrast.apply(this, arguments); }
            },
            "getContrastRange": {
              "value": function () { return this.get_contrast_range.apply(this, arguments); }
            },
            "getFilter": {
              "value": function () { return this.get_filter.apply(this, arguments); }
            },
            "getGamma": {
              "value": function () { return this.get_gamma.apply(this, arguments); }
            },
            "getGammaRange": {
              "value": function () { return this.get_gamma_range.apply(this, arguments); }
            },
            "getHue": {
              "value": function () { return this.get_hue.apply(this, arguments); }
            },
            "getHueRange": {
              "value": function () { return this.get_hue_range.apply(this, arguments); }
            },
            "getSaturation": {
              "value": function () { return this.get_saturation.apply(this, arguments); }
            },
            "getSaturationRange": {
              "value": function () { return this.get_saturation_range.apply(this, arguments); }
            },
            "isReadyForCapture": {
              "value": function () { return this.is_ready_for_capture.apply(this, arguments); }
            },
            "isRecordingVideo": {
              "value": function () { return this.is_recording_video.apply(this, arguments); }
            },
            "removeFilter": {
              "value": function () { return this.remove_filter.apply(this, arguments); }
            },
            "setBrightness": {
              "value": function () { return this.set_brightness.apply(this, arguments); }
            },
            "setCameraDevice": {
              "value": function () { return this.set_camera_device.apply(this, arguments); }
            },
            "setColorBalanceProperty": {
              "value": function () { return this.set_color_balance_property.apply(this, arguments); }
            },
            "setContrast": {
              "value": function () { return this.set_contrast.apply(this, arguments); }
            },
            "setFilter": {
              "value": function () { return this.set_filter.apply(this, arguments); }
            },
            "setGamma": {
              "value": function () { return this.set_gamma.apply(this, arguments); }
            },
            "setHue": {
              "value": function () { return this.set_hue.apply(this, arguments); }
            },
            "setPhotoProfile": {
              "value": function () { return this.set_photo_profile.apply(this, arguments); }
            },
            "setSaturation": {
              "value": function () { return this.set_saturation.apply(this, arguments); }
            },
            "setVideoProfile": {
              "value": function () { return this.set_video_profile.apply(this, arguments); }
            },
            "startVideoRecording": {
              "value": function () { return this.start_video_recording.apply(this, arguments); }
            },
            "stopVideoRecording": {
              "value": function () { return this.stop_video_recording.apply(this, arguments); }
            },
            "supportsColorBalance": {
              "value": function () { return this.supports_color_balance.apply(this, arguments); }
            },
            "supportsGammaCorrection": {
              "value": function () { return this.supports_gamma_correction.apply(this, arguments); }
            },
            "takePhoto": {
              "value": function () { return this.take_photo.apply(this, arguments); }
            },
            "takePhotoPixbuf": {
              "value": function () { return this.take_photo_pixbuf.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "CameraDevice": {
          "prototype": {
            "getCaptureResolution": {
              "value": function () { return this.get_capture_resolution.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getNode": {
              "value": function () { return this.get_node.apply(this, arguments); }
            },
            "getSupportedResolutions": {
              "value": function () { return this.get_supported_resolutions.apply(this, arguments); }
            },
            "setCaptureResolution": {
              "value": function () { return this.set_capture_resolution.apply(this, arguments); }
            },
            "elementFactory": {
              "get": function () { return this.element_factory; },
              "set": function (value) { this.element_factory = value; }
            }
          },
          "static": {}
        },
        "CameraManager": {
          "prototype": {
            "getCameraDevices": {
              "value": function () { return this.get_camera_devices.apply(this, arguments); }
            }
          },
          "static": {
            "getDefault": {
              "value": function () { return this.get_default.apply(this, arguments); }
            }
          }
        },
        "Content": {
          "prototype": {
            "getFrame": {
              "value": function () { return this.get_frame.apply(this, arguments); }
            },
            "getOverlays": {
              "value": function () { return this.get_overlays.apply(this, arguments); }
            },
            "getPlayer": {
              "value": function () { return this.get_player.apply(this, arguments); }
            },
            "getSink": {
              "value": function () { return this.get_sink.apply(this, arguments); }
            },
            "setFrame": {
              "value": function () { return this.set_frame.apply(this, arguments); }
            },
            "setPlayer": {
              "value": function () { return this.set_player.apply(this, arguments); }
            },
            "setSink": {
              "value": function () { return this.set_sink.apply(this, arguments); }
            },
            "paintFrame": {
              "get": function () { return this.paint_frame; },
              "set": function (value) { this.paint_frame = value; }
            },
            "paintOverlays": {
              "get": function () { return this.paint_overlays; },
              "set": function (value) { this.paint_overlays = value; }
            }
          },
          "static": {
            "newWithSink": {
              "value": function () { return this.new_with_sink.apply(this, arguments); }
            }
          }
        },
        "Crop": {
          "prototype": {
            "cullBackface": {
              "get": function () { return this.cull_backface; },
              "set": function (value) { this.cull_backface = value; }
            },
            "inputRegion": {
              "get": function () { return this.input_region; },
              "set": function (value) { this.input_region = value; }
            },
            "outputRegion": {
              "get": function () { return this.output_region; },
              "set": function (value) { this.output_region = value; }
            },
            "paintBorders": {
              "get": function () { return this.paint_borders; },
              "set": function (value) { this.paint_borders = value; }
            }
          },
          "static": {}
        },
        "Playback": {
          "prototype": {
            "getAudioStream": {
              "value": function () { return this.get_audio_stream.apply(this, arguments); }
            },
            "getAudioStreams": {
              "value": function () { return this.get_audio_streams.apply(this, arguments); }
            },
            "getBufferDuration": {
              "value": function () { return this.get_buffer_duration.apply(this, arguments); }
            },
            "getBufferFill": {
              "value": function () { return this.get_buffer_fill.apply(this, arguments); }
            },
            "getBufferSize": {
              "value": function () { return this.get_buffer_size.apply(this, arguments); }
            },
            "getBufferingMode": {
              "value": function () { return this.get_buffering_mode.apply(this, arguments); }
            },
            "getDuration": {
              "value": function () { return this.get_duration.apply(this, arguments); }
            },
            "getInSeek": {
              "value": function () { return this.get_in_seek.apply(this, arguments); }
            },
            "getPosition": {
              "value": function () { return this.get_position.apply(this, arguments); }
            },
            "getProgress": {
              "value": function () { return this.get_progress.apply(this, arguments); }
            },
            "getSeekFlags": {
              "value": function () { return this.get_seek_flags.apply(this, arguments); }
            },
            "getSubtitleFontName": {
              "value": function () { return this.get_subtitle_font_name.apply(this, arguments); }
            },
            "getSubtitleTrack": {
              "value": function () { return this.get_subtitle_track.apply(this, arguments); }
            },
            "getSubtitleTracks": {
              "value": function () { return this.get_subtitle_tracks.apply(this, arguments); }
            },
            "getSubtitleUri": {
              "value": function () { return this.get_subtitle_uri.apply(this, arguments); }
            },
            "getUri": {
              "value": function () { return this.get_uri.apply(this, arguments); }
            },
            "getUserAgent": {
              "value": function () { return this.get_user_agent.apply(this, arguments); }
            },
            "isLiveMedia": {
              "value": function () { return this.is_live_media.apply(this, arguments); }
            },
            "setAudioStream": {
              "value": function () { return this.set_audio_stream.apply(this, arguments); }
            },
            "setBufferDuration": {
              "value": function () { return this.set_buffer_duration.apply(this, arguments); }
            },
            "setBufferSize": {
              "value": function () { return this.set_buffer_size.apply(this, arguments); }
            },
            "setBufferingMode": {
              "value": function () { return this.set_buffering_mode.apply(this, arguments); }
            },
            "setFilename": {
              "value": function () { return this.set_filename.apply(this, arguments); }
            },
            "setProgress": {
              "value": function () { return this.set_progress.apply(this, arguments); }
            },
            "setSeekFlags": {
              "value": function () { return this.set_seek_flags.apply(this, arguments); }
            },
            "setSubtitleFontName": {
              "value": function () { return this.set_subtitle_font_name.apply(this, arguments); }
            },
            "setSubtitleTrack": {
              "value": function () { return this.set_subtitle_track.apply(this, arguments); }
            },
            "setSubtitleUri": {
              "value": function () { return this.set_subtitle_uri.apply(this, arguments); }
            },
            "setUri": {
              "value": function () { return this.set_uri.apply(this, arguments); }
            },
            "setUserAgent": {
              "value": function () { return this.set_user_agent.apply(this, arguments); }
            },
            "audioStream": {
              "get": function () { return this.audio_stream; },
              "set": function (value) { this.audio_stream = value; }
            },
            "audioStreams": {
              "get": function () { return this.audio_streams; },
              "set": function (value) { this.audio_streams = value; }
            },
            "bufferFill": {
              "get": function () { return this.buffer_fill; },
              "set": function (value) { this.buffer_fill = value; }
            },
            "canSeek": {
              "get": function () { return this.can_seek; },
              "set": function (value) { this.can_seek = value; }
            },
            "inSeek": {
              "get": function () { return this.in_seek; },
              "set": function (value) { this.in_seek = value; }
            },
            "seekFlags": {
              "get": function () { return this.seek_flags; },
              "set": function (value) { this.seek_flags = value; }
            },
            "subtitleFontName": {
              "get": function () { return this.subtitle_font_name; },
              "set": function (value) { this.subtitle_font_name = value; }
            },
            "subtitleTrack": {
              "get": function () { return this.subtitle_track; },
              "set": function (value) { this.subtitle_track = value; }
            },
            "subtitleTracks": {
              "get": function () { return this.subtitle_tracks; },
              "set": function (value) { this.subtitle_tracks = value; }
            },
            "subtitleUri": {
              "get": function () { return this.subtitle_uri; },
              "set": function (value) { this.subtitle_uri = value; }
            },
            "userAgent": {
              "get": function () { return this.user_agent; },
              "set": function (value) { this.user_agent = value; }
            }
          },
          "static": {}
        },
        "VideoSink": {
          "prototype": {
            "getFrame": {
              "value": function () { return this.get_frame.apply(this, arguments); }
            },
            "getOverlays": {
              "value": function () { return this.get_overlays.apply(this, arguments); }
            },
            "getPipeline": {
              "value": function () { return this.get_pipeline.apply(this, arguments); }
            },
            "isReady": {
              "value": function () { return this.is_ready.apply(this, arguments); }
            },
            "setupPipeline": {
              "value": function () { return this.setup_pipeline.apply(this, arguments); }
            },
            "updatePriority": {
              "get": function () { return this.update_priority; },
              "set": function (value) { this.update_priority = value; }
            }
          },
          "static": {}
        }
      },
      "static": {
        "createVideoSink": {
          "value": function () { return this.create_video_sink.apply(this, arguments); }
        },
        "initWithArgs": {
          "value": function () { return this.init_with_args.apply(this, arguments); }
        }
      }
    },
    "ClutterX11": {
      "class": {
        "TexturePixmap": {
          "prototype": {
            "setAutomatic": {
              "value": function () { return this.set_automatic.apply(this, arguments); }
            },
            "setPixmap": {
              "value": function () { return this.set_pixmap.apply(this, arguments); }
            },
            "setWindow": {
              "value": function () { return this.set_window.apply(this, arguments); }
            },
            "syncWindow": {
              "value": function () { return this.sync_window.apply(this, arguments); }
            },
            "updateArea": {
              "value": function () { return this.update_area.apply(this, arguments); }
            },
            "automaticUpdates": {
              "get": function () { return this.automatic_updates; },
              "set": function (value) { this.automatic_updates = value; }
            },
            "pixmapDepth": {
              "get": function () { return this.pixmap_depth; },
              "set": function (value) { this.pixmap_depth = value; }
            },
            "pixmapHeight": {
              "get": function () { return this.pixmap_height; },
              "set": function (value) { this.pixmap_height = value; }
            },
            "pixmapWidth": {
              "get": function () { return this.pixmap_width; },
              "set": function (value) { this.pixmap_width = value; }
            },
            "windowMapped": {
              "get": function () { return this.window_mapped; },
              "set": function (value) { this.window_mapped = value; }
            },
            "windowOverrideRedirect": {
              "get": function () { return this.window_override_redirect; },
              "set": function (value) { this.window_override_redirect = value; }
            },
            "windowRedirectAutomatic": {
              "get": function () { return this.window_redirect_automatic; },
              "set": function (value) { this.window_redirect_automatic = value; }
            },
            "windowX": {
              "get": function () { return this.window_x; },
              "set": function (value) { this.window_x = value; }
            },
            "windowY": {
              "get": function () { return this.window_y; },
              "set": function (value) { this.window_y = value; }
            }
          },
          "static": {}
        }
      },
      "static": {
        "addFilter": {
          "value": function () { return this.add_filter.apply(this, arguments); }
        },
        "disableEventRetrieval": {
          "value": function () { return this.disable_event_retrieval.apply(this, arguments); }
        },
        "enableXinput": {
          "value": function () { return this.enable_xinput.apply(this, arguments); }
        },
        "eventGetKeyGroup": {
          "value": function () { return this.event_get_key_group.apply(this, arguments); }
        },
        "eventSequenceGetTouchDetail": {
          "value": function () { return this.event_sequence_get_touch_detail.apply(this, arguments); }
        },
        "getCurrentEventTime": {
          "value": function () { return this.get_current_event_time.apply(this, arguments); }
        },
        "getDefaultDisplay": {
          "value": function () { return this.get_default_display.apply(this, arguments); }
        },
        "getDefaultScreen": {
          "value": function () { return this.get_default_screen.apply(this, arguments); }
        },
        "getInputDevices": {
          "value": function () { return this.get_input_devices.apply(this, arguments); }
        },
        "getRootWindow": {
          "value": function () { return this.get_root_window.apply(this, arguments); }
        },
        "getStageFromWindow": {
          "value": function () { return this.get_stage_from_window.apply(this, arguments); }
        },
        "getStageVisual": {
          "value": function () { return this.get_stage_visual.apply(this, arguments); }
        },
        "getStageWindow": {
          "value": function () { return this.get_stage_window.apply(this, arguments); }
        },
        "getUseArgbVisual": {
          "value": function () { return this.get_use_argb_visual.apply(this, arguments); }
        },
        "getUseStereoStage": {
          "value": function () { return this.get_use_stereo_stage.apply(this, arguments); }
        },
        "getVisualInfo": {
          "value": function () { return this.get_visual_info.apply(this, arguments); }
        },
        "handleEvent": {
          "value": function () { return this.handle_event.apply(this, arguments); }
        },
        "hasCompositeExtension": {
          "value": function () { return this.has_composite_extension.apply(this, arguments); }
        },
        "hasEventRetrieval": {
          "value": function () { return this.has_event_retrieval.apply(this, arguments); }
        },
        "hasXinput": {
          "value": function () { return this.has_xinput.apply(this, arguments); }
        },
        "removeFilter": {
          "value": function () { return this.remove_filter.apply(this, arguments); }
        },
        "setDisplay": {
          "value": function () { return this.set_display.apply(this, arguments); }
        },
        "setStageForeign": {
          "value": function () { return this.set_stage_foreign.apply(this, arguments); }
        },
        "setUseArgbVisual": {
          "value": function () { return this.set_use_argb_visual.apply(this, arguments); }
        },
        "setUseStereoStage": {
          "value": function () { return this.set_use_stereo_stage.apply(this, arguments); }
        },
        "trapXErrors": {
          "value": function () { return this.trap_x_errors.apply(this, arguments); }
        },
        "untrapXErrors": {
          "value": function () { return this.untrap_x_errors.apply(this, arguments); }
        }
      }
    },
    "Cogl": {
      "class": {
        "AtlasTexture": {
          "prototype": {},
          "static": {}
        },
        "Attribute": {
          "prototype": {
            "getBuffer": {
              "value": function () { return this.get_buffer.apply(this, arguments); }
            },
            "getNormalized": {
              "value": function () { return this.get_normalized.apply(this, arguments); }
            },
            "setBuffer": {
              "value": function () { return this.set_buffer.apply(this, arguments); }
            },
            "setNormalized": {
              "value": function () { return this.set_normalized.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "AttributeBuffer": {
          "prototype": {},
          "static": {}
        },
        "Bitmap": {
          "prototype": {
            "getBuffer": {
              "value": function () { return this.get_buffer.apply(this, arguments); }
            },
            "getFormat": {
              "value": function () { return this.get_format.apply(this, arguments); }
            },
            "getHeight": {
              "value": function () { return this.get_height.apply(this, arguments); }
            },
            "getRowstride": {
              "value": function () { return this.get_rowstride.apply(this, arguments); }
            },
            "getWidth": {
              "value": function () { return this.get_width.apply(this, arguments); }
            }
          },
          "static": {
            "getSizeFromFile": {
              "value": function () { return this.get_size_from_file.apply(this, arguments); }
            }
          }
        },
        "Context": {
          "prototype": {
            "getDisplay": {
              "value": function () { return this.get_display.apply(this, arguments); }
            },
            "getRenderer": {
              "value": function () { return this.get_renderer.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Display": {
          "prototype": {
            "getRenderer": {
              "value": function () { return this.get_renderer.apply(this, arguments); }
            },
            "setOnscreenTemplate": {
              "value": function () { return this.set_onscreen_template.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Fixed": {
          "prototype": {},
          "static": {}
        },
        "FrameInfo": {
          "prototype": {
            "getFrameCounter": {
              "value": function () { return this.get_frame_counter.apply(this, arguments); }
            },
            "getOutput": {
              "value": function () { return this.get_output.apply(this, arguments); }
            },
            "getPresentationTime": {
              "value": function () { return this.get_presentation_time.apply(this, arguments); }
            },
            "getRefreshRate": {
              "value": function () { return this.get_refresh_rate.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "GLES2Context": {
          "prototype": {
            "getVtable": {
              "value": function () { return this.get_vtable.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "IndexBuffer": {
          "prototype": {},
          "static": {}
        },
        "Indices": {
          "prototype": {
            "getBuffer": {
              "value": function () { return this.get_buffer.apply(this, arguments); }
            },
            "getOffset": {
              "value": function () { return this.get_offset.apply(this, arguments); }
            },
            "getType": {
              "value": function () { return this.get_type.apply(this, arguments); }
            },
            "setOffset": {
              "value": function () { return this.set_offset.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "MatrixStack": {
          "prototype": {
            "getEntry": {
              "value": function () { return this.get_entry.apply(this, arguments); }
            },
            "getInverse": {
              "value": function () { return this.get_inverse.apply(this, arguments); }
            },
            "loadIdentity": {
              "value": function () { return this.load_identity.apply(this, arguments); }
            },
            "rotateEuler": {
              "value": function () { return this.rotate_euler.apply(this, arguments); }
            },
            "rotateQuaternion": {
              "value": function () { return this.rotate_quaternion.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Object": {
          "prototype": {
            "getUserData": {
              "value": function () { return this.get_user_data.apply(this, arguments); }
            },
            "setUserData": {
              "value": function () { return this.set_user_data.apply(this, arguments); }
            }
          },
          "static": {
            "valueGetObject": {
              "value": function () { return this.value_get_object.apply(this, arguments); }
            },
            "valueSetObject": {
              "value": function () { return this.value_set_object.apply(this, arguments); }
            }
          }
        },
        "Onscreen": {
          "prototype": {
            "addDirtyCallback": {
              "value": function () { return this.add_dirty_callback.apply(this, arguments); }
            },
            "addFrameCallback": {
              "value": function () { return this.add_frame_callback.apply(this, arguments); }
            },
            "addResizeCallback": {
              "value": function () { return this.add_resize_callback.apply(this, arguments); }
            },
            "addSwapBuffersCallback": {
              "value": function () { return this.add_swap_buffers_callback.apply(this, arguments); }
            },
            "getBufferAge": {
              "value": function () { return this.get_buffer_age.apply(this, arguments); }
            },
            "getFrameCounter": {
              "value": function () { return this.get_frame_counter.apply(this, arguments); }
            },
            "getResizable": {
              "value": function () { return this.get_resizable.apply(this, arguments); }
            },
            "removeDirtyCallback": {
              "value": function () { return this.remove_dirty_callback.apply(this, arguments); }
            },
            "removeFrameCallback": {
              "value": function () { return this.remove_frame_callback.apply(this, arguments); }
            },
            "removeResizeCallback": {
              "value": function () { return this.remove_resize_callback.apply(this, arguments); }
            },
            "removeSwapBuffersCallback": {
              "value": function () { return this.remove_swap_buffers_callback.apply(this, arguments); }
            },
            "setResizable": {
              "value": function () { return this.set_resizable.apply(this, arguments); }
            },
            "setSwapThrottled": {
              "value": function () { return this.set_swap_throttled.apply(this, arguments); }
            },
            "swapBuffers": {
              "value": function () { return this.swap_buffers.apply(this, arguments); }
            },
            "swapBuffersWithDamage": {
              "value": function () { return this.swap_buffers_with_damage.apply(this, arguments); }
            },
            "swapRegion": {
              "value": function () { return this.swap_region.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "OnscreenTemplate": {
          "prototype": {
            "setSamplesPerPixel": {
              "value": function () { return this.set_samples_per_pixel.apply(this, arguments); }
            },
            "setStereoEnabled": {
              "value": function () { return this.set_stereo_enabled.apply(this, arguments); }
            },
            "setSwapThrottled": {
              "value": function () { return this.set_swap_throttled.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Output": {
          "prototype": {
            "getHeight": {
              "value": function () { return this.get_height.apply(this, arguments); }
            },
            "getMmHeight": {
              "value": function () { return this.get_mm_height.apply(this, arguments); }
            },
            "getMmWidth": {
              "value": function () { return this.get_mm_width.apply(this, arguments); }
            },
            "getRefreshRate": {
              "value": function () { return this.get_refresh_rate.apply(this, arguments); }
            },
            "getSubpixelOrder": {
              "value": function () { return this.get_subpixel_order.apply(this, arguments); }
            },
            "getWidth": {
              "value": function () { return this.get_width.apply(this, arguments); }
            },
            "getX": {
              "value": function () { return this.get_x.apply(this, arguments); }
            },
            "getY": {
              "value": function () { return this.get_y.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Pipeline": {
          "prototype": {
            "addLayerSnippet": {
              "value": function () { return this.add_layer_snippet.apply(this, arguments); }
            },
            "addSnippet": {
              "value": function () { return this.add_snippet.apply(this, arguments); }
            },
            "foreachLayer": {
              "value": function () { return this.foreach_layer.apply(this, arguments); }
            },
            "getAlphaTestFunction": {
              "value": function () { return this.get_alpha_test_function.apply(this, arguments); }
            },
            "getAlphaTestReference": {
              "value": function () { return this.get_alpha_test_reference.apply(this, arguments); }
            },
            "getAmbient": {
              "value": function () { return this.get_ambient.apply(this, arguments); }
            },
            "getColor": {
              "value": function () { return this.get_color.apply(this, arguments); }
            },
            "getColorMask": {
              "value": function () { return this.get_color_mask.apply(this, arguments); }
            },
            "getCullFaceMode": {
              "value": function () { return this.get_cull_face_mode.apply(this, arguments); }
            },
            "getDepthState": {
              "value": function () { return this.get_depth_state.apply(this, arguments); }
            },
            "getDiffuse": {
              "value": function () { return this.get_diffuse.apply(this, arguments); }
            },
            "getEmission": {
              "value": function () { return this.get_emission.apply(this, arguments); }
            },
            "getFrontFaceWinding": {
              "value": function () { return this.get_front_face_winding.apply(this, arguments); }
            },
            "getLayerMagFilter": {
              "value": function () { return this.get_layer_mag_filter.apply(this, arguments); }
            },
            "getLayerMinFilter": {
              "value": function () { return this.get_layer_min_filter.apply(this, arguments); }
            },
            "getLayerPointSpriteCoordsEnabled": {
              "value": function () { return this.get_layer_point_sprite_coords_enabled.apply(this, arguments); }
            },
            "getLayerTexture": {
              "value": function () { return this.get_layer_texture.apply(this, arguments); }
            },
            "getLayerWrapModeP": {
              "value": function () { return this.get_layer_wrap_mode_p.apply(this, arguments); }
            },
            "getLayerWrapModeS": {
              "value": function () { return this.get_layer_wrap_mode_s.apply(this, arguments); }
            },
            "getLayerWrapModeT": {
              "value": function () { return this.get_layer_wrap_mode_t.apply(this, arguments); }
            },
            "getNLayers": {
              "value": function () { return this.get_n_layers.apply(this, arguments); }
            },
            "getPerVertexPointSize": {
              "value": function () { return this.get_per_vertex_point_size.apply(this, arguments); }
            },
            "getPointSize": {
              "value": function () { return this.get_point_size.apply(this, arguments); }
            },
            "getShininess": {
              "value": function () { return this.get_shininess.apply(this, arguments); }
            },
            "getSpecular": {
              "value": function () { return this.get_specular.apply(this, arguments); }
            },
            "getUniformLocation": {
              "value": function () { return this.get_uniform_location.apply(this, arguments); }
            },
            "getUserProgram": {
              "value": function () { return this.get_user_program.apply(this, arguments); }
            },
            "removeLayer": {
              "value": function () { return this.remove_layer.apply(this, arguments); }
            },
            "setAlphaTestFunction": {
              "value": function () { return this.set_alpha_test_function.apply(this, arguments); }
            },
            "setAmbient": {
              "value": function () { return this.set_ambient.apply(this, arguments); }
            },
            "setAmbientAndDiffuse": {
              "value": function () { return this.set_ambient_and_diffuse.apply(this, arguments); }
            },
            "setBlend": {
              "value": function () { return this.set_blend.apply(this, arguments); }
            },
            "setBlendConstant": {
              "value": function () { return this.set_blend_constant.apply(this, arguments); }
            },
            "setColor": {
              "value": function () { return this.set_color.apply(this, arguments); }
            },
            "setColor4f": {
              "value": function () { return this.set_color4f.apply(this, arguments); }
            },
            "setColor4ub": {
              "value": function () { return this.set_color4ub.apply(this, arguments); }
            },
            "setColorMask": {
              "value": function () { return this.set_color_mask.apply(this, arguments); }
            },
            "setCullFaceMode": {
              "value": function () { return this.set_cull_face_mode.apply(this, arguments); }
            },
            "setDepthState": {
              "value": function () { return this.set_depth_state.apply(this, arguments); }
            },
            "setDiffuse": {
              "value": function () { return this.set_diffuse.apply(this, arguments); }
            },
            "setEmission": {
              "value": function () { return this.set_emission.apply(this, arguments); }
            },
            "setFrontFaceWinding": {
              "value": function () { return this.set_front_face_winding.apply(this, arguments); }
            },
            "setLayerCombine": {
              "value": function () { return this.set_layer_combine.apply(this, arguments); }
            },
            "setLayerCombineConstant": {
              "value": function () { return this.set_layer_combine_constant.apply(this, arguments); }
            },
            "setLayerFilters": {
              "value": function () { return this.set_layer_filters.apply(this, arguments); }
            },
            "setLayerMatrix": {
              "value": function () { return this.set_layer_matrix.apply(this, arguments); }
            },
            "setLayerNullTexture": {
              "value": function () { return this.set_layer_null_texture.apply(this, arguments); }
            },
            "setLayerPointSpriteCoordsEnabled": {
              "value": function () { return this.set_layer_point_sprite_coords_enabled.apply(this, arguments); }
            },
            "setLayerTexture": {
              "value": function () { return this.set_layer_texture.apply(this, arguments); }
            },
            "setLayerWrapMode": {
              "value": function () { return this.set_layer_wrap_mode.apply(this, arguments); }
            },
            "setLayerWrapModeP": {
              "value": function () { return this.set_layer_wrap_mode_p.apply(this, arguments); }
            },
            "setLayerWrapModeS": {
              "value": function () { return this.set_layer_wrap_mode_s.apply(this, arguments); }
            },
            "setLayerWrapModeT": {
              "value": function () { return this.set_layer_wrap_mode_t.apply(this, arguments); }
            },
            "setPerVertexPointSize": {
              "value": function () { return this.set_per_vertex_point_size.apply(this, arguments); }
            },
            "setPointSize": {
              "value": function () { return this.set_point_size.apply(this, arguments); }
            },
            "setShininess": {
              "value": function () { return this.set_shininess.apply(this, arguments); }
            },
            "setSpecular": {
              "value": function () { return this.set_specular.apply(this, arguments); }
            },
            "setUniform1f": {
              "value": function () { return this.set_uniform_1f.apply(this, arguments); }
            },
            "setUniform1i": {
              "value": function () { return this.set_uniform_1i.apply(this, arguments); }
            },
            "setUniformFloat": {
              "value": function () { return this.set_uniform_float.apply(this, arguments); }
            },
            "setUniformInt": {
              "value": function () { return this.set_uniform_int.apply(this, arguments); }
            },
            "setUniformMatrix": {
              "value": function () { return this.set_uniform_matrix.apply(this, arguments); }
            },
            "setUserProgram": {
              "value": function () { return this.set_user_program.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "PixelBuffer": {
          "prototype": {},
          "static": {}
        },
        "Primitive": {
          "prototype": {
            "foreachAttribute": {
              "value": function () { return this.foreach_attribute.apply(this, arguments); }
            },
            "getFirstVertex": {
              "value": function () { return this.get_first_vertex.apply(this, arguments); }
            },
            "getIndices": {
              "value": function () { return this.get_indices.apply(this, arguments); }
            },
            "getMode": {
              "value": function () { return this.get_mode.apply(this, arguments); }
            },
            "getNVertices": {
              "value": function () { return this.get_n_vertices.apply(this, arguments); }
            },
            "setAttributes": {
              "value": function () { return this.set_attributes.apply(this, arguments); }
            },
            "setFirstVertex": {
              "value": function () { return this.set_first_vertex.apply(this, arguments); }
            },
            "setIndices": {
              "value": function () { return this.set_indices.apply(this, arguments); }
            },
            "setMode": {
              "value": function () { return this.set_mode.apply(this, arguments); }
            },
            "setNVertices": {
              "value": function () { return this.set_n_vertices.apply(this, arguments); }
            }
          },
          "static": {
            "textureSetAutoMipmap": {
              "value": function () { return this.texture_set_auto_mipmap.apply(this, arguments); }
            }
          }
        },
        "Renderer": {
          "prototype": {
            "addConstraint": {
              "value": function () { return this.add_constraint.apply(this, arguments); }
            },
            "checkOnscreenTemplate": {
              "value": function () { return this.check_onscreen_template.apply(this, arguments); }
            },
            "foreachOutput": {
              "value": function () { return this.foreach_output.apply(this, arguments); }
            },
            "getDriver": {
              "value": function () { return this.get_driver.apply(this, arguments); }
            },
            "getNFragmentTextureUnits": {
              "value": function () { return this.get_n_fragment_texture_units.apply(this, arguments); }
            },
            "getWinsysId": {
              "value": function () { return this.get_winsys_id.apply(this, arguments); }
            },
            "removeConstraint": {
              "value": function () { return this.remove_constraint.apply(this, arguments); }
            },
            "setDriver": {
              "value": function () { return this.set_driver.apply(this, arguments); }
            },
            "setWinsysId": {
              "value": function () { return this.set_winsys_id.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Snippet": {
          "prototype": {
            "getDeclarations": {
              "value": function () { return this.get_declarations.apply(this, arguments); }
            },
            "getHook": {
              "value": function () { return this.get_hook.apply(this, arguments); }
            },
            "getPost": {
              "value": function () { return this.get_post.apply(this, arguments); }
            },
            "getPre": {
              "value": function () { return this.get_pre.apply(this, arguments); }
            },
            "getReplace": {
              "value": function () { return this.get_replace.apply(this, arguments); }
            },
            "setDeclarations": {
              "value": function () { return this.set_declarations.apply(this, arguments); }
            },
            "setPost": {
              "value": function () { return this.set_post.apply(this, arguments); }
            },
            "setPre": {
              "value": function () { return this.set_pre.apply(this, arguments); }
            },
            "setReplace": {
              "value": function () { return this.set_replace.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "SubTexture": {
          "prototype": {
            "getParent": {
              "value": function () { return this.get_parent.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "SwapChain": {
          "prototype": {
            "setHasAlpha": {
              "value": function () { return this.set_has_alpha.apply(this, arguments); }
            },
            "setLength": {
              "value": function () { return this.set_length.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Texture2D": {
          "prototype": {},
          "static": {}
        },
        "Texture2DSliced": {
          "prototype": {},
          "static": {}
        },
        "Texture3D": {
          "prototype": {},
          "static": {}
        },
        "TexturePixmapX11": {
          "prototype": {
            "isUsingTfpExtension": {
              "value": function () { return this.is_using_tfp_extension.apply(this, arguments); }
            },
            "newRight": {
              "value": function () { return this.new_right.apply(this, arguments); }
            },
            "setDamageObject": {
              "value": function () { return this.set_damage_object.apply(this, arguments); }
            },
            "updateArea": {
              "value": function () { return this.update_area.apply(this, arguments); }
            }
          },
          "static": {
            "errorQuark": {
              "value": function () { return this.error_quark.apply(this, arguments); }
            }
          }
        },
        "TextureRectangle": {
          "prototype": {},
          "static": {}
        }
      },
      "static": {
        "bitmapErrorQuark": {
          "value": function () { return this.bitmap_error_quark.apply(this, arguments); }
        },
        "blendStringErrorQuark": {
          "value": function () { return this.blend_string_error_quark.apply(this, arguments); }
        },
        "bufferGetSize": {
          "value": function () { return this.buffer_get_size.apply(this, arguments); }
        },
        "bufferGetUpdateHint": {
          "value": function () { return this.buffer_get_update_hint.apply(this, arguments); }
        },
        "bufferMap": {
          "value": function () { return this.buffer_map.apply(this, arguments); }
        },
        "bufferMapRange": {
          "value": function () { return this.buffer_map_range.apply(this, arguments); }
        },
        "bufferSetData": {
          "value": function () { return this.buffer_set_data.apply(this, arguments); }
        },
        "bufferSetUpdateHint": {
          "value": function () { return this.buffer_set_update_hint.apply(this, arguments); }
        },
        "bufferUnmap": {
          "value": function () { return this.buffer_unmap.apply(this, arguments); }
        },
        "colorEqual": {
          "value": function () { return this.color_equal.apply(this, arguments); }
        },
        "colorInitFromHsl": {
          "value": function () { return this.color_init_from_hsl.apply(this, arguments); }
        },
        "debugMatrixEntryPrint": {
          "value": function () { return this.debug_matrix_entry_print.apply(this, arguments); }
        },
        "debugMatrixPrint": {
          "value": function () { return this.debug_matrix_print.apply(this, arguments); }
        },
        "debugObjectForeachType": {
          "value": function () { return this.debug_object_foreach_type.apply(this, arguments); }
        },
        "debugObjectPrintInstances": {
          "value": function () { return this.debug_object_print_instances.apply(this, arguments); }
        },
        "eglContextGetEglContext": {
          "value": function () { return this.egl_context_get_egl_context.apply(this, arguments); }
        },
        "eglContextGetEglDisplay": {
          "value": function () { return this.egl_context_get_egl_display.apply(this, arguments); }
        },
        "errorCopy": {
          "value": function () { return this.error_copy.apply(this, arguments); }
        },
        "errorFree": {
          "value": function () { return this.error_free.apply(this, arguments); }
        },
        "errorMatches": {
          "value": function () { return this.error_matches.apply(this, arguments); }
        },
        "eulerEqual": {
          "value": function () { return this.euler_equal.apply(this, arguments); }
        },
        "foreachFeature": {
          "value": function () { return this.foreach_feature.apply(this, arguments); }
        },
        "framebufferErrorQuark": {
          "value": function () { return this.framebuffer_error_quark.apply(this, arguments); }
        },
        "getClockTime": {
          "value": function () { return this.get_clock_time.apply(this, arguments); }
        },
        "getDrawFramebuffer": {
          "value": function () { return this.get_draw_framebuffer.apply(this, arguments); }
        },
        "getRectangleIndices": {
          "value": function () { return this.get_rectangle_indices.apply(this, arguments); }
        },
        "getStaticIdentityQuaternion": {
          "value": function () { return this.get_static_identity_quaternion.apply(this, arguments); }
        },
        "getStaticZeroQuaternion": {
          "value": function () { return this.get_static_zero_quaternion.apply(this, arguments); }
        },
        "gles2GetCurrentVtable": {
          "value": function () { return this.gles2_get_current_vtable.apply(this, arguments); }
        },
        "gles2Texture2dNewFromHandle": {
          "value": function () { return this.gles2_texture_2d_new_from_handle.apply(this, arguments); }
        },
        "gles2TextureGetHandle": {
          "value": function () { return this.gles2_texture_get_handle.apply(this, arguments); }
        },
        "glibRendererSourceNew": {
          "value": function () { return this.glib_renderer_source_new.apply(this, arguments); }
        },
        "glibSourceNew": {
          "value": function () { return this.glib_source_new.apply(this, arguments); }
        },
        "glxContextGetGlxContext": {
          "value": function () { return this.glx_context_get_glx_context.apply(this, arguments); }
        },
        "gtypeMatrixGetType": {
          "value": function () { return this.gtype_matrix_get_type.apply(this, arguments); }
        },
        "handleGetType": {
          "value": function () { return this.handle_get_type.apply(this, arguments); }
        },
        "handleRef": {
          "value": function () { return this.handle_ref.apply(this, arguments); }
        },
        "handleUnref": {
          "value": function () { return this.handle_unref.apply(this, arguments); }
        },
        "hasFeature": {
          "value": function () { return this.has_feature.apply(this, arguments); }
        },
        "hasFeatures": {
          "value": function () { return this.has_features.apply(this, arguments); }
        },
        "isAtlasTexture": {
          "value": function () { return this.is_atlas_texture.apply(this, arguments); }
        },
        "isAttribute": {
          "value": function () { return this.is_attribute.apply(this, arguments); }
        },
        "isAttributeBuffer": {
          "value": function () { return this.is_attribute_buffer.apply(this, arguments); }
        },
        "isBitmap": {
          "value": function () { return this.is_bitmap.apply(this, arguments); }
        },
        "isBuffer": {
          "value": function () { return this.is_buffer.apply(this, arguments); }
        },
        "isContext": {
          "value": function () { return this.is_context.apply(this, arguments); }
        },
        "isDisplay": {
          "value": function () { return this.is_display.apply(this, arguments); }
        },
        "isFrameInfo": {
          "value": function () { return this.is_frame_info.apply(this, arguments); }
        },
        "isFramebuffer": {
          "value": function () { return this.is_framebuffer.apply(this, arguments); }
        },
        "isGles2Context": {
          "value": function () { return this.is_gles2_context.apply(this, arguments); }
        },
        "isIndexBuffer": {
          "value": function () { return this.is_index_buffer.apply(this, arguments); }
        },
        "isIndices": {
          "value": function () { return this.is_indices.apply(this, arguments); }
        },
        "isMatrixStack": {
          "value": function () { return this.is_matrix_stack.apply(this, arguments); }
        },
        "isOnscreen": {
          "value": function () { return this.is_onscreen.apply(this, arguments); }
        },
        "isOnscreenTemplate": {
          "value": function () { return this.is_onscreen_template.apply(this, arguments); }
        },
        "isOutput": {
          "value": function () { return this.is_output.apply(this, arguments); }
        },
        "isPipeline": {
          "value": function () { return this.is_pipeline.apply(this, arguments); }
        },
        "isPixelBuffer": {
          "value": function () { return this.is_pixel_buffer.apply(this, arguments); }
        },
        "isPrimitive": {
          "value": function () { return this.is_primitive.apply(this, arguments); }
        },
        "isPrimitiveTexture": {
          "value": function () { return this.is_primitive_texture.apply(this, arguments); }
        },
        "isRenderer": {
          "value": function () { return this.is_renderer.apply(this, arguments); }
        },
        "isSnippet": {
          "value": function () { return this.is_snippet.apply(this, arguments); }
        },
        "isSubTexture": {
          "value": function () { return this.is_sub_texture.apply(this, arguments); }
        },
        "isSwapChain": {
          "value": function () { return this.is_swap_chain.apply(this, arguments); }
        },
        "isTexture": {
          "value": function () { return this.is_texture.apply(this, arguments); }
        },
        "isTexture2d": {
          "value": function () { return this.is_texture_2d.apply(this, arguments); }
        },
        "isTexture2dSliced": {
          "value": function () { return this.is_texture_2d_sliced.apply(this, arguments); }
        },
        "isTexture3d": {
          "value": function () { return this.is_texture_3d.apply(this, arguments); }
        },
        "isTexturePixmapX11": {
          "value": function () { return this.is_texture_pixmap_x11.apply(this, arguments); }
        },
        "isTextureRectangle": {
          "value": function () { return this.is_texture_rectangle.apply(this, arguments); }
        },
        "kmsDisplayQueueModesReset": {
          "value": function () { return this.kms_display_queue_modes_reset.apply(this, arguments); }
        },
        "kmsDisplaySetIgnoreCrtc": {
          "value": function () { return this.kms_display_set_ignore_crtc.apply(this, arguments); }
        },
        "kmsDisplaySetLayout": {
          "value": function () { return this.kms_display_set_layout.apply(this, arguments); }
        },
        "kmsRendererGetGbm": {
          "value": function () { return this.kms_renderer_get_gbm.apply(this, arguments); }
        },
        "kmsRendererGetKmsFd": {
          "value": function () { return this.kms_renderer_get_kms_fd.apply(this, arguments); }
        },
        "kmsRendererSetKmsFd": {
          "value": function () { return this.kms_renderer_set_kms_fd.apply(this, arguments); }
        },
        "matrixEqual": {
          "value": function () { return this.matrix_equal.apply(this, arguments); }
        },
        "metaTextureForeachInRegion": {
          "value": function () { return this.meta_texture_foreach_in_region.apply(this, arguments); }
        },
        "pollRendererDispatch": {
          "value": function () { return this.poll_renderer_dispatch.apply(this, arguments); }
        },
        "pollRendererGetInfo": {
          "value": function () { return this.poll_renderer_get_info.apply(this, arguments); }
        },
        "popGles2Context": {
          "value": function () { return this.pop_gles2_context.apply(this, arguments); }
        },
        "pushGles2Context": {
          "value": function () { return this.push_gles2_context.apply(this, arguments); }
        },
        "quaternionEqual": {
          "value": function () { return this.quaternion_equal.apply(this, arguments); }
        },
        "rendererErrorQuark": {
          "value": function () { return this.renderer_error_quark.apply(this, arguments); }
        },
        "textureErrorQuark": {
          "value": function () { return this.texture_error_quark.apply(this, arguments); }
        },
        "vector3Add": {
          "value": function () { return this.vector3_add.apply(this, arguments); }
        },
        "vector3Copy": {
          "value": function () { return this.vector3_copy.apply(this, arguments); }
        },
        "vector3CrossProduct": {
          "value": function () { return this.vector3_cross_product.apply(this, arguments); }
        },
        "vector3Distance": {
          "value": function () { return this.vector3_distance.apply(this, arguments); }
        },
        "vector3DivideScalar": {
          "value": function () { return this.vector3_divide_scalar.apply(this, arguments); }
        },
        "vector3DotProduct": {
          "value": function () { return this.vector3_dot_product.apply(this, arguments); }
        },
        "vector3Equal": {
          "value": function () { return this.vector3_equal.apply(this, arguments); }
        },
        "vector3EqualWithEpsilon": {
          "value": function () { return this.vector3_equal_with_epsilon.apply(this, arguments); }
        },
        "vector3Free": {
          "value": function () { return this.vector3_free.apply(this, arguments); }
        },
        "vector3Init": {
          "value": function () { return this.vector3_init.apply(this, arguments); }
        },
        "vector3InitZero": {
          "value": function () { return this.vector3_init_zero.apply(this, arguments); }
        },
        "vector3Invert": {
          "value": function () { return this.vector3_invert.apply(this, arguments); }
        },
        "vector3Magnitude": {
          "value": function () { return this.vector3_magnitude.apply(this, arguments); }
        },
        "vector3MultiplyScalar": {
          "value": function () { return this.vector3_multiply_scalar.apply(this, arguments); }
        },
        "vector3Normalize": {
          "value": function () { return this.vector3_normalize.apply(this, arguments); }
        },
        "vector3Subtract": {
          "value": function () { return this.vector3_subtract.apply(this, arguments); }
        },
        "waylandDisplaySetCompositorDisplay": {
          "value": function () { return this.wayland_display_set_compositor_display.apply(this, arguments); }
        },
        "waylandOnscreenGetShellSurface": {
          "value": function () { return this.wayland_onscreen_get_shell_surface.apply(this, arguments); }
        },
        "waylandOnscreenGetSurface": {
          "value": function () { return this.wayland_onscreen_get_surface.apply(this, arguments); }
        },
        "waylandOnscreenResize": {
          "value": function () { return this.wayland_onscreen_resize.apply(this, arguments); }
        },
        "waylandOnscreenSetForeignSurface": {
          "value": function () { return this.wayland_onscreen_set_foreign_surface.apply(this, arguments); }
        },
        "waylandRendererGetDisplay": {
          "value": function () { return this.wayland_renderer_get_display.apply(this, arguments); }
        },
        "waylandRendererSetEventDispatchEnabled": {
          "value": function () { return this.wayland_renderer_set_event_dispatch_enabled.apply(this, arguments); }
        },
        "waylandRendererSetForeignDisplay": {
          "value": function () { return this.wayland_renderer_set_foreign_display.apply(this, arguments); }
        },
        "waylandTexture2dNewFromBuffer": {
          "value": function () { return this.wayland_texture_2d_new_from_buffer.apply(this, arguments); }
        },
        "waylandTextureSetRegionFromShmBuffer": {
          "value": function () { return this.wayland_texture_set_region_from_shm_buffer.apply(this, arguments); }
        },
        "x11OnscreenGetVisualXid": {
          "value": function () { return this.x11_onscreen_get_visual_xid.apply(this, arguments); }
        },
        "x11OnscreenGetWindowXid": {
          "value": function () { return this.x11_onscreen_get_window_xid.apply(this, arguments); }
        },
        "x11OnscreenSetForeignWindowXid": {
          "value": function () { return this.x11_onscreen_set_foreign_window_xid.apply(this, arguments); }
        },
        "xlibGetDisplay": {
          "value": function () { return this.xlib_get_display.apply(this, arguments); }
        },
        "xlibHandleEvent": {
          "value": function () { return this.xlib_handle_event.apply(this, arguments); }
        },
        "xlibSetDisplay": {
          "value": function () { return this.xlib_set_display.apply(this, arguments); }
        }
      }
    },
    "CoglPango": {
      "class": {
        "Renderer": {
          "prototype": {},
          "static": {}
        }
      },
      "static": {
        "ensureGlyphCacheForLayout": {
          "value": function () { return this.ensure_glyph_cache_for_layout.apply(this, arguments); }
        },
        "fontMapClearGlyphCache": {
          "value": function () { return this.font_map_clear_glyph_cache.apply(this, arguments); }
        },
        "fontMapCreateContext": {
          "value": function () { return this.font_map_create_context.apply(this, arguments); }
        },
        "fontMapGetRenderer": {
          "value": function () { return this.font_map_get_renderer.apply(this, arguments); }
        },
        "fontMapGetUseMipmapping": {
          "value": function () { return this.font_map_get_use_mipmapping.apply(this, arguments); }
        },
        "fontMapNew": {
          "value": function () { return this.font_map_new.apply(this, arguments); }
        },
        "fontMapSetResolution": {
          "value": function () { return this.font_map_set_resolution.apply(this, arguments); }
        },
        "fontMapSetUseMipmapping": {
          "value": function () { return this.font_map_set_use_mipmapping.apply(this, arguments); }
        },
        "renderLayout": {
          "value": function () { return this.render_layout.apply(this, arguments); }
        },
        "renderLayoutLine": {
          "value": function () { return this.render_layout_line.apply(this, arguments); }
        },
        "renderLayoutSubpixel": {
          "value": function () { return this.render_layout_subpixel.apply(this, arguments); }
        },
        "showLayout": {
          "value": function () { return this.show_layout.apply(this, arguments); }
        },
        "showLayoutLine": {
          "value": function () { return this.show_layout_line.apply(this, arguments); }
        }
      }
    },
    "ColorHug": {
      "class": {
        "DeviceQueue": {
          "prototype": {
            "bootFlash": {
              "value": function () { return this.boot_flash.apply(this, arguments); }
            },
            "clearCalibration": {
              "value": function () { return this.clear_calibration.apply(this, arguments); }
            },
            "eraseFlash": {
              "value": function () { return this.erase_flash.apply(this, arguments); }
            },
            "getAdcVrefNeg": {
              "value": function () { return this.get_adc_vref_neg.apply(this, arguments); }
            },
            "getAdcVrefPos": {
              "value": function () { return this.get_adc_vref_pos.apply(this, arguments); }
            },
            "getCalibration": {
              "value": function () { return this.get_calibration.apply(this, arguments); }
            },
            "getCalibrationMap": {
              "value": function () { return this.get_calibration_map.apply(this, arguments); }
            },
            "getCcdCalibration": {
              "value": function () { return this.get_ccd_calibration.apply(this, arguments); }
            },
            "getColorSelect": {
              "value": function () { return this.get_color_select.apply(this, arguments); }
            },
            "getDacValue": {
              "value": function () { return this.get_dac_value.apply(this, arguments); }
            },
            "getDarkOffsets": {
              "value": function () { return this.get_dark_offsets.apply(this, arguments); }
            },
            "getFirmwareVer": {
              "value": function () { return this.get_firmware_ver.apply(this, arguments); }
            },
            "getHardwareVersion": {
              "value": function () { return this.get_hardware_version.apply(this, arguments); }
            },
            "getIntegralTime": {
              "value": function () { return this.get_integral_time.apply(this, arguments); }
            },
            "getLeds": {
              "value": function () { return this.get_leds.apply(this, arguments); }
            },
            "getMeasureMode": {
              "value": function () { return this.get_measure_mode.apply(this, arguments); }
            },
            "getMultiplier": {
              "value": function () { return this.get_multiplier.apply(this, arguments); }
            },
            "getOwnerEmail": {
              "value": function () { return this.get_owner_email.apply(this, arguments); }
            },
            "getOwnerName": {
              "value": function () { return this.get_owner_name.apply(this, arguments); }
            },
            "getPcbErrata": {
              "value": function () { return this.get_pcb_errata.apply(this, arguments); }
            },
            "getPostScale": {
              "value": function () { return this.get_post_scale.apply(this, arguments); }
            },
            "getPreScale": {
              "value": function () { return this.get_pre_scale.apply(this, arguments); }
            },
            "getRemoteHash": {
              "value": function () { return this.get_remote_hash.apply(this, arguments); }
            },
            "getSerialNumber": {
              "value": function () { return this.get_serial_number.apply(this, arguments); }
            },
            "getTemperature": {
              "value": function () { return this.get_temperature.apply(this, arguments); }
            },
            "processAsync": {
              "value": function () { return this.process_async.apply(this, arguments); }
            },
            "processFinish": {
              "value": function () { return this.process_finish.apply(this, arguments); }
            },
            "readFirmware": {
              "value": function () { return this.read_firmware.apply(this, arguments); }
            },
            "readFlash": {
              "value": function () { return this.read_flash.apply(this, arguments); }
            },
            "readSram": {
              "value": function () { return this.read_sram.apply(this, arguments); }
            },
            "selfTest": {
              "value": function () { return this.self_test.apply(this, arguments); }
            },
            "setCalibration": {
              "value": function () { return this.set_calibration.apply(this, arguments); }
            },
            "setCalibrationCcmx": {
              "value": function () { return this.set_calibration_ccmx.apply(this, arguments); }
            },
            "setCalibrationMap": {
              "value": function () { return this.set_calibration_map.apply(this, arguments); }
            },
            "setCcdCalibration": {
              "value": function () { return this.set_ccd_calibration.apply(this, arguments); }
            },
            "setColorSelect": {
              "value": function () { return this.set_color_select.apply(this, arguments); }
            },
            "setDacValue": {
              "value": function () { return this.set_dac_value.apply(this, arguments); }
            },
            "setDarkOffsets": {
              "value": function () { return this.set_dark_offsets.apply(this, arguments); }
            },
            "setFlashSuccess": {
              "value": function () { return this.set_flash_success.apply(this, arguments); }
            },
            "setIntegralTime": {
              "value": function () { return this.set_integral_time.apply(this, arguments); }
            },
            "setLeds": {
              "value": function () { return this.set_leds.apply(this, arguments); }
            },
            "setMeasureMode": {
              "value": function () { return this.set_measure_mode.apply(this, arguments); }
            },
            "setMultiplier": {
              "value": function () { return this.set_multiplier.apply(this, arguments); }
            },
            "setOwnerEmail": {
              "value": function () { return this.set_owner_email.apply(this, arguments); }
            },
            "setOwnerName": {
              "value": function () { return this.set_owner_name.apply(this, arguments); }
            },
            "setPcbErrata": {
              "value": function () { return this.set_pcb_errata.apply(this, arguments); }
            },
            "setPostScale": {
              "value": function () { return this.set_post_scale.apply(this, arguments); }
            },
            "setPreScale": {
              "value": function () { return this.set_pre_scale.apply(this, arguments); }
            },
            "setRemoteHash": {
              "value": function () { return this.set_remote_hash.apply(this, arguments); }
            },
            "setSerialNumber": {
              "value": function () { return this.set_serial_number.apply(this, arguments); }
            },
            "takeReadingArray": {
              "value": function () { return this.take_reading_array.apply(this, arguments); }
            },
            "takeReadingRaw": {
              "value": function () { return this.take_reading_raw.apply(this, arguments); }
            },
            "takeReadingSpectral": {
              "value": function () { return this.take_reading_spectral.apply(this, arguments); }
            },
            "takeReadings": {
              "value": function () { return this.take_readings.apply(this, arguments); }
            },
            "takeReadingsXyz": {
              "value": function () { return this.take_readings_xyz.apply(this, arguments); }
            },
            "verifyFirmware": {
              "value": function () { return this.verify_firmware.apply(this, arguments); }
            },
            "verifyFlash": {
              "value": function () { return this.verify_flash.apply(this, arguments); }
            },
            "writeEeprom": {
              "value": function () { return this.write_eeprom.apply(this, arguments); }
            },
            "writeFirmware": {
              "value": function () { return this.write_firmware.apply(this, arguments); }
            },
            "writeFlash": {
              "value": function () { return this.write_flash.apply(this, arguments); }
            },
            "writeSram": {
              "value": function () { return this.write_sram.apply(this, arguments); }
            }
          },
          "static": {}
        }
      },
      "static": {
        "colorSelectToString": {
          "value": function () { return this.color_select_to_string.apply(this, arguments); }
        },
        "commandToString": {
          "value": function () { return this.command_to_string.apply(this, arguments); }
        },
        "deviceCheckFirmware": {
          "value": function () { return this.device_check_firmware.apply(this, arguments); }
        },
        "deviceClose": {
          "value": function () { return this.device_close.apply(this, arguments); }
        },
        "deviceErrorQuark": {
          "value": function () { return this.device_error_quark.apply(this, arguments); }
        },
        "deviceGetGuid": {
          "value": function () { return this.device_get_guid.apply(this, arguments); }
        },
        "deviceGetMode": {
          "value": function () { return this.device_get_mode.apply(this, arguments); }
        },
        "deviceGetRuncodeAddress": {
          "value": function () { return this.device_get_runcode_address.apply(this, arguments); }
        },
        "deviceIsColorhug": {
          "value": function () { return this.device_is_colorhug.apply(this, arguments); }
        },
        "deviceModeFromFirmware": {
          "value": function () { return this.device_mode_from_firmware.apply(this, arguments); }
        },
        "deviceModeToString": {
          "value": function () { return this.device_mode_to_string.apply(this, arguments); }
        },
        "deviceOpen": {
          "value": function () { return this.device_open.apply(this, arguments); }
        },
        "deviceWriteCommand": {
          "value": function () { return this.device_write_command.apply(this, arguments); }
        },
        "deviceWriteCommandAsync": {
          "value": function () { return this.device_write_command_async.apply(this, arguments); }
        },
        "deviceWriteCommandFinish": {
          "value": function () { return this.device_write_command_finish.apply(this, arguments); }
        },
        "measureModeToString": {
          "value": function () { return this.measure_mode_to_string.apply(this, arguments); }
        },
        "multiplierToString": {
          "value": function () { return this.multiplier_to_string.apply(this, arguments); }
        },
        "sha1Parse": {
          "value": function () { return this.sha1_parse.apply(this, arguments); }
        }
      }
    },
    "Colord": {
      "class": {
        "Client": {
          "prototype": {
            "connectFinish": {
              "value": function () { return this.connect_finish.apply(this, arguments); }
            },
            "connectSync": {
              "value": function () { return this.connect_sync.apply(this, arguments); }
            },
            "createDevice": {
              "value": function () { return this.create_device.apply(this, arguments); }
            },
            "createDeviceFinish": {
              "value": function () { return this.create_device_finish.apply(this, arguments); }
            },
            "createDeviceSync": {
              "value": function () { return this.create_device_sync.apply(this, arguments); }
            },
            "createProfile": {
              "value": function () { return this.create_profile.apply(this, arguments); }
            },
            "createProfileFinish": {
              "value": function () { return this.create_profile_finish.apply(this, arguments); }
            },
            "createProfileForIcc": {
              "value": function () { return this.create_profile_for_icc.apply(this, arguments); }
            },
            "createProfileForIccFinish": {
              "value": function () { return this.create_profile_for_icc_finish.apply(this, arguments); }
            },
            "createProfileForIccSync": {
              "value": function () { return this.create_profile_for_icc_sync.apply(this, arguments); }
            },
            "createProfileSync": {
              "value": function () { return this.create_profile_sync.apply(this, arguments); }
            },
            "deleteDevice": {
              "value": function () { return this.delete_device.apply(this, arguments); }
            },
            "deleteDeviceFinish": {
              "value": function () { return this.delete_device_finish.apply(this, arguments); }
            },
            "deleteDeviceSync": {
              "value": function () { return this.delete_device_sync.apply(this, arguments); }
            },
            "deleteProfile": {
              "value": function () { return this.delete_profile.apply(this, arguments); }
            },
            "deleteProfileFinish": {
              "value": function () { return this.delete_profile_finish.apply(this, arguments); }
            },
            "deleteProfileSync": {
              "value": function () { return this.delete_profile_sync.apply(this, arguments); }
            },
            "findDevice": {
              "value": function () { return this.find_device.apply(this, arguments); }
            },
            "findDeviceByProperty": {
              "value": function () { return this.find_device_by_property.apply(this, arguments); }
            },
            "findDeviceByPropertyFinish": {
              "value": function () { return this.find_device_by_property_finish.apply(this, arguments); }
            },
            "findDeviceByPropertySync": {
              "value": function () { return this.find_device_by_property_sync.apply(this, arguments); }
            },
            "findDeviceFinish": {
              "value": function () { return this.find_device_finish.apply(this, arguments); }
            },
            "findDeviceSync": {
              "value": function () { return this.find_device_sync.apply(this, arguments); }
            },
            "findProfile": {
              "value": function () { return this.find_profile.apply(this, arguments); }
            },
            "findProfileByFilename": {
              "value": function () { return this.find_profile_by_filename.apply(this, arguments); }
            },
            "findProfileByFilenameFinish": {
              "value": function () { return this.find_profile_by_filename_finish.apply(this, arguments); }
            },
            "findProfileByFilenameSync": {
              "value": function () { return this.find_profile_by_filename_sync.apply(this, arguments); }
            },
            "findProfileByProperty": {
              "value": function () { return this.find_profile_by_property.apply(this, arguments); }
            },
            "findProfileByPropertyFinish": {
              "value": function () { return this.find_profile_by_property_finish.apply(this, arguments); }
            },
            "findProfileByPropertySync": {
              "value": function () { return this.find_profile_by_property_sync.apply(this, arguments); }
            },
            "findProfileFinish": {
              "value": function () { return this.find_profile_finish.apply(this, arguments); }
            },
            "findProfileSync": {
              "value": function () { return this.find_profile_sync.apply(this, arguments); }
            },
            "findSensor": {
              "value": function () { return this.find_sensor.apply(this, arguments); }
            },
            "findSensorFinish": {
              "value": function () { return this.find_sensor_finish.apply(this, arguments); }
            },
            "findSensorSync": {
              "value": function () { return this.find_sensor_sync.apply(this, arguments); }
            },
            "getConnected": {
              "value": function () { return this.get_connected.apply(this, arguments); }
            },
            "getDaemonVersion": {
              "value": function () { return this.get_daemon_version.apply(this, arguments); }
            },
            "getDevices": {
              "value": function () { return this.get_devices.apply(this, arguments); }
            },
            "getDevicesByKind": {
              "value": function () { return this.get_devices_by_kind.apply(this, arguments); }
            },
            "getDevicesByKindFinish": {
              "value": function () { return this.get_devices_by_kind_finish.apply(this, arguments); }
            },
            "getDevicesByKindSync": {
              "value": function () { return this.get_devices_by_kind_sync.apply(this, arguments); }
            },
            "getDevicesFinish": {
              "value": function () { return this.get_devices_finish.apply(this, arguments); }
            },
            "getDevicesSync": {
              "value": function () { return this.get_devices_sync.apply(this, arguments); }
            },
            "getHasServer": {
              "value": function () { return this.get_has_server.apply(this, arguments); }
            },
            "getProfiles": {
              "value": function () { return this.get_profiles.apply(this, arguments); }
            },
            "getProfilesFinish": {
              "value": function () { return this.get_profiles_finish.apply(this, arguments); }
            },
            "getProfilesSync": {
              "value": function () { return this.get_profiles_sync.apply(this, arguments); }
            },
            "getSensors": {
              "value": function () { return this.get_sensors.apply(this, arguments); }
            },
            "getSensorsFinish": {
              "value": function () { return this.get_sensors_finish.apply(this, arguments); }
            },
            "getSensorsSync": {
              "value": function () { return this.get_sensors_sync.apply(this, arguments); }
            },
            "getStandardSpace": {
              "value": function () { return this.get_standard_space.apply(this, arguments); }
            },
            "getStandardSpaceFinish": {
              "value": function () { return this.get_standard_space_finish.apply(this, arguments); }
            },
            "getStandardSpaceSync": {
              "value": function () { return this.get_standard_space_sync.apply(this, arguments); }
            },
            "getSystemModel": {
              "value": function () { return this.get_system_model.apply(this, arguments); }
            },
            "getSystemVendor": {
              "value": function () { return this.get_system_vendor.apply(this, arguments); }
            },
            "importProfile": {
              "value": function () { return this.import_profile.apply(this, arguments); }
            },
            "importProfileFinish": {
              "value": function () { return this.import_profile_finish.apply(this, arguments); }
            },
            "importProfileSync": {
              "value": function () { return this.import_profile_sync.apply(this, arguments); }
            },
            "daemonVersion": {
              "get": function () { return this.daemon_version; },
              "set": function (value) { this.daemon_version = value; }
            },
            "systemModel": {
              "get": function () { return this.system_model; },
              "set": function (value) { this.system_model = value; }
            },
            "systemVendor": {
              "get": function () { return this.system_vendor; },
              "set": function (value) { this.system_vendor = value; }
            }
          },
          "static": {
            "errorFromString": {
              "value": function () { return this.error_from_string.apply(this, arguments); }
            },
            "errorQuark": {
              "value": function () { return this.error_quark.apply(this, arguments); }
            },
            "errorToString": {
              "value": function () { return this.error_to_string.apply(this, arguments); }
            }
          }
        },
        "Device": {
          "prototype": {
            "addProfile": {
              "value": function () { return this.add_profile.apply(this, arguments); }
            },
            "addProfileFinish": {
              "value": function () { return this.add_profile_finish.apply(this, arguments); }
            },
            "addProfileSync": {
              "value": function () { return this.add_profile_sync.apply(this, arguments); }
            },
            "connectFinish": {
              "value": function () { return this.connect_finish.apply(this, arguments); }
            },
            "connectSync": {
              "value": function () { return this.connect_sync.apply(this, arguments); }
            },
            "getColorspace": {
              "value": function () { return this.get_colorspace.apply(this, arguments); }
            },
            "getConnected": {
              "value": function () { return this.get_connected.apply(this, arguments); }
            },
            "getCreated": {
              "value": function () { return this.get_created.apply(this, arguments); }
            },
            "getDefaultProfile": {
              "value": function () { return this.get_default_profile.apply(this, arguments); }
            },
            "getEmbedded": {
              "value": function () { return this.get_embedded.apply(this, arguments); }
            },
            "getEnabled": {
              "value": function () { return this.get_enabled.apply(this, arguments); }
            },
            "getFormat": {
              "value": function () { return this.get_format.apply(this, arguments); }
            },
            "getId": {
              "value": function () { return this.get_id.apply(this, arguments); }
            },
            "getKind": {
              "value": function () { return this.get_kind.apply(this, arguments); }
            },
            "getMetadata": {
              "value": function () { return this.get_metadata.apply(this, arguments); }
            },
            "getMetadataItem": {
              "value": function () { return this.get_metadata_item.apply(this, arguments); }
            },
            "getMode": {
              "value": function () { return this.get_mode.apply(this, arguments); }
            },
            "getModel": {
              "value": function () { return this.get_model.apply(this, arguments); }
            },
            "getModified": {
              "value": function () { return this.get_modified.apply(this, arguments); }
            },
            "getObjectPath": {
              "value": function () { return this.get_object_path.apply(this, arguments); }
            },
            "getOwner": {
              "value": function () { return this.get_owner.apply(this, arguments); }
            },
            "getProfileForQualifiers": {
              "value": function () { return this.get_profile_for_qualifiers.apply(this, arguments); }
            },
            "getProfileForQualifiersFinish": {
              "value": function () { return this.get_profile_for_qualifiers_finish.apply(this, arguments); }
            },
            "getProfileForQualifiersSync": {
              "value": function () { return this.get_profile_for_qualifiers_sync.apply(this, arguments); }
            },
            "getProfileRelation": {
              "value": function () { return this.get_profile_relation.apply(this, arguments); }
            },
            "getProfileRelationFinish": {
              "value": function () { return this.get_profile_relation_finish.apply(this, arguments); }
            },
            "getProfileRelationSync": {
              "value": function () { return this.get_profile_relation_sync.apply(this, arguments); }
            },
            "getProfiles": {
              "value": function () { return this.get_profiles.apply(this, arguments); }
            },
            "getProfilingInhibitors": {
              "value": function () { return this.get_profiling_inhibitors.apply(this, arguments); }
            },
            "getScope": {
              "value": function () { return this.get_scope.apply(this, arguments); }
            },
            "getSeat": {
              "value": function () { return this.get_seat.apply(this, arguments); }
            },
            "getSerial": {
              "value": function () { return this.get_serial.apply(this, arguments); }
            },
            "getVendor": {
              "value": function () { return this.get_vendor.apply(this, arguments); }
            },
            "makeProfileDefault": {
              "value": function () { return this.make_profile_default.apply(this, arguments); }
            },
            "makeProfileDefaultFinish": {
              "value": function () { return this.make_profile_default_finish.apply(this, arguments); }
            },
            "makeProfileDefaultSync": {
              "value": function () { return this.make_profile_default_sync.apply(this, arguments); }
            },
            "profilingInhibit": {
              "value": function () { return this.profiling_inhibit.apply(this, arguments); }
            },
            "profilingInhibitFinish": {
              "value": function () { return this.profiling_inhibit_finish.apply(this, arguments); }
            },
            "profilingInhibitSync": {
              "value": function () { return this.profiling_inhibit_sync.apply(this, arguments); }
            },
            "profilingUninhibit": {
              "value": function () { return this.profiling_uninhibit.apply(this, arguments); }
            },
            "profilingUninhibitFinish": {
              "value": function () { return this.profiling_uninhibit_finish.apply(this, arguments); }
            },
            "profilingUninhibitSync": {
              "value": function () { return this.profiling_uninhibit_sync.apply(this, arguments); }
            },
            "removeProfile": {
              "value": function () { return this.remove_profile.apply(this, arguments); }
            },
            "removeProfileFinish": {
              "value": function () { return this.remove_profile_finish.apply(this, arguments); }
            },
            "removeProfileSync": {
              "value": function () { return this.remove_profile_sync.apply(this, arguments); }
            },
            "setColorspaceSync": {
              "value": function () { return this.set_colorspace_sync.apply(this, arguments); }
            },
            "setEnabled": {
              "value": function () { return this.set_enabled.apply(this, arguments); }
            },
            "setEnabledFinish": {
              "value": function () { return this.set_enabled_finish.apply(this, arguments); }
            },
            "setEnabledSync": {
              "value": function () { return this.set_enabled_sync.apply(this, arguments); }
            },
            "setKindSync": {
              "value": function () { return this.set_kind_sync.apply(this, arguments); }
            },
            "setModeSync": {
              "value": function () { return this.set_mode_sync.apply(this, arguments); }
            },
            "setModelSync": {
              "value": function () { return this.set_model_sync.apply(this, arguments); }
            },
            "setObjectPath": {
              "value": function () { return this.set_object_path.apply(this, arguments); }
            },
            "setProperty": {
              "value": function () { return this.set_property.apply(this, arguments); }
            },
            "setPropertyFinish": {
              "value": function () { return this.set_property_finish.apply(this, arguments); }
            },
            "setPropertySync": {
              "value": function () { return this.set_property_sync.apply(this, arguments); }
            },
            "setSerialSync": {
              "value": function () { return this.set_serial_sync.apply(this, arguments); }
            },
            "setVendorSync": {
              "value": function () { return this.set_vendor_sync.apply(this, arguments); }
            },
            "toString": {
              "value": function () { return this.to_string.apply(this, arguments); }
            },
            "objectPath": {
              "get": function () { return this.object_path; },
              "set": function (value) { this.object_path = value; }
            },
            "profilingInhibitors": {
              "get": function () { return this.profiling_inhibitors; },
              "set": function (value) { this.profiling_inhibitors = value; }
            }
          },
          "static": {
            "errorFromString": {
              "value": function () { return this.error_from_string.apply(this, arguments); }
            },
            "errorQuark": {
              "value": function () { return this.error_quark.apply(this, arguments); }
            },
            "errorToString": {
              "value": function () { return this.error_to_string.apply(this, arguments); }
            },
            "kindFromString": {
              "value": function () { return this.kind_from_string.apply(this, arguments); }
            },
            "kindToProfileKind": {
              "value": function () { return this.kind_to_profile_kind.apply(this, arguments); }
            },
            "kindToString": {
              "value": function () { return this.kind_to_string.apply(this, arguments); }
            },
            "modeFromString": {
              "value": function () { return this.mode_from_string.apply(this, arguments); }
            },
            "modeToString": {
              "value": function () { return this.mode_to_string.apply(this, arguments); }
            },
            "relationFromString": {
              "value": function () { return this.relation_from_string.apply(this, arguments); }
            },
            "relationToString": {
              "value": function () { return this.relation_to_string.apply(this, arguments); }
            }
          }
        },
        "Dom": {
          "prototype": {
            "getNode": {
              "value": function () { return this.get_node.apply(this, arguments); }
            },
            "parseXmlData": {
              "value": function () { return this.parse_xml_data.apply(this, arguments); }
            },
            "toString": {
              "value": function () { return this.to_string.apply(this, arguments); }
            }
          },
          "static": {
            "errorQuark": {
              "value": function () { return this.error_quark.apply(this, arguments); }
            },
            "getNodeAttribute": {
              "value": function () { return this.get_node_attribute.apply(this, arguments); }
            },
            "getNodeData": {
              "value": function () { return this.get_node_data.apply(this, arguments); }
            },
            "getNodeDataAsDouble": {
              "value": function () { return this.get_node_data_as_double.apply(this, arguments); }
            },
            "getNodeDataAsInt": {
              "value": function () { return this.get_node_data_as_int.apply(this, arguments); }
            },
            "getNodeLab": {
              "value": function () { return this.get_node_lab.apply(this, arguments); }
            },
            "getNodeLocalized": {
              "value": function () { return this.get_node_localized.apply(this, arguments); }
            },
            "getNodeName": {
              "value": function () { return this.get_node_name.apply(this, arguments); }
            },
            "getNodeRgb": {
              "value": function () { return this.get_node_rgb.apply(this, arguments); }
            },
            "getNodeYxy": {
              "value": function () { return this.get_node_yxy.apply(this, arguments); }
            }
          }
        },
        "Edid": {
          "prototype": {
            "getBlue": {
              "value": function () { return this.get_blue.apply(this, arguments); }
            },
            "getChecksum": {
              "value": function () { return this.get_checksum.apply(this, arguments); }
            },
            "getEisaId": {
              "value": function () { return this.get_eisa_id.apply(this, arguments); }
            },
            "getGamma": {
              "value": function () { return this.get_gamma.apply(this, arguments); }
            },
            "getGreen": {
              "value": function () { return this.get_green.apply(this, arguments); }
            },
            "getHeight": {
              "value": function () { return this.get_height.apply(this, arguments); }
            },
            "getMonitorName": {
              "value": function () { return this.get_monitor_name.apply(this, arguments); }
            },
            "getPnpId": {
              "value": function () { return this.get_pnp_id.apply(this, arguments); }
            },
            "getRed": {
              "value": function () { return this.get_red.apply(this, arguments); }
            },
            "getSerialNumber": {
              "value": function () { return this.get_serial_number.apply(this, arguments); }
            },
            "getVendorName": {
              "value": function () { return this.get_vendor_name.apply(this, arguments); }
            },
            "getWhite": {
              "value": function () { return this.get_white.apply(this, arguments); }
            },
            "getWidth": {
              "value": function () { return this.get_width.apply(this, arguments); }
            }
          },
          "static": {
            "errorQuark": {
              "value": function () { return this.error_quark.apply(this, arguments); }
            }
          }
        },
        "Icc": {
          "prototype": {
            "addMetadata": {
              "value": function () { return this.add_metadata.apply(this, arguments); }
            },
            "createDefault": {
              "value": function () { return this.create_default.apply(this, arguments); }
            },
            "createFromEdid": {
              "value": function () { return this.create_from_edid.apply(this, arguments); }
            },
            "createFromEdidData": {
              "value": function () { return this.create_from_edid_data.apply(this, arguments); }
            },
            "getBlue": {
              "value": function () { return this.get_blue.apply(this, arguments); }
            },
            "getCanDelete": {
              "value": function () { return this.get_can_delete.apply(this, arguments); }
            },
            "getCharacterizationData": {
              "value": function () { return this.get_characterization_data.apply(this, arguments); }
            },
            "getChecksum": {
              "value": function () { return this.get_checksum.apply(this, arguments); }
            },
            "getColorspace": {
              "value": function () { return this.get_colorspace.apply(this, arguments); }
            },
            "getContext": {
              "value": function () { return this.get_context.apply(this, arguments); }
            },
            "getCopyright": {
              "value": function () { return this.get_copyright.apply(this, arguments); }
            },
            "getCreated": {
              "value": function () { return this.get_created.apply(this, arguments); }
            },
            "getDescription": {
              "value": function () { return this.get_description.apply(this, arguments); }
            },
            "getFilename": {
              "value": function () { return this.get_filename.apply(this, arguments); }
            },
            "getGreen": {
              "value": function () { return this.get_green.apply(this, arguments); }
            },
            "getHandle": {
              "value": function () { return this.get_handle.apply(this, arguments); }
            },
            "getKind": {
              "value": function () { return this.get_kind.apply(this, arguments); }
            },
            "getManufacturer": {
              "value": function () { return this.get_manufacturer.apply(this, arguments); }
            },
            "getMetadata": {
              "value": function () { return this.get_metadata.apply(this, arguments); }
            },
            "getMetadataItem": {
              "value": function () { return this.get_metadata_item.apply(this, arguments); }
            },
            "getModel": {
              "value": function () { return this.get_model.apply(this, arguments); }
            },
            "getNamedColors": {
              "value": function () { return this.get_named_colors.apply(this, arguments); }
            },
            "getRed": {
              "value": function () { return this.get_red.apply(this, arguments); }
            },
            "getResponse": {
              "value": function () { return this.get_response.apply(this, arguments); }
            },
            "getSize": {
              "value": function () { return this.get_size.apply(this, arguments); }
            },
            "getTagData": {
              "value": function () { return this.get_tag_data.apply(this, arguments); }
            },
            "getTags": {
              "value": function () { return this.get_tags.apply(this, arguments); }
            },
            "getTemperature": {
              "value": function () { return this.get_temperature.apply(this, arguments); }
            },
            "getVcgt": {
              "value": function () { return this.get_vcgt.apply(this, arguments); }
            },
            "getVersion": {
              "value": function () { return this.get_version.apply(this, arguments); }
            },
            "getWarnings": {
              "value": function () { return this.get_warnings.apply(this, arguments); }
            },
            "getWhite": {
              "value": function () { return this.get_white.apply(this, arguments); }
            },
            "loadData": {
              "value": function () { return this.load_data.apply(this, arguments); }
            },
            "loadFd": {
              "value": function () { return this.load_fd.apply(this, arguments); }
            },
            "loadFile": {
              "value": function () { return this.load_file.apply(this, arguments); }
            },
            "loadHandle": {
              "value": function () { return this.load_handle.apply(this, arguments); }
            },
            "removeMetadata": {
              "value": function () { return this.remove_metadata.apply(this, arguments); }
            },
            "saveData": {
              "value": function () { return this.save_data.apply(this, arguments); }
            },
            "saveDefault": {
              "value": function () { return this.save_default.apply(this, arguments); }
            },
            "saveFile": {
              "value": function () { return this.save_file.apply(this, arguments); }
            },
            "setCharacterizationData": {
              "value": function () { return this.set_characterization_data.apply(this, arguments); }
            },
            "setColorspace": {
              "value": function () { return this.set_colorspace.apply(this, arguments); }
            },
            "setCopyright": {
              "value": function () { return this.set_copyright.apply(this, arguments); }
            },
            "setCopyrightItems": {
              "value": function () { return this.set_copyright_items.apply(this, arguments); }
            },
            "setDescription": {
              "value": function () { return this.set_description.apply(this, arguments); }
            },
            "setDescriptionItems": {
              "value": function () { return this.set_description_items.apply(this, arguments); }
            },
            "setFilename": {
              "value": function () { return this.set_filename.apply(this, arguments); }
            },
            "setKind": {
              "value": function () { return this.set_kind.apply(this, arguments); }
            },
            "setManufacturer": {
              "value": function () { return this.set_manufacturer.apply(this, arguments); }
            },
            "setManufacturerItems": {
              "value": function () { return this.set_manufacturer_items.apply(this, arguments); }
            },
            "setModel": {
              "value": function () { return this.set_model.apply(this, arguments); }
            },
            "setModelItems": {
              "value": function () { return this.set_model_items.apply(this, arguments); }
            },
            "setTagData": {
              "value": function () { return this.set_tag_data.apply(this, arguments); }
            },
            "setVcgt": {
              "value": function () { return this.set_vcgt.apply(this, arguments); }
            },
            "setVersion": {
              "value": function () { return this.set_version.apply(this, arguments); }
            },
            "toString": {
              "value": function () { return this.to_string.apply(this, arguments); }
            },
            "utilsGetCoverage": {
              "value": function () { return this.utils_get_coverage.apply(this, arguments); }
            },
            "canDelete": {
              "get": function () { return this.can_delete; },
              "set": function (value) { this.can_delete = value; }
            }
          },
          "static": {
            "errorQuark": {
              "value": function () { return this.error_quark.apply(this, arguments); }
            }
          }
        },
        "IccStore": {
          "prototype": {
            "findByChecksum": {
              "value": function () { return this.find_by_checksum.apply(this, arguments); }
            },
            "findByFilename": {
              "value": function () { return this.find_by_filename.apply(this, arguments); }
            },
            "getAll": {
              "value": function () { return this.get_all.apply(this, arguments); }
            },
            "getLoadFlags": {
              "value": function () { return this.get_load_flags.apply(this, arguments); }
            },
            "searchKind": {
              "value": function () { return this.search_kind.apply(this, arguments); }
            },
            "searchLocation": {
              "value": function () { return this.search_location.apply(this, arguments); }
            },
            "setCache": {
              "value": function () { return this.set_cache.apply(this, arguments); }
            },
            "setLoadFlags": {
              "value": function () { return this.set_load_flags.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Interp": {
          "prototype": {
            "getKind": {
              "value": function () { return this.get_kind.apply(this, arguments); }
            },
            "getSize": {
              "value": function () { return this.get_size.apply(this, arguments); }
            },
            "getX": {
              "value": function () { return this.get_x.apply(this, arguments); }
            },
            "getY": {
              "value": function () { return this.get_y.apply(this, arguments); }
            }
          },
          "static": {
            "errorQuark": {
              "value": function () { return this.error_quark.apply(this, arguments); }
            },
            "kindToString": {
              "value": function () { return this.kind_to_string.apply(this, arguments); }
            }
          }
        },
        "InterpAkima": {
          "prototype": {},
          "static": {}
        },
        "InterpLinear": {
          "prototype": {},
          "static": {}
        },
        "It8": {
          "prototype": {
            "addData": {
              "value": function () { return this.add_data.apply(this, arguments); }
            },
            "addOption": {
              "value": function () { return this.add_option.apply(this, arguments); }
            },
            "addSpectrum": {
              "value": function () { return this.add_spectrum.apply(this, arguments); }
            },
            "getDataItem": {
              "value": function () { return this.get_data_item.apply(this, arguments); }
            },
            "getDataSize": {
              "value": function () { return this.get_data_size.apply(this, arguments); }
            },
            "getEnableCreated": {
              "value": function () { return this.get_enable_created.apply(this, arguments); }
            },
            "getInstrument": {
              "value": function () { return this.get_instrument.apply(this, arguments); }
            },
            "getKind": {
              "value": function () { return this.get_kind.apply(this, arguments); }
            },
            "getMatrix": {
              "value": function () { return this.get_matrix.apply(this, arguments); }
            },
            "getNormalized": {
              "value": function () { return this.get_normalized.apply(this, arguments); }
            },
            "getOriginator": {
              "value": function () { return this.get_originator.apply(this, arguments); }
            },
            "getReference": {
              "value": function () { return this.get_reference.apply(this, arguments); }
            },
            "getSpectral": {
              "value": function () { return this.get_spectral.apply(this, arguments); }
            },
            "getSpectrumArray": {
              "value": function () { return this.get_spectrum_array.apply(this, arguments); }
            },
            "getSpectrumById": {
              "value": function () { return this.get_spectrum_by_id.apply(this, arguments); }
            },
            "getTitle": {
              "value": function () { return this.get_title.apply(this, arguments); }
            },
            "getXyzForRgb": {
              "value": function () { return this.get_xyz_for_rgb.apply(this, arguments); }
            },
            "hasOption": {
              "value": function () { return this.has_option.apply(this, arguments); }
            },
            "loadFromData": {
              "value": function () { return this.load_from_data.apply(this, arguments); }
            },
            "loadFromFile": {
              "value": function () { return this.load_from_file.apply(this, arguments); }
            },
            "saveToData": {
              "value": function () { return this.save_to_data.apply(this, arguments); }
            },
            "saveToFile": {
              "value": function () { return this.save_to_file.apply(this, arguments); }
            },
            "setEnableCreated": {
              "value": function () { return this.set_enable_created.apply(this, arguments); }
            },
            "setInstrument": {
              "value": function () { return this.set_instrument.apply(this, arguments); }
            },
            "setKind": {
              "value": function () { return this.set_kind.apply(this, arguments); }
            },
            "setMatrix": {
              "value": function () { return this.set_matrix.apply(this, arguments); }
            },
            "setNormalized": {
              "value": function () { return this.set_normalized.apply(this, arguments); }
            },
            "setOriginator": {
              "value": function () { return this.set_originator.apply(this, arguments); }
            },
            "setReference": {
              "value": function () { return this.set_reference.apply(this, arguments); }
            },
            "setSpectral": {
              "value": function () { return this.set_spectral.apply(this, arguments); }
            },
            "setSpectrumArray": {
              "value": function () { return this.set_spectrum_array.apply(this, arguments); }
            },
            "setTitle": {
              "value": function () { return this.set_title.apply(this, arguments); }
            },
            "utilsCalculateCcmx": {
              "value": function () { return this.utils_calculate_ccmx.apply(this, arguments); }
            },
            "utilsCalculateCriFromCmf": {
              "value": function () { return this.utils_calculate_cri_from_cmf.apply(this, arguments); }
            },
            "utilsCalculateGamma": {
              "value": function () { return this.utils_calculate_gamma.apply(this, arguments); }
            },
            "utilsCalculateXyzFromCmf": {
              "value": function () { return this.utils_calculate_xyz_from_cmf.apply(this, arguments); }
            }
          },
          "static": {
            "errorQuark": {
              "value": function () { return this.error_quark.apply(this, arguments); }
            }
          }
        },
        "Profile": {
          "prototype": {
            "connectFinish": {
              "value": function () { return this.connect_finish.apply(this, arguments); }
            },
            "connectSync": {
              "value": function () { return this.connect_sync.apply(this, arguments); }
            },
            "getAge": {
              "value": function () { return this.get_age.apply(this, arguments); }
            },
            "getColorspace": {
              "value": function () { return this.get_colorspace.apply(this, arguments); }
            },
            "getConnected": {
              "value": function () { return this.get_connected.apply(this, arguments); }
            },
            "getCreated": {
              "value": function () { return this.get_created.apply(this, arguments); }
            },
            "getFilename": {
              "value": function () { return this.get_filename.apply(this, arguments); }
            },
            "getFormat": {
              "value": function () { return this.get_format.apply(this, arguments); }
            },
            "getHasVcgt": {
              "value": function () { return this.get_has_vcgt.apply(this, arguments); }
            },
            "getId": {
              "value": function () { return this.get_id.apply(this, arguments); }
            },
            "getIsSystemWide": {
              "value": function () { return this.get_is_system_wide.apply(this, arguments); }
            },
            "getKind": {
              "value": function () { return this.get_kind.apply(this, arguments); }
            },
            "getMetadata": {
              "value": function () { return this.get_metadata.apply(this, arguments); }
            },
            "getMetadataItem": {
              "value": function () { return this.get_metadata_item.apply(this, arguments); }
            },
            "getObjectPath": {
              "value": function () { return this.get_object_path.apply(this, arguments); }
            },
            "getOwner": {
              "value": function () { return this.get_owner.apply(this, arguments); }
            },
            "getQualifier": {
              "value": function () { return this.get_qualifier.apply(this, arguments); }
            },
            "getScope": {
              "value": function () { return this.get_scope.apply(this, arguments); }
            },
            "getTitle": {
              "value": function () { return this.get_title.apply(this, arguments); }
            },
            "getWarnings": {
              "value": function () { return this.get_warnings.apply(this, arguments); }
            },
            "hasAccess": {
              "value": function () { return this.has_access.apply(this, arguments); }
            },
            "installSystemWide": {
              "value": function () { return this.install_system_wide.apply(this, arguments); }
            },
            "installSystemWideFinish": {
              "value": function () { return this.install_system_wide_finish.apply(this, arguments); }
            },
            "installSystemWideSync": {
              "value": function () { return this.install_system_wide_sync.apply(this, arguments); }
            },
            "loadIcc": {
              "value": function () { return this.load_icc.apply(this, arguments); }
            },
            "setObjectPath": {
              "value": function () { return this.set_object_path.apply(this, arguments); }
            },
            "setProperty": {
              "value": function () { return this.set_property.apply(this, arguments); }
            },
            "setPropertyFinish": {
              "value": function () { return this.set_property_finish.apply(this, arguments); }
            },
            "setPropertySync": {
              "value": function () { return this.set_property_sync.apply(this, arguments); }
            },
            "toString": {
              "value": function () { return this.to_string.apply(this, arguments); }
            },
            "hasVcgt": {
              "get": function () { return this.has_vcgt; },
              "set": function (value) { this.has_vcgt = value; }
            },
            "isSystemWide": {
              "get": function () { return this.is_system_wide; },
              "set": function (value) { this.is_system_wide = value; }
            },
            "objectPath": {
              "get": function () { return this.object_path; },
              "set": function (value) { this.object_path = value; }
            }
          },
          "static": {
            "errorFromString": {
              "value": function () { return this.error_from_string.apply(this, arguments); }
            },
            "errorQuark": {
              "value": function () { return this.error_quark.apply(this, arguments); }
            },
            "errorToString": {
              "value": function () { return this.error_to_string.apply(this, arguments); }
            },
            "kindFromString": {
              "value": function () { return this.kind_from_string.apply(this, arguments); }
            },
            "kindToString": {
              "value": function () { return this.kind_to_string.apply(this, arguments); }
            },
            "qualityFromString": {
              "value": function () { return this.quality_from_string.apply(this, arguments); }
            },
            "qualityToString": {
              "value": function () { return this.quality_to_string.apply(this, arguments); }
            },
            "warningFromString": {
              "value": function () { return this.warning_from_string.apply(this, arguments); }
            },
            "warningToString": {
              "value": function () { return this.warning_to_string.apply(this, arguments); }
            }
          }
        },
        "Sensor": {
          "prototype": {
            "connectFinish": {
              "value": function () { return this.connect_finish.apply(this, arguments); }
            },
            "connectSync": {
              "value": function () { return this.connect_sync.apply(this, arguments); }
            },
            "getCaps": {
              "value": function () { return this.get_caps.apply(this, arguments); }
            },
            "getConnected": {
              "value": function () { return this.get_connected.apply(this, arguments); }
            },
            "getEmbedded": {
              "value": function () { return this.get_embedded.apply(this, arguments); }
            },
            "getId": {
              "value": function () { return this.get_id.apply(this, arguments); }
            },
            "getKind": {
              "value": function () { return this.get_kind.apply(this, arguments); }
            },
            "getLocked": {
              "value": function () { return this.get_locked.apply(this, arguments); }
            },
            "getMetadata": {
              "value": function () { return this.get_metadata.apply(this, arguments); }
            },
            "getMetadataItem": {
              "value": function () { return this.get_metadata_item.apply(this, arguments); }
            },
            "getMode": {
              "value": function () { return this.get_mode.apply(this, arguments); }
            },
            "getModel": {
              "value": function () { return this.get_model.apply(this, arguments); }
            },
            "getNative": {
              "value": function () { return this.get_native.apply(this, arguments); }
            },
            "getObjectPath": {
              "value": function () { return this.get_object_path.apply(this, arguments); }
            },
            "getOption": {
              "value": function () { return this.get_option.apply(this, arguments); }
            },
            "getOptions": {
              "value": function () { return this.get_options.apply(this, arguments); }
            },
            "getSample": {
              "value": function () { return this.get_sample.apply(this, arguments); }
            },
            "getSampleFinish": {
              "value": function () { return this.get_sample_finish.apply(this, arguments); }
            },
            "getSampleSync": {
              "value": function () { return this.get_sample_sync.apply(this, arguments); }
            },
            "getSerial": {
              "value": function () { return this.get_serial.apply(this, arguments); }
            },
            "getState": {
              "value": function () { return this.get_state.apply(this, arguments); }
            },
            "getVendor": {
              "value": function () { return this.get_vendor.apply(this, arguments); }
            },
            "hasCap": {
              "value": function () { return this.has_cap.apply(this, arguments); }
            },
            "lockFinish": {
              "value": function () { return this.lock_finish.apply(this, arguments); }
            },
            "lockSync": {
              "value": function () { return this.lock_sync.apply(this, arguments); }
            },
            "setObjectPath": {
              "value": function () { return this.set_object_path.apply(this, arguments); }
            },
            "setOptions": {
              "value": function () { return this.set_options.apply(this, arguments); }
            },
            "setOptionsFinish": {
              "value": function () { return this.set_options_finish.apply(this, arguments); }
            },
            "setOptionsSync": {
              "value": function () { return this.set_options_sync.apply(this, arguments); }
            },
            "toString": {
              "value": function () { return this.to_string.apply(this, arguments); }
            },
            "unlockFinish": {
              "value": function () { return this.unlock_finish.apply(this, arguments); }
            },
            "unlockSync": {
              "value": function () { return this.unlock_sync.apply(this, arguments); }
            },
            "objectPath": {
              "get": function () { return this.object_path; },
              "set": function (value) { this.object_path = value; }
            }
          },
          "static": {
            "capFromString": {
              "value": function () { return this.cap_from_string.apply(this, arguments); }
            },
            "capToString": {
              "value": function () { return this.cap_to_string.apply(this, arguments); }
            },
            "errorFromString": {
              "value": function () { return this.error_from_string.apply(this, arguments); }
            },
            "errorQuark": {
              "value": function () { return this.error_quark.apply(this, arguments); }
            },
            "errorToString": {
              "value": function () { return this.error_to_string.apply(this, arguments); }
            },
            "kindFromString": {
              "value": function () { return this.kind_from_string.apply(this, arguments); }
            },
            "kindToString": {
              "value": function () { return this.kind_to_string.apply(this, arguments); }
            },
            "stateFromString": {
              "value": function () { return this.state_from_string.apply(this, arguments); }
            },
            "stateToString": {
              "value": function () { return this.state_to_string.apply(this, arguments); }
            }
          }
        },
        "Transform": {
          "prototype": {
            "getAbstractIcc": {
              "value": function () { return this.get_abstract_icc.apply(this, arguments); }
            },
            "getBpc": {
              "value": function () { return this.get_bpc.apply(this, arguments); }
            },
            "getInputIcc": {
              "value": function () { return this.get_input_icc.apply(this, arguments); }
            },
            "getInputPixelFormat": {
              "value": function () { return this.get_input_pixel_format.apply(this, arguments); }
            },
            "getMaxThreads": {
              "value": function () { return this.get_max_threads.apply(this, arguments); }
            },
            "getOutputIcc": {
              "value": function () { return this.get_output_icc.apply(this, arguments); }
            },
            "getOutputPixelFormat": {
              "value": function () { return this.get_output_pixel_format.apply(this, arguments); }
            },
            "getRenderingIntent": {
              "value": function () { return this.get_rendering_intent.apply(this, arguments); }
            },
            "setAbstractIcc": {
              "value": function () { return this.set_abstract_icc.apply(this, arguments); }
            },
            "setBpc": {
              "value": function () { return this.set_bpc.apply(this, arguments); }
            },
            "setInputIcc": {
              "value": function () { return this.set_input_icc.apply(this, arguments); }
            },
            "setInputPixelFormat": {
              "value": function () { return this.set_input_pixel_format.apply(this, arguments); }
            },
            "setMaxThreads": {
              "value": function () { return this.set_max_threads.apply(this, arguments); }
            },
            "setOutputIcc": {
              "value": function () { return this.set_output_icc.apply(this, arguments); }
            },
            "setOutputPixelFormat": {
              "value": function () { return this.set_output_pixel_format.apply(this, arguments); }
            },
            "setRenderingIntent": {
              "value": function () { return this.set_rendering_intent.apply(this, arguments); }
            },
            "abstractIcc": {
              "get": function () { return this.abstract_icc; },
              "set": function (value) { this.abstract_icc = value; }
            },
            "inputIcc": {
              "get": function () { return this.input_icc; },
              "set": function (value) { this.input_icc = value; }
            },
            "inputPixelFormat": {
              "get": function () { return this.input_pixel_format; },
              "set": function (value) { this.input_pixel_format = value; }
            },
            "outputIcc": {
              "get": function () { return this.output_icc; },
              "set": function (value) { this.output_icc = value; }
            },
            "outputPixelFormat": {
              "get": function () { return this.output_pixel_format; },
              "set": function (value) { this.output_pixel_format = value; }
            },
            "renderingIntent": {
              "get": function () { return this.rendering_intent; },
              "set": function (value) { this.rendering_intent = value; }
            }
          },
          "static": {
            "errorQuark": {
              "value": function () { return this.error_quark.apply(this, arguments); }
            }
          }
        }
      },
      "static": {
        "bitfieldFromEnums": {
          "value": function () { return this.bitfield_from_enums.apply(this, arguments); }
        },
        "bufferDebug": {
          "value": function () { return this.buffer_debug.apply(this, arguments); }
        },
        "bufferReadUint16Be": {
          "value": function () { return this.buffer_read_uint16_be.apply(this, arguments); }
        },
        "bufferReadUint16Le": {
          "value": function () { return this.buffer_read_uint16_le.apply(this, arguments); }
        },
        "bufferReadUint32Be": {
          "value": function () { return this.buffer_read_uint32_be.apply(this, arguments); }
        },
        "bufferReadUint32Le": {
          "value": function () { return this.buffer_read_uint32_le.apply(this, arguments); }
        },
        "bufferWriteUint16Be": {
          "value": function () { return this.buffer_write_uint16_be.apply(this, arguments); }
        },
        "bufferWriteUint16Le": {
          "value": function () { return this.buffer_write_uint16_le.apply(this, arguments); }
        },
        "bufferWriteUint32Be": {
          "value": function () { return this.buffer_write_uint32_be.apply(this, arguments); }
        },
        "bufferWriteUint32Le": {
          "value": function () { return this.buffer_write_uint32_le.apply(this, arguments); }
        },
        "colorGetBlackbodyRgb": {
          "value": function () { return this.color_get_blackbody_rgb.apply(this, arguments); }
        },
        "colorRgb8ToRgb": {
          "value": function () { return this.color_rgb8_to_rgb.apply(this, arguments); }
        },
        "colorRgbArrayInterpolate": {
          "value": function () { return this.color_rgb_array_interpolate.apply(this, arguments); }
        },
        "colorRgbArrayIsMonotonic": {
          "value": function () { return this.color_rgb_array_is_monotonic.apply(this, arguments); }
        },
        "colorRgbArrayNew": {
          "value": function () { return this.color_rgb_array_new.apply(this, arguments); }
        },
        "colorspaceFromString": {
          "value": function () { return this.colorspace_from_string.apply(this, arguments); }
        },
        "colorspaceToString": {
          "value": function () { return this.colorspace_to_string.apply(this, arguments); }
        },
        "contextLcmsErrorCheck": {
          "value": function () { return this.context_lcms_error_check.apply(this, arguments); }
        },
        "contextLcmsErrorClear": {
          "value": function () { return this.context_lcms_error_clear.apply(this, arguments); }
        },
        "contextLcmsFree": {
          "value": function () { return this.context_lcms_free.apply(this, arguments); }
        },
        "contextLcmsNew": {
          "value": function () { return this.context_lcms_new.apply(this, arguments); }
        },
        "mat33Clear": {
          "value": function () { return this.mat33_clear.apply(this, arguments); }
        },
        "mat33Copy": {
          "value": function () { return this.mat33_copy.apply(this, arguments); }
        },
        "mat33Determinant": {
          "value": function () { return this.mat33_determinant.apply(this, arguments); }
        },
        "mat33GetData": {
          "value": function () { return this.mat33_get_data.apply(this, arguments); }
        },
        "mat33Init": {
          "value": function () { return this.mat33_init.apply(this, arguments); }
        },
        "mat33MatrixMultiply": {
          "value": function () { return this.mat33_matrix_multiply.apply(this, arguments); }
        },
        "mat33Normalize": {
          "value": function () { return this.mat33_normalize.apply(this, arguments); }
        },
        "mat33Reciprocal": {
          "value": function () { return this.mat33_reciprocal.apply(this, arguments); }
        },
        "mat33ScalarMultiply": {
          "value": function () { return this.mat33_scalar_multiply.apply(this, arguments); }
        },
        "mat33SetIdentity": {
          "value": function () { return this.mat33_set_identity.apply(this, arguments); }
        },
        "mat33ToString": {
          "value": function () { return this.mat33_to_string.apply(this, arguments); }
        },
        "mat33VectorMultiply": {
          "value": function () { return this.mat33_vector_multiply.apply(this, arguments); }
        },
        "objectScopeFromString": {
          "value": function () { return this.object_scope_from_string.apply(this, arguments); }
        },
        "objectScopeToString": {
          "value": function () { return this.object_scope_to_string.apply(this, arguments); }
        },
        "pixelFormatFromString": {
          "value": function () { return this.pixel_format_from_string.apply(this, arguments); }
        },
        "pixelFormatToString": {
          "value": function () { return this.pixel_format_to_string.apply(this, arguments); }
        },
        "quirkVendorName": {
          "value": function () { return this.quirk_vendor_name.apply(this, arguments); }
        },
        "renderingIntentFromString": {
          "value": function () { return this.rendering_intent_from_string.apply(this, arguments); }
        },
        "renderingIntentToString": {
          "value": function () { return this.rendering_intent_to_string.apply(this, arguments); }
        },
        "standardSpaceFromString": {
          "value": function () { return this.standard_space_from_string.apply(this, arguments); }
        },
        "standardSpaceToString": {
          "value": function () { return this.standard_space_to_string.apply(this, arguments); }
        }
      }
    },
    "ColordGtk": {
      "class": {
        "SampleWidget": {
          "prototype": {
            "setColor": {
              "value": function () { return this.set_color.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "SampleWindow": {
          "prototype": {
            "setColor": {
              "value": function () { return this.set_color.apply(this, arguments); }
            },
            "setFraction": {
              "value": function () { return this.set_fraction.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Window": {
          "prototype": {
            "getLastProfile": {
              "value": function () { return this.get_last_profile.apply(this, arguments); }
            },
            "getProfile": {
              "value": function () { return this.get_profile.apply(this, arguments); }
            },
            "getProfileFinish": {
              "value": function () { return this.get_profile_finish.apply(this, arguments); }
            },
            "getProfileSync": {
              "value": function () { return this.get_profile_sync.apply(this, arguments); }
            }
          },
          "static": {
            "errorQuark": {
              "value": function () { return this.error_quark.apply(this, arguments); }
            }
          }
        }
      },
      "static": {}
    },
    "CryptUI": {
      "class": {},
      "static": {}
    },
    "DBus": {
      "class": {},
      "static": {}
    },
    "DBusGLib": {
      "class": {
        "Proxy": {
          "prototype": {},
          "static": {}
        }
      },
      "static": {}
    },
    "EBook": {
      "class": {
        "BookClient": {
          "prototype": {
            "addContact": {
              "value": function () { return this.add_contact.apply(this, arguments); }
            },
            "addContactFinish": {
              "value": function () { return this.add_contact_finish.apply(this, arguments); }
            },
            "addContactSync": {
              "value": function () { return this.add_contact_sync.apply(this, arguments); }
            },
            "addContacts": {
              "value": function () { return this.add_contacts.apply(this, arguments); }
            },
            "addContactsFinish": {
              "value": function () { return this.add_contacts_finish.apply(this, arguments); }
            },
            "addContactsSync": {
              "value": function () { return this.add_contacts_sync.apply(this, arguments); }
            },
            "getContact": {
              "value": function () { return this.get_contact.apply(this, arguments); }
            },
            "getContactFinish": {
              "value": function () { return this.get_contact_finish.apply(this, arguments); }
            },
            "getContactSync": {
              "value": function () { return this.get_contact_sync.apply(this, arguments); }
            },
            "getContacts": {
              "value": function () { return this.get_contacts.apply(this, arguments); }
            },
            "getContactsFinish": {
              "value": function () { return this.get_contacts_finish.apply(this, arguments); }
            },
            "getContactsSync": {
              "value": function () { return this.get_contacts_sync.apply(this, arguments); }
            },
            "getContactsUids": {
              "value": function () { return this.get_contacts_uids.apply(this, arguments); }
            },
            "getContactsUidsFinish": {
              "value": function () { return this.get_contacts_uids_finish.apply(this, arguments); }
            },
            "getContactsUidsSync": {
              "value": function () { return this.get_contacts_uids_sync.apply(this, arguments); }
            },
            "getCursor": {
              "value": function () { return this.get_cursor.apply(this, arguments); }
            },
            "getCursorFinish": {
              "value": function () { return this.get_cursor_finish.apply(this, arguments); }
            },
            "getCursorSync": {
              "value": function () { return this.get_cursor_sync.apply(this, arguments); }
            },
            "getLocale": {
              "value": function () { return this.get_locale.apply(this, arguments); }
            },
            "getView": {
              "value": function () { return this.get_view.apply(this, arguments); }
            },
            "getViewFinish": {
              "value": function () { return this.get_view_finish.apply(this, arguments); }
            },
            "getViewSync": {
              "value": function () { return this.get_view_sync.apply(this, arguments); }
            },
            "modifyContact": {
              "value": function () { return this.modify_contact.apply(this, arguments); }
            },
            "modifyContactFinish": {
              "value": function () { return this.modify_contact_finish.apply(this, arguments); }
            },
            "modifyContactSync": {
              "value": function () { return this.modify_contact_sync.apply(this, arguments); }
            },
            "modifyContacts": {
              "value": function () { return this.modify_contacts.apply(this, arguments); }
            },
            "modifyContactsFinish": {
              "value": function () { return this.modify_contacts_finish.apply(this, arguments); }
            },
            "modifyContactsSync": {
              "value": function () { return this.modify_contacts_sync.apply(this, arguments); }
            },
            "removeContact": {
              "value": function () { return this.remove_contact.apply(this, arguments); }
            },
            "removeContactByUid": {
              "value": function () { return this.remove_contact_by_uid.apply(this, arguments); }
            },
            "removeContactByUidFinish": {
              "value": function () { return this.remove_contact_by_uid_finish.apply(this, arguments); }
            },
            "removeContactByUidSync": {
              "value": function () { return this.remove_contact_by_uid_sync.apply(this, arguments); }
            },
            "removeContactFinish": {
              "value": function () { return this.remove_contact_finish.apply(this, arguments); }
            },
            "removeContactSync": {
              "value": function () { return this.remove_contact_sync.apply(this, arguments); }
            },
            "removeContacts": {
              "value": function () { return this.remove_contacts.apply(this, arguments); }
            },
            "removeContactsFinish": {
              "value": function () { return this.remove_contacts_finish.apply(this, arguments); }
            },
            "removeContactsSync": {
              "value": function () { return this.remove_contacts_sync.apply(this, arguments); }
            },
            "setSelf": {
              "value": function () { return this.set_self.apply(this, arguments); }
            }
          },
          "static": {
            "connectDirect": {
              "value": function () { return this.connect_direct.apply(this, arguments); }
            },
            "connectDirectFinish": {
              "value": function () { return this.connect_direct_finish.apply(this, arguments); }
            },
            "connectDirectSync": {
              "value": function () { return this.connect_direct_sync.apply(this, arguments); }
            },
            "connectFinish": {
              "value": function () { return this.connect_finish.apply(this, arguments); }
            },
            "connectSync": {
              "value": function () { return this.connect_sync.apply(this, arguments); }
            },
            "getSelf": {
              "value": function () { return this.get_self.apply(this, arguments); }
            },
            "isSelf": {
              "value": function () { return this.is_self.apply(this, arguments); }
            }
          }
        },
        "BookClientCursor": {
          "prototype": {
            "getAlphabet": {
              "value": function () { return this.get_alphabet.apply(this, arguments); }
            },
            "getContactAlphabeticIndex": {
              "value": function () { return this.get_contact_alphabetic_index.apply(this, arguments); }
            },
            "getPosition": {
              "value": function () { return this.get_position.apply(this, arguments); }
            },
            "getTotal": {
              "value": function () { return this.get_total.apply(this, arguments); }
            },
            "refClient": {
              "value": function () { return this.ref_client.apply(this, arguments); }
            },
            "setAlphabeticIndex": {
              "value": function () { return this.set_alphabetic_index.apply(this, arguments); }
            },
            "setAlphabeticIndexFinish": {
              "value": function () { return this.set_alphabetic_index_finish.apply(this, arguments); }
            },
            "setAlphabeticIndexSync": {
              "value": function () { return this.set_alphabetic_index_sync.apply(this, arguments); }
            },
            "setSexp": {
              "value": function () { return this.set_sexp.apply(this, arguments); }
            },
            "setSexpFinish": {
              "value": function () { return this.set_sexp_finish.apply(this, arguments); }
            },
            "setSexpSync": {
              "value": function () { return this.set_sexp_sync.apply(this, arguments); }
            },
            "stepFinish": {
              "value": function () { return this.step_finish.apply(this, arguments); }
            },
            "stepSync": {
              "value": function () { return this.step_sync.apply(this, arguments); }
            },
            "directCursor": {
              "get": function () { return this.direct_cursor; },
              "set": function (value) { this.direct_cursor = value; }
            },
            "objectPath": {
              "get": function () { return this.object_path; },
              "set": function (value) { this.object_path = value; }
            },
            "sortFields": {
              "get": function () { return this.sort_fields; },
              "set": function (value) { this.sort_fields = value; }
            }
          },
          "static": {}
        },
        "BookClientView": {
          "prototype": {
            "getClient": {
              "value": function () { return this.get_client.apply(this, arguments); }
            },
            "getConnection": {
              "value": function () { return this.get_connection.apply(this, arguments); }
            },
            "getObjectPath": {
              "value": function () { return this.get_object_path.apply(this, arguments); }
            },
            "isRunning": {
              "value": function () { return this.is_running.apply(this, arguments); }
            },
            "refClient": {
              "value": function () { return this.ref_client.apply(this, arguments); }
            },
            "setFieldsOfInterest": {
              "value": function () { return this.set_fields_of_interest.apply(this, arguments); }
            },
            "setFlags": {
              "value": function () { return this.set_flags.apply(this, arguments); }
            },
            "directBackend": {
              "get": function () { return this.direct_backend; },
              "set": function (value) { this.direct_backend = value; }
            },
            "objectPath": {
              "get": function () { return this.object_path; },
              "set": function (value) { this.object_path = value; }
            }
          },
          "static": {}
        },
        "Destination": {
          "prototype": {
            "exportToVcardAttribute": {
              "value": function () { return this.export_to_vcard_attribute.apply(this, arguments); }
            },
            "getAddress": {
              "value": function () { return this.get_address.apply(this, arguments); }
            },
            "getContact": {
              "value": function () { return this.get_contact.apply(this, arguments); }
            },
            "getContactUid": {
              "value": function () { return this.get_contact_uid.apply(this, arguments); }
            },
            "getEmail": {
              "value": function () { return this.get_email.apply(this, arguments); }
            },
            "getEmailNum": {
              "value": function () { return this.get_email_num.apply(this, arguments); }
            },
            "getHtmlMailPref": {
              "value": function () { return this.get_html_mail_pref.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getSourceUid": {
              "value": function () { return this.get_source_uid.apply(this, arguments); }
            },
            "getTextrep": {
              "value": function () { return this.get_textrep.apply(this, arguments); }
            },
            "isAutoRecipient": {
              "value": function () { return this.is_auto_recipient.apply(this, arguments); }
            },
            "isEvolutionList": {
              "value": function () { return this.is_evolution_list.apply(this, arguments); }
            },
            "isIgnored": {
              "value": function () { return this.is_ignored.apply(this, arguments); }
            },
            "listGetDests": {
              "value": function () { return this.list_get_dests.apply(this, arguments); }
            },
            "listGetRootDests": {
              "value": function () { return this.list_get_root_dests.apply(this, arguments); }
            },
            "listShowAddresses": {
              "value": function () { return this.list_show_addresses.apply(this, arguments); }
            },
            "setAutoRecipient": {
              "value": function () { return this.set_auto_recipient.apply(this, arguments); }
            },
            "setClient": {
              "value": function () { return this.set_client.apply(this, arguments); }
            },
            "setContact": {
              "value": function () { return this.set_contact.apply(this, arguments); }
            },
            "setContactUid": {
              "value": function () { return this.set_contact_uid.apply(this, arguments); }
            },
            "setEmail": {
              "value": function () { return this.set_email.apply(this, arguments); }
            },
            "setHtmlMailPref": {
              "value": function () { return this.set_html_mail_pref.apply(this, arguments); }
            },
            "setIgnored": {
              "value": function () { return this.set_ignored.apply(this, arguments); }
            },
            "setName": {
              "value": function () { return this.set_name.apply(this, arguments); }
            },
            "setRaw": {
              "value": function () { return this.set_raw.apply(this, arguments); }
            }
          },
          "static": {
            "getTextrepv": {
              "value": function () { return this.get_textrepv.apply(this, arguments); }
            }
          }
        }
      },
      "static": {
        "bookErrorQuark": {
          "value": function () { return this.book_error_quark.apply(this, arguments); }
        }
      }
    },
    "EBookContacts": {
      "class": {
        "Contact": {
          "prototype": {
            "getAttributes": {
              "value": function () { return this.get_attributes.apply(this, arguments); }
            },
            "getAttributesSet": {
              "value": function () { return this.get_attributes_set.apply(this, arguments); }
            },
            "getConst": {
              "value": function () { return this.get_const.apply(this, arguments); }
            },
            "inlineLocalPhotos": {
              "value": function () { return this.inline_local_photos.apply(this, arguments); }
            },
            "setAttributes": {
              "value": function () { return this.set_attributes.apply(this, arguments); }
            },
            "addressHome": {
              "get": function () { return this.address_home; },
              "set": function (value) { this.address_home = value; }
            },
            "addressLabelHome": {
              "get": function () { return this.address_label_home; },
              "set": function (value) { this.address_label_home = value; }
            },
            "addressLabelOther": {
              "get": function () { return this.address_label_other; },
              "set": function (value) { this.address_label_other = value; }
            },
            "addressLabelWork": {
              "get": function () { return this.address_label_work; },
              "set": function (value) { this.address_label_work = value; }
            },
            "addressOther": {
              "get": function () { return this.address_other; },
              "set": function (value) { this.address_other = value; }
            },
            "addressWork": {
              "get": function () { return this.address_work; },
              "set": function (value) { this.address_work = value; }
            },
            "assistantPhone": {
              "get": function () { return this.assistant_phone; },
              "set": function (value) { this.assistant_phone = value; }
            },
            "birthDate": {
              "get": function () { return this.birth_date; },
              "set": function (value) { this.birth_date = value; }
            },
            "blogUrl": {
              "get": function () { return this.blog_url; },
              "set": function (value) { this.blog_url = value; }
            },
            "bookUid": {
              "get": function () { return this.book_uid; },
              "set": function (value) { this.book_uid = value; }
            },
            "businessFax": {
              "get": function () { return this.business_fax; },
              "set": function (value) { this.business_fax = value; }
            },
            "businessPhone": {
              "get": function () { return this.business_phone; },
              "set": function (value) { this.business_phone = value; }
            },
            "businessPhone2": {
              "get": function () { return this.business_phone_2; },
              "set": function (value) { this.business_phone_2 = value; }
            },
            "callbackPhone": {
              "get": function () { return this.callback_phone; },
              "set": function (value) { this.callback_phone = value; }
            },
            "carPhone": {
              "get": function () { return this.car_phone; },
              "set": function (value) { this.car_phone = value; }
            },
            "categoryList": {
              "get": function () { return this.category_list; },
              "set": function (value) { this.category_list = value; }
            },
            "companyPhone": {
              "get": function () { return this.company_phone; },
              "set": function (value) { this.company_phone = value; }
            },
            "email1": {
              "get": function () { return this.email_1; },
              "set": function (value) { this.email_1 = value; }
            },
            "email2": {
              "get": function () { return this.email_2; },
              "set": function (value) { this.email_2 = value; }
            },
            "email3": {
              "get": function () { return this.email_3; },
              "set": function (value) { this.email_3 = value; }
            },
            "email4": {
              "get": function () { return this.email_4; },
              "set": function (value) { this.email_4 = value; }
            },
            "familyName": {
              "get": function () { return this.family_name; },
              "set": function (value) { this.family_name = value; }
            },
            "fileAs": {
              "get": function () { return this.file_as; },
              "set": function (value) { this.file_as = value; }
            },
            "fullName": {
              "get": function () { return this.full_name; },
              "set": function (value) { this.full_name = value; }
            },
            "givenName": {
              "get": function () { return this.given_name; },
              "set": function (value) { this.given_name = value; }
            },
            "homeFax": {
              "get": function () { return this.home_fax; },
              "set": function (value) { this.home_fax = value; }
            },
            "homePhone": {
              "get": function () { return this.home_phone; },
              "set": function (value) { this.home_phone = value; }
            },
            "homePhone2": {
              "get": function () { return this.home_phone_2; },
              "set": function (value) { this.home_phone_2 = value; }
            },
            "homepageUrl": {
              "get": function () { return this.homepage_url; },
              "set": function (value) { this.homepage_url = value; }
            },
            "imAim": {
              "get": function () { return this.im_aim; },
              "set": function (value) { this.im_aim = value; }
            },
            "imAimHome1": {
              "get": function () { return this.im_aim_home_1; },
              "set": function (value) { this.im_aim_home_1 = value; }
            },
            "imAimHome2": {
              "get": function () { return this.im_aim_home_2; },
              "set": function (value) { this.im_aim_home_2 = value; }
            },
            "imAimHome3": {
              "get": function () { return this.im_aim_home_3; },
              "set": function (value) { this.im_aim_home_3 = value; }
            },
            "imAimWork1": {
              "get": function () { return this.im_aim_work_1; },
              "set": function (value) { this.im_aim_work_1 = value; }
            },
            "imAimWork2": {
              "get": function () { return this.im_aim_work_2; },
              "set": function (value) { this.im_aim_work_2 = value; }
            },
            "imAimWork3": {
              "get": function () { return this.im_aim_work_3; },
              "set": function (value) { this.im_aim_work_3 = value; }
            },
            "imGadugadu": {
              "get": function () { return this.im_gadugadu; },
              "set": function (value) { this.im_gadugadu = value; }
            },
            "imGadugaduHome1": {
              "get": function () { return this.im_gadugadu_home_1; },
              "set": function (value) { this.im_gadugadu_home_1 = value; }
            },
            "imGadugaduHome2": {
              "get": function () { return this.im_gadugadu_home_2; },
              "set": function (value) { this.im_gadugadu_home_2 = value; }
            },
            "imGadugaduHome3": {
              "get": function () { return this.im_gadugadu_home_3; },
              "set": function (value) { this.im_gadugadu_home_3 = value; }
            },
            "imGadugaduWork1": {
              "get": function () { return this.im_gadugadu_work_1; },
              "set": function (value) { this.im_gadugadu_work_1 = value; }
            },
            "imGadugaduWork2": {
              "get": function () { return this.im_gadugadu_work_2; },
              "set": function (value) { this.im_gadugadu_work_2 = value; }
            },
            "imGadugaduWork3": {
              "get": function () { return this.im_gadugadu_work_3; },
              "set": function (value) { this.im_gadugadu_work_3 = value; }
            },
            "imGoogleTalk": {
              "get": function () { return this.im_google_talk; },
              "set": function (value) { this.im_google_talk = value; }
            },
            "imGoogleTalkHome1": {
              "get": function () { return this.im_google_talk_home_1; },
              "set": function (value) { this.im_google_talk_home_1 = value; }
            },
            "imGoogleTalkHome2": {
              "get": function () { return this.im_google_talk_home_2; },
              "set": function (value) { this.im_google_talk_home_2 = value; }
            },
            "imGoogleTalkHome3": {
              "get": function () { return this.im_google_talk_home_3; },
              "set": function (value) { this.im_google_talk_home_3 = value; }
            },
            "imGoogleTalkWork1": {
              "get": function () { return this.im_google_talk_work_1; },
              "set": function (value) { this.im_google_talk_work_1 = value; }
            },
            "imGoogleTalkWork2": {
              "get": function () { return this.im_google_talk_work_2; },
              "set": function (value) { this.im_google_talk_work_2 = value; }
            },
            "imGoogleTalkWork3": {
              "get": function () { return this.im_google_talk_work_3; },
              "set": function (value) { this.im_google_talk_work_3 = value; }
            },
            "imGroupwise": {
              "get": function () { return this.im_groupwise; },
              "set": function (value) { this.im_groupwise = value; }
            },
            "imGroupwiseHome1": {
              "get": function () { return this.im_groupwise_home_1; },
              "set": function (value) { this.im_groupwise_home_1 = value; }
            },
            "imGroupwiseHome2": {
              "get": function () { return this.im_groupwise_home_2; },
              "set": function (value) { this.im_groupwise_home_2 = value; }
            },
            "imGroupwiseHome3": {
              "get": function () { return this.im_groupwise_home_3; },
              "set": function (value) { this.im_groupwise_home_3 = value; }
            },
            "imGroupwiseWork1": {
              "get": function () { return this.im_groupwise_work_1; },
              "set": function (value) { this.im_groupwise_work_1 = value; }
            },
            "imGroupwiseWork2": {
              "get": function () { return this.im_groupwise_work_2; },
              "set": function (value) { this.im_groupwise_work_2 = value; }
            },
            "imGroupwiseWork3": {
              "get": function () { return this.im_groupwise_work_3; },
              "set": function (value) { this.im_groupwise_work_3 = value; }
            },
            "imIcq": {
              "get": function () { return this.im_icq; },
              "set": function (value) { this.im_icq = value; }
            },
            "imIcqHome1": {
              "get": function () { return this.im_icq_home_1; },
              "set": function (value) { this.im_icq_home_1 = value; }
            },
            "imIcqHome2": {
              "get": function () { return this.im_icq_home_2; },
              "set": function (value) { this.im_icq_home_2 = value; }
            },
            "imIcqHome3": {
              "get": function () { return this.im_icq_home_3; },
              "set": function (value) { this.im_icq_home_3 = value; }
            },
            "imIcqWork1": {
              "get": function () { return this.im_icq_work_1; },
              "set": function (value) { this.im_icq_work_1 = value; }
            },
            "imIcqWork2": {
              "get": function () { return this.im_icq_work_2; },
              "set": function (value) { this.im_icq_work_2 = value; }
            },
            "imIcqWork3": {
              "get": function () { return this.im_icq_work_3; },
              "set": function (value) { this.im_icq_work_3 = value; }
            },
            "imJabber": {
              "get": function () { return this.im_jabber; },
              "set": function (value) { this.im_jabber = value; }
            },
            "imJabberHome1": {
              "get": function () { return this.im_jabber_home_1; },
              "set": function (value) { this.im_jabber_home_1 = value; }
            },
            "imJabberHome2": {
              "get": function () { return this.im_jabber_home_2; },
              "set": function (value) { this.im_jabber_home_2 = value; }
            },
            "imJabberHome3": {
              "get": function () { return this.im_jabber_home_3; },
              "set": function (value) { this.im_jabber_home_3 = value; }
            },
            "imJabberWork1": {
              "get": function () { return this.im_jabber_work_1; },
              "set": function (value) { this.im_jabber_work_1 = value; }
            },
            "imJabberWork2": {
              "get": function () { return this.im_jabber_work_2; },
              "set": function (value) { this.im_jabber_work_2 = value; }
            },
            "imJabberWork3": {
              "get": function () { return this.im_jabber_work_3; },
              "set": function (value) { this.im_jabber_work_3 = value; }
            },
            "imMsn": {
              "get": function () { return this.im_msn; },
              "set": function (value) { this.im_msn = value; }
            },
            "imMsnHome1": {
              "get": function () { return this.im_msn_home_1; },
              "set": function (value) { this.im_msn_home_1 = value; }
            },
            "imMsnHome2": {
              "get": function () { return this.im_msn_home_2; },
              "set": function (value) { this.im_msn_home_2 = value; }
            },
            "imMsnHome3": {
              "get": function () { return this.im_msn_home_3; },
              "set": function (value) { this.im_msn_home_3 = value; }
            },
            "imMsnWork1": {
              "get": function () { return this.im_msn_work_1; },
              "set": function (value) { this.im_msn_work_1 = value; }
            },
            "imMsnWork2": {
              "get": function () { return this.im_msn_work_2; },
              "set": function (value) { this.im_msn_work_2 = value; }
            },
            "imMsnWork3": {
              "get": function () { return this.im_msn_work_3; },
              "set": function (value) { this.im_msn_work_3 = value; }
            },
            "imSkype": {
              "get": function () { return this.im_skype; },
              "set": function (value) { this.im_skype = value; }
            },
            "imSkypeHome1": {
              "get": function () { return this.im_skype_home_1; },
              "set": function (value) { this.im_skype_home_1 = value; }
            },
            "imSkypeHome2": {
              "get": function () { return this.im_skype_home_2; },
              "set": function (value) { this.im_skype_home_2 = value; }
            },
            "imSkypeHome3": {
              "get": function () { return this.im_skype_home_3; },
              "set": function (value) { this.im_skype_home_3 = value; }
            },
            "imSkypeWork1": {
              "get": function () { return this.im_skype_work_1; },
              "set": function (value) { this.im_skype_work_1 = value; }
            },
            "imSkypeWork2": {
              "get": function () { return this.im_skype_work_2; },
              "set": function (value) { this.im_skype_work_2 = value; }
            },
            "imSkypeWork3": {
              "get": function () { return this.im_skype_work_3; },
              "set": function (value) { this.im_skype_work_3 = value; }
            },
            "imTwitter": {
              "get": function () { return this.im_twitter; },
              "set": function (value) { this.im_twitter = value; }
            },
            "imYahoo": {
              "get": function () { return this.im_yahoo; },
              "set": function (value) { this.im_yahoo = value; }
            },
            "imYahooHome1": {
              "get": function () { return this.im_yahoo_home_1; },
              "set": function (value) { this.im_yahoo_home_1 = value; }
            },
            "imYahooHome2": {
              "get": function () { return this.im_yahoo_home_2; },
              "set": function (value) { this.im_yahoo_home_2 = value; }
            },
            "imYahooHome3": {
              "get": function () { return this.im_yahoo_home_3; },
              "set": function (value) { this.im_yahoo_home_3 = value; }
            },
            "imYahooWork1": {
              "get": function () { return this.im_yahoo_work_1; },
              "set": function (value) { this.im_yahoo_work_1 = value; }
            },
            "imYahooWork2": {
              "get": function () { return this.im_yahoo_work_2; },
              "set": function (value) { this.im_yahoo_work_2 = value; }
            },
            "imYahooWork3": {
              "get": function () { return this.im_yahoo_work_3; },
              "set": function (value) { this.im_yahoo_work_3 = value; }
            },
            "isdnPhone": {
              "get": function () { return this.isdn_phone; },
              "set": function (value) { this.isdn_phone = value; }
            },
            "listShowAddresses": {
              "get": function () { return this.list_show_addresses; },
              "set": function (value) { this.list_show_addresses = value; }
            },
            "mobilePhone": {
              "get": function () { return this.mobile_phone; },
              "set": function (value) { this.mobile_phone = value; }
            },
            "nameOrOrg": {
              "get": function () { return this.name_or_org; },
              "set": function (value) { this.name_or_org = value; }
            },
            "orgUnit": {
              "get": function () { return this.org_unit; },
              "set": function (value) { this.org_unit = value; }
            },
            "otherFax": {
              "get": function () { return this.other_fax; },
              "set": function (value) { this.other_fax = value; }
            },
            "otherPhone": {
              "get": function () { return this.other_phone; },
              "set": function (value) { this.other_phone = value; }
            },
            "primaryPhone": {
              "get": function () { return this.primary_phone; },
              "set": function (value) { this.primary_phone = value; }
            },
            "videoUrl": {
              "get": function () { return this.video_url; },
              "set": function (value) { this.video_url = value; }
            },
            "wantsHtml": {
              "get": function () { return this.wants_html; },
              "set": function (value) { this.wants_html = value; }
            }
          },
          "static": {
            "fieldId": {
              "value": function () { return this.field_id.apply(this, arguments); }
            },
            "fieldIdFromVcard": {
              "value": function () { return this.field_id_from_vcard.apply(this, arguments); }
            },
            "fieldIsString": {
              "value": function () { return this.field_is_string.apply(this, arguments); }
            },
            "fieldName": {
              "value": function () { return this.field_name.apply(this, arguments); }
            },
            "fieldType": {
              "value": function () { return this.field_type.apply(this, arguments); }
            },
            "prettyName": {
              "value": function () { return this.pretty_name.apply(this, arguments); }
            },
            "vcardAttribute": {
              "value": function () { return this.vcard_attribute.apply(this, arguments); }
            }
          }
        },
        "SourceBackendSummarySetup": {
          "prototype": {
            "getIndexedFields": {
              "value": function () { return this.get_indexed_fields.apply(this, arguments); }
            },
            "getSummaryFields": {
              "value": function () { return this.get_summary_fields.apply(this, arguments); }
            },
            "setIndexedFields": {
              "value": function () { return this.set_indexed_fields.apply(this, arguments); }
            },
            "setIndexedFieldsv": {
              "value": function () { return this.set_indexed_fieldsv.apply(this, arguments); }
            },
            "setSummaryFields": {
              "value": function () { return this.set_summary_fields.apply(this, arguments); }
            },
            "setSummaryFieldsv": {
              "value": function () { return this.set_summary_fieldsv.apply(this, arguments); }
            },
            "indexedFields": {
              "get": function () { return this.indexed_fields; },
              "set": function (value) { this.indexed_fields = value; }
            },
            "summaryFields": {
              "get": function () { return this.summary_fields; },
              "set": function (value) { this.summary_fields = value; }
            }
          },
          "static": {}
        },
        "VCard": {
          "prototype": {
            "addAttribute": {
              "value": function () { return this.add_attribute.apply(this, arguments); }
            },
            "addAttributeWithValue": {
              "value": function () { return this.add_attribute_with_value.apply(this, arguments); }
            },
            "addAttributeWithValues": {
              "value": function () { return this.add_attribute_with_values.apply(this, arguments); }
            },
            "appendAttribute": {
              "value": function () { return this.append_attribute.apply(this, arguments); }
            },
            "appendAttributeWithValue": {
              "value": function () { return this.append_attribute_with_value.apply(this, arguments); }
            },
            "appendAttributeWithValues": {
              "value": function () { return this.append_attribute_with_values.apply(this, arguments); }
            },
            "constructFull": {
              "value": function () { return this.construct_full.apply(this, arguments); }
            },
            "constructWithUid": {
              "value": function () { return this.construct_with_uid.apply(this, arguments); }
            },
            "dumpStructure": {
              "value": function () { return this.dump_structure.apply(this, arguments); }
            },
            "getAttribute": {
              "value": function () { return this.get_attribute.apply(this, arguments); }
            },
            "getAttributeIfParsed": {
              "value": function () { return this.get_attribute_if_parsed.apply(this, arguments); }
            },
            "getAttributes": {
              "value": function () { return this.get_attributes.apply(this, arguments); }
            },
            "isParsed": {
              "value": function () { return this.is_parsed.apply(this, arguments); }
            },
            "removeAttribute": {
              "value": function () { return this.remove_attribute.apply(this, arguments); }
            },
            "removeAttributes": {
              "value": function () { return this.remove_attributes.apply(this, arguments); }
            },
            "toString": {
              "value": function () { return this.to_string.apply(this, arguments); }
            }
          },
          "static": {
            "escapeString": {
              "value": function () { return this.escape_string.apply(this, arguments); }
            },
            "unescapeString": {
              "value": function () { return this.unescape_string.apply(this, arguments); }
            }
          }
        }
      },
      "static": {
        "bookClientErrorCreate": {
          "value": function () { return this.book_client_error_create.apply(this, arguments); }
        },
        "bookClientErrorQuark": {
          "value": function () { return this.book_client_error_quark.apply(this, arguments); }
        },
        "bookClientErrorToString": {
          "value": function () { return this.book_client_error_to_string.apply(this, arguments); }
        },
        "bookQueryAnd": {
          "value": function () { return this.book_query_and.apply(this, arguments); }
        },
        "bookQueryAnyFieldContains": {
          "value": function () { return this.book_query_any_field_contains.apply(this, arguments); }
        },
        "bookQueryFieldExists": {
          "value": function () { return this.book_query_field_exists.apply(this, arguments); }
        },
        "bookQueryFieldTest": {
          "value": function () { return this.book_query_field_test.apply(this, arguments); }
        },
        "bookQueryFromString": {
          "value": function () { return this.book_query_from_string.apply(this, arguments); }
        },
        "bookQueryOr": {
          "value": function () { return this.book_query_or.apply(this, arguments); }
        },
        "bookQueryVcardFieldExists": {
          "value": function () { return this.book_query_vcard_field_exists.apply(this, arguments); }
        },
        "bookQueryVcardFieldTest": {
          "value": function () { return this.book_query_vcard_field_test.apply(this, arguments); }
        },
        "contactDateFromString": {
          "value": function () { return this.contact_date_from_string.apply(this, arguments); }
        },
        "contactNameFromString": {
          "value": function () { return this.contact_name_from_string.apply(this, arguments); }
        },
        "phoneNumberCompareStrings": {
          "value": function () { return this.phone_number_compare_strings.apply(this, arguments); }
        },
        "phoneNumberCompareStringsWithRegion": {
          "value": function () { return this.phone_number_compare_strings_with_region.apply(this, arguments); }
        },
        "phoneNumberErrorQuark": {
          "value": function () { return this.phone_number_error_quark.apply(this, arguments); }
        },
        "phoneNumberFromString": {
          "value": function () { return this.phone_number_from_string.apply(this, arguments); }
        },
        "phoneNumberGetCountryCodeForRegion": {
          "value": function () { return this.phone_number_get_country_code_for_region.apply(this, arguments); }
        },
        "phoneNumberGetDefaultRegion": {
          "value": function () { return this.phone_number_get_default_region.apply(this, arguments); }
        },
        "phoneNumberIsSupported": {
          "value": function () { return this.phone_number_is_supported.apply(this, arguments); }
        }
      }
    },
    "EDataServer": {
      "class": {
        "Client": {
          "prototype": {
            "cancelAll": {
              "value": function () { return this.cancel_all.apply(this, arguments); }
            },
            "checkCapability": {
              "value": function () { return this.check_capability.apply(this, arguments); }
            },
            "checkRefreshSupported": {
              "value": function () { return this.check_refresh_supported.apply(this, arguments); }
            },
            "dupBusName": {
              "value": function () { return this.dup_bus_name.apply(this, arguments); }
            },
            "getBackendProperty": {
              "value": function () { return this.get_backend_property.apply(this, arguments); }
            },
            "getBackendPropertyFinish": {
              "value": function () { return this.get_backend_property_finish.apply(this, arguments); }
            },
            "getBackendPropertySync": {
              "value": function () { return this.get_backend_property_sync.apply(this, arguments); }
            },
            "getCapabilities": {
              "value": function () { return this.get_capabilities.apply(this, arguments); }
            },
            "getSource": {
              "value": function () { return this.get_source.apply(this, arguments); }
            },
            "isOnline": {
              "value": function () { return this.is_online.apply(this, arguments); }
            },
            "isOpened": {
              "value": function () { return this.is_opened.apply(this, arguments); }
            },
            "isReadonly": {
              "value": function () { return this.is_readonly.apply(this, arguments); }
            },
            "openFinish": {
              "value": function () { return this.open_finish.apply(this, arguments); }
            },
            "openSync": {
              "value": function () { return this.open_sync.apply(this, arguments); }
            },
            "refMainContext": {
              "value": function () { return this.ref_main_context.apply(this, arguments); }
            },
            "refreshFinish": {
              "value": function () { return this.refresh_finish.apply(this, arguments); }
            },
            "refreshSync": {
              "value": function () { return this.refresh_sync.apply(this, arguments); }
            },
            "removeFinish": {
              "value": function () { return this.remove_finish.apply(this, arguments); }
            },
            "removeSync": {
              "value": function () { return this.remove_sync.apply(this, arguments); }
            },
            "retrieveCapabilities": {
              "value": function () { return this.retrieve_capabilities.apply(this, arguments); }
            },
            "retrieveCapabilitiesFinish": {
              "value": function () { return this.retrieve_capabilities_finish.apply(this, arguments); }
            },
            "retrieveCapabilitiesSync": {
              "value": function () { return this.retrieve_capabilities_sync.apply(this, arguments); }
            },
            "retrieveProperties": {
              "value": function () { return this.retrieve_properties.apply(this, arguments); }
            },
            "retrievePropertiesFinish": {
              "value": function () { return this.retrieve_properties_finish.apply(this, arguments); }
            },
            "retrievePropertiesSync": {
              "value": function () { return this.retrieve_properties_sync.apply(this, arguments); }
            },
            "setBackendProperty": {
              "value": function () { return this.set_backend_property.apply(this, arguments); }
            },
            "setBackendPropertyFinish": {
              "value": function () { return this.set_backend_property_finish.apply(this, arguments); }
            },
            "setBackendPropertySync": {
              "value": function () { return this.set_backend_property_sync.apply(this, arguments); }
            },
            "setBusName": {
              "value": function () { return this.set_bus_name.apply(this, arguments); }
            },
            "unwrapDbusError": {
              "value": function () { return this.unwrap_dbus_error.apply(this, arguments); }
            },
            "waitForConnected": {
              "value": function () { return this.wait_for_connected.apply(this, arguments); }
            },
            "waitForConnectedFinish": {
              "value": function () { return this.wait_for_connected_finish.apply(this, arguments); }
            },
            "waitForConnectedSync": {
              "value": function () { return this.wait_for_connected_sync.apply(this, arguments); }
            },
            "mainContext": {
              "get": function () { return this.main_context; },
              "set": function (value) { this.main_context = value; }
            }
          },
          "static": {
            "errorCreate": {
              "value": function () { return this.error_create.apply(this, arguments); }
            },
            "errorQuark": {
              "value": function () { return this.error_quark.apply(this, arguments); }
            },
            "errorToString": {
              "value": function () { return this.error_to_string.apply(this, arguments); }
            },
            "utilCopyObjectSlist": {
              "value": function () { return this.util_copy_object_slist.apply(this, arguments); }
            },
            "utilCopyStringSlist": {
              "value": function () { return this.util_copy_string_slist.apply(this, arguments); }
            },
            "utilFreeObjectSlist": {
              "value": function () { return this.util_free_object_slist.apply(this, arguments); }
            },
            "utilFreeStringSlist": {
              "value": function () { return this.util_free_string_slist.apply(this, arguments); }
            },
            "utilParseCommaStrings": {
              "value": function () { return this.util_parse_comma_strings.apply(this, arguments); }
            },
            "utilSlistToStrv": {
              "value": function () { return this.util_slist_to_strv.apply(this, arguments); }
            },
            "utilStrvToSlist": {
              "value": function () { return this.util_strv_to_slist.apply(this, arguments); }
            },
            "utilUnwrapDbusError": {
              "value": function () { return this.util_unwrap_dbus_error.apply(this, arguments); }
            }
          }
        },
        "Extension": {
          "prototype": {
            "getExtensible": {
              "value": function () { return this.get_extensible.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Module": {
          "prototype": {
            "getFilename": {
              "value": function () { return this.get_filename.apply(this, arguments); }
            }
          },
          "static": {
            "loadAllInDirectory": {
              "value": function () { return this.load_all_in_directory.apply(this, arguments); }
            },
            "loadFile": {
              "value": function () { return this.load_file.apply(this, arguments); }
            }
          }
        },
        "SoupAuthBearer": {
          "prototype": {
            "setAccessToken": {
              "value": function () { return this.set_access_token.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Source": {
          "prototype": {
            "camelConfigureService": {
              "value": function () { return this.camel_configure_service.apply(this, arguments); }
            },
            "compareByDisplayName": {
              "value": function () { return this.compare_by_display_name.apply(this, arguments); }
            },
            "deletePassword": {
              "value": function () { return this.delete_password.apply(this, arguments); }
            },
            "deletePasswordFinish": {
              "value": function () { return this.delete_password_finish.apply(this, arguments); }
            },
            "deletePasswordSync": {
              "value": function () { return this.delete_password_sync.apply(this, arguments); }
            },
            "dupDisplayName": {
              "value": function () { return this.dup_display_name.apply(this, arguments); }
            },
            "dupParent": {
              "value": function () { return this.dup_parent.apply(this, arguments); }
            },
            "dupSecretLabel": {
              "value": function () { return this.dup_secret_label.apply(this, arguments); }
            },
            "dupUid": {
              "value": function () { return this.dup_uid.apply(this, arguments); }
            },
            "emitCredentialsRequired": {
              "value": function () { return this.emit_credentials_required.apply(this, arguments); }
            },
            "getConnectionStatus": {
              "value": function () { return this.get_connection_status.apply(this, arguments); }
            },
            "getDisplayName": {
              "value": function () { return this.get_display_name.apply(this, arguments); }
            },
            "getEnabled": {
              "value": function () { return this.get_enabled.apply(this, arguments); }
            },
            "getExtension": {
              "value": function () { return this.get_extension.apply(this, arguments); }
            },
            "getLastCredentialsRequiredArguments": {
              "value": function () { return this.get_last_credentials_required_arguments.apply(this, arguments); }
            },
            "getLastCredentialsRequiredArgumentsFinish": {
              "value": function () { return this.get_last_credentials_required_arguments_finish.apply(this, arguments); }
            },
            "getLastCredentialsRequiredArgumentsSync": {
              "value": function () { return this.get_last_credentials_required_arguments_sync.apply(this, arguments); }
            },
            "getOauth2AccessToken": {
              "value": function () { return this.get_oauth2_access_token.apply(this, arguments); }
            },
            "getOauth2AccessTokenFinish": {
              "value": function () { return this.get_oauth2_access_token_finish.apply(this, arguments); }
            },
            "getOauth2AccessTokenSync": {
              "value": function () { return this.get_oauth2_access_token_sync.apply(this, arguments); }
            },
            "getParent": {
              "value": function () { return this.get_parent.apply(this, arguments); }
            },
            "getRemoteCreatable": {
              "value": function () { return this.get_remote_creatable.apply(this, arguments); }
            },
            "getRemoteDeletable": {
              "value": function () { return this.get_remote_deletable.apply(this, arguments); }
            },
            "getRemovable": {
              "value": function () { return this.get_removable.apply(this, arguments); }
            },
            "getUid": {
              "value": function () { return this.get_uid.apply(this, arguments); }
            },
            "getWritable": {
              "value": function () { return this.get_writable.apply(this, arguments); }
            },
            "hasExtension": {
              "value": function () { return this.has_extension.apply(this, arguments); }
            },
            "invokeAuthenticate": {
              "value": function () { return this.invoke_authenticate.apply(this, arguments); }
            },
            "invokeAuthenticateFinish": {
              "value": function () { return this.invoke_authenticate_finish.apply(this, arguments); }
            },
            "invokeAuthenticateSync": {
              "value": function () { return this.invoke_authenticate_sync.apply(this, arguments); }
            },
            "invokeCredentialsRequired": {
              "value": function () { return this.invoke_credentials_required.apply(this, arguments); }
            },
            "invokeCredentialsRequiredFinish": {
              "value": function () { return this.invoke_credentials_required_finish.apply(this, arguments); }
            },
            "invokeCredentialsRequiredSync": {
              "value": function () { return this.invoke_credentials_required_sync.apply(this, arguments); }
            },
            "lookupPassword": {
              "value": function () { return this.lookup_password.apply(this, arguments); }
            },
            "lookupPasswordFinish": {
              "value": function () { return this.lookup_password_finish.apply(this, arguments); }
            },
            "lookupPasswordSync": {
              "value": function () { return this.lookup_password_sync.apply(this, arguments); }
            },
            "mailSignatureLoad": {
              "value": function () { return this.mail_signature_load.apply(this, arguments); }
            },
            "mailSignatureLoadFinish": {
              "value": function () { return this.mail_signature_load_finish.apply(this, arguments); }
            },
            "mailSignatureLoadSync": {
              "value": function () { return this.mail_signature_load_sync.apply(this, arguments); }
            },
            "mailSignatureReplace": {
              "value": function () { return this.mail_signature_replace.apply(this, arguments); }
            },
            "mailSignatureReplaceFinish": {
              "value": function () { return this.mail_signature_replace_finish.apply(this, arguments); }
            },
            "mailSignatureReplaceSync": {
              "value": function () { return this.mail_signature_replace_sync.apply(this, arguments); }
            },
            "mailSignatureSymlink": {
              "value": function () { return this.mail_signature_symlink.apply(this, arguments); }
            },
            "mailSignatureSymlinkFinish": {
              "value": function () { return this.mail_signature_symlink_finish.apply(this, arguments); }
            },
            "mailSignatureSymlinkSync": {
              "value": function () { return this.mail_signature_symlink_sync.apply(this, arguments); }
            },
            "proxyLookup": {
              "value": function () { return this.proxy_lookup.apply(this, arguments); }
            },
            "proxyLookupFinish": {
              "value": function () { return this.proxy_lookup_finish.apply(this, arguments); }
            },
            "proxyLookupSync": {
              "value": function () { return this.proxy_lookup_sync.apply(this, arguments); }
            },
            "refDbusObject": {
              "value": function () { return this.ref_dbus_object.apply(this, arguments); }
            },
            "refMainContext": {
              "value": function () { return this.ref_main_context.apply(this, arguments); }
            },
            "refreshAddTimeout": {
              "value": function () { return this.refresh_add_timeout.apply(this, arguments); }
            },
            "refreshForceTimeout": {
              "value": function () { return this.refresh_force_timeout.apply(this, arguments); }
            },
            "refreshRemoveTimeout": {
              "value": function () { return this.refresh_remove_timeout.apply(this, arguments); }
            },
            "refreshRemoveTimeoutsByData": {
              "value": function () { return this.refresh_remove_timeouts_by_data.apply(this, arguments); }
            },
            "remoteCreate": {
              "value": function () { return this.remote_create.apply(this, arguments); }
            },
            "remoteCreateFinish": {
              "value": function () { return this.remote_create_finish.apply(this, arguments); }
            },
            "remoteCreateSync": {
              "value": function () { return this.remote_create_sync.apply(this, arguments); }
            },
            "remoteDelete": {
              "value": function () { return this.remote_delete.apply(this, arguments); }
            },
            "remoteDeleteFinish": {
              "value": function () { return this.remote_delete_finish.apply(this, arguments); }
            },
            "remoteDeleteSync": {
              "value": function () { return this.remote_delete_sync.apply(this, arguments); }
            },
            "removeFinish": {
              "value": function () { return this.remove_finish.apply(this, arguments); }
            },
            "removeSync": {
              "value": function () { return this.remove_sync.apply(this, arguments); }
            },
            "setConnectionStatus": {
              "value": function () { return this.set_connection_status.apply(this, arguments); }
            },
            "setDisplayName": {
              "value": function () { return this.set_display_name.apply(this, arguments); }
            },
            "setEnabled": {
              "value": function () { return this.set_enabled.apply(this, arguments); }
            },
            "setParent": {
              "value": function () { return this.set_parent.apply(this, arguments); }
            },
            "storePassword": {
              "value": function () { return this.store_password.apply(this, arguments); }
            },
            "storePasswordFinish": {
              "value": function () { return this.store_password_finish.apply(this, arguments); }
            },
            "storePasswordSync": {
              "value": function () { return this.store_password_sync.apply(this, arguments); }
            },
            "toString": {
              "value": function () { return this.to_string.apply(this, arguments); }
            },
            "unsetLastCredentialsRequiredArguments": {
              "value": function () { return this.unset_last_credentials_required_arguments.apply(this, arguments); }
            },
            "unsetLastCredentialsRequiredArgumentsFinish": {
              "value": function () { return this.unset_last_credentials_required_arguments_finish.apply(this, arguments); }
            },
            "unsetLastCredentialsRequiredArgumentsSync": {
              "value": function () { return this.unset_last_credentials_required_arguments_sync.apply(this, arguments); }
            },
            "writeFinish": {
              "value": function () { return this.write_finish.apply(this, arguments); }
            },
            "writeSync": {
              "value": function () { return this.write_sync.apply(this, arguments); }
            },
            "connectionStatus": {
              "get": function () { return this.connection_status; },
              "set": function (value) { this.connection_status = value; }
            },
            "dbusObject": {
              "get": function () { return this.dbus_object; },
              "set": function (value) { this.dbus_object = value; }
            },
            "displayName": {
              "get": function () { return this.display_name; },
              "set": function (value) { this.display_name = value; }
            },
            "mainContext": {
              "get": function () { return this.main_context; },
              "set": function (value) { this.main_context = value; }
            },
            "remoteCreatable": {
              "get": function () { return this.remote_creatable; },
              "set": function (value) { this.remote_creatable = value; }
            },
            "remoteDeletable": {
              "get": function () { return this.remote_deletable; },
              "set": function (value) { this.remote_deletable = value; }
            }
          },
          "static": {
            "parameterToKey": {
              "value": function () { return this.parameter_to_key.apply(this, arguments); }
            }
          }
        },
        "SourceAddressBook": {
          "prototype": {},
          "static": {}
        },
        "SourceAlarms": {
          "prototype": {
            "dupLastNotified": {
              "value": function () { return this.dup_last_notified.apply(this, arguments); }
            },
            "getIncludeMe": {
              "value": function () { return this.get_include_me.apply(this, arguments); }
            },
            "getLastNotified": {
              "value": function () { return this.get_last_notified.apply(this, arguments); }
            },
            "setIncludeMe": {
              "value": function () { return this.set_include_me.apply(this, arguments); }
            },
            "setLastNotified": {
              "value": function () { return this.set_last_notified.apply(this, arguments); }
            },
            "includeMe": {
              "get": function () { return this.include_me; },
              "set": function (value) { this.include_me = value; }
            },
            "lastNotified": {
              "get": function () { return this.last_notified; },
              "set": function (value) { this.last_notified = value; }
            }
          },
          "static": {}
        },
        "SourceAuthentication": {
          "prototype": {
            "dupCredentialName": {
              "value": function () { return this.dup_credential_name.apply(this, arguments); }
            },
            "dupHost": {
              "value": function () { return this.dup_host.apply(this, arguments); }
            },
            "dupMethod": {
              "value": function () { return this.dup_method.apply(this, arguments); }
            },
            "dupProxyUid": {
              "value": function () { return this.dup_proxy_uid.apply(this, arguments); }
            },
            "dupUser": {
              "value": function () { return this.dup_user.apply(this, arguments); }
            },
            "getCredentialName": {
              "value": function () { return this.get_credential_name.apply(this, arguments); }
            },
            "getHost": {
              "value": function () { return this.get_host.apply(this, arguments); }
            },
            "getMethod": {
              "value": function () { return this.get_method.apply(this, arguments); }
            },
            "getPort": {
              "value": function () { return this.get_port.apply(this, arguments); }
            },
            "getProxyUid": {
              "value": function () { return this.get_proxy_uid.apply(this, arguments); }
            },
            "getRememberPassword": {
              "value": function () { return this.get_remember_password.apply(this, arguments); }
            },
            "getUser": {
              "value": function () { return this.get_user.apply(this, arguments); }
            },
            "refConnectable": {
              "value": function () { return this.ref_connectable.apply(this, arguments); }
            },
            "setCredentialName": {
              "value": function () { return this.set_credential_name.apply(this, arguments); }
            },
            "setHost": {
              "value": function () { return this.set_host.apply(this, arguments); }
            },
            "setMethod": {
              "value": function () { return this.set_method.apply(this, arguments); }
            },
            "setPort": {
              "value": function () { return this.set_port.apply(this, arguments); }
            },
            "setProxyUid": {
              "value": function () { return this.set_proxy_uid.apply(this, arguments); }
            },
            "setRememberPassword": {
              "value": function () { return this.set_remember_password.apply(this, arguments); }
            },
            "setUser": {
              "value": function () { return this.set_user.apply(this, arguments); }
            },
            "credentialName": {
              "get": function () { return this.credential_name; },
              "set": function (value) { this.credential_name = value; }
            },
            "proxyUid": {
              "get": function () { return this.proxy_uid; },
              "set": function (value) { this.proxy_uid = value; }
            },
            "rememberPassword": {
              "get": function () { return this.remember_password; },
              "set": function (value) { this.remember_password = value; }
            }
          },
          "static": {}
        },
        "SourceAutocomplete": {
          "prototype": {
            "getIncludeMe": {
              "value": function () { return this.get_include_me.apply(this, arguments); }
            },
            "setIncludeMe": {
              "value": function () { return this.set_include_me.apply(this, arguments); }
            },
            "includeMe": {
              "get": function () { return this.include_me; },
              "set": function (value) { this.include_me = value; }
            }
          },
          "static": {}
        },
        "SourceBackend": {
          "prototype": {
            "dupBackendName": {
              "value": function () { return this.dup_backend_name.apply(this, arguments); }
            },
            "getBackendName": {
              "value": function () { return this.get_backend_name.apply(this, arguments); }
            },
            "setBackendName": {
              "value": function () { return this.set_backend_name.apply(this, arguments); }
            },
            "backendName": {
              "get": function () { return this.backend_name; },
              "set": function (value) { this.backend_name = value; }
            }
          },
          "static": {}
        },
        "SourceCalendar": {
          "prototype": {},
          "static": {}
        },
        "SourceCamel": {
          "prototype": {
            "getSettings": {
              "value": function () { return this.get_settings.apply(this, arguments); }
            }
          },
          "static": {
            "generateSubtype": {
              "value": function () { return this.generate_subtype.apply(this, arguments); }
            },
            "getExtensionName": {
              "value": function () { return this.get_extension_name.apply(this, arguments); }
            },
            "getTypeName": {
              "value": function () { return this.get_type_name.apply(this, arguments); }
            },
            "registerTypes": {
              "value": function () { return this.register_types.apply(this, arguments); }
            }
          }
        },
        "SourceCollection": {
          "prototype": {
            "dupIdentity": {
              "value": function () { return this.dup_identity.apply(this, arguments); }
            },
            "getCalendarEnabled": {
              "value": function () { return this.get_calendar_enabled.apply(this, arguments); }
            },
            "getContactsEnabled": {
              "value": function () { return this.get_contacts_enabled.apply(this, arguments); }
            },
            "getIdentity": {
              "value": function () { return this.get_identity.apply(this, arguments); }
            },
            "getMailEnabled": {
              "value": function () { return this.get_mail_enabled.apply(this, arguments); }
            },
            "setCalendarEnabled": {
              "value": function () { return this.set_calendar_enabled.apply(this, arguments); }
            },
            "setContactsEnabled": {
              "value": function () { return this.set_contacts_enabled.apply(this, arguments); }
            },
            "setIdentity": {
              "value": function () { return this.set_identity.apply(this, arguments); }
            },
            "setMailEnabled": {
              "value": function () { return this.set_mail_enabled.apply(this, arguments); }
            },
            "calendarEnabled": {
              "get": function () { return this.calendar_enabled; },
              "set": function (value) { this.calendar_enabled = value; }
            },
            "contactsEnabled": {
              "get": function () { return this.contacts_enabled; },
              "set": function (value) { this.contacts_enabled = value; }
            },
            "mailEnabled": {
              "get": function () { return this.mail_enabled; },
              "set": function (value) { this.mail_enabled = value; }
            }
          },
          "static": {}
        },
        "SourceContacts": {
          "prototype": {
            "getIncludeMe": {
              "value": function () { return this.get_include_me.apply(this, arguments); }
            },
            "setIncludeMe": {
              "value": function () { return this.set_include_me.apply(this, arguments); }
            },
            "includeMe": {
              "get": function () { return this.include_me; },
              "set": function (value) { this.include_me = value; }
            }
          },
          "static": {}
        },
        "SourceCredentialsProvider": {
          "prototype": {
            "canPrompt": {
              "value": function () { return this.can_prompt.apply(this, arguments); }
            },
            "canStore": {
              "value": function () { return this.can_store.apply(this, arguments); }
            },
            "deleteFinish": {
              "value": function () { return this.delete_finish.apply(this, arguments); }
            },
            "deleteSync": {
              "value": function () { return this.delete_sync.apply(this, arguments); }
            },
            "lookupFinish": {
              "value": function () { return this.lookup_finish.apply(this, arguments); }
            },
            "lookupSync": {
              "value": function () { return this.lookup_sync.apply(this, arguments); }
            },
            "refCredentialsSource": {
              "value": function () { return this.ref_credentials_source.apply(this, arguments); }
            },
            "refRegistry": {
              "value": function () { return this.ref_registry.apply(this, arguments); }
            },
            "refSource": {
              "value": function () { return this.ref_source.apply(this, arguments); }
            },
            "registerImpl": {
              "value": function () { return this.register_impl.apply(this, arguments); }
            },
            "storeFinish": {
              "value": function () { return this.store_finish.apply(this, arguments); }
            },
            "storeSync": {
              "value": function () { return this.store_sync.apply(this, arguments); }
            },
            "unregisterImpl": {
              "value": function () { return this.unregister_impl.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "SourceCredentialsProviderImpl": {
          "prototype": {
            "canProcess": {
              "value": function () { return this.can_process.apply(this, arguments); }
            },
            "canPrompt": {
              "value": function () { return this.can_prompt.apply(this, arguments); }
            },
            "canStore": {
              "value": function () { return this.can_store.apply(this, arguments); }
            },
            "deleteSync": {
              "value": function () { return this.delete_sync.apply(this, arguments); }
            },
            "getProvider": {
              "value": function () { return this.get_provider.apply(this, arguments); }
            },
            "lookupSync": {
              "value": function () { return this.lookup_sync.apply(this, arguments); }
            },
            "storeSync": {
              "value": function () { return this.store_sync.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "SourceCredentialsProviderImplPassword": {
          "prototype": {},
          "static": {}
        },
        "SourceExtension": {
          "prototype": {
            "getSource": {
              "value": function () { return this.get_source.apply(this, arguments); }
            },
            "propertyLock": {
              "value": function () { return this.property_lock.apply(this, arguments); }
            },
            "propertyUnlock": {
              "value": function () { return this.property_unlock.apply(this, arguments); }
            },
            "refSource": {
              "value": function () { return this.ref_source.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "SourceGoa": {
          "prototype": {
            "dupAccountId": {
              "value": function () { return this.dup_account_id.apply(this, arguments); }
            },
            "dupCalendarUrl": {
              "value": function () { return this.dup_calendar_url.apply(this, arguments); }
            },
            "dupContactsUrl": {
              "value": function () { return this.dup_contacts_url.apply(this, arguments); }
            },
            "getAccountId": {
              "value": function () { return this.get_account_id.apply(this, arguments); }
            },
            "getCalendarUrl": {
              "value": function () { return this.get_calendar_url.apply(this, arguments); }
            },
            "getContactsUrl": {
              "value": function () { return this.get_contacts_url.apply(this, arguments); }
            },
            "setAccountId": {
              "value": function () { return this.set_account_id.apply(this, arguments); }
            },
            "setCalendarUrl": {
              "value": function () { return this.set_calendar_url.apply(this, arguments); }
            },
            "setContactsUrl": {
              "value": function () { return this.set_contacts_url.apply(this, arguments); }
            },
            "accountId": {
              "get": function () { return this.account_id; },
              "set": function (value) { this.account_id = value; }
            },
            "calendarUrl": {
              "get": function () { return this.calendar_url; },
              "set": function (value) { this.calendar_url = value; }
            },
            "contactsUrl": {
              "get": function () { return this.contacts_url; },
              "set": function (value) { this.contacts_url = value; }
            }
          },
          "static": {}
        },
        "SourceLDAP": {
          "prototype": {
            "dupFilter": {
              "value": function () { return this.dup_filter.apply(this, arguments); }
            },
            "dupRootDn": {
              "value": function () { return this.dup_root_dn.apply(this, arguments); }
            },
            "getAuthentication": {
              "value": function () { return this.get_authentication.apply(this, arguments); }
            },
            "getCanBrowse": {
              "value": function () { return this.get_can_browse.apply(this, arguments); }
            },
            "getFilter": {
              "value": function () { return this.get_filter.apply(this, arguments); }
            },
            "getLimit": {
              "value": function () { return this.get_limit.apply(this, arguments); }
            },
            "getRootDn": {
              "value": function () { return this.get_root_dn.apply(this, arguments); }
            },
            "getScope": {
              "value": function () { return this.get_scope.apply(this, arguments); }
            },
            "getSecurity": {
              "value": function () { return this.get_security.apply(this, arguments); }
            },
            "setAuthentication": {
              "value": function () { return this.set_authentication.apply(this, arguments); }
            },
            "setCanBrowse": {
              "value": function () { return this.set_can_browse.apply(this, arguments); }
            },
            "setFilter": {
              "value": function () { return this.set_filter.apply(this, arguments); }
            },
            "setLimit": {
              "value": function () { return this.set_limit.apply(this, arguments); }
            },
            "setRootDn": {
              "value": function () { return this.set_root_dn.apply(this, arguments); }
            },
            "setScope": {
              "value": function () { return this.set_scope.apply(this, arguments); }
            },
            "setSecurity": {
              "value": function () { return this.set_security.apply(this, arguments); }
            },
            "canBrowse": {
              "get": function () { return this.can_browse; },
              "set": function (value) { this.can_browse = value; }
            },
            "rootDn": {
              "get": function () { return this.root_dn; },
              "set": function (value) { this.root_dn = value; }
            }
          },
          "static": {}
        },
        "SourceLocal": {
          "prototype": {
            "dupCustomFile": {
              "value": function () { return this.dup_custom_file.apply(this, arguments); }
            },
            "getCustomFile": {
              "value": function () { return this.get_custom_file.apply(this, arguments); }
            },
            "setCustomFile": {
              "value": function () { return this.set_custom_file.apply(this, arguments); }
            },
            "customFile": {
              "get": function () { return this.custom_file; },
              "set": function (value) { this.custom_file = value; }
            }
          },
          "static": {}
        },
        "SourceMDN": {
          "prototype": {
            "getResponsePolicy": {
              "value": function () { return this.get_response_policy.apply(this, arguments); }
            },
            "setResponsePolicy": {
              "value": function () { return this.set_response_policy.apply(this, arguments); }
            },
            "responsePolicy": {
              "get": function () { return this.response_policy; },
              "set": function (value) { this.response_policy = value; }
            }
          },
          "static": {}
        },
        "SourceMailAccount": {
          "prototype": {
            "dupArchiveFolder": {
              "value": function () { return this.dup_archive_folder.apply(this, arguments); }
            },
            "dupIdentityUid": {
              "value": function () { return this.dup_identity_uid.apply(this, arguments); }
            },
            "getArchiveFolder": {
              "value": function () { return this.get_archive_folder.apply(this, arguments); }
            },
            "getIdentityUid": {
              "value": function () { return this.get_identity_uid.apply(this, arguments); }
            },
            "setArchiveFolder": {
              "value": function () { return this.set_archive_folder.apply(this, arguments); }
            },
            "setIdentityUid": {
              "value": function () { return this.set_identity_uid.apply(this, arguments); }
            },
            "archiveFolder": {
              "get": function () { return this.archive_folder; },
              "set": function (value) { this.archive_folder = value; }
            },
            "identityUid": {
              "get": function () { return this.identity_uid; },
              "set": function (value) { this.identity_uid = value; }
            }
          },
          "static": {}
        },
        "SourceMailComposition": {
          "prototype": {
            "dupBcc": {
              "value": function () { return this.dup_bcc.apply(this, arguments); }
            },
            "dupCc": {
              "value": function () { return this.dup_cc.apply(this, arguments); }
            },
            "dupDraftsFolder": {
              "value": function () { return this.dup_drafts_folder.apply(this, arguments); }
            },
            "dupTemplatesFolder": {
              "value": function () { return this.dup_templates_folder.apply(this, arguments); }
            },
            "getBcc": {
              "value": function () { return this.get_bcc.apply(this, arguments); }
            },
            "getCc": {
              "value": function () { return this.get_cc.apply(this, arguments); }
            },
            "getDraftsFolder": {
              "value": function () { return this.get_drafts_folder.apply(this, arguments); }
            },
            "getSignImip": {
              "value": function () { return this.get_sign_imip.apply(this, arguments); }
            },
            "getTemplatesFolder": {
              "value": function () { return this.get_templates_folder.apply(this, arguments); }
            },
            "setBcc": {
              "value": function () { return this.set_bcc.apply(this, arguments); }
            },
            "setCc": {
              "value": function () { return this.set_cc.apply(this, arguments); }
            },
            "setDraftsFolder": {
              "value": function () { return this.set_drafts_folder.apply(this, arguments); }
            },
            "setSignImip": {
              "value": function () { return this.set_sign_imip.apply(this, arguments); }
            },
            "setTemplatesFolder": {
              "value": function () { return this.set_templates_folder.apply(this, arguments); }
            },
            "draftsFolder": {
              "get": function () { return this.drafts_folder; },
              "set": function (value) { this.drafts_folder = value; }
            },
            "signImip": {
              "get": function () { return this.sign_imip; },
              "set": function (value) { this.sign_imip = value; }
            },
            "templatesFolder": {
              "get": function () { return this.templates_folder; },
              "set": function (value) { this.templates_folder = value; }
            }
          },
          "static": {}
        },
        "SourceMailIdentity": {
          "prototype": {
            "dupAddress": {
              "value": function () { return this.dup_address.apply(this, arguments); }
            },
            "dupName": {
              "value": function () { return this.dup_name.apply(this, arguments); }
            },
            "dupOrganization": {
              "value": function () { return this.dup_organization.apply(this, arguments); }
            },
            "dupReplyTo": {
              "value": function () { return this.dup_reply_to.apply(this, arguments); }
            },
            "dupSignatureUid": {
              "value": function () { return this.dup_signature_uid.apply(this, arguments); }
            },
            "getAddress": {
              "value": function () { return this.get_address.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getOrganization": {
              "value": function () { return this.get_organization.apply(this, arguments); }
            },
            "getReplyTo": {
              "value": function () { return this.get_reply_to.apply(this, arguments); }
            },
            "getSignatureUid": {
              "value": function () { return this.get_signature_uid.apply(this, arguments); }
            },
            "setAddress": {
              "value": function () { return this.set_address.apply(this, arguments); }
            },
            "setName": {
              "value": function () { return this.set_name.apply(this, arguments); }
            },
            "setOrganization": {
              "value": function () { return this.set_organization.apply(this, arguments); }
            },
            "setReplyTo": {
              "value": function () { return this.set_reply_to.apply(this, arguments); }
            },
            "setSignatureUid": {
              "value": function () { return this.set_signature_uid.apply(this, arguments); }
            },
            "replyTo": {
              "get": function () { return this.reply_to; },
              "set": function (value) { this.reply_to = value; }
            },
            "signatureUid": {
              "get": function () { return this.signature_uid; },
              "set": function (value) { this.signature_uid = value; }
            }
          },
          "static": {}
        },
        "SourceMailSignature": {
          "prototype": {
            "dupMimeType": {
              "value": function () { return this.dup_mime_type.apply(this, arguments); }
            },
            "getFile": {
              "value": function () { return this.get_file.apply(this, arguments); }
            },
            "getMimeType": {
              "value": function () { return this.get_mime_type.apply(this, arguments); }
            },
            "setMimeType": {
              "value": function () { return this.set_mime_type.apply(this, arguments); }
            },
            "mimeType": {
              "get": function () { return this.mime_type; },
              "set": function (value) { this.mime_type = value; }
            }
          },
          "static": {}
        },
        "SourceMailSubmission": {
          "prototype": {
            "dupSentFolder": {
              "value": function () { return this.dup_sent_folder.apply(this, arguments); }
            },
            "dupTransportUid": {
              "value": function () { return this.dup_transport_uid.apply(this, arguments); }
            },
            "getRepliesToOriginFolder": {
              "value": function () { return this.get_replies_to_origin_folder.apply(this, arguments); }
            },
            "getSentFolder": {
              "value": function () { return this.get_sent_folder.apply(this, arguments); }
            },
            "getTransportUid": {
              "value": function () { return this.get_transport_uid.apply(this, arguments); }
            },
            "setRepliesToOriginFolder": {
              "value": function () { return this.set_replies_to_origin_folder.apply(this, arguments); }
            },
            "setSentFolder": {
              "value": function () { return this.set_sent_folder.apply(this, arguments); }
            },
            "setTransportUid": {
              "value": function () { return this.set_transport_uid.apply(this, arguments); }
            },
            "repliesToOriginFolder": {
              "get": function () { return this.replies_to_origin_folder; },
              "set": function (value) { this.replies_to_origin_folder = value; }
            },
            "sentFolder": {
              "get": function () { return this.sent_folder; },
              "set": function (value) { this.sent_folder = value; }
            },
            "transportUid": {
              "get": function () { return this.transport_uid; },
              "set": function (value) { this.transport_uid = value; }
            }
          },
          "static": {}
        },
        "SourceMailTransport": {
          "prototype": {},
          "static": {}
        },
        "SourceMemoList": {
          "prototype": {},
          "static": {}
        },
        "SourceOffline": {
          "prototype": {
            "getStaySynchronized": {
              "value": function () { return this.get_stay_synchronized.apply(this, arguments); }
            },
            "setStaySynchronized": {
              "value": function () { return this.set_stay_synchronized.apply(this, arguments); }
            },
            "staySynchronized": {
              "get": function () { return this.stay_synchronized; },
              "set": function (value) { this.stay_synchronized = value; }
            }
          },
          "static": {}
        },
        "SourceOpenPGP": {
          "prototype": {
            "dupKeyId": {
              "value": function () { return this.dup_key_id.apply(this, arguments); }
            },
            "dupSigningAlgorithm": {
              "value": function () { return this.dup_signing_algorithm.apply(this, arguments); }
            },
            "getAlwaysTrust": {
              "value": function () { return this.get_always_trust.apply(this, arguments); }
            },
            "getEncryptByDefault": {
              "value": function () { return this.get_encrypt_by_default.apply(this, arguments); }
            },
            "getEncryptToSelf": {
              "value": function () { return this.get_encrypt_to_self.apply(this, arguments); }
            },
            "getKeyId": {
              "value": function () { return this.get_key_id.apply(this, arguments); }
            },
            "getSignByDefault": {
              "value": function () { return this.get_sign_by_default.apply(this, arguments); }
            },
            "getSigningAlgorithm": {
              "value": function () { return this.get_signing_algorithm.apply(this, arguments); }
            },
            "setAlwaysTrust": {
              "value": function () { return this.set_always_trust.apply(this, arguments); }
            },
            "setEncryptByDefault": {
              "value": function () { return this.set_encrypt_by_default.apply(this, arguments); }
            },
            "setEncryptToSelf": {
              "value": function () { return this.set_encrypt_to_self.apply(this, arguments); }
            },
            "setKeyId": {
              "value": function () { return this.set_key_id.apply(this, arguments); }
            },
            "setSignByDefault": {
              "value": function () { return this.set_sign_by_default.apply(this, arguments); }
            },
            "setSigningAlgorithm": {
              "value": function () { return this.set_signing_algorithm.apply(this, arguments); }
            },
            "alwaysTrust": {
              "get": function () { return this.always_trust; },
              "set": function (value) { this.always_trust = value; }
            },
            "encryptByDefault": {
              "get": function () { return this.encrypt_by_default; },
              "set": function (value) { this.encrypt_by_default = value; }
            },
            "encryptToSelf": {
              "get": function () { return this.encrypt_to_self; },
              "set": function (value) { this.encrypt_to_self = value; }
            },
            "keyId": {
              "get": function () { return this.key_id; },
              "set": function (value) { this.key_id = value; }
            },
            "signByDefault": {
              "get": function () { return this.sign_by_default; },
              "set": function (value) { this.sign_by_default = value; }
            },
            "signingAlgorithm": {
              "get": function () { return this.signing_algorithm; },
              "set": function (value) { this.signing_algorithm = value; }
            }
          },
          "static": {}
        },
        "SourceProxy": {
          "prototype": {
            "dupAutoconfigUrl": {
              "value": function () { return this.dup_autoconfig_url.apply(this, arguments); }
            },
            "dupFtpHost": {
              "value": function () { return this.dup_ftp_host.apply(this, arguments); }
            },
            "dupHttpAuthPassword": {
              "value": function () { return this.dup_http_auth_password.apply(this, arguments); }
            },
            "dupHttpAuthUser": {
              "value": function () { return this.dup_http_auth_user.apply(this, arguments); }
            },
            "dupHttpHost": {
              "value": function () { return this.dup_http_host.apply(this, arguments); }
            },
            "dupHttpsHost": {
              "value": function () { return this.dup_https_host.apply(this, arguments); }
            },
            "dupIgnoreHosts": {
              "value": function () { return this.dup_ignore_hosts.apply(this, arguments); }
            },
            "dupSocksHost": {
              "value": function () { return this.dup_socks_host.apply(this, arguments); }
            },
            "getAutoconfigUrl": {
              "value": function () { return this.get_autoconfig_url.apply(this, arguments); }
            },
            "getFtpHost": {
              "value": function () { return this.get_ftp_host.apply(this, arguments); }
            },
            "getFtpPort": {
              "value": function () { return this.get_ftp_port.apply(this, arguments); }
            },
            "getHttpAuthPassword": {
              "value": function () { return this.get_http_auth_password.apply(this, arguments); }
            },
            "getHttpAuthUser": {
              "value": function () { return this.get_http_auth_user.apply(this, arguments); }
            },
            "getHttpHost": {
              "value": function () { return this.get_http_host.apply(this, arguments); }
            },
            "getHttpPort": {
              "value": function () { return this.get_http_port.apply(this, arguments); }
            },
            "getHttpUseAuth": {
              "value": function () { return this.get_http_use_auth.apply(this, arguments); }
            },
            "getHttpsHost": {
              "value": function () { return this.get_https_host.apply(this, arguments); }
            },
            "getHttpsPort": {
              "value": function () { return this.get_https_port.apply(this, arguments); }
            },
            "getIgnoreHosts": {
              "value": function () { return this.get_ignore_hosts.apply(this, arguments); }
            },
            "getMethod": {
              "value": function () { return this.get_method.apply(this, arguments); }
            },
            "getSocksHost": {
              "value": function () { return this.get_socks_host.apply(this, arguments); }
            },
            "getSocksPort": {
              "value": function () { return this.get_socks_port.apply(this, arguments); }
            },
            "setAutoconfigUrl": {
              "value": function () { return this.set_autoconfig_url.apply(this, arguments); }
            },
            "setFtpHost": {
              "value": function () { return this.set_ftp_host.apply(this, arguments); }
            },
            "setFtpPort": {
              "value": function () { return this.set_ftp_port.apply(this, arguments); }
            },
            "setHttpAuthPassword": {
              "value": function () { return this.set_http_auth_password.apply(this, arguments); }
            },
            "setHttpAuthUser": {
              "value": function () { return this.set_http_auth_user.apply(this, arguments); }
            },
            "setHttpHost": {
              "value": function () { return this.set_http_host.apply(this, arguments); }
            },
            "setHttpPort": {
              "value": function () { return this.set_http_port.apply(this, arguments); }
            },
            "setHttpUseAuth": {
              "value": function () { return this.set_http_use_auth.apply(this, arguments); }
            },
            "setHttpsHost": {
              "value": function () { return this.set_https_host.apply(this, arguments); }
            },
            "setHttpsPort": {
              "value": function () { return this.set_https_port.apply(this, arguments); }
            },
            "setIgnoreHosts": {
              "value": function () { return this.set_ignore_hosts.apply(this, arguments); }
            },
            "setMethod": {
              "value": function () { return this.set_method.apply(this, arguments); }
            },
            "setSocksHost": {
              "value": function () { return this.set_socks_host.apply(this, arguments); }
            },
            "setSocksPort": {
              "value": function () { return this.set_socks_port.apply(this, arguments); }
            },
            "autoconfigUrl": {
              "get": function () { return this.autoconfig_url; },
              "set": function (value) { this.autoconfig_url = value; }
            },
            "ftpHost": {
              "get": function () { return this.ftp_host; },
              "set": function (value) { this.ftp_host = value; }
            },
            "ftpPort": {
              "get": function () { return this.ftp_port; },
              "set": function (value) { this.ftp_port = value; }
            },
            "httpAuthPassword": {
              "get": function () { return this.http_auth_password; },
              "set": function (value) { this.http_auth_password = value; }
            },
            "httpAuthUser": {
              "get": function () { return this.http_auth_user; },
              "set": function (value) { this.http_auth_user = value; }
            },
            "httpHost": {
              "get": function () { return this.http_host; },
              "set": function (value) { this.http_host = value; }
            },
            "httpPort": {
              "get": function () { return this.http_port; },
              "set": function (value) { this.http_port = value; }
            },
            "httpUseAuth": {
              "get": function () { return this.http_use_auth; },
              "set": function (value) { this.http_use_auth = value; }
            },
            "httpsHost": {
              "get": function () { return this.https_host; },
              "set": function (value) { this.https_host = value; }
            },
            "httpsPort": {
              "get": function () { return this.https_port; },
              "set": function (value) { this.https_port = value; }
            },
            "ignoreHosts": {
              "get": function () { return this.ignore_hosts; },
              "set": function (value) { this.ignore_hosts = value; }
            },
            "socksHost": {
              "get": function () { return this.socks_host; },
              "set": function (value) { this.socks_host = value; }
            },
            "socksPort": {
              "get": function () { return this.socks_port; },
              "set": function (value) { this.socks_port = value; }
            }
          },
          "static": {}
        },
        "SourceRefresh": {
          "prototype": {
            "getEnabled": {
              "value": function () { return this.get_enabled.apply(this, arguments); }
            },
            "getIntervalMinutes": {
              "value": function () { return this.get_interval_minutes.apply(this, arguments); }
            },
            "setEnabled": {
              "value": function () { return this.set_enabled.apply(this, arguments); }
            },
            "setIntervalMinutes": {
              "value": function () { return this.set_interval_minutes.apply(this, arguments); }
            },
            "intervalMinutes": {
              "get": function () { return this.interval_minutes; },
              "set": function (value) { this.interval_minutes = value; }
            }
          },
          "static": {}
        },
        "SourceRegistry": {
          "prototype": {
            "buildDisplayTree": {
              "value": function () { return this.build_display_tree.apply(this, arguments); }
            },
            "checkEnabled": {
              "value": function () { return this.check_enabled.apply(this, arguments); }
            },
            "commitSource": {
              "value": function () { return this.commit_source.apply(this, arguments); }
            },
            "commitSourceFinish": {
              "value": function () { return this.commit_source_finish.apply(this, arguments); }
            },
            "commitSourceSync": {
              "value": function () { return this.commit_source_sync.apply(this, arguments); }
            },
            "createSources": {
              "value": function () { return this.create_sources.apply(this, arguments); }
            },
            "createSourcesFinish": {
              "value": function () { return this.create_sources_finish.apply(this, arguments); }
            },
            "createSourcesSync": {
              "value": function () { return this.create_sources_sync.apply(this, arguments); }
            },
            "debugDump": {
              "value": function () { return this.debug_dump.apply(this, arguments); }
            },
            "dupUniqueDisplayName": {
              "value": function () { return this.dup_unique_display_name.apply(this, arguments); }
            },
            "findExtension": {
              "value": function () { return this.find_extension.apply(this, arguments); }
            },
            "listEnabled": {
              "value": function () { return this.list_enabled.apply(this, arguments); }
            },
            "listSources": {
              "value": function () { return this.list_sources.apply(this, arguments); }
            },
            "refBuiltinAddressBook": {
              "value": function () { return this.ref_builtin_address_book.apply(this, arguments); }
            },
            "refBuiltinCalendar": {
              "value": function () { return this.ref_builtin_calendar.apply(this, arguments); }
            },
            "refBuiltinMailAccount": {
              "value": function () { return this.ref_builtin_mail_account.apply(this, arguments); }
            },
            "refBuiltinMemoList": {
              "value": function () { return this.ref_builtin_memo_list.apply(this, arguments); }
            },
            "refBuiltinProxy": {
              "value": function () { return this.ref_builtin_proxy.apply(this, arguments); }
            },
            "refBuiltinTaskList": {
              "value": function () { return this.ref_builtin_task_list.apply(this, arguments); }
            },
            "refDefaultAddressBook": {
              "value": function () { return this.ref_default_address_book.apply(this, arguments); }
            },
            "refDefaultCalendar": {
              "value": function () { return this.ref_default_calendar.apply(this, arguments); }
            },
            "refDefaultForExtensionName": {
              "value": function () { return this.ref_default_for_extension_name.apply(this, arguments); }
            },
            "refDefaultMailAccount": {
              "value": function () { return this.ref_default_mail_account.apply(this, arguments); }
            },
            "refDefaultMailIdentity": {
              "value": function () { return this.ref_default_mail_identity.apply(this, arguments); }
            },
            "refDefaultMemoList": {
              "value": function () { return this.ref_default_memo_list.apply(this, arguments); }
            },
            "refDefaultTaskList": {
              "value": function () { return this.ref_default_task_list.apply(this, arguments); }
            },
            "refSource": {
              "value": function () { return this.ref_source.apply(this, arguments); }
            },
            "setDefaultAddressBook": {
              "value": function () { return this.set_default_address_book.apply(this, arguments); }
            },
            "setDefaultCalendar": {
              "value": function () { return this.set_default_calendar.apply(this, arguments); }
            },
            "setDefaultForExtensionName": {
              "value": function () { return this.set_default_for_extension_name.apply(this, arguments); }
            },
            "setDefaultMailAccount": {
              "value": function () { return this.set_default_mail_account.apply(this, arguments); }
            },
            "setDefaultMailIdentity": {
              "value": function () { return this.set_default_mail_identity.apply(this, arguments); }
            },
            "setDefaultMemoList": {
              "value": function () { return this.set_default_memo_list.apply(this, arguments); }
            },
            "setDefaultTaskList": {
              "value": function () { return this.set_default_task_list.apply(this, arguments); }
            },
            "defaultAddressBook": {
              "get": function () { return this.default_address_book; },
              "set": function (value) { this.default_address_book = value; }
            },
            "defaultCalendar": {
              "get": function () { return this.default_calendar; },
              "set": function (value) { this.default_calendar = value; }
            },
            "defaultMailAccount": {
              "get": function () { return this.default_mail_account; },
              "set": function (value) { this.default_mail_account = value; }
            },
            "defaultMailIdentity": {
              "get": function () { return this.default_mail_identity; },
              "set": function (value) { this.default_mail_identity = value; }
            },
            "defaultMemoList": {
              "get": function () { return this.default_memo_list; },
              "set": function (value) { this.default_memo_list = value; }
            },
            "defaultTaskList": {
              "get": function () { return this.default_task_list; },
              "set": function (value) { this.default_task_list = value; }
            }
          },
          "static": {
            "debugEnabled": {
              "value": function () { return this.debug_enabled.apply(this, arguments); }
            },
            "debugPrint": {
              "value": function () { return this.debug_print.apply(this, arguments); }
            },
            "freeDisplayTree": {
              "value": function () { return this.free_display_tree.apply(this, arguments); }
            }
          }
        },
        "SourceResource": {
          "prototype": {
            "dupIdentity": {
              "value": function () { return this.dup_identity.apply(this, arguments); }
            },
            "getIdentity": {
              "value": function () { return this.get_identity.apply(this, arguments); }
            },
            "setIdentity": {
              "value": function () { return this.set_identity.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "SourceRevisionGuards": {
          "prototype": {
            "getEnabled": {
              "value": function () { return this.get_enabled.apply(this, arguments); }
            },
            "setEnabled": {
              "value": function () { return this.set_enabled.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "SourceSMIME": {
          "prototype": {
            "dupEncryptionCertificate": {
              "value": function () { return this.dup_encryption_certificate.apply(this, arguments); }
            },
            "dupSigningAlgorithm": {
              "value": function () { return this.dup_signing_algorithm.apply(this, arguments); }
            },
            "dupSigningCertificate": {
              "value": function () { return this.dup_signing_certificate.apply(this, arguments); }
            },
            "getEncryptByDefault": {
              "value": function () { return this.get_encrypt_by_default.apply(this, arguments); }
            },
            "getEncryptToSelf": {
              "value": function () { return this.get_encrypt_to_self.apply(this, arguments); }
            },
            "getEncryptionCertificate": {
              "value": function () { return this.get_encryption_certificate.apply(this, arguments); }
            },
            "getSignByDefault": {
              "value": function () { return this.get_sign_by_default.apply(this, arguments); }
            },
            "getSigningAlgorithm": {
              "value": function () { return this.get_signing_algorithm.apply(this, arguments); }
            },
            "getSigningCertificate": {
              "value": function () { return this.get_signing_certificate.apply(this, arguments); }
            },
            "setEncryptByDefault": {
              "value": function () { return this.set_encrypt_by_default.apply(this, arguments); }
            },
            "setEncryptToSelf": {
              "value": function () { return this.set_encrypt_to_self.apply(this, arguments); }
            },
            "setEncryptionCertificate": {
              "value": function () { return this.set_encryption_certificate.apply(this, arguments); }
            },
            "setSignByDefault": {
              "value": function () { return this.set_sign_by_default.apply(this, arguments); }
            },
            "setSigningAlgorithm": {
              "value": function () { return this.set_signing_algorithm.apply(this, arguments); }
            },
            "setSigningCertificate": {
              "value": function () { return this.set_signing_certificate.apply(this, arguments); }
            },
            "encryptByDefault": {
              "get": function () { return this.encrypt_by_default; },
              "set": function (value) { this.encrypt_by_default = value; }
            },
            "encryptToSelf": {
              "get": function () { return this.encrypt_to_self; },
              "set": function (value) { this.encrypt_to_self = value; }
            },
            "encryptionCertificate": {
              "get": function () { return this.encryption_certificate; },
              "set": function (value) { this.encryption_certificate = value; }
            },
            "signByDefault": {
              "get": function () { return this.sign_by_default; },
              "set": function (value) { this.sign_by_default = value; }
            },
            "signingAlgorithm": {
              "get": function () { return this.signing_algorithm; },
              "set": function (value) { this.signing_algorithm = value; }
            },
            "signingCertificate": {
              "get": function () { return this.signing_certificate; },
              "set": function (value) { this.signing_certificate = value; }
            }
          },
          "static": {}
        },
        "SourceSecurity": {
          "prototype": {
            "dupMethod": {
              "value": function () { return this.dup_method.apply(this, arguments); }
            },
            "getMethod": {
              "value": function () { return this.get_method.apply(this, arguments); }
            },
            "getSecure": {
              "value": function () { return this.get_secure.apply(this, arguments); }
            },
            "setMethod": {
              "value": function () { return this.set_method.apply(this, arguments); }
            },
            "setSecure": {
              "value": function () { return this.set_secure.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "SourceSelectable": {
          "prototype": {
            "dupColor": {
              "value": function () { return this.dup_color.apply(this, arguments); }
            },
            "getColor": {
              "value": function () { return this.get_color.apply(this, arguments); }
            },
            "getSelected": {
              "value": function () { return this.get_selected.apply(this, arguments); }
            },
            "setColor": {
              "value": function () { return this.set_color.apply(this, arguments); }
            },
            "setSelected": {
              "value": function () { return this.set_selected.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "SourceTaskList": {
          "prototype": {},
          "static": {}
        },
        "SourceUoa": {
          "prototype": {
            "getAccountId": {
              "value": function () { return this.get_account_id.apply(this, arguments); }
            },
            "setAccountId": {
              "value": function () { return this.set_account_id.apply(this, arguments); }
            },
            "accountId": {
              "get": function () { return this.account_id; },
              "set": function (value) { this.account_id = value; }
            }
          },
          "static": {}
        },
        "SourceWeather": {
          "prototype": {
            "dupLocation": {
              "value": function () { return this.dup_location.apply(this, arguments); }
            },
            "getLocation": {
              "value": function () { return this.get_location.apply(this, arguments); }
            },
            "getUnits": {
              "value": function () { return this.get_units.apply(this, arguments); }
            },
            "setLocation": {
              "value": function () { return this.set_location.apply(this, arguments); }
            },
            "setUnits": {
              "value": function () { return this.set_units.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "SourceWebdav": {
          "prototype": {
            "dupDisplayName": {
              "value": function () { return this.dup_display_name.apply(this, arguments); }
            },
            "dupEmailAddress": {
              "value": function () { return this.dup_email_address.apply(this, arguments); }
            },
            "dupResourcePath": {
              "value": function () { return this.dup_resource_path.apply(this, arguments); }
            },
            "dupResourceQuery": {
              "value": function () { return this.dup_resource_query.apply(this, arguments); }
            },
            "dupSoupUri": {
              "value": function () { return this.dup_soup_uri.apply(this, arguments); }
            },
            "dupSslTrust": {
              "value": function () { return this.dup_ssl_trust.apply(this, arguments); }
            },
            "getAvoidIfmatch": {
              "value": function () { return this.get_avoid_ifmatch.apply(this, arguments); }
            },
            "getCalendarAutoSchedule": {
              "value": function () { return this.get_calendar_auto_schedule.apply(this, arguments); }
            },
            "getDisplayName": {
              "value": function () { return this.get_display_name.apply(this, arguments); }
            },
            "getEmailAddress": {
              "value": function () { return this.get_email_address.apply(this, arguments); }
            },
            "getResourcePath": {
              "value": function () { return this.get_resource_path.apply(this, arguments); }
            },
            "getResourceQuery": {
              "value": function () { return this.get_resource_query.apply(this, arguments); }
            },
            "getSslTrust": {
              "value": function () { return this.get_ssl_trust.apply(this, arguments); }
            },
            "setAvoidIfmatch": {
              "value": function () { return this.set_avoid_ifmatch.apply(this, arguments); }
            },
            "setCalendarAutoSchedule": {
              "value": function () { return this.set_calendar_auto_schedule.apply(this, arguments); }
            },
            "setDisplayName": {
              "value": function () { return this.set_display_name.apply(this, arguments); }
            },
            "setEmailAddress": {
              "value": function () { return this.set_email_address.apply(this, arguments); }
            },
            "setResourcePath": {
              "value": function () { return this.set_resource_path.apply(this, arguments); }
            },
            "setResourceQuery": {
              "value": function () { return this.set_resource_query.apply(this, arguments); }
            },
            "setSoupUri": {
              "value": function () { return this.set_soup_uri.apply(this, arguments); }
            },
            "setSslTrust": {
              "value": function () { return this.set_ssl_trust.apply(this, arguments); }
            },
            "unsetTemporarySslTrust": {
              "value": function () { return this.unset_temporary_ssl_trust.apply(this, arguments); }
            },
            "updateSslTrust": {
              "value": function () { return this.update_ssl_trust.apply(this, arguments); }
            },
            "verifySslTrust": {
              "value": function () { return this.verify_ssl_trust.apply(this, arguments); }
            },
            "avoidIfmatch": {
              "get": function () { return this.avoid_ifmatch; },
              "set": function (value) { this.avoid_ifmatch = value; }
            },
            "calendarAutoSchedule": {
              "get": function () { return this.calendar_auto_schedule; },
              "set": function (value) { this.calendar_auto_schedule = value; }
            },
            "displayName": {
              "get": function () { return this.display_name; },
              "set": function (value) { this.display_name = value; }
            },
            "emailAddress": {
              "get": function () { return this.email_address; },
              "set": function (value) { this.email_address = value; }
            },
            "resourcePath": {
              "get": function () { return this.resource_path; },
              "set": function (value) { this.resource_path = value; }
            },
            "resourceQuery": {
              "get": function () { return this.resource_query; },
              "set": function (value) { this.resource_query = value; }
            },
            "soupUri": {
              "get": function () { return this.soup_uri; },
              "set": function (value) { this.soup_uri = value; }
            },
            "sslTrust": {
              "get": function () { return this.ssl_trust; },
              "set": function (value) { this.ssl_trust = value; }
            }
          },
          "static": {}
        }
      },
      "static": {
        "asyncClosureCallback": {
          "value": function () { return this.async_closure_callback.apply(this, arguments); }
        },
        "bindingBindProperty": {
          "value": function () { return this.binding_bind_property.apply(this, arguments); }
        },
        "bindingBindPropertyFull": {
          "value": function () { return this.binding_bind_property_full.apply(this, arguments); }
        },
        "bindingBindPropertyWithClosures": {
          "value": function () { return this.binding_bind_property_with_closures.apply(this, arguments); }
        },
        "bindingTransformEnumNickToValue": {
          "value": function () { return this.binding_transform_enum_nick_to_value.apply(this, arguments); }
        },
        "bindingTransformEnumValueToNick": {
          "value": function () { return this.binding_transform_enum_value_to_nick.apply(this, arguments); }
        },
        "categoriesAdd": {
          "value": function () { return this.categories_add.apply(this, arguments); }
        },
        "categoriesDupIconFileFor": {
          "value": function () { return this.categories_dup_icon_file_for.apply(this, arguments); }
        },
        "categoriesDupList": {
          "value": function () { return this.categories_dup_list.apply(this, arguments); }
        },
        "categoriesExist": {
          "value": function () { return this.categories_exist.apply(this, arguments); }
        },
        "categoriesGetIconFileFor": {
          "value": function () { return this.categories_get_icon_file_for.apply(this, arguments); }
        },
        "categoriesGetList": {
          "value": function () { return this.categories_get_list.apply(this, arguments); }
        },
        "categoriesIsSearchable": {
          "value": function () { return this.categories_is_searchable.apply(this, arguments); }
        },
        "categoriesRegisterChangeListener": {
          "value": function () { return this.categories_register_change_listener.apply(this, arguments); }
        },
        "categoriesRemove": {
          "value": function () { return this.categories_remove.apply(this, arguments); }
        },
        "categoriesSetIconFileFor": {
          "value": function () { return this.categories_set_icon_file_for.apply(this, arguments); }
        },
        "categoriesUnregisterChangeListener": {
          "value": function () { return this.categories_unregister_change_listener.apply(this, arguments); }
        },
        "collatorErrorQuark": {
          "value": function () { return this.collator_error_quark.apply(this, arguments); }
        },
        "dataServerUtilGetDbusCallTimeout": {
          "value": function () { return this.data_server_util_get_dbus_call_timeout.apply(this, arguments); }
        },
        "dataServerUtilSetDbusCallTimeout": {
          "value": function () { return this.data_server_util_set_dbus_call_timeout.apply(this, arguments); }
        },
        "debugLog": {
          "value": function () { return this.debug_log.apply(this, arguments); }
        },
        "debugLogClear": {
          "value": function () { return this.debug_log_clear.apply(this, arguments); }
        },
        "debugLogDisableDomains": {
          "value": function () { return this.debug_log_disable_domains.apply(this, arguments); }
        },
        "debugLogDump": {
          "value": function () { return this.debug_log_dump.apply(this, arguments); }
        },
        "debugLogDumpToDatedFile": {
          "value": function () { return this.debug_log_dump_to_dated_file.apply(this, arguments); }
        },
        "debugLogEnableDomains": {
          "value": function () { return this.debug_log_enable_domains.apply(this, arguments); }
        },
        "debugLogGetMaxLines": {
          "value": function () { return this.debug_log_get_max_lines.apply(this, arguments); }
        },
        "debugLogIsDomainEnabled": {
          "value": function () { return this.debug_log_is_domain_enabled.apply(this, arguments); }
        },
        "debugLogLoadConfiguration": {
          "value": function () { return this.debug_log_load_configuration.apply(this, arguments); }
        },
        "debugLogSetMaxLines": {
          "value": function () { return this.debug_log_set_max_lines.apply(this, arguments); }
        },
        "debugLogv": {
          "value": function () { return this.debug_logv.apply(this, arguments); }
        },
        "enumFromString": {
          "value": function () { return this.enum_from_string.apply(this, arguments); }
        },
        "enumToString": {
          "value": function () { return this.enum_to_string.apply(this, arguments); }
        },
        "fileRecursiveDelete": {
          "value": function () { return this.file_recursive_delete.apply(this, arguments); }
        },
        "fileRecursiveDeleteFinish": {
          "value": function () { return this.file_recursive_delete_finish.apply(this, arguments); }
        },
        "fileRecursiveDeleteSync": {
          "value": function () { return this.file_recursive_delete_sync.apply(this, arguments); }
        },
        "filenameMakeSafe": {
          "value": function () { return this.filename_make_safe.apply(this, arguments); }
        },
        "filenameMkdirEncoded": {
          "value": function () { return this.filename_mkdir_encoded.apply(this, arguments); }
        },
        "freeFormExpToSexp": {
          "value": function () { return this.free_form_exp_to_sexp.apply(this, arguments); }
        },
        "getUserCacheDir": {
          "value": function () { return this.get_user_cache_dir.apply(this, arguments); }
        },
        "getUserConfigDir": {
          "value": function () { return this.get_user_config_dir.apply(this, arguments); }
        },
        "getUserDataDir": {
          "value": function () { return this.get_user_data_dir.apply(this, arguments); }
        },
        "localtimeWithOffset": {
          "value": function () { return this.localtime_with_offset.apply(this, arguments); }
        },
        "memchunkAlloc": {
          "value": function () { return this.memchunk_alloc.apply(this, arguments); }
        },
        "memchunkAlloc0": {
          "value": function () { return this.memchunk_alloc0.apply(this, arguments); }
        },
        "memchunkClean": {
          "value": function () { return this.memchunk_clean.apply(this, arguments); }
        },
        "memchunkDestroy": {
          "value": function () { return this.memchunk_destroy.apply(this, arguments); }
        },
        "memchunkEmpty": {
          "value": function () { return this.memchunk_empty.apply(this, arguments); }
        },
        "memchunkFree": {
          "value": function () { return this.memchunk_free.apply(this, arguments); }
        },
        "memchunkNew": {
          "value": function () { return this.memchunk_new.apply(this, arguments); }
        },
        "mktimeUtc": {
          "value": function () { return this.mktime_utc.apply(this, arguments); }
        },
        "operationPoolNew": {
          "value": function () { return this.operation_pool_new.apply(this, arguments); }
        },
        "queueTransfer": {
          "value": function () { return this.queue_transfer.apply(this, arguments); }
        },
        "secretStoreDeleteSync": {
          "value": function () { return this.secret_store_delete_sync.apply(this, arguments); }
        },
        "secretStoreLookupSync": {
          "value": function () { return this.secret_store_lookup_sync.apply(this, arguments); }
        },
        "secretStoreStoreSync": {
          "value": function () { return this.secret_store_store_sync.apply(this, arguments); }
        },
        "soupSslTrustConnect": {
          "value": function () { return this.soup_ssl_trust_connect.apply(this, arguments); }
        },
        "timeFormatDateAndTime": {
          "value": function () { return this.time_format_date_and_time.apply(this, arguments); }
        },
        "timeFormatTime": {
          "value": function () { return this.time_format_time.apply(this, arguments); }
        },
        "timeGetDFmtWith4digitYear": {
          "value": function () { return this.time_get_d_fmt_with_4digit_year.apply(this, arguments); }
        },
        "timeParseDate": {
          "value": function () { return this.time_parse_date.apply(this, arguments); }
        },
        "timeParseDateAndTime": {
          "value": function () { return this.time_parse_date_and_time.apply(this, arguments); }
        },
        "timeParseDateAndTimeEx": {
          "value": function () { return this.time_parse_date_and_time_ex.apply(this, arguments); }
        },
        "timeParseDateEx": {
          "value": function () { return this.time_parse_date_ex.apply(this, arguments); }
        },
        "timeParseTime": {
          "value": function () { return this.time_parse_time.apply(this, arguments); }
        },
        "timeoutAddSecondsWithName": {
          "value": function () { return this.timeout_add_seconds_with_name.apply(this, arguments); }
        },
        "timeoutAddWithName": {
          "value": function () { return this.timeout_add_with_name.apply(this, arguments); }
        },
        "typeTraverse": {
          "value": function () { return this.type_traverse.apply(this, arguments); }
        },
        "uidNew": {
          "value": function () { return this.uid_new.apply(this, arguments); }
        },
        "utf8Strftime": {
          "value": function () { return this.utf8_strftime.apply(this, arguments); }
        },
        "utilCopyObjectSlist": {
          "value": function () { return this.util_copy_object_slist.apply(this, arguments); }
        },
        "utilCopyStringSlist": {
          "value": function () { return this.util_copy_string_slist.apply(this, arguments); }
        },
        "utilEnsureGdbusString": {
          "value": function () { return this.util_ensure_gdbus_string.apply(this, arguments); }
        },
        "utilFreeNullableObjectSlist": {
          "value": function () { return this.util_free_nullable_object_slist.apply(this, arguments); }
        },
        "utilFreeObjectSlist": {
          "value": function () { return this.util_free_object_slist.apply(this, arguments); }
        },
        "utilFreeStringSlist": {
          "value": function () { return this.util_free_string_slist.apply(this, arguments); }
        },
        "utilGetSourceFullName": {
          "value": function () { return this.util_get_source_full_name.apply(this, arguments); }
        },
        "utilGthreadId": {
          "value": function () { return this.util_gthread_id.apply(this, arguments); }
        },
        "utilSafeFreeString": {
          "value": function () { return this.util_safe_free_string.apply(this, arguments); }
        },
        "utilSlistToStrv": {
          "value": function () { return this.util_slist_to_strv.apply(this, arguments); }
        },
        "utilStrdupStrip": {
          "value": function () { return this.util_strdup_strip.apply(this, arguments); }
        },
        "utilStrstrcase": {
          "value": function () { return this.util_strstrcase.apply(this, arguments); }
        },
        "utilStrvEqual": {
          "value": function () { return this.util_strv_equal.apply(this, arguments); }
        },
        "utilStrvToSlist": {
          "value": function () { return this.util_strv_to_slist.apply(this, arguments); }
        },
        "utilUnicodeGetUtf8": {
          "value": function () { return this.util_unicode_get_utf8.apply(this, arguments); }
        },
        "utilUtf8DataMakeValid": {
          "value": function () { return this.util_utf8_data_make_valid.apply(this, arguments); }
        },
        "utilUtf8MakeValid": {
          "value": function () { return this.util_utf8_make_valid.apply(this, arguments); }
        },
        "utilUtf8Normalize": {
          "value": function () { return this.util_utf8_normalize.apply(this, arguments); }
        },
        "utilUtf8RemoveAccents": {
          "value": function () { return this.util_utf8_remove_accents.apply(this, arguments); }
        },
        "utilUtf8Strcasecmp": {
          "value": function () { return this.util_utf8_strcasecmp.apply(this, arguments); }
        },
        "utilUtf8Strstrcase": {
          "value": function () { return this.util_utf8_strstrcase.apply(this, arguments); }
        },
        "utilUtf8Strstrcasedecomp": {
          "value": function () { return this.util_utf8_strstrcasedecomp.apply(this, arguments); }
        },
        "weakRefFree": {
          "value": function () { return this.weak_ref_free.apply(this, arguments); }
        },
        "weakRefNew": {
          "value": function () { return this.weak_ref_new.apply(this, arguments); }
        },
        "webdavDiscoverFreeDiscoveredSources": {
          "value": function () { return this.webdav_discover_free_discovered_sources.apply(this, arguments); }
        },
        "webdavDiscoverSources": {
          "value": function () { return this.webdav_discover_sources.apply(this, arguments); }
        },
        "webdavDiscoverSourcesFinish": {
          "value": function () { return this.webdav_discover_sources_finish.apply(this, arguments); }
        },
        "webdavDiscoverSourcesSync": {
          "value": function () { return this.webdav_discover_sources_sync.apply(this, arguments); }
        },
        "xmlDestroyHash": {
          "value": function () { return this.xml_destroy_hash.apply(this, arguments); }
        },
        "xmlFromHash": {
          "value": function () { return this.xml_from_hash.apply(this, arguments); }
        },
        "xmlGetChildByName": {
          "value": function () { return this.xml_get_child_by_name.apply(this, arguments); }
        },
        "xmlParseFile": {
          "value": function () { return this.xml_parse_file.apply(this, arguments); }
        },
        "xmlSaveFile": {
          "value": function () { return this.xml_save_file.apply(this, arguments); }
        },
        "xmlToHash": {
          "value": function () { return this.xml_to_hash.apply(this, arguments); }
        },
        "xmlhashAdd": {
          "value": function () { return this.xmlhash_add.apply(this, arguments); }
        },
        "xmlhashCompare": {
          "value": function () { return this.xmlhash_compare.apply(this, arguments); }
        },
        "xmlhashDestroy": {
          "value": function () { return this.xmlhash_destroy.apply(this, arguments); }
        },
        "xmlhashForeachKey": {
          "value": function () { return this.xmlhash_foreach_key.apply(this, arguments); }
        },
        "xmlhashForeachKeyRemove": {
          "value": function () { return this.xmlhash_foreach_key_remove.apply(this, arguments); }
        },
        "xmlhashNew": {
          "value": function () { return this.xmlhash_new.apply(this, arguments); }
        },
        "xmlhashRemove": {
          "value": function () { return this.xmlhash_remove.apply(this, arguments); }
        },
        "xmlhashWrite": {
          "value": function () { return this.xmlhash_write.apply(this, arguments); }
        }
      }
    },
    "EvinceDocument": {
      "class": {
        "Annotation": {
          "prototype": {
            "getAnnotationType": {
              "value": function () { return this.get_annotation_type.apply(this, arguments); }
            },
            "getArea": {
              "value": function () { return this.get_area.apply(this, arguments); }
            },
            "getColor": {
              "value": function () { return this.get_color.apply(this, arguments); }
            },
            "getContents": {
              "value": function () { return this.get_contents.apply(this, arguments); }
            },
            "getModified": {
              "value": function () { return this.get_modified.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getPage": {
              "value": function () { return this.get_page.apply(this, arguments); }
            },
            "getPageIndex": {
              "value": function () { return this.get_page_index.apply(this, arguments); }
            },
            "getRgba": {
              "value": function () { return this.get_rgba.apply(this, arguments); }
            },
            "setArea": {
              "value": function () { return this.set_area.apply(this, arguments); }
            },
            "setColor": {
              "value": function () { return this.set_color.apply(this, arguments); }
            },
            "setContents": {
              "value": function () { return this.set_contents.apply(this, arguments); }
            },
            "setModified": {
              "value": function () { return this.set_modified.apply(this, arguments); }
            },
            "setModifiedFromTime": {
              "value": function () { return this.set_modified_from_time.apply(this, arguments); }
            },
            "setName": {
              "value": function () { return this.set_name.apply(this, arguments); }
            },
            "setRgba": {
              "value": function () { return this.set_rgba.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "AnnotationAttachment": {
          "prototype": {
            "getAttachment": {
              "value": function () { return this.get_attachment.apply(this, arguments); }
            },
            "setAttachment": {
              "value": function () { return this.set_attachment.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "AnnotationText": {
          "prototype": {
            "getIcon": {
              "value": function () { return this.get_icon.apply(this, arguments); }
            },
            "getIsOpen": {
              "value": function () { return this.get_is_open.apply(this, arguments); }
            },
            "setIcon": {
              "value": function () { return this.set_icon.apply(this, arguments); }
            },
            "setIsOpen": {
              "value": function () { return this.set_is_open.apply(this, arguments); }
            },
            "isOpen": {
              "get": function () { return this.is_open; },
              "set": function (value) { this.is_open = value; }
            }
          },
          "static": {}
        },
        "AnnotationTextMarkup": {
          "prototype": {
            "getMarkupType": {
              "value": function () { return this.get_markup_type.apply(this, arguments); }
            },
            "setMarkupType": {
              "value": function () { return this.set_markup_type.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Attachment": {
          "prototype": {
            "getCreationDate": {
              "value": function () { return this.get_creation_date.apply(this, arguments); }
            },
            "getDescription": {
              "value": function () { return this.get_description.apply(this, arguments); }
            },
            "getMimeType": {
              "value": function () { return this.get_mime_type.apply(this, arguments); }
            },
            "getModificationDate": {
              "value": function () { return this.get_modification_date.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            }
          },
          "static": {
            "errorQuark": {
              "value": function () { return this.error_quark.apply(this, arguments); }
            }
          }
        },
        "Document": {
          "prototype": {
            "checkDimensions": {
              "value": function () { return this.check_dimensions.apply(this, arguments); }
            },
            "findPageByLabel": {
              "value": function () { return this.find_page_by_label.apply(this, arguments); }
            },
            "getBackendInfo": {
              "value": function () { return this.get_backend_info.apply(this, arguments); }
            },
            "getInfo": {
              "value": function () { return this.get_info.apply(this, arguments); }
            },
            "getMaxLabelLen": {
              "value": function () { return this.get_max_label_len.apply(this, arguments); }
            },
            "getMaxPageSize": {
              "value": function () { return this.get_max_page_size.apply(this, arguments); }
            },
            "getMinPageSize": {
              "value": function () { return this.get_min_page_size.apply(this, arguments); }
            },
            "getNPages": {
              "value": function () { return this.get_n_pages.apply(this, arguments); }
            },
            "getPage": {
              "value": function () { return this.get_page.apply(this, arguments); }
            },
            "getPageLabel": {
              "value": function () { return this.get_page_label.apply(this, arguments); }
            },
            "getPageSize": {
              "value": function () { return this.get_page_size.apply(this, arguments); }
            },
            "getSize": {
              "value": function () { return this.get_size.apply(this, arguments); }
            },
            "getThumbnail": {
              "value": function () { return this.get_thumbnail.apply(this, arguments); }
            },
            "getThumbnailSurface": {
              "value": function () { return this.get_thumbnail_surface.apply(this, arguments); }
            },
            "getTitle": {
              "value": function () { return this.get_title.apply(this, arguments); }
            },
            "getUri": {
              "value": function () { return this.get_uri.apply(this, arguments); }
            },
            "hasSynctex": {
              "value": function () { return this.has_synctex.apply(this, arguments); }
            },
            "hasTextPageLabels": {
              "value": function () { return this.has_text_page_labels.apply(this, arguments); }
            },
            "isPageSizeUniform": {
              "value": function () { return this.is_page_size_uniform.apply(this, arguments); }
            },
            "loadGfile": {
              "value": function () { return this.load_gfile.apply(this, arguments); }
            },
            "loadStream": {
              "value": function () { return this.load_stream.apply(this, arguments); }
            },
            "synctexBackwardSearch": {
              "value": function () { return this.synctex_backward_search.apply(this, arguments); }
            },
            "synctexForwardSearch": {
              "value": function () { return this.synctex_forward_search.apply(this, arguments); }
            }
          },
          "static": {
            "docMutexLock": {
              "value": function () { return this.doc_mutex_lock.apply(this, arguments); }
            },
            "docMutexTrylock": {
              "value": function () { return this.doc_mutex_trylock.apply(this, arguments); }
            },
            "docMutexUnlock": {
              "value": function () { return this.doc_mutex_unlock.apply(this, arguments); }
            },
            "factoryAddFilters": {
              "value": function () { return this.factory_add_filters.apply(this, arguments); }
            },
            "factoryGetDocument": {
              "value": function () { return this.factory_get_document.apply(this, arguments); }
            },
            "factoryGetDocumentForGfile": {
              "value": function () { return this.factory_get_document_for_gfile.apply(this, arguments); }
            },
            "factoryGetDocumentForStream": {
              "value": function () { return this.factory_get_document_for_stream.apply(this, arguments); }
            },
            "fcMutexLock": {
              "value": function () { return this.fc_mutex_lock.apply(this, arguments); }
            },
            "fcMutexTrylock": {
              "value": function () { return this.fc_mutex_trylock.apply(this, arguments); }
            },
            "fcMutexUnlock": {
              "value": function () { return this.fc_mutex_unlock.apply(this, arguments); }
            },
            "getDocMutex": {
              "value": function () { return this.get_doc_mutex.apply(this, arguments); }
            },
            "getFcMutex": {
              "value": function () { return this.get_fc_mutex.apply(this, arguments); }
            },
            "miscFormatDate": {
              "value": function () { return this.misc_format_date.apply(this, arguments); }
            },
            "miscGetLoadingThumbnail": {
              "value": function () { return this.misc_get_loading_thumbnail.apply(this, arguments); }
            },
            "miscGetPageBorderSize": {
              "value": function () { return this.misc_get_page_border_size.apply(this, arguments); }
            },
            "miscGetPointerPosition": {
              "value": function () { return this.misc_get_pointer_position.apply(this, arguments); }
            },
            "miscGetScreenDpi": {
              "value": function () { return this.misc_get_screen_dpi.apply(this, arguments); }
            },
            "miscGetThumbnailFrame": {
              "value": function () { return this.misc_get_thumbnail_frame.apply(this, arguments); }
            },
            "miscInvertPixbuf": {
              "value": function () { return this.misc_invert_pixbuf.apply(this, arguments); }
            },
            "miscInvertSurface": {
              "value": function () { return this.misc_invert_surface.apply(this, arguments); }
            },
            "miscPaintOnePage": {
              "value": function () { return this.misc_paint_one_page.apply(this, arguments); }
            },
            "miscPixbufFromSurface": {
              "value": function () { return this.misc_pixbuf_from_surface.apply(this, arguments); }
            },
            "miscRenderLoadingThumbnail": {
              "value": function () { return this.misc_render_loading_thumbnail.apply(this, arguments); }
            },
            "miscRenderLoadingThumbnailSurface": {
              "value": function () { return this.misc_render_loading_thumbnail_surface.apply(this, arguments); }
            },
            "miscRenderThumbnailSurfaceWithFrame": {
              "value": function () { return this.misc_render_thumbnail_surface_with_frame.apply(this, arguments); }
            },
            "miscRenderThumbnailWithFrame": {
              "value": function () { return this.misc_render_thumbnail_with_frame.apply(this, arguments); }
            },
            "miscSurfaceFromPixbuf": {
              "value": function () { return this.misc_surface_from_pixbuf.apply(this, arguments); }
            },
            "miscSurfaceRotateAndScale": {
              "value": function () { return this.misc_surface_rotate_and_scale.apply(this, arguments); }
            }
          }
        },
        "FormField": {
          "prototype": {},
          "static": {}
        },
        "FormFieldButton": {
          "prototype": {},
          "static": {}
        },
        "FormFieldChoice": {
          "prototype": {},
          "static": {}
        },
        "FormFieldSignature": {
          "prototype": {},
          "static": {}
        },
        "FormFieldText": {
          "prototype": {},
          "static": {}
        },
        "Image": {
          "prototype": {
            "getId": {
              "value": function () { return this.get_id.apply(this, arguments); }
            },
            "getPage": {
              "value": function () { return this.get_page.apply(this, arguments); }
            },
            "getPixbuf": {
              "value": function () { return this.get_pixbuf.apply(this, arguments); }
            },
            "getTmpUri": {
              "value": function () { return this.get_tmp_uri.apply(this, arguments); }
            },
            "saveTmp": {
              "value": function () { return this.save_tmp.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Layer": {
          "prototype": {
            "getRbGroup": {
              "value": function () { return this.get_rb_group.apply(this, arguments); }
            },
            "isParent": {
              "value": function () { return this.is_parent.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Link": {
          "prototype": {
            "getAction": {
              "value": function () { return this.get_action.apply(this, arguments); }
            },
            "getTitle": {
              "value": function () { return this.get_title.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "LinkAction": {
          "prototype": {
            "getActionType": {
              "value": function () { return this.get_action_type.apply(this, arguments); }
            },
            "getDest": {
              "value": function () { return this.get_dest.apply(this, arguments); }
            },
            "getFilename": {
              "value": function () { return this.get_filename.apply(this, arguments); }
            },
            "getHideList": {
              "value": function () { return this.get_hide_list.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getParams": {
              "value": function () { return this.get_params.apply(this, arguments); }
            },
            "getShowList": {
              "value": function () { return this.get_show_list.apply(this, arguments); }
            },
            "getToggleList": {
              "value": function () { return this.get_toggle_list.apply(this, arguments); }
            },
            "getUri": {
              "value": function () { return this.get_uri.apply(this, arguments); }
            },
            "hideList": {
              "get": function () { return this.hide_list; },
              "set": function (value) { this.hide_list = value; }
            },
            "showList": {
              "get": function () { return this.show_list; },
              "set": function (value) { this.show_list = value; }
            },
            "toggleList": {
              "get": function () { return this.toggle_list; },
              "set": function (value) { this.toggle_list = value; }
            }
          },
          "static": {}
        },
        "LinkDest": {
          "prototype": {
            "getBottom": {
              "value": function () { return this.get_bottom.apply(this, arguments); }
            },
            "getDestType": {
              "value": function () { return this.get_dest_type.apply(this, arguments); }
            },
            "getLeft": {
              "value": function () { return this.get_left.apply(this, arguments); }
            },
            "getNamedDest": {
              "value": function () { return this.get_named_dest.apply(this, arguments); }
            },
            "getPage": {
              "value": function () { return this.get_page.apply(this, arguments); }
            },
            "getPageLabel": {
              "value": function () { return this.get_page_label.apply(this, arguments); }
            },
            "getRight": {
              "value": function () { return this.get_right.apply(this, arguments); }
            },
            "getTop": {
              "value": function () { return this.get_top.apply(this, arguments); }
            },
            "getZoom": {
              "value": function () { return this.get_zoom.apply(this, arguments); }
            },
            "pageLabel": {
              "get": function () { return this.page_label; },
              "set": function (value) { this.page_label = value; }
            }
          },
          "static": {}
        },
        "Media": {
          "prototype": {
            "getPageIndex": {
              "value": function () { return this.get_page_index.apply(this, arguments); }
            },
            "getShowControls": {
              "value": function () { return this.get_show_controls.apply(this, arguments); }
            },
            "getUri": {
              "value": function () { return this.get_uri.apply(this, arguments); }
            },
            "setShowControls": {
              "value": function () { return this.set_show_controls.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Page": {
          "prototype": {},
          "static": {}
        },
        "RenderContext": {
          "prototype": {
            "computeScaledSize": {
              "value": function () { return this.compute_scaled_size.apply(this, arguments); }
            },
            "computeScales": {
              "value": function () { return this.compute_scales.apply(this, arguments); }
            },
            "computeTransformedSize": {
              "value": function () { return this.compute_transformed_size.apply(this, arguments); }
            },
            "setPage": {
              "value": function () { return this.set_page.apply(this, arguments); }
            },
            "setRotation": {
              "value": function () { return this.set_rotation.apply(this, arguments); }
            },
            "setScale": {
              "value": function () { return this.set_scale.apply(this, arguments); }
            },
            "setTargetSize": {
              "value": function () { return this.set_target_size.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "TransitionEffect": {
          "prototype": {},
          "static": {}
        }
      },
      "static": {
        "backendsManagerGetAllTypesInfo": {
          "value": function () { return this.backends_manager_get_all_types_info.apply(this, arguments); }
        },
        "backendsManagerGetDocument": {
          "value": function () { return this.backends_manager_get_document.apply(this, arguments); }
        },
        "backendsManagerGetDocumentModuleName": {
          "value": function () { return this.backends_manager_get_document_module_name.apply(this, arguments); }
        },
        "backendsManagerGetDocumentTypeInfo": {
          "value": function () { return this.backends_manager_get_document_type_info.apply(this, arguments); }
        },
        "documentErrorQuark": {
          "value": function () { return this.document_error_quark.apply(this, arguments); }
        },
        "fileCompress": {
          "value": function () { return this.file_compress.apply(this, arguments); }
        },
        "fileCopyMetadata": {
          "value": function () { return this.file_copy_metadata.apply(this, arguments); }
        },
        "fileGetMimeType": {
          "value": function () { return this.file_get_mime_type.apply(this, arguments); }
        },
        "fileIsTemp": {
          "value": function () { return this.file_is_temp.apply(this, arguments); }
        },
        "fileUncompress": {
          "value": function () { return this.file_uncompress.apply(this, arguments); }
        },
        "getLocaleDir": {
          "value": function () { return this.get_locale_dir.apply(this, arguments); }
        },
        "mkstempFile": {
          "value": function () { return this.mkstemp_file.apply(this, arguments); }
        },
        "rectCmp": {
          "value": function () { return this.rect_cmp.apply(this, arguments); }
        },
        "tmpFileUnlink": {
          "value": function () { return this.tmp_file_unlink.apply(this, arguments); }
        },
        "tmpFilenameUnlink": {
          "value": function () { return this.tmp_filename_unlink.apply(this, arguments); }
        },
        "tmpUriUnlink": {
          "value": function () { return this.tmp_uri_unlink.apply(this, arguments); }
        },
        "xferUriSimple": {
          "value": function () { return this.xfer_uri_simple.apply(this, arguments); }
        }
      }
    },
    "EvinceView": {
      "class": {
        "DocumentModel": {
          "prototype": {
            "getContinuous": {
              "value": function () { return this.get_continuous.apply(this, arguments); }
            },
            "getDocument": {
              "value": function () { return this.get_document.apply(this, arguments); }
            },
            "getDualPage": {
              "value": function () { return this.get_dual_page.apply(this, arguments); }
            },
            "getDualPageOddPagesLeft": {
              "value": function () { return this.get_dual_page_odd_pages_left.apply(this, arguments); }
            },
            "getFullscreen": {
              "value": function () { return this.get_fullscreen.apply(this, arguments); }
            },
            "getInvertedColors": {
              "value": function () { return this.get_inverted_colors.apply(this, arguments); }
            },
            "getMaxScale": {
              "value": function () { return this.get_max_scale.apply(this, arguments); }
            },
            "getMinScale": {
              "value": function () { return this.get_min_scale.apply(this, arguments); }
            },
            "getPage": {
              "value": function () { return this.get_page.apply(this, arguments); }
            },
            "getPageLayout": {
              "value": function () { return this.get_page_layout.apply(this, arguments); }
            },
            "getRotation": {
              "value": function () { return this.get_rotation.apply(this, arguments); }
            },
            "getScale": {
              "value": function () { return this.get_scale.apply(this, arguments); }
            },
            "getSizingMode": {
              "value": function () { return this.get_sizing_mode.apply(this, arguments); }
            },
            "setContinuous": {
              "value": function () { return this.set_continuous.apply(this, arguments); }
            },
            "setDocument": {
              "value": function () { return this.set_document.apply(this, arguments); }
            },
            "setDualPage": {
              "value": function () { return this.set_dual_page.apply(this, arguments); }
            },
            "setDualPageOddPagesLeft": {
              "value": function () { return this.set_dual_page_odd_pages_left.apply(this, arguments); }
            },
            "setFullscreen": {
              "value": function () { return this.set_fullscreen.apply(this, arguments); }
            },
            "setInvertedColors": {
              "value": function () { return this.set_inverted_colors.apply(this, arguments); }
            },
            "setMaxScale": {
              "value": function () { return this.set_max_scale.apply(this, arguments); }
            },
            "setMinScale": {
              "value": function () { return this.set_min_scale.apply(this, arguments); }
            },
            "setPage": {
              "value": function () { return this.set_page.apply(this, arguments); }
            },
            "setPageByLabel": {
              "value": function () { return this.set_page_by_label.apply(this, arguments); }
            },
            "setPageLayout": {
              "value": function () { return this.set_page_layout.apply(this, arguments); }
            },
            "setRotation": {
              "value": function () { return this.set_rotation.apply(this, arguments); }
            },
            "setScale": {
              "value": function () { return this.set_scale.apply(this, arguments); }
            },
            "setSizingMode": {
              "value": function () { return this.set_sizing_mode.apply(this, arguments); }
            },
            "dualOddLeft": {
              "get": function () { return this.dual_odd_left; },
              "set": function (value) { this.dual_odd_left = value; }
            },
            "dualPage": {
              "get": function () { return this.dual_page; },
              "set": function (value) { this.dual_page = value; }
            },
            "invertedColors": {
              "get": function () { return this.inverted_colors; },
              "set": function (value) { this.inverted_colors = value; }
            },
            "maxScale": {
              "get": function () { return this.max_scale; },
              "set": function (value) { this.max_scale = value; }
            },
            "minScale": {
              "get": function () { return this.min_scale; },
              "set": function (value) { this.min_scale = value; }
            },
            "pageLayout": {
              "get": function () { return this.page_layout; },
              "set": function (value) { this.page_layout = value; }
            },
            "sizingMode": {
              "get": function () { return this.sizing_mode; },
              "set": function (value) { this.sizing_mode = value; }
            }
          },
          "static": {}
        },
        "Job": {
          "prototype": {
            "failedFromError": {
              "value": function () { return this.failed_from_error.apply(this, arguments); }
            },
            "getRunMode": {
              "value": function () { return this.get_run_mode.apply(this, arguments); }
            },
            "isFailed": {
              "value": function () { return this.is_failed.apply(this, arguments); }
            },
            "isFinished": {
              "value": function () { return this.is_finished.apply(this, arguments); }
            },
            "schedulerPushJob": {
              "value": function () { return this.scheduler_push_job.apply(this, arguments); }
            },
            "schedulerUpdateJob": {
              "value": function () { return this.scheduler_update_job.apply(this, arguments); }
            },
            "setRunMode": {
              "value": function () { return this.set_run_mode.apply(this, arguments); }
            }
          },
          "static": {
            "schedulerGetRunningThreadJob": {
              "value": function () { return this.scheduler_get_running_thread_job.apply(this, arguments); }
            }
          }
        },
        "JobAnnots": {
          "prototype": {},
          "static": {}
        },
        "JobAttachments": {
          "prototype": {},
          "static": {}
        },
        "JobExport": {
          "prototype": {
            "setPage": {
              "value": function () { return this.set_page.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "JobFind": {
          "prototype": {
            "getNResults": {
              "value": function () { return this.get_n_results.apply(this, arguments); }
            },
            "getOptions": {
              "value": function () { return this.get_options.apply(this, arguments); }
            },
            "getProgress": {
              "value": function () { return this.get_progress.apply(this, arguments); }
            },
            "getResults": {
              "value": function () { return this.get_results.apply(this, arguments); }
            },
            "hasResults": {
              "value": function () { return this.has_results.apply(this, arguments); }
            },
            "setOptions": {
              "value": function () { return this.set_options.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "JobFonts": {
          "prototype": {},
          "static": {}
        },
        "JobLayers": {
          "prototype": {},
          "static": {}
        },
        "JobLinks": {
          "prototype": {
            "getModel": {
              "value": function () { return this.get_model.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "JobLoad": {
          "prototype": {
            "setPassword": {
              "value": function () { return this.set_password.apply(this, arguments); }
            },
            "setUri": {
              "value": function () { return this.set_uri.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "JobLoadGFile": {
          "prototype": {
            "setGfile": {
              "value": function () { return this.set_gfile.apply(this, arguments); }
            },
            "setLoadFlags": {
              "value": function () { return this.set_load_flags.apply(this, arguments); }
            },
            "setPassword": {
              "value": function () { return this.set_password.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "JobLoadStream": {
          "prototype": {
            "setLoadFlags": {
              "value": function () { return this.set_load_flags.apply(this, arguments); }
            },
            "setPassword": {
              "value": function () { return this.set_password.apply(this, arguments); }
            },
            "setStream": {
              "value": function () { return this.set_stream.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "JobPageData": {
          "prototype": {},
          "static": {}
        },
        "JobPrint": {
          "prototype": {
            "setCairo": {
              "value": function () { return this.set_cairo.apply(this, arguments); }
            },
            "setPage": {
              "value": function () { return this.set_page.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "JobRender": {
          "prototype": {
            "setSelectionInfo": {
              "value": function () { return this.set_selection_info.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "JobSave": {
          "prototype": {},
          "static": {}
        },
        "JobThumbnail": {
          "prototype": {
            "setHasFrame": {
              "value": function () { return this.set_has_frame.apply(this, arguments); }
            },
            "setOutputFormat": {
              "value": function () { return this.set_output_format.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "PrintOperation": {
          "prototype": {
            "getDefaultPageSetup": {
              "value": function () { return this.get_default_page_setup.apply(this, arguments); }
            },
            "getEmbedPageSetup": {
              "value": function () { return this.get_embed_page_setup.apply(this, arguments); }
            },
            "getError": {
              "value": function () { return this.get_error.apply(this, arguments); }
            },
            "getJobName": {
              "value": function () { return this.get_job_name.apply(this, arguments); }
            },
            "getPrintSettings": {
              "value": function () { return this.get_print_settings.apply(this, arguments); }
            },
            "getProgress": {
              "value": function () { return this.get_progress.apply(this, arguments); }
            },
            "getStatus": {
              "value": function () { return this.get_status.apply(this, arguments); }
            },
            "setCurrentPage": {
              "value": function () { return this.set_current_page.apply(this, arguments); }
            },
            "setDefaultPageSetup": {
              "value": function () { return this.set_default_page_setup.apply(this, arguments); }
            },
            "setEmbedPageSetup": {
              "value": function () { return this.set_embed_page_setup.apply(this, arguments); }
            },
            "setJobName": {
              "value": function () { return this.set_job_name.apply(this, arguments); }
            },
            "setPrintSettings": {
              "value": function () { return this.set_print_settings.apply(this, arguments); }
            }
          },
          "static": {
            "existsForDocument": {
              "value": function () { return this.exists_for_document.apply(this, arguments); }
            }
          }
        },
        "View": {
          "prototype": {
            "autoscrollStart": {
              "value": function () { return this.autoscroll_start.apply(this, arguments); }
            },
            "autoscrollStop": {
              "value": function () { return this.autoscroll_stop.apply(this, arguments); }
            },
            "beginAddAnnotation": {
              "value": function () { return this.begin_add_annotation.apply(this, arguments); }
            },
            "canZoomIn": {
              "get": function () { return this.can_zoom_in; },
              "set": function (value) { this.can_zoom_in = value; }
            },
            "canZoomOut": {
              "get": function () { return this.can_zoom_out; },
              "set": function (value) { this.can_zoom_out = value; }
            },
            "cancelAddAnnotation": {
              "value": function () { return this.cancel_add_annotation.apply(this, arguments); }
            },
            "copyLinkAddress": {
              "value": function () { return this.copy_link_address.apply(this, arguments); }
            },
            "findCancel": {
              "value": function () { return this.find_cancel.apply(this, arguments); }
            },
            "findChanged": {
              "value": function () { return this.find_changed.apply(this, arguments); }
            },
            "findNext": {
              "value": function () { return this.find_next.apply(this, arguments); }
            },
            "findPrevious": {
              "value": function () { return this.find_previous.apply(this, arguments); }
            },
            "findRestart": {
              "value": function () { return this.find_restart.apply(this, arguments); }
            },
            "findSearchChanged": {
              "value": function () { return this.find_search_changed.apply(this, arguments); }
            },
            "findSetHighlightSearch": {
              "value": function () { return this.find_set_highlight_search.apply(this, arguments); }
            },
            "findSetResult": {
              "value": function () { return this.find_set_result.apply(this, arguments); }
            },
            "findStarted": {
              "value": function () { return this.find_started.apply(this, arguments); }
            },
            "focusAnnotation": {
              "value": function () { return this.focus_annotation.apply(this, arguments); }
            },
            "getAllowLinksChangeZoom": {
              "value": function () { return this.get_allow_links_change_zoom.apply(this, arguments); }
            },
            "getHasSelection": {
              "value": function () { return this.get_has_selection.apply(this, arguments); }
            },
            "getPageExtents": {
              "value": function () { return this.get_page_extents.apply(this, arguments); }
            },
            "handleLink": {
              "value": function () { return this.handle_link.apply(this, arguments); }
            },
            "hideCursor": {
              "value": function () { return this.hide_cursor.apply(this, arguments); }
            },
            "highlightForwardSearch": {
              "value": function () { return this.highlight_forward_search.apply(this, arguments); }
            },
            "isCaretNavigationEnabled": {
              "value": function () { return this.is_caret_navigation_enabled.apply(this, arguments); }
            },
            "isLoading": {
              "get": function () { return this.is_loading; },
              "set": function (value) { this.is_loading = value; }
            },
            "nextPage": {
              "value": function () { return this.next_page.apply(this, arguments); }
            },
            "previousPage": {
              "value": function () { return this.previous_page.apply(this, arguments); }
            },
            "removeAnnotation": {
              "value": function () { return this.remove_annotation.apply(this, arguments); }
            },
            "selectAll": {
              "value": function () { return this.select_all.apply(this, arguments); }
            },
            "setAllowLinksChangeZoom": {
              "value": function () { return this.set_allow_links_change_zoom.apply(this, arguments); }
            },
            "setCaretCursorPosition": {
              "value": function () { return this.set_caret_cursor_position.apply(this, arguments); }
            },
            "setCaretNavigationEnabled": {
              "value": function () { return this.set_caret_navigation_enabled.apply(this, arguments); }
            },
            "setLoading": {
              "value": function () { return this.set_loading.apply(this, arguments); }
            },
            "setModel": {
              "value": function () { return this.set_model.apply(this, arguments); }
            },
            "setPageCacheSize": {
              "value": function () { return this.set_page_cache_size.apply(this, arguments); }
            },
            "showCursor": {
              "value": function () { return this.show_cursor.apply(this, arguments); }
            },
            "supportsCaretNavigation": {
              "value": function () { return this.supports_caret_navigation.apply(this, arguments); }
            },
            "zoomIn": {
              "value": function () { return this.zoom_in.apply(this, arguments); }
            },
            "zoomOut": {
              "value": function () { return this.zoom_out.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "ViewPresentation": {
          "prototype": {
            "getCurrentPage": {
              "value": function () { return this.get_current_page.apply(this, arguments); }
            },
            "getRotation": {
              "value": function () { return this.get_rotation.apply(this, arguments); }
            },
            "nextPage": {
              "value": function () { return this.next_page.apply(this, arguments); }
            },
            "previousPage": {
              "value": function () { return this.previous_page.apply(this, arguments); }
            },
            "setRotation": {
              "value": function () { return this.set_rotation.apply(this, arguments); }
            },
            "currentPage": {
              "get": function () { return this.current_page; },
              "set": function (value) { this.current_page = value; }
            },
            "invertedColors": {
              "get": function () { return this.inverted_colors; },
              "set": function (value) { this.inverted_colors = value; }
            }
          },
          "static": {}
        }
      },
      "static": {
        "stockIconsInit": {
          "value": function () { return this.stock_icons_init.apply(this, arguments); }
        },
        "stockIconsSetScreen": {
          "value": function () { return this.stock_icons_set_screen.apply(this, arguments); }
        },
        "stockIconsShutdown": {
          "value": function () { return this.stock_icons_shutdown.apply(this, arguments); }
        }
      }
    },
    "Farstream": {
      "class": {
        "Conference": {
          "prototype": {
            "newParticipant": {
              "value": function () { return this.new_participant.apply(this, arguments); }
            },
            "newSession": {
              "value": function () { return this.new_session.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "ElementAddedNotifier": {
          "prototype": {
            "setDefaultProperties": {
              "value": function () { return this.set_default_properties.apply(this, arguments); }
            },
            "setPropertiesFromFile": {
              "value": function () { return this.set_properties_from_file.apply(this, arguments); }
            },
            "setPropertiesFromKeyfile": {
              "value": function () { return this.set_properties_from_keyfile.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Participant": {
          "prototype": {},
          "static": {}
        },
        "Plugin": {
          "prototype": {},
          "static": {
            "createValist": {
              "value": function () { return this.create_valist.apply(this, arguments); }
            },
            "listAvailable": {
              "value": function () { return this.list_available.apply(this, arguments); }
            }
          }
        },
        "Session": {
          "prototype": {
            "codecsNeedResend": {
              "value": function () { return this.codecs_need_resend.apply(this, arguments); }
            },
            "emitError": {
              "value": function () { return this.emit_error.apply(this, arguments); }
            },
            "getStreamTransmitterType": {
              "value": function () { return this.get_stream_transmitter_type.apply(this, arguments); }
            },
            "listTransmitters": {
              "value": function () { return this.list_transmitters.apply(this, arguments); }
            },
            "newStream": {
              "value": function () { return this.new_stream.apply(this, arguments); }
            },
            "parseCodecsChanged": {
              "value": function () { return this.parse_codecs_changed.apply(this, arguments); }
            },
            "parseSendCodecChanged": {
              "value": function () { return this.parse_send_codec_changed.apply(this, arguments); }
            },
            "parseTelephonyEventStarted": {
              "value": function () { return this.parse_telephony_event_started.apply(this, arguments); }
            },
            "parseTelephonyEventStopped": {
              "value": function () { return this.parse_telephony_event_stopped.apply(this, arguments); }
            },
            "setAllowedCaps": {
              "value": function () { return this.set_allowed_caps.apply(this, arguments); }
            },
            "setCodecPreferences": {
              "value": function () { return this.set_codec_preferences.apply(this, arguments); }
            },
            "setEncryptionParameters": {
              "value": function () { return this.set_encryption_parameters.apply(this, arguments); }
            },
            "setSendCodec": {
              "value": function () { return this.set_send_codec.apply(this, arguments); }
            },
            "startTelephonyEvent": {
              "value": function () { return this.start_telephony_event.apply(this, arguments); }
            },
            "stopTelephonyEvent": {
              "value": function () { return this.stop_telephony_event.apply(this, arguments); }
            },
            "allowedSinkCaps": {
              "get": function () { return this.allowed_sink_caps; },
              "set": function (value) { this.allowed_sink_caps = value; }
            },
            "allowedSrcCaps": {
              "get": function () { return this.allowed_src_caps; },
              "set": function (value) { this.allowed_src_caps = value; }
            },
            "codecPreferences": {
              "get": function () { return this.codec_preferences; },
              "set": function (value) { this.codec_preferences = value; }
            },
            "codecsWithoutConfig": {
              "get": function () { return this.codecs_without_config; },
              "set": function (value) { this.codecs_without_config = value; }
            },
            "currentSendCodec": {
              "get": function () { return this.current_send_codec; },
              "set": function (value) { this.current_send_codec = value; }
            },
            "encryptionParameters": {
              "get": function () { return this.encryption_parameters; },
              "set": function (value) { this.encryption_parameters = value; }
            },
            "mediaType": {
              "get": function () { return this.media_type; },
              "set": function (value) { this.media_type = value; }
            },
            "sinkPad": {
              "get": function () { return this.sink_pad; },
              "set": function (value) { this.sink_pad = value; }
            }
          },
          "static": {}
        },
        "Stream": {
          "prototype": {
            "addId": {
              "value": function () { return this.add_id.apply(this, arguments); }
            },
            "addRemoteCandidates": {
              "value": function () { return this.add_remote_candidates.apply(this, arguments); }
            },
            "emitError": {
              "value": function () { return this.emit_error.apply(this, arguments); }
            },
            "emitSrcPadAdded": {
              "value": function () { return this.emit_src_pad_added.apply(this, arguments); }
            },
            "forceRemoteCandidates": {
              "value": function () { return this.force_remote_candidates.apply(this, arguments); }
            },
            "iterateSrcPads": {
              "value": function () { return this.iterate_src_pads.apply(this, arguments); }
            },
            "parseComponentStateChanged": {
              "value": function () { return this.parse_component_state_changed.apply(this, arguments); }
            },
            "parseLocalCandidatesPrepared": {
              "value": function () { return this.parse_local_candidates_prepared.apply(this, arguments); }
            },
            "parseNewActiveCandidatePair": {
              "value": function () { return this.parse_new_active_candidate_pair.apply(this, arguments); }
            },
            "parseNewLocalCandidate": {
              "value": function () { return this.parse_new_local_candidate.apply(this, arguments); }
            },
            "parseRecvCodecsChanged": {
              "value": function () { return this.parse_recv_codecs_changed.apply(this, arguments); }
            },
            "setDecryptionParameters": {
              "value": function () { return this.set_decryption_parameters.apply(this, arguments); }
            },
            "setRemoteCodecs": {
              "value": function () { return this.set_remote_codecs.apply(this, arguments); }
            },
            "setTransmitter": {
              "value": function () { return this.set_transmitter.apply(this, arguments); }
            },
            "setTransmitterHt": {
              "value": function () { return this.set_transmitter_ht.apply(this, arguments); }
            },
            "currentRecvCodecs": {
              "get": function () { return this.current_recv_codecs; },
              "set": function (value) { this.current_recv_codecs = value; }
            },
            "decryptionParameters": {
              "get": function () { return this.decryption_parameters; },
              "set": function (value) { this.decryption_parameters = value; }
            },
            "negotiatedCodecs": {
              "get": function () { return this.negotiated_codecs; },
              "set": function (value) { this.negotiated_codecs = value; }
            },
            "remoteCodecs": {
              "get": function () { return this.remote_codecs; },
              "set": function (value) { this.remote_codecs = value; }
            }
          },
          "static": {}
        },
        "StreamTransmitter": {
          "prototype": {
            "addRemoteCandidates": {
              "value": function () { return this.add_remote_candidates.apply(this, arguments); }
            },
            "emitError": {
              "value": function () { return this.emit_error.apply(this, arguments); }
            },
            "forceRemoteCandidates": {
              "value": function () { return this.force_remote_candidates.apply(this, arguments); }
            },
            "gatherLocalCandidates": {
              "value": function () { return this.gather_local_candidates.apply(this, arguments); }
            },
            "associateOnSource": {
              "get": function () { return this.associate_on_source; },
              "set": function (value) { this.associate_on_source = value; }
            },
            "preferredLocalCandidates": {
              "get": function () { return this.preferred_local_candidates; },
              "set": function (value) { this.preferred_local_candidates = value; }
            }
          },
          "static": {}
        },
        "Transmitter": {
          "prototype": {
            "emitError": {
              "value": function () { return this.emit_error.apply(this, arguments); }
            },
            "getStreamTransmitterType": {
              "value": function () { return this.get_stream_transmitter_type.apply(this, arguments); }
            },
            "newStreamTransmitter": {
              "value": function () { return this.new_stream_transmitter.apply(this, arguments); }
            },
            "doTimestamp": {
              "get": function () { return this.do_timestamp; },
              "set": function (value) { this.do_timestamp = value; }
            },
            "gstSink": {
              "get": function () { return this.gst_sink; },
              "set": function (value) { this.gst_sink = value; }
            },
            "gstSrc": {
              "get": function () { return this.gst_src; },
              "set": function (value) { this.gst_src = value; }
            }
          },
          "static": {
            "listAvailable": {
              "value": function () { return this.list_available.apply(this, arguments); }
            }
          }
        }
      },
      "static": {
        "candidateListCopy": {
          "value": function () { return this.candidate_list_copy.apply(this, arguments); }
        },
        "candidateListDestroy": {
          "value": function () { return this.candidate_list_destroy.apply(this, arguments); }
        },
        "codecListAreEqual": {
          "value": function () { return this.codec_list_are_equal.apply(this, arguments); }
        },
        "codecListCopy": {
          "value": function () { return this.codec_list_copy.apply(this, arguments); }
        },
        "codecListDestroy": {
          "value": function () { return this.codec_list_destroy.apply(this, arguments); }
        },
        "codecListFromKeyfile": {
          "value": function () { return this.codec_list_from_keyfile.apply(this, arguments); }
        },
        "errorQuark": {
          "value": function () { return this.error_quark.apply(this, arguments); }
        },
        "mediaTypeToString": {
          "value": function () { return this.media_type_to_string.apply(this, arguments); }
        },
        "parseError": {
          "value": function () { return this.parse_error.apply(this, arguments); }
        },
        "rtpHeaderExtensionListCopy": {
          "value": function () { return this.rtp_header_extension_list_copy.apply(this, arguments); }
        },
        "rtpHeaderExtensionListDestroy": {
          "value": function () { return this.rtp_header_extension_list_destroy.apply(this, arguments); }
        },
        "rtpHeaderExtensionListFromKeyfile": {
          "value": function () { return this.rtp_header_extension_list_from_keyfile.apply(this, arguments); }
        },
        "utilsGetDefaultCodecPreferences": {
          "value": function () { return this.utils_get_default_codec_preferences.apply(this, arguments); }
        },
        "utilsGetDefaultElementProperties": {
          "value": function () { return this.utils_get_default_element_properties.apply(this, arguments); }
        },
        "utilsGetDefaultRtpHeaderExtensionPreferences": {
          "value": function () { return this.utils_get_default_rtp_header_extension_preferences.apply(this, arguments); }
        },
        "utilsSetBitrate": {
          "value": function () { return this.utils_set_bitrate.apply(this, arguments); }
        },
        "valueSetCandidateList": {
          "value": function () { return this.value_set_candidate_list.apply(this, arguments); }
        }
      }
    },
    "Folks": {
      "class": {
        "AbstractFieldDetails": {
          "prototype": {
            "getParameterValues": {
              "value": function () { return this.get_parameter_values.apply(this, arguments); }
            },
            "addParameter": {
              "value": function () { return this.add_parameter.apply(this, arguments); }
            },
            "setParameter": {
              "value": function () { return this.set_parameter.apply(this, arguments); }
            },
            "extendParameters": {
              "value": function () { return this.extend_parameters.apply(this, arguments); }
            },
            "removeParameterAll": {
              "value": function () { return this.remove_parameter_all.apply(this, arguments); }
            },
            "parametersEqual": {
              "value": function () { return this.parameters_equal.apply(this, arguments); }
            },
            "valuesEqual": {
              "value": function () { return this.values_equal.apply(this, arguments); }
            },
            "getValue": {
              "value": function () { return this.get_value.apply(this, arguments); }
            },
            "setValue": {
              "value": function () { return this.set_value.apply(this, arguments); }
            },
            "getValueType": {
              "value": function () { return this.get_value_type.apply(this, arguments); }
            },
            "getId": {
              "value": function () { return this.get_id.apply(this, arguments); }
            },
            "setId": {
              "value": function () { return this.set_id.apply(this, arguments); }
            },
            "getParameters": {
              "value": function () { return this.get_parameters.apply(this, arguments); }
            },
            "setParameters": {
              "value": function () { return this.set_parameters.apply(this, arguments); }
            },
            "valueType": {
              "get": function () { return this.value_type; },
              "set": function (value) { this.value_type = value; }
            }
          },
          "static": {
            "equalStatic": {
              "value": function () { return this.equal_static.apply(this, arguments); }
            },
            "hashStatic": {
              "value": function () { return this.hash_static.apply(this, arguments); }
            }
          }
        },
        "AvatarCache": {
          "prototype": {
            "loadAvatar": {
              "value": function () { return this.load_avatar.apply(this, arguments); }
            },
            "loadAvatarFinish": {
              "value": function () { return this.load_avatar_finish.apply(this, arguments); }
            },
            "storeAvatar": {
              "value": function () { return this.store_avatar.apply(this, arguments); }
            },
            "storeAvatarFinish": {
              "value": function () { return this.store_avatar_finish.apply(this, arguments); }
            },
            "removeAvatar": {
              "value": function () { return this.remove_avatar.apply(this, arguments); }
            },
            "removeAvatarFinish": {
              "value": function () { return this.remove_avatar_finish.apply(this, arguments); }
            },
            "buildUriForAvatar": {
              "value": function () { return this.build_uri_for_avatar.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Backend": {
          "prototype": {
            "disablePersonaStore": {
              "value": function () { return this.disable_persona_store.apply(this, arguments); }
            },
            "enablePersonaStore": {
              "value": function () { return this.enable_persona_store.apply(this, arguments); }
            },
            "setPersonaStores": {
              "value": function () { return this.set_persona_stores.apply(this, arguments); }
            },
            "prepareFinish": {
              "value": function () { return this.prepare_finish.apply(this, arguments); }
            },
            "unprepareFinish": {
              "value": function () { return this.unprepare_finish.apply(this, arguments); }
            },
            "getIsPrepared": {
              "value": function () { return this.get_is_prepared.apply(this, arguments); }
            },
            "getIsQuiescent": {
              "value": function () { return this.get_is_quiescent.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getPersonaStores": {
              "value": function () { return this.get_persona_stores.apply(this, arguments); }
            },
            "isPrepared": {
              "get": function () { return this.is_prepared; },
              "set": function (value) { this.is_prepared = value; }
            },
            "isQuiescent": {
              "get": function () { return this.is_quiescent; },
              "set": function (value) { this.is_quiescent = value; }
            },
            "personaStores": {
              "get": function () { return this.persona_stores; },
              "set": function (value) { this.persona_stores = value; }
            }
          },
          "static": {}
        },
        "BackendStore": {
          "prototype": {
            "prepareFinish": {
              "value": function () { return this.prepare_finish.apply(this, arguments); }
            },
            "loadBackends": {
              "value": function () { return this.load_backends.apply(this, arguments); }
            },
            "loadBackendsFinish": {
              "value": function () { return this.load_backends_finish.apply(this, arguments); }
            },
            "addBackend": {
              "value": function () { return this.add_backend.apply(this, arguments); }
            },
            "dupBackendByName": {
              "value": function () { return this.dup_backend_by_name.apply(this, arguments); }
            },
            "listBackends": {
              "value": function () { return this.list_backends.apply(this, arguments); }
            },
            "enableBackend": {
              "value": function () { return this.enable_backend.apply(this, arguments); }
            },
            "enableBackendFinish": {
              "value": function () { return this.enable_backend_finish.apply(this, arguments); }
            },
            "disableBackend": {
              "value": function () { return this.disable_backend.apply(this, arguments); }
            },
            "disableBackendFinish": {
              "value": function () { return this.disable_backend_finish.apply(this, arguments); }
            },
            "getEnabledBackends": {
              "value": function () { return this.get_enabled_backends.apply(this, arguments); }
            },
            "getIsPrepared": {
              "value": function () { return this.get_is_prepared.apply(this, arguments); }
            },
            "enabledBackends": {
              "get": function () { return this.enabled_backends; },
              "set": function (value) { this.enabled_backends = value; }
            },
            "isPrepared": {
              "get": function () { return this.is_prepared; },
              "set": function (value) { this.is_prepared = value; }
            }
          },
          "static": {}
        },
        "Debug": {
          "prototype": {
            "emitPrintStatus": {
              "value": function () { return this.emit_print_status.apply(this, arguments); }
            },
            "getColourEnabled": {
              "value": function () { return this.get_colour_enabled.apply(this, arguments); }
            },
            "setColourEnabled": {
              "value": function () { return this.set_colour_enabled.apply(this, arguments); }
            },
            "getDebugOutputEnabled": {
              "value": function () { return this.get_debug_output_enabled.apply(this, arguments); }
            },
            "setDebugOutputEnabled": {
              "value": function () { return this.set_debug_output_enabled.apply(this, arguments); }
            },
            "colourEnabled": {
              "get": function () { return this.colour_enabled; },
              "set": function (value) { this.colour_enabled = value; }
            },
            "debugOutputEnabled": {
              "get": function () { return this.debug_output_enabled; },
              "set": function (value) { this.debug_output_enabled = value; }
            }
          },
          "static": {
            "dupWithFlags": {
              "value": function () { return this.dup_with_flags.apply(this, arguments); }
            }
          }
        },
        "EmailFieldDetails": {
          "prototype": {},
          "static": {}
        },
        "ExtendedFieldDetails": {
          "prototype": {},
          "static": {}
        },
        "ImFieldDetails": {
          "prototype": {},
          "static": {}
        },
        "Individual": {
          "prototype": {
            "hasAntiLinkWithPersona": {
              "value": function () { return this.has_anti_link_with_persona.apply(this, arguments); }
            },
            "hasAntiLinkWithIndividual": {
              "value": function () { return this.has_anti_link_with_individual.apply(this, arguments); }
            },
            "getTrustLevel": {
              "value": function () { return this.get_trust_level.apply(this, arguments); }
            },
            "getIsUser": {
              "value": function () { return this.get_is_user.apply(this, arguments); }
            },
            "getId": {
              "value": function () { return this.get_id.apply(this, arguments); }
            },
            "getDisplayName": {
              "value": function () { return this.get_display_name.apply(this, arguments); }
            },
            "getPersonas": {
              "value": function () { return this.get_personas.apply(this, arguments); }
            },
            "setPersonas": {
              "value": function () { return this.set_personas.apply(this, arguments); }
            },
            "trustLevel": {
              "get": function () { return this.trust_level; },
              "set": function (value) { this.trust_level = value; }
            },
            "isUser": {
              "get": function () { return this.is_user; },
              "set": function (value) { this.is_user = value; }
            },
            "displayName": {
              "get": function () { return this.display_name; },
              "set": function (value) { this.display_name = value; }
            }
          },
          "static": {}
        },
        "IndividualAggregator": {
          "prototype": {
            "prepareFinish": {
              "value": function () { return this.prepare_finish.apply(this, arguments); }
            },
            "unprepareFinish": {
              "value": function () { return this.unprepare_finish.apply(this, arguments); }
            },
            "getPotentialMatches": {
              "value": function () { return this.get_potential_matches.apply(this, arguments); }
            },
            "getAllPotentialMatches": {
              "value": function () { return this.get_all_potential_matches.apply(this, arguments); }
            },
            "addPersonaFromDetails": {
              "value": function () { return this.add_persona_from_details.apply(this, arguments); }
            },
            "addPersonaFromDetailsFinish": {
              "value": function () { return this.add_persona_from_details_finish.apply(this, arguments); }
            },
            "removeIndividual": {
              "value": function () { return this.remove_individual.apply(this, arguments); }
            },
            "removeIndividualFinish": {
              "value": function () { return this.remove_individual_finish.apply(this, arguments); }
            },
            "removePersona": {
              "value": function () { return this.remove_persona.apply(this, arguments); }
            },
            "removePersonaFinish": {
              "value": function () { return this.remove_persona_finish.apply(this, arguments); }
            },
            "linkPersonas": {
              "value": function () { return this.link_personas.apply(this, arguments); }
            },
            "linkPersonasFinish": {
              "value": function () { return this.link_personas_finish.apply(this, arguments); }
            },
            "unlinkIndividual": {
              "value": function () { return this.unlink_individual.apply(this, arguments); }
            },
            "unlinkIndividualFinish": {
              "value": function () { return this.unlink_individual_finish.apply(this, arguments); }
            },
            "ensureIndividualPropertyWriteable": {
              "value": function () { return this.ensure_individual_property_writeable.apply(this, arguments); }
            },
            "ensureIndividualPropertyWriteableFinish": {
              "value": function () { return this.ensure_individual_property_writeable_finish.apply(this, arguments); }
            },
            "lookUpIndividual": {
              "value": function () { return this.look_up_individual.apply(this, arguments); }
            },
            "lookUpIndividualFinish": {
              "value": function () { return this.look_up_individual_finish.apply(this, arguments); }
            },
            "getIsPrepared": {
              "value": function () { return this.get_is_prepared.apply(this, arguments); }
            },
            "getIsQuiescent": {
              "value": function () { return this.get_is_quiescent.apply(this, arguments); }
            },
            "getPrimaryStore": {
              "value": function () { return this.get_primary_store.apply(this, arguments); }
            },
            "getBackendStore": {
              "value": function () { return this.get_backend_store.apply(this, arguments); }
            },
            "getIndividuals": {
              "value": function () { return this.get_individuals.apply(this, arguments); }
            },
            "getUser": {
              "value": function () { return this.get_user.apply(this, arguments); }
            },
            "isPrepared": {
              "get": function () { return this.is_prepared; },
              "set": function (value) { this.is_prepared = value; }
            },
            "isQuiescent": {
              "get": function () { return this.is_quiescent; },
              "set": function (value) { this.is_quiescent = value; }
            },
            "primaryStore": {
              "get": function () { return this.primary_store; },
              "set": function (value) { this.primary_store = value; }
            },
            "backendStore": {
              "get": function () { return this.backend_store; },
              "set": function (value) { this.backend_store = value; }
            }
          },
          "static": {
            "dupWithBackendStore": {
              "value": function () { return this.dup_with_backend_store.apply(this, arguments); }
            }
          }
        },
        "Location": {
          "prototype": {
            "equalCoordinates": {
              "value": function () { return this.equal_coordinates.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "NoteFieldDetails": {
          "prototype": {
            "getUid": {
              "value": function () { return this.get_uid.apply(this, arguments); }
            },
            "setUid": {
              "value": function () { return this.set_uid.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "ObjectCache": {
          "prototype": {
            "getSerialisedObjectType": {
              "value": function () { return this.get_serialised_object_type.apply(this, arguments); }
            },
            "getSerialisedObjectVersion": {
              "value": function () { return this.get_serialised_object_version.apply(this, arguments); }
            },
            "serialiseObject": {
              "value": function () { return this.serialise_object.apply(this, arguments); }
            },
            "deserialiseObject": {
              "value": function () { return this.deserialise_object.apply(this, arguments); }
            },
            "loadObjects": {
              "value": function () { return this.load_objects.apply(this, arguments); }
            },
            "loadObjectsFinish": {
              "value": function () { return this.load_objects_finish.apply(this, arguments); }
            },
            "storeObjects": {
              "value": function () { return this.store_objects.apply(this, arguments); }
            },
            "storeObjectsFinish": {
              "value": function () { return this.store_objects_finish.apply(this, arguments); }
            },
            "clearCache": {
              "value": function () { return this.clear_cache.apply(this, arguments); }
            },
            "clearCacheFinish": {
              "value": function () { return this.clear_cache_finish.apply(this, arguments); }
            },
            "getTypeId": {
              "value": function () { return this.get_type_id.apply(this, arguments); }
            },
            "getId": {
              "value": function () { return this.get_id.apply(this, arguments); }
            },
            "typeId": {
              "get": function () { return this.type_id; },
              "set": function (value) { this.type_id = value; }
            }
          },
          "static": {}
        },
        "Persona": {
          "prototype": {
            "linkablePropertyToLinks": {
              "value": function () { return this.linkable_property_to_links.apply(this, arguments); }
            },
            "getIid": {
              "value": function () { return this.get_iid.apply(this, arguments); }
            },
            "getUid": {
              "value": function () { return this.get_uid.apply(this, arguments); }
            },
            "getDisplayId": {
              "value": function () { return this.get_display_id.apply(this, arguments); }
            },
            "getIsUser": {
              "value": function () { return this.get_is_user.apply(this, arguments); }
            },
            "getStore": {
              "value": function () { return this.get_store.apply(this, arguments); }
            },
            "getIndividual": {
              "value": function () { return this.get_individual.apply(this, arguments); }
            },
            "getLinkableProperties": {
              "value": function () { return this.get_linkable_properties.apply(this, arguments); }
            },
            "getWriteableProperties": {
              "value": function () { return this.get_writeable_properties.apply(this, arguments); }
            },
            "displayId": {
              "get": function () { return this.display_id; },
              "set": function (value) { this.display_id = value; }
            },
            "isUser": {
              "get": function () { return this.is_user; },
              "set": function (value) { this.is_user = value; }
            },
            "linkableProperties": {
              "get": function () { return this.linkable_properties; },
              "set": function (value) { this.linkable_properties = value; }
            },
            "writeableProperties": {
              "get": function () { return this.writeable_properties; },
              "set": function (value) { this.writeable_properties = value; }
            }
          },
          "static": {
            "buildUid": {
              "value": function () { return this.build_uid.apply(this, arguments); }
            },
            "splitUid": {
              "value": function () { return this.split_uid.apply(this, arguments); }
            }
          }
        },
        "PersonaStore": {
          "prototype": {
            "EmitPersonasChanged": {
              "value": function () { return this._emit_personas_changed.apply(this, arguments); }
            },
            "prepareFinish": {
              "value": function () { return this.prepare_finish.apply(this, arguments); }
            },
            "flushFinish": {
              "value": function () { return this.flush_finish.apply(this, arguments); }
            },
            "addPersonaFromDetails": {
              "value": function () { return this.add_persona_from_details.apply(this, arguments); }
            },
            "addPersonaFromDetailsFinish": {
              "value": function () { return this.add_persona_from_details_finish.apply(this, arguments); }
            },
            "removePersona": {
              "value": function () { return this.remove_persona.apply(this, arguments); }
            },
            "removePersonaFinish": {
              "value": function () { return this.remove_persona_finish.apply(this, arguments); }
            },
            "getTypeId": {
              "value": function () { return this.get_type_id.apply(this, arguments); }
            },
            "getDisplayName": {
              "value": function () { return this.get_display_name.apply(this, arguments); }
            },
            "getId": {
              "value": function () { return this.get_id.apply(this, arguments); }
            },
            "getPersonas": {
              "value": function () { return this.get_personas.apply(this, arguments); }
            },
            "getCanAddPersonas": {
              "value": function () { return this.get_can_add_personas.apply(this, arguments); }
            },
            "getCanAliasPersonas": {
              "value": function () { return this.get_can_alias_personas.apply(this, arguments); }
            },
            "getCanGroupPersonas": {
              "value": function () { return this.get_can_group_personas.apply(this, arguments); }
            },
            "getCanRemovePersonas": {
              "value": function () { return this.get_can_remove_personas.apply(this, arguments); }
            },
            "getIsPrepared": {
              "value": function () { return this.get_is_prepared.apply(this, arguments); }
            },
            "getIsQuiescent": {
              "value": function () { return this.get_is_quiescent.apply(this, arguments); }
            },
            "getIsWriteable": {
              "value": function () { return this.get_is_writeable.apply(this, arguments); }
            },
            "setIsWriteable": {
              "value": function () { return this.set_is_writeable.apply(this, arguments); }
            },
            "getTrustLevel": {
              "value": function () { return this.get_trust_level.apply(this, arguments); }
            },
            "setTrustLevel": {
              "value": function () { return this.set_trust_level.apply(this, arguments); }
            },
            "getAlwaysWriteableProperties": {
              "value": function () { return this.get_always_writeable_properties.apply(this, arguments); }
            },
            "getIsPrimaryStore": {
              "value": function () { return this.get_is_primary_store.apply(this, arguments); }
            },
            "getIsUserSetDefault": {
              "value": function () { return this.get_is_user_set_default.apply(this, arguments); }
            },
            "typeId": {
              "get": function () { return this.type_id; },
              "set": function (value) { this.type_id = value; }
            },
            "displayName": {
              "get": function () { return this.display_name; },
              "set": function (value) { this.display_name = value; }
            },
            "canAddPersonas": {
              "get": function () { return this.can_add_personas; },
              "set": function (value) { this.can_add_personas = value; }
            },
            "canAliasPersonas": {
              "get": function () { return this.can_alias_personas; },
              "set": function (value) { this.can_alias_personas = value; }
            },
            "canGroupPersonas": {
              "get": function () { return this.can_group_personas; },
              "set": function (value) { this.can_group_personas = value; }
            },
            "canRemovePersonas": {
              "get": function () { return this.can_remove_personas; },
              "set": function (value) { this.can_remove_personas = value; }
            },
            "isPrepared": {
              "get": function () { return this.is_prepared; },
              "set": function (value) { this.is_prepared = value; }
            },
            "isQuiescent": {
              "get": function () { return this.is_quiescent; },
              "set": function (value) { this.is_quiescent = value; }
            },
            "isWriteable": {
              "get": function () { return this.is_writeable; },
              "set": function (value) { this.is_writeable = value; }
            },
            "trustLevel": {
              "get": function () { return this.trust_level; },
              "set": function (value) { this.trust_level = value; }
            },
            "alwaysWriteableProperties": {
              "get": function () { return this.always_writeable_properties; },
              "set": function (value) { this.always_writeable_properties = value; }
            },
            "isPrimaryStore": {
              "get": function () { return this.is_primary_store; },
              "set": function (value) { this.is_primary_store = value; }
            },
            "isUserSetDefault": {
              "get": function () { return this.is_user_set_default; },
              "set": function (value) { this.is_user_set_default = value; }
            }
          },
          "static": {
            "detailKey": {
              "value": function () { return this.detail_key.apply(this, arguments); }
            }
          }
        },
        "PhoneFieldDetails": {
          "prototype": {
            "getNormalised": {
              "value": function () { return this.get_normalised.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "PostalAddress": {
          "prototype": {
            "isEmpty": {
              "value": function () { return this.is_empty.apply(this, arguments); }
            },
            "toString": {
              "value": function () { return this.to_string.apply(this, arguments); }
            },
            "getPoBox": {
              "value": function () { return this.get_po_box.apply(this, arguments); }
            },
            "setPoBox": {
              "value": function () { return this.set_po_box.apply(this, arguments); }
            },
            "getExtension": {
              "value": function () { return this.get_extension.apply(this, arguments); }
            },
            "setExtension": {
              "value": function () { return this.set_extension.apply(this, arguments); }
            },
            "getStreet": {
              "value": function () { return this.get_street.apply(this, arguments); }
            },
            "setStreet": {
              "value": function () { return this.set_street.apply(this, arguments); }
            },
            "getLocality": {
              "value": function () { return this.get_locality.apply(this, arguments); }
            },
            "setLocality": {
              "value": function () { return this.set_locality.apply(this, arguments); }
            },
            "getRegion": {
              "value": function () { return this.get_region.apply(this, arguments); }
            },
            "setRegion": {
              "value": function () { return this.set_region.apply(this, arguments); }
            },
            "getPostalCode": {
              "value": function () { return this.get_postal_code.apply(this, arguments); }
            },
            "setPostalCode": {
              "value": function () { return this.set_postal_code.apply(this, arguments); }
            },
            "getCountry": {
              "value": function () { return this.get_country.apply(this, arguments); }
            },
            "setCountry": {
              "value": function () { return this.set_country.apply(this, arguments); }
            },
            "getAddressFormat": {
              "value": function () { return this.get_address_format.apply(this, arguments); }
            },
            "setAddressFormat": {
              "value": function () { return this.set_address_format.apply(this, arguments); }
            },
            "getUid": {
              "value": function () { return this.get_uid.apply(this, arguments); }
            },
            "setUid": {
              "value": function () { return this.set_uid.apply(this, arguments); }
            },
            "poBox": {
              "get": function () { return this.po_box; },
              "set": function (value) { this.po_box = value; }
            },
            "postalCode": {
              "get": function () { return this.postal_code; },
              "set": function (value) { this.postal_code = value; }
            },
            "addressFormat": {
              "get": function () { return this.address_format; },
              "set": function (value) { this.address_format = value; }
            }
          },
          "static": {}
        },
        "PostalAddressFieldDetails": {
          "prototype": {},
          "static": {}
        },
        "PotentialMatch": {
          "prototype": {
            "potentialMatch": {
              "value": function () { return this.potential_match.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Query": {
          "prototype": {
            "isMatch": {
              "value": function () { return this.is_match.apply(this, arguments); }
            },
            "getMatchFields": {
              "value": function () { return this.get_match_fields.apply(this, arguments); }
            },
            "matchFields": {
              "get": function () { return this.match_fields; },
              "set": function (value) { this.match_fields = value; }
            }
          },
          "static": {}
        },
        "Role": {
          "prototype": {
            "isEmpty": {
              "value": function () { return this.is_empty.apply(this, arguments); }
            },
            "toString": {
              "value": function () { return this.to_string.apply(this, arguments); }
            },
            "getOrganisationName": {
              "value": function () { return this.get_organisation_name.apply(this, arguments); }
            },
            "setOrganisationName": {
              "value": function () { return this.set_organisation_name.apply(this, arguments); }
            },
            "getTitle": {
              "value": function () { return this.get_title.apply(this, arguments); }
            },
            "setTitle": {
              "value": function () { return this.set_title.apply(this, arguments); }
            },
            "getRole": {
              "value": function () { return this.get_role.apply(this, arguments); }
            },
            "setRole": {
              "value": function () { return this.set_role.apply(this, arguments); }
            },
            "getUid": {
              "value": function () { return this.get_uid.apply(this, arguments); }
            },
            "setUid": {
              "value": function () { return this.set_uid.apply(this, arguments); }
            },
            "organisationName": {
              "get": function () { return this.organisation_name; },
              "set": function (value) { this.organisation_name = value; }
            }
          },
          "static": {}
        },
        "RoleFieldDetails": {
          "prototype": {},
          "static": {}
        },
        "SearchView": {
          "prototype": {
            "prepareFinish": {
              "value": function () { return this.prepare_finish.apply(this, arguments); }
            },
            "unprepareFinish": {
              "value": function () { return this.unprepare_finish.apply(this, arguments); }
            },
            "refreshFinish": {
              "value": function () { return this.refresh_finish.apply(this, arguments); }
            },
            "getAggregator": {
              "value": function () { return this.get_aggregator.apply(this, arguments); }
            },
            "getQuery": {
              "value": function () { return this.get_query.apply(this, arguments); }
            },
            "setQuery": {
              "value": function () { return this.set_query.apply(this, arguments); }
            },
            "getIndividuals": {
              "value": function () { return this.get_individuals.apply(this, arguments); }
            },
            "getIsPrepared": {
              "value": function () { return this.get_is_prepared.apply(this, arguments); }
            },
            "getIsQuiescent": {
              "value": function () { return this.get_is_quiescent.apply(this, arguments); }
            },
            "isPrepared": {
              "get": function () { return this.is_prepared; },
              "set": function (value) { this.is_prepared = value; }
            },
            "isQuiescent": {
              "get": function () { return this.is_quiescent; },
              "set": function (value) { this.is_quiescent = value; }
            }
          },
          "static": {}
        },
        "SimpleQuery": {
          "prototype": {
            "getQueryString": {
              "value": function () { return this.get_query_string.apply(this, arguments); }
            },
            "setQueryString": {
              "value": function () { return this.set_query_string.apply(this, arguments); }
            },
            "getQueryLocale": {
              "value": function () { return this.get_query_locale.apply(this, arguments); }
            },
            "setQueryLocale": {
              "value": function () { return this.set_query_locale.apply(this, arguments); }
            },
            "queryString": {
              "get": function () { return this.query_string; },
              "set": function (value) { this.query_string = value; }
            },
            "queryLocale": {
              "get": function () { return this.query_locale; },
              "set": function (value) { this.query_locale = value; }
            }
          },
          "static": {}
        },
        "StructuredName": {
          "prototype": {
            "isEmpty": {
              "value": function () { return this.is_empty.apply(this, arguments); }
            },
            "toString": {
              "value": function () { return this.to_string.apply(this, arguments); }
            },
            "toStringWithFormat": {
              "value": function () { return this.to_string_with_format.apply(this, arguments); }
            },
            "getFamilyName": {
              "value": function () { return this.get_family_name.apply(this, arguments); }
            },
            "setFamilyName": {
              "value": function () { return this.set_family_name.apply(this, arguments); }
            },
            "getGivenName": {
              "value": function () { return this.get_given_name.apply(this, arguments); }
            },
            "setGivenName": {
              "value": function () { return this.set_given_name.apply(this, arguments); }
            },
            "getAdditionalNames": {
              "value": function () { return this.get_additional_names.apply(this, arguments); }
            },
            "setAdditionalNames": {
              "value": function () { return this.set_additional_names.apply(this, arguments); }
            },
            "getPrefixes": {
              "value": function () { return this.get_prefixes.apply(this, arguments); }
            },
            "setPrefixes": {
              "value": function () { return this.set_prefixes.apply(this, arguments); }
            },
            "getSuffixes": {
              "value": function () { return this.get_suffixes.apply(this, arguments); }
            },
            "setSuffixes": {
              "value": function () { return this.set_suffixes.apply(this, arguments); }
            },
            "familyName": {
              "get": function () { return this.family_name; },
              "set": function (value) { this.family_name = value; }
            },
            "givenName": {
              "get": function () { return this.given_name; },
              "set": function (value) { this.given_name = value; }
            },
            "additionalNames": {
              "get": function () { return this.additional_names; },
              "set": function (value) { this.additional_names = value; }
            }
          },
          "static": {}
        },
        "UrlFieldDetails": {
          "prototype": {},
          "static": {}
        },
        "Utils": {
          "prototype": {},
          "static": {
            "multiMapStrAfdEqual": {
              "value": function () { return this.multi_map_str_afd_equal.apply(this, arguments); }
            },
            "multiMapStrStrEqual": {
              "value": function () { return this.multi_map_str_str_equal.apply(this, arguments); }
            },
            "setAfdEqual": {
              "value": function () { return this.set_afd_equal.apply(this, arguments); }
            },
            "setStringAfdEqual": {
              "value": function () { return this.set_string_afd_equal.apply(this, arguments); }
            }
          }
        },
        "WebServiceFieldDetails": {
          "prototype": {},
          "static": {}
        }
      },
      "static": {}
    },
    "FolksDummy": {
      "class": {
        "Backend": {
          "prototype": {
            "registerPersonaStores": {
              "value": function () { return this.register_persona_stores.apply(this, arguments); }
            },
            "unregisterPersonaStores": {
              "value": function () { return this.unregister_persona_stores.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "FullPersona": {
          "prototype": {
            "updateGender": {
              "value": function () { return this.update_gender.apply(this, arguments); }
            },
            "updateCalendarEventId": {
              "value": function () { return this.update_calendar_event_id.apply(this, arguments); }
            },
            "updateBirthday": {
              "value": function () { return this.update_birthday.apply(this, arguments); }
            },
            "updateRoles": {
              "value": function () { return this.update_roles.apply(this, arguments); }
            },
            "updateGroups": {
              "value": function () { return this.update_groups.apply(this, arguments); }
            },
            "updateWebServiceAddresses": {
              "value": function () { return this.update_web_service_addresses.apply(this, arguments); }
            },
            "updateEmailAddresses": {
              "value": function () { return this.update_email_addresses.apply(this, arguments); }
            },
            "updateNotes": {
              "value": function () { return this.update_notes.apply(this, arguments); }
            },
            "updateFullName": {
              "value": function () { return this.update_full_name.apply(this, arguments); }
            },
            "updateNickname": {
              "value": function () { return this.update_nickname.apply(this, arguments); }
            },
            "updateStructuredName": {
              "value": function () { return this.update_structured_name.apply(this, arguments); }
            },
            "updateAvatar": {
              "value": function () { return this.update_avatar.apply(this, arguments); }
            },
            "updateUrls": {
              "value": function () { return this.update_urls.apply(this, arguments); }
            },
            "updateImAddresses": {
              "value": function () { return this.update_im_addresses.apply(this, arguments); }
            },
            "updatePhoneNumbers": {
              "value": function () { return this.update_phone_numbers.apply(this, arguments); }
            },
            "updatePostalAddresses": {
              "value": function () { return this.update_postal_addresses.apply(this, arguments); }
            },
            "updateLocalIds": {
              "value": function () { return this.update_local_ids.apply(this, arguments); }
            },
            "updateIsFavourite": {
              "value": function () { return this.update_is_favourite.apply(this, arguments); }
            },
            "updateAntiLinks": {
              "value": function () { return this.update_anti_links.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Persona": {
          "prototype": {
            "updateWriteableProperties": {
              "value": function () { return this.update_writeable_properties.apply(this, arguments); }
            },
            "updateLinkableProperties": {
              "value": function () { return this.update_linkable_properties.apply(this, arguments); }
            },
            "changeProperty": {
              "value": function () { return this.change_property.apply(this, arguments); }
            },
            "changePropertyFinish": {
              "value": function () { return this.change_property_finish.apply(this, arguments); }
            },
            "getPropertyChangeDelay": {
              "value": function () { return this.get_property_change_delay.apply(this, arguments); }
            },
            "setPropertyChangeDelay": {
              "value": function () { return this.set_property_change_delay.apply(this, arguments); }
            },
            "propertyChangeDelay": {
              "get": function () { return this.property_change_delay; },
              "set": function (value) { this.property_change_delay = value; }
            }
          },
          "static": {}
        },
        "PersonaStore": {
          "prototype": {
            "updateCapabilities": {
              "value": function () { return this.update_capabilities.apply(this, arguments); }
            },
            "freezePersonasChanged": {
              "value": function () { return this.freeze_personas_changed.apply(this, arguments); }
            },
            "thawPersonasChanged": {
              "value": function () { return this.thaw_personas_changed.apply(this, arguments); }
            },
            "registerPersonas": {
              "value": function () { return this.register_personas.apply(this, arguments); }
            },
            "unregisterPersonas": {
              "value": function () { return this.unregister_personas.apply(this, arguments); }
            },
            "reachQuiescence": {
              "value": function () { return this.reach_quiescence.apply(this, arguments); }
            },
            "updateIsUserSetDefault": {
              "value": function () { return this.update_is_user_set_default.apply(this, arguments); }
            },
            "updateTrustLevel": {
              "value": function () { return this.update_trust_level.apply(this, arguments); }
            },
            "getAddPersonaFromDetailsMock": {
              "value": function () { return this.get_add_persona_from_details_mock.apply(this, arguments); }
            },
            "setAddPersonaFromDetailsMock": {
              "value": function () { return this.set_add_persona_from_details_mock.apply(this, arguments); }
            },
            "getRemovePersonaMock": {
              "value": function () { return this.get_remove_persona_mock.apply(this, arguments); }
            },
            "setRemovePersonaMock": {
              "value": function () { return this.set_remove_persona_mock.apply(this, arguments); }
            },
            "getPrepareMock": {
              "value": function () { return this.get_prepare_mock.apply(this, arguments); }
            },
            "setPrepareMock": {
              "value": function () { return this.set_prepare_mock.apply(this, arguments); }
            },
            "getPersonaType": {
              "value": function () { return this.get_persona_type.apply(this, arguments); }
            },
            "setPersonaType": {
              "value": function () { return this.set_persona_type.apply(this, arguments); }
            },
            "addPersonaFromDetailsMock": {
              "get": function () { return this.add_persona_from_details_mock; },
              "set": function (value) { this.add_persona_from_details_mock = value; }
            },
            "removePersonaMock": {
              "get": function () { return this.remove_persona_mock; },
              "set": function (value) { this.remove_persona_mock = value; }
            },
            "prepareMock": {
              "get": function () { return this.prepare_mock; },
              "set": function (value) { this.prepare_mock = value; }
            },
            "personaType": {
              "get": function () { return this.persona_type; },
              "set": function (value) { this.persona_type = value; }
            }
          },
          "static": {}
        }
      },
      "static": {}
    },
    "FolksEds": {
      "class": {
        "Persona": {
          "prototype": {
            "changeSystemGroups": {
              "value": function () { return this.change_system_groups.apply(this, arguments); }
            },
            "changeSystemGroupsFinish": {
              "value": function () { return this.change_system_groups_finish.apply(this, arguments); }
            },
            "changeInGooglePersonalGroup": {
              "value": function () { return this.change_in_google_personal_group.apply(this, arguments); }
            },
            "changeInGooglePersonalGroupFinish": {
              "value": function () { return this.change_in_google_personal_group_finish.apply(this, arguments); }
            },
            "getContact": {
              "value": function () { return this.get_contact.apply(this, arguments); }
            },
            "getContactId": {
              "value": function () { return this.get_contact_id.apply(this, arguments); }
            },
            "getSystemGroups": {
              "value": function () { return this.get_system_groups.apply(this, arguments); }
            },
            "setSystemGroups": {
              "value": function () { return this.set_system_groups.apply(this, arguments); }
            },
            "getInGooglePersonalGroup": {
              "value": function () { return this.get_in_google_personal_group.apply(this, arguments); }
            },
            "setInGooglePersonalGroup": {
              "value": function () { return this.set_in_google_personal_group.apply(this, arguments); }
            },
            "contactId": {
              "get": function () { return this.contact_id; },
              "set": function (value) { this.contact_id = value; }
            },
            "systemGroups": {
              "get": function () { return this.system_groups; },
              "set": function (value) { this.system_groups = value; }
            },
            "inGooglePersonalGroup": {
              "get": function () { return this.in_google_personal_group; },
              "set": function (value) { this.in_google_personal_group = value; }
            }
          },
          "static": {}
        },
        "PersonaStore": {
          "prototype": {
            "getSource": {
              "value": function () { return this.get_source.apply(this, arguments); }
            }
          },
          "static": {
            "createAddressBook": {
              "value": function () { return this.create_address_book.apply(this, arguments); }
            },
            "createAddressBookFinish": {
              "value": function () { return this.create_address_book_finish.apply(this, arguments); }
            },
            "removeAddressBook": {
              "value": function () { return this.remove_address_book.apply(this, arguments); }
            },
            "removeAddressBookFinish": {
              "value": function () { return this.remove_address_book_finish.apply(this, arguments); }
            }
          }
        }
      },
      "static": {}
    },
    "FolksTelepathy": {
      "class": {
        "Persona": {
          "prototype": {
            "getIsInContactList": {
              "value": function () { return this.get_is_in_contact_list.apply(this, arguments); }
            },
            "setIsInContactList": {
              "value": function () { return this.set_is_in_contact_list.apply(this, arguments); }
            },
            "getContact": {
              "value": function () { return this.get_contact.apply(this, arguments); }
            },
            "isInContactList": {
              "get": function () { return this.is_in_contact_list; },
              "set": function (value) { this.is_in_contact_list = value; }
            }
          },
          "static": {
            "dupForContact": {
              "value": function () { return this.dup_for_contact.apply(this, arguments); }
            }
          }
        },
        "PersonaStore": {
          "prototype": {
            "getAccount": {
              "value": function () { return this.get_account.apply(this, arguments); }
            }
          },
          "static": {
            "dupForAccount": {
              "value": function () { return this.dup_for_account.apply(this, arguments); }
            },
            "listPersonaStores": {
              "value": function () { return this.list_persona_stores.apply(this, arguments); }
            }
          }
        }
      },
      "static": {}
    },
    "GConf": {
      "class": {
        "Client": {
          "prototype": {
            "addDir": {
              "value": function () { return this.add_dir.apply(this, arguments); }
            },
            "allDirs": {
              "value": function () { return this.all_dirs.apply(this, arguments); }
            },
            "allEntries": {
              "value": function () { return this.all_entries.apply(this, arguments); }
            },
            "changeSetFromCurrent": {
              "value": function () { return this.change_set_from_current.apply(this, arguments); }
            },
            "changeSetFromCurrentv": {
              "value": function () { return this.change_set_from_currentv.apply(this, arguments); }
            },
            "clearCache": {
              "value": function () { return this.clear_cache.apply(this, arguments); }
            },
            "commitChangeSet": {
              "value": function () { return this.commit_change_set.apply(this, arguments); }
            },
            "dirExists": {
              "value": function () { return this.dir_exists.apply(this, arguments); }
            },
            "getBool": {
              "value": function () { return this.get_bool.apply(this, arguments); }
            },
            "getDefaultFromSchema": {
              "value": function () { return this.get_default_from_schema.apply(this, arguments); }
            },
            "getEntry": {
              "value": function () { return this.get_entry.apply(this, arguments); }
            },
            "getFloat": {
              "value": function () { return this.get_float.apply(this, arguments); }
            },
            "getInt": {
              "value": function () { return this.get_int.apply(this, arguments); }
            },
            "getList": {
              "value": function () { return this.get_list.apply(this, arguments); }
            },
            "getPair": {
              "value": function () { return this.get_pair.apply(this, arguments); }
            },
            "getSchema": {
              "value": function () { return this.get_schema.apply(this, arguments); }
            },
            "getString": {
              "value": function () { return this.get_string.apply(this, arguments); }
            },
            "getWithoutDefault": {
              "value": function () { return this.get_without_default.apply(this, arguments); }
            },
            "keyIsWritable": {
              "value": function () { return this.key_is_writable.apply(this, arguments); }
            },
            "notifyAdd": {
              "value": function () { return this.notify_add.apply(this, arguments); }
            },
            "notifyRemove": {
              "value": function () { return this.notify_remove.apply(this, arguments); }
            },
            "recursiveUnset": {
              "value": function () { return this.recursive_unset.apply(this, arguments); }
            },
            "removeDir": {
              "value": function () { return this.remove_dir.apply(this, arguments); }
            },
            "reverseChangeSet": {
              "value": function () { return this.reverse_change_set.apply(this, arguments); }
            },
            "setBool": {
              "value": function () { return this.set_bool.apply(this, arguments); }
            },
            "setErrorHandling": {
              "value": function () { return this.set_error_handling.apply(this, arguments); }
            },
            "setFloat": {
              "value": function () { return this.set_float.apply(this, arguments); }
            },
            "setInt": {
              "value": function () { return this.set_int.apply(this, arguments); }
            },
            "setList": {
              "value": function () { return this.set_list.apply(this, arguments); }
            },
            "setPair": {
              "value": function () { return this.set_pair.apply(this, arguments); }
            },
            "setSchema": {
              "value": function () { return this.set_schema.apply(this, arguments); }
            },
            "setString": {
              "value": function () { return this.set_string.apply(this, arguments); }
            },
            "suggestSync": {
              "value": function () { return this.suggest_sync.apply(this, arguments); }
            },
            "unreturnedError": {
              "value": function () { return this.unreturned_error.apply(this, arguments); }
            },
            "valueChanged": {
              "value": function () { return this.value_changed.apply(this, arguments); }
            }
          },
          "static": {
            "getDefault": {
              "value": function () { return this.get_default.apply(this, arguments); }
            },
            "getForEngine": {
              "value": function () { return this.get_for_engine.apply(this, arguments); }
            },
            "setGlobalDefaultErrorHandler": {
              "value": function () { return this.set_global_default_error_handler.apply(this, arguments); }
            }
          }
        }
      },
      "static": {
        "clearCache": {
          "value": function () { return this.clear_cache.apply(this, arguments); }
        },
        "concatDirAndKey": {
          "value": function () { return this.concat_dir_and_key.apply(this, arguments); }
        },
        "debugShutdown": {
          "value": function () { return this.debug_shutdown.apply(this, arguments); }
        },
        "engineGetDefault": {
          "value": function () { return this.engine_get_default.apply(this, arguments); }
        },
        "engineGetForAddress": {
          "value": function () { return this.engine_get_for_address.apply(this, arguments); }
        },
        "engineGetForAddresses": {
          "value": function () { return this.engine_get_for_addresses.apply(this, arguments); }
        },
        "engineGetLocal": {
          "value": function () { return this.engine_get_local.apply(this, arguments); }
        },
        "engineGetLocalForAddresses": {
          "value": function () { return this.engine_get_local_for_addresses.apply(this, arguments); }
        },
        "enumToString": {
          "value": function () { return this.enum_to_string.apply(this, arguments); }
        },
        "errorQuark": {
          "value": function () { return this.error_quark.apply(this, arguments); }
        },
        "escapeKey": {
          "value": function () { return this.escape_key.apply(this, arguments); }
        },
        "isInitialized": {
          "value": function () { return this.is_initialized.apply(this, arguments); }
        },
        "keyIsBelow": {
          "value": function () { return this.key_is_below.apply(this, arguments); }
        },
        "listenersNew": {
          "value": function () { return this.listeners_new.apply(this, arguments); }
        },
        "metaInfoNew": {
          "value": function () { return this.meta_info_new.apply(this, arguments); }
        },
        "schemaNew": {
          "value": function () { return this.schema_new.apply(this, arguments); }
        },
        "stringToEnum": {
          "value": function () { return this.string_to_enum.apply(this, arguments); }
        },
        "synchronousSync": {
          "value": function () { return this.synchronous_sync.apply(this, arguments); }
        },
        "unescapeKey": {
          "value": function () { return this.unescape_key.apply(this, arguments); }
        },
        "uniqueKey": {
          "value": function () { return this.unique_key.apply(this, arguments); }
        },
        "validKey": {
          "value": function () { return this.valid_key.apply(this, arguments); }
        },
        "valueDecode": {
          "value": function () { return this.value_decode.apply(this, arguments); }
        }
      }
    },
    "GData": {
      "class": {
        "APPCategories": {
          "prototype": {
            "getCategories": {
              "value": function () { return this.get_categories.apply(this, arguments); }
            },
            "isFixed": {
              "get": function () { return this.is_fixed; },
              "set": function (value) { this.is_fixed = value; }
            }
          },
          "static": {}
        },
        "AccessRule": {
          "prototype": {
            "getEdited": {
              "value": function () { return this.get_edited.apply(this, arguments); }
            },
            "getKey": {
              "value": function () { return this.get_key.apply(this, arguments); }
            },
            "getRole": {
              "value": function () { return this.get_role.apply(this, arguments); }
            },
            "getScope": {
              "value": function () { return this.get_scope.apply(this, arguments); }
            },
            "setRole": {
              "value": function () { return this.set_role.apply(this, arguments); }
            },
            "setScope": {
              "value": function () { return this.set_scope.apply(this, arguments); }
            },
            "scopeType": {
              "get": function () { return this.scope_type; },
              "set": function (value) { this.scope_type = value; }
            },
            "scopeValue": {
              "get": function () { return this.scope_value; },
              "set": function (value) { this.scope_value = value; }
            }
          },
          "static": {}
        },
        "Author": {
          "prototype": {
            "getEmailAddress": {
              "value": function () { return this.get_email_address.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getUri": {
              "value": function () { return this.get_uri.apply(this, arguments); }
            },
            "setEmailAddress": {
              "value": function () { return this.set_email_address.apply(this, arguments); }
            },
            "setName": {
              "value": function () { return this.set_name.apply(this, arguments); }
            },
            "setUri": {
              "value": function () { return this.set_uri.apply(this, arguments); }
            },
            "emailAddress": {
              "get": function () { return this.email_address; },
              "set": function (value) { this.email_address = value; }
            }
          },
          "static": {}
        },
        "AuthorizationDomain": {
          "prototype": {
            "getScope": {
              "value": function () { return this.get_scope.apply(this, arguments); }
            },
            "getServiceName": {
              "value": function () { return this.get_service_name.apply(this, arguments); }
            },
            "serviceName": {
              "get": function () { return this.service_name; },
              "set": function (value) { this.service_name = value; }
            }
          },
          "static": {}
        },
        "BatchOperation": {
          "prototype": {
            "addDeletion": {
              "value": function () { return this.add_deletion.apply(this, arguments); }
            },
            "addInsertion": {
              "value": function () { return this.add_insertion.apply(this, arguments); }
            },
            "addQuery": {
              "value": function () { return this.add_query.apply(this, arguments); }
            },
            "addUpdate": {
              "value": function () { return this.add_update.apply(this, arguments); }
            },
            "getAuthorizationDomain": {
              "value": function () { return this.get_authorization_domain.apply(this, arguments); }
            },
            "getFeedUri": {
              "value": function () { return this.get_feed_uri.apply(this, arguments); }
            },
            "getService": {
              "value": function () { return this.get_service.apply(this, arguments); }
            },
            "runAsync": {
              "value": function () { return this.run_async.apply(this, arguments); }
            },
            "runFinish": {
              "value": function () { return this.run_finish.apply(this, arguments); }
            },
            "authorizationDomain": {
              "get": function () { return this.authorization_domain; },
              "set": function (value) { this.authorization_domain = value; }
            },
            "feedUri": {
              "get": function () { return this.feed_uri; },
              "set": function (value) { this.feed_uri = value; }
            }
          },
          "static": {}
        },
        "CalendarAccessRule": {
          "prototype": {},
          "static": {}
        },
        "CalendarCalendar": {
          "prototype": {
            "getAccessLevel": {
              "value": function () { return this.get_access_level.apply(this, arguments); }
            },
            "getColor": {
              "value": function () { return this.get_color.apply(this, arguments); }
            },
            "getEdited": {
              "value": function () { return this.get_edited.apply(this, arguments); }
            },
            "getTimesCleaned": {
              "value": function () { return this.get_times_cleaned.apply(this, arguments); }
            },
            "getTimezone": {
              "value": function () { return this.get_timezone.apply(this, arguments); }
            },
            "isHidden": {
              "get": function () { return this.is_hidden; },
              "set": function (value) { this.is_hidden = value; }
            },
            "isSelected": {
              "get": function () { return this.is_selected; },
              "set": function (value) { this.is_selected = value; }
            },
            "setColor": {
              "value": function () { return this.set_color.apply(this, arguments); }
            },
            "setIsHidden": {
              "value": function () { return this.set_is_hidden.apply(this, arguments); }
            },
            "setIsSelected": {
              "value": function () { return this.set_is_selected.apply(this, arguments); }
            },
            "setTimezone": {
              "value": function () { return this.set_timezone.apply(this, arguments); }
            },
            "accessLevel": {
              "get": function () { return this.access_level; },
              "set": function (value) { this.access_level = value; }
            },
            "timesCleaned": {
              "get": function () { return this.times_cleaned; },
              "set": function (value) { this.times_cleaned = value; }
            }
          },
          "static": {}
        },
        "CalendarEvent": {
          "prototype": {
            "addPerson": {
              "value": function () { return this.add_person.apply(this, arguments); }
            },
            "addPlace": {
              "value": function () { return this.add_place.apply(this, arguments); }
            },
            "addTime": {
              "value": function () { return this.add_time.apply(this, arguments); }
            },
            "getAnyoneCanAddSelf": {
              "value": function () { return this.get_anyone_can_add_self.apply(this, arguments); }
            },
            "getEdited": {
              "value": function () { return this.get_edited.apply(this, arguments); }
            },
            "getGuestsCanInviteOthers": {
              "value": function () { return this.get_guests_can_invite_others.apply(this, arguments); }
            },
            "getGuestsCanModify": {
              "value": function () { return this.get_guests_can_modify.apply(this, arguments); }
            },
            "getGuestsCanSeeGuests": {
              "value": function () { return this.get_guests_can_see_guests.apply(this, arguments); }
            },
            "getOriginalEventDetails": {
              "value": function () { return this.get_original_event_details.apply(this, arguments); }
            },
            "getPeople": {
              "value": function () { return this.get_people.apply(this, arguments); }
            },
            "getPlaces": {
              "value": function () { return this.get_places.apply(this, arguments); }
            },
            "getPrimaryTime": {
              "value": function () { return this.get_primary_time.apply(this, arguments); }
            },
            "getRecurrence": {
              "value": function () { return this.get_recurrence.apply(this, arguments); }
            },
            "getSequence": {
              "value": function () { return this.get_sequence.apply(this, arguments); }
            },
            "getStatus": {
              "value": function () { return this.get_status.apply(this, arguments); }
            },
            "getTimes": {
              "value": function () { return this.get_times.apply(this, arguments); }
            },
            "getTransparency": {
              "value": function () { return this.get_transparency.apply(this, arguments); }
            },
            "getUid": {
              "value": function () { return this.get_uid.apply(this, arguments); }
            },
            "getVisibility": {
              "value": function () { return this.get_visibility.apply(this, arguments); }
            },
            "isException": {
              "value": function () { return this.is_exception.apply(this, arguments); }
            },
            "setAnyoneCanAddSelf": {
              "value": function () { return this.set_anyone_can_add_self.apply(this, arguments); }
            },
            "setGuestsCanInviteOthers": {
              "value": function () { return this.set_guests_can_invite_others.apply(this, arguments); }
            },
            "setGuestsCanModify": {
              "value": function () { return this.set_guests_can_modify.apply(this, arguments); }
            },
            "setGuestsCanSeeGuests": {
              "value": function () { return this.set_guests_can_see_guests.apply(this, arguments); }
            },
            "setRecurrence": {
              "value": function () { return this.set_recurrence.apply(this, arguments); }
            },
            "setSequence": {
              "value": function () { return this.set_sequence.apply(this, arguments); }
            },
            "setStatus": {
              "value": function () { return this.set_status.apply(this, arguments); }
            },
            "setTransparency": {
              "value": function () { return this.set_transparency.apply(this, arguments); }
            },
            "setUid": {
              "value": function () { return this.set_uid.apply(this, arguments); }
            },
            "setVisibility": {
              "value": function () { return this.set_visibility.apply(this, arguments); }
            },
            "anyoneCanAddSelf": {
              "get": function () { return this.anyone_can_add_self; },
              "set": function (value) { this.anyone_can_add_self = value; }
            },
            "guestsCanInviteOthers": {
              "get": function () { return this.guests_can_invite_others; },
              "set": function (value) { this.guests_can_invite_others = value; }
            },
            "guestsCanModify": {
              "get": function () { return this.guests_can_modify; },
              "set": function (value) { this.guests_can_modify = value; }
            },
            "guestsCanSeeGuests": {
              "get": function () { return this.guests_can_see_guests; },
              "set": function (value) { this.guests_can_see_guests = value; }
            },
            "originalEventId": {
              "get": function () { return this.original_event_id; },
              "set": function (value) { this.original_event_id = value; }
            },
            "originalEventUri": {
              "get": function () { return this.original_event_uri; },
              "set": function (value) { this.original_event_uri = value; }
            }
          },
          "static": {}
        },
        "CalendarFeed": {
          "prototype": {
            "getTimesCleaned": {
              "value": function () { return this.get_times_cleaned.apply(this, arguments); }
            },
            "getTimezone": {
              "value": function () { return this.get_timezone.apply(this, arguments); }
            },
            "timesCleaned": {
              "get": function () { return this.times_cleaned; },
              "set": function (value) { this.times_cleaned = value; }
            }
          },
          "static": {}
        },
        "CalendarQuery": {
          "prototype": {
            "getFutureEvents": {
              "value": function () { return this.get_future_events.apply(this, arguments); }
            },
            "getMaxAttendees": {
              "value": function () { return this.get_max_attendees.apply(this, arguments); }
            },
            "getOrderBy": {
              "value": function () { return this.get_order_by.apply(this, arguments); }
            },
            "getRecurrenceExpansionEnd": {
              "value": function () { return this.get_recurrence_expansion_end.apply(this, arguments); }
            },
            "getRecurrenceExpansionStart": {
              "value": function () { return this.get_recurrence_expansion_start.apply(this, arguments); }
            },
            "getSingleEvents": {
              "value": function () { return this.get_single_events.apply(this, arguments); }
            },
            "getSortOrder": {
              "value": function () { return this.get_sort_order.apply(this, arguments); }
            },
            "getStartMax": {
              "value": function () { return this.get_start_max.apply(this, arguments); }
            },
            "getStartMin": {
              "value": function () { return this.get_start_min.apply(this, arguments); }
            },
            "getTimezone": {
              "value": function () { return this.get_timezone.apply(this, arguments); }
            },
            "setFutureEvents": {
              "value": function () { return this.set_future_events.apply(this, arguments); }
            },
            "setMaxAttendees": {
              "value": function () { return this.set_max_attendees.apply(this, arguments); }
            },
            "setOrderBy": {
              "value": function () { return this.set_order_by.apply(this, arguments); }
            },
            "setRecurrenceExpansionEnd": {
              "value": function () { return this.set_recurrence_expansion_end.apply(this, arguments); }
            },
            "setRecurrenceExpansionStart": {
              "value": function () { return this.set_recurrence_expansion_start.apply(this, arguments); }
            },
            "setShowDeleted": {
              "value": function () { return this.set_show_deleted.apply(this, arguments); }
            },
            "setSingleEvents": {
              "value": function () { return this.set_single_events.apply(this, arguments); }
            },
            "setSortOrder": {
              "value": function () { return this.set_sort_order.apply(this, arguments); }
            },
            "setStartMax": {
              "value": function () { return this.set_start_max.apply(this, arguments); }
            },
            "setStartMin": {
              "value": function () { return this.set_start_min.apply(this, arguments); }
            },
            "setTimezone": {
              "value": function () { return this.set_timezone.apply(this, arguments); }
            },
            "showDeleted": {
              "get": function () { return this.show_deleted; },
              "set": function (value) { this.show_deleted = value; }
            },
            "futureEvents": {
              "get": function () { return this.future_events; },
              "set": function (value) { this.future_events = value; }
            },
            "maxAttendees": {
              "get": function () { return this.max_attendees; },
              "set": function (value) { this.max_attendees = value; }
            },
            "orderBy": {
              "get": function () { return this.order_by; },
              "set": function (value) { this.order_by = value; }
            },
            "recurrenceExpansionEnd": {
              "get": function () { return this.recurrence_expansion_end; },
              "set": function (value) { this.recurrence_expansion_end = value; }
            },
            "recurrenceExpansionStart": {
              "get": function () { return this.recurrence_expansion_start; },
              "set": function (value) { this.recurrence_expansion_start = value; }
            },
            "singleEvents": {
              "get": function () { return this.single_events; },
              "set": function (value) { this.single_events = value; }
            },
            "sortOrder": {
              "get": function () { return this.sort_order; },
              "set": function (value) { this.sort_order = value; }
            },
            "startMax": {
              "get": function () { return this.start_max; },
              "set": function (value) { this.start_max = value; }
            },
            "startMin": {
              "get": function () { return this.start_min; },
              "set": function (value) { this.start_min = value; }
            }
          },
          "static": {}
        },
        "CalendarService": {
          "prototype": {
            "insertCalendarEvent": {
              "value": function () { return this.insert_calendar_event.apply(this, arguments); }
            },
            "insertCalendarEventAsync": {
              "value": function () { return this.insert_calendar_event_async.apply(this, arguments); }
            },
            "insertEvent": {
              "value": function () { return this.insert_event.apply(this, arguments); }
            },
            "insertEventAsync": {
              "value": function () { return this.insert_event_async.apply(this, arguments); }
            },
            "queryAllCalendars": {
              "value": function () { return this.query_all_calendars.apply(this, arguments); }
            },
            "queryAllCalendarsAsync": {
              "value": function () { return this.query_all_calendars_async.apply(this, arguments); }
            },
            "queryEvents": {
              "value": function () { return this.query_events.apply(this, arguments); }
            },
            "queryEventsAsync": {
              "value": function () { return this.query_events_async.apply(this, arguments); }
            },
            "queryOwnCalendars": {
              "value": function () { return this.query_own_calendars.apply(this, arguments); }
            },
            "queryOwnCalendarsAsync": {
              "value": function () { return this.query_own_calendars_async.apply(this, arguments); }
            }
          },
          "static": {
            "getPrimaryAuthorizationDomain": {
              "value": function () { return this.get_primary_authorization_domain.apply(this, arguments); }
            }
          }
        },
        "Category": {
          "prototype": {
            "getLabel": {
              "value": function () { return this.get_label.apply(this, arguments); }
            },
            "getScheme": {
              "value": function () { return this.get_scheme.apply(this, arguments); }
            },
            "getTerm": {
              "value": function () { return this.get_term.apply(this, arguments); }
            },
            "setLabel": {
              "value": function () { return this.set_label.apply(this, arguments); }
            },
            "setScheme": {
              "value": function () { return this.set_scheme.apply(this, arguments); }
            },
            "setTerm": {
              "value": function () { return this.set_term.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "ClientLoginAuthorizer": {
          "prototype": {
            "authenticateAsync": {
              "value": function () { return this.authenticate_async.apply(this, arguments); }
            },
            "authenticateFinish": {
              "value": function () { return this.authenticate_finish.apply(this, arguments); }
            },
            "getClientId": {
              "value": function () { return this.get_client_id.apply(this, arguments); }
            },
            "getPassword": {
              "value": function () { return this.get_password.apply(this, arguments); }
            },
            "getProxyResolver": {
              "value": function () { return this.get_proxy_resolver.apply(this, arguments); }
            },
            "getProxyUri": {
              "value": function () { return this.get_proxy_uri.apply(this, arguments); }
            },
            "getTimeout": {
              "value": function () { return this.get_timeout.apply(this, arguments); }
            },
            "getUsername": {
              "value": function () { return this.get_username.apply(this, arguments); }
            },
            "setProxyResolver": {
              "value": function () { return this.set_proxy_resolver.apply(this, arguments); }
            },
            "setProxyUri": {
              "value": function () { return this.set_proxy_uri.apply(this, arguments); }
            },
            "setTimeout": {
              "value": function () { return this.set_timeout.apply(this, arguments); }
            },
            "clientId": {
              "get": function () { return this.client_id; },
              "set": function (value) { this.client_id = value; }
            },
            "proxyResolver": {
              "get": function () { return this.proxy_resolver; },
              "set": function (value) { this.proxy_resolver = value; }
            },
            "proxyUri": {
              "get": function () { return this.proxy_uri; },
              "set": function (value) { this.proxy_uri = value; }
            }
          },
          "static": {}
        },
        "Comment": {
          "prototype": {},
          "static": {}
        },
        "ContactsContact": {
          "prototype": {
            "addCalendar": {
              "value": function () { return this.add_calendar.apply(this, arguments); }
            },
            "addEmailAddress": {
              "value": function () { return this.add_email_address.apply(this, arguments); }
            },
            "addEvent": {
              "value": function () { return this.add_event.apply(this, arguments); }
            },
            "addExternalId": {
              "value": function () { return this.add_external_id.apply(this, arguments); }
            },
            "addGroup": {
              "value": function () { return this.add_group.apply(this, arguments); }
            },
            "addHobby": {
              "value": function () { return this.add_hobby.apply(this, arguments); }
            },
            "addImAddress": {
              "value": function () { return this.add_im_address.apply(this, arguments); }
            },
            "addJot": {
              "value": function () { return this.add_jot.apply(this, arguments); }
            },
            "addLanguage": {
              "value": function () { return this.add_language.apply(this, arguments); }
            },
            "addOrganization": {
              "value": function () { return this.add_organization.apply(this, arguments); }
            },
            "addPhoneNumber": {
              "value": function () { return this.add_phone_number.apply(this, arguments); }
            },
            "addPostalAddress": {
              "value": function () { return this.add_postal_address.apply(this, arguments); }
            },
            "addRelation": {
              "value": function () { return this.add_relation.apply(this, arguments); }
            },
            "addWebsite": {
              "value": function () { return this.add_website.apply(this, arguments); }
            },
            "getBillingInformation": {
              "value": function () { return this.get_billing_information.apply(this, arguments); }
            },
            "getBirthday": {
              "value": function () { return this.get_birthday.apply(this, arguments); }
            },
            "getCalendars": {
              "value": function () { return this.get_calendars.apply(this, arguments); }
            },
            "getDirectoryServer": {
              "value": function () { return this.get_directory_server.apply(this, arguments); }
            },
            "getEdited": {
              "value": function () { return this.get_edited.apply(this, arguments); }
            },
            "getEmailAddresses": {
              "value": function () { return this.get_email_addresses.apply(this, arguments); }
            },
            "getEvents": {
              "value": function () { return this.get_events.apply(this, arguments); }
            },
            "getExtendedProperties": {
              "value": function () { return this.get_extended_properties.apply(this, arguments); }
            },
            "getExtendedProperty": {
              "value": function () { return this.get_extended_property.apply(this, arguments); }
            },
            "getExternalIds": {
              "value": function () { return this.get_external_ids.apply(this, arguments); }
            },
            "getFileAs": {
              "value": function () { return this.get_file_as.apply(this, arguments); }
            },
            "getGender": {
              "value": function () { return this.get_gender.apply(this, arguments); }
            },
            "getGroups": {
              "value": function () { return this.get_groups.apply(this, arguments); }
            },
            "getHobbies": {
              "value": function () { return this.get_hobbies.apply(this, arguments); }
            },
            "getImAddresses": {
              "value": function () { return this.get_im_addresses.apply(this, arguments); }
            },
            "getInitials": {
              "value": function () { return this.get_initials.apply(this, arguments); }
            },
            "getJots": {
              "value": function () { return this.get_jots.apply(this, arguments); }
            },
            "getLanguages": {
              "value": function () { return this.get_languages.apply(this, arguments); }
            },
            "getMaidenName": {
              "value": function () { return this.get_maiden_name.apply(this, arguments); }
            },
            "getMileage": {
              "value": function () { return this.get_mileage.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getNickname": {
              "value": function () { return this.get_nickname.apply(this, arguments); }
            },
            "getOccupation": {
              "value": function () { return this.get_occupation.apply(this, arguments); }
            },
            "getOrganizations": {
              "value": function () { return this.get_organizations.apply(this, arguments); }
            },
            "getPhoneNumbers": {
              "value": function () { return this.get_phone_numbers.apply(this, arguments); }
            },
            "getPhoto": {
              "value": function () { return this.get_photo.apply(this, arguments); }
            },
            "getPhotoAsync": {
              "value": function () { return this.get_photo_async.apply(this, arguments); }
            },
            "getPhotoEtag": {
              "value": function () { return this.get_photo_etag.apply(this, arguments); }
            },
            "getPhotoFinish": {
              "value": function () { return this.get_photo_finish.apply(this, arguments); }
            },
            "getPostalAddresses": {
              "value": function () { return this.get_postal_addresses.apply(this, arguments); }
            },
            "getPrimaryCalendar": {
              "value": function () { return this.get_primary_calendar.apply(this, arguments); }
            },
            "getPrimaryEmailAddress": {
              "value": function () { return this.get_primary_email_address.apply(this, arguments); }
            },
            "getPrimaryImAddress": {
              "value": function () { return this.get_primary_im_address.apply(this, arguments); }
            },
            "getPrimaryOrganization": {
              "value": function () { return this.get_primary_organization.apply(this, arguments); }
            },
            "getPrimaryPhoneNumber": {
              "value": function () { return this.get_primary_phone_number.apply(this, arguments); }
            },
            "getPrimaryPostalAddress": {
              "value": function () { return this.get_primary_postal_address.apply(this, arguments); }
            },
            "getPrimaryWebsite": {
              "value": function () { return this.get_primary_website.apply(this, arguments); }
            },
            "getPriority": {
              "value": function () { return this.get_priority.apply(this, arguments); }
            },
            "getRelations": {
              "value": function () { return this.get_relations.apply(this, arguments); }
            },
            "getSensitivity": {
              "value": function () { return this.get_sensitivity.apply(this, arguments); }
            },
            "getShortName": {
              "value": function () { return this.get_short_name.apply(this, arguments); }
            },
            "getSubject": {
              "value": function () { return this.get_subject.apply(this, arguments); }
            },
            "getUserDefinedField": {
              "value": function () { return this.get_user_defined_field.apply(this, arguments); }
            },
            "getUserDefinedFields": {
              "value": function () { return this.get_user_defined_fields.apply(this, arguments); }
            },
            "getWebsites": {
              "value": function () { return this.get_websites.apply(this, arguments); }
            },
            "isDeleted": {
              "value": function () { return this.is_deleted.apply(this, arguments); }
            },
            "isGroupDeleted": {
              "value": function () { return this.is_group_deleted.apply(this, arguments); }
            },
            "removeAllCalendars": {
              "value": function () { return this.remove_all_calendars.apply(this, arguments); }
            },
            "removeAllEmailAddresses": {
              "value": function () { return this.remove_all_email_addresses.apply(this, arguments); }
            },
            "removeAllEvents": {
              "value": function () { return this.remove_all_events.apply(this, arguments); }
            },
            "removeAllExternalIds": {
              "value": function () { return this.remove_all_external_ids.apply(this, arguments); }
            },
            "removeAllHobbies": {
              "value": function () { return this.remove_all_hobbies.apply(this, arguments); }
            },
            "removeAllImAddresses": {
              "value": function () { return this.remove_all_im_addresses.apply(this, arguments); }
            },
            "removeAllJots": {
              "value": function () { return this.remove_all_jots.apply(this, arguments); }
            },
            "removeAllLanguages": {
              "value": function () { return this.remove_all_languages.apply(this, arguments); }
            },
            "removeAllOrganizations": {
              "value": function () { return this.remove_all_organizations.apply(this, arguments); }
            },
            "removeAllPhoneNumbers": {
              "value": function () { return this.remove_all_phone_numbers.apply(this, arguments); }
            },
            "removeAllPostalAddresses": {
              "value": function () { return this.remove_all_postal_addresses.apply(this, arguments); }
            },
            "removeAllRelations": {
              "value": function () { return this.remove_all_relations.apply(this, arguments); }
            },
            "removeAllWebsites": {
              "value": function () { return this.remove_all_websites.apply(this, arguments); }
            },
            "removeGroup": {
              "value": function () { return this.remove_group.apply(this, arguments); }
            },
            "setBillingInformation": {
              "value": function () { return this.set_billing_information.apply(this, arguments); }
            },
            "setBirthday": {
              "value": function () { return this.set_birthday.apply(this, arguments); }
            },
            "setDirectoryServer": {
              "value": function () { return this.set_directory_server.apply(this, arguments); }
            },
            "setExtendedProperty": {
              "value": function () { return this.set_extended_property.apply(this, arguments); }
            },
            "setFileAs": {
              "value": function () { return this.set_file_as.apply(this, arguments); }
            },
            "setGender": {
              "value": function () { return this.set_gender.apply(this, arguments); }
            },
            "setInitials": {
              "value": function () { return this.set_initials.apply(this, arguments); }
            },
            "setMaidenName": {
              "value": function () { return this.set_maiden_name.apply(this, arguments); }
            },
            "setMileage": {
              "value": function () { return this.set_mileage.apply(this, arguments); }
            },
            "setName": {
              "value": function () { return this.set_name.apply(this, arguments); }
            },
            "setNickname": {
              "value": function () { return this.set_nickname.apply(this, arguments); }
            },
            "setOccupation": {
              "value": function () { return this.set_occupation.apply(this, arguments); }
            },
            "setPhoto": {
              "value": function () { return this.set_photo.apply(this, arguments); }
            },
            "setPhotoAsync": {
              "value": function () { return this.set_photo_async.apply(this, arguments); }
            },
            "setPhotoFinish": {
              "value": function () { return this.set_photo_finish.apply(this, arguments); }
            },
            "setPriority": {
              "value": function () { return this.set_priority.apply(this, arguments); }
            },
            "setSensitivity": {
              "value": function () { return this.set_sensitivity.apply(this, arguments); }
            },
            "setShortName": {
              "value": function () { return this.set_short_name.apply(this, arguments); }
            },
            "setSubject": {
              "value": function () { return this.set_subject.apply(this, arguments); }
            },
            "setUserDefinedField": {
              "value": function () { return this.set_user_defined_field.apply(this, arguments); }
            },
            "billingInformation": {
              "get": function () { return this.billing_information; },
              "set": function (value) { this.billing_information = value; }
            },
            "birthdayHasYear": {
              "get": function () { return this.birthday_has_year; },
              "set": function (value) { this.birthday_has_year = value; }
            },
            "directoryServer": {
              "get": function () { return this.directory_server; },
              "set": function (value) { this.directory_server = value; }
            },
            "fileAs": {
              "get": function () { return this.file_as; },
              "set": function (value) { this.file_as = value; }
            },
            "maidenName": {
              "get": function () { return this.maiden_name; },
              "set": function (value) { this.maiden_name = value; }
            },
            "photoEtag": {
              "get": function () { return this.photo_etag; },
              "set": function (value) { this.photo_etag = value; }
            },
            "shortName": {
              "get": function () { return this.short_name; },
              "set": function (value) { this.short_name = value; }
            }
          },
          "static": {}
        },
        "ContactsGroup": {
          "prototype": {
            "getEdited": {
              "value": function () { return this.get_edited.apply(this, arguments); }
            },
            "getExtendedProperties": {
              "value": function () { return this.get_extended_properties.apply(this, arguments); }
            },
            "getExtendedProperty": {
              "value": function () { return this.get_extended_property.apply(this, arguments); }
            },
            "getSystemGroupId": {
              "value": function () { return this.get_system_group_id.apply(this, arguments); }
            },
            "isDeleted": {
              "value": function () { return this.is_deleted.apply(this, arguments); }
            },
            "setExtendedProperty": {
              "value": function () { return this.set_extended_property.apply(this, arguments); }
            },
            "systemGroupId": {
              "get": function () { return this.system_group_id; },
              "set": function (value) { this.system_group_id = value; }
            }
          },
          "static": {}
        },
        "ContactsQuery": {
          "prototype": {
            "getGroup": {
              "value": function () { return this.get_group.apply(this, arguments); }
            },
            "getOrderBy": {
              "value": function () { return this.get_order_by.apply(this, arguments); }
            },
            "getSortOrder": {
              "value": function () { return this.get_sort_order.apply(this, arguments); }
            },
            "setGroup": {
              "value": function () { return this.set_group.apply(this, arguments); }
            },
            "setOrderBy": {
              "value": function () { return this.set_order_by.apply(this, arguments); }
            },
            "setShowDeleted": {
              "value": function () { return this.set_show_deleted.apply(this, arguments); }
            },
            "setSortOrder": {
              "value": function () { return this.set_sort_order.apply(this, arguments); }
            },
            "showDeleted": {
              "get": function () { return this.show_deleted; },
              "set": function (value) { this.show_deleted = value; }
            },
            "orderBy": {
              "get": function () { return this.order_by; },
              "set": function (value) { this.order_by = value; }
            },
            "sortOrder": {
              "get": function () { return this.sort_order; },
              "set": function (value) { this.sort_order = value; }
            }
          },
          "static": {}
        },
        "ContactsService": {
          "prototype": {
            "insertContact": {
              "value": function () { return this.insert_contact.apply(this, arguments); }
            },
            "insertContactAsync": {
              "value": function () { return this.insert_contact_async.apply(this, arguments); }
            },
            "insertGroup": {
              "value": function () { return this.insert_group.apply(this, arguments); }
            },
            "insertGroupAsync": {
              "value": function () { return this.insert_group_async.apply(this, arguments); }
            },
            "queryContacts": {
              "value": function () { return this.query_contacts.apply(this, arguments); }
            },
            "queryContactsAsync": {
              "value": function () { return this.query_contacts_async.apply(this, arguments); }
            },
            "queryGroups": {
              "value": function () { return this.query_groups.apply(this, arguments); }
            },
            "queryGroupsAsync": {
              "value": function () { return this.query_groups_async.apply(this, arguments); }
            }
          },
          "static": {
            "getPrimaryAuthorizationDomain": {
              "value": function () { return this.get_primary_authorization_domain.apply(this, arguments); }
            }
          }
        },
        "DocumentsAccessRule": {
          "prototype": {},
          "static": {}
        },
        "DocumentsDocument": {
          "prototype": {
            "getDownloadUri": {
              "value": function () { return this.get_download_uri.apply(this, arguments); }
            },
            "getThumbnailUri": {
              "value": function () { return this.get_thumbnail_uri.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DocumentsDrawing": {
          "prototype": {},
          "static": {}
        },
        "DocumentsEntry": {
          "prototype": {
            "getDocumentId": {
              "value": function () { return this.get_document_id.apply(this, arguments); }
            },
            "getEdited": {
              "value": function () { return this.get_edited.apply(this, arguments); }
            },
            "getLastModifiedBy": {
              "value": function () { return this.get_last_modified_by.apply(this, arguments); }
            },
            "getLastViewed": {
              "value": function () { return this.get_last_viewed.apply(this, arguments); }
            },
            "getPath": {
              "value": function () { return this.get_path.apply(this, arguments); }
            },
            "getQuotaUsed": {
              "value": function () { return this.get_quota_used.apply(this, arguments); }
            },
            "getResourceId": {
              "value": function () { return this.get_resource_id.apply(this, arguments); }
            },
            "isDeleted": {
              "get": function () { return this.is_deleted; },
              "set": function (value) { this.is_deleted = value; }
            },
            "setWritersCanInvite": {
              "value": function () { return this.set_writers_can_invite.apply(this, arguments); }
            },
            "writersCanInvite": {
              "get": function () { return this.writers_can_invite; },
              "set": function (value) { this.writers_can_invite = value; }
            },
            "documentId": {
              "get": function () { return this.document_id; },
              "set": function (value) { this.document_id = value; }
            },
            "lastModifiedBy": {
              "get": function () { return this.last_modified_by; },
              "set": function (value) { this.last_modified_by = value; }
            },
            "lastViewed": {
              "get": function () { return this.last_viewed; },
              "set": function (value) { this.last_viewed = value; }
            },
            "quotaUsed": {
              "get": function () { return this.quota_used; },
              "set": function (value) { this.quota_used = value; }
            },
            "resourceId": {
              "get": function () { return this.resource_id; },
              "set": function (value) { this.resource_id = value; }
            }
          },
          "static": {}
        },
        "DocumentsFeed": {
          "prototype": {},
          "static": {}
        },
        "DocumentsFolder": {
          "prototype": {},
          "static": {}
        },
        "DocumentsPdf": {
          "prototype": {},
          "static": {}
        },
        "DocumentsPresentation": {
          "prototype": {},
          "static": {}
        },
        "DocumentsQuery": {
          "prototype": {
            "addCollaborator": {
              "value": function () { return this.add_collaborator.apply(this, arguments); }
            },
            "addReader": {
              "value": function () { return this.add_reader.apply(this, arguments); }
            },
            "getCollaboratorAddresses": {
              "value": function () { return this.get_collaborator_addresses.apply(this, arguments); }
            },
            "getExactTitle": {
              "value": function () { return this.get_exact_title.apply(this, arguments); }
            },
            "getFolderId": {
              "value": function () { return this.get_folder_id.apply(this, arguments); }
            },
            "getReaderAddresses": {
              "value": function () { return this.get_reader_addresses.apply(this, arguments); }
            },
            "getTitle": {
              "value": function () { return this.get_title.apply(this, arguments); }
            },
            "setFolderId": {
              "value": function () { return this.set_folder_id.apply(this, arguments); }
            },
            "setShowDeleted": {
              "value": function () { return this.set_show_deleted.apply(this, arguments); }
            },
            "setShowFolders": {
              "value": function () { return this.set_show_folders.apply(this, arguments); }
            },
            "setTitle": {
              "value": function () { return this.set_title.apply(this, arguments); }
            },
            "showDeleted": {
              "get": function () { return this.show_deleted; },
              "set": function (value) { this.show_deleted = value; }
            },
            "showFolders": {
              "get": function () { return this.show_folders; },
              "set": function (value) { this.show_folders = value; }
            },
            "exactTitle": {
              "get": function () { return this.exact_title; },
              "set": function (value) { this.exact_title = value; }
            },
            "folderId": {
              "get": function () { return this.folder_id; },
              "set": function (value) { this.folder_id = value; }
            }
          },
          "static": {}
        },
        "DocumentsService": {
          "prototype": {
            "addEntryToFolder": {
              "value": function () { return this.add_entry_to_folder.apply(this, arguments); }
            },
            "addEntryToFolderAsync": {
              "value": function () { return this.add_entry_to_folder_async.apply(this, arguments); }
            },
            "addEntryToFolderFinish": {
              "value": function () { return this.add_entry_to_folder_finish.apply(this, arguments); }
            },
            "copyDocument": {
              "value": function () { return this.copy_document.apply(this, arguments); }
            },
            "copyDocumentAsync": {
              "value": function () { return this.copy_document_async.apply(this, arguments); }
            },
            "copyDocumentFinish": {
              "value": function () { return this.copy_document_finish.apply(this, arguments); }
            },
            "finishUpload": {
              "value": function () { return this.finish_upload.apply(this, arguments); }
            },
            "queryDocuments": {
              "value": function () { return this.query_documents.apply(this, arguments); }
            },
            "queryDocumentsAsync": {
              "value": function () { return this.query_documents_async.apply(this, arguments); }
            },
            "removeEntryFromFolder": {
              "value": function () { return this.remove_entry_from_folder.apply(this, arguments); }
            },
            "removeEntryFromFolderAsync": {
              "value": function () { return this.remove_entry_from_folder_async.apply(this, arguments); }
            },
            "removeEntryFromFolderFinish": {
              "value": function () { return this.remove_entry_from_folder_finish.apply(this, arguments); }
            },
            "updateDocument": {
              "value": function () { return this.update_document.apply(this, arguments); }
            },
            "updateDocumentResumable": {
              "value": function () { return this.update_document_resumable.apply(this, arguments); }
            },
            "uploadDocument": {
              "value": function () { return this.upload_document.apply(this, arguments); }
            },
            "uploadDocumentResumable": {
              "value": function () { return this.upload_document_resumable.apply(this, arguments); }
            }
          },
          "static": {
            "getPrimaryAuthorizationDomain": {
              "value": function () { return this.get_primary_authorization_domain.apply(this, arguments); }
            },
            "getSpreadsheetAuthorizationDomain": {
              "value": function () { return this.get_spreadsheet_authorization_domain.apply(this, arguments); }
            },
            "getUploadUri": {
              "value": function () { return this.get_upload_uri.apply(this, arguments); }
            }
          }
        },
        "DocumentsSpreadsheet": {
          "prototype": {
            "getDownloadUri": {
              "value": function () { return this.get_download_uri.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DocumentsText": {
          "prototype": {},
          "static": {}
        },
        "DocumentsUploadQuery": {
          "prototype": {
            "buildUri": {
              "value": function () { return this.build_uri.apply(this, arguments); }
            },
            "getConvert": {
              "value": function () { return this.get_convert.apply(this, arguments); }
            },
            "getFolder": {
              "value": function () { return this.get_folder.apply(this, arguments); }
            },
            "setConvert": {
              "value": function () { return this.set_convert.apply(this, arguments); }
            },
            "setFolder": {
              "value": function () { return this.set_folder.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DownloadStream": {
          "prototype": {
            "getAuthorizationDomain": {
              "value": function () { return this.get_authorization_domain.apply(this, arguments); }
            },
            "getCancellable": {
              "value": function () { return this.get_cancellable.apply(this, arguments); }
            },
            "getContentLength": {
              "value": function () { return this.get_content_length.apply(this, arguments); }
            },
            "getContentType": {
              "value": function () { return this.get_content_type.apply(this, arguments); }
            },
            "getDownloadUri": {
              "value": function () { return this.get_download_uri.apply(this, arguments); }
            },
            "getService": {
              "value": function () { return this.get_service.apply(this, arguments); }
            },
            "authorizationDomain": {
              "get": function () { return this.authorization_domain; },
              "set": function (value) { this.authorization_domain = value; }
            },
            "contentLength": {
              "get": function () { return this.content_length; },
              "set": function (value) { this.content_length = value; }
            },
            "contentType": {
              "get": function () { return this.content_type; },
              "set": function (value) { this.content_type = value; }
            },
            "downloadUri": {
              "get": function () { return this.download_uri; },
              "set": function (value) { this.download_uri = value; }
            }
          },
          "static": {}
        },
        "Entry": {
          "prototype": {
            "addAuthor": {
              "value": function () { return this.add_author.apply(this, arguments); }
            },
            "addCategory": {
              "value": function () { return this.add_category.apply(this, arguments); }
            },
            "addLink": {
              "value": function () { return this.add_link.apply(this, arguments); }
            },
            "getAuthors": {
              "value": function () { return this.get_authors.apply(this, arguments); }
            },
            "getCategories": {
              "value": function () { return this.get_categories.apply(this, arguments); }
            },
            "getContent": {
              "value": function () { return this.get_content.apply(this, arguments); }
            },
            "getContentUri": {
              "value": function () { return this.get_content_uri.apply(this, arguments); }
            },
            "getEtag": {
              "value": function () { return this.get_etag.apply(this, arguments); }
            },
            "getId": {
              "value": function () { return this.get_id.apply(this, arguments); }
            },
            "getPublished": {
              "value": function () { return this.get_published.apply(this, arguments); }
            },
            "getRights": {
              "value": function () { return this.get_rights.apply(this, arguments); }
            },
            "getSummary": {
              "value": function () { return this.get_summary.apply(this, arguments); }
            },
            "getTitle": {
              "value": function () { return this.get_title.apply(this, arguments); }
            },
            "getUpdated": {
              "value": function () { return this.get_updated.apply(this, arguments); }
            },
            "isInserted": {
              "get": function () { return this.is_inserted; },
              "set": function (value) { this.is_inserted = value; }
            },
            "lookUpLink": {
              "value": function () { return this.look_up_link.apply(this, arguments); }
            },
            "lookUpLinks": {
              "value": function () { return this.look_up_links.apply(this, arguments); }
            },
            "removeLink": {
              "value": function () { return this.remove_link.apply(this, arguments); }
            },
            "setContent": {
              "value": function () { return this.set_content.apply(this, arguments); }
            },
            "setContentUri": {
              "value": function () { return this.set_content_uri.apply(this, arguments); }
            },
            "setRights": {
              "value": function () { return this.set_rights.apply(this, arguments); }
            },
            "setSummary": {
              "value": function () { return this.set_summary.apply(this, arguments); }
            },
            "setTitle": {
              "value": function () { return this.set_title.apply(this, arguments); }
            },
            "contentUri": {
              "get": function () { return this.content_uri; },
              "set": function (value) { this.content_uri = value; }
            }
          },
          "static": {}
        },
        "Feed": {
          "prototype": {
            "getAuthors": {
              "value": function () { return this.get_authors.apply(this, arguments); }
            },
            "getCategories": {
              "value": function () { return this.get_categories.apply(this, arguments); }
            },
            "getEntries": {
              "value": function () { return this.get_entries.apply(this, arguments); }
            },
            "getEtag": {
              "value": function () { return this.get_etag.apply(this, arguments); }
            },
            "getGenerator": {
              "value": function () { return this.get_generator.apply(this, arguments); }
            },
            "getIcon": {
              "value": function () { return this.get_icon.apply(this, arguments); }
            },
            "getId": {
              "value": function () { return this.get_id.apply(this, arguments); }
            },
            "getItemsPerPage": {
              "value": function () { return this.get_items_per_page.apply(this, arguments); }
            },
            "getLinks": {
              "value": function () { return this.get_links.apply(this, arguments); }
            },
            "getLogo": {
              "value": function () { return this.get_logo.apply(this, arguments); }
            },
            "getRights": {
              "value": function () { return this.get_rights.apply(this, arguments); }
            },
            "getStartIndex": {
              "value": function () { return this.get_start_index.apply(this, arguments); }
            },
            "getSubtitle": {
              "value": function () { return this.get_subtitle.apply(this, arguments); }
            },
            "getTitle": {
              "value": function () { return this.get_title.apply(this, arguments); }
            },
            "getTotalResults": {
              "value": function () { return this.get_total_results.apply(this, arguments); }
            },
            "getUpdated": {
              "value": function () { return this.get_updated.apply(this, arguments); }
            },
            "lookUpEntry": {
              "value": function () { return this.look_up_entry.apply(this, arguments); }
            },
            "lookUpLink": {
              "value": function () { return this.look_up_link.apply(this, arguments); }
            },
            "itemsPerPage": {
              "get": function () { return this.items_per_page; },
              "set": function (value) { this.items_per_page = value; }
            },
            "startIndex": {
              "get": function () { return this.start_index; },
              "set": function (value) { this.start_index = value; }
            },
            "totalResults": {
              "get": function () { return this.total_results; },
              "set": function (value) { this.total_results = value; }
            }
          },
          "static": {}
        },
        "FreebaseQuery": {
          "prototype": {},
          "static": {}
        },
        "FreebaseResult": {
          "prototype": {
            "dupVariant": {
              "value": function () { return this.dup_variant.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "FreebaseSearchQuery": {
          "prototype": {
            "addFilter": {
              "value": function () { return this.add_filter.apply(this, arguments); }
            },
            "addLocation": {
              "value": function () { return this.add_location.apply(this, arguments); }
            },
            "closeFilter": {
              "value": function () { return this.close_filter.apply(this, arguments); }
            },
            "getLanguage": {
              "value": function () { return this.get_language.apply(this, arguments); }
            },
            "getStemmed": {
              "value": function () { return this.get_stemmed.apply(this, arguments); }
            },
            "openFilter": {
              "value": function () { return this.open_filter.apply(this, arguments); }
            },
            "setLanguage": {
              "value": function () { return this.set_language.apply(this, arguments); }
            },
            "setStemmed": {
              "value": function () { return this.set_stemmed.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "FreebaseSearchResult": {
          "prototype": {
            "getItem": {
              "value": function () { return this.get_item.apply(this, arguments); }
            },
            "getNumItems": {
              "value": function () { return this.get_num_items.apply(this, arguments); }
            },
            "getTotalHits": {
              "value": function () { return this.get_total_hits.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "FreebaseService": {
          "prototype": {
            "getImage": {
              "value": function () { return this.get_image.apply(this, arguments); }
            },
            "getTopic": {
              "value": function () { return this.get_topic.apply(this, arguments); }
            },
            "getTopicAsync": {
              "value": function () { return this.get_topic_async.apply(this, arguments); }
            },
            "queryAsync": {
              "value": function () { return this.query_async.apply(this, arguments); }
            },
            "searchAsync": {
              "value": function () { return this.search_async.apply(this, arguments); }
            },
            "developerKey": {
              "get": function () { return this.developer_key; },
              "set": function (value) { this.developer_key = value; }
            }
          },
          "static": {
            "getPrimaryAuthorizationDomain": {
              "value": function () { return this.get_primary_authorization_domain.apply(this, arguments); }
            }
          }
        },
        "FreebaseTopicQuery": {
          "prototype": {
            "getFilter": {
              "value": function () { return this.get_filter.apply(this, arguments); }
            },
            "getLanguage": {
              "value": function () { return this.get_language.apply(this, arguments); }
            },
            "setFilter": {
              "value": function () { return this.set_filter.apply(this, arguments); }
            },
            "setLanguage": {
              "value": function () { return this.set_language.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "FreebaseTopicResult": {
          "prototype": {
            "dupObject": {
              "value": function () { return this.dup_object.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "GContactCalendar": {
          "prototype": {
            "getLabel": {
              "value": function () { return this.get_label.apply(this, arguments); }
            },
            "getRelationType": {
              "value": function () { return this.get_relation_type.apply(this, arguments); }
            },
            "getUri": {
              "value": function () { return this.get_uri.apply(this, arguments); }
            },
            "isPrimary": {
              "get": function () { return this.is_primary; },
              "set": function (value) { this.is_primary = value; }
            },
            "setIsPrimary": {
              "value": function () { return this.set_is_primary.apply(this, arguments); }
            },
            "setLabel": {
              "value": function () { return this.set_label.apply(this, arguments); }
            },
            "setRelationType": {
              "value": function () { return this.set_relation_type.apply(this, arguments); }
            },
            "setUri": {
              "value": function () { return this.set_uri.apply(this, arguments); }
            },
            "relationType": {
              "get": function () { return this.relation_type; },
              "set": function (value) { this.relation_type = value; }
            }
          },
          "static": {}
        },
        "GContactEvent": {
          "prototype": {
            "getDate": {
              "value": function () { return this.get_date.apply(this, arguments); }
            },
            "getLabel": {
              "value": function () { return this.get_label.apply(this, arguments); }
            },
            "getRelationType": {
              "value": function () { return this.get_relation_type.apply(this, arguments); }
            },
            "setDate": {
              "value": function () { return this.set_date.apply(this, arguments); }
            },
            "setLabel": {
              "value": function () { return this.set_label.apply(this, arguments); }
            },
            "setRelationType": {
              "value": function () { return this.set_relation_type.apply(this, arguments); }
            },
            "relationType": {
              "get": function () { return this.relation_type; },
              "set": function (value) { this.relation_type = value; }
            }
          },
          "static": {}
        },
        "GContactExternalID": {
          "prototype": {
            "getLabel": {
              "value": function () { return this.get_label.apply(this, arguments); }
            },
            "getRelationType": {
              "value": function () { return this.get_relation_type.apply(this, arguments); }
            },
            "getValue": {
              "value": function () { return this.get_value.apply(this, arguments); }
            },
            "setLabel": {
              "value": function () { return this.set_label.apply(this, arguments); }
            },
            "setRelationType": {
              "value": function () { return this.set_relation_type.apply(this, arguments); }
            },
            "setValue": {
              "value": function () { return this.set_value.apply(this, arguments); }
            },
            "relationType": {
              "get": function () { return this.relation_type; },
              "set": function (value) { this.relation_type = value; }
            }
          },
          "static": {}
        },
        "GContactJot": {
          "prototype": {
            "getContent": {
              "value": function () { return this.get_content.apply(this, arguments); }
            },
            "getRelationType": {
              "value": function () { return this.get_relation_type.apply(this, arguments); }
            },
            "setContent": {
              "value": function () { return this.set_content.apply(this, arguments); }
            },
            "setRelationType": {
              "value": function () { return this.set_relation_type.apply(this, arguments); }
            },
            "relationType": {
              "get": function () { return this.relation_type; },
              "set": function (value) { this.relation_type = value; }
            }
          },
          "static": {}
        },
        "GContactLanguage": {
          "prototype": {
            "getCode": {
              "value": function () { return this.get_code.apply(this, arguments); }
            },
            "getLabel": {
              "value": function () { return this.get_label.apply(this, arguments); }
            },
            "setCode": {
              "value": function () { return this.set_code.apply(this, arguments); }
            },
            "setLabel": {
              "value": function () { return this.set_label.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "GContactRelation": {
          "prototype": {
            "getLabel": {
              "value": function () { return this.get_label.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getRelationType": {
              "value": function () { return this.get_relation_type.apply(this, arguments); }
            },
            "setLabel": {
              "value": function () { return this.set_label.apply(this, arguments); }
            },
            "setName": {
              "value": function () { return this.set_name.apply(this, arguments); }
            },
            "setRelationType": {
              "value": function () { return this.set_relation_type.apply(this, arguments); }
            },
            "relationType": {
              "get": function () { return this.relation_type; },
              "set": function (value) { this.relation_type = value; }
            }
          },
          "static": {}
        },
        "GContactWebsite": {
          "prototype": {
            "getLabel": {
              "value": function () { return this.get_label.apply(this, arguments); }
            },
            "getRelationType": {
              "value": function () { return this.get_relation_type.apply(this, arguments); }
            },
            "getUri": {
              "value": function () { return this.get_uri.apply(this, arguments); }
            },
            "isPrimary": {
              "get": function () { return this.is_primary; },
              "set": function (value) { this.is_primary = value; }
            },
            "setIsPrimary": {
              "value": function () { return this.set_is_primary.apply(this, arguments); }
            },
            "setLabel": {
              "value": function () { return this.set_label.apply(this, arguments); }
            },
            "setRelationType": {
              "value": function () { return this.set_relation_type.apply(this, arguments); }
            },
            "setUri": {
              "value": function () { return this.set_uri.apply(this, arguments); }
            },
            "relationType": {
              "get": function () { return this.relation_type; },
              "set": function (value) { this.relation_type = value; }
            }
          },
          "static": {}
        },
        "GDEmailAddress": {
          "prototype": {
            "getAddress": {
              "value": function () { return this.get_address.apply(this, arguments); }
            },
            "getDisplayName": {
              "value": function () { return this.get_display_name.apply(this, arguments); }
            },
            "getLabel": {
              "value": function () { return this.get_label.apply(this, arguments); }
            },
            "getRelationType": {
              "value": function () { return this.get_relation_type.apply(this, arguments); }
            },
            "isPrimary": {
              "get": function () { return this.is_primary; },
              "set": function (value) { this.is_primary = value; }
            },
            "setAddress": {
              "value": function () { return this.set_address.apply(this, arguments); }
            },
            "setDisplayName": {
              "value": function () { return this.set_display_name.apply(this, arguments); }
            },
            "setIsPrimary": {
              "value": function () { return this.set_is_primary.apply(this, arguments); }
            },
            "setLabel": {
              "value": function () { return this.set_label.apply(this, arguments); }
            },
            "setRelationType": {
              "value": function () { return this.set_relation_type.apply(this, arguments); }
            },
            "displayName": {
              "get": function () { return this.display_name; },
              "set": function (value) { this.display_name = value; }
            },
            "relationType": {
              "get": function () { return this.relation_type; },
              "set": function (value) { this.relation_type = value; }
            }
          },
          "static": {}
        },
        "GDIMAddress": {
          "prototype": {
            "getAddress": {
              "value": function () { return this.get_address.apply(this, arguments); }
            },
            "getLabel": {
              "value": function () { return this.get_label.apply(this, arguments); }
            },
            "getProtocol": {
              "value": function () { return this.get_protocol.apply(this, arguments); }
            },
            "getRelationType": {
              "value": function () { return this.get_relation_type.apply(this, arguments); }
            },
            "isPrimary": {
              "get": function () { return this.is_primary; },
              "set": function (value) { this.is_primary = value; }
            },
            "setAddress": {
              "value": function () { return this.set_address.apply(this, arguments); }
            },
            "setIsPrimary": {
              "value": function () { return this.set_is_primary.apply(this, arguments); }
            },
            "setLabel": {
              "value": function () { return this.set_label.apply(this, arguments); }
            },
            "setProtocol": {
              "value": function () { return this.set_protocol.apply(this, arguments); }
            },
            "setRelationType": {
              "value": function () { return this.set_relation_type.apply(this, arguments); }
            },
            "relationType": {
              "get": function () { return this.relation_type; },
              "set": function (value) { this.relation_type = value; }
            }
          },
          "static": {}
        },
        "GDName": {
          "prototype": {
            "getAdditionalName": {
              "value": function () { return this.get_additional_name.apply(this, arguments); }
            },
            "getFamilyName": {
              "value": function () { return this.get_family_name.apply(this, arguments); }
            },
            "getFullName": {
              "value": function () { return this.get_full_name.apply(this, arguments); }
            },
            "getGivenName": {
              "value": function () { return this.get_given_name.apply(this, arguments); }
            },
            "getPrefix": {
              "value": function () { return this.get_prefix.apply(this, arguments); }
            },
            "getSuffix": {
              "value": function () { return this.get_suffix.apply(this, arguments); }
            },
            "setAdditionalName": {
              "value": function () { return this.set_additional_name.apply(this, arguments); }
            },
            "setFamilyName": {
              "value": function () { return this.set_family_name.apply(this, arguments); }
            },
            "setFullName": {
              "value": function () { return this.set_full_name.apply(this, arguments); }
            },
            "setGivenName": {
              "value": function () { return this.set_given_name.apply(this, arguments); }
            },
            "setPrefix": {
              "value": function () { return this.set_prefix.apply(this, arguments); }
            },
            "setSuffix": {
              "value": function () { return this.set_suffix.apply(this, arguments); }
            },
            "additionalName": {
              "get": function () { return this.additional_name; },
              "set": function (value) { this.additional_name = value; }
            },
            "familyName": {
              "get": function () { return this.family_name; },
              "set": function (value) { this.family_name = value; }
            },
            "fullName": {
              "get": function () { return this.full_name; },
              "set": function (value) { this.full_name = value; }
            },
            "givenName": {
              "get": function () { return this.given_name; },
              "set": function (value) { this.given_name = value; }
            }
          },
          "static": {}
        },
        "GDOrganization": {
          "prototype": {
            "getDepartment": {
              "value": function () { return this.get_department.apply(this, arguments); }
            },
            "getJobDescription": {
              "value": function () { return this.get_job_description.apply(this, arguments); }
            },
            "getLabel": {
              "value": function () { return this.get_label.apply(this, arguments); }
            },
            "getLocation": {
              "value": function () { return this.get_location.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getRelationType": {
              "value": function () { return this.get_relation_type.apply(this, arguments); }
            },
            "getSymbol": {
              "value": function () { return this.get_symbol.apply(this, arguments); }
            },
            "getTitle": {
              "value": function () { return this.get_title.apply(this, arguments); }
            },
            "isPrimary": {
              "get": function () { return this.is_primary; },
              "set": function (value) { this.is_primary = value; }
            },
            "setDepartment": {
              "value": function () { return this.set_department.apply(this, arguments); }
            },
            "setIsPrimary": {
              "value": function () { return this.set_is_primary.apply(this, arguments); }
            },
            "setJobDescription": {
              "value": function () { return this.set_job_description.apply(this, arguments); }
            },
            "setLabel": {
              "value": function () { return this.set_label.apply(this, arguments); }
            },
            "setLocation": {
              "value": function () { return this.set_location.apply(this, arguments); }
            },
            "setName": {
              "value": function () { return this.set_name.apply(this, arguments); }
            },
            "setRelationType": {
              "value": function () { return this.set_relation_type.apply(this, arguments); }
            },
            "setSymbol": {
              "value": function () { return this.set_symbol.apply(this, arguments); }
            },
            "setTitle": {
              "value": function () { return this.set_title.apply(this, arguments); }
            },
            "jobDescription": {
              "get": function () { return this.job_description; },
              "set": function (value) { this.job_description = value; }
            },
            "relationType": {
              "get": function () { return this.relation_type; },
              "set": function (value) { this.relation_type = value; }
            }
          },
          "static": {}
        },
        "GDPhoneNumber": {
          "prototype": {
            "getLabel": {
              "value": function () { return this.get_label.apply(this, arguments); }
            },
            "getNumber": {
              "value": function () { return this.get_number.apply(this, arguments); }
            },
            "getRelationType": {
              "value": function () { return this.get_relation_type.apply(this, arguments); }
            },
            "getUri": {
              "value": function () { return this.get_uri.apply(this, arguments); }
            },
            "isPrimary": {
              "get": function () { return this.is_primary; },
              "set": function (value) { this.is_primary = value; }
            },
            "setIsPrimary": {
              "value": function () { return this.set_is_primary.apply(this, arguments); }
            },
            "setLabel": {
              "value": function () { return this.set_label.apply(this, arguments); }
            },
            "setNumber": {
              "value": function () { return this.set_number.apply(this, arguments); }
            },
            "setRelationType": {
              "value": function () { return this.set_relation_type.apply(this, arguments); }
            },
            "setUri": {
              "value": function () { return this.set_uri.apply(this, arguments); }
            },
            "relationType": {
              "get": function () { return this.relation_type; },
              "set": function (value) { this.relation_type = value; }
            }
          },
          "static": {}
        },
        "GDPostalAddress": {
          "prototype": {
            "getAddress": {
              "value": function () { return this.get_address.apply(this, arguments); }
            },
            "getAgent": {
              "value": function () { return this.get_agent.apply(this, arguments); }
            },
            "getCity": {
              "value": function () { return this.get_city.apply(this, arguments); }
            },
            "getCountry": {
              "value": function () { return this.get_country.apply(this, arguments); }
            },
            "getCountryCode": {
              "value": function () { return this.get_country_code.apply(this, arguments); }
            },
            "getHouseName": {
              "value": function () { return this.get_house_name.apply(this, arguments); }
            },
            "getLabel": {
              "value": function () { return this.get_label.apply(this, arguments); }
            },
            "getMailClass": {
              "value": function () { return this.get_mail_class.apply(this, arguments); }
            },
            "getNeighborhood": {
              "value": function () { return this.get_neighborhood.apply(this, arguments); }
            },
            "getPoBox": {
              "value": function () { return this.get_po_box.apply(this, arguments); }
            },
            "getPostcode": {
              "value": function () { return this.get_postcode.apply(this, arguments); }
            },
            "getRegion": {
              "value": function () { return this.get_region.apply(this, arguments); }
            },
            "getRelationType": {
              "value": function () { return this.get_relation_type.apply(this, arguments); }
            },
            "getStreet": {
              "value": function () { return this.get_street.apply(this, arguments); }
            },
            "getSubregion": {
              "value": function () { return this.get_subregion.apply(this, arguments); }
            },
            "getUsage": {
              "value": function () { return this.get_usage.apply(this, arguments); }
            },
            "isPrimary": {
              "get": function () { return this.is_primary; },
              "set": function (value) { this.is_primary = value; }
            },
            "setAddress": {
              "value": function () { return this.set_address.apply(this, arguments); }
            },
            "setAgent": {
              "value": function () { return this.set_agent.apply(this, arguments); }
            },
            "setCity": {
              "value": function () { return this.set_city.apply(this, arguments); }
            },
            "setCountry": {
              "value": function () { return this.set_country.apply(this, arguments); }
            },
            "setHouseName": {
              "value": function () { return this.set_house_name.apply(this, arguments); }
            },
            "setIsPrimary": {
              "value": function () { return this.set_is_primary.apply(this, arguments); }
            },
            "setLabel": {
              "value": function () { return this.set_label.apply(this, arguments); }
            },
            "setMailClass": {
              "value": function () { return this.set_mail_class.apply(this, arguments); }
            },
            "setNeighborhood": {
              "value": function () { return this.set_neighborhood.apply(this, arguments); }
            },
            "setPoBox": {
              "value": function () { return this.set_po_box.apply(this, arguments); }
            },
            "setPostcode": {
              "value": function () { return this.set_postcode.apply(this, arguments); }
            },
            "setRegion": {
              "value": function () { return this.set_region.apply(this, arguments); }
            },
            "setRelationType": {
              "value": function () { return this.set_relation_type.apply(this, arguments); }
            },
            "setStreet": {
              "value": function () { return this.set_street.apply(this, arguments); }
            },
            "setSubregion": {
              "value": function () { return this.set_subregion.apply(this, arguments); }
            },
            "setUsage": {
              "value": function () { return this.set_usage.apply(this, arguments); }
            },
            "countryCode": {
              "get": function () { return this.country_code; },
              "set": function (value) { this.country_code = value; }
            },
            "houseName": {
              "get": function () { return this.house_name; },
              "set": function (value) { this.house_name = value; }
            },
            "mailClass": {
              "get": function () { return this.mail_class; },
              "set": function (value) { this.mail_class = value; }
            },
            "poBox": {
              "get": function () { return this.po_box; },
              "set": function (value) { this.po_box = value; }
            },
            "relationType": {
              "get": function () { return this.relation_type; },
              "set": function (value) { this.relation_type = value; }
            }
          },
          "static": {}
        },
        "GDReminder": {
          "prototype": {
            "getAbsoluteTime": {
              "value": function () { return this.get_absolute_time.apply(this, arguments); }
            },
            "getMethod": {
              "value": function () { return this.get_method.apply(this, arguments); }
            },
            "getRelativeTime": {
              "value": function () { return this.get_relative_time.apply(this, arguments); }
            },
            "isAbsoluteTime": {
              "get": function () { return this.is_absolute_time; },
              "set": function (value) { this.is_absolute_time = value; }
            },
            "setAbsoluteTime": {
              "value": function () { return this.set_absolute_time.apply(this, arguments); }
            },
            "setMethod": {
              "value": function () { return this.set_method.apply(this, arguments); }
            },
            "setRelativeTime": {
              "value": function () { return this.set_relative_time.apply(this, arguments); }
            },
            "absoluteTime": {
              "get": function () { return this.absolute_time; },
              "set": function (value) { this.absolute_time = value; }
            },
            "relativeTime": {
              "get": function () { return this.relative_time; },
              "set": function (value) { this.relative_time = value; }
            }
          },
          "static": {}
        },
        "GDWhen": {
          "prototype": {
            "addReminder": {
              "value": function () { return this.add_reminder.apply(this, arguments); }
            },
            "getEndTime": {
              "value": function () { return this.get_end_time.apply(this, arguments); }
            },
            "getReminders": {
              "value": function () { return this.get_reminders.apply(this, arguments); }
            },
            "getStartTime": {
              "value": function () { return this.get_start_time.apply(this, arguments); }
            },
            "getValueString": {
              "value": function () { return this.get_value_string.apply(this, arguments); }
            },
            "isDate": {
              "get": function () { return this.is_date; },
              "set": function (value) { this.is_date = value; }
            },
            "setEndTime": {
              "value": function () { return this.set_end_time.apply(this, arguments); }
            },
            "setIsDate": {
              "value": function () { return this.set_is_date.apply(this, arguments); }
            },
            "setStartTime": {
              "value": function () { return this.set_start_time.apply(this, arguments); }
            },
            "setValueString": {
              "value": function () { return this.set_value_string.apply(this, arguments); }
            },
            "endTime": {
              "get": function () { return this.end_time; },
              "set": function (value) { this.end_time = value; }
            },
            "startTime": {
              "get": function () { return this.start_time; },
              "set": function (value) { this.start_time = value; }
            },
            "valueString": {
              "get": function () { return this.value_string; },
              "set": function (value) { this.value_string = value; }
            }
          },
          "static": {}
        },
        "GDWhere": {
          "prototype": {
            "getLabel": {
              "value": function () { return this.get_label.apply(this, arguments); }
            },
            "getRelationType": {
              "value": function () { return this.get_relation_type.apply(this, arguments); }
            },
            "getValueString": {
              "value": function () { return this.get_value_string.apply(this, arguments); }
            },
            "setLabel": {
              "value": function () { return this.set_label.apply(this, arguments); }
            },
            "setRelationType": {
              "value": function () { return this.set_relation_type.apply(this, arguments); }
            },
            "setValueString": {
              "value": function () { return this.set_value_string.apply(this, arguments); }
            },
            "relationType": {
              "get": function () { return this.relation_type; },
              "set": function (value) { this.relation_type = value; }
            },
            "valueString": {
              "get": function () { return this.value_string; },
              "set": function (value) { this.value_string = value; }
            }
          },
          "static": {}
        },
        "GDWho": {
          "prototype": {
            "getEmailAddress": {
              "value": function () { return this.get_email_address.apply(this, arguments); }
            },
            "getRelationType": {
              "value": function () { return this.get_relation_type.apply(this, arguments); }
            },
            "getValueString": {
              "value": function () { return this.get_value_string.apply(this, arguments); }
            },
            "setEmailAddress": {
              "value": function () { return this.set_email_address.apply(this, arguments); }
            },
            "setRelationType": {
              "value": function () { return this.set_relation_type.apply(this, arguments); }
            },
            "setValueString": {
              "value": function () { return this.set_value_string.apply(this, arguments); }
            },
            "emailAddress": {
              "get": function () { return this.email_address; },
              "set": function (value) { this.email_address = value; }
            },
            "relationType": {
              "get": function () { return this.relation_type; },
              "set": function (value) { this.relation_type = value; }
            },
            "valueString": {
              "get": function () { return this.value_string; },
              "set": function (value) { this.value_string = value; }
            }
          },
          "static": {}
        },
        "Generator": {
          "prototype": {
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getUri": {
              "value": function () { return this.get_uri.apply(this, arguments); }
            },
            "getVersion": {
              "value": function () { return this.get_version.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "GoaAuthorizer": {
          "prototype": {
            "getGoaObject": {
              "value": function () { return this.get_goa_object.apply(this, arguments); }
            },
            "goaObject": {
              "get": function () { return this.goa_object; },
              "set": function (value) { this.goa_object = value; }
            }
          },
          "static": {}
        },
        "Link": {
          "prototype": {
            "getContentType": {
              "value": function () { return this.get_content_type.apply(this, arguments); }
            },
            "getLanguage": {
              "value": function () { return this.get_language.apply(this, arguments); }
            },
            "getLength": {
              "value": function () { return this.get_length.apply(this, arguments); }
            },
            "getRelationType": {
              "value": function () { return this.get_relation_type.apply(this, arguments); }
            },
            "getTitle": {
              "value": function () { return this.get_title.apply(this, arguments); }
            },
            "getUri": {
              "value": function () { return this.get_uri.apply(this, arguments); }
            },
            "setContentType": {
              "value": function () { return this.set_content_type.apply(this, arguments); }
            },
            "setLanguage": {
              "value": function () { return this.set_language.apply(this, arguments); }
            },
            "setLength": {
              "value": function () { return this.set_length.apply(this, arguments); }
            },
            "setRelationType": {
              "value": function () { return this.set_relation_type.apply(this, arguments); }
            },
            "setTitle": {
              "value": function () { return this.set_title.apply(this, arguments); }
            },
            "setUri": {
              "value": function () { return this.set_uri.apply(this, arguments); }
            },
            "contentType": {
              "get": function () { return this.content_type; },
              "set": function (value) { this.content_type = value; }
            },
            "relationType": {
              "get": function () { return this.relation_type; },
              "set": function (value) { this.relation_type = value; }
            }
          },
          "static": {}
        },
        "MediaCategory": {
          "prototype": {
            "getCategory": {
              "value": function () { return this.get_category.apply(this, arguments); }
            },
            "getLabel": {
              "value": function () { return this.get_label.apply(this, arguments); }
            },
            "getScheme": {
              "value": function () { return this.get_scheme.apply(this, arguments); }
            },
            "setCategory": {
              "value": function () { return this.set_category.apply(this, arguments); }
            },
            "setLabel": {
              "value": function () { return this.set_label.apply(this, arguments); }
            },
            "setScheme": {
              "value": function () { return this.set_scheme.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "MediaContent": {
          "prototype": {
            "getContentType": {
              "value": function () { return this.get_content_type.apply(this, arguments); }
            },
            "getDuration": {
              "value": function () { return this.get_duration.apply(this, arguments); }
            },
            "getExpression": {
              "value": function () { return this.get_expression.apply(this, arguments); }
            },
            "getFilesize": {
              "value": function () { return this.get_filesize.apply(this, arguments); }
            },
            "getHeight": {
              "value": function () { return this.get_height.apply(this, arguments); }
            },
            "getMedium": {
              "value": function () { return this.get_medium.apply(this, arguments); }
            },
            "getUri": {
              "value": function () { return this.get_uri.apply(this, arguments); }
            },
            "getWidth": {
              "value": function () { return this.get_width.apply(this, arguments); }
            },
            "isDefault": {
              "get": function () { return this.is_default; },
              "set": function (value) { this.is_default = value; }
            },
            "contentType": {
              "get": function () { return this.content_type; },
              "set": function (value) { this.content_type = value; }
            }
          },
          "static": {}
        },
        "MediaCredit": {
          "prototype": {
            "getCredit": {
              "value": function () { return this.get_credit.apply(this, arguments); }
            },
            "getRole": {
              "value": function () { return this.get_role.apply(this, arguments); }
            },
            "getScheme": {
              "value": function () { return this.get_scheme.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "MediaThumbnail": {
          "prototype": {
            "getHeight": {
              "value": function () { return this.get_height.apply(this, arguments); }
            },
            "getTime": {
              "value": function () { return this.get_time.apply(this, arguments); }
            },
            "getUri": {
              "value": function () { return this.get_uri.apply(this, arguments); }
            },
            "getWidth": {
              "value": function () { return this.get_width.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "OAuth1Authorizer": {
          "prototype": {
            "getApplicationName": {
              "value": function () { return this.get_application_name.apply(this, arguments); }
            },
            "getLocale": {
              "value": function () { return this.get_locale.apply(this, arguments); }
            },
            "getProxyResolver": {
              "value": function () { return this.get_proxy_resolver.apply(this, arguments); }
            },
            "getProxyUri": {
              "value": function () { return this.get_proxy_uri.apply(this, arguments); }
            },
            "getTimeout": {
              "value": function () { return this.get_timeout.apply(this, arguments); }
            },
            "requestAuthenticationUri": {
              "value": function () { return this.request_authentication_uri.apply(this, arguments); }
            },
            "requestAuthenticationUriAsync": {
              "value": function () { return this.request_authentication_uri_async.apply(this, arguments); }
            },
            "requestAuthenticationUriFinish": {
              "value": function () { return this.request_authentication_uri_finish.apply(this, arguments); }
            },
            "requestAuthorization": {
              "value": function () { return this.request_authorization.apply(this, arguments); }
            },
            "requestAuthorizationAsync": {
              "value": function () { return this.request_authorization_async.apply(this, arguments); }
            },
            "requestAuthorizationFinish": {
              "value": function () { return this.request_authorization_finish.apply(this, arguments); }
            },
            "setLocale": {
              "value": function () { return this.set_locale.apply(this, arguments); }
            },
            "setProxyResolver": {
              "value": function () { return this.set_proxy_resolver.apply(this, arguments); }
            },
            "setProxyUri": {
              "value": function () { return this.set_proxy_uri.apply(this, arguments); }
            },
            "setTimeout": {
              "value": function () { return this.set_timeout.apply(this, arguments); }
            },
            "applicationName": {
              "get": function () { return this.application_name; },
              "set": function (value) { this.application_name = value; }
            },
            "proxyResolver": {
              "get": function () { return this.proxy_resolver; },
              "set": function (value) { this.proxy_resolver = value; }
            },
            "proxyUri": {
              "get": function () { return this.proxy_uri; },
              "set": function (value) { this.proxy_uri = value; }
            }
          },
          "static": {}
        },
        "OAuth2Authorizer": {
          "prototype": {
            "buildAuthenticationUri": {
              "value": function () { return this.build_authentication_uri.apply(this, arguments); }
            },
            "dupRefreshToken": {
              "value": function () { return this.dup_refresh_token.apply(this, arguments); }
            },
            "getClientId": {
              "value": function () { return this.get_client_id.apply(this, arguments); }
            },
            "getClientSecret": {
              "value": function () { return this.get_client_secret.apply(this, arguments); }
            },
            "getLocale": {
              "value": function () { return this.get_locale.apply(this, arguments); }
            },
            "getProxyResolver": {
              "value": function () { return this.get_proxy_resolver.apply(this, arguments); }
            },
            "getRedirectUri": {
              "value": function () { return this.get_redirect_uri.apply(this, arguments); }
            },
            "getTimeout": {
              "value": function () { return this.get_timeout.apply(this, arguments); }
            },
            "requestAuthorization": {
              "value": function () { return this.request_authorization.apply(this, arguments); }
            },
            "requestAuthorizationAsync": {
              "value": function () { return this.request_authorization_async.apply(this, arguments); }
            },
            "requestAuthorizationFinish": {
              "value": function () { return this.request_authorization_finish.apply(this, arguments); }
            },
            "setLocale": {
              "value": function () { return this.set_locale.apply(this, arguments); }
            },
            "setProxyResolver": {
              "value": function () { return this.set_proxy_resolver.apply(this, arguments); }
            },
            "setRefreshToken": {
              "value": function () { return this.set_refresh_token.apply(this, arguments); }
            },
            "setTimeout": {
              "value": function () { return this.set_timeout.apply(this, arguments); }
            },
            "clientId": {
              "get": function () { return this.client_id; },
              "set": function (value) { this.client_id = value; }
            },
            "clientSecret": {
              "get": function () { return this.client_secret; },
              "set": function (value) { this.client_secret = value; }
            },
            "proxyResolver": {
              "get": function () { return this.proxy_resolver; },
              "set": function (value) { this.proxy_resolver = value; }
            },
            "redirectUri": {
              "get": function () { return this.redirect_uri; },
              "set": function (value) { this.redirect_uri = value; }
            },
            "refreshToken": {
              "get": function () { return this.refresh_token; },
              "set": function (value) { this.refresh_token = value; }
            }
          },
          "static": {}
        },
        "Parsable": {
          "prototype": {
            "getJson": {
              "value": function () { return this.get_json.apply(this, arguments); }
            },
            "getXml": {
              "value": function () { return this.get_xml.apply(this, arguments); }
            },
            "constructedFromXml": {
              "get": function () { return this.constructed_from_xml; },
              "set": function (value) { this.constructed_from_xml = value; }
            }
          },
          "static": {}
        },
        "PicasaWebAlbum": {
          "prototype": {
            "getBytesUsed": {
              "value": function () { return this.get_bytes_used.apply(this, arguments); }
            },
            "getCommentCount": {
              "value": function () { return this.get_comment_count.apply(this, arguments); }
            },
            "getContents": {
              "value": function () { return this.get_contents.apply(this, arguments); }
            },
            "getCoordinates": {
              "value": function () { return this.get_coordinates.apply(this, arguments); }
            },
            "getEdited": {
              "value": function () { return this.get_edited.apply(this, arguments); }
            },
            "getId": {
              "value": function () { return this.get_id.apply(this, arguments); }
            },
            "getLocation": {
              "value": function () { return this.get_location.apply(this, arguments); }
            },
            "getNickname": {
              "value": function () { return this.get_nickname.apply(this, arguments); }
            },
            "getNumPhotos": {
              "value": function () { return this.get_num_photos.apply(this, arguments); }
            },
            "getNumPhotosRemaining": {
              "value": function () { return this.get_num_photos_remaining.apply(this, arguments); }
            },
            "getTags": {
              "value": function () { return this.get_tags.apply(this, arguments); }
            },
            "getThumbnails": {
              "value": function () { return this.get_thumbnails.apply(this, arguments); }
            },
            "getTimestamp": {
              "value": function () { return this.get_timestamp.apply(this, arguments); }
            },
            "getUser": {
              "value": function () { return this.get_user.apply(this, arguments); }
            },
            "getVisibility": {
              "value": function () { return this.get_visibility.apply(this, arguments); }
            },
            "isCommentingEnabled": {
              "get": function () { return this.is_commenting_enabled; },
              "set": function (value) { this.is_commenting_enabled = value; }
            },
            "setCoordinates": {
              "value": function () { return this.set_coordinates.apply(this, arguments); }
            },
            "setIsCommentingEnabled": {
              "value": function () { return this.set_is_commenting_enabled.apply(this, arguments); }
            },
            "setLocation": {
              "value": function () { return this.set_location.apply(this, arguments); }
            },
            "setTags": {
              "value": function () { return this.set_tags.apply(this, arguments); }
            },
            "setTimestamp": {
              "value": function () { return this.set_timestamp.apply(this, arguments); }
            },
            "setVisibility": {
              "value": function () { return this.set_visibility.apply(this, arguments); }
            },
            "albumId": {
              "get": function () { return this.album_id; },
              "set": function (value) { this.album_id = value; }
            },
            "bytesUsed": {
              "get": function () { return this.bytes_used; },
              "set": function (value) { this.bytes_used = value; }
            },
            "commentCount": {
              "get": function () { return this.comment_count; },
              "set": function (value) { this.comment_count = value; }
            },
            "numPhotos": {
              "get": function () { return this.num_photos; },
              "set": function (value) { this.num_photos = value; }
            },
            "numPhotosRemaining": {
              "get": function () { return this.num_photos_remaining; },
              "set": function (value) { this.num_photos_remaining = value; }
            }
          },
          "static": {}
        },
        "PicasaWebComment": {
          "prototype": {},
          "static": {}
        },
        "PicasaWebFeed": {
          "prototype": {},
          "static": {}
        },
        "PicasaWebFile": {
          "prototype": {
            "getAlbumId": {
              "value": function () { return this.get_album_id.apply(this, arguments); }
            },
            "getCaption": {
              "value": function () { return this.get_caption.apply(this, arguments); }
            },
            "getChecksum": {
              "value": function () { return this.get_checksum.apply(this, arguments); }
            },
            "getCommentCount": {
              "value": function () { return this.get_comment_count.apply(this, arguments); }
            },
            "getContents": {
              "value": function () { return this.get_contents.apply(this, arguments); }
            },
            "getCoordinates": {
              "value": function () { return this.get_coordinates.apply(this, arguments); }
            },
            "getCredit": {
              "value": function () { return this.get_credit.apply(this, arguments); }
            },
            "getDistance": {
              "value": function () { return this.get_distance.apply(this, arguments); }
            },
            "getEdited": {
              "value": function () { return this.get_edited.apply(this, arguments); }
            },
            "getExposure": {
              "value": function () { return this.get_exposure.apply(this, arguments); }
            },
            "getFlash": {
              "value": function () { return this.get_flash.apply(this, arguments); }
            },
            "getFocalLength": {
              "value": function () { return this.get_focal_length.apply(this, arguments); }
            },
            "getFstop": {
              "value": function () { return this.get_fstop.apply(this, arguments); }
            },
            "getHeight": {
              "value": function () { return this.get_height.apply(this, arguments); }
            },
            "getId": {
              "value": function () { return this.get_id.apply(this, arguments); }
            },
            "getImageUniqueId": {
              "value": function () { return this.get_image_unique_id.apply(this, arguments); }
            },
            "getIso": {
              "value": function () { return this.get_iso.apply(this, arguments); }
            },
            "getMake": {
              "value": function () { return this.get_make.apply(this, arguments); }
            },
            "getModel": {
              "value": function () { return this.get_model.apply(this, arguments); }
            },
            "getRotation": {
              "value": function () { return this.get_rotation.apply(this, arguments); }
            },
            "getSize": {
              "value": function () { return this.get_size.apply(this, arguments); }
            },
            "getTags": {
              "value": function () { return this.get_tags.apply(this, arguments); }
            },
            "getThumbnails": {
              "value": function () { return this.get_thumbnails.apply(this, arguments); }
            },
            "getTimestamp": {
              "value": function () { return this.get_timestamp.apply(this, arguments); }
            },
            "getVersion": {
              "value": function () { return this.get_version.apply(this, arguments); }
            },
            "getVideoStatus": {
              "value": function () { return this.get_video_status.apply(this, arguments); }
            },
            "getWidth": {
              "value": function () { return this.get_width.apply(this, arguments); }
            },
            "isCommentingEnabled": {
              "get": function () { return this.is_commenting_enabled; },
              "set": function (value) { this.is_commenting_enabled = value; }
            },
            "setAlbumId": {
              "value": function () { return this.set_album_id.apply(this, arguments); }
            },
            "setCaption": {
              "value": function () { return this.set_caption.apply(this, arguments); }
            },
            "setChecksum": {
              "value": function () { return this.set_checksum.apply(this, arguments); }
            },
            "setCoordinates": {
              "value": function () { return this.set_coordinates.apply(this, arguments); }
            },
            "setIsCommentingEnabled": {
              "value": function () { return this.set_is_commenting_enabled.apply(this, arguments); }
            },
            "setRotation": {
              "value": function () { return this.set_rotation.apply(this, arguments); }
            },
            "setTags": {
              "value": function () { return this.set_tags.apply(this, arguments); }
            },
            "setTimestamp": {
              "value": function () { return this.set_timestamp.apply(this, arguments); }
            },
            "albumId": {
              "get": function () { return this.album_id; },
              "set": function (value) { this.album_id = value; }
            },
            "commentCount": {
              "get": function () { return this.comment_count; },
              "set": function (value) { this.comment_count = value; }
            },
            "fileId": {
              "get": function () { return this.file_id; },
              "set": function (value) { this.file_id = value; }
            },
            "focalLength": {
              "get": function () { return this.focal_length; },
              "set": function (value) { this.focal_length = value; }
            },
            "imageUniqueId": {
              "get": function () { return this.image_unique_id; },
              "set": function (value) { this.image_unique_id = value; }
            },
            "videoStatus": {
              "get": function () { return this.video_status; },
              "set": function (value) { this.video_status = value; }
            }
          },
          "static": {}
        },
        "PicasaWebQuery": {
          "prototype": {
            "getBoundingBox": {
              "value": function () { return this.get_bounding_box.apply(this, arguments); }
            },
            "getImageSize": {
              "value": function () { return this.get_image_size.apply(this, arguments); }
            },
            "getLocation": {
              "value": function () { return this.get_location.apply(this, arguments); }
            },
            "getTag": {
              "value": function () { return this.get_tag.apply(this, arguments); }
            },
            "getThumbnailSize": {
              "value": function () { return this.get_thumbnail_size.apply(this, arguments); }
            },
            "getVisibility": {
              "value": function () { return this.get_visibility.apply(this, arguments); }
            },
            "setBoundingBox": {
              "value": function () { return this.set_bounding_box.apply(this, arguments); }
            },
            "setImageSize": {
              "value": function () { return this.set_image_size.apply(this, arguments); }
            },
            "setLocation": {
              "value": function () { return this.set_location.apply(this, arguments); }
            },
            "setTag": {
              "value": function () { return this.set_tag.apply(this, arguments); }
            },
            "setThumbnailSize": {
              "value": function () { return this.set_thumbnail_size.apply(this, arguments); }
            },
            "setVisibility": {
              "value": function () { return this.set_visibility.apply(this, arguments); }
            },
            "imageSize": {
              "get": function () { return this.image_size; },
              "set": function (value) { this.image_size = value; }
            },
            "thumbnailSize": {
              "get": function () { return this.thumbnail_size; },
              "set": function (value) { this.thumbnail_size = value; }
            }
          },
          "static": {}
        },
        "PicasaWebService": {
          "prototype": {
            "finishFileUpload": {
              "value": function () { return this.finish_file_upload.apply(this, arguments); }
            },
            "getUser": {
              "value": function () { return this.get_user.apply(this, arguments); }
            },
            "getUserAsync": {
              "value": function () { return this.get_user_async.apply(this, arguments); }
            },
            "getUserFinish": {
              "value": function () { return this.get_user_finish.apply(this, arguments); }
            },
            "insertAlbum": {
              "value": function () { return this.insert_album.apply(this, arguments); }
            },
            "insertAlbumAsync": {
              "value": function () { return this.insert_album_async.apply(this, arguments); }
            },
            "queryAllAlbums": {
              "value": function () { return this.query_all_albums.apply(this, arguments); }
            },
            "queryAllAlbumsAsync": {
              "value": function () { return this.query_all_albums_async.apply(this, arguments); }
            },
            "queryFiles": {
              "value": function () { return this.query_files.apply(this, arguments); }
            },
            "queryFilesAsync": {
              "value": function () { return this.query_files_async.apply(this, arguments); }
            },
            "uploadFile": {
              "value": function () { return this.upload_file.apply(this, arguments); }
            }
          },
          "static": {
            "getPrimaryAuthorizationDomain": {
              "value": function () { return this.get_primary_authorization_domain.apply(this, arguments); }
            }
          }
        },
        "PicasaWebUser": {
          "prototype": {
            "getMaxPhotosPerAlbum": {
              "value": function () { return this.get_max_photos_per_album.apply(this, arguments); }
            },
            "getNickname": {
              "value": function () { return this.get_nickname.apply(this, arguments); }
            },
            "getQuotaCurrent": {
              "value": function () { return this.get_quota_current.apply(this, arguments); }
            },
            "getQuotaLimit": {
              "value": function () { return this.get_quota_limit.apply(this, arguments); }
            },
            "getThumbnailUri": {
              "value": function () { return this.get_thumbnail_uri.apply(this, arguments); }
            },
            "getUser": {
              "value": function () { return this.get_user.apply(this, arguments); }
            },
            "maxPhotosPerAlbum": {
              "get": function () { return this.max_photos_per_album; },
              "set": function (value) { this.max_photos_per_album = value; }
            },
            "quotaCurrent": {
              "get": function () { return this.quota_current; },
              "set": function (value) { this.quota_current = value; }
            },
            "quotaLimit": {
              "get": function () { return this.quota_limit; },
              "set": function (value) { this.quota_limit = value; }
            },
            "thumbnailUri": {
              "get": function () { return this.thumbnail_uri; },
              "set": function (value) { this.thumbnail_uri = value; }
            }
          },
          "static": {}
        },
        "Query": {
          "prototype": {
            "getAuthor": {
              "value": function () { return this.get_author.apply(this, arguments); }
            },
            "getCategories": {
              "value": function () { return this.get_categories.apply(this, arguments); }
            },
            "getEtag": {
              "value": function () { return this.get_etag.apply(this, arguments); }
            },
            "getMaxResults": {
              "value": function () { return this.get_max_results.apply(this, arguments); }
            },
            "getPublishedMax": {
              "value": function () { return this.get_published_max.apply(this, arguments); }
            },
            "getPublishedMin": {
              "value": function () { return this.get_published_min.apply(this, arguments); }
            },
            "getQ": {
              "value": function () { return this.get_q.apply(this, arguments); }
            },
            "getQueryUri": {
              "value": function () { return this.get_query_uri.apply(this, arguments); }
            },
            "getStartIndex": {
              "value": function () { return this.get_start_index.apply(this, arguments); }
            },
            "getUpdatedMax": {
              "value": function () { return this.get_updated_max.apply(this, arguments); }
            },
            "getUpdatedMin": {
              "value": function () { return this.get_updated_min.apply(this, arguments); }
            },
            "isStrict": {
              "get": function () { return this.is_strict; },
              "set": function (value) { this.is_strict = value; }
            },
            "nextPage": {
              "value": function () { return this.next_page.apply(this, arguments); }
            },
            "previousPage": {
              "value": function () { return this.previous_page.apply(this, arguments); }
            },
            "setAuthor": {
              "value": function () { return this.set_author.apply(this, arguments); }
            },
            "setCategories": {
              "value": function () { return this.set_categories.apply(this, arguments); }
            },
            "setEtag": {
              "value": function () { return this.set_etag.apply(this, arguments); }
            },
            "setIsStrict": {
              "value": function () { return this.set_is_strict.apply(this, arguments); }
            },
            "setMaxResults": {
              "value": function () { return this.set_max_results.apply(this, arguments); }
            },
            "setPublishedMax": {
              "value": function () { return this.set_published_max.apply(this, arguments); }
            },
            "setPublishedMin": {
              "value": function () { return this.set_published_min.apply(this, arguments); }
            },
            "setQ": {
              "value": function () { return this.set_q.apply(this, arguments); }
            },
            "setStartIndex": {
              "value": function () { return this.set_start_index.apply(this, arguments); }
            },
            "setUpdatedMax": {
              "value": function () { return this.set_updated_max.apply(this, arguments); }
            },
            "setUpdatedMin": {
              "value": function () { return this.set_updated_min.apply(this, arguments); }
            },
            "maxResults": {
              "get": function () { return this.max_results; },
              "set": function (value) { this.max_results = value; }
            },
            "publishedMax": {
              "get": function () { return this.published_max; },
              "set": function (value) { this.published_max = value; }
            },
            "publishedMin": {
              "get": function () { return this.published_min; },
              "set": function (value) { this.published_min = value; }
            },
            "startIndex": {
              "get": function () { return this.start_index; },
              "set": function (value) { this.start_index = value; }
            },
            "updatedMax": {
              "get": function () { return this.updated_max; },
              "set": function (value) { this.updated_max = value; }
            },
            "updatedMin": {
              "get": function () { return this.updated_min; },
              "set": function (value) { this.updated_min = value; }
            }
          },
          "static": {}
        },
        "Service": {
          "prototype": {
            "deleteEntry": {
              "value": function () { return this.delete_entry.apply(this, arguments); }
            },
            "deleteEntryAsync": {
              "value": function () { return this.delete_entry_async.apply(this, arguments); }
            },
            "deleteEntryFinish": {
              "value": function () { return this.delete_entry_finish.apply(this, arguments); }
            },
            "getAuthorizer": {
              "value": function () { return this.get_authorizer.apply(this, arguments); }
            },
            "getLocale": {
              "value": function () { return this.get_locale.apply(this, arguments); }
            },
            "getProxyResolver": {
              "value": function () { return this.get_proxy_resolver.apply(this, arguments); }
            },
            "getProxyUri": {
              "value": function () { return this.get_proxy_uri.apply(this, arguments); }
            },
            "getTimeout": {
              "value": function () { return this.get_timeout.apply(this, arguments); }
            },
            "insertEntry": {
              "value": function () { return this.insert_entry.apply(this, arguments); }
            },
            "insertEntryAsync": {
              "value": function () { return this.insert_entry_async.apply(this, arguments); }
            },
            "insertEntryFinish": {
              "value": function () { return this.insert_entry_finish.apply(this, arguments); }
            },
            "isAuthorized": {
              "value": function () { return this.is_authorized.apply(this, arguments); }
            },
            "queryAsync": {
              "value": function () { return this.query_async.apply(this, arguments); }
            },
            "queryFinish": {
              "value": function () { return this.query_finish.apply(this, arguments); }
            },
            "querySingleEntry": {
              "value": function () { return this.query_single_entry.apply(this, arguments); }
            },
            "querySingleEntryAsync": {
              "value": function () { return this.query_single_entry_async.apply(this, arguments); }
            },
            "querySingleEntryFinish": {
              "value": function () { return this.query_single_entry_finish.apply(this, arguments); }
            },
            "setAuthorizer": {
              "value": function () { return this.set_authorizer.apply(this, arguments); }
            },
            "setLocale": {
              "value": function () { return this.set_locale.apply(this, arguments); }
            },
            "setProxyResolver": {
              "value": function () { return this.set_proxy_resolver.apply(this, arguments); }
            },
            "setProxyUri": {
              "value": function () { return this.set_proxy_uri.apply(this, arguments); }
            },
            "setTimeout": {
              "value": function () { return this.set_timeout.apply(this, arguments); }
            },
            "updateEntry": {
              "value": function () { return this.update_entry.apply(this, arguments); }
            },
            "updateEntryAsync": {
              "value": function () { return this.update_entry_async.apply(this, arguments); }
            },
            "updateEntryFinish": {
              "value": function () { return this.update_entry_finish.apply(this, arguments); }
            },
            "proxyResolver": {
              "get": function () { return this.proxy_resolver; },
              "set": function (value) { this.proxy_resolver = value; }
            },
            "proxyUri": {
              "get": function () { return this.proxy_uri; },
              "set": function (value) { this.proxy_uri = value; }
            }
          },
          "static": {
            "getAuthorizationDomains": {
              "value": function () { return this.get_authorization_domains.apply(this, arguments); }
            }
          }
        },
        "TasksQuery": {
          "prototype": {
            "getCompletedMax": {
              "value": function () { return this.get_completed_max.apply(this, arguments); }
            },
            "getCompletedMin": {
              "value": function () { return this.get_completed_min.apply(this, arguments); }
            },
            "getDueMax": {
              "value": function () { return this.get_due_max.apply(this, arguments); }
            },
            "getDueMin": {
              "value": function () { return this.get_due_min.apply(this, arguments); }
            },
            "getShowCompleted": {
              "value": function () { return this.get_show_completed.apply(this, arguments); }
            },
            "getShowDeleted": {
              "value": function () { return this.get_show_deleted.apply(this, arguments); }
            },
            "getShowHidden": {
              "value": function () { return this.get_show_hidden.apply(this, arguments); }
            },
            "setCompletedMax": {
              "value": function () { return this.set_completed_max.apply(this, arguments); }
            },
            "setCompletedMin": {
              "value": function () { return this.set_completed_min.apply(this, arguments); }
            },
            "setDueMax": {
              "value": function () { return this.set_due_max.apply(this, arguments); }
            },
            "setDueMin": {
              "value": function () { return this.set_due_min.apply(this, arguments); }
            },
            "setShowCompleted": {
              "value": function () { return this.set_show_completed.apply(this, arguments); }
            },
            "setShowDeleted": {
              "value": function () { return this.set_show_deleted.apply(this, arguments); }
            },
            "setShowHidden": {
              "value": function () { return this.set_show_hidden.apply(this, arguments); }
            },
            "completedMax": {
              "get": function () { return this.completed_max; },
              "set": function (value) { this.completed_max = value; }
            },
            "completedMin": {
              "get": function () { return this.completed_min; },
              "set": function (value) { this.completed_min = value; }
            },
            "dueMax": {
              "get": function () { return this.due_max; },
              "set": function (value) { this.due_max = value; }
            },
            "dueMin": {
              "get": function () { return this.due_min; },
              "set": function (value) { this.due_min = value; }
            },
            "showCompleted": {
              "get": function () { return this.show_completed; },
              "set": function (value) { this.show_completed = value; }
            },
            "showDeleted": {
              "get": function () { return this.show_deleted; },
              "set": function (value) { this.show_deleted = value; }
            },
            "showHidden": {
              "get": function () { return this.show_hidden; },
              "set": function (value) { this.show_hidden = value; }
            }
          },
          "static": {}
        },
        "TasksService": {
          "prototype": {
            "deleteTask": {
              "value": function () { return this.delete_task.apply(this, arguments); }
            },
            "deleteTaskAsync": {
              "value": function () { return this.delete_task_async.apply(this, arguments); }
            },
            "deleteTasklist": {
              "value": function () { return this.delete_tasklist.apply(this, arguments); }
            },
            "deleteTasklistAsync": {
              "value": function () { return this.delete_tasklist_async.apply(this, arguments); }
            },
            "insertTask": {
              "value": function () { return this.insert_task.apply(this, arguments); }
            },
            "insertTaskAsync": {
              "value": function () { return this.insert_task_async.apply(this, arguments); }
            },
            "insertTasklist": {
              "value": function () { return this.insert_tasklist.apply(this, arguments); }
            },
            "insertTasklistAsync": {
              "value": function () { return this.insert_tasklist_async.apply(this, arguments); }
            },
            "queryAllTasklists": {
              "value": function () { return this.query_all_tasklists.apply(this, arguments); }
            },
            "queryAllTasklistsAsync": {
              "value": function () { return this.query_all_tasklists_async.apply(this, arguments); }
            },
            "queryTasks": {
              "value": function () { return this.query_tasks.apply(this, arguments); }
            },
            "queryTasksAsync": {
              "value": function () { return this.query_tasks_async.apply(this, arguments); }
            },
            "updateTask": {
              "value": function () { return this.update_task.apply(this, arguments); }
            },
            "updateTaskAsync": {
              "value": function () { return this.update_task_async.apply(this, arguments); }
            },
            "updateTasklist": {
              "value": function () { return this.update_tasklist.apply(this, arguments); }
            },
            "updateTasklistAsync": {
              "value": function () { return this.update_tasklist_async.apply(this, arguments); }
            }
          },
          "static": {
            "getPrimaryAuthorizationDomain": {
              "value": function () { return this.get_primary_authorization_domain.apply(this, arguments); }
            }
          }
        },
        "TasksTask": {
          "prototype": {
            "getCompleted": {
              "value": function () { return this.get_completed.apply(this, arguments); }
            },
            "getDue": {
              "value": function () { return this.get_due.apply(this, arguments); }
            },
            "getNotes": {
              "value": function () { return this.get_notes.apply(this, arguments); }
            },
            "getParent": {
              "value": function () { return this.get_parent.apply(this, arguments); }
            },
            "getPosition": {
              "value": function () { return this.get_position.apply(this, arguments); }
            },
            "getStatus": {
              "value": function () { return this.get_status.apply(this, arguments); }
            },
            "isDeleted": {
              "get": function () { return this.is_deleted; },
              "set": function (value) { this.is_deleted = value; }
            },
            "isHidden": {
              "get": function () { return this.is_hidden; },
              "set": function (value) { this.is_hidden = value; }
            },
            "setCompleted": {
              "value": function () { return this.set_completed.apply(this, arguments); }
            },
            "setDue": {
              "value": function () { return this.set_due.apply(this, arguments); }
            },
            "setIsDeleted": {
              "value": function () { return this.set_is_deleted.apply(this, arguments); }
            },
            "setNotes": {
              "value": function () { return this.set_notes.apply(this, arguments); }
            },
            "setStatus": {
              "value": function () { return this.set_status.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "TasksTasklist": {
          "prototype": {},
          "static": {}
        },
        "UploadStream": {
          "prototype": {
            "getAuthorizationDomain": {
              "value": function () { return this.get_authorization_domain.apply(this, arguments); }
            },
            "getCancellable": {
              "value": function () { return this.get_cancellable.apply(this, arguments); }
            },
            "getContentLength": {
              "value": function () { return this.get_content_length.apply(this, arguments); }
            },
            "getContentType": {
              "value": function () { return this.get_content_type.apply(this, arguments); }
            },
            "getEntry": {
              "value": function () { return this.get_entry.apply(this, arguments); }
            },
            "getMethod": {
              "value": function () { return this.get_method.apply(this, arguments); }
            },
            "getResponse": {
              "value": function () { return this.get_response.apply(this, arguments); }
            },
            "getService": {
              "value": function () { return this.get_service.apply(this, arguments); }
            },
            "getSlug": {
              "value": function () { return this.get_slug.apply(this, arguments); }
            },
            "getUploadUri": {
              "value": function () { return this.get_upload_uri.apply(this, arguments); }
            },
            "authorizationDomain": {
              "get": function () { return this.authorization_domain; },
              "set": function (value) { this.authorization_domain = value; }
            },
            "contentLength": {
              "get": function () { return this.content_length; },
              "set": function (value) { this.content_length = value; }
            },
            "contentType": {
              "get": function () { return this.content_type; },
              "set": function (value) { this.content_type = value; }
            },
            "uploadUri": {
              "get": function () { return this.upload_uri; },
              "set": function (value) { this.upload_uri = value; }
            }
          },
          "static": {}
        },
        "YouTubeCategory": {
          "prototype": {
            "isAssignable": {
              "get": function () { return this.is_assignable; },
              "set": function (value) { this.is_assignable = value; }
            },
            "isBrowsable": {
              "value": function () { return this.is_browsable.apply(this, arguments); }
            },
            "isDeprecated": {
              "get": function () { return this.is_deprecated; },
              "set": function (value) { this.is_deprecated = value; }
            }
          },
          "static": {}
        },
        "YouTubeComment": {
          "prototype": {
            "getParentCommentUri": {
              "value": function () { return this.get_parent_comment_uri.apply(this, arguments); }
            },
            "setParentCommentUri": {
              "value": function () { return this.set_parent_comment_uri.apply(this, arguments); }
            },
            "parentCommentUri": {
              "get": function () { return this.parent_comment_uri; },
              "set": function (value) { this.parent_comment_uri = value; }
            }
          },
          "static": {}
        },
        "YouTubeContent": {
          "prototype": {
            "getFormat": {
              "value": function () { return this.get_format.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "YouTubeCredit": {
          "prototype": {
            "getEntityType": {
              "value": function () { return this.get_entity_type.apply(this, arguments); }
            },
            "entityType": {
              "get": function () { return this.entity_type; },
              "set": function (value) { this.entity_type = value; }
            }
          },
          "static": {}
        },
        "YouTubeFeed": {
          "prototype": {},
          "static": {}
        },
        "YouTubeQuery": {
          "prototype": {
            "getAge": {
              "value": function () { return this.get_age.apply(this, arguments); }
            },
            "getFormat": {
              "value": function () { return this.get_format.apply(this, arguments); }
            },
            "getLanguage": {
              "value": function () { return this.get_language.apply(this, arguments); }
            },
            "getLicense": {
              "value": function () { return this.get_license.apply(this, arguments); }
            },
            "getLocation": {
              "value": function () { return this.get_location.apply(this, arguments); }
            },
            "getOrderBy": {
              "value": function () { return this.get_order_by.apply(this, arguments); }
            },
            "getRestriction": {
              "value": function () { return this.get_restriction.apply(this, arguments); }
            },
            "getSafeSearch": {
              "value": function () { return this.get_safe_search.apply(this, arguments); }
            },
            "getSortOrder": {
              "value": function () { return this.get_sort_order.apply(this, arguments); }
            },
            "getUploader": {
              "value": function () { return this.get_uploader.apply(this, arguments); }
            },
            "setAge": {
              "value": function () { return this.set_age.apply(this, arguments); }
            },
            "setFormat": {
              "value": function () { return this.set_format.apply(this, arguments); }
            },
            "setLanguage": {
              "value": function () { return this.set_language.apply(this, arguments); }
            },
            "setLicense": {
              "value": function () { return this.set_license.apply(this, arguments); }
            },
            "setLocation": {
              "value": function () { return this.set_location.apply(this, arguments); }
            },
            "setOrderBy": {
              "value": function () { return this.set_order_by.apply(this, arguments); }
            },
            "setRestriction": {
              "value": function () { return this.set_restriction.apply(this, arguments); }
            },
            "setSafeSearch": {
              "value": function () { return this.set_safe_search.apply(this, arguments); }
            },
            "setSortOrder": {
              "value": function () { return this.set_sort_order.apply(this, arguments); }
            },
            "setUploader": {
              "value": function () { return this.set_uploader.apply(this, arguments); }
            },
            "hasLocation": {
              "get": function () { return this.has_location; },
              "set": function (value) { this.has_location = value; }
            },
            "locationRadius": {
              "get": function () { return this.location_radius; },
              "set": function (value) { this.location_radius = value; }
            },
            "orderBy": {
              "get": function () { return this.order_by; },
              "set": function (value) { this.order_by = value; }
            },
            "safeSearch": {
              "get": function () { return this.safe_search; },
              "set": function (value) { this.safe_search = value; }
            },
            "sortOrder": {
              "get": function () { return this.sort_order; },
              "set": function (value) { this.sort_order = value; }
            }
          },
          "static": {}
        },
        "YouTubeService": {
          "prototype": {
            "finishVideoUpload": {
              "value": function () { return this.finish_video_upload.apply(this, arguments); }
            },
            "getCategories": {
              "value": function () { return this.get_categories.apply(this, arguments); }
            },
            "getCategoriesAsync": {
              "value": function () { return this.get_categories_async.apply(this, arguments); }
            },
            "getCategoriesFinish": {
              "value": function () { return this.get_categories_finish.apply(this, arguments); }
            },
            "getDeveloperKey": {
              "value": function () { return this.get_developer_key.apply(this, arguments); }
            },
            "queryRelated": {
              "value": function () { return this.query_related.apply(this, arguments); }
            },
            "queryRelatedAsync": {
              "value": function () { return this.query_related_async.apply(this, arguments); }
            },
            "queryStandardFeed": {
              "value": function () { return this.query_standard_feed.apply(this, arguments); }
            },
            "queryStandardFeedAsync": {
              "value": function () { return this.query_standard_feed_async.apply(this, arguments); }
            },
            "queryVideos": {
              "value": function () { return this.query_videos.apply(this, arguments); }
            },
            "queryVideosAsync": {
              "value": function () { return this.query_videos_async.apply(this, arguments); }
            },
            "uploadVideo": {
              "value": function () { return this.upload_video.apply(this, arguments); }
            },
            "developerKey": {
              "get": function () { return this.developer_key; },
              "set": function (value) { this.developer_key = value; }
            }
          },
          "static": {
            "getPrimaryAuthorizationDomain": {
              "value": function () { return this.get_primary_authorization_domain.apply(this, arguments); }
            }
          }
        },
        "YouTubeState": {
          "prototype": {
            "getHelpUri": {
              "value": function () { return this.get_help_uri.apply(this, arguments); }
            },
            "getMessage": {
              "value": function () { return this.get_message.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getReasonCode": {
              "value": function () { return this.get_reason_code.apply(this, arguments); }
            },
            "helpUri": {
              "get": function () { return this.help_uri; },
              "set": function (value) { this.help_uri = value; }
            },
            "reasonCode": {
              "get": function () { return this.reason_code; },
              "set": function (value) { this.reason_code = value; }
            }
          },
          "static": {}
        },
        "YouTubeVideo": {
          "prototype": {
            "getAccessControl": {
              "value": function () { return this.get_access_control.apply(this, arguments); }
            },
            "getAspectRatio": {
              "value": function () { return this.get_aspect_ratio.apply(this, arguments); }
            },
            "getCategory": {
              "value": function () { return this.get_category.apply(this, arguments); }
            },
            "getCoordinates": {
              "value": function () { return this.get_coordinates.apply(this, arguments); }
            },
            "getCredit": {
              "value": function () { return this.get_credit.apply(this, arguments); }
            },
            "getDescription": {
              "value": function () { return this.get_description.apply(this, arguments); }
            },
            "getDuration": {
              "value": function () { return this.get_duration.apply(this, arguments); }
            },
            "getFavoriteCount": {
              "value": function () { return this.get_favorite_count.apply(this, arguments); }
            },
            "getKeywords": {
              "value": function () { return this.get_keywords.apply(this, arguments); }
            },
            "getLocation": {
              "value": function () { return this.get_location.apply(this, arguments); }
            },
            "getMediaRating": {
              "value": function () { return this.get_media_rating.apply(this, arguments); }
            },
            "getPlayerUri": {
              "value": function () { return this.get_player_uri.apply(this, arguments); }
            },
            "getRating": {
              "value": function () { return this.get_rating.apply(this, arguments); }
            },
            "getRecorded": {
              "value": function () { return this.get_recorded.apply(this, arguments); }
            },
            "getState": {
              "value": function () { return this.get_state.apply(this, arguments); }
            },
            "getThumbnails": {
              "value": function () { return this.get_thumbnails.apply(this, arguments); }
            },
            "getUploaded": {
              "value": function () { return this.get_uploaded.apply(this, arguments); }
            },
            "getVideoId": {
              "value": function () { return this.get_video_id.apply(this, arguments); }
            },
            "getViewCount": {
              "value": function () { return this.get_view_count.apply(this, arguments); }
            },
            "isDraft": {
              "get": function () { return this.is_draft; },
              "set": function (value) { this.is_draft = value; }
            },
            "isPrivate": {
              "get": function () { return this.is_private; },
              "set": function (value) { this.is_private = value; }
            },
            "isRestrictedInCountry": {
              "value": function () { return this.is_restricted_in_country.apply(this, arguments); }
            },
            "lookUpContent": {
              "value": function () { return this.look_up_content.apply(this, arguments); }
            },
            "setAccessControl": {
              "value": function () { return this.set_access_control.apply(this, arguments); }
            },
            "setAspectRatio": {
              "value": function () { return this.set_aspect_ratio.apply(this, arguments); }
            },
            "setCategory": {
              "value": function () { return this.set_category.apply(this, arguments); }
            },
            "setCoordinates": {
              "value": function () { return this.set_coordinates.apply(this, arguments); }
            },
            "setDescription": {
              "value": function () { return this.set_description.apply(this, arguments); }
            },
            "setIsDraft": {
              "value": function () { return this.set_is_draft.apply(this, arguments); }
            },
            "setIsPrivate": {
              "value": function () { return this.set_is_private.apply(this, arguments); }
            },
            "setKeywords": {
              "value": function () { return this.set_keywords.apply(this, arguments); }
            },
            "setLocation": {
              "value": function () { return this.set_location.apply(this, arguments); }
            },
            "setRecorded": {
              "value": function () { return this.set_recorded.apply(this, arguments); }
            },
            "aspectRatio": {
              "get": function () { return this.aspect_ratio; },
              "set": function (value) { this.aspect_ratio = value; }
            },
            "averageRating": {
              "get": function () { return this.average_rating; },
              "set": function (value) { this.average_rating = value; }
            },
            "favoriteCount": {
              "get": function () { return this.favorite_count; },
              "set": function (value) { this.favorite_count = value; }
            },
            "maxRating": {
              "get": function () { return this.max_rating; },
              "set": function (value) { this.max_rating = value; }
            },
            "minRating": {
              "get": function () { return this.min_rating; },
              "set": function (value) { this.min_rating = value; }
            },
            "playerUri": {
              "get": function () { return this.player_uri; },
              "set": function (value) { this.player_uri = value; }
            },
            "ratingCount": {
              "get": function () { return this.rating_count; },
              "set": function (value) { this.rating_count = value; }
            },
            "videoId": {
              "get": function () { return this.video_id; },
              "set": function (value) { this.video_id = value; }
            },
            "viewCount": {
              "get": function () { return this.view_count; },
              "set": function (value) { this.view_count = value; }
            }
          },
          "static": {
            "getVideoIdFromUri": {
              "value": function () { return this.get_video_id_from_uri.apply(this, arguments); }
            }
          }
        }
      },
      "static": {
        "clientLoginAuthorizerErrorQuark": {
          "value": function () { return this.client_login_authorizer_error_quark.apply(this, arguments); }
        },
        "colorFromHexadecimal": {
          "value": function () { return this.color_from_hexadecimal.apply(this, arguments); }
        },
        "documentsServiceErrorQuark": {
          "value": function () { return this.documents_service_error_quark.apply(this, arguments); }
        },
        "parserErrorQuark": {
          "value": function () { return this.parser_error_quark.apply(this, arguments); }
        },
        "serviceErrorQuark": {
          "value": function () { return this.service_error_quark.apply(this, arguments); }
        },
        "youtubeServiceErrorQuark": {
          "value": function () { return this.youtube_service_error_quark.apply(this, arguments); }
        }
      }
    },
    "GDesktopEnums": {
      "class": {},
      "static": {}
    },
    "GIRepository": {
      "class": {
        "Repository": {
          "prototype": {
            "enumerateVersions": {
              "value": function () { return this.enumerate_versions.apply(this, arguments); }
            },
            "findByErrorDomain": {
              "value": function () { return this.find_by_error_domain.apply(this, arguments); }
            },
            "findByGtype": {
              "value": function () { return this.find_by_gtype.apply(this, arguments); }
            },
            "findByName": {
              "value": function () { return this.find_by_name.apply(this, arguments); }
            },
            "getCPrefix": {
              "value": function () { return this.get_c_prefix.apply(this, arguments); }
            },
            "getDependencies": {
              "value": function () { return this.get_dependencies.apply(this, arguments); }
            },
            "getImmediateDependencies": {
              "value": function () { return this.get_immediate_dependencies.apply(this, arguments); }
            },
            "getInfo": {
              "value": function () { return this.get_info.apply(this, arguments); }
            },
            "getLoadedNamespaces": {
              "value": function () { return this.get_loaded_namespaces.apply(this, arguments); }
            },
            "getNInfos": {
              "value": function () { return this.get_n_infos.apply(this, arguments); }
            },
            "getSharedLibrary": {
              "value": function () { return this.get_shared_library.apply(this, arguments); }
            },
            "getTypelibPath": {
              "value": function () { return this.get_typelib_path.apply(this, arguments); }
            },
            "getVersion": {
              "value": function () { return this.get_version.apply(this, arguments); }
            },
            "isRegistered": {
              "value": function () { return this.is_registered.apply(this, arguments); }
            },
            "loadTypelib": {
              "value": function () { return this.load_typelib.apply(this, arguments); }
            },
            "requirePrivate": {
              "value": function () { return this.require_private.apply(this, arguments); }
            }
          },
          "static": {
            "errorQuark": {
              "value": function () { return this.error_quark.apply(this, arguments); }
            },
            "getDefault": {
              "value": function () { return this.get_default.apply(this, arguments); }
            },
            "getOptionGroup": {
              "value": function () { return this.get_option_group.apply(this, arguments); }
            },
            "getSearchPath": {
              "value": function () { return this.get_search_path.apply(this, arguments); }
            },
            "prependLibraryPath": {
              "value": function () { return this.prepend_library_path.apply(this, arguments); }
            },
            "prependSearchPath": {
              "value": function () { return this.prepend_search_path.apply(this, arguments); }
            }
          }
        }
      },
      "static": {
        "argInfoGetClosure": {
          "value": function () { return this.arg_info_get_closure.apply(this, arguments); }
        },
        "argInfoGetDestroy": {
          "value": function () { return this.arg_info_get_destroy.apply(this, arguments); }
        },
        "argInfoGetDirection": {
          "value": function () { return this.arg_info_get_direction.apply(this, arguments); }
        },
        "argInfoGetOwnershipTransfer": {
          "value": function () { return this.arg_info_get_ownership_transfer.apply(this, arguments); }
        },
        "argInfoGetScope": {
          "value": function () { return this.arg_info_get_scope.apply(this, arguments); }
        },
        "argInfoGetType": {
          "value": function () { return this.arg_info_get_type.apply(this, arguments); }
        },
        "argInfoIsCallerAllocates": {
          "value": function () { return this.arg_info_is_caller_allocates.apply(this, arguments); }
        },
        "argInfoIsOptional": {
          "value": function () { return this.arg_info_is_optional.apply(this, arguments); }
        },
        "argInfoIsReturnValue": {
          "value": function () { return this.arg_info_is_return_value.apply(this, arguments); }
        },
        "argInfoIsSkip": {
          "value": function () { return this.arg_info_is_skip.apply(this, arguments); }
        },
        "argInfoLoadType": {
          "value": function () { return this.arg_info_load_type.apply(this, arguments); }
        },
        "argInfoMayBeNull": {
          "value": function () { return this.arg_info_may_be_null.apply(this, arguments); }
        },
        "callableInfoCanThrowGerror": {
          "value": function () { return this.callable_info_can_throw_gerror.apply(this, arguments); }
        },
        "callableInfoGetArg": {
          "value": function () { return this.callable_info_get_arg.apply(this, arguments); }
        },
        "callableInfoGetCallerOwns": {
          "value": function () { return this.callable_info_get_caller_owns.apply(this, arguments); }
        },
        "callableInfoGetInstanceOwnershipTransfer": {
          "value": function () { return this.callable_info_get_instance_ownership_transfer.apply(this, arguments); }
        },
        "callableInfoGetNArgs": {
          "value": function () { return this.callable_info_get_n_args.apply(this, arguments); }
        },
        "callableInfoGetReturnAttribute": {
          "value": function () { return this.callable_info_get_return_attribute.apply(this, arguments); }
        },
        "callableInfoGetReturnType": {
          "value": function () { return this.callable_info_get_return_type.apply(this, arguments); }
        },
        "callableInfoInvoke": {
          "value": function () { return this.callable_info_invoke.apply(this, arguments); }
        },
        "callableInfoIsMethod": {
          "value": function () { return this.callable_info_is_method.apply(this, arguments); }
        },
        "callableInfoIterateReturnAttributes": {
          "value": function () { return this.callable_info_iterate_return_attributes.apply(this, arguments); }
        },
        "callableInfoLoadArg": {
          "value": function () { return this.callable_info_load_arg.apply(this, arguments); }
        },
        "callableInfoLoadReturnType": {
          "value": function () { return this.callable_info_load_return_type.apply(this, arguments); }
        },
        "callableInfoMayReturnNull": {
          "value": function () { return this.callable_info_may_return_null.apply(this, arguments); }
        },
        "callableInfoSkipReturn": {
          "value": function () { return this.callable_info_skip_return.apply(this, arguments); }
        },
        "constantInfoFreeValue": {
          "value": function () { return this.constant_info_free_value.apply(this, arguments); }
        },
        "constantInfoGetType": {
          "value": function () { return this.constant_info_get_type.apply(this, arguments); }
        },
        "constantInfoGetValue": {
          "value": function () { return this.constant_info_get_value.apply(this, arguments); }
        },
        "enumInfoGetErrorDomain": {
          "value": function () { return this.enum_info_get_error_domain.apply(this, arguments); }
        },
        "enumInfoGetMethod": {
          "value": function () { return this.enum_info_get_method.apply(this, arguments); }
        },
        "enumInfoGetNMethods": {
          "value": function () { return this.enum_info_get_n_methods.apply(this, arguments); }
        },
        "enumInfoGetNValues": {
          "value": function () { return this.enum_info_get_n_values.apply(this, arguments); }
        },
        "enumInfoGetStorageType": {
          "value": function () { return this.enum_info_get_storage_type.apply(this, arguments); }
        },
        "enumInfoGetValue": {
          "value": function () { return this.enum_info_get_value.apply(this, arguments); }
        },
        "fieldInfoGetField": {
          "value": function () { return this.field_info_get_field.apply(this, arguments); }
        },
        "fieldInfoGetFlags": {
          "value": function () { return this.field_info_get_flags.apply(this, arguments); }
        },
        "fieldInfoGetOffset": {
          "value": function () { return this.field_info_get_offset.apply(this, arguments); }
        },
        "fieldInfoGetSize": {
          "value": function () { return this.field_info_get_size.apply(this, arguments); }
        },
        "fieldInfoGetType": {
          "value": function () { return this.field_info_get_type.apply(this, arguments); }
        },
        "fieldInfoSetField": {
          "value": function () { return this.field_info_set_field.apply(this, arguments); }
        },
        "functionInfoGetFlags": {
          "value": function () { return this.function_info_get_flags.apply(this, arguments); }
        },
        "functionInfoGetProperty": {
          "value": function () { return this.function_info_get_property.apply(this, arguments); }
        },
        "functionInfoGetSymbol": {
          "value": function () { return this.function_info_get_symbol.apply(this, arguments); }
        },
        "functionInfoGetVfunc": {
          "value": function () { return this.function_info_get_vfunc.apply(this, arguments); }
        },
        "functionInfoInvoke": {
          "value": function () { return this.function_info_invoke.apply(this, arguments); }
        },
        "infoNew": {
          "value": function () { return this.info_new.apply(this, arguments); }
        },
        "infoTypeToString": {
          "value": function () { return this.info_type_to_string.apply(this, arguments); }
        },
        "interfaceInfoFindMethod": {
          "value": function () { return this.interface_info_find_method.apply(this, arguments); }
        },
        "interfaceInfoFindSignal": {
          "value": function () { return this.interface_info_find_signal.apply(this, arguments); }
        },
        "interfaceInfoFindVfunc": {
          "value": function () { return this.interface_info_find_vfunc.apply(this, arguments); }
        },
        "interfaceInfoGetConstant": {
          "value": function () { return this.interface_info_get_constant.apply(this, arguments); }
        },
        "interfaceInfoGetIfaceStruct": {
          "value": function () { return this.interface_info_get_iface_struct.apply(this, arguments); }
        },
        "interfaceInfoGetMethod": {
          "value": function () { return this.interface_info_get_method.apply(this, arguments); }
        },
        "interfaceInfoGetNConstants": {
          "value": function () { return this.interface_info_get_n_constants.apply(this, arguments); }
        },
        "interfaceInfoGetNMethods": {
          "value": function () { return this.interface_info_get_n_methods.apply(this, arguments); }
        },
        "interfaceInfoGetNPrerequisites": {
          "value": function () { return this.interface_info_get_n_prerequisites.apply(this, arguments); }
        },
        "interfaceInfoGetNProperties": {
          "value": function () { return this.interface_info_get_n_properties.apply(this, arguments); }
        },
        "interfaceInfoGetNSignals": {
          "value": function () { return this.interface_info_get_n_signals.apply(this, arguments); }
        },
        "interfaceInfoGetNVfuncs": {
          "value": function () { return this.interface_info_get_n_vfuncs.apply(this, arguments); }
        },
        "interfaceInfoGetPrerequisite": {
          "value": function () { return this.interface_info_get_prerequisite.apply(this, arguments); }
        },
        "interfaceInfoGetProperty": {
          "value": function () { return this.interface_info_get_property.apply(this, arguments); }
        },
        "interfaceInfoGetSignal": {
          "value": function () { return this.interface_info_get_signal.apply(this, arguments); }
        },
        "interfaceInfoGetVfunc": {
          "value": function () { return this.interface_info_get_vfunc.apply(this, arguments); }
        },
        "invokeErrorQuark": {
          "value": function () { return this.invoke_error_quark.apply(this, arguments); }
        },
        "objectInfoFindMethod": {
          "value": function () { return this.object_info_find_method.apply(this, arguments); }
        },
        "objectInfoFindMethodUsingInterfaces": {
          "value": function () { return this.object_info_find_method_using_interfaces.apply(this, arguments); }
        },
        "objectInfoFindSignal": {
          "value": function () { return this.object_info_find_signal.apply(this, arguments); }
        },
        "objectInfoFindVfunc": {
          "value": function () { return this.object_info_find_vfunc.apply(this, arguments); }
        },
        "objectInfoFindVfuncUsingInterfaces": {
          "value": function () { return this.object_info_find_vfunc_using_interfaces.apply(this, arguments); }
        },
        "objectInfoGetAbstract": {
          "value": function () { return this.object_info_get_abstract.apply(this, arguments); }
        },
        "objectInfoGetClassStruct": {
          "value": function () { return this.object_info_get_class_struct.apply(this, arguments); }
        },
        "objectInfoGetConstant": {
          "value": function () { return this.object_info_get_constant.apply(this, arguments); }
        },
        "objectInfoGetField": {
          "value": function () { return this.object_info_get_field.apply(this, arguments); }
        },
        "objectInfoGetFundamental": {
          "value": function () { return this.object_info_get_fundamental.apply(this, arguments); }
        },
        "objectInfoGetGetValueFunction": {
          "value": function () { return this.object_info_get_get_value_function.apply(this, arguments); }
        },
        "objectInfoGetGetValueFunctionPointer": {
          "value": function () { return this.object_info_get_get_value_function_pointer.apply(this, arguments); }
        },
        "objectInfoGetInterface": {
          "value": function () { return this.object_info_get_interface.apply(this, arguments); }
        },
        "objectInfoGetMethod": {
          "value": function () { return this.object_info_get_method.apply(this, arguments); }
        },
        "objectInfoGetNConstants": {
          "value": function () { return this.object_info_get_n_constants.apply(this, arguments); }
        },
        "objectInfoGetNFields": {
          "value": function () { return this.object_info_get_n_fields.apply(this, arguments); }
        },
        "objectInfoGetNInterfaces": {
          "value": function () { return this.object_info_get_n_interfaces.apply(this, arguments); }
        },
        "objectInfoGetNMethods": {
          "value": function () { return this.object_info_get_n_methods.apply(this, arguments); }
        },
        "objectInfoGetNProperties": {
          "value": function () { return this.object_info_get_n_properties.apply(this, arguments); }
        },
        "objectInfoGetNSignals": {
          "value": function () { return this.object_info_get_n_signals.apply(this, arguments); }
        },
        "objectInfoGetNVfuncs": {
          "value": function () { return this.object_info_get_n_vfuncs.apply(this, arguments); }
        },
        "objectInfoGetParent": {
          "value": function () { return this.object_info_get_parent.apply(this, arguments); }
        },
        "objectInfoGetProperty": {
          "value": function () { return this.object_info_get_property.apply(this, arguments); }
        },
        "objectInfoGetRefFunction": {
          "value": function () { return this.object_info_get_ref_function.apply(this, arguments); }
        },
        "objectInfoGetRefFunctionPointer": {
          "value": function () { return this.object_info_get_ref_function_pointer.apply(this, arguments); }
        },
        "objectInfoGetSetValueFunction": {
          "value": function () { return this.object_info_get_set_value_function.apply(this, arguments); }
        },
        "objectInfoGetSetValueFunctionPointer": {
          "value": function () { return this.object_info_get_set_value_function_pointer.apply(this, arguments); }
        },
        "objectInfoGetSignal": {
          "value": function () { return this.object_info_get_signal.apply(this, arguments); }
        },
        "objectInfoGetTypeInit": {
          "value": function () { return this.object_info_get_type_init.apply(this, arguments); }
        },
        "objectInfoGetTypeName": {
          "value": function () { return this.object_info_get_type_name.apply(this, arguments); }
        },
        "objectInfoGetUnrefFunction": {
          "value": function () { return this.object_info_get_unref_function.apply(this, arguments); }
        },
        "objectInfoGetUnrefFunctionPointer": {
          "value": function () { return this.object_info_get_unref_function_pointer.apply(this, arguments); }
        },
        "objectInfoGetVfunc": {
          "value": function () { return this.object_info_get_vfunc.apply(this, arguments); }
        },
        "propertyInfoGetFlags": {
          "value": function () { return this.property_info_get_flags.apply(this, arguments); }
        },
        "propertyInfoGetOwnershipTransfer": {
          "value": function () { return this.property_info_get_ownership_transfer.apply(this, arguments); }
        },
        "propertyInfoGetType": {
          "value": function () { return this.property_info_get_type.apply(this, arguments); }
        },
        "registeredTypeInfoGetGType": {
          "value": function () { return this.registered_type_info_get_g_type.apply(this, arguments); }
        },
        "registeredTypeInfoGetTypeInit": {
          "value": function () { return this.registered_type_info_get_type_init.apply(this, arguments); }
        },
        "registeredTypeInfoGetTypeName": {
          "value": function () { return this.registered_type_info_get_type_name.apply(this, arguments); }
        },
        "signalInfoGetClassClosure": {
          "value": function () { return this.signal_info_get_class_closure.apply(this, arguments); }
        },
        "signalInfoGetFlags": {
          "value": function () { return this.signal_info_get_flags.apply(this, arguments); }
        },
        "signalInfoTrueStopsEmit": {
          "value": function () { return this.signal_info_true_stops_emit.apply(this, arguments); }
        },
        "structInfoFindField": {
          "value": function () { return this.struct_info_find_field.apply(this, arguments); }
        },
        "structInfoFindMethod": {
          "value": function () { return this.struct_info_find_method.apply(this, arguments); }
        },
        "structInfoGetAlignment": {
          "value": function () { return this.struct_info_get_alignment.apply(this, arguments); }
        },
        "structInfoGetField": {
          "value": function () { return this.struct_info_get_field.apply(this, arguments); }
        },
        "structInfoGetMethod": {
          "value": function () { return this.struct_info_get_method.apply(this, arguments); }
        },
        "structInfoGetNFields": {
          "value": function () { return this.struct_info_get_n_fields.apply(this, arguments); }
        },
        "structInfoGetNMethods": {
          "value": function () { return this.struct_info_get_n_methods.apply(this, arguments); }
        },
        "structInfoGetSize": {
          "value": function () { return this.struct_info_get_size.apply(this, arguments); }
        },
        "structInfoIsForeign": {
          "value": function () { return this.struct_info_is_foreign.apply(this, arguments); }
        },
        "structInfoIsGtypeStruct": {
          "value": function () { return this.struct_info_is_gtype_struct.apply(this, arguments); }
        },
        "typeInfoGetArrayFixedSize": {
          "value": function () { return this.type_info_get_array_fixed_size.apply(this, arguments); }
        },
        "typeInfoGetArrayLength": {
          "value": function () { return this.type_info_get_array_length.apply(this, arguments); }
        },
        "typeInfoGetArrayType": {
          "value": function () { return this.type_info_get_array_type.apply(this, arguments); }
        },
        "typeInfoGetInterface": {
          "value": function () { return this.type_info_get_interface.apply(this, arguments); }
        },
        "typeInfoGetParamType": {
          "value": function () { return this.type_info_get_param_type.apply(this, arguments); }
        },
        "typeInfoGetTag": {
          "value": function () { return this.type_info_get_tag.apply(this, arguments); }
        },
        "typeInfoIsPointer": {
          "value": function () { return this.type_info_is_pointer.apply(this, arguments); }
        },
        "typeInfoIsZeroTerminated": {
          "value": function () { return this.type_info_is_zero_terminated.apply(this, arguments); }
        },
        "typeTagToString": {
          "value": function () { return this.type_tag_to_string.apply(this, arguments); }
        },
        "unionInfoFindMethod": {
          "value": function () { return this.union_info_find_method.apply(this, arguments); }
        },
        "unionInfoGetAlignment": {
          "value": function () { return this.union_info_get_alignment.apply(this, arguments); }
        },
        "unionInfoGetDiscriminator": {
          "value": function () { return this.union_info_get_discriminator.apply(this, arguments); }
        },
        "unionInfoGetDiscriminatorOffset": {
          "value": function () { return this.union_info_get_discriminator_offset.apply(this, arguments); }
        },
        "unionInfoGetDiscriminatorType": {
          "value": function () { return this.union_info_get_discriminator_type.apply(this, arguments); }
        },
        "unionInfoGetField": {
          "value": function () { return this.union_info_get_field.apply(this, arguments); }
        },
        "unionInfoGetMethod": {
          "value": function () { return this.union_info_get_method.apply(this, arguments); }
        },
        "unionInfoGetNFields": {
          "value": function () { return this.union_info_get_n_fields.apply(this, arguments); }
        },
        "unionInfoGetNMethods": {
          "value": function () { return this.union_info_get_n_methods.apply(this, arguments); }
        },
        "unionInfoGetSize": {
          "value": function () { return this.union_info_get_size.apply(this, arguments); }
        },
        "unionInfoIsDiscriminated": {
          "value": function () { return this.union_info_is_discriminated.apply(this, arguments); }
        },
        "valueInfoGetValue": {
          "value": function () { return this.value_info_get_value.apply(this, arguments); }
        },
        "vfuncInfoGetAddress": {
          "value": function () { return this.vfunc_info_get_address.apply(this, arguments); }
        },
        "vfuncInfoGetFlags": {
          "value": function () { return this.vfunc_info_get_flags.apply(this, arguments); }
        },
        "vfuncInfoGetInvoker": {
          "value": function () { return this.vfunc_info_get_invoker.apply(this, arguments); }
        },
        "vfuncInfoGetOffset": {
          "value": function () { return this.vfunc_info_get_offset.apply(this, arguments); }
        },
        "vfuncInfoGetSignal": {
          "value": function () { return this.vfunc_info_get_signal.apply(this, arguments); }
        },
        "vfuncInfoInvoke": {
          "value": function () { return this.vfunc_info_invoke.apply(this, arguments); }
        }
      }
    },
    "GL": {
      "class": {},
      "static": {}
    },
    "GLib": {
      "class": {},
      "static": {
        "asciiDigitValue": {
          "value": function () { return this.ascii_digit_value.apply(this, arguments); }
        },
        "asciiDtostr": {
          "value": function () { return this.ascii_dtostr.apply(this, arguments); }
        },
        "asciiFormatd": {
          "value": function () { return this.ascii_formatd.apply(this, arguments); }
        },
        "asciiStrcasecmp": {
          "value": function () { return this.ascii_strcasecmp.apply(this, arguments); }
        },
        "asciiStrdown": {
          "value": function () { return this.ascii_strdown.apply(this, arguments); }
        },
        "asciiStrncasecmp": {
          "value": function () { return this.ascii_strncasecmp.apply(this, arguments); }
        },
        "asciiStrtod": {
          "value": function () { return this.ascii_strtod.apply(this, arguments); }
        },
        "asciiStrtoll": {
          "value": function () { return this.ascii_strtoll.apply(this, arguments); }
        },
        "asciiStrtoull": {
          "value": function () { return this.ascii_strtoull.apply(this, arguments); }
        },
        "asciiStrup": {
          "value": function () { return this.ascii_strup.apply(this, arguments); }
        },
        "asciiTolower": {
          "value": function () { return this.ascii_tolower.apply(this, arguments); }
        },
        "asciiToupper": {
          "value": function () { return this.ascii_toupper.apply(this, arguments); }
        },
        "asciiXdigitValue": {
          "value": function () { return this.ascii_xdigit_value.apply(this, arguments); }
        },
        "assertWarning": {
          "value": function () { return this.assert_warning.apply(this, arguments); }
        },
        "assertionMessage": {
          "value": function () { return this.assertion_message.apply(this, arguments); }
        },
        "assertionMessageCmpnum": {
          "value": function () { return this.assertion_message_cmpnum.apply(this, arguments); }
        },
        "assertionMessageCmpstr": {
          "value": function () { return this.assertion_message_cmpstr.apply(this, arguments); }
        },
        "assertionMessageError": {
          "value": function () { return this.assertion_message_error.apply(this, arguments); }
        },
        "assertionMessageExpr": {
          "value": function () { return this.assertion_message_expr.apply(this, arguments); }
        },
        "atomicIntAdd": {
          "value": function () { return this.atomic_int_add.apply(this, arguments); }
        },
        "atomicIntAnd": {
          "value": function () { return this.atomic_int_and.apply(this, arguments); }
        },
        "atomicIntCompareAndExchange": {
          "value": function () { return this.atomic_int_compare_and_exchange.apply(this, arguments); }
        },
        "atomicIntDecAndTest": {
          "value": function () { return this.atomic_int_dec_and_test.apply(this, arguments); }
        },
        "atomicIntExchangeAndAdd": {
          "value": function () { return this.atomic_int_exchange_and_add.apply(this, arguments); }
        },
        "atomicIntGet": {
          "value": function () { return this.atomic_int_get.apply(this, arguments); }
        },
        "atomicIntInc": {
          "value": function () { return this.atomic_int_inc.apply(this, arguments); }
        },
        "atomicIntOr": {
          "value": function () { return this.atomic_int_or.apply(this, arguments); }
        },
        "atomicIntSet": {
          "value": function () { return this.atomic_int_set.apply(this, arguments); }
        },
        "atomicIntXor": {
          "value": function () { return this.atomic_int_xor.apply(this, arguments); }
        },
        "atomicPointerAdd": {
          "value": function () { return this.atomic_pointer_add.apply(this, arguments); }
        },
        "atomicPointerAnd": {
          "value": function () { return this.atomic_pointer_and.apply(this, arguments); }
        },
        "atomicPointerCompareAndExchange": {
          "value": function () { return this.atomic_pointer_compare_and_exchange.apply(this, arguments); }
        },
        "atomicPointerGet": {
          "value": function () { return this.atomic_pointer_get.apply(this, arguments); }
        },
        "atomicPointerOr": {
          "value": function () { return this.atomic_pointer_or.apply(this, arguments); }
        },
        "atomicPointerSet": {
          "value": function () { return this.atomic_pointer_set.apply(this, arguments); }
        },
        "atomicPointerXor": {
          "value": function () { return this.atomic_pointer_xor.apply(this, arguments); }
        },
        "base64Decode": {
          "value": function () { return this.base64_decode.apply(this, arguments); }
        },
        "base64DecodeInplace": {
          "value": function () { return this.base64_decode_inplace.apply(this, arguments); }
        },
        "base64DecodeStep": {
          "value": function () { return this.base64_decode_step.apply(this, arguments); }
        },
        "base64Encode": {
          "value": function () { return this.base64_encode.apply(this, arguments); }
        },
        "base64EncodeClose": {
          "value": function () { return this.base64_encode_close.apply(this, arguments); }
        },
        "base64EncodeStep": {
          "value": function () { return this.base64_encode_step.apply(this, arguments); }
        },
        "bitLock": {
          "value": function () { return this.bit_lock.apply(this, arguments); }
        },
        "bitNthLsf": {
          "value": function () { return this.bit_nth_lsf.apply(this, arguments); }
        },
        "bitNthMsf": {
          "value": function () { return this.bit_nth_msf.apply(this, arguments); }
        },
        "bitStorage": {
          "value": function () { return this.bit_storage.apply(this, arguments); }
        },
        "bitTrylock": {
          "value": function () { return this.bit_trylock.apply(this, arguments); }
        },
        "bitUnlock": {
          "value": function () { return this.bit_unlock.apply(this, arguments); }
        },
        "bookmarkFileErrorQuark": {
          "value": function () { return this.bookmark_file_error_quark.apply(this, arguments); }
        },
        "buildFilename": {
          "value": function () { return this.build_filename.apply(this, arguments); }
        },
        "buildFilenamev": {
          "value": function () { return this.build_filenamev.apply(this, arguments); }
        },
        "buildPath": {
          "value": function () { return this.build_path.apply(this, arguments); }
        },
        "buildPathv": {
          "value": function () { return this.build_pathv.apply(this, arguments); }
        },
        "byteArrayFree": {
          "value": function () { return this.byte_array_free.apply(this, arguments); }
        },
        "byteArrayFreeToBytes": {
          "value": function () { return this.byte_array_free_to_bytes.apply(this, arguments); }
        },
        "byteArrayNew": {
          "value": function () { return this.byte_array_new.apply(this, arguments); }
        },
        "byteArrayNewTake": {
          "value": function () { return this.byte_array_new_take.apply(this, arguments); }
        },
        "byteArrayUnref": {
          "value": function () { return this.byte_array_unref.apply(this, arguments); }
        },
        "checkVersion": {
          "value": function () { return this.check_version.apply(this, arguments); }
        },
        "checksumTypeGetLength": {
          "value": function () { return this.checksum_type_get_length.apply(this, arguments); }
        },
        "childWatchAdd": {
          "value": function () { return this.child_watch_add.apply(this, arguments); }
        },
        "childWatchAddFull": {
          "value": function () { return this.child_watch_add_full.apply(this, arguments); }
        },
        "childWatchSourceNew": {
          "value": function () { return this.child_watch_source_new.apply(this, arguments); }
        },
        "clearError": {
          "value": function () { return this.clear_error.apply(this, arguments); }
        },
        "clearPointer": {
          "value": function () { return this.clear_pointer.apply(this, arguments); }
        },
        "computeChecksumForBytes": {
          "value": function () { return this.compute_checksum_for_bytes.apply(this, arguments); }
        },
        "computeChecksumForData": {
          "value": function () { return this.compute_checksum_for_data.apply(this, arguments); }
        },
        "computeChecksumForString": {
          "value": function () { return this.compute_checksum_for_string.apply(this, arguments); }
        },
        "computeHmacForData": {
          "value": function () { return this.compute_hmac_for_data.apply(this, arguments); }
        },
        "computeHmacForString": {
          "value": function () { return this.compute_hmac_for_string.apply(this, arguments); }
        },
        "convertErrorQuark": {
          "value": function () { return this.convert_error_quark.apply(this, arguments); }
        },
        "convertWithFallback": {
          "value": function () { return this.convert_with_fallback.apply(this, arguments); }
        },
        "convertWithIconv": {
          "value": function () { return this.convert_with_iconv.apply(this, arguments); }
        },
        "datalistClear": {
          "value": function () { return this.datalist_clear.apply(this, arguments); }
        },
        "datalistForeach": {
          "value": function () { return this.datalist_foreach.apply(this, arguments); }
        },
        "datalistGetData": {
          "value": function () { return this.datalist_get_data.apply(this, arguments); }
        },
        "datalistGetFlags": {
          "value": function () { return this.datalist_get_flags.apply(this, arguments); }
        },
        "datalistIdDupData": {
          "value": function () { return this.datalist_id_dup_data.apply(this, arguments); }
        },
        "datalistIdGetData": {
          "value": function () { return this.datalist_id_get_data.apply(this, arguments); }
        },
        "datalistIdRemoveNoNotify": {
          "value": function () { return this.datalist_id_remove_no_notify.apply(this, arguments); }
        },
        "datalistIdReplaceData": {
          "value": function () { return this.datalist_id_replace_data.apply(this, arguments); }
        },
        "datalistIdSetDataFull": {
          "value": function () { return this.datalist_id_set_data_full.apply(this, arguments); }
        },
        "datalistInit": {
          "value": function () { return this.datalist_init.apply(this, arguments); }
        },
        "datalistSetFlags": {
          "value": function () { return this.datalist_set_flags.apply(this, arguments); }
        },
        "datalistUnsetFlags": {
          "value": function () { return this.datalist_unset_flags.apply(this, arguments); }
        },
        "datasetDestroy": {
          "value": function () { return this.dataset_destroy.apply(this, arguments); }
        },
        "datasetForeach": {
          "value": function () { return this.dataset_foreach.apply(this, arguments); }
        },
        "datasetIdGetData": {
          "value": function () { return this.dataset_id_get_data.apply(this, arguments); }
        },
        "datasetIdRemoveNoNotify": {
          "value": function () { return this.dataset_id_remove_no_notify.apply(this, arguments); }
        },
        "datasetIdSetDataFull": {
          "value": function () { return this.dataset_id_set_data_full.apply(this, arguments); }
        },
        "dateGetDaysInMonth": {
          "value": function () { return this.date_get_days_in_month.apply(this, arguments); }
        },
        "dateGetMondayWeeksInYear": {
          "value": function () { return this.date_get_monday_weeks_in_year.apply(this, arguments); }
        },
        "dateGetSundayWeeksInYear": {
          "value": function () { return this.date_get_sunday_weeks_in_year.apply(this, arguments); }
        },
        "dateIsLeapYear": {
          "value": function () { return this.date_is_leap_year.apply(this, arguments); }
        },
        "dateStrftime": {
          "value": function () { return this.date_strftime.apply(this, arguments); }
        },
        "dateTimeCompare": {
          "value": function () { return this.date_time_compare.apply(this, arguments); }
        },
        "dateTimeEqual": {
          "value": function () { return this.date_time_equal.apply(this, arguments); }
        },
        "dateTimeHash": {
          "value": function () { return this.date_time_hash.apply(this, arguments); }
        },
        "dateValidDay": {
          "value": function () { return this.date_valid_day.apply(this, arguments); }
        },
        "dateValidDmy": {
          "value": function () { return this.date_valid_dmy.apply(this, arguments); }
        },
        "dateValidJulian": {
          "value": function () { return this.date_valid_julian.apply(this, arguments); }
        },
        "dateValidMonth": {
          "value": function () { return this.date_valid_month.apply(this, arguments); }
        },
        "dateValidWeekday": {
          "value": function () { return this.date_valid_weekday.apply(this, arguments); }
        },
        "dateValidYear": {
          "value": function () { return this.date_valid_year.apply(this, arguments); }
        },
        "dirMakeTmp": {
          "value": function () { return this.dir_make_tmp.apply(this, arguments); }
        },
        "directEqual": {
          "value": function () { return this.direct_equal.apply(this, arguments); }
        },
        "directHash": {
          "value": function () { return this.direct_hash.apply(this, arguments); }
        },
        "doubleEqual": {
          "value": function () { return this.double_equal.apply(this, arguments); }
        },
        "doubleHash": {
          "value": function () { return this.double_hash.apply(this, arguments); }
        },
        "environGetenv": {
          "value": function () { return this.environ_getenv.apply(this, arguments); }
        },
        "environSetenv": {
          "value": function () { return this.environ_setenv.apply(this, arguments); }
        },
        "environUnsetenv": {
          "value": function () { return this.environ_unsetenv.apply(this, arguments); }
        },
        "fileErrorFromErrno": {
          "value": function () { return this.file_error_from_errno.apply(this, arguments); }
        },
        "fileErrorQuark": {
          "value": function () { return this.file_error_quark.apply(this, arguments); }
        },
        "fileGetContents": {
          "value": function () { return this.file_get_contents.apply(this, arguments); }
        },
        "fileOpenTmp": {
          "value": function () { return this.file_open_tmp.apply(this, arguments); }
        },
        "fileReadLink": {
          "value": function () { return this.file_read_link.apply(this, arguments); }
        },
        "fileSetContents": {
          "value": function () { return this.file_set_contents.apply(this, arguments); }
        },
        "fileTest": {
          "value": function () { return this.file_test.apply(this, arguments); }
        },
        "filenameDisplayBasename": {
          "value": function () { return this.filename_display_basename.apply(this, arguments); }
        },
        "filenameDisplayName": {
          "value": function () { return this.filename_display_name.apply(this, arguments); }
        },
        "filenameFromUri": {
          "value": function () { return this.filename_from_uri.apply(this, arguments); }
        },
        "filenameFromUtf8": {
          "value": function () { return this.filename_from_utf8.apply(this, arguments); }
        },
        "filenameToUri": {
          "value": function () { return this.filename_to_uri.apply(this, arguments); }
        },
        "filenameToUtf8": {
          "value": function () { return this.filename_to_utf8.apply(this, arguments); }
        },
        "findProgramInPath": {
          "value": function () { return this.find_program_in_path.apply(this, arguments); }
        },
        "formatSize": {
          "value": function () { return this.format_size.apply(this, arguments); }
        },
        "formatSizeForDisplay": {
          "value": function () { return this.format_size_for_display.apply(this, arguments); }
        },
        "formatSizeFull": {
          "value": function () { return this.format_size_full.apply(this, arguments); }
        },
        "getApplicationName": {
          "value": function () { return this.get_application_name.apply(this, arguments); }
        },
        "getCharset": {
          "value": function () { return this.get_charset.apply(this, arguments); }
        },
        "getCodeset": {
          "value": function () { return this.get_codeset.apply(this, arguments); }
        },
        "getCurrentDir": {
          "value": function () { return this.get_current_dir.apply(this, arguments); }
        },
        "getCurrentTime": {
          "value": function () { return this.get_current_time.apply(this, arguments); }
        },
        "getEnviron": {
          "value": function () { return this.get_environ.apply(this, arguments); }
        },
        "getFilenameCharsets": {
          "value": function () { return this.get_filename_charsets.apply(this, arguments); }
        },
        "getHomeDir": {
          "value": function () { return this.get_home_dir.apply(this, arguments); }
        },
        "getHostName": {
          "value": function () { return this.get_host_name.apply(this, arguments); }
        },
        "getLanguageNames": {
          "value": function () { return this.get_language_names.apply(this, arguments); }
        },
        "getLocaleVariants": {
          "value": function () { return this.get_locale_variants.apply(this, arguments); }
        },
        "getMonotonicTime": {
          "value": function () { return this.get_monotonic_time.apply(this, arguments); }
        },
        "getNumProcessors": {
          "value": function () { return this.get_num_processors.apply(this, arguments); }
        },
        "getPrgname": {
          "value": function () { return this.get_prgname.apply(this, arguments); }
        },
        "getRealName": {
          "value": function () { return this.get_real_name.apply(this, arguments); }
        },
        "getRealTime": {
          "value": function () { return this.get_real_time.apply(this, arguments); }
        },
        "getSystemConfigDirs": {
          "value": function () { return this.get_system_config_dirs.apply(this, arguments); }
        },
        "getSystemDataDirs": {
          "value": function () { return this.get_system_data_dirs.apply(this, arguments); }
        },
        "getTmpDir": {
          "value": function () { return this.get_tmp_dir.apply(this, arguments); }
        },
        "getUserCacheDir": {
          "value": function () { return this.get_user_cache_dir.apply(this, arguments); }
        },
        "getUserConfigDir": {
          "value": function () { return this.get_user_config_dir.apply(this, arguments); }
        },
        "getUserDataDir": {
          "value": function () { return this.get_user_data_dir.apply(this, arguments); }
        },
        "getUserName": {
          "value": function () { return this.get_user_name.apply(this, arguments); }
        },
        "getUserRuntimeDir": {
          "value": function () { return this.get_user_runtime_dir.apply(this, arguments); }
        },
        "getUserSpecialDir": {
          "value": function () { return this.get_user_special_dir.apply(this, arguments); }
        },
        "hashTableAdd": {
          "value": function () { return this.hash_table_add.apply(this, arguments); }
        },
        "hashTableContains": {
          "value": function () { return this.hash_table_contains.apply(this, arguments); }
        },
        "hashTableDestroy": {
          "value": function () { return this.hash_table_destroy.apply(this, arguments); }
        },
        "hashTableInsert": {
          "value": function () { return this.hash_table_insert.apply(this, arguments); }
        },
        "hashTableLookupExtended": {
          "value": function () { return this.hash_table_lookup_extended.apply(this, arguments); }
        },
        "hashTableRemove": {
          "value": function () { return this.hash_table_remove.apply(this, arguments); }
        },
        "hashTableRemoveAll": {
          "value": function () { return this.hash_table_remove_all.apply(this, arguments); }
        },
        "hashTableReplace": {
          "value": function () { return this.hash_table_replace.apply(this, arguments); }
        },
        "hashTableSize": {
          "value": function () { return this.hash_table_size.apply(this, arguments); }
        },
        "hashTableSteal": {
          "value": function () { return this.hash_table_steal.apply(this, arguments); }
        },
        "hashTableStealAll": {
          "value": function () { return this.hash_table_steal_all.apply(this, arguments); }
        },
        "hashTableUnref": {
          "value": function () { return this.hash_table_unref.apply(this, arguments); }
        },
        "hookDestroy": {
          "value": function () { return this.hook_destroy.apply(this, arguments); }
        },
        "hookDestroyLink": {
          "value": function () { return this.hook_destroy_link.apply(this, arguments); }
        },
        "hookFree": {
          "value": function () { return this.hook_free.apply(this, arguments); }
        },
        "hookInsertBefore": {
          "value": function () { return this.hook_insert_before.apply(this, arguments); }
        },
        "hookPrepend": {
          "value": function () { return this.hook_prepend.apply(this, arguments); }
        },
        "hookUnref": {
          "value": function () { return this.hook_unref.apply(this, arguments); }
        },
        "hostnameIsAsciiEncoded": {
          "value": function () { return this.hostname_is_ascii_encoded.apply(this, arguments); }
        },
        "hostnameIsIpAddress": {
          "value": function () { return this.hostname_is_ip_address.apply(this, arguments); }
        },
        "hostnameIsNonAscii": {
          "value": function () { return this.hostname_is_non_ascii.apply(this, arguments); }
        },
        "hostnameToAscii": {
          "value": function () { return this.hostname_to_ascii.apply(this, arguments); }
        },
        "hostnameToUnicode": {
          "value": function () { return this.hostname_to_unicode.apply(this, arguments); }
        },
        "idleAdd": {
          "value": function () { return this.idle_add.apply(this, arguments); }
        },
        "idleAddFull": {
          "value": function () { return this.idle_add_full.apply(this, arguments); }
        },
        "idleRemoveByData": {
          "value": function () { return this.idle_remove_by_data.apply(this, arguments); }
        },
        "idleSourceNew": {
          "value": function () { return this.idle_source_new.apply(this, arguments); }
        },
        "int64Equal": {
          "value": function () { return this.int64_equal.apply(this, arguments); }
        },
        "int64Hash": {
          "value": function () { return this.int64_hash.apply(this, arguments); }
        },
        "intEqual": {
          "value": function () { return this.int_equal.apply(this, arguments); }
        },
        "intHash": {
          "value": function () { return this.int_hash.apply(this, arguments); }
        },
        "internStaticString": {
          "value": function () { return this.intern_static_string.apply(this, arguments); }
        },
        "internString": {
          "value": function () { return this.intern_string.apply(this, arguments); }
        },
        "ioAddWatch": {
          "value": function () { return this.io_add_watch.apply(this, arguments); }
        },
        "ioAddWatchFull": {
          "value": function () { return this.io_add_watch_full.apply(this, arguments); }
        },
        "ioChannelErrorFromErrno": {
          "value": function () { return this.io_channel_error_from_errno.apply(this, arguments); }
        },
        "ioChannelErrorQuark": {
          "value": function () { return this.io_channel_error_quark.apply(this, arguments); }
        },
        "ioCreateWatch": {
          "value": function () { return this.io_create_watch.apply(this, arguments); }
        },
        "keyFileErrorQuark": {
          "value": function () { return this.key_file_error_quark.apply(this, arguments); }
        },
        "localeFromUtf8": {
          "value": function () { return this.locale_from_utf8.apply(this, arguments); }
        },
        "localeToUtf8": {
          "value": function () { return this.locale_to_utf8.apply(this, arguments); }
        },
        "logDefaultHandler": {
          "value": function () { return this.log_default_handler.apply(this, arguments); }
        },
        "logRemoveHandler": {
          "value": function () { return this.log_remove_handler.apply(this, arguments); }
        },
        "logSetAlwaysFatal": {
          "value": function () { return this.log_set_always_fatal.apply(this, arguments); }
        },
        "logSetDefaultHandler": {
          "value": function () { return this.log_set_default_handler.apply(this, arguments); }
        },
        "logSetFatalMask": {
          "value": function () { return this.log_set_fatal_mask.apply(this, arguments); }
        },
        "logSetHandler": {
          "value": function () { return this.log_set_handler.apply(this, arguments); }
        },
        "logSetHandlerFull": {
          "value": function () { return this.log_set_handler_full.apply(this, arguments); }
        },
        "mainContextDefault": {
          "value": function () { return this.main_context_default.apply(this, arguments); }
        },
        "mainContextGetThreadDefault": {
          "value": function () { return this.main_context_get_thread_default.apply(this, arguments); }
        },
        "mainContextRefThreadDefault": {
          "value": function () { return this.main_context_ref_thread_default.apply(this, arguments); }
        },
        "mainCurrentSource": {
          "value": function () { return this.main_current_source.apply(this, arguments); }
        },
        "mainDepth": {
          "value": function () { return this.main_depth.apply(this, arguments); }
        },
        "malloc0N": {
          "value": function () { return this.malloc0_n.apply(this, arguments); }
        },
        "mallocN": {
          "value": function () { return this.malloc_n.apply(this, arguments); }
        },
        "markupCollectAttributes": {
          "value": function () { return this.markup_collect_attributes.apply(this, arguments); }
        },
        "markupErrorQuark": {
          "value": function () { return this.markup_error_quark.apply(this, arguments); }
        },
        "markupEscapeText": {
          "value": function () { return this.markup_escape_text.apply(this, arguments); }
        },
        "markupPrintfEscaped": {
          "value": function () { return this.markup_printf_escaped.apply(this, arguments); }
        },
        "markupVprintfEscaped": {
          "value": function () { return this.markup_vprintf_escaped.apply(this, arguments); }
        },
        "memIsSystemMalloc": {
          "value": function () { return this.mem_is_system_malloc.apply(this, arguments); }
        },
        "memProfile": {
          "value": function () { return this.mem_profile.apply(this, arguments); }
        },
        "memSetVtable": {
          "value": function () { return this.mem_set_vtable.apply(this, arguments); }
        },
        "mkdirWithParents": {
          "value": function () { return this.mkdir_with_parents.apply(this, arguments); }
        },
        "mkdtempFull": {
          "value": function () { return this.mkdtemp_full.apply(this, arguments); }
        },
        "mkstempFull": {
          "value": function () { return this.mkstemp_full.apply(this, arguments); }
        },
        "nullifyPointer": {
          "value": function () { return this.nullify_pointer.apply(this, arguments); }
        },
        "onErrorQuery": {
          "value": function () { return this.on_error_query.apply(this, arguments); }
        },
        "onErrorStackTrace": {
          "value": function () { return this.on_error_stack_trace.apply(this, arguments); }
        },
        "onceInitEnter": {
          "value": function () { return this.once_init_enter.apply(this, arguments); }
        },
        "onceInitLeave": {
          "value": function () { return this.once_init_leave.apply(this, arguments); }
        },
        "optionErrorQuark": {
          "value": function () { return this.option_error_quark.apply(this, arguments); }
        },
        "parseDebugString": {
          "value": function () { return this.parse_debug_string.apply(this, arguments); }
        },
        "pathGetBasename": {
          "value": function () { return this.path_get_basename.apply(this, arguments); }
        },
        "pathGetDirname": {
          "value": function () { return this.path_get_dirname.apply(this, arguments); }
        },
        "pathIsAbsolute": {
          "value": function () { return this.path_is_absolute.apply(this, arguments); }
        },
        "pathSkipRoot": {
          "value": function () { return this.path_skip_root.apply(this, arguments); }
        },
        "patternMatch": {
          "value": function () { return this.pattern_match.apply(this, arguments); }
        },
        "patternMatchSimple": {
          "value": function () { return this.pattern_match_simple.apply(this, arguments); }
        },
        "patternMatchString": {
          "value": function () { return this.pattern_match_string.apply(this, arguments); }
        },
        "pointerBitLock": {
          "value": function () { return this.pointer_bit_lock.apply(this, arguments); }
        },
        "pointerBitTrylock": {
          "value": function () { return this.pointer_bit_trylock.apply(this, arguments); }
        },
        "pointerBitUnlock": {
          "value": function () { return this.pointer_bit_unlock.apply(this, arguments); }
        },
        "prefixError": {
          "value": function () { return this.prefix_error.apply(this, arguments); }
        },
        "printfStringUpperBound": {
          "value": function () { return this.printf_string_upper_bound.apply(this, arguments); }
        },
        "propagateError": {
          "value": function () { return this.propagate_error.apply(this, arguments); }
        },
        "propagatePrefixedError": {
          "value": function () { return this.propagate_prefixed_error.apply(this, arguments); }
        },
        "qsortWithData": {
          "value": function () { return this.qsort_with_data.apply(this, arguments); }
        },
        "quarkFromStaticString": {
          "value": function () { return this.quark_from_static_string.apply(this, arguments); }
        },
        "quarkFromString": {
          "value": function () { return this.quark_from_string.apply(this, arguments); }
        },
        "quarkToString": {
          "value": function () { return this.quark_to_string.apply(this, arguments); }
        },
        "quarkTryString": {
          "value": function () { return this.quark_try_string.apply(this, arguments); }
        },
        "randomDouble": {
          "value": function () { return this.random_double.apply(this, arguments); }
        },
        "randomDoubleRange": {
          "value": function () { return this.random_double_range.apply(this, arguments); }
        },
        "randomInt": {
          "value": function () { return this.random_int.apply(this, arguments); }
        },
        "randomIntRange": {
          "value": function () { return this.random_int_range.apply(this, arguments); }
        },
        "randomSetSeed": {
          "value": function () { return this.random_set_seed.apply(this, arguments); }
        },
        "reallocN": {
          "value": function () { return this.realloc_n.apply(this, arguments); }
        },
        "regexCheckReplacement": {
          "value": function () { return this.regex_check_replacement.apply(this, arguments); }
        },
        "regexErrorQuark": {
          "value": function () { return this.regex_error_quark.apply(this, arguments); }
        },
        "regexEscapeNul": {
          "value": function () { return this.regex_escape_nul.apply(this, arguments); }
        },
        "regexEscapeString": {
          "value": function () { return this.regex_escape_string.apply(this, arguments); }
        },
        "regexMatchSimple": {
          "value": function () { return this.regex_match_simple.apply(this, arguments); }
        },
        "regexSplitSimple": {
          "value": function () { return this.regex_split_simple.apply(this, arguments); }
        },
        "reloadUserSpecialDirsCache": {
          "value": function () { return this.reload_user_special_dirs_cache.apply(this, arguments); }
        },
        "returnIfFailWarning": {
          "value": function () { return this.return_if_fail_warning.apply(this, arguments); }
        },
        "sequenceMove": {
          "value": function () { return this.sequence_move.apply(this, arguments); }
        },
        "sequenceMoveRange": {
          "value": function () { return this.sequence_move_range.apply(this, arguments); }
        },
        "sequenceRemove": {
          "value": function () { return this.sequence_remove.apply(this, arguments); }
        },
        "sequenceRemoveRange": {
          "value": function () { return this.sequence_remove_range.apply(this, arguments); }
        },
        "sequenceSet": {
          "value": function () { return this.sequence_set.apply(this, arguments); }
        },
        "sequenceSwap": {
          "value": function () { return this.sequence_swap.apply(this, arguments); }
        },
        "setApplicationName": {
          "value": function () { return this.set_application_name.apply(this, arguments); }
        },
        "setError": {
          "value": function () { return this.set_error.apply(this, arguments); }
        },
        "setErrorLiteral": {
          "value": function () { return this.set_error_literal.apply(this, arguments); }
        },
        "setPrgname": {
          "value": function () { return this.set_prgname.apply(this, arguments); }
        },
        "setPrintHandler": {
          "value": function () { return this.set_print_handler.apply(this, arguments); }
        },
        "setPrinterrHandler": {
          "value": function () { return this.set_printerr_handler.apply(this, arguments); }
        },
        "shellErrorQuark": {
          "value": function () { return this.shell_error_quark.apply(this, arguments); }
        },
        "shellParseArgv": {
          "value": function () { return this.shell_parse_argv.apply(this, arguments); }
        },
        "shellQuote": {
          "value": function () { return this.shell_quote.apply(this, arguments); }
        },
        "shellUnquote": {
          "value": function () { return this.shell_unquote.apply(this, arguments); }
        },
        "sliceAlloc": {
          "value": function () { return this.slice_alloc.apply(this, arguments); }
        },
        "sliceAlloc0": {
          "value": function () { return this.slice_alloc0.apply(this, arguments); }
        },
        "sliceCopy": {
          "value": function () { return this.slice_copy.apply(this, arguments); }
        },
        "sliceFree1": {
          "value": function () { return this.slice_free1.apply(this, arguments); }
        },
        "sliceFreeChainWithOffset": {
          "value": function () { return this.slice_free_chain_with_offset.apply(this, arguments); }
        },
        "sliceGetConfig": {
          "value": function () { return this.slice_get_config.apply(this, arguments); }
        },
        "sliceGetConfigState": {
          "value": function () { return this.slice_get_config_state.apply(this, arguments); }
        },
        "sliceSetConfig": {
          "value": function () { return this.slice_set_config.apply(this, arguments); }
        },
        "sourceRemove": {
          "value": function () { return this.source_remove.apply(this, arguments); }
        },
        "sourceRemoveByFuncsUserData": {
          "value": function () { return this.source_remove_by_funcs_user_data.apply(this, arguments); }
        },
        "sourceRemoveByUserData": {
          "value": function () { return this.source_remove_by_user_data.apply(this, arguments); }
        },
        "sourceSetNameById": {
          "value": function () { return this.source_set_name_by_id.apply(this, arguments); }
        },
        "spacedPrimesClosest": {
          "value": function () { return this.spaced_primes_closest.apply(this, arguments); }
        },
        "spawnAsync": {
          "value": function () { return this.spawn_async.apply(this, arguments); }
        },
        "spawnAsyncWithPipes": {
          "value": function () { return this.spawn_async_with_pipes.apply(this, arguments); }
        },
        "spawnCheckExitStatus": {
          "value": function () { return this.spawn_check_exit_status.apply(this, arguments); }
        },
        "spawnClosePid": {
          "value": function () { return this.spawn_close_pid.apply(this, arguments); }
        },
        "spawnCommandLineAsync": {
          "value": function () { return this.spawn_command_line_async.apply(this, arguments); }
        },
        "spawnCommandLineSync": {
          "value": function () { return this.spawn_command_line_sync.apply(this, arguments); }
        },
        "spawnErrorQuark": {
          "value": function () { return this.spawn_error_quark.apply(this, arguments); }
        },
        "spawnExitErrorQuark": {
          "value": function () { return this.spawn_exit_error_quark.apply(this, arguments); }
        },
        "spawnSync": {
          "value": function () { return this.spawn_sync.apply(this, arguments); }
        },
        "strEqual": {
          "value": function () { return this.str_equal.apply(this, arguments); }
        },
        "strHasPrefix": {
          "value": function () { return this.str_has_prefix.apply(this, arguments); }
        },
        "strHasSuffix": {
          "value": function () { return this.str_has_suffix.apply(this, arguments); }
        },
        "strHash": {
          "value": function () { return this.str_hash.apply(this, arguments); }
        },
        "strIsAscii": {
          "value": function () { return this.str_is_ascii.apply(this, arguments); }
        },
        "strMatchString": {
          "value": function () { return this.str_match_string.apply(this, arguments); }
        },
        "strToAscii": {
          "value": function () { return this.str_to_ascii.apply(this, arguments); }
        },
        "strTokenizeAndFold": {
          "value": function () { return this.str_tokenize_and_fold.apply(this, arguments); }
        },
        "strdupPrintf": {
          "value": function () { return this.strdup_printf.apply(this, arguments); }
        },
        "strdupVprintf": {
          "value": function () { return this.strdup_vprintf.apply(this, arguments); }
        },
        "stringNew": {
          "value": function () { return this.string_new.apply(this, arguments); }
        },
        "stringNewLen": {
          "value": function () { return this.string_new_len.apply(this, arguments); }
        },
        "stringSizedNew": {
          "value": function () { return this.string_sized_new.apply(this, arguments); }
        },
        "stripContext": {
          "value": function () { return this.strip_context.apply(this, arguments); }
        },
        "strrstrLen": {
          "value": function () { return this.strrstr_len.apply(this, arguments); }
        },
        "strsplitSet": {
          "value": function () { return this.strsplit_set.apply(this, arguments); }
        },
        "strstrLen": {
          "value": function () { return this.strstr_len.apply(this, arguments); }
        },
        "strvContains": {
          "value": function () { return this.strv_contains.apply(this, arguments); }
        },
        "strvGetType": {
          "value": function () { return this.strv_get_type.apply(this, arguments); }
        },
        "strvLength": {
          "value": function () { return this.strv_length.apply(this, arguments); }
        },
        "testAddDataFunc": {
          "value": function () { return this.test_add_data_func.apply(this, arguments); }
        },
        "testAddDataFuncFull": {
          "value": function () { return this.test_add_data_func_full.apply(this, arguments); }
        },
        "testAddFunc": {
          "value": function () { return this.test_add_func.apply(this, arguments); }
        },
        "testAddVtable": {
          "value": function () { return this.test_add_vtable.apply(this, arguments); }
        },
        "testAssertExpectedMessagesInternal": {
          "value": function () { return this.test_assert_expected_messages_internal.apply(this, arguments); }
        },
        "testBug": {
          "value": function () { return this.test_bug.apply(this, arguments); }
        },
        "testBugBase": {
          "value": function () { return this.test_bug_base.apply(this, arguments); }
        },
        "testBuildFilename": {
          "value": function () { return this.test_build_filename.apply(this, arguments); }
        },
        "testCreateCase": {
          "value": function () { return this.test_create_case.apply(this, arguments); }
        },
        "testCreateSuite": {
          "value": function () { return this.test_create_suite.apply(this, arguments); }
        },
        "testExpectMessage": {
          "value": function () { return this.test_expect_message.apply(this, arguments); }
        },
        "testFail": {
          "value": function () { return this.test_fail.apply(this, arguments); }
        },
        "testFailed": {
          "value": function () { return this.test_failed.apply(this, arguments); }
        },
        "testGetDir": {
          "value": function () { return this.test_get_dir.apply(this, arguments); }
        },
        "testGetFilename": {
          "value": function () { return this.test_get_filename.apply(this, arguments); }
        },
        "testGetRoot": {
          "value": function () { return this.test_get_root.apply(this, arguments); }
        },
        "testIncomplete": {
          "value": function () { return this.test_incomplete.apply(this, arguments); }
        },
        "testInit": {
          "value": function () { return this.test_init.apply(this, arguments); }
        },
        "testLogSetFatalHandler": {
          "value": function () { return this.test_log_set_fatal_handler.apply(this, arguments); }
        },
        "testLogTypeName": {
          "value": function () { return this.test_log_type_name.apply(this, arguments); }
        },
        "testMaximizedResult": {
          "value": function () { return this.test_maximized_result.apply(this, arguments); }
        },
        "testMessage": {
          "value": function () { return this.test_message.apply(this, arguments); }
        },
        "testMinimizedResult": {
          "value": function () { return this.test_minimized_result.apply(this, arguments); }
        },
        "testQueueDestroy": {
          "value": function () { return this.test_queue_destroy.apply(this, arguments); }
        },
        "testQueueFree": {
          "value": function () { return this.test_queue_free.apply(this, arguments); }
        },
        "testRandDouble": {
          "value": function () { return this.test_rand_double.apply(this, arguments); }
        },
        "testRandDoubleRange": {
          "value": function () { return this.test_rand_double_range.apply(this, arguments); }
        },
        "testRandInt": {
          "value": function () { return this.test_rand_int.apply(this, arguments); }
        },
        "testRandIntRange": {
          "value": function () { return this.test_rand_int_range.apply(this, arguments); }
        },
        "testRun": {
          "value": function () { return this.test_run.apply(this, arguments); }
        },
        "testRunSuite": {
          "value": function () { return this.test_run_suite.apply(this, arguments); }
        },
        "testSetNonfatalAssertions": {
          "value": function () { return this.test_set_nonfatal_assertions.apply(this, arguments); }
        },
        "testSkip": {
          "value": function () { return this.test_skip.apply(this, arguments); }
        },
        "testSubprocess": {
          "value": function () { return this.test_subprocess.apply(this, arguments); }
        },
        "testTimerElapsed": {
          "value": function () { return this.test_timer_elapsed.apply(this, arguments); }
        },
        "testTimerLast": {
          "value": function () { return this.test_timer_last.apply(this, arguments); }
        },
        "testTimerStart": {
          "value": function () { return this.test_timer_start.apply(this, arguments); }
        },
        "testTrapAssertions": {
          "value": function () { return this.test_trap_assertions.apply(this, arguments); }
        },
        "testTrapFork": {
          "value": function () { return this.test_trap_fork.apply(this, arguments); }
        },
        "testTrapHasPassed": {
          "value": function () { return this.test_trap_has_passed.apply(this, arguments); }
        },
        "testTrapReachedTimeout": {
          "value": function () { return this.test_trap_reached_timeout.apply(this, arguments); }
        },
        "testTrapSubprocess": {
          "value": function () { return this.test_trap_subprocess.apply(this, arguments); }
        },
        "threadErrorQuark": {
          "value": function () { return this.thread_error_quark.apply(this, arguments); }
        },
        "threadExit": {
          "value": function () { return this.thread_exit.apply(this, arguments); }
        },
        "threadPoolGetMaxIdleTime": {
          "value": function () { return this.thread_pool_get_max_idle_time.apply(this, arguments); }
        },
        "threadPoolGetMaxUnusedThreads": {
          "value": function () { return this.thread_pool_get_max_unused_threads.apply(this, arguments); }
        },
        "threadPoolGetNumUnusedThreads": {
          "value": function () { return this.thread_pool_get_num_unused_threads.apply(this, arguments); }
        },
        "threadPoolSetMaxIdleTime": {
          "value": function () { return this.thread_pool_set_max_idle_time.apply(this, arguments); }
        },
        "threadPoolSetMaxUnusedThreads": {
          "value": function () { return this.thread_pool_set_max_unused_threads.apply(this, arguments); }
        },
        "threadPoolStopUnusedThreads": {
          "value": function () { return this.thread_pool_stop_unused_threads.apply(this, arguments); }
        },
        "threadSelf": {
          "value": function () { return this.thread_self.apply(this, arguments); }
        },
        "threadYield": {
          "value": function () { return this.thread_yield.apply(this, arguments); }
        },
        "timeValFromIso8601": {
          "value": function () { return this.time_val_from_iso8601.apply(this, arguments); }
        },
        "timeoutAdd": {
          "value": function () { return this.timeout_add.apply(this, arguments); }
        },
        "timeoutAddFull": {
          "value": function () { return this.timeout_add_full.apply(this, arguments); }
        },
        "timeoutAddSeconds": {
          "value": function () { return this.timeout_add_seconds.apply(this, arguments); }
        },
        "timeoutAddSecondsFull": {
          "value": function () { return this.timeout_add_seconds_full.apply(this, arguments); }
        },
        "timeoutSourceNew": {
          "value": function () { return this.timeout_source_new.apply(this, arguments); }
        },
        "timeoutSourceNewSeconds": {
          "value": function () { return this.timeout_source_new_seconds.apply(this, arguments); }
        },
        "trashStackHeight": {
          "value": function () { return this.trash_stack_height.apply(this, arguments); }
        },
        "trashStackPush": {
          "value": function () { return this.trash_stack_push.apply(this, arguments); }
        },
        "tryMalloc": {
          "value": function () { return this.try_malloc.apply(this, arguments); }
        },
        "tryMalloc0": {
          "value": function () { return this.try_malloc0.apply(this, arguments); }
        },
        "tryMalloc0N": {
          "value": function () { return this.try_malloc0_n.apply(this, arguments); }
        },
        "tryMallocN": {
          "value": function () { return this.try_malloc_n.apply(this, arguments); }
        },
        "tryRealloc": {
          "value": function () { return this.try_realloc.apply(this, arguments); }
        },
        "tryReallocN": {
          "value": function () { return this.try_realloc_n.apply(this, arguments); }
        },
        "ucs4ToUtf16": {
          "value": function () { return this.ucs4_to_utf16.apply(this, arguments); }
        },
        "ucs4ToUtf8": {
          "value": function () { return this.ucs4_to_utf8.apply(this, arguments); }
        },
        "unicharBreakType": {
          "value": function () { return this.unichar_break_type.apply(this, arguments); }
        },
        "unicharCombiningClass": {
          "value": function () { return this.unichar_combining_class.apply(this, arguments); }
        },
        "unicharCompose": {
          "value": function () { return this.unichar_compose.apply(this, arguments); }
        },
        "unicharDecompose": {
          "value": function () { return this.unichar_decompose.apply(this, arguments); }
        },
        "unicharDigitValue": {
          "value": function () { return this.unichar_digit_value.apply(this, arguments); }
        },
        "unicharFullyDecompose": {
          "value": function () { return this.unichar_fully_decompose.apply(this, arguments); }
        },
        "unicharGetMirrorChar": {
          "value": function () { return this.unichar_get_mirror_char.apply(this, arguments); }
        },
        "unicharGetScript": {
          "value": function () { return this.unichar_get_script.apply(this, arguments); }
        },
        "unicharIsalnum": {
          "value": function () { return this.unichar_isalnum.apply(this, arguments); }
        },
        "unicharIsalpha": {
          "value": function () { return this.unichar_isalpha.apply(this, arguments); }
        },
        "unicharIscntrl": {
          "value": function () { return this.unichar_iscntrl.apply(this, arguments); }
        },
        "unicharIsdefined": {
          "value": function () { return this.unichar_isdefined.apply(this, arguments); }
        },
        "unicharIsdigit": {
          "value": function () { return this.unichar_isdigit.apply(this, arguments); }
        },
        "unicharIsgraph": {
          "value": function () { return this.unichar_isgraph.apply(this, arguments); }
        },
        "unicharIslower": {
          "value": function () { return this.unichar_islower.apply(this, arguments); }
        },
        "unicharIsmark": {
          "value": function () { return this.unichar_ismark.apply(this, arguments); }
        },
        "unicharIsprint": {
          "value": function () { return this.unichar_isprint.apply(this, arguments); }
        },
        "unicharIspunct": {
          "value": function () { return this.unichar_ispunct.apply(this, arguments); }
        },
        "unicharIsspace": {
          "value": function () { return this.unichar_isspace.apply(this, arguments); }
        },
        "unicharIstitle": {
          "value": function () { return this.unichar_istitle.apply(this, arguments); }
        },
        "unicharIsupper": {
          "value": function () { return this.unichar_isupper.apply(this, arguments); }
        },
        "unicharIswide": {
          "value": function () { return this.unichar_iswide.apply(this, arguments); }
        },
        "unicharIswideCjk": {
          "value": function () { return this.unichar_iswide_cjk.apply(this, arguments); }
        },
        "unicharIsxdigit": {
          "value": function () { return this.unichar_isxdigit.apply(this, arguments); }
        },
        "unicharIszerowidth": {
          "value": function () { return this.unichar_iszerowidth.apply(this, arguments); }
        },
        "unicharToUtf8": {
          "value": function () { return this.unichar_to_utf8.apply(this, arguments); }
        },
        "unicharTolower": {
          "value": function () { return this.unichar_tolower.apply(this, arguments); }
        },
        "unicharTotitle": {
          "value": function () { return this.unichar_totitle.apply(this, arguments); }
        },
        "unicharToupper": {
          "value": function () { return this.unichar_toupper.apply(this, arguments); }
        },
        "unicharType": {
          "value": function () { return this.unichar_type.apply(this, arguments); }
        },
        "unicharValidate": {
          "value": function () { return this.unichar_validate.apply(this, arguments); }
        },
        "unicharXdigitValue": {
          "value": function () { return this.unichar_xdigit_value.apply(this, arguments); }
        },
        "unicodeCanonicalDecomposition": {
          "value": function () { return this.unicode_canonical_decomposition.apply(this, arguments); }
        },
        "unicodeCanonicalOrdering": {
          "value": function () { return this.unicode_canonical_ordering.apply(this, arguments); }
        },
        "unicodeScriptFromIso15924": {
          "value": function () { return this.unicode_script_from_iso15924.apply(this, arguments); }
        },
        "unicodeScriptToIso15924": {
          "value": function () { return this.unicode_script_to_iso15924.apply(this, arguments); }
        },
        "unixErrorQuark": {
          "value": function () { return this.unix_error_quark.apply(this, arguments); }
        },
        "unixFdAdd": {
          "value": function () { return this.unix_fd_add.apply(this, arguments); }
        },
        "unixFdAddFull": {
          "value": function () { return this.unix_fd_add_full.apply(this, arguments); }
        },
        "unixFdSourceNew": {
          "value": function () { return this.unix_fd_source_new.apply(this, arguments); }
        },
        "unixOpenPipe": {
          "value": function () { return this.unix_open_pipe.apply(this, arguments); }
        },
        "unixSetFdNonblocking": {
          "value": function () { return this.unix_set_fd_nonblocking.apply(this, arguments); }
        },
        "unixSignalAdd": {
          "value": function () { return this.unix_signal_add.apply(this, arguments); }
        },
        "unixSignalAddFull": {
          "value": function () { return this.unix_signal_add_full.apply(this, arguments); }
        },
        "unixSignalSourceNew": {
          "value": function () { return this.unix_signal_source_new.apply(this, arguments); }
        },
        "uriEscapeString": {
          "value": function () { return this.uri_escape_string.apply(this, arguments); }
        },
        "uriListExtractUris": {
          "value": function () { return this.uri_list_extract_uris.apply(this, arguments); }
        },
        "uriParseScheme": {
          "value": function () { return this.uri_parse_scheme.apply(this, arguments); }
        },
        "uriUnescapeSegment": {
          "value": function () { return this.uri_unescape_segment.apply(this, arguments); }
        },
        "uriUnescapeString": {
          "value": function () { return this.uri_unescape_string.apply(this, arguments); }
        },
        "utf16ToUcs4": {
          "value": function () { return this.utf16_to_ucs4.apply(this, arguments); }
        },
        "utf16ToUtf8": {
          "value": function () { return this.utf16_to_utf8.apply(this, arguments); }
        },
        "utf8Casefold": {
          "value": function () { return this.utf8_casefold.apply(this, arguments); }
        },
        "utf8Collate": {
          "value": function () { return this.utf8_collate.apply(this, arguments); }
        },
        "utf8CollateKey": {
          "value": function () { return this.utf8_collate_key.apply(this, arguments); }
        },
        "utf8CollateKeyForFilename": {
          "value": function () { return this.utf8_collate_key_for_filename.apply(this, arguments); }
        },
        "utf8FindNextChar": {
          "value": function () { return this.utf8_find_next_char.apply(this, arguments); }
        },
        "utf8FindPrevChar": {
          "value": function () { return this.utf8_find_prev_char.apply(this, arguments); }
        },
        "utf8GetChar": {
          "value": function () { return this.utf8_get_char.apply(this, arguments); }
        },
        "utf8GetCharValidated": {
          "value": function () { return this.utf8_get_char_validated.apply(this, arguments); }
        },
        "utf8Normalize": {
          "value": function () { return this.utf8_normalize.apply(this, arguments); }
        },
        "utf8OffsetToPointer": {
          "value": function () { return this.utf8_offset_to_pointer.apply(this, arguments); }
        },
        "utf8PointerToOffset": {
          "value": function () { return this.utf8_pointer_to_offset.apply(this, arguments); }
        },
        "utf8PrevChar": {
          "value": function () { return this.utf8_prev_char.apply(this, arguments); }
        },
        "utf8Strchr": {
          "value": function () { return this.utf8_strchr.apply(this, arguments); }
        },
        "utf8Strdown": {
          "value": function () { return this.utf8_strdown.apply(this, arguments); }
        },
        "utf8Strlen": {
          "value": function () { return this.utf8_strlen.apply(this, arguments); }
        },
        "utf8Strncpy": {
          "value": function () { return this.utf8_strncpy.apply(this, arguments); }
        },
        "utf8Strrchr": {
          "value": function () { return this.utf8_strrchr.apply(this, arguments); }
        },
        "utf8Strreverse": {
          "value": function () { return this.utf8_strreverse.apply(this, arguments); }
        },
        "utf8Strup": {
          "value": function () { return this.utf8_strup.apply(this, arguments); }
        },
        "utf8Substring": {
          "value": function () { return this.utf8_substring.apply(this, arguments); }
        },
        "utf8ToUcs4": {
          "value": function () { return this.utf8_to_ucs4.apply(this, arguments); }
        },
        "utf8ToUcs4Fast": {
          "value": function () { return this.utf8_to_ucs4_fast.apply(this, arguments); }
        },
        "utf8ToUtf16": {
          "value": function () { return this.utf8_to_utf16.apply(this, arguments); }
        },
        "utf8Validate": {
          "value": function () { return this.utf8_validate.apply(this, arguments); }
        },
        "variantGetGtype": {
          "value": function () { return this.variant_get_gtype.apply(this, arguments); }
        },
        "variantIsObjectPath": {
          "value": function () { return this.variant_is_object_path.apply(this, arguments); }
        },
        "variantIsSignature": {
          "value": function () { return this.variant_is_signature.apply(this, arguments); }
        },
        "variantParse": {
          "value": function () { return this.variant_parse.apply(this, arguments); }
        },
        "variantParseErrorPrintContext": {
          "value": function () { return this.variant_parse_error_print_context.apply(this, arguments); }
        },
        "variantParseErrorQuark": {
          "value": function () { return this.variant_parse_error_quark.apply(this, arguments); }
        },
        "variantParserGetErrorQuark": {
          "value": function () { return this.variant_parser_get_error_quark.apply(this, arguments); }
        },
        "variantTypeChecked_": {
          "value": function () { return this.variant_type_checked_.apply(this, arguments); }
        },
        "variantTypeStringIsValid": {
          "value": function () { return this.variant_type_string_is_valid.apply(this, arguments); }
        },
        "variantTypeStringScan": {
          "value": function () { return this.variant_type_string_scan.apply(this, arguments); }
        },
        "warnMessage": {
          "value": function () { return this.warn_message.apply(this, arguments); }
        }
      }
    },
    "GMenu": {
      "class": {
        "Tree": {
          "prototype": {
            "getCanonicalMenuPath": {
              "value": function () { return this.get_canonical_menu_path.apply(this, arguments); }
            },
            "getDirectoryFromPath": {
              "value": function () { return this.get_directory_from_path.apply(this, arguments); }
            },
            "getEntryById": {
              "value": function () { return this.get_entry_by_id.apply(this, arguments); }
            },
            "getRootDirectory": {
              "value": function () { return this.get_root_directory.apply(this, arguments); }
            },
            "loadSync": {
              "value": function () { return this.load_sync.apply(this, arguments); }
            },
            "menuBasename": {
              "get": function () { return this.menu_basename; },
              "set": function (value) { this.menu_basename = value; }
            },
            "menuPath": {
              "get": function () { return this.menu_path; },
              "set": function (value) { this.menu_path = value; }
            }
          },
          "static": {
            "itemRef": {
              "value": function () { return this.item_ref.apply(this, arguments); }
            },
            "itemUnref": {
              "value": function () { return this.item_unref.apply(this, arguments); }
            }
          }
        }
      },
      "static": {}
    },
    "GMime": {
      "class": {
        "Certificate": {
          "prototype": {
            "getCreated": {
              "value": function () { return this.get_created.apply(this, arguments); }
            },
            "getDigestAlgo": {
              "value": function () { return this.get_digest_algo.apply(this, arguments); }
            },
            "getEmail": {
              "value": function () { return this.get_email.apply(this, arguments); }
            },
            "getExpires": {
              "value": function () { return this.get_expires.apply(this, arguments); }
            },
            "getFingerprint": {
              "value": function () { return this.get_fingerprint.apply(this, arguments); }
            },
            "getIssuerName": {
              "value": function () { return this.get_issuer_name.apply(this, arguments); }
            },
            "getIssuerSerial": {
              "value": function () { return this.get_issuer_serial.apply(this, arguments); }
            },
            "getKeyId": {
              "value": function () { return this.get_key_id.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getPubkeyAlgo": {
              "value": function () { return this.get_pubkey_algo.apply(this, arguments); }
            },
            "getTrust": {
              "value": function () { return this.get_trust.apply(this, arguments); }
            },
            "setCreated": {
              "value": function () { return this.set_created.apply(this, arguments); }
            },
            "setDigestAlgo": {
              "value": function () { return this.set_digest_algo.apply(this, arguments); }
            },
            "setEmail": {
              "value": function () { return this.set_email.apply(this, arguments); }
            },
            "setExpires": {
              "value": function () { return this.set_expires.apply(this, arguments); }
            },
            "setFingerprint": {
              "value": function () { return this.set_fingerprint.apply(this, arguments); }
            },
            "setIssuerName": {
              "value": function () { return this.set_issuer_name.apply(this, arguments); }
            },
            "setIssuerSerial": {
              "value": function () { return this.set_issuer_serial.apply(this, arguments); }
            },
            "setKeyId": {
              "value": function () { return this.set_key_id.apply(this, arguments); }
            },
            "setName": {
              "value": function () { return this.set_name.apply(this, arguments); }
            },
            "setPubkeyAlgo": {
              "value": function () { return this.set_pubkey_algo.apply(this, arguments); }
            },
            "setTrust": {
              "value": function () { return this.set_trust.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "CertificateList": {
          "prototype": {
            "getCertificate": {
              "value": function () { return this.get_certificate.apply(this, arguments); }
            },
            "indexOf": {
              "value": function () { return this.index_of.apply(this, arguments); }
            },
            "removeAt": {
              "value": function () { return this.remove_at.apply(this, arguments); }
            },
            "setCertificate": {
              "value": function () { return this.set_certificate.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "ContentDisposition": {
          "prototype": {
            "getDisposition": {
              "value": function () { return this.get_disposition.apply(this, arguments); }
            },
            "getParameter": {
              "value": function () { return this.get_parameter.apply(this, arguments); }
            },
            "getParams": {
              "value": function () { return this.get_params.apply(this, arguments); }
            },
            "setDisposition": {
              "value": function () { return this.set_disposition.apply(this, arguments); }
            },
            "setParameter": {
              "value": function () { return this.set_parameter.apply(this, arguments); }
            },
            "setParams": {
              "value": function () { return this.set_params.apply(this, arguments); }
            },
            "toString": {
              "value": function () { return this.to_string.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "ContentType": {
          "prototype": {
            "getMediaSubtype": {
              "value": function () { return this.get_media_subtype.apply(this, arguments); }
            },
            "getMediaType": {
              "value": function () { return this.get_media_type.apply(this, arguments); }
            },
            "getParameter": {
              "value": function () { return this.get_parameter.apply(this, arguments); }
            },
            "getParams": {
              "value": function () { return this.get_params.apply(this, arguments); }
            },
            "isType": {
              "value": function () { return this.is_type.apply(this, arguments); }
            },
            "setMediaSubtype": {
              "value": function () { return this.set_media_subtype.apply(this, arguments); }
            },
            "setMediaType": {
              "value": function () { return this.set_media_type.apply(this, arguments); }
            },
            "setParameter": {
              "value": function () { return this.set_parameter.apply(this, arguments); }
            },
            "setParams": {
              "value": function () { return this.set_params.apply(this, arguments); }
            },
            "toString": {
              "value": function () { return this.to_string.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "CryptoContext": {
          "prototype": {
            "digestId": {
              "value": function () { return this.digest_id.apply(this, arguments); }
            },
            "digestName": {
              "value": function () { return this.digest_name.apply(this, arguments); }
            },
            "exportKeys": {
              "value": function () { return this.export_keys.apply(this, arguments); }
            },
            "getEncryptionProtocol": {
              "value": function () { return this.get_encryption_protocol.apply(this, arguments); }
            },
            "getKeyExchangeProtocol": {
              "value": function () { return this.get_key_exchange_protocol.apply(this, arguments); }
            },
            "getSignatureProtocol": {
              "value": function () { return this.get_signature_protocol.apply(this, arguments); }
            },
            "importKeys": {
              "value": function () { return this.import_keys.apply(this, arguments); }
            },
            "setRequestPassword": {
              "value": function () { return this.set_request_password.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DataWrapper": {
          "prototype": {
            "getEncoding": {
              "value": function () { return this.get_encoding.apply(this, arguments); }
            },
            "getStream": {
              "value": function () { return this.get_stream.apply(this, arguments); }
            },
            "setEncoding": {
              "value": function () { return this.set_encoding.apply(this, arguments); }
            },
            "setStream": {
              "value": function () { return this.set_stream.apply(this, arguments); }
            },
            "writeToStream": {
              "value": function () { return this.write_to_stream.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DecryptResult": {
          "prototype": {
            "getCipher": {
              "value": function () { return this.get_cipher.apply(this, arguments); }
            },
            "getMdc": {
              "value": function () { return this.get_mdc.apply(this, arguments); }
            },
            "getRecipients": {
              "value": function () { return this.get_recipients.apply(this, arguments); }
            },
            "getSignatures": {
              "value": function () { return this.get_signatures.apply(this, arguments); }
            },
            "setCipher": {
              "value": function () { return this.set_cipher.apply(this, arguments); }
            },
            "setMdc": {
              "value": function () { return this.set_mdc.apply(this, arguments); }
            },
            "setRecipients": {
              "value": function () { return this.set_recipients.apply(this, arguments); }
            },
            "setSignatures": {
              "value": function () { return this.set_signatures.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Filter": {
          "prototype": {
            "setSize": {
              "value": function () { return this.set_size.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "FilterBasic": {
          "prototype": {},
          "static": {}
        },
        "FilterBest": {
          "prototype": {},
          "static": {}
        },
        "FilterCRLF": {
          "prototype": {},
          "static": {}
        },
        "FilterCharset": {
          "prototype": {},
          "static": {}
        },
        "FilterEnriched": {
          "prototype": {},
          "static": {}
        },
        "FilterFrom": {
          "prototype": {},
          "static": {}
        },
        "FilterGZip": {
          "prototype": {},
          "static": {}
        },
        "FilterHTML": {
          "prototype": {},
          "static": {}
        },
        "FilterMd5": {
          "prototype": {
            "getDigest": {
              "value": function () { return this.get_digest.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "FilterStrip": {
          "prototype": {},
          "static": {}
        },
        "FilterWindows": {
          "prototype": {
            "isWindowsCharset": {
              "value": function () { return this.is_windows_charset.apply(this, arguments); }
            },
            "realCharset": {
              "value": function () { return this.real_charset.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "FilterYenc": {
          "prototype": {
            "getCrc": {
              "value": function () { return this.get_crc.apply(this, arguments); }
            },
            "getPcrc": {
              "value": function () { return this.get_pcrc.apply(this, arguments); }
            },
            "setCrc": {
              "value": function () { return this.set_crc.apply(this, arguments); }
            },
            "setState": {
              "value": function () { return this.set_state.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "GpgContext": {
          "prototype": {
            "getAlwaysTrust": {
              "value": function () { return this.get_always_trust.apply(this, arguments); }
            },
            "getAutoKeyRetrieve": {
              "value": function () { return this.get_auto_key_retrieve.apply(this, arguments); }
            },
            "getUseAgent": {
              "value": function () { return this.get_use_agent.apply(this, arguments); }
            },
            "setAlwaysTrust": {
              "value": function () { return this.set_always_trust.apply(this, arguments); }
            },
            "setAutoKeyRetrieve": {
              "value": function () { return this.set_auto_key_retrieve.apply(this, arguments); }
            },
            "setUseAgent": {
              "value": function () { return this.set_use_agent.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "InternetAddress": {
          "prototype": {
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "setName": {
              "value": function () { return this.set_name.apply(this, arguments); }
            },
            "toString": {
              "value": function () { return this.to_string.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "InternetAddressGroup": {
          "prototype": {
            "addMember": {
              "value": function () { return this.add_member.apply(this, arguments); }
            },
            "getMembers": {
              "value": function () { return this.get_members.apply(this, arguments); }
            },
            "setMembers": {
              "value": function () { return this.set_members.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "InternetAddressList": {
          "prototype": {
            "getAddress": {
              "value": function () { return this.get_address.apply(this, arguments); }
            },
            "indexOf": {
              "value": function () { return this.index_of.apply(this, arguments); }
            },
            "removeAt": {
              "value": function () { return this.remove_at.apply(this, arguments); }
            },
            "setAddress": {
              "value": function () { return this.set_address.apply(this, arguments); }
            },
            "toString": {
              "value": function () { return this.to_string.apply(this, arguments); }
            }
          },
          "static": {
            "parseString": {
              "value": function () { return this.parse_string.apply(this, arguments); }
            }
          }
        },
        "InternetAddressMailbox": {
          "prototype": {
            "getAddr": {
              "value": function () { return this.get_addr.apply(this, arguments); }
            },
            "setAddr": {
              "value": function () { return this.set_addr.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Message": {
          "prototype": {
            "addRecipient": {
              "value": function () { return this.add_recipient.apply(this, arguments); }
            },
            "getAllRecipients": {
              "value": function () { return this.get_all_recipients.apply(this, arguments); }
            },
            "getBody": {
              "value": function () { return this.get_body.apply(this, arguments); }
            },
            "getDate": {
              "value": function () { return this.get_date.apply(this, arguments); }
            },
            "getDateAsString": {
              "value": function () { return this.get_date_as_string.apply(this, arguments); }
            },
            "getMessageId": {
              "value": function () { return this.get_message_id.apply(this, arguments); }
            },
            "getMimePart": {
              "value": function () { return this.get_mime_part.apply(this, arguments); }
            },
            "getRecipients": {
              "value": function () { return this.get_recipients.apply(this, arguments); }
            },
            "getReplyTo": {
              "value": function () { return this.get_reply_to.apply(this, arguments); }
            },
            "getSender": {
              "value": function () { return this.get_sender.apply(this, arguments); }
            },
            "getSubject": {
              "value": function () { return this.get_subject.apply(this, arguments); }
            },
            "partialSplitMessage": {
              "value": function () { return this.partial_split_message.apply(this, arguments); }
            },
            "setDate": {
              "value": function () { return this.set_date.apply(this, arguments); }
            },
            "setDateAsString": {
              "value": function () { return this.set_date_as_string.apply(this, arguments); }
            },
            "setMessageId": {
              "value": function () { return this.set_message_id.apply(this, arguments); }
            },
            "setMimePart": {
              "value": function () { return this.set_mime_part.apply(this, arguments); }
            },
            "setReplyTo": {
              "value": function () { return this.set_reply_to.apply(this, arguments); }
            },
            "setSender": {
              "value": function () { return this.set_sender.apply(this, arguments); }
            },
            "setSubject": {
              "value": function () { return this.set_subject.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "MessagePart": {
          "prototype": {
            "getMessage": {
              "value": function () { return this.get_message.apply(this, arguments); }
            },
            "setMessage": {
              "value": function () { return this.set_message.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "MessagePartial": {
          "prototype": {
            "getId": {
              "value": function () { return this.get_id.apply(this, arguments); }
            },
            "getNumber": {
              "value": function () { return this.get_number.apply(this, arguments); }
            },
            "getTotal": {
              "value": function () { return this.get_total.apply(this, arguments); }
            }
          },
          "static": {
            "reconstructMessage": {
              "value": function () { return this.reconstruct_message.apply(this, arguments); }
            }
          }
        },
        "Multipart": {
          "prototype": {
            "getBoundary": {
              "value": function () { return this.get_boundary.apply(this, arguments); }
            },
            "getCount": {
              "value": function () { return this.get_count.apply(this, arguments); }
            },
            "getPart": {
              "value": function () { return this.get_part.apply(this, arguments); }
            },
            "getPostface": {
              "value": function () { return this.get_postface.apply(this, arguments); }
            },
            "getPreface": {
              "value": function () { return this.get_preface.apply(this, arguments); }
            },
            "getSubpartFromContentId": {
              "value": function () { return this.get_subpart_from_content_id.apply(this, arguments); }
            },
            "indexOf": {
              "value": function () { return this.index_of.apply(this, arguments); }
            },
            "removeAt": {
              "value": function () { return this.remove_at.apply(this, arguments); }
            },
            "setBoundary": {
              "value": function () { return this.set_boundary.apply(this, arguments); }
            },
            "setPostface": {
              "value": function () { return this.set_postface.apply(this, arguments); }
            },
            "setPreface": {
              "value": function () { return this.set_preface.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "MultipartEncrypted": {
          "prototype": {},
          "static": {}
        },
        "MultipartSigned": {
          "prototype": {},
          "static": {}
        },
        "Object": {
          "prototype": {
            "appendHeader": {
              "value": function () { return this.append_header.apply(this, arguments); }
            },
            "getContentDisposition": {
              "value": function () { return this.get_content_disposition.apply(this, arguments); }
            },
            "getContentDispositionParameter": {
              "value": function () { return this.get_content_disposition_parameter.apply(this, arguments); }
            },
            "getContentId": {
              "value": function () { return this.get_content_id.apply(this, arguments); }
            },
            "getContentType": {
              "value": function () { return this.get_content_type.apply(this, arguments); }
            },
            "getContentTypeParameter": {
              "value": function () { return this.get_content_type_parameter.apply(this, arguments); }
            },
            "getDisposition": {
              "value": function () { return this.get_disposition.apply(this, arguments); }
            },
            "getHeader": {
              "value": function () { return this.get_header.apply(this, arguments); }
            },
            "getHeaderList": {
              "value": function () { return this.get_header_list.apply(this, arguments); }
            },
            "getHeaders": {
              "value": function () { return this.get_headers.apply(this, arguments); }
            },
            "prependHeader": {
              "value": function () { return this.prepend_header.apply(this, arguments); }
            },
            "removeHeader": {
              "value": function () { return this.remove_header.apply(this, arguments); }
            },
            "setContentDisposition": {
              "value": function () { return this.set_content_disposition.apply(this, arguments); }
            },
            "setContentDispositionParameter": {
              "value": function () { return this.set_content_disposition_parameter.apply(this, arguments); }
            },
            "setContentId": {
              "value": function () { return this.set_content_id.apply(this, arguments); }
            },
            "setContentType": {
              "value": function () { return this.set_content_type.apply(this, arguments); }
            },
            "setContentTypeParameter": {
              "value": function () { return this.set_content_type_parameter.apply(this, arguments); }
            },
            "setDisposition": {
              "value": function () { return this.set_disposition.apply(this, arguments); }
            },
            "setHeader": {
              "value": function () { return this.set_header.apply(this, arguments); }
            },
            "toString": {
              "value": function () { return this.to_string.apply(this, arguments); }
            },
            "writeToStream": {
              "value": function () { return this.write_to_stream.apply(this, arguments); }
            }
          },
          "static": {
            "registerType": {
              "value": function () { return this.register_type.apply(this, arguments); }
            },
            "typeRegistryInit": {
              "value": function () { return this.type_registry_init.apply(this, arguments); }
            },
            "typeRegistryShutdown": {
              "value": function () { return this.type_registry_shutdown.apply(this, arguments); }
            }
          }
        },
        "Parser": {
          "prototype": {
            "constructMessage": {
              "value": function () { return this.construct_message.apply(this, arguments); }
            },
            "constructPart": {
              "value": function () { return this.construct_part.apply(this, arguments); }
            },
            "getFrom": {
              "value": function () { return this.get_from.apply(this, arguments); }
            },
            "getFromOffset": {
              "value": function () { return this.get_from_offset.apply(this, arguments); }
            },
            "getHeadersBegin": {
              "value": function () { return this.get_headers_begin.apply(this, arguments); }
            },
            "getHeadersEnd": {
              "value": function () { return this.get_headers_end.apply(this, arguments); }
            },
            "getPersistStream": {
              "value": function () { return this.get_persist_stream.apply(this, arguments); }
            },
            "getRespectContentLength": {
              "value": function () { return this.get_respect_content_length.apply(this, arguments); }
            },
            "getScanFrom": {
              "value": function () { return this.get_scan_from.apply(this, arguments); }
            },
            "initWithStream": {
              "value": function () { return this.init_with_stream.apply(this, arguments); }
            },
            "setHeaderRegex": {
              "value": function () { return this.set_header_regex.apply(this, arguments); }
            },
            "setPersistStream": {
              "value": function () { return this.set_persist_stream.apply(this, arguments); }
            },
            "setRespectContentLength": {
              "value": function () { return this.set_respect_content_length.apply(this, arguments); }
            },
            "setScanFrom": {
              "value": function () { return this.set_scan_from.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Part": {
          "prototype": {
            "getBestContentEncoding": {
              "value": function () { return this.get_best_content_encoding.apply(this, arguments); }
            },
            "getContentDescription": {
              "value": function () { return this.get_content_description.apply(this, arguments); }
            },
            "getContentEncoding": {
              "value": function () { return this.get_content_encoding.apply(this, arguments); }
            },
            "getContentId": {
              "value": function () { return this.get_content_id.apply(this, arguments); }
            },
            "getContentLocation": {
              "value": function () { return this.get_content_location.apply(this, arguments); }
            },
            "getContentMd5": {
              "value": function () { return this.get_content_md5.apply(this, arguments); }
            },
            "getContentObject": {
              "value": function () { return this.get_content_object.apply(this, arguments); }
            },
            "getFilename": {
              "value": function () { return this.get_filename.apply(this, arguments); }
            },
            "setContentDescription": {
              "value": function () { return this.set_content_description.apply(this, arguments); }
            },
            "setContentEncoding": {
              "value": function () { return this.set_content_encoding.apply(this, arguments); }
            },
            "setContentId": {
              "value": function () { return this.set_content_id.apply(this, arguments); }
            },
            "setContentLocation": {
              "value": function () { return this.set_content_location.apply(this, arguments); }
            },
            "setContentMd5": {
              "value": function () { return this.set_content_md5.apply(this, arguments); }
            },
            "setContentObject": {
              "value": function () { return this.set_content_object.apply(this, arguments); }
            },
            "setFilename": {
              "value": function () { return this.set_filename.apply(this, arguments); }
            },
            "verifyContentMd5": {
              "value": function () { return this.verify_content_md5.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Pkcs7Context": {
          "prototype": {
            "getAlwaysTrust": {
              "value": function () { return this.get_always_trust.apply(this, arguments); }
            },
            "setAlwaysTrust": {
              "value": function () { return this.set_always_trust.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Signature": {
          "prototype": {
            "getCertificate": {
              "value": function () { return this.get_certificate.apply(this, arguments); }
            },
            "getCreated": {
              "value": function () { return this.get_created.apply(this, arguments); }
            },
            "getErrors": {
              "value": function () { return this.get_errors.apply(this, arguments); }
            },
            "getExpires": {
              "value": function () { return this.get_expires.apply(this, arguments); }
            },
            "getStatus": {
              "value": function () { return this.get_status.apply(this, arguments); }
            },
            "setCertificate": {
              "value": function () { return this.set_certificate.apply(this, arguments); }
            },
            "setCreated": {
              "value": function () { return this.set_created.apply(this, arguments); }
            },
            "setErrors": {
              "value": function () { return this.set_errors.apply(this, arguments); }
            },
            "setExpires": {
              "value": function () { return this.set_expires.apply(this, arguments); }
            },
            "setStatus": {
              "value": function () { return this.set_status.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "SignatureList": {
          "prototype": {
            "getSignature": {
              "value": function () { return this.get_signature.apply(this, arguments); }
            },
            "indexOf": {
              "value": function () { return this.index_of.apply(this, arguments); }
            },
            "removeAt": {
              "value": function () { return this.remove_at.apply(this, arguments); }
            },
            "setSignature": {
              "value": function () { return this.set_signature.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Stream": {
          "prototype": {
            "bufferGets": {
              "value": function () { return this.buffer_gets.apply(this, arguments); }
            },
            "bufferReadln": {
              "value": function () { return this.buffer_readln.apply(this, arguments); }
            },
            "setBounds": {
              "value": function () { return this.set_bounds.apply(this, arguments); }
            },
            "writeString": {
              "value": function () { return this.write_string.apply(this, arguments); }
            },
            "writeToStream": {
              "value": function () { return this.write_to_stream.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "StreamBuffer": {
          "prototype": {},
          "static": {}
        },
        "StreamCat": {
          "prototype": {
            "addSource": {
              "value": function () { return this.add_source.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "StreamFile": {
          "prototype": {
            "getOwner": {
              "value": function () { return this.get_owner.apply(this, arguments); }
            },
            "setOwner": {
              "value": function () { return this.set_owner.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "StreamFilter": {
          "prototype": {},
          "static": {}
        },
        "StreamFs": {
          "prototype": {
            "getOwner": {
              "value": function () { return this.get_owner.apply(this, arguments); }
            },
            "setOwner": {
              "value": function () { return this.set_owner.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "StreamGIO": {
          "prototype": {
            "getOwner": {
              "value": function () { return this.get_owner.apply(this, arguments); }
            },
            "setOwner": {
              "value": function () { return this.set_owner.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "StreamMem": {
          "prototype": {
            "getByteArray": {
              "value": function () { return this.get_byte_array.apply(this, arguments); }
            },
            "getOwner": {
              "value": function () { return this.get_owner.apply(this, arguments); }
            },
            "setByteArray": {
              "value": function () { return this.set_byte_array.apply(this, arguments); }
            },
            "setOwner": {
              "value": function () { return this.set_owner.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "StreamMmap": {
          "prototype": {},
          "static": {}
        },
        "StreamNull": {
          "prototype": {},
          "static": {}
        },
        "StreamPipe": {
          "prototype": {
            "getOwner": {
              "value": function () { return this.get_owner.apply(this, arguments); }
            },
            "setOwner": {
              "value": function () { return this.set_owner.apply(this, arguments); }
            }
          },
          "static": {}
        }
      },
      "static": {
        "charsetBest": {
          "value": function () { return this.charset_best.apply(this, arguments); }
        },
        "charsetCanonName": {
          "value": function () { return this.charset_canon_name.apply(this, arguments); }
        },
        "charsetIconvName": {
          "value": function () { return this.charset_iconv_name.apply(this, arguments); }
        },
        "charsetIsoToWindows": {
          "value": function () { return this.charset_iso_to_windows.apply(this, arguments); }
        },
        "charsetLanguage": {
          "value": function () { return this.charset_language.apply(this, arguments); }
        },
        "charsetLocaleName": {
          "value": function () { return this.charset_locale_name.apply(this, arguments); }
        },
        "charsetMapInit": {
          "value": function () { return this.charset_map_init.apply(this, arguments); }
        },
        "charsetMapShutdown": {
          "value": function () { return this.charset_map_shutdown.apply(this, arguments); }
        },
        "charsetName": {
          "value": function () { return this.charset_name.apply(this, arguments); }
        },
        "checkVersion": {
          "value": function () { return this.check_version.apply(this, arguments); }
        },
        "contentEncodingFromString": {
          "value": function () { return this.content_encoding_from_string.apply(this, arguments); }
        },
        "contentEncodingToString": {
          "value": function () { return this.content_encoding_to_string.apply(this, arguments); }
        },
        "encodingBase64DecodeStep": {
          "value": function () { return this.encoding_base64_decode_step.apply(this, arguments); }
        },
        "encodingBase64EncodeClose": {
          "value": function () { return this.encoding_base64_encode_close.apply(this, arguments); }
        },
        "encodingBase64EncodeStep": {
          "value": function () { return this.encoding_base64_encode_step.apply(this, arguments); }
        },
        "encodingQuotedDecodeStep": {
          "value": function () { return this.encoding_quoted_decode_step.apply(this, arguments); }
        },
        "encodingQuotedEncodeClose": {
          "value": function () { return this.encoding_quoted_encode_close.apply(this, arguments); }
        },
        "encodingQuotedEncodeStep": {
          "value": function () { return this.encoding_quoted_encode_step.apply(this, arguments); }
        },
        "encodingUudecodeStep": {
          "value": function () { return this.encoding_uudecode_step.apply(this, arguments); }
        },
        "encodingUuencodeClose": {
          "value": function () { return this.encoding_uuencode_close.apply(this, arguments); }
        },
        "encodingUuencodeStep": {
          "value": function () { return this.encoding_uuencode_step.apply(this, arguments); }
        },
        "iconvClose": {
          "value": function () { return this.iconv_close.apply(this, arguments); }
        },
        "iconvInit": {
          "value": function () { return this.iconv_init.apply(this, arguments); }
        },
        "iconvLocaleToUtf8": {
          "value": function () { return this.iconv_locale_to_utf8.apply(this, arguments); }
        },
        "iconvLocaleToUtf8Length": {
          "value": function () { return this.iconv_locale_to_utf8_length.apply(this, arguments); }
        },
        "iconvOpen": {
          "value": function () { return this.iconv_open.apply(this, arguments); }
        },
        "iconvShutdown": {
          "value": function () { return this.iconv_shutdown.apply(this, arguments); }
        },
        "iconvStrdup": {
          "value": function () { return this.iconv_strdup.apply(this, arguments); }
        },
        "iconvStrndup": {
          "value": function () { return this.iconv_strndup.apply(this, arguments); }
        },
        "iconvUtf8ToLocale": {
          "value": function () { return this.iconv_utf8_to_locale.apply(this, arguments); }
        },
        "iconvUtf8ToLocaleLength": {
          "value": function () { return this.iconv_utf8_to_locale_length.apply(this, arguments); }
        },
        "localeCharset": {
          "value": function () { return this.locale_charset.apply(this, arguments); }
        },
        "localeLanguage": {
          "value": function () { return this.locale_language.apply(this, arguments); }
        },
        "referencesAppend": {
          "value": function () { return this.references_append.apply(this, arguments); }
        },
        "referencesClear": {
          "value": function () { return this.references_clear.apply(this, arguments); }
        },
        "setUserCharsets": {
          "value": function () { return this.set_user_charsets.apply(this, arguments); }
        },
        "userCharsets": {
          "value": function () { return this.user_charsets.apply(this, arguments); }
        },
        "utilsBestEncoding": {
          "value": function () { return this.utils_best_encoding.apply(this, arguments); }
        },
        "utilsDecode8bit": {
          "value": function () { return this.utils_decode_8bit.apply(this, arguments); }
        },
        "utilsDecodeMessageId": {
          "value": function () { return this.utils_decode_message_id.apply(this, arguments); }
        },
        "utilsGenerateMessageId": {
          "value": function () { return this.utils_generate_message_id.apply(this, arguments); }
        },
        "utilsHeaderDecodeDate": {
          "value": function () { return this.utils_header_decode_date.apply(this, arguments); }
        },
        "utilsHeaderDecodePhrase": {
          "value": function () { return this.utils_header_decode_phrase.apply(this, arguments); }
        },
        "utilsHeaderDecodeText": {
          "value": function () { return this.utils_header_decode_text.apply(this, arguments); }
        },
        "utilsHeaderEncodePhrase": {
          "value": function () { return this.utils_header_encode_phrase.apply(this, arguments); }
        },
        "utilsHeaderEncodeText": {
          "value": function () { return this.utils_header_encode_text.apply(this, arguments); }
        },
        "utilsHeaderFold": {
          "value": function () { return this.utils_header_fold.apply(this, arguments); }
        },
        "utilsHeaderFormatDate": {
          "value": function () { return this.utils_header_format_date.apply(this, arguments); }
        },
        "utilsHeaderPrintf": {
          "value": function () { return this.utils_header_printf.apply(this, arguments); }
        },
        "utilsQuoteString": {
          "value": function () { return this.utils_quote_string.apply(this, arguments); }
        },
        "utilsStructuredHeaderFold": {
          "value": function () { return this.utils_structured_header_fold.apply(this, arguments); }
        },
        "utilsTextIs8bit": {
          "value": function () { return this.utils_text_is_8bit.apply(this, arguments); }
        },
        "utilsUnquoteString": {
          "value": function () { return this.utils_unquote_string.apply(this, arguments); }
        },
        "utilsUnstructuredHeaderFold": {
          "value": function () { return this.utils_unstructured_header_fold.apply(this, arguments); }
        },
        "ydecodeStep": {
          "value": function () { return this.ydecode_step.apply(this, arguments); }
        },
        "yencodeClose": {
          "value": function () { return this.yencode_close.apply(this, arguments); }
        },
        "yencodeStep": {
          "value": function () { return this.yencode_step.apply(this, arguments); }
        }
      }
    },
    "GModule": {
      "class": {},
      "static": {
        "moduleBuildPath": {
          "value": function () { return this.module_build_path.apply(this, arguments); }
        },
        "moduleError": {
          "value": function () { return this.module_error.apply(this, arguments); }
        },
        "moduleSupported": {
          "value": function () { return this.module_supported.apply(this, arguments); }
        }
      }
    },
    "GObject": {
      "class": {
        "Binding": {
          "prototype": {
            "getFlags": {
              "value": function () { return this.get_flags.apply(this, arguments); }
            },
            "getSource": {
              "value": function () { return this.get_source.apply(this, arguments); }
            },
            "getSourceProperty": {
              "value": function () { return this.get_source_property.apply(this, arguments); }
            },
            "getTarget": {
              "value": function () { return this.get_target.apply(this, arguments); }
            },
            "getTargetProperty": {
              "value": function () { return this.get_target_property.apply(this, arguments); }
            },
            "sourceProperty": {
              "get": function () { return this.source_property; },
              "set": function (value) { this.source_property = value; }
            },
            "targetProperty": {
              "get": function () { return this.target_property; },
              "set": function (value) { this.target_property = value; }
            }
          },
          "static": {}
        },
        "InitiallyUnowned": {
          "prototype": {},
          "static": {}
        },
        "Object": {
          "prototype": {
            "addToggleRef": {
              "value": function () { return this.add_toggle_ref.apply(this, arguments); }
            },
            "addWeakPointer": {
              "value": function () { return this.add_weak_pointer.apply(this, arguments); }
            },
            "bindProperty": {
              "value": function () { return this.bind_property.apply(this, arguments); }
            },
            "bindPropertyFull": {
              "value": function () { return this.bind_property_full.apply(this, arguments); }
            },
            "bindPropertyWithClosures": {
              "value": function () { return this.bind_property_with_closures.apply(this, arguments); }
            },
            "dupData": {
              "value": function () { return this.dup_data.apply(this, arguments); }
            },
            "dupQdata": {
              "value": function () { return this.dup_qdata.apply(this, arguments); }
            },
            "forceFloating": {
              "value": function () { return this.force_floating.apply(this, arguments); }
            },
            "freezeNotify": {
              "value": function () { return this.freeze_notify.apply(this, arguments); }
            },
            "getData": {
              "value": function () { return this.get_data.apply(this, arguments); }
            },
            "getProperty": {
              "value": function () { return this.get_property.apply(this, arguments); }
            },
            "getQdata": {
              "value": function () { return this.get_qdata.apply(this, arguments); }
            },
            "getValist": {
              "value": function () { return this.get_valist.apply(this, arguments); }
            },
            "isFloating": {
              "value": function () { return this.is_floating.apply(this, arguments); }
            },
            "notifyByPspec": {
              "value": function () { return this.notify_by_pspec.apply(this, arguments); }
            },
            "refSink": {
              "value": function () { return this.ref_sink.apply(this, arguments); }
            },
            "removeToggleRef": {
              "value": function () { return this.remove_toggle_ref.apply(this, arguments); }
            },
            "removeWeakPointer": {
              "value": function () { return this.remove_weak_pointer.apply(this, arguments); }
            },
            "replaceData": {
              "value": function () { return this.replace_data.apply(this, arguments); }
            },
            "replaceQdata": {
              "value": function () { return this.replace_qdata.apply(this, arguments); }
            },
            "runDispose": {
              "value": function () { return this.run_dispose.apply(this, arguments); }
            },
            "setData": {
              "value": function () { return this.set_data.apply(this, arguments); }
            },
            "setDataFull": {
              "value": function () { return this.set_data_full.apply(this, arguments); }
            },
            "setProperty": {
              "value": function () { return this.set_property.apply(this, arguments); }
            },
            "setQdata": {
              "value": function () { return this.set_qdata.apply(this, arguments); }
            },
            "setQdataFull": {
              "value": function () { return this.set_qdata_full.apply(this, arguments); }
            },
            "setValist": {
              "value": function () { return this.set_valist.apply(this, arguments); }
            },
            "stealData": {
              "value": function () { return this.steal_data.apply(this, arguments); }
            },
            "stealQdata": {
              "value": function () { return this.steal_qdata.apply(this, arguments); }
            },
            "thawNotify": {
              "value": function () { return this.thaw_notify.apply(this, arguments); }
            },
            "watchClosure": {
              "value": function () { return this.watch_closure.apply(this, arguments); }
            },
            "weakRef": {
              "value": function () { return this.weak_ref.apply(this, arguments); }
            },
            "weakUnref": {
              "value": function () { return this.weak_unref.apply(this, arguments); }
            }
          },
          "static": {
            "compatControl": {
              "value": function () { return this.compat_control.apply(this, arguments); }
            },
            "interfaceFindProperty": {
              "value": function () { return this.interface_find_property.apply(this, arguments); }
            },
            "interfaceInstallProperty": {
              "value": function () { return this.interface_install_property.apply(this, arguments); }
            },
            "interfaceListProperties": {
              "value": function () { return this.interface_list_properties.apply(this, arguments); }
            }
          }
        },
        "ParamSpec": {
          "prototype": {
            "getBlurb": {
              "value": function () { return this.get_blurb.apply(this, arguments); }
            },
            "getDefaultValue": {
              "value": function () { return this.get_default_value.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getNameQuark": {
              "value": function () { return this.get_name_quark.apply(this, arguments); }
            },
            "getNick": {
              "value": function () { return this.get_nick.apply(this, arguments); }
            },
            "getQdata": {
              "value": function () { return this.get_qdata.apply(this, arguments); }
            },
            "getRedirectTarget": {
              "value": function () { return this.get_redirect_target.apply(this, arguments); }
            },
            "refSink": {
              "value": function () { return this.ref_sink.apply(this, arguments); }
            },
            "setQdata": {
              "value": function () { return this.set_qdata.apply(this, arguments); }
            },
            "setQdataFull": {
              "value": function () { return this.set_qdata_full.apply(this, arguments); }
            },
            "stealQdata": {
              "value": function () { return this.steal_qdata.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "ParamSpecBoolean": {
          "prototype": {},
          "static": {}
        },
        "ParamSpecBoxed": {
          "prototype": {},
          "static": {}
        },
        "ParamSpecChar": {
          "prototype": {},
          "static": {}
        },
        "ParamSpecDouble": {
          "prototype": {},
          "static": {}
        },
        "ParamSpecEnum": {
          "prototype": {},
          "static": {}
        },
        "ParamSpecFlags": {
          "prototype": {},
          "static": {}
        },
        "ParamSpecFloat": {
          "prototype": {},
          "static": {}
        },
        "ParamSpecGType": {
          "prototype": {},
          "static": {}
        },
        "ParamSpecInt": {
          "prototype": {},
          "static": {}
        },
        "ParamSpecInt64": {
          "prototype": {},
          "static": {}
        },
        "ParamSpecLong": {
          "prototype": {},
          "static": {}
        },
        "ParamSpecObject": {
          "prototype": {},
          "static": {}
        },
        "ParamSpecOverride": {
          "prototype": {},
          "static": {}
        },
        "ParamSpecParam": {
          "prototype": {},
          "static": {}
        },
        "ParamSpecPointer": {
          "prototype": {},
          "static": {}
        },
        "ParamSpecString": {
          "prototype": {},
          "static": {}
        },
        "ParamSpecUChar": {
          "prototype": {},
          "static": {}
        },
        "ParamSpecUInt": {
          "prototype": {},
          "static": {}
        },
        "ParamSpecUInt64": {
          "prototype": {},
          "static": {}
        },
        "ParamSpecULong": {
          "prototype": {},
          "static": {}
        },
        "ParamSpecUnichar": {
          "prototype": {},
          "static": {}
        },
        "ParamSpecValueArray": {
          "prototype": {},
          "static": {}
        },
        "ParamSpecVariant": {
          "prototype": {},
          "static": {}
        },
        "TypeModule": {
          "prototype": {
            "addInterface": {
              "value": function () { return this.add_interface.apply(this, arguments); }
            },
            "registerEnum": {
              "value": function () { return this.register_enum.apply(this, arguments); }
            },
            "registerFlags": {
              "value": function () { return this.register_flags.apply(this, arguments); }
            },
            "registerType": {
              "value": function () { return this.register_type.apply(this, arguments); }
            },
            "setName": {
              "value": function () { return this.set_name.apply(this, arguments); }
            }
          },
          "static": {}
        }
      },
      "static": {
        "boxedCopy": {
          "value": function () { return this.boxed_copy.apply(this, arguments); }
        },
        "boxedFree": {
          "value": function () { return this.boxed_free.apply(this, arguments); }
        },
        "boxedTypeRegisterStatic": {
          "value": function () { return this.boxed_type_register_static.apply(this, arguments); }
        },
        "cclosureMarshalBOOLEAN_BOXEDBOXED": {
          "value": function () { return this.cclosure_marshal_BOOLEAN__BOXED_BOXED.apply(this, arguments); }
        },
        "cclosureMarshalBOOLEAN_FLAGS": {
          "value": function () { return this.cclosure_marshal_BOOLEAN__FLAGS.apply(this, arguments); }
        },
        "cclosureMarshalSTRING_OBJECTPOINTER": {
          "value": function () { return this.cclosure_marshal_STRING__OBJECT_POINTER.apply(this, arguments); }
        },
        "cclosureMarshalVOID_BOOLEAN": {
          "value": function () { return this.cclosure_marshal_VOID__BOOLEAN.apply(this, arguments); }
        },
        "cclosureMarshalVOID_BOXED": {
          "value": function () { return this.cclosure_marshal_VOID__BOXED.apply(this, arguments); }
        },
        "cclosureMarshalVOID_CHAR": {
          "value": function () { return this.cclosure_marshal_VOID__CHAR.apply(this, arguments); }
        },
        "cclosureMarshalVOID_DOUBLE": {
          "value": function () { return this.cclosure_marshal_VOID__DOUBLE.apply(this, arguments); }
        },
        "cclosureMarshalVOID_ENUM": {
          "value": function () { return this.cclosure_marshal_VOID__ENUM.apply(this, arguments); }
        },
        "cclosureMarshalVOID_FLAGS": {
          "value": function () { return this.cclosure_marshal_VOID__FLAGS.apply(this, arguments); }
        },
        "cclosureMarshalVOID_FLOAT": {
          "value": function () { return this.cclosure_marshal_VOID__FLOAT.apply(this, arguments); }
        },
        "cclosureMarshalVOID_INT": {
          "value": function () { return this.cclosure_marshal_VOID__INT.apply(this, arguments); }
        },
        "cclosureMarshalVOID_LONG": {
          "value": function () { return this.cclosure_marshal_VOID__LONG.apply(this, arguments); }
        },
        "cclosureMarshalVOID_OBJECT": {
          "value": function () { return this.cclosure_marshal_VOID__OBJECT.apply(this, arguments); }
        },
        "cclosureMarshalVOID_PARAM": {
          "value": function () { return this.cclosure_marshal_VOID__PARAM.apply(this, arguments); }
        },
        "cclosureMarshalVOID_POINTER": {
          "value": function () { return this.cclosure_marshal_VOID__POINTER.apply(this, arguments); }
        },
        "cclosureMarshalVOID_STRING": {
          "value": function () { return this.cclosure_marshal_VOID__STRING.apply(this, arguments); }
        },
        "cclosureMarshalVOID_UCHAR": {
          "value": function () { return this.cclosure_marshal_VOID__UCHAR.apply(this, arguments); }
        },
        "cclosureMarshalVOID_UINT": {
          "value": function () { return this.cclosure_marshal_VOID__UINT.apply(this, arguments); }
        },
        "cclosureMarshalVOID_UINTPOINTER": {
          "value": function () { return this.cclosure_marshal_VOID__UINT_POINTER.apply(this, arguments); }
        },
        "cclosureMarshalVOID_ULONG": {
          "value": function () { return this.cclosure_marshal_VOID__ULONG.apply(this, arguments); }
        },
        "cclosureMarshalVOID_VARIANT": {
          "value": function () { return this.cclosure_marshal_VOID__VARIANT.apply(this, arguments); }
        },
        "cclosureMarshalVOID_VOID": {
          "value": function () { return this.cclosure_marshal_VOID__VOID.apply(this, arguments); }
        },
        "cclosureMarshalGeneric": {
          "value": function () { return this.cclosure_marshal_generic.apply(this, arguments); }
        },
        "cclosureNew": {
          "value": function () { return this.cclosure_new.apply(this, arguments); }
        },
        "cclosureNewObject": {
          "value": function () { return this.cclosure_new_object.apply(this, arguments); }
        },
        "cclosureNewObjectSwap": {
          "value": function () { return this.cclosure_new_object_swap.apply(this, arguments); }
        },
        "cclosureNewSwap": {
          "value": function () { return this.cclosure_new_swap.apply(this, arguments); }
        },
        "clearObject": {
          "value": function () { return this.clear_object.apply(this, arguments); }
        },
        "enumCompleteTypeInfo": {
          "value": function () { return this.enum_complete_type_info.apply(this, arguments); }
        },
        "enumGetValue": {
          "value": function () { return this.enum_get_value.apply(this, arguments); }
        },
        "enumGetValueByName": {
          "value": function () { return this.enum_get_value_by_name.apply(this, arguments); }
        },
        "enumGetValueByNick": {
          "value": function () { return this.enum_get_value_by_nick.apply(this, arguments); }
        },
        "enumRegisterStatic": {
          "value": function () { return this.enum_register_static.apply(this, arguments); }
        },
        "flagsCompleteTypeInfo": {
          "value": function () { return this.flags_complete_type_info.apply(this, arguments); }
        },
        "flagsGetFirstValue": {
          "value": function () { return this.flags_get_first_value.apply(this, arguments); }
        },
        "flagsGetValueByName": {
          "value": function () { return this.flags_get_value_by_name.apply(this, arguments); }
        },
        "flagsGetValueByNick": {
          "value": function () { return this.flags_get_value_by_nick.apply(this, arguments); }
        },
        "flagsRegisterStatic": {
          "value": function () { return this.flags_register_static.apply(this, arguments); }
        },
        "gtypeGetType": {
          "value": function () { return this.gtype_get_type.apply(this, arguments); }
        },
        "paramSpecBoolean": {
          "value": function () { return this.param_spec_boolean.apply(this, arguments); }
        },
        "paramSpecBoxed": {
          "value": function () { return this.param_spec_boxed.apply(this, arguments); }
        },
        "paramSpecChar": {
          "value": function () { return this.param_spec_char.apply(this, arguments); }
        },
        "paramSpecDouble": {
          "value": function () { return this.param_spec_double.apply(this, arguments); }
        },
        "paramSpecEnum": {
          "value": function () { return this.param_spec_enum.apply(this, arguments); }
        },
        "paramSpecFlags": {
          "value": function () { return this.param_spec_flags.apply(this, arguments); }
        },
        "paramSpecFloat": {
          "value": function () { return this.param_spec_float.apply(this, arguments); }
        },
        "paramSpecGtype": {
          "value": function () { return this.param_spec_gtype.apply(this, arguments); }
        },
        "paramSpecInt": {
          "value": function () { return this.param_spec_int.apply(this, arguments); }
        },
        "paramSpecInt64": {
          "value": function () { return this.param_spec_int64.apply(this, arguments); }
        },
        "paramSpecLong": {
          "value": function () { return this.param_spec_long.apply(this, arguments); }
        },
        "paramSpecObject": {
          "value": function () { return this.param_spec_object.apply(this, arguments); }
        },
        "paramSpecOverride": {
          "value": function () { return this.param_spec_override.apply(this, arguments); }
        },
        "paramSpecParam": {
          "value": function () { return this.param_spec_param.apply(this, arguments); }
        },
        "paramSpecPointer": {
          "value": function () { return this.param_spec_pointer.apply(this, arguments); }
        },
        "paramSpecPoolNew": {
          "value": function () { return this.param_spec_pool_new.apply(this, arguments); }
        },
        "paramSpecString": {
          "value": function () { return this.param_spec_string.apply(this, arguments); }
        },
        "paramSpecUchar": {
          "value": function () { return this.param_spec_uchar.apply(this, arguments); }
        },
        "paramSpecUint": {
          "value": function () { return this.param_spec_uint.apply(this, arguments); }
        },
        "paramSpecUint64": {
          "value": function () { return this.param_spec_uint64.apply(this, arguments); }
        },
        "paramSpecUlong": {
          "value": function () { return this.param_spec_ulong.apply(this, arguments); }
        },
        "paramSpecUnichar": {
          "value": function () { return this.param_spec_unichar.apply(this, arguments); }
        },
        "paramSpecValueArray": {
          "value": function () { return this.param_spec_value_array.apply(this, arguments); }
        },
        "paramSpecVariant": {
          "value": function () { return this.param_spec_variant.apply(this, arguments); }
        },
        "paramTypeRegisterStatic": {
          "value": function () { return this.param_type_register_static.apply(this, arguments); }
        },
        "paramValueConvert": {
          "value": function () { return this.param_value_convert.apply(this, arguments); }
        },
        "paramValueDefaults": {
          "value": function () { return this.param_value_defaults.apply(this, arguments); }
        },
        "paramValueSetDefault": {
          "value": function () { return this.param_value_set_default.apply(this, arguments); }
        },
        "paramValueValidate": {
          "value": function () { return this.param_value_validate.apply(this, arguments); }
        },
        "paramValuesCmp": {
          "value": function () { return this.param_values_cmp.apply(this, arguments); }
        },
        "pointerTypeRegisterStatic": {
          "value": function () { return this.pointer_type_register_static.apply(this, arguments); }
        },
        "signalAccumulatorFirstWins": {
          "value": function () { return this.signal_accumulator_first_wins.apply(this, arguments); }
        },
        "signalAccumulatorTrueHandled": {
          "value": function () { return this.signal_accumulator_true_handled.apply(this, arguments); }
        },
        "signalAddEmissionHook": {
          "value": function () { return this.signal_add_emission_hook.apply(this, arguments); }
        },
        "signalChainFromOverridden": {
          "value": function () { return this.signal_chain_from_overridden.apply(this, arguments); }
        },
        "signalChainFromOverriddenHandler": {
          "value": function () { return this.signal_chain_from_overridden_handler.apply(this, arguments); }
        },
        "signalConnectClosure": {
          "value": function () { return this.signal_connect_closure.apply(this, arguments); }
        },
        "signalConnectClosureById": {
          "value": function () { return this.signal_connect_closure_by_id.apply(this, arguments); }
        },
        "signalConnectData": {
          "value": function () { return this.signal_connect_data.apply(this, arguments); }
        },
        "signalConnectObject": {
          "value": function () { return this.signal_connect_object.apply(this, arguments); }
        },
        "signalEmit": {
          "value": function () { return this.signal_emit.apply(this, arguments); }
        },
        "signalEmitByName": {
          "value": function () { return this.signal_emit_by_name.apply(this, arguments); }
        },
        "signalEmitValist": {
          "value": function () { return this.signal_emit_valist.apply(this, arguments); }
        },
        "signalEmitv": {
          "value": function () { return this.signal_emitv.apply(this, arguments); }
        },
        "signalGetInvocationHint": {
          "value": function () { return this.signal_get_invocation_hint.apply(this, arguments); }
        },
        "signalHandlerBlock": {
          "value": function () { return this.signal_handler_block.apply(this, arguments); }
        },
        "signalHandlerDisconnect": {
          "value": function () { return this.signal_handler_disconnect.apply(this, arguments); }
        },
        "signalHandlerFind": {
          "value": function () { return this.signal_handler_find.apply(this, arguments); }
        },
        "signalHandlerIsConnected": {
          "value": function () { return this.signal_handler_is_connected.apply(this, arguments); }
        },
        "signalHandlerUnblock": {
          "value": function () { return this.signal_handler_unblock.apply(this, arguments); }
        },
        "signalHandlersBlockMatched": {
          "value": function () { return this.signal_handlers_block_matched.apply(this, arguments); }
        },
        "signalHandlersDestroy": {
          "value": function () { return this.signal_handlers_destroy.apply(this, arguments); }
        },
        "signalHandlersDisconnectMatched": {
          "value": function () { return this.signal_handlers_disconnect_matched.apply(this, arguments); }
        },
        "signalHandlersUnblockMatched": {
          "value": function () { return this.signal_handlers_unblock_matched.apply(this, arguments); }
        },
        "signalHasHandlerPending": {
          "value": function () { return this.signal_has_handler_pending.apply(this, arguments); }
        },
        "signalListIds": {
          "value": function () { return this.signal_list_ids.apply(this, arguments); }
        },
        "signalLookup": {
          "value": function () { return this.signal_lookup.apply(this, arguments); }
        },
        "signalName": {
          "value": function () { return this.signal_name.apply(this, arguments); }
        },
        "signalNew": {
          "value": function () { return this.signal_new.apply(this, arguments); }
        },
        "signalNewClassHandler": {
          "value": function () { return this.signal_new_class_handler.apply(this, arguments); }
        },
        "signalNewValist": {
          "value": function () { return this.signal_new_valist.apply(this, arguments); }
        },
        "signalNewv": {
          "value": function () { return this.signal_newv.apply(this, arguments); }
        },
        "signalOverrideClassClosure": {
          "value": function () { return this.signal_override_class_closure.apply(this, arguments); }
        },
        "signalOverrideClassHandler": {
          "value": function () { return this.signal_override_class_handler.apply(this, arguments); }
        },
        "signalParseName": {
          "value": function () { return this.signal_parse_name.apply(this, arguments); }
        },
        "signalQuery": {
          "value": function () { return this.signal_query.apply(this, arguments); }
        },
        "signalRemoveEmissionHook": {
          "value": function () { return this.signal_remove_emission_hook.apply(this, arguments); }
        },
        "signalSetVaMarshaller": {
          "value": function () { return this.signal_set_va_marshaller.apply(this, arguments); }
        },
        "signalStopEmission": {
          "value": function () { return this.signal_stop_emission.apply(this, arguments); }
        },
        "signalStopEmissionByName": {
          "value": function () { return this.signal_stop_emission_by_name.apply(this, arguments); }
        },
        "signalTypeCclosureNew": {
          "value": function () { return this.signal_type_cclosure_new.apply(this, arguments); }
        },
        "sourceSetClosure": {
          "value": function () { return this.source_set_closure.apply(this, arguments); }
        },
        "sourceSetDummyCallback": {
          "value": function () { return this.source_set_dummy_callback.apply(this, arguments); }
        },
        "strdupValueContents": {
          "value": function () { return this.strdup_value_contents.apply(this, arguments); }
        },
        "typeAddClassCacheFunc": {
          "value": function () { return this.type_add_class_cache_func.apply(this, arguments); }
        },
        "typeAddClassPrivate": {
          "value": function () { return this.type_add_class_private.apply(this, arguments); }
        },
        "typeAddInstancePrivate": {
          "value": function () { return this.type_add_instance_private.apply(this, arguments); }
        },
        "typeAddInterfaceCheck": {
          "value": function () { return this.type_add_interface_check.apply(this, arguments); }
        },
        "typeAddInterfaceDynamic": {
          "value": function () { return this.type_add_interface_dynamic.apply(this, arguments); }
        },
        "typeAddInterfaceStatic": {
          "value": function () { return this.type_add_interface_static.apply(this, arguments); }
        },
        "typeCheckClassCast": {
          "value": function () { return this.type_check_class_cast.apply(this, arguments); }
        },
        "typeCheckClassIsA": {
          "value": function () { return this.type_check_class_is_a.apply(this, arguments); }
        },
        "typeCheckInstance": {
          "value": function () { return this.type_check_instance.apply(this, arguments); }
        },
        "typeCheckInstanceCast": {
          "value": function () { return this.type_check_instance_cast.apply(this, arguments); }
        },
        "typeCheckInstanceIsA": {
          "value": function () { return this.type_check_instance_is_a.apply(this, arguments); }
        },
        "typeCheckInstanceIsFundamentallyA": {
          "value": function () { return this.type_check_instance_is_fundamentally_a.apply(this, arguments); }
        },
        "typeCheckIsValueType": {
          "value": function () { return this.type_check_is_value_type.apply(this, arguments); }
        },
        "typeCheckValue": {
          "value": function () { return this.type_check_value.apply(this, arguments); }
        },
        "typeCheckValueHolds": {
          "value": function () { return this.type_check_value_holds.apply(this, arguments); }
        },
        "typeChildren": {
          "value": function () { return this.type_children.apply(this, arguments); }
        },
        "typeClassAddPrivate": {
          "value": function () { return this.type_class_add_private.apply(this, arguments); }
        },
        "typeClassAdjustPrivateOffset": {
          "value": function () { return this.type_class_adjust_private_offset.apply(this, arguments); }
        },
        "typeClassGetInstancePrivateOffset": {
          "value": function () { return this.type_class_get_instance_private_offset.apply(this, arguments); }
        },
        "typeClassPeek": {
          "value": function () { return this.type_class_peek.apply(this, arguments); }
        },
        "typeClassPeekStatic": {
          "value": function () { return this.type_class_peek_static.apply(this, arguments); }
        },
        "typeClassRef": {
          "value": function () { return this.type_class_ref.apply(this, arguments); }
        },
        "typeCreateInstance": {
          "value": function () { return this.type_create_instance.apply(this, arguments); }
        },
        "typeDefaultInterfacePeek": {
          "value": function () { return this.type_default_interface_peek.apply(this, arguments); }
        },
        "typeDefaultInterfaceRef": {
          "value": function () { return this.type_default_interface_ref.apply(this, arguments); }
        },
        "typeDefaultInterfaceUnref": {
          "value": function () { return this.type_default_interface_unref.apply(this, arguments); }
        },
        "typeDepth": {
          "value": function () { return this.type_depth.apply(this, arguments); }
        },
        "typeEnsure": {
          "value": function () { return this.type_ensure.apply(this, arguments); }
        },
        "typeFreeInstance": {
          "value": function () { return this.type_free_instance.apply(this, arguments); }
        },
        "typeFromName": {
          "value": function () { return this.type_from_name.apply(this, arguments); }
        },
        "typeFundamental": {
          "value": function () { return this.type_fundamental.apply(this, arguments); }
        },
        "typeFundamentalNext": {
          "value": function () { return this.type_fundamental_next.apply(this, arguments); }
        },
        "typeGetInstanceCount": {
          "value": function () { return this.type_get_instance_count.apply(this, arguments); }
        },
        "typeGetPlugin": {
          "value": function () { return this.type_get_plugin.apply(this, arguments); }
        },
        "typeGetQdata": {
          "value": function () { return this.type_get_qdata.apply(this, arguments); }
        },
        "typeGetTypeRegistrationSerial": {
          "value": function () { return this.type_get_type_registration_serial.apply(this, arguments); }
        },
        "typeInit": {
          "value": function () { return this.type_init.apply(this, arguments); }
        },
        "typeInitWithDebugFlags": {
          "value": function () { return this.type_init_with_debug_flags.apply(this, arguments); }
        },
        "typeInterfaceAddPrerequisite": {
          "value": function () { return this.type_interface_add_prerequisite.apply(this, arguments); }
        },
        "typeInterfaceGetPlugin": {
          "value": function () { return this.type_interface_get_plugin.apply(this, arguments); }
        },
        "typeInterfacePeek": {
          "value": function () { return this.type_interface_peek.apply(this, arguments); }
        },
        "typeInterfacePrerequisites": {
          "value": function () { return this.type_interface_prerequisites.apply(this, arguments); }
        },
        "typeInterfaces": {
          "value": function () { return this.type_interfaces.apply(this, arguments); }
        },
        "typeIsA": {
          "value": function () { return this.type_is_a.apply(this, arguments); }
        },
        "typeName": {
          "value": function () { return this.type_name.apply(this, arguments); }
        },
        "typeNameFromClass": {
          "value": function () { return this.type_name_from_class.apply(this, arguments); }
        },
        "typeNameFromInstance": {
          "value": function () { return this.type_name_from_instance.apply(this, arguments); }
        },
        "typeNextBase": {
          "value": function () { return this.type_next_base.apply(this, arguments); }
        },
        "typeParent": {
          "value": function () { return this.type_parent.apply(this, arguments); }
        },
        "typeQname": {
          "value": function () { return this.type_qname.apply(this, arguments); }
        },
        "typeQuery": {
          "value": function () { return this.type_query.apply(this, arguments); }
        },
        "typeRegisterDynamic": {
          "value": function () { return this.type_register_dynamic.apply(this, arguments); }
        },
        "typeRegisterFundamental": {
          "value": function () { return this.type_register_fundamental.apply(this, arguments); }
        },
        "typeRegisterStatic": {
          "value": function () { return this.type_register_static.apply(this, arguments); }
        },
        "typeRegisterStaticSimple": {
          "value": function () { return this.type_register_static_simple.apply(this, arguments); }
        },
        "typeRemoveClassCacheFunc": {
          "value": function () { return this.type_remove_class_cache_func.apply(this, arguments); }
        },
        "typeRemoveInterfaceCheck": {
          "value": function () { return this.type_remove_interface_check.apply(this, arguments); }
        },
        "typeSetQdata": {
          "value": function () { return this.type_set_qdata.apply(this, arguments); }
        },
        "typeTestFlags": {
          "value": function () { return this.type_test_flags.apply(this, arguments); }
        },
        "typeValueTablePeek": {
          "value": function () { return this.type_value_table_peek.apply(this, arguments); }
        },
        "valueRegisterTransformFunc": {
          "value": function () { return this.value_register_transform_func.apply(this, arguments); }
        },
        "valueTypeCompatible": {
          "value": function () { return this.value_type_compatible.apply(this, arguments); }
        },
        "valueTypeTransformable": {
          "value": function () { return this.value_type_transformable.apply(this, arguments); }
        }
      }
    },
    "GUdev": {
      "class": {
        "Client": {
          "prototype": {
            "queryByDeviceFile": {
              "value": function () { return this.query_by_device_file.apply(this, arguments); }
            },
            "queryByDeviceNumber": {
              "value": function () { return this.query_by_device_number.apply(this, arguments); }
            },
            "queryBySubsystem": {
              "value": function () { return this.query_by_subsystem.apply(this, arguments); }
            },
            "queryBySubsystemAndName": {
              "value": function () { return this.query_by_subsystem_and_name.apply(this, arguments); }
            },
            "queryBySysfsPath": {
              "value": function () { return this.query_by_sysfs_path.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Device": {
          "prototype": {
            "getAction": {
              "value": function () { return this.get_action.apply(this, arguments); }
            },
            "getDeviceFile": {
              "value": function () { return this.get_device_file.apply(this, arguments); }
            },
            "getDeviceFileSymlinks": {
              "value": function () { return this.get_device_file_symlinks.apply(this, arguments); }
            },
            "getDeviceNumber": {
              "value": function () { return this.get_device_number.apply(this, arguments); }
            },
            "getDeviceType": {
              "value": function () { return this.get_device_type.apply(this, arguments); }
            },
            "getDevtype": {
              "value": function () { return this.get_devtype.apply(this, arguments); }
            },
            "getDriver": {
              "value": function () { return this.get_driver.apply(this, arguments); }
            },
            "getIsInitialized": {
              "value": function () { return this.get_is_initialized.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getNumber": {
              "value": function () { return this.get_number.apply(this, arguments); }
            },
            "getParent": {
              "value": function () { return this.get_parent.apply(this, arguments); }
            },
            "getParentWithSubsystem": {
              "value": function () { return this.get_parent_with_subsystem.apply(this, arguments); }
            },
            "getProperty": {
              "value": function () { return this.get_property.apply(this, arguments); }
            },
            "getPropertyAsBoolean": {
              "value": function () { return this.get_property_as_boolean.apply(this, arguments); }
            },
            "getPropertyAsDouble": {
              "value": function () { return this.get_property_as_double.apply(this, arguments); }
            },
            "getPropertyAsInt": {
              "value": function () { return this.get_property_as_int.apply(this, arguments); }
            },
            "getPropertyAsStrv": {
              "value": function () { return this.get_property_as_strv.apply(this, arguments); }
            },
            "getPropertyAsUint64": {
              "value": function () { return this.get_property_as_uint64.apply(this, arguments); }
            },
            "getPropertyKeys": {
              "value": function () { return this.get_property_keys.apply(this, arguments); }
            },
            "getSeqnum": {
              "value": function () { return this.get_seqnum.apply(this, arguments); }
            },
            "getSubsystem": {
              "value": function () { return this.get_subsystem.apply(this, arguments); }
            },
            "getSysfsAttr": {
              "value": function () { return this.get_sysfs_attr.apply(this, arguments); }
            },
            "getSysfsAttrAsBoolean": {
              "value": function () { return this.get_sysfs_attr_as_boolean.apply(this, arguments); }
            },
            "getSysfsAttrAsDouble": {
              "value": function () { return this.get_sysfs_attr_as_double.apply(this, arguments); }
            },
            "getSysfsAttrAsInt": {
              "value": function () { return this.get_sysfs_attr_as_int.apply(this, arguments); }
            },
            "getSysfsAttrAsStrv": {
              "value": function () { return this.get_sysfs_attr_as_strv.apply(this, arguments); }
            },
            "getSysfsAttrAsUint64": {
              "value": function () { return this.get_sysfs_attr_as_uint64.apply(this, arguments); }
            },
            "getSysfsAttrKeys": {
              "value": function () { return this.get_sysfs_attr_keys.apply(this, arguments); }
            },
            "getSysfsPath": {
              "value": function () { return this.get_sysfs_path.apply(this, arguments); }
            },
            "getTags": {
              "value": function () { return this.get_tags.apply(this, arguments); }
            },
            "getUsecSinceInitialized": {
              "value": function () { return this.get_usec_since_initialized.apply(this, arguments); }
            },
            "hasProperty": {
              "value": function () { return this.has_property.apply(this, arguments); }
            },
            "hasSysfsAttr": {
              "value": function () { return this.has_sysfs_attr.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Enumerator": {
          "prototype": {
            "addMatchIsInitialized": {
              "value": function () { return this.add_match_is_initialized.apply(this, arguments); }
            },
            "addMatchName": {
              "value": function () { return this.add_match_name.apply(this, arguments); }
            },
            "addMatchProperty": {
              "value": function () { return this.add_match_property.apply(this, arguments); }
            },
            "addMatchSubsystem": {
              "value": function () { return this.add_match_subsystem.apply(this, arguments); }
            },
            "addMatchSysfsAttr": {
              "value": function () { return this.add_match_sysfs_attr.apply(this, arguments); }
            },
            "addMatchTag": {
              "value": function () { return this.add_match_tag.apply(this, arguments); }
            },
            "addNomatchSubsystem": {
              "value": function () { return this.add_nomatch_subsystem.apply(this, arguments); }
            },
            "addNomatchSysfsAttr": {
              "value": function () { return this.add_nomatch_sysfs_attr.apply(this, arguments); }
            },
            "addSysfsPath": {
              "value": function () { return this.add_sysfs_path.apply(this, arguments); }
            }
          },
          "static": {}
        }
      },
      "static": {}
    },
    "GUsb": {
      "class": {
        "Context": {
          "prototype": {
            "findByBusAddress": {
              "value": function () { return this.find_by_bus_address.apply(this, arguments); }
            },
            "findByPlatformId": {
              "value": function () { return this.find_by_platform_id.apply(this, arguments); }
            },
            "findByVidPid": {
              "value": function () { return this.find_by_vid_pid.apply(this, arguments); }
            },
            "getDevices": {
              "value": function () { return this.get_devices.apply(this, arguments); }
            },
            "getMainContext": {
              "value": function () { return this.get_main_context.apply(this, arguments); }
            },
            "getSource": {
              "value": function () { return this.get_source.apply(this, arguments); }
            },
            "setDebug": {
              "value": function () { return this.set_debug.apply(this, arguments); }
            },
            "setMainContext": {
              "value": function () { return this.set_main_context.apply(this, arguments); }
            },
            "debugLevel": {
              "get": function () { return this.debug_level; },
              "set": function (value) { this.debug_level = value; }
            },
            "libusbContext": {
              "get": function () { return this.libusb_context; },
              "set": function (value) { this.libusb_context = value; }
            }
          },
          "static": {
            "errorQuark": {
              "value": function () { return this.error_quark.apply(this, arguments); }
            }
          }
        },
        "Device": {
          "prototype": {
            "bulkTransfer": {
              "value": function () { return this.bulk_transfer.apply(this, arguments); }
            },
            "bulkTransferAsync": {
              "value": function () { return this.bulk_transfer_async.apply(this, arguments); }
            },
            "bulkTransferFinish": {
              "value": function () { return this.bulk_transfer_finish.apply(this, arguments); }
            },
            "claimInterface": {
              "value": function () { return this.claim_interface.apply(this, arguments); }
            },
            "controlTransfer": {
              "value": function () { return this.control_transfer.apply(this, arguments); }
            },
            "controlTransferAsync": {
              "value": function () { return this.control_transfer_async.apply(this, arguments); }
            },
            "controlTransferFinish": {
              "value": function () { return this.control_transfer_finish.apply(this, arguments); }
            },
            "getAddress": {
              "value": function () { return this.get_address.apply(this, arguments); }
            },
            "getBus": {
              "value": function () { return this.get_bus.apply(this, arguments); }
            },
            "getChildren": {
              "value": function () { return this.get_children.apply(this, arguments); }
            },
            "getConfiguration": {
              "value": function () { return this.get_configuration.apply(this, arguments); }
            },
            "getCustomIndex": {
              "value": function () { return this.get_custom_index.apply(this, arguments); }
            },
            "getDeviceClass": {
              "value": function () { return this.get_device_class.apply(this, arguments); }
            },
            "getDeviceProtocol": {
              "value": function () { return this.get_device_protocol.apply(this, arguments); }
            },
            "getDeviceSubclass": {
              "value": function () { return this.get_device_subclass.apply(this, arguments); }
            },
            "getInterface": {
              "value": function () { return this.get_interface.apply(this, arguments); }
            },
            "getInterfaces": {
              "value": function () { return this.get_interfaces.apply(this, arguments); }
            },
            "getManufacturerIndex": {
              "value": function () { return this.get_manufacturer_index.apply(this, arguments); }
            },
            "getParent": {
              "value": function () { return this.get_parent.apply(this, arguments); }
            },
            "getPid": {
              "value": function () { return this.get_pid.apply(this, arguments); }
            },
            "getPidAsStr": {
              "value": function () { return this.get_pid_as_str.apply(this, arguments); }
            },
            "getPlatformId": {
              "value": function () { return this.get_platform_id.apply(this, arguments); }
            },
            "getPortNumber": {
              "value": function () { return this.get_port_number.apply(this, arguments); }
            },
            "getProductIndex": {
              "value": function () { return this.get_product_index.apply(this, arguments); }
            },
            "getRelease": {
              "value": function () { return this.get_release.apply(this, arguments); }
            },
            "getSerialNumberIndex": {
              "value": function () { return this.get_serial_number_index.apply(this, arguments); }
            },
            "getStringDescriptor": {
              "value": function () { return this.get_string_descriptor.apply(this, arguments); }
            },
            "getVid": {
              "value": function () { return this.get_vid.apply(this, arguments); }
            },
            "getVidAsStr": {
              "value": function () { return this.get_vid_as_str.apply(this, arguments); }
            },
            "interruptTransfer": {
              "value": function () { return this.interrupt_transfer.apply(this, arguments); }
            },
            "interruptTransferAsync": {
              "value": function () { return this.interrupt_transfer_async.apply(this, arguments); }
            },
            "interruptTransferFinish": {
              "value": function () { return this.interrupt_transfer_finish.apply(this, arguments); }
            },
            "releaseInterface": {
              "value": function () { return this.release_interface.apply(this, arguments); }
            },
            "setConfiguration": {
              "value": function () { return this.set_configuration.apply(this, arguments); }
            },
            "setInterfaceAlt": {
              "value": function () { return this.set_interface_alt.apply(this, arguments); }
            },
            "libusbDevice": {
              "get": function () { return this.libusb_device; },
              "set": function (value) { this.libusb_device = value; }
            },
            "platformId": {
              "get": function () { return this.platform_id; },
              "set": function (value) { this.platform_id = value; }
            }
          },
          "static": {
            "errorQuark": {
              "value": function () { return this.error_quark.apply(this, arguments); }
            }
          }
        },
        "DeviceList": {
          "prototype": {
            "findByBusAddress": {
              "value": function () { return this.find_by_bus_address.apply(this, arguments); }
            },
            "findByVidPid": {
              "value": function () { return this.find_by_vid_pid.apply(this, arguments); }
            },
            "getDevices": {
              "value": function () { return this.get_devices.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Interface": {
          "prototype": {
            "getAlternate": {
              "value": function () { return this.get_alternate.apply(this, arguments); }
            },
            "getClass": {
              "value": function () { return this.get_class.apply(this, arguments); }
            },
            "getExtra": {
              "value": function () { return this.get_extra.apply(this, arguments); }
            },
            "getIndex": {
              "value": function () { return this.get_index.apply(this, arguments); }
            },
            "getKind": {
              "value": function () { return this.get_kind.apply(this, arguments); }
            },
            "getLength": {
              "value": function () { return this.get_length.apply(this, arguments); }
            },
            "getNumber": {
              "value": function () { return this.get_number.apply(this, arguments); }
            },
            "getProtocol": {
              "value": function () { return this.get_protocol.apply(this, arguments); }
            },
            "getSubclass": {
              "value": function () { return this.get_subclass.apply(this, arguments); }
            }
          },
          "static": {}
        }
      },
      "static": {
        "sourceErrorQuark": {
          "value": function () { return this.source_error_quark.apply(this, arguments); }
        }
      }
    },
    "GWeather": {
      "class": {
        "Info": {
          "prototype": {
            "getApparent": {
              "value": function () { return this.get_apparent.apply(this, arguments); }
            },
            "getAttribution": {
              "value": function () { return this.get_attribution.apply(this, arguments); }
            },
            "getConditions": {
              "value": function () { return this.get_conditions.apply(this, arguments); }
            },
            "getDew": {
              "value": function () { return this.get_dew.apply(this, arguments); }
            },
            "getEnabledProviders": {
              "value": function () { return this.get_enabled_providers.apply(this, arguments); }
            },
            "getForecast": {
              "value": function () { return this.get_forecast.apply(this, arguments); }
            },
            "getForecastList": {
              "value": function () { return this.get_forecast_list.apply(this, arguments); }
            },
            "getHumidity": {
              "value": function () { return this.get_humidity.apply(this, arguments); }
            },
            "getIconName": {
              "value": function () { return this.get_icon_name.apply(this, arguments); }
            },
            "getLocation": {
              "value": function () { return this.get_location.apply(this, arguments); }
            },
            "getLocationName": {
              "value": function () { return this.get_location_name.apply(this, arguments); }
            },
            "getPressure": {
              "value": function () { return this.get_pressure.apply(this, arguments); }
            },
            "getRadar": {
              "value": function () { return this.get_radar.apply(this, arguments); }
            },
            "getSky": {
              "value": function () { return this.get_sky.apply(this, arguments); }
            },
            "getSunrise": {
              "value": function () { return this.get_sunrise.apply(this, arguments); }
            },
            "getSunset": {
              "value": function () { return this.get_sunset.apply(this, arguments); }
            },
            "getSymbolicIconName": {
              "value": function () { return this.get_symbolic_icon_name.apply(this, arguments); }
            },
            "getTemp": {
              "value": function () { return this.get_temp.apply(this, arguments); }
            },
            "getTempMax": {
              "value": function () { return this.get_temp_max.apply(this, arguments); }
            },
            "getTempMin": {
              "value": function () { return this.get_temp_min.apply(this, arguments); }
            },
            "getTempSummary": {
              "value": function () { return this.get_temp_summary.apply(this, arguments); }
            },
            "getUpcomingMoonphases": {
              "value": function () { return this.get_upcoming_moonphases.apply(this, arguments); }
            },
            "getUpdate": {
              "value": function () { return this.get_update.apply(this, arguments); }
            },
            "getValueApparent": {
              "value": function () { return this.get_value_apparent.apply(this, arguments); }
            },
            "getValueConditions": {
              "value": function () { return this.get_value_conditions.apply(this, arguments); }
            },
            "getValueDew": {
              "value": function () { return this.get_value_dew.apply(this, arguments); }
            },
            "getValueMoonphase": {
              "value": function () { return this.get_value_moonphase.apply(this, arguments); }
            },
            "getValuePressure": {
              "value": function () { return this.get_value_pressure.apply(this, arguments); }
            },
            "getValueSky": {
              "value": function () { return this.get_value_sky.apply(this, arguments); }
            },
            "getValueSunrise": {
              "value": function () { return this.get_value_sunrise.apply(this, arguments); }
            },
            "getValueSunset": {
              "value": function () { return this.get_value_sunset.apply(this, arguments); }
            },
            "getValueTemp": {
              "value": function () { return this.get_value_temp.apply(this, arguments); }
            },
            "getValueTempMax": {
              "value": function () { return this.get_value_temp_max.apply(this, arguments); }
            },
            "getValueTempMin": {
              "value": function () { return this.get_value_temp_min.apply(this, arguments); }
            },
            "getValueUpdate": {
              "value": function () { return this.get_value_update.apply(this, arguments); }
            },
            "getValueVisibility": {
              "value": function () { return this.get_value_visibility.apply(this, arguments); }
            },
            "getValueWind": {
              "value": function () { return this.get_value_wind.apply(this, arguments); }
            },
            "getVisibility": {
              "value": function () { return this.get_visibility.apply(this, arguments); }
            },
            "getWeatherSummary": {
              "value": function () { return this.get_weather_summary.apply(this, arguments); }
            },
            "getWind": {
              "value": function () { return this.get_wind.apply(this, arguments); }
            },
            "isDaytime": {
              "value": function () { return this.is_daytime.apply(this, arguments); }
            },
            "isValid": {
              "value": function () { return this.is_valid.apply(this, arguments); }
            },
            "networkError": {
              "value": function () { return this.network_error.apply(this, arguments); }
            },
            "nextSunEvent": {
              "value": function () { return this.next_sun_event.apply(this, arguments); }
            },
            "setEnabledProviders": {
              "value": function () { return this.set_enabled_providers.apply(this, arguments); }
            },
            "setLocation": {
              "value": function () { return this.set_location.apply(this, arguments); }
            },
            "enabledProviders": {
              "get": function () { return this.enabled_providers; },
              "set": function (value) { this.enabled_providers = value; }
            }
          },
          "static": {
            "storeCache": {
              "value": function () { return this.store_cache.apply(this, arguments); }
            }
          }
        },
        "LocationEntry": {
          "prototype": {
            "getLocation": {
              "value": function () { return this.get_location.apply(this, arguments); }
            },
            "hasCustomText": {
              "value": function () { return this.has_custom_text.apply(this, arguments); }
            },
            "setCity": {
              "value": function () { return this.set_city.apply(this, arguments); }
            },
            "setLocation": {
              "value": function () { return this.set_location.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "TimezoneMenu": {
          "prototype": {
            "getTzid": {
              "value": function () { return this.get_tzid.apply(this, arguments); }
            },
            "setTzid": {
              "value": function () { return this.set_tzid.apply(this, arguments); }
            }
          },
          "static": {}
        }
      },
      "static": {
        "locationDetectNearestCityFinish": {
          "value": function () { return this.location_detect_nearest_city_finish.apply(this, arguments); }
        },
        "locationGetWorld": {
          "value": function () { return this.location_get_world.apply(this, arguments); }
        },
        "skyToString": {
          "value": function () { return this.sky_to_string.apply(this, arguments); }
        },
        "temperatureUnitToReal": {
          "value": function () { return this.temperature_unit_to_real.apply(this, arguments); }
        },
        "timezoneGetByTzid": {
          "value": function () { return this.timezone_get_by_tzid.apply(this, arguments); }
        },
        "timezoneGetUtc": {
          "value": function () { return this.timezone_get_utc.apply(this, arguments); }
        },
        "windDirectionToString": {
          "value": function () { return this.wind_direction_to_string.apply(this, arguments); }
        }
      }
    },
    "GXPS": {
      "class": {
        "CoreProperties": {
          "prototype": {
            "getCategory": {
              "value": function () { return this.get_category.apply(this, arguments); }
            },
            "getContentStatus": {
              "value": function () { return this.get_content_status.apply(this, arguments); }
            },
            "getContentType": {
              "value": function () { return this.get_content_type.apply(this, arguments); }
            },
            "getCreated": {
              "value": function () { return this.get_created.apply(this, arguments); }
            },
            "getCreator": {
              "value": function () { return this.get_creator.apply(this, arguments); }
            },
            "getDescription": {
              "value": function () { return this.get_description.apply(this, arguments); }
            },
            "getIdentifier": {
              "value": function () { return this.get_identifier.apply(this, arguments); }
            },
            "getKeywords": {
              "value": function () { return this.get_keywords.apply(this, arguments); }
            },
            "getLanguage": {
              "value": function () { return this.get_language.apply(this, arguments); }
            },
            "getLastModifiedBy": {
              "value": function () { return this.get_last_modified_by.apply(this, arguments); }
            },
            "getLastPrinted": {
              "value": function () { return this.get_last_printed.apply(this, arguments); }
            },
            "getModified": {
              "value": function () { return this.get_modified.apply(this, arguments); }
            },
            "getRevision": {
              "value": function () { return this.get_revision.apply(this, arguments); }
            },
            "getSubject": {
              "value": function () { return this.get_subject.apply(this, arguments); }
            },
            "getTitle": {
              "value": function () { return this.get_title.apply(this, arguments); }
            },
            "getVersion": {
              "value": function () { return this.get_version.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Document": {
          "prototype": {
            "getNPages": {
              "value": function () { return this.get_n_pages.apply(this, arguments); }
            },
            "getPage": {
              "value": function () { return this.get_page.apply(this, arguments); }
            },
            "getPageForAnchor": {
              "value": function () { return this.get_page_for_anchor.apply(this, arguments); }
            },
            "getPageSize": {
              "value": function () { return this.get_page_size.apply(this, arguments); }
            },
            "getStructure": {
              "value": function () { return this.get_structure.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DocumentStructure": {
          "prototype": {
            "hasOutline": {
              "value": function () { return this.has_outline.apply(this, arguments); }
            }
          },
          "static": {
            "outlineIterInit": {
              "value": function () { return this.outline_iter_init.apply(this, arguments); }
            }
          }
        },
        "File": {
          "prototype": {
            "getCoreProperties": {
              "value": function () { return this.get_core_properties.apply(this, arguments); }
            },
            "getDocument": {
              "value": function () { return this.get_document.apply(this, arguments); }
            },
            "getDocumentForLinkTarget": {
              "value": function () { return this.get_document_for_link_target.apply(this, arguments); }
            },
            "getNDocuments": {
              "value": function () { return this.get_n_documents.apply(this, arguments); }
            }
          },
          "static": {
            "errorQuark": {
              "value": function () { return this.error_quark.apply(this, arguments); }
            }
          }
        },
        "Page": {
          "prototype": {
            "getAnchorDestination": {
              "value": function () { return this.get_anchor_destination.apply(this, arguments); }
            },
            "getLinks": {
              "value": function () { return this.get_links.apply(this, arguments); }
            },
            "getSize": {
              "value": function () { return this.get_size.apply(this, arguments); }
            }
          },
          "static": {
            "errorQuark": {
              "value": function () { return this.error_quark.apply(this, arguments); }
            }
          }
        }
      },
      "static": {
        "errorQuark": {
          "value": function () { return this.error_quark.apply(this, arguments); }
        }
      }
    },
    "Gck": {
      "class": {
        "Enumerator": {
          "prototype": {
            "getChained": {
              "value": function () { return this.get_chained.apply(this, arguments); }
            },
            "getInteraction": {
              "value": function () { return this.get_interaction.apply(this, arguments); }
            },
            "getObjectType": {
              "value": function () { return this.get_object_type.apply(this, arguments); }
            },
            "nextAsync": {
              "value": function () { return this.next_async.apply(this, arguments); }
            },
            "nextFinish": {
              "value": function () { return this.next_finish.apply(this, arguments); }
            },
            "nextN": {
              "value": function () { return this.next_n.apply(this, arguments); }
            },
            "setChained": {
              "value": function () { return this.set_chained.apply(this, arguments); }
            },
            "setInteraction": {
              "value": function () { return this.set_interaction.apply(this, arguments); }
            },
            "setObjectType": {
              "value": function () { return this.set_object_type.apply(this, arguments); }
            },
            "setObjectTypeFull": {
              "value": function () { return this.set_object_type_full.apply(this, arguments); }
            },
            "objectType": {
              "get": function () { return this.object_type; },
              "set": function (value) { this.object_type = value; }
            }
          },
          "static": {}
        },
        "Module": {
          "prototype": {
            "getFunctions": {
              "value": function () { return this.get_functions.apply(this, arguments); }
            },
            "getInfo": {
              "value": function () { return this.get_info.apply(this, arguments); }
            },
            "getPath": {
              "value": function () { return this.get_path.apply(this, arguments); }
            },
            "getSlots": {
              "value": function () { return this.get_slots.apply(this, arguments); }
            }
          },
          "static": {
            "initializeAsync": {
              "value": function () { return this.initialize_async.apply(this, arguments); }
            },
            "initializeFinish": {
              "value": function () { return this.initialize_finish.apply(this, arguments); }
            }
          }
        },
        "Object": {
          "prototype": {
            "cacheLookup": {
              "value": function () { return this.cache_lookup.apply(this, arguments); }
            },
            "cacheLookupAsync": {
              "value": function () { return this.cache_lookup_async.apply(this, arguments); }
            },
            "cacheLookupFinish": {
              "value": function () { return this.cache_lookup_finish.apply(this, arguments); }
            },
            "destroyAsync": {
              "value": function () { return this.destroy_async.apply(this, arguments); }
            },
            "destroyFinish": {
              "value": function () { return this.destroy_finish.apply(this, arguments); }
            },
            "getAsync": {
              "value": function () { return this.get_async.apply(this, arguments); }
            },
            "getData": {
              "value": function () { return this.get_data.apply(this, arguments); }
            },
            "getDataAsync": {
              "value": function () { return this.get_data_async.apply(this, arguments); }
            },
            "getDataFinish": {
              "value": function () { return this.get_data_finish.apply(this, arguments); }
            },
            "getDataFull": {
              "value": function () { return this.get_data_full.apply(this, arguments); }
            },
            "getFinish": {
              "value": function () { return this.get_finish.apply(this, arguments); }
            },
            "getFull": {
              "value": function () { return this.get_full.apply(this, arguments); }
            },
            "getHandle": {
              "value": function () { return this.get_handle.apply(this, arguments); }
            },
            "getModule": {
              "value": function () { return this.get_module.apply(this, arguments); }
            },
            "getSession": {
              "value": function () { return this.get_session.apply(this, arguments); }
            },
            "getTemplate": {
              "value": function () { return this.get_template.apply(this, arguments); }
            },
            "getTemplateAsync": {
              "value": function () { return this.get_template_async.apply(this, arguments); }
            },
            "getTemplateFinish": {
              "value": function () { return this.get_template_finish.apply(this, arguments); }
            },
            "setAsync": {
              "value": function () { return this.set_async.apply(this, arguments); }
            },
            "setFinish": {
              "value": function () { return this.set_finish.apply(this, arguments); }
            },
            "setTemplate": {
              "value": function () { return this.set_template.apply(this, arguments); }
            },
            "setTemplateAsync": {
              "value": function () { return this.set_template_async.apply(this, arguments); }
            },
            "setTemplateFinish": {
              "value": function () { return this.set_template_finish.apply(this, arguments); }
            }
          },
          "static": {
            "fromHandle": {
              "value": function () { return this.from_handle.apply(this, arguments); }
            }
          }
        },
        "Password": {
          "prototype": {
            "getKey": {
              "value": function () { return this.get_key.apply(this, arguments); }
            },
            "getModule": {
              "value": function () { return this.get_module.apply(this, arguments); }
            },
            "getToken": {
              "value": function () { return this.get_token.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Session": {
          "prototype": {
            "createObject": {
              "value": function () { return this.create_object.apply(this, arguments); }
            },
            "createObjectAsync": {
              "value": function () { return this.create_object_async.apply(this, arguments); }
            },
            "createObjectFinish": {
              "value": function () { return this.create_object_finish.apply(this, arguments); }
            },
            "decryptAsync": {
              "value": function () { return this.decrypt_async.apply(this, arguments); }
            },
            "decryptFinish": {
              "value": function () { return this.decrypt_finish.apply(this, arguments); }
            },
            "decryptFull": {
              "value": function () { return this.decrypt_full.apply(this, arguments); }
            },
            "deriveKey": {
              "value": function () { return this.derive_key.apply(this, arguments); }
            },
            "deriveKeyAsync": {
              "value": function () { return this.derive_key_async.apply(this, arguments); }
            },
            "deriveKeyFinish": {
              "value": function () { return this.derive_key_finish.apply(this, arguments); }
            },
            "deriveKeyFull": {
              "value": function () { return this.derive_key_full.apply(this, arguments); }
            },
            "encryptAsync": {
              "value": function () { return this.encrypt_async.apply(this, arguments); }
            },
            "encryptFinish": {
              "value": function () { return this.encrypt_finish.apply(this, arguments); }
            },
            "encryptFull": {
              "value": function () { return this.encrypt_full.apply(this, arguments); }
            },
            "enumerateObjects": {
              "value": function () { return this.enumerate_objects.apply(this, arguments); }
            },
            "findHandles": {
              "value": function () { return this.find_handles.apply(this, arguments); }
            },
            "findHandlesAsync": {
              "value": function () { return this.find_handles_async.apply(this, arguments); }
            },
            "findHandlesFinish": {
              "value": function () { return this.find_handles_finish.apply(this, arguments); }
            },
            "findObjects": {
              "value": function () { return this.find_objects.apply(this, arguments); }
            },
            "findObjectsAsync": {
              "value": function () { return this.find_objects_async.apply(this, arguments); }
            },
            "findObjectsFinish": {
              "value": function () { return this.find_objects_finish.apply(this, arguments); }
            },
            "generateKeyPair": {
              "value": function () { return this.generate_key_pair.apply(this, arguments); }
            },
            "generateKeyPairAsync": {
              "value": function () { return this.generate_key_pair_async.apply(this, arguments); }
            },
            "generateKeyPairFinish": {
              "value": function () { return this.generate_key_pair_finish.apply(this, arguments); }
            },
            "generateKeyPairFull": {
              "value": function () { return this.generate_key_pair_full.apply(this, arguments); }
            },
            "getHandle": {
              "value": function () { return this.get_handle.apply(this, arguments); }
            },
            "getInfo": {
              "value": function () { return this.get_info.apply(this, arguments); }
            },
            "getInteraction": {
              "value": function () { return this.get_interaction.apply(this, arguments); }
            },
            "getModule": {
              "value": function () { return this.get_module.apply(this, arguments); }
            },
            "getOptions": {
              "value": function () { return this.get_options.apply(this, arguments); }
            },
            "getSlot": {
              "value": function () { return this.get_slot.apply(this, arguments); }
            },
            "getState": {
              "value": function () { return this.get_state.apply(this, arguments); }
            },
            "initPin": {
              "value": function () { return this.init_pin.apply(this, arguments); }
            },
            "initPinAsync": {
              "value": function () { return this.init_pin_async.apply(this, arguments); }
            },
            "initPinFinish": {
              "value": function () { return this.init_pin_finish.apply(this, arguments); }
            },
            "loginAsync": {
              "value": function () { return this.login_async.apply(this, arguments); }
            },
            "loginFinish": {
              "value": function () { return this.login_finish.apply(this, arguments); }
            },
            "loginInteractive": {
              "value": function () { return this.login_interactive.apply(this, arguments); }
            },
            "loginInteractiveAsync": {
              "value": function () { return this.login_interactive_async.apply(this, arguments); }
            },
            "loginInteractiveFinish": {
              "value": function () { return this.login_interactive_finish.apply(this, arguments); }
            },
            "logoutAsync": {
              "value": function () { return this.logout_async.apply(this, arguments); }
            },
            "logoutFinish": {
              "value": function () { return this.logout_finish.apply(this, arguments); }
            },
            "setInteraction": {
              "value": function () { return this.set_interaction.apply(this, arguments); }
            },
            "setPin": {
              "value": function () { return this.set_pin.apply(this, arguments); }
            },
            "setPinAsync": {
              "value": function () { return this.set_pin_async.apply(this, arguments); }
            },
            "setPinFinish": {
              "value": function () { return this.set_pin_finish.apply(this, arguments); }
            },
            "signAsync": {
              "value": function () { return this.sign_async.apply(this, arguments); }
            },
            "signFinish": {
              "value": function () { return this.sign_finish.apply(this, arguments); }
            },
            "signFull": {
              "value": function () { return this.sign_full.apply(this, arguments); }
            },
            "unwrapKey": {
              "value": function () { return this.unwrap_key.apply(this, arguments); }
            },
            "unwrapKeyAsync": {
              "value": function () { return this.unwrap_key_async.apply(this, arguments); }
            },
            "unwrapKeyFinish": {
              "value": function () { return this.unwrap_key_finish.apply(this, arguments); }
            },
            "unwrapKeyFull": {
              "value": function () { return this.unwrap_key_full.apply(this, arguments); }
            },
            "verifyAsync": {
              "value": function () { return this.verify_async.apply(this, arguments); }
            },
            "verifyFinish": {
              "value": function () { return this.verify_finish.apply(this, arguments); }
            },
            "verifyFull": {
              "value": function () { return this.verify_full.apply(this, arguments); }
            },
            "wrapKey": {
              "value": function () { return this.wrap_key.apply(this, arguments); }
            },
            "wrapKeyAsync": {
              "value": function () { return this.wrap_key_async.apply(this, arguments); }
            },
            "wrapKeyFinish": {
              "value": function () { return this.wrap_key_finish.apply(this, arguments); }
            },
            "wrapKeyFull": {
              "value": function () { return this.wrap_key_full.apply(this, arguments); }
            },
            "appData": {
              "get": function () { return this.app_data; },
              "set": function (value) { this.app_data = value; }
            },
            "openingFlags": {
              "get": function () { return this.opening_flags; },
              "set": function (value) { this.opening_flags = value; }
            }
          },
          "static": {
            "fromHandle": {
              "value": function () { return this.from_handle.apply(this, arguments); }
            },
            "openAsync": {
              "value": function () { return this.open_async.apply(this, arguments); }
            },
            "openFinish": {
              "value": function () { return this.open_finish.apply(this, arguments); }
            }
          }
        },
        "Slot": {
          "prototype": {
            "enumerateObjects": {
              "value": function () { return this.enumerate_objects.apply(this, arguments); }
            },
            "getHandle": {
              "value": function () { return this.get_handle.apply(this, arguments); }
            },
            "getInfo": {
              "value": function () { return this.get_info.apply(this, arguments); }
            },
            "getMechanismInfo": {
              "value": function () { return this.get_mechanism_info.apply(this, arguments); }
            },
            "getMechanisms": {
              "value": function () { return this.get_mechanisms.apply(this, arguments); }
            },
            "getModule": {
              "value": function () { return this.get_module.apply(this, arguments); }
            },
            "getTokenInfo": {
              "value": function () { return this.get_token_info.apply(this, arguments); }
            },
            "hasFlags": {
              "value": function () { return this.has_flags.apply(this, arguments); }
            },
            "openSession": {
              "value": function () { return this.open_session.apply(this, arguments); }
            },
            "openSessionAsync": {
              "value": function () { return this.open_session_async.apply(this, arguments); }
            },
            "openSessionFinish": {
              "value": function () { return this.open_session_finish.apply(this, arguments); }
            },
            "openSessionFull": {
              "value": function () { return this.open_session_full.apply(this, arguments); }
            },
            "openSessionFullAsync": {
              "value": function () { return this.open_session_full_async.apply(this, arguments); }
            }
          },
          "static": {
            "fromHandle": {
              "value": function () { return this.from_handle.apply(this, arguments); }
            }
          }
        }
      },
      "static": {
        "attributesUnref": {
          "value": function () { return this.attributes_unref.apply(this, arguments); }
        },
        "builderUnref": {
          "value": function () { return this.builder_unref.apply(this, arguments); }
        },
        "errorGetQuark": {
          "value": function () { return this.error_get_quark.apply(this, arguments); }
        },
        "listGetBoxedType": {
          "value": function () { return this.list_get_boxed_type.apply(this, arguments); }
        },
        "listRefCopy": {
          "value": function () { return this.list_ref_copy.apply(this, arguments); }
        },
        "listUnrefFree": {
          "value": function () { return this.list_unref_free.apply(this, arguments); }
        },
        "mechanismsCheck": {
          "value": function () { return this.mechanisms_check.apply(this, arguments); }
        },
        "messageFromRv": {
          "value": function () { return this.message_from_rv.apply(this, arguments); }
        },
        "modulesEnumerateObjects": {
          "value": function () { return this.modules_enumerate_objects.apply(this, arguments); }
        },
        "modulesEnumerateUri": {
          "value": function () { return this.modules_enumerate_uri.apply(this, arguments); }
        },
        "modulesGetSlots": {
          "value": function () { return this.modules_get_slots.apply(this, arguments); }
        },
        "modulesInitializeRegistered": {
          "value": function () { return this.modules_initialize_registered.apply(this, arguments); }
        },
        "modulesInitializeRegisteredAsync": {
          "value": function () { return this.modules_initialize_registered_async.apply(this, arguments); }
        },
        "modulesInitializeRegisteredFinish": {
          "value": function () { return this.modules_initialize_registered_finish.apply(this, arguments); }
        },
        "modulesObjectForUri": {
          "value": function () { return this.modules_object_for_uri.apply(this, arguments); }
        },
        "modulesObjectsForUri": {
          "value": function () { return this.modules_objects_for_uri.apply(this, arguments); }
        },
        "modulesTokenForUri": {
          "value": function () { return this.modules_token_for_uri.apply(this, arguments); }
        },
        "modulesTokensForUri": {
          "value": function () { return this.modules_tokens_for_uri.apply(this, arguments); }
        },
        "objectsFromHandleArray": {
          "value": function () { return this.objects_from_handle_array.apply(this, arguments); }
        },
        "slotsEnumerateObjects": {
          "value": function () { return this.slots_enumerate_objects.apply(this, arguments); }
        },
        "stringFromChars": {
          "value": function () { return this.string_from_chars.apply(this, arguments); }
        },
        "stringToChars": {
          "value": function () { return this.string_to_chars.apply(this, arguments); }
        },
        "uriBuild": {
          "value": function () { return this.uri_build.apply(this, arguments); }
        },
        "uriErrorGetQuark": {
          "value": function () { return this.uri_error_get_quark.apply(this, arguments); }
        },
        "uriParse": {
          "value": function () { return this.uri_parse.apply(this, arguments); }
        },
        "valueToBoolean": {
          "value": function () { return this.value_to_boolean.apply(this, arguments); }
        },
        "valueToUlong": {
          "value": function () { return this.value_to_ulong.apply(this, arguments); }
        }
      }
    },
    "Gcr": {
      "class": {
        "CertificateChain": {
          "prototype": {
            "buildAsync": {
              "value": function () { return this.build_async.apply(this, arguments); }
            },
            "buildFinish": {
              "value": function () { return this.build_finish.apply(this, arguments); }
            },
            "getAnchor": {
              "value": function () { return this.get_anchor.apply(this, arguments); }
            },
            "getCertificate": {
              "value": function () { return this.get_certificate.apply(this, arguments); }
            },
            "getEndpoint": {
              "value": function () { return this.get_endpoint.apply(this, arguments); }
            },
            "getLength": {
              "value": function () { return this.get_length.apply(this, arguments); }
            },
            "getStatus": {
              "value": function () { return this.get_status.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "CertificateRequest": {
          "prototype": {
            "completeAsync": {
              "value": function () { return this.complete_async.apply(this, arguments); }
            },
            "completeFinish": {
              "value": function () { return this.complete_finish.apply(this, arguments); }
            },
            "getFormat": {
              "value": function () { return this.get_format.apply(this, arguments); }
            },
            "getPrivateKey": {
              "value": function () { return this.get_private_key.apply(this, arguments); }
            },
            "setCn": {
              "value": function () { return this.set_cn.apply(this, arguments); }
            },
            "privateKey": {
              "get": function () { return this.private_key; },
              "set": function (value) { this.private_key = value; }
            }
          },
          "static": {
            "capableAsync": {
              "value": function () { return this.capable_async.apply(this, arguments); }
            },
            "capableFinish": {
              "value": function () { return this.capable_finish.apply(this, arguments); }
            }
          }
        },
        "FilterCollection": {
          "prototype": {
            "getUnderlying": {
              "value": function () { return this.get_underlying.apply(this, arguments); }
            },
            "setCallback": {
              "value": function () { return this.set_callback.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Parser": {
          "prototype": {
            "addPassword": {
              "value": function () { return this.add_password.apply(this, arguments); }
            },
            "formatDisable": {
              "value": function () { return this.format_disable.apply(this, arguments); }
            },
            "formatEnable": {
              "value": function () { return this.format_enable.apply(this, arguments); }
            },
            "formatSupported": {
              "value": function () { return this.format_supported.apply(this, arguments); }
            },
            "getFilename": {
              "value": function () { return this.get_filename.apply(this, arguments); }
            },
            "getParsed": {
              "value": function () { return this.get_parsed.apply(this, arguments); }
            },
            "getParsedAttributes": {
              "value": function () { return this.get_parsed_attributes.apply(this, arguments); }
            },
            "getParsedBlock": {
              "value": function () { return this.get_parsed_block.apply(this, arguments); }
            },
            "getParsedBytes": {
              "value": function () { return this.get_parsed_bytes.apply(this, arguments); }
            },
            "getParsedDescription": {
              "value": function () { return this.get_parsed_description.apply(this, arguments); }
            },
            "getParsedFormat": {
              "value": function () { return this.get_parsed_format.apply(this, arguments); }
            },
            "getParsedLabel": {
              "value": function () { return this.get_parsed_label.apply(this, arguments); }
            },
            "parseBytes": {
              "value": function () { return this.parse_bytes.apply(this, arguments); }
            },
            "parseData": {
              "value": function () { return this.parse_data.apply(this, arguments); }
            },
            "parseStream": {
              "value": function () { return this.parse_stream.apply(this, arguments); }
            },
            "parseStreamAsync": {
              "value": function () { return this.parse_stream_async.apply(this, arguments); }
            },
            "parseStreamFinish": {
              "value": function () { return this.parse_stream_finish.apply(this, arguments); }
            },
            "setFilename": {
              "value": function () { return this.set_filename.apply(this, arguments); }
            },
            "parsedAttributes": {
              "get": function () { return this.parsed_attributes; },
              "set": function (value) { this.parsed_attributes = value; }
            },
            "parsedDescription": {
              "get": function () { return this.parsed_description; },
              "set": function (value) { this.parsed_description = value; }
            },
            "parsedLabel": {
              "get": function () { return this.parsed_label; },
              "set": function (value) { this.parsed_label = value; }
            }
          },
          "static": {}
        },
        "Pkcs11Certificate": {
          "prototype": {
            "getAttributes": {
              "value": function () { return this.get_attributes.apply(this, arguments); }
            }
          },
          "static": {
            "lookupIssuer": {
              "value": function () { return this.lookup_issuer.apply(this, arguments); }
            },
            "lookupIssuerAsync": {
              "value": function () { return this.lookup_issuer_async.apply(this, arguments); }
            },
            "lookupIssuerFinish": {
              "value": function () { return this.lookup_issuer_finish.apply(this, arguments); }
            }
          }
        },
        "SecretExchange": {
          "prototype": {
            "getProtocol": {
              "value": function () { return this.get_protocol.apply(this, arguments); }
            },
            "getSecret": {
              "value": function () { return this.get_secret.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "SimpleCertificate": {
          "prototype": {},
          "static": {}
        },
        "SimpleCollection": {
          "prototype": {},
          "static": {}
        },
        "SystemPrompt": {
          "prototype": {
            "closeAsync": {
              "value": function () { return this.close_async.apply(this, arguments); }
            },
            "closeFinish": {
              "value": function () { return this.close_finish.apply(this, arguments); }
            },
            "getSecretExchange": {
              "value": function () { return this.get_secret_exchange.apply(this, arguments); }
            },
            "busName": {
              "get": function () { return this.bus_name; },
              "set": function (value) { this.bus_name = value; }
            },
            "secretExchange": {
              "get": function () { return this.secret_exchange; },
              "set": function (value) { this.secret_exchange = value; }
            },
            "timeoutSeconds": {
              "get": function () { return this.timeout_seconds; },
              "set": function (value) { this.timeout_seconds = value; }
            }
          },
          "static": {
            "errorGetDomain": {
              "value": function () { return this.error_get_domain.apply(this, arguments); }
            },
            "openAsync": {
              "value": function () { return this.open_async.apply(this, arguments); }
            },
            "openFinish": {
              "value": function () { return this.open_finish.apply(this, arguments); }
            },
            "openForPrompter": {
              "value": function () { return this.open_for_prompter.apply(this, arguments); }
            },
            "openForPrompterAsync": {
              "value": function () { return this.open_for_prompter_async.apply(this, arguments); }
            }
          }
        },
        "SystemPrompter": {
          "prototype": {
            "getMode": {
              "value": function () { return this.get_mode.apply(this, arguments); }
            },
            "getPromptType": {
              "value": function () { return this.get_prompt_type.apply(this, arguments); }
            },
            "getPrompting": {
              "value": function () { return this.get_prompting.apply(this, arguments); }
            },
            "promptType": {
              "get": function () { return this.prompt_type; },
              "set": function (value) { this.prompt_type = value; }
            }
          },
          "static": {}
        },
        "UnionCollection": {
          "prototype": {},
          "static": {}
        }
      },
      "static": {
        "certificateCompare": {
          "value": function () { return this.certificate_compare.apply(this, arguments); }
        },
        "certificateGetColumns": {
          "value": function () { return this.certificate_get_columns.apply(this, arguments); }
        },
        "certificateMixinClassInit": {
          "value": function () { return this.certificate_mixin_class_init.apply(this, arguments); }
        },
        "certificateMixinComparableInit": {
          "value": function () { return this.certificate_mixin_comparable_init.apply(this, arguments); }
        },
        "certificateMixinGetProperty": {
          "value": function () { return this.certificate_mixin_get_property.apply(this, arguments); }
        },
        "comparableMemcmp": {
          "value": function () { return this.comparable_memcmp.apply(this, arguments); }
        },
        "dataErrorGetDomain": {
          "value": function () { return this.data_error_get_domain.apply(this, arguments); }
        },
        "fingerprintFromAttributes": {
          "value": function () { return this.fingerprint_from_attributes.apply(this, arguments); }
        },
        "fingerprintFromSubjectPublicKeyInfo": {
          "value": function () { return this.fingerprint_from_subject_public_key_info.apply(this, arguments); }
        },
        "iconForToken": {
          "value": function () { return this.icon_for_token.apply(this, arguments); }
        },
        "importerCreateForParsed": {
          "value": function () { return this.importer_create_for_parsed.apply(this, arguments); }
        },
        "importerQueueAndFilterForParsed": {
          "value": function () { return this.importer_queue_and_filter_for_parsed.apply(this, arguments); }
        },
        "importerRegister": {
          "value": function () { return this.importer_register.apply(this, arguments); }
        },
        "importerRegisterWellKnown": {
          "value": function () { return this.importer_register_well_known.apply(this, arguments); }
        },
        "mockPrompterDisconnect": {
          "value": function () { return this.mock_prompter_disconnect.apply(this, arguments); }
        },
        "mockPrompterExpectClose": {
          "value": function () { return this.mock_prompter_expect_close.apply(this, arguments); }
        },
        "mockPrompterExpectConfirmCancel": {
          "value": function () { return this.mock_prompter_expect_confirm_cancel.apply(this, arguments); }
        },
        "mockPrompterExpectConfirmOk": {
          "value": function () { return this.mock_prompter_expect_confirm_ok.apply(this, arguments); }
        },
        "mockPrompterExpectPasswordCancel": {
          "value": function () { return this.mock_prompter_expect_password_cancel.apply(this, arguments); }
        },
        "mockPrompterExpectPasswordOk": {
          "value": function () { return this.mock_prompter_expect_password_ok.apply(this, arguments); }
        },
        "mockPrompterGetDelayMsec": {
          "value": function () { return this.mock_prompter_get_delay_msec.apply(this, arguments); }
        },
        "mockPrompterIsExpecting": {
          "value": function () { return this.mock_prompter_is_expecting.apply(this, arguments); }
        },
        "mockPrompterIsPrompting": {
          "value": function () { return this.mock_prompter_is_prompting.apply(this, arguments); }
        },
        "mockPrompterSetDelayMsec": {
          "value": function () { return this.mock_prompter_set_delay_msec.apply(this, arguments); }
        },
        "mockPrompterStart": {
          "value": function () { return this.mock_prompter_start.apply(this, arguments); }
        },
        "mockPrompterStop": {
          "value": function () { return this.mock_prompter_stop.apply(this, arguments); }
        },
        "parsedUnref": {
          "value": function () { return this.parsed_unref.apply(this, arguments); }
        },
        "pkcs11AddModule": {
          "value": function () { return this.pkcs11_add_module.apply(this, arguments); }
        },
        "pkcs11AddModuleFromFile": {
          "value": function () { return this.pkcs11_add_module_from_file.apply(this, arguments); }
        },
        "pkcs11GetModules": {
          "value": function () { return this.pkcs11_get_modules.apply(this, arguments); }
        },
        "pkcs11GetTrustLookupSlots": {
          "value": function () { return this.pkcs11_get_trust_lookup_slots.apply(this, arguments); }
        },
        "pkcs11GetTrustLookupUris": {
          "value": function () { return this.pkcs11_get_trust_lookup_uris.apply(this, arguments); }
        },
        "pkcs11GetTrustStoreSlot": {
          "value": function () { return this.pkcs11_get_trust_store_slot.apply(this, arguments); }
        },
        "pkcs11GetTrustStoreUri": {
          "value": function () { return this.pkcs11_get_trust_store_uri.apply(this, arguments); }
        },
        "pkcs11Initialize": {
          "value": function () { return this.pkcs11_initialize.apply(this, arguments); }
        },
        "pkcs11InitializeAsync": {
          "value": function () { return this.pkcs11_initialize_async.apply(this, arguments); }
        },
        "pkcs11InitializeFinish": {
          "value": function () { return this.pkcs11_initialize_finish.apply(this, arguments); }
        },
        "pkcs11SetModules": {
          "value": function () { return this.pkcs11_set_modules.apply(this, arguments); }
        },
        "pkcs11SetTrustLookupUris": {
          "value": function () { return this.pkcs11_set_trust_lookup_uris.apply(this, arguments); }
        },
        "pkcs11SetTrustStoreUri": {
          "value": function () { return this.pkcs11_set_trust_store_uri.apply(this, arguments); }
        },
        "secureMemoryAlloc": {
          "value": function () { return this.secure_memory_alloc.apply(this, arguments); }
        },
        "secureMemoryFree": {
          "value": function () { return this.secure_memory_free.apply(this, arguments); }
        },
        "secureMemoryIsSecure": {
          "value": function () { return this.secure_memory_is_secure.apply(this, arguments); }
        },
        "secureMemoryRealloc": {
          "value": function () { return this.secure_memory_realloc.apply(this, arguments); }
        },
        "secureMemoryStrdup": {
          "value": function () { return this.secure_memory_strdup.apply(this, arguments); }
        },
        "secureMemoryStrfree": {
          "value": function () { return this.secure_memory_strfree.apply(this, arguments); }
        },
        "secureMemoryTryAlloc": {
          "value": function () { return this.secure_memory_try_alloc.apply(this, arguments); }
        },
        "secureMemoryTryRealloc": {
          "value": function () { return this.secure_memory_try_realloc.apply(this, arguments); }
        }
      }
    },
    "GcrUi": {
      "class": {
        "CertificateRenderer": {
          "prototype": {
            "getCertificate": {
              "value": function () { return this.get_certificate.apply(this, arguments); }
            },
            "setCertificate": {
              "value": function () { return this.set_certificate.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "CertificateWidget": {
          "prototype": {
            "getCertificate": {
              "value": function () { return this.get_certificate.apply(this, arguments); }
            },
            "setCertificate": {
              "value": function () { return this.set_certificate.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "CollectionModel": {
          "prototype": {
            "changeSelected": {
              "value": function () { return this.change_selected.apply(this, arguments); }
            },
            "columnForSelected": {
              "value": function () { return this.column_for_selected.apply(this, arguments); }
            },
            "getCollection": {
              "value": function () { return this.get_collection.apply(this, arguments); }
            },
            "getSelectedObjects": {
              "value": function () { return this.get_selected_objects.apply(this, arguments); }
            },
            "isSelected": {
              "value": function () { return this.is_selected.apply(this, arguments); }
            },
            "iterForObject": {
              "value": function () { return this.iter_for_object.apply(this, arguments); }
            },
            "objectForIter": {
              "value": function () { return this.object_for_iter.apply(this, arguments); }
            },
            "setCollection": {
              "value": function () { return this.set_collection.apply(this, arguments); }
            },
            "setColumns": {
              "value": function () { return this.set_columns.apply(this, arguments); }
            },
            "setSelectedObjects": {
              "value": function () { return this.set_selected_objects.apply(this, arguments); }
            },
            "toggleSelected": {
              "value": function () { return this.toggle_selected.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "ComboSelector": {
          "prototype": {
            "getCollection": {
              "value": function () { return this.get_collection.apply(this, arguments); }
            },
            "getSelected": {
              "value": function () { return this.get_selected.apply(this, arguments); }
            },
            "setSelected": {
              "value": function () { return this.set_selected.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "FailureRenderer": {
          "prototype": {},
          "static": {
            "newUnsupported": {
              "value": function () { return this.new_unsupported.apply(this, arguments); }
            }
          }
        },
        "ImportButton": {
          "prototype": {
            "addParsed": {
              "value": function () { return this.add_parsed.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "KeyRenderer": {
          "prototype": {
            "getAttributes": {
              "value": function () { return this.get_attributes.apply(this, arguments); }
            },
            "setAttributes": {
              "value": function () { return this.set_attributes.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "KeyWidget": {
          "prototype": {
            "getAttributes": {
              "value": function () { return this.get_attributes.apply(this, arguments); }
            },
            "setAttributes": {
              "value": function () { return this.set_attributes.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "ListSelector": {
          "prototype": {
            "getCollection": {
              "value": function () { return this.get_collection.apply(this, arguments); }
            },
            "getSelected": {
              "value": function () { return this.get_selected.apply(this, arguments); }
            },
            "setSelected": {
              "value": function () { return this.set_selected.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "PromptDialog": {
          "prototype": {
            "choiceVisible": {
              "get": function () { return this.choice_visible; },
              "set": function (value) { this.choice_visible = value; }
            },
            "confirmVisible": {
              "get": function () { return this.confirm_visible; },
              "set": function (value) { this.confirm_visible = value; }
            },
            "passwordVisible": {
              "get": function () { return this.password_visible; },
              "set": function (value) { this.password_visible = value; }
            },
            "warningVisible": {
              "get": function () { return this.warning_visible; },
              "set": function (value) { this.warning_visible = value; }
            }
          },
          "static": {}
        },
        "SecureEntryBuffer": {
          "prototype": {},
          "static": {}
        },
        "TreeSelector": {
          "prototype": {
            "getCollection": {
              "value": function () { return this.get_collection.apply(this, arguments); }
            },
            "getColumns": {
              "value": function () { return this.get_columns.apply(this, arguments); }
            },
            "getSelected": {
              "value": function () { return this.get_selected.apply(this, arguments); }
            },
            "setSelected": {
              "value": function () { return this.set_selected.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "UnlockOptionsWidget": {
          "prototype": {
            "getChoice": {
              "value": function () { return this.get_choice.apply(this, arguments); }
            },
            "getLabel": {
              "value": function () { return this.get_label.apply(this, arguments); }
            },
            "getSensitive": {
              "value": function () { return this.get_sensitive.apply(this, arguments); }
            },
            "getTtl": {
              "value": function () { return this.get_ttl.apply(this, arguments); }
            },
            "setChoice": {
              "value": function () { return this.set_choice.apply(this, arguments); }
            },
            "setLabel": {
              "value": function () { return this.set_label.apply(this, arguments); }
            },
            "setSensitive": {
              "value": function () { return this.set_sensitive.apply(this, arguments); }
            },
            "setTtl": {
              "value": function () { return this.set_ttl.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "ViewerWidget": {
          "prototype": {
            "clearError": {
              "value": function () { return this.clear_error.apply(this, arguments); }
            },
            "getDisplayName": {
              "value": function () { return this.get_display_name.apply(this, arguments); }
            },
            "getParser": {
              "value": function () { return this.get_parser.apply(this, arguments); }
            },
            "getViewer": {
              "value": function () { return this.get_viewer.apply(this, arguments); }
            },
            "loadBytes": {
              "value": function () { return this.load_bytes.apply(this, arguments); }
            },
            "loadData": {
              "value": function () { return this.load_data.apply(this, arguments); }
            },
            "loadFile": {
              "value": function () { return this.load_file.apply(this, arguments); }
            },
            "setDisplayName": {
              "value": function () { return this.set_display_name.apply(this, arguments); }
            },
            "showError": {
              "value": function () { return this.show_error.apply(this, arguments); }
            },
            "displayName": {
              "get": function () { return this.display_name; },
              "set": function (value) { this.display_name = value; }
            }
          },
          "static": {}
        }
      },
      "static": {
        "rendererCreate": {
          "value": function () { return this.renderer_create.apply(this, arguments); }
        },
        "rendererRegister": {
          "value": function () { return this.renderer_register.apply(this, arguments); }
        },
        "rendererRegisterWellKnown": {
          "value": function () { return this.renderer_register_well_known.apply(this, arguments); }
        },
        "viewerNew": {
          "value": function () { return this.viewer_new.apply(this, arguments); }
        },
        "viewerNewScrolled": {
          "value": function () { return this.viewer_new_scrolled.apply(this, arguments); }
        }
      }
    },
    "Gdk": {
      "class": {
        "AppLaunchContext": {
          "prototype": {
            "setDesktop": {
              "value": function () { return this.set_desktop.apply(this, arguments); }
            },
            "setDisplay": {
              "value": function () { return this.set_display.apply(this, arguments); }
            },
            "setIcon": {
              "value": function () { return this.set_icon.apply(this, arguments); }
            },
            "setIconName": {
              "value": function () { return this.set_icon_name.apply(this, arguments); }
            },
            "setScreen": {
              "value": function () { return this.set_screen.apply(this, arguments); }
            },
            "setTimestamp": {
              "value": function () { return this.set_timestamp.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Cursor": {
          "prototype": {
            "getCursorType": {
              "value": function () { return this.get_cursor_type.apply(this, arguments); }
            },
            "getDisplay": {
              "value": function () { return this.get_display.apply(this, arguments); }
            },
            "getImage": {
              "value": function () { return this.get_image.apply(this, arguments); }
            },
            "getSurface": {
              "value": function () { return this.get_surface.apply(this, arguments); }
            },
            "cursorType": {
              "get": function () { return this.cursor_type; },
              "set": function (value) { this.cursor_type = value; }
            }
          },
          "static": {}
        },
        "Device": {
          "prototype": {
            "getAssociatedDevice": {
              "value": function () { return this.get_associated_device.apply(this, arguments); }
            },
            "getAxis": {
              "value": function () { return this.get_axis.apply(this, arguments); }
            },
            "getAxisUse": {
              "value": function () { return this.get_axis_use.apply(this, arguments); }
            },
            "getAxisValue": {
              "value": function () { return this.get_axis_value.apply(this, arguments); }
            },
            "getDeviceType": {
              "value": function () { return this.get_device_type.apply(this, arguments); }
            },
            "getDisplay": {
              "value": function () { return this.get_display.apply(this, arguments); }
            },
            "getHasCursor": {
              "value": function () { return this.get_has_cursor.apply(this, arguments); }
            },
            "getHistory": {
              "value": function () { return this.get_history.apply(this, arguments); }
            },
            "getKey": {
              "value": function () { return this.get_key.apply(this, arguments); }
            },
            "getLastEventWindow": {
              "value": function () { return this.get_last_event_window.apply(this, arguments); }
            },
            "getMode": {
              "value": function () { return this.get_mode.apply(this, arguments); }
            },
            "getNAxes": {
              "value": function () { return this.get_n_axes.apply(this, arguments); }
            },
            "getNKeys": {
              "value": function () { return this.get_n_keys.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getPosition": {
              "value": function () { return this.get_position.apply(this, arguments); }
            },
            "getPositionDouble": {
              "value": function () { return this.get_position_double.apply(this, arguments); }
            },
            "getProductId": {
              "value": function () { return this.get_product_id.apply(this, arguments); }
            },
            "getSource": {
              "value": function () { return this.get_source.apply(this, arguments); }
            },
            "getState": {
              "value": function () { return this.get_state.apply(this, arguments); }
            },
            "getVendorId": {
              "value": function () { return this.get_vendor_id.apply(this, arguments); }
            },
            "getWindowAtPosition": {
              "value": function () { return this.get_window_at_position.apply(this, arguments); }
            },
            "getWindowAtPositionDouble": {
              "value": function () { return this.get_window_at_position_double.apply(this, arguments); }
            },
            "listAxes": {
              "value": function () { return this.list_axes.apply(this, arguments); }
            },
            "listSlaveDevices": {
              "value": function () { return this.list_slave_devices.apply(this, arguments); }
            },
            "setAxisUse": {
              "value": function () { return this.set_axis_use.apply(this, arguments); }
            },
            "setKey": {
              "value": function () { return this.set_key.apply(this, arguments); }
            },
            "setMode": {
              "value": function () { return this.set_mode.apply(this, arguments); }
            },
            "associatedDevice": {
              "get": function () { return this.associated_device; },
              "set": function (value) { this.associated_device = value; }
            },
            "deviceManager": {
              "get": function () { return this.device_manager; },
              "set": function (value) { this.device_manager = value; }
            },
            "hasCursor": {
              "get": function () { return this.has_cursor; },
              "set": function (value) { this.has_cursor = value; }
            },
            "inputMode": {
              "get": function () { return this.input_mode; },
              "set": function (value) { this.input_mode = value; }
            },
            "inputSource": {
              "get": function () { return this.input_source; },
              "set": function (value) { this.input_source = value; }
            },
            "nAxes": {
              "get": function () { return this.n_axes; },
              "set": function (value) { this.n_axes = value; }
            },
            "productId": {
              "get": function () { return this.product_id; },
              "set": function (value) { this.product_id = value; }
            },
            "vendorId": {
              "get": function () { return this.vendor_id; },
              "set": function (value) { this.vendor_id = value; }
            }
          },
          "static": {
            "freeHistory": {
              "value": function () { return this.free_history.apply(this, arguments); }
            },
            "grabInfoLibgtkOnly": {
              "value": function () { return this.grab_info_libgtk_only.apply(this, arguments); }
            }
          }
        },
        "DeviceManager": {
          "prototype": {
            "getClientPointer": {
              "value": function () { return this.get_client_pointer.apply(this, arguments); }
            },
            "getDisplay": {
              "value": function () { return this.get_display.apply(this, arguments); }
            },
            "listDevices": {
              "value": function () { return this.list_devices.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Display": {
          "prototype": {
            "deviceIsGrabbed": {
              "value": function () { return this.device_is_grabbed.apply(this, arguments); }
            },
            "getAppLaunchContext": {
              "value": function () { return this.get_app_launch_context.apply(this, arguments); }
            },
            "getDefaultCursorSize": {
              "value": function () { return this.get_default_cursor_size.apply(this, arguments); }
            },
            "getDefaultGroup": {
              "value": function () { return this.get_default_group.apply(this, arguments); }
            },
            "getDefaultScreen": {
              "value": function () { return this.get_default_screen.apply(this, arguments); }
            },
            "getDeviceManager": {
              "value": function () { return this.get_device_manager.apply(this, arguments); }
            },
            "getEvent": {
              "value": function () { return this.get_event.apply(this, arguments); }
            },
            "getMaximalCursorSize": {
              "value": function () { return this.get_maximal_cursor_size.apply(this, arguments); }
            },
            "getNScreens": {
              "value": function () { return this.get_n_screens.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getPointer": {
              "value": function () { return this.get_pointer.apply(this, arguments); }
            },
            "getScreen": {
              "value": function () { return this.get_screen.apply(this, arguments); }
            },
            "getWindowAtPointer": {
              "value": function () { return this.get_window_at_pointer.apply(this, arguments); }
            },
            "hasPending": {
              "value": function () { return this.has_pending.apply(this, arguments); }
            },
            "isClosed": {
              "value": function () { return this.is_closed.apply(this, arguments); }
            },
            "keyboardUngrab": {
              "value": function () { return this.keyboard_ungrab.apply(this, arguments); }
            },
            "listDevices": {
              "value": function () { return this.list_devices.apply(this, arguments); }
            },
            "notifyStartupComplete": {
              "value": function () { return this.notify_startup_complete.apply(this, arguments); }
            },
            "peekEvent": {
              "value": function () { return this.peek_event.apply(this, arguments); }
            },
            "pointerIsGrabbed": {
              "value": function () { return this.pointer_is_grabbed.apply(this, arguments); }
            },
            "pointerUngrab": {
              "value": function () { return this.pointer_ungrab.apply(this, arguments); }
            },
            "putEvent": {
              "value": function () { return this.put_event.apply(this, arguments); }
            },
            "requestSelectionNotification": {
              "value": function () { return this.request_selection_notification.apply(this, arguments); }
            },
            "setDoubleClickDistance": {
              "value": function () { return this.set_double_click_distance.apply(this, arguments); }
            },
            "setDoubleClickTime": {
              "value": function () { return this.set_double_click_time.apply(this, arguments); }
            },
            "storeClipboard": {
              "value": function () { return this.store_clipboard.apply(this, arguments); }
            },
            "supportsClipboardPersistence": {
              "value": function () { return this.supports_clipboard_persistence.apply(this, arguments); }
            },
            "supportsComposite": {
              "value": function () { return this.supports_composite.apply(this, arguments); }
            },
            "supportsCursorAlpha": {
              "value": function () { return this.supports_cursor_alpha.apply(this, arguments); }
            },
            "supportsCursorColor": {
              "value": function () { return this.supports_cursor_color.apply(this, arguments); }
            },
            "supportsInputShapes": {
              "value": function () { return this.supports_input_shapes.apply(this, arguments); }
            },
            "supportsSelectionNotification": {
              "value": function () { return this.supports_selection_notification.apply(this, arguments); }
            },
            "supportsShapes": {
              "value": function () { return this.supports_shapes.apply(this, arguments); }
            },
            "warpPointer": {
              "value": function () { return this.warp_pointer.apply(this, arguments); }
            }
          },
          "static": {
            "getDefault": {
              "value": function () { return this.get_default.apply(this, arguments); }
            },
            "openDefaultLibgtkOnly": {
              "value": function () { return this.open_default_libgtk_only.apply(this, arguments); }
            }
          }
        },
        "DisplayManager": {
          "prototype": {
            "getDefaultDisplay": {
              "value": function () { return this.get_default_display.apply(this, arguments); }
            },
            "listDisplays": {
              "value": function () { return this.list_displays.apply(this, arguments); }
            },
            "openDisplay": {
              "value": function () { return this.open_display.apply(this, arguments); }
            },
            "setDefaultDisplay": {
              "value": function () { return this.set_default_display.apply(this, arguments); }
            },
            "defaultDisplay": {
              "get": function () { return this.default_display; },
              "set": function (value) { this.default_display = value; }
            }
          },
          "static": {}
        },
        "DragContext": {
          "prototype": {
            "getActions": {
              "value": function () { return this.get_actions.apply(this, arguments); }
            },
            "getDestWindow": {
              "value": function () { return this.get_dest_window.apply(this, arguments); }
            },
            "getDevice": {
              "value": function () { return this.get_device.apply(this, arguments); }
            },
            "getProtocol": {
              "value": function () { return this.get_protocol.apply(this, arguments); }
            },
            "getSelectedAction": {
              "value": function () { return this.get_selected_action.apply(this, arguments); }
            },
            "getSourceWindow": {
              "value": function () { return this.get_source_window.apply(this, arguments); }
            },
            "getSuggestedAction": {
              "value": function () { return this.get_suggested_action.apply(this, arguments); }
            },
            "listTargets": {
              "value": function () { return this.list_targets.apply(this, arguments); }
            },
            "setDevice": {
              "value": function () { return this.set_device.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "FrameClock": {
          "prototype": {
            "beginUpdating": {
              "value": function () { return this.begin_updating.apply(this, arguments); }
            },
            "endUpdating": {
              "value": function () { return this.end_updating.apply(this, arguments); }
            },
            "getCurrentTimings": {
              "value": function () { return this.get_current_timings.apply(this, arguments); }
            },
            "getFrameCounter": {
              "value": function () { return this.get_frame_counter.apply(this, arguments); }
            },
            "getFrameTime": {
              "value": function () { return this.get_frame_time.apply(this, arguments); }
            },
            "getHistoryStart": {
              "value": function () { return this.get_history_start.apply(this, arguments); }
            },
            "getRefreshInfo": {
              "value": function () { return this.get_refresh_info.apply(this, arguments); }
            },
            "getTimings": {
              "value": function () { return this.get_timings.apply(this, arguments); }
            },
            "requestPhase": {
              "value": function () { return this.request_phase.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "GLContext": {
          "prototype": {
            "getDebugEnabled": {
              "value": function () { return this.get_debug_enabled.apply(this, arguments); }
            },
            "getDisplay": {
              "value": function () { return this.get_display.apply(this, arguments); }
            },
            "getForwardCompatible": {
              "value": function () { return this.get_forward_compatible.apply(this, arguments); }
            },
            "getRequiredVersion": {
              "value": function () { return this.get_required_version.apply(this, arguments); }
            },
            "getSharedContext": {
              "value": function () { return this.get_shared_context.apply(this, arguments); }
            },
            "getVersion": {
              "value": function () { return this.get_version.apply(this, arguments); }
            },
            "getWindow": {
              "value": function () { return this.get_window.apply(this, arguments); }
            },
            "makeCurrent": {
              "value": function () { return this.make_current.apply(this, arguments); }
            },
            "setDebugEnabled": {
              "value": function () { return this.set_debug_enabled.apply(this, arguments); }
            },
            "setForwardCompatible": {
              "value": function () { return this.set_forward_compatible.apply(this, arguments); }
            },
            "setRequiredVersion": {
              "value": function () { return this.set_required_version.apply(this, arguments); }
            },
            "sharedContext": {
              "get": function () { return this.shared_context; },
              "set": function (value) { this.shared_context = value; }
            }
          },
          "static": {
            "clearCurrent": {
              "value": function () { return this.clear_current.apply(this, arguments); }
            },
            "getCurrent": {
              "value": function () { return this.get_current.apply(this, arguments); }
            }
          }
        },
        "Keymap": {
          "prototype": {
            "addVirtualModifiers": {
              "value": function () { return this.add_virtual_modifiers.apply(this, arguments); }
            },
            "getCapsLockState": {
              "value": function () { return this.get_caps_lock_state.apply(this, arguments); }
            },
            "getDirection": {
              "value": function () { return this.get_direction.apply(this, arguments); }
            },
            "getEntriesForKeycode": {
              "value": function () { return this.get_entries_for_keycode.apply(this, arguments); }
            },
            "getEntriesForKeyval": {
              "value": function () { return this.get_entries_for_keyval.apply(this, arguments); }
            },
            "getModifierMask": {
              "value": function () { return this.get_modifier_mask.apply(this, arguments); }
            },
            "getModifierState": {
              "value": function () { return this.get_modifier_state.apply(this, arguments); }
            },
            "getNumLockState": {
              "value": function () { return this.get_num_lock_state.apply(this, arguments); }
            },
            "getScrollLockState": {
              "value": function () { return this.get_scroll_lock_state.apply(this, arguments); }
            },
            "haveBidiLayouts": {
              "value": function () { return this.have_bidi_layouts.apply(this, arguments); }
            },
            "lookupKey": {
              "value": function () { return this.lookup_key.apply(this, arguments); }
            },
            "mapVirtualModifiers": {
              "value": function () { return this.map_virtual_modifiers.apply(this, arguments); }
            },
            "translateKeyboardState": {
              "value": function () { return this.translate_keyboard_state.apply(this, arguments); }
            }
          },
          "static": {
            "getDefault": {
              "value": function () { return this.get_default.apply(this, arguments); }
            },
            "getForDisplay": {
              "value": function () { return this.get_for_display.apply(this, arguments); }
            }
          }
        },
        "Screen": {
          "prototype": {
            "getActiveWindow": {
              "value": function () { return this.get_active_window.apply(this, arguments); }
            },
            "getDisplay": {
              "value": function () { return this.get_display.apply(this, arguments); }
            },
            "getFontOptions": {
              "value": function () { return this.get_font_options.apply(this, arguments); }
            },
            "getHeight": {
              "value": function () { return this.get_height.apply(this, arguments); }
            },
            "getHeightMm": {
              "value": function () { return this.get_height_mm.apply(this, arguments); }
            },
            "getMonitorAtPoint": {
              "value": function () { return this.get_monitor_at_point.apply(this, arguments); }
            },
            "getMonitorAtWindow": {
              "value": function () { return this.get_monitor_at_window.apply(this, arguments); }
            },
            "getMonitorGeometry": {
              "value": function () { return this.get_monitor_geometry.apply(this, arguments); }
            },
            "getMonitorHeightMm": {
              "value": function () { return this.get_monitor_height_mm.apply(this, arguments); }
            },
            "getMonitorPlugName": {
              "value": function () { return this.get_monitor_plug_name.apply(this, arguments); }
            },
            "getMonitorScaleFactor": {
              "value": function () { return this.get_monitor_scale_factor.apply(this, arguments); }
            },
            "getMonitorWidthMm": {
              "value": function () { return this.get_monitor_width_mm.apply(this, arguments); }
            },
            "getMonitorWorkarea": {
              "value": function () { return this.get_monitor_workarea.apply(this, arguments); }
            },
            "getNMonitors": {
              "value": function () { return this.get_n_monitors.apply(this, arguments); }
            },
            "getNumber": {
              "value": function () { return this.get_number.apply(this, arguments); }
            },
            "getPrimaryMonitor": {
              "value": function () { return this.get_primary_monitor.apply(this, arguments); }
            },
            "getResolution": {
              "value": function () { return this.get_resolution.apply(this, arguments); }
            },
            "getRgbaVisual": {
              "value": function () { return this.get_rgba_visual.apply(this, arguments); }
            },
            "getRootWindow": {
              "value": function () { return this.get_root_window.apply(this, arguments); }
            },
            "getSetting": {
              "value": function () { return this.get_setting.apply(this, arguments); }
            },
            "getSystemVisual": {
              "value": function () { return this.get_system_visual.apply(this, arguments); }
            },
            "getToplevelWindows": {
              "value": function () { return this.get_toplevel_windows.apply(this, arguments); }
            },
            "getWidth": {
              "value": function () { return this.get_width.apply(this, arguments); }
            },
            "getWidthMm": {
              "value": function () { return this.get_width_mm.apply(this, arguments); }
            },
            "getWindowStack": {
              "value": function () { return this.get_window_stack.apply(this, arguments); }
            },
            "isComposited": {
              "value": function () { return this.is_composited.apply(this, arguments); }
            },
            "listVisuals": {
              "value": function () { return this.list_visuals.apply(this, arguments); }
            },
            "makeDisplayName": {
              "value": function () { return this.make_display_name.apply(this, arguments); }
            },
            "setFontOptions": {
              "value": function () { return this.set_font_options.apply(this, arguments); }
            },
            "setResolution": {
              "value": function () { return this.set_resolution.apply(this, arguments); }
            },
            "fontOptions": {
              "get": function () { return this.font_options; },
              "set": function (value) { this.font_options = value; }
            }
          },
          "static": {
            "getDefault": {
              "value": function () { return this.get_default.apply(this, arguments); }
            },
            "heightMm": {
              "value": function () { return this.height_mm.apply(this, arguments); }
            },
            "widthMm": {
              "value": function () { return this.width_mm.apply(this, arguments); }
            }
          }
        },
        "Visual": {
          "prototype": {
            "getBitsPerRgb": {
              "value": function () { return this.get_bits_per_rgb.apply(this, arguments); }
            },
            "getBluePixelDetails": {
              "value": function () { return this.get_blue_pixel_details.apply(this, arguments); }
            },
            "getByteOrder": {
              "value": function () { return this.get_byte_order.apply(this, arguments); }
            },
            "getColormapSize": {
              "value": function () { return this.get_colormap_size.apply(this, arguments); }
            },
            "getDepth": {
              "value": function () { return this.get_depth.apply(this, arguments); }
            },
            "getGreenPixelDetails": {
              "value": function () { return this.get_green_pixel_details.apply(this, arguments); }
            },
            "getRedPixelDetails": {
              "value": function () { return this.get_red_pixel_details.apply(this, arguments); }
            },
            "getScreen": {
              "value": function () { return this.get_screen.apply(this, arguments); }
            },
            "getVisualType": {
              "value": function () { return this.get_visual_type.apply(this, arguments); }
            }
          },
          "static": {
            "getBest": {
              "value": function () { return this.get_best.apply(this, arguments); }
            },
            "getBestDepth": {
              "value": function () { return this.get_best_depth.apply(this, arguments); }
            },
            "getBestType": {
              "value": function () { return this.get_best_type.apply(this, arguments); }
            },
            "getBestWithBoth": {
              "value": function () { return this.get_best_with_both.apply(this, arguments); }
            },
            "getBestWithDepth": {
              "value": function () { return this.get_best_with_depth.apply(this, arguments); }
            },
            "getBestWithType": {
              "value": function () { return this.get_best_with_type.apply(this, arguments); }
            },
            "getSystem": {
              "value": function () { return this.get_system.apply(this, arguments); }
            }
          }
        },
        "Window": {
          "prototype": {
            "addFilter": {
              "value": function () { return this.add_filter.apply(this, arguments); }
            },
            "beginMoveDrag": {
              "value": function () { return this.begin_move_drag.apply(this, arguments); }
            },
            "beginMoveDragForDevice": {
              "value": function () { return this.begin_move_drag_for_device.apply(this, arguments); }
            },
            "beginPaintRect": {
              "value": function () { return this.begin_paint_rect.apply(this, arguments); }
            },
            "beginPaintRegion": {
              "value": function () { return this.begin_paint_region.apply(this, arguments); }
            },
            "beginResizeDrag": {
              "value": function () { return this.begin_resize_drag.apply(this, arguments); }
            },
            "beginResizeDragForDevice": {
              "value": function () { return this.begin_resize_drag_for_device.apply(this, arguments); }
            },
            "configureFinished": {
              "value": function () { return this.configure_finished.apply(this, arguments); }
            },
            "coordsFromParent": {
              "value": function () { return this.coords_from_parent.apply(this, arguments); }
            },
            "coordsToParent": {
              "value": function () { return this.coords_to_parent.apply(this, arguments); }
            },
            "createGlContext": {
              "value": function () { return this.create_gl_context.apply(this, arguments); }
            },
            "createSimilarImageSurface": {
              "value": function () { return this.create_similar_image_surface.apply(this, arguments); }
            },
            "createSimilarSurface": {
              "value": function () { return this.create_similar_surface.apply(this, arguments); }
            },
            "destroyNotify": {
              "value": function () { return this.destroy_notify.apply(this, arguments); }
            },
            "enableSynchronizedConfigure": {
              "value": function () { return this.enable_synchronized_configure.apply(this, arguments); }
            },
            "endPaint": {
              "value": function () { return this.end_paint.apply(this, arguments); }
            },
            "ensureNative": {
              "value": function () { return this.ensure_native.apply(this, arguments); }
            },
            "freezeToplevelUpdatesLibgtkOnly": {
              "value": function () { return this.freeze_toplevel_updates_libgtk_only.apply(this, arguments); }
            },
            "freezeUpdates": {
              "value": function () { return this.freeze_updates.apply(this, arguments); }
            },
            "fullscreenOnMonitor": {
              "value": function () { return this.fullscreen_on_monitor.apply(this, arguments); }
            },
            "geometryChanged": {
              "value": function () { return this.geometry_changed.apply(this, arguments); }
            },
            "getAcceptFocus": {
              "value": function () { return this.get_accept_focus.apply(this, arguments); }
            },
            "getBackgroundPattern": {
              "value": function () { return this.get_background_pattern.apply(this, arguments); }
            },
            "getChildren": {
              "value": function () { return this.get_children.apply(this, arguments); }
            },
            "getChildrenWithUserData": {
              "value": function () { return this.get_children_with_user_data.apply(this, arguments); }
            },
            "getClipRegion": {
              "value": function () { return this.get_clip_region.apply(this, arguments); }
            },
            "getComposited": {
              "value": function () { return this.get_composited.apply(this, arguments); }
            },
            "getCursor": {
              "value": function () { return this.get_cursor.apply(this, arguments); }
            },
            "getDecorations": {
              "value": function () { return this.get_decorations.apply(this, arguments); }
            },
            "getDeviceCursor": {
              "value": function () { return this.get_device_cursor.apply(this, arguments); }
            },
            "getDeviceEvents": {
              "value": function () { return this.get_device_events.apply(this, arguments); }
            },
            "getDevicePosition": {
              "value": function () { return this.get_device_position.apply(this, arguments); }
            },
            "getDevicePositionDouble": {
              "value": function () { return this.get_device_position_double.apply(this, arguments); }
            },
            "getDisplay": {
              "value": function () { return this.get_display.apply(this, arguments); }
            },
            "getDragProtocol": {
              "value": function () { return this.get_drag_protocol.apply(this, arguments); }
            },
            "getEffectiveParent": {
              "value": function () { return this.get_effective_parent.apply(this, arguments); }
            },
            "getEffectiveToplevel": {
              "value": function () { return this.get_effective_toplevel.apply(this, arguments); }
            },
            "getEventCompression": {
              "value": function () { return this.get_event_compression.apply(this, arguments); }
            },
            "getEvents": {
              "value": function () { return this.get_events.apply(this, arguments); }
            },
            "getFocusOnMap": {
              "value": function () { return this.get_focus_on_map.apply(this, arguments); }
            },
            "getFrameClock": {
              "value": function () { return this.get_frame_clock.apply(this, arguments); }
            },
            "getFrameExtents": {
              "value": function () { return this.get_frame_extents.apply(this, arguments); }
            },
            "getFullscreenMode": {
              "value": function () { return this.get_fullscreen_mode.apply(this, arguments); }
            },
            "getGeometry": {
              "value": function () { return this.get_geometry.apply(this, arguments); }
            },
            "getGroup": {
              "value": function () { return this.get_group.apply(this, arguments); }
            },
            "getHeight": {
              "value": function () { return this.get_height.apply(this, arguments); }
            },
            "getModalHint": {
              "value": function () { return this.get_modal_hint.apply(this, arguments); }
            },
            "getOrigin": {
              "value": function () { return this.get_origin.apply(this, arguments); }
            },
            "getParent": {
              "value": function () { return this.get_parent.apply(this, arguments); }
            },
            "getPassThrough": {
              "value": function () { return this.get_pass_through.apply(this, arguments); }
            },
            "getPointer": {
              "value": function () { return this.get_pointer.apply(this, arguments); }
            },
            "getPosition": {
              "value": function () { return this.get_position.apply(this, arguments); }
            },
            "getRootCoords": {
              "value": function () { return this.get_root_coords.apply(this, arguments); }
            },
            "getRootOrigin": {
              "value": function () { return this.get_root_origin.apply(this, arguments); }
            },
            "getScaleFactor": {
              "value": function () { return this.get_scale_factor.apply(this, arguments); }
            },
            "getScreen": {
              "value": function () { return this.get_screen.apply(this, arguments); }
            },
            "getSourceEvents": {
              "value": function () { return this.get_source_events.apply(this, arguments); }
            },
            "getState": {
              "value": function () { return this.get_state.apply(this, arguments); }
            },
            "getSupportMultidevice": {
              "value": function () { return this.get_support_multidevice.apply(this, arguments); }
            },
            "getToplevel": {
              "value": function () { return this.get_toplevel.apply(this, arguments); }
            },
            "getTypeHint": {
              "value": function () { return this.get_type_hint.apply(this, arguments); }
            },
            "getUpdateArea": {
              "value": function () { return this.get_update_area.apply(this, arguments); }
            },
            "getUserData": {
              "value": function () { return this.get_user_data.apply(this, arguments); }
            },
            "getVisibleRegion": {
              "value": function () { return this.get_visible_region.apply(this, arguments); }
            },
            "getVisual": {
              "value": function () { return this.get_visual.apply(this, arguments); }
            },
            "getWidth": {
              "value": function () { return this.get_width.apply(this, arguments); }
            },
            "getWindowType": {
              "value": function () { return this.get_window_type.apply(this, arguments); }
            },
            "hasNative": {
              "value": function () { return this.has_native.apply(this, arguments); }
            },
            "inputShapeCombineRegion": {
              "value": function () { return this.input_shape_combine_region.apply(this, arguments); }
            },
            "invalidateMaybeRecurse": {
              "value": function () { return this.invalidate_maybe_recurse.apply(this, arguments); }
            },
            "invalidateRect": {
              "value": function () { return this.invalidate_rect.apply(this, arguments); }
            },
            "invalidateRegion": {
              "value": function () { return this.invalidate_region.apply(this, arguments); }
            },
            "isDestroyed": {
              "value": function () { return this.is_destroyed.apply(this, arguments); }
            },
            "isInputOnly": {
              "value": function () { return this.is_input_only.apply(this, arguments); }
            },
            "isShaped": {
              "value": function () { return this.is_shaped.apply(this, arguments); }
            },
            "isViewable": {
              "value": function () { return this.is_viewable.apply(this, arguments); }
            },
            "isVisible": {
              "value": function () { return this.is_visible.apply(this, arguments); }
            },
            "markPaintFromClip": {
              "value": function () { return this.mark_paint_from_clip.apply(this, arguments); }
            },
            "mergeChildInputShapes": {
              "value": function () { return this.merge_child_input_shapes.apply(this, arguments); }
            },
            "mergeChildShapes": {
              "value": function () { return this.merge_child_shapes.apply(this, arguments); }
            },
            "moveRegion": {
              "value": function () { return this.move_region.apply(this, arguments); }
            },
            "moveResize": {
              "value": function () { return this.move_resize.apply(this, arguments); }
            },
            "peekChildren": {
              "value": function () { return this.peek_children.apply(this, arguments); }
            },
            "processUpdates": {
              "value": function () { return this.process_updates.apply(this, arguments); }
            },
            "registerDnd": {
              "value": function () { return this.register_dnd.apply(this, arguments); }
            },
            "removeFilter": {
              "value": function () { return this.remove_filter.apply(this, arguments); }
            },
            "setAcceptFocus": {
              "value": function () { return this.set_accept_focus.apply(this, arguments); }
            },
            "setBackground": {
              "value": function () { return this.set_background.apply(this, arguments); }
            },
            "setBackgroundPattern": {
              "value": function () { return this.set_background_pattern.apply(this, arguments); }
            },
            "setBackgroundRgba": {
              "value": function () { return this.set_background_rgba.apply(this, arguments); }
            },
            "setChildInputShapes": {
              "value": function () { return this.set_child_input_shapes.apply(this, arguments); }
            },
            "setChildShapes": {
              "value": function () { return this.set_child_shapes.apply(this, arguments); }
            },
            "setComposited": {
              "value": function () { return this.set_composited.apply(this, arguments); }
            },
            "setCursor": {
              "value": function () { return this.set_cursor.apply(this, arguments); }
            },
            "setDecorations": {
              "value": function () { return this.set_decorations.apply(this, arguments); }
            },
            "setDeviceCursor": {
              "value": function () { return this.set_device_cursor.apply(this, arguments); }
            },
            "setDeviceEvents": {
              "value": function () { return this.set_device_events.apply(this, arguments); }
            },
            "setEventCompression": {
              "value": function () { return this.set_event_compression.apply(this, arguments); }
            },
            "setEvents": {
              "value": function () { return this.set_events.apply(this, arguments); }
            },
            "setFocusOnMap": {
              "value": function () { return this.set_focus_on_map.apply(this, arguments); }
            },
            "setFullscreenMode": {
              "value": function () { return this.set_fullscreen_mode.apply(this, arguments); }
            },
            "setFunctions": {
              "value": function () { return this.set_functions.apply(this, arguments); }
            },
            "setGeometryHints": {
              "value": function () { return this.set_geometry_hints.apply(this, arguments); }
            },
            "setGroup": {
              "value": function () { return this.set_group.apply(this, arguments); }
            },
            "setIconList": {
              "value": function () { return this.set_icon_list.apply(this, arguments); }
            },
            "setIconName": {
              "value": function () { return this.set_icon_name.apply(this, arguments); }
            },
            "setInvalidateHandler": {
              "value": function () { return this.set_invalidate_handler.apply(this, arguments); }
            },
            "setKeepAbove": {
              "value": function () { return this.set_keep_above.apply(this, arguments); }
            },
            "setKeepBelow": {
              "value": function () { return this.set_keep_below.apply(this, arguments); }
            },
            "setModalHint": {
              "value": function () { return this.set_modal_hint.apply(this, arguments); }
            },
            "setOpacity": {
              "value": function () { return this.set_opacity.apply(this, arguments); }
            },
            "setOpaqueRegion": {
              "value": function () { return this.set_opaque_region.apply(this, arguments); }
            },
            "setOverrideRedirect": {
              "value": function () { return this.set_override_redirect.apply(this, arguments); }
            },
            "setPassThrough": {
              "value": function () { return this.set_pass_through.apply(this, arguments); }
            },
            "setRole": {
              "value": function () { return this.set_role.apply(this, arguments); }
            },
            "setShadowWidth": {
              "value": function () { return this.set_shadow_width.apply(this, arguments); }
            },
            "setSkipPagerHint": {
              "value": function () { return this.set_skip_pager_hint.apply(this, arguments); }
            },
            "setSkipTaskbarHint": {
              "value": function () { return this.set_skip_taskbar_hint.apply(this, arguments); }
            },
            "setSourceEvents": {
              "value": function () { return this.set_source_events.apply(this, arguments); }
            },
            "setStartupId": {
              "value": function () { return this.set_startup_id.apply(this, arguments); }
            },
            "setStaticGravities": {
              "value": function () { return this.set_static_gravities.apply(this, arguments); }
            },
            "setSupportMultidevice": {
              "value": function () { return this.set_support_multidevice.apply(this, arguments); }
            },
            "setTitle": {
              "value": function () { return this.set_title.apply(this, arguments); }
            },
            "setTransientFor": {
              "value": function () { return this.set_transient_for.apply(this, arguments); }
            },
            "setTypeHint": {
              "value": function () { return this.set_type_hint.apply(this, arguments); }
            },
            "setUrgencyHint": {
              "value": function () { return this.set_urgency_hint.apply(this, arguments); }
            },
            "setUserData": {
              "value": function () { return this.set_user_data.apply(this, arguments); }
            },
            "shapeCombineRegion": {
              "value": function () { return this.shape_combine_region.apply(this, arguments); }
            },
            "showUnraised": {
              "value": function () { return this.show_unraised.apply(this, arguments); }
            },
            "showWindowMenu": {
              "value": function () { return this.show_window_menu.apply(this, arguments); }
            },
            "thawToplevelUpdatesLibgtkOnly": {
              "value": function () { return this.thaw_toplevel_updates_libgtk_only.apply(this, arguments); }
            },
            "thawUpdates": {
              "value": function () { return this.thaw_updates.apply(this, arguments); }
            }
          },
          "static": {
            "atPointer": {
              "value": function () { return this.at_pointer.apply(this, arguments); }
            },
            "constrainSize": {
              "value": function () { return this.constrain_size.apply(this, arguments); }
            },
            "processAllUpdates": {
              "value": function () { return this.process_all_updates.apply(this, arguments); }
            },
            "setDebugUpdates": {
              "value": function () { return this.set_debug_updates.apply(this, arguments); }
            }
          }
        }
      },
      "static": {
        "addOptionEntriesLibgtkOnly": {
          "value": function () { return this.add_option_entries_libgtk_only.apply(this, arguments); }
        },
        "atomIntern": {
          "value": function () { return this.atom_intern.apply(this, arguments); }
        },
        "atomInternStaticString": {
          "value": function () { return this.atom_intern_static_string.apply(this, arguments); }
        },
        "cairoCreate": {
          "value": function () { return this.cairo_create.apply(this, arguments); }
        },
        "cairoDrawFromGl": {
          "value": function () { return this.cairo_draw_from_gl.apply(this, arguments); }
        },
        "cairoGetClipRectangle": {
          "value": function () { return this.cairo_get_clip_rectangle.apply(this, arguments); }
        },
        "cairoRectangle": {
          "value": function () { return this.cairo_rectangle.apply(this, arguments); }
        },
        "cairoRegion": {
          "value": function () { return this.cairo_region.apply(this, arguments); }
        },
        "cairoRegionCreateFromSurface": {
          "value": function () { return this.cairo_region_create_from_surface.apply(this, arguments); }
        },
        "cairoSetSourceColor": {
          "value": function () { return this.cairo_set_source_color.apply(this, arguments); }
        },
        "cairoSetSourcePixbuf": {
          "value": function () { return this.cairo_set_source_pixbuf.apply(this, arguments); }
        },
        "cairoSetSourceRgba": {
          "value": function () { return this.cairo_set_source_rgba.apply(this, arguments); }
        },
        "cairoSetSourceWindow": {
          "value": function () { return this.cairo_set_source_window.apply(this, arguments); }
        },
        "cairoSurfaceCreateFromPixbuf": {
          "value": function () { return this.cairo_surface_create_from_pixbuf.apply(this, arguments); }
        },
        "colorParse": {
          "value": function () { return this.color_parse.apply(this, arguments); }
        },
        "disableMultidevice": {
          "value": function () { return this.disable_multidevice.apply(this, arguments); }
        },
        "dragAbort": {
          "value": function () { return this.drag_abort.apply(this, arguments); }
        },
        "dragBegin": {
          "value": function () { return this.drag_begin.apply(this, arguments); }
        },
        "dragBeginForDevice": {
          "value": function () { return this.drag_begin_for_device.apply(this, arguments); }
        },
        "dragDrop": {
          "value": function () { return this.drag_drop.apply(this, arguments); }
        },
        "dragDropSucceeded": {
          "value": function () { return this.drag_drop_succeeded.apply(this, arguments); }
        },
        "dragFindWindowForScreen": {
          "value": function () { return this.drag_find_window_for_screen.apply(this, arguments); }
        },
        "dragGetSelection": {
          "value": function () { return this.drag_get_selection.apply(this, arguments); }
        },
        "dragMotion": {
          "value": function () { return this.drag_motion.apply(this, arguments); }
        },
        "dragStatus": {
          "value": function () { return this.drag_status.apply(this, arguments); }
        },
        "dropFinish": {
          "value": function () { return this.drop_finish.apply(this, arguments); }
        },
        "dropReply": {
          "value": function () { return this.drop_reply.apply(this, arguments); }
        },
        "errorTrapPop": {
          "value": function () { return this.error_trap_pop.apply(this, arguments); }
        },
        "errorTrapPopIgnored": {
          "value": function () { return this.error_trap_pop_ignored.apply(this, arguments); }
        },
        "errorTrapPush": {
          "value": function () { return this.error_trap_push.apply(this, arguments); }
        },
        "eventGet": {
          "value": function () { return this.event_get.apply(this, arguments); }
        },
        "eventHandlerSet": {
          "value": function () { return this.event_handler_set.apply(this, arguments); }
        },
        "eventPeek": {
          "value": function () { return this.event_peek.apply(this, arguments); }
        },
        "eventRequestMotions": {
          "value": function () { return this.event_request_motions.apply(this, arguments); }
        },
        "eventsGetAngle": {
          "value": function () { return this.events_get_angle.apply(this, arguments); }
        },
        "eventsGetCenter": {
          "value": function () { return this.events_get_center.apply(this, arguments); }
        },
        "eventsGetDistance": {
          "value": function () { return this.events_get_distance.apply(this, arguments); }
        },
        "eventsPending": {
          "value": function () { return this.events_pending.apply(this, arguments); }
        },
        "getDefaultRootWindow": {
          "value": function () { return this.get_default_root_window.apply(this, arguments); }
        },
        "getDisplay": {
          "value": function () { return this.get_display.apply(this, arguments); }
        },
        "getDisplayArgName": {
          "value": function () { return this.get_display_arg_name.apply(this, arguments); }
        },
        "getProgramClass": {
          "value": function () { return this.get_program_class.apply(this, arguments); }
        },
        "getShowEvents": {
          "value": function () { return this.get_show_events.apply(this, arguments); }
        },
        "glErrorQuark": {
          "value": function () { return this.gl_error_quark.apply(this, arguments); }
        },
        "initCheck": {
          "value": function () { return this.init_check.apply(this, arguments); }
        },
        "keyboardGrab": {
          "value": function () { return this.keyboard_grab.apply(this, arguments); }
        },
        "keyboardUngrab": {
          "value": function () { return this.keyboard_ungrab.apply(this, arguments); }
        },
        "keyvalConvertCase": {
          "value": function () { return this.keyval_convert_case.apply(this, arguments); }
        },
        "keyvalFromName": {
          "value": function () { return this.keyval_from_name.apply(this, arguments); }
        },
        "keyvalIsLower": {
          "value": function () { return this.keyval_is_lower.apply(this, arguments); }
        },
        "keyvalIsUpper": {
          "value": function () { return this.keyval_is_upper.apply(this, arguments); }
        },
        "keyvalName": {
          "value": function () { return this.keyval_name.apply(this, arguments); }
        },
        "keyvalToLower": {
          "value": function () { return this.keyval_to_lower.apply(this, arguments); }
        },
        "keyvalToUnicode": {
          "value": function () { return this.keyval_to_unicode.apply(this, arguments); }
        },
        "keyvalToUpper": {
          "value": function () { return this.keyval_to_upper.apply(this, arguments); }
        },
        "listVisuals": {
          "value": function () { return this.list_visuals.apply(this, arguments); }
        },
        "notifyStartupComplete": {
          "value": function () { return this.notify_startup_complete.apply(this, arguments); }
        },
        "notifyStartupCompleteWithId": {
          "value": function () { return this.notify_startup_complete_with_id.apply(this, arguments); }
        },
        "offscreenWindowGetEmbedder": {
          "value": function () { return this.offscreen_window_get_embedder.apply(this, arguments); }
        },
        "offscreenWindowGetSurface": {
          "value": function () { return this.offscreen_window_get_surface.apply(this, arguments); }
        },
        "offscreenWindowSetEmbedder": {
          "value": function () { return this.offscreen_window_set_embedder.apply(this, arguments); }
        },
        "pangoContextGet": {
          "value": function () { return this.pango_context_get.apply(this, arguments); }
        },
        "pangoContextGetForScreen": {
          "value": function () { return this.pango_context_get_for_screen.apply(this, arguments); }
        },
        "pangoLayoutGetClipRegion": {
          "value": function () { return this.pango_layout_get_clip_region.apply(this, arguments); }
        },
        "pangoLayoutLineGetClipRegion": {
          "value": function () { return this.pango_layout_line_get_clip_region.apply(this, arguments); }
        },
        "parseArgs": {
          "value": function () { return this.parse_args.apply(this, arguments); }
        },
        "pixbufGetFromSurface": {
          "value": function () { return this.pixbuf_get_from_surface.apply(this, arguments); }
        },
        "pixbufGetFromWindow": {
          "value": function () { return this.pixbuf_get_from_window.apply(this, arguments); }
        },
        "pointerGrab": {
          "value": function () { return this.pointer_grab.apply(this, arguments); }
        },
        "pointerIsGrabbed": {
          "value": function () { return this.pointer_is_grabbed.apply(this, arguments); }
        },
        "pointerUngrab": {
          "value": function () { return this.pointer_ungrab.apply(this, arguments); }
        },
        "preParseLibgtkOnly": {
          "value": function () { return this.pre_parse_libgtk_only.apply(this, arguments); }
        },
        "propertyChange": {
          "value": function () { return this.property_change.apply(this, arguments); }
        },
        "propertyDelete": {
          "value": function () { return this.property_delete.apply(this, arguments); }
        },
        "propertyGet": {
          "value": function () { return this.property_get.apply(this, arguments); }
        },
        "queryDepths": {
          "value": function () { return this.query_depths.apply(this, arguments); }
        },
        "queryVisualTypes": {
          "value": function () { return this.query_visual_types.apply(this, arguments); }
        },
        "selectionConvert": {
          "value": function () { return this.selection_convert.apply(this, arguments); }
        },
        "selectionOwnerGet": {
          "value": function () { return this.selection_owner_get.apply(this, arguments); }
        },
        "selectionOwnerGetForDisplay": {
          "value": function () { return this.selection_owner_get_for_display.apply(this, arguments); }
        },
        "selectionOwnerSet": {
          "value": function () { return this.selection_owner_set.apply(this, arguments); }
        },
        "selectionOwnerSetForDisplay": {
          "value": function () { return this.selection_owner_set_for_display.apply(this, arguments); }
        },
        "selectionPropertyGet": {
          "value": function () { return this.selection_property_get.apply(this, arguments); }
        },
        "selectionSendNotify": {
          "value": function () { return this.selection_send_notify.apply(this, arguments); }
        },
        "selectionSendNotifyForDisplay": {
          "value": function () { return this.selection_send_notify_for_display.apply(this, arguments); }
        },
        "setAllowedBackends": {
          "value": function () { return this.set_allowed_backends.apply(this, arguments); }
        },
        "setDoubleClickTime": {
          "value": function () { return this.set_double_click_time.apply(this, arguments); }
        },
        "setProgramClass": {
          "value": function () { return this.set_program_class.apply(this, arguments); }
        },
        "setShowEvents": {
          "value": function () { return this.set_show_events.apply(this, arguments); }
        },
        "settingGet": {
          "value": function () { return this.setting_get.apply(this, arguments); }
        },
        "synthesizeWindowState": {
          "value": function () { return this.synthesize_window_state.apply(this, arguments); }
        },
        "testRenderSync": {
          "value": function () { return this.test_render_sync.apply(this, arguments); }
        },
        "testSimulateButton": {
          "value": function () { return this.test_simulate_button.apply(this, arguments); }
        },
        "testSimulateKey": {
          "value": function () { return this.test_simulate_key.apply(this, arguments); }
        },
        "textPropertyToUtf8ListForDisplay": {
          "value": function () { return this.text_property_to_utf8_list_for_display.apply(this, arguments); }
        },
        "threadsAddIdle": {
          "value": function () { return this.threads_add_idle.apply(this, arguments); }
        },
        "threadsAddIdleFull": {
          "value": function () { return this.threads_add_idle_full.apply(this, arguments); }
        },
        "threadsAddTimeout": {
          "value": function () { return this.threads_add_timeout.apply(this, arguments); }
        },
        "threadsAddTimeoutFull": {
          "value": function () { return this.threads_add_timeout_full.apply(this, arguments); }
        },
        "threadsAddTimeoutSeconds": {
          "value": function () { return this.threads_add_timeout_seconds.apply(this, arguments); }
        },
        "threadsAddTimeoutSecondsFull": {
          "value": function () { return this.threads_add_timeout_seconds_full.apply(this, arguments); }
        },
        "threadsEnter": {
          "value": function () { return this.threads_enter.apply(this, arguments); }
        },
        "threadsInit": {
          "value": function () { return this.threads_init.apply(this, arguments); }
        },
        "threadsLeave": {
          "value": function () { return this.threads_leave.apply(this, arguments); }
        },
        "threadsSetLockFunctions": {
          "value": function () { return this.threads_set_lock_functions.apply(this, arguments); }
        },
        "unicodeToKeyval": {
          "value": function () { return this.unicode_to_keyval.apply(this, arguments); }
        },
        "utf8ToStringTarget": {
          "value": function () { return this.utf8_to_string_target.apply(this, arguments); }
        }
      }
    },
    "GdkPixbuf": {
      "class": {
        "Pixbuf": {
          "prototype": {
            "addAlpha": {
              "value": function () { return this.add_alpha.apply(this, arguments); }
            },
            "applyEmbeddedOrientation": {
              "value": function () { return this.apply_embedded_orientation.apply(this, arguments); }
            },
            "compositeColor": {
              "value": function () { return this.composite_color.apply(this, arguments); }
            },
            "compositeColorSimple": {
              "value": function () { return this.composite_color_simple.apply(this, arguments); }
            },
            "copyArea": {
              "value": function () { return this.copy_area.apply(this, arguments); }
            },
            "getBitsPerSample": {
              "value": function () { return this.get_bits_per_sample.apply(this, arguments); }
            },
            "getByteLength": {
              "value": function () { return this.get_byte_length.apply(this, arguments); }
            },
            "getColorspace": {
              "value": function () { return this.get_colorspace.apply(this, arguments); }
            },
            "getHasAlpha": {
              "value": function () { return this.get_has_alpha.apply(this, arguments); }
            },
            "getHeight": {
              "value": function () { return this.get_height.apply(this, arguments); }
            },
            "getNChannels": {
              "value": function () { return this.get_n_channels.apply(this, arguments); }
            },
            "getOption": {
              "value": function () { return this.get_option.apply(this, arguments); }
            },
            "getOptions": {
              "value": function () { return this.get_options.apply(this, arguments); }
            },
            "getPixels": {
              "value": function () { return this.get_pixels.apply(this, arguments); }
            },
            "getPixelsWithLength": {
              "value": function () { return this.get_pixels_with_length.apply(this, arguments); }
            },
            "getRowstride": {
              "value": function () { return this.get_rowstride.apply(this, arguments); }
            },
            "getWidth": {
              "value": function () { return this.get_width.apply(this, arguments); }
            },
            "newSubpixbuf": {
              "value": function () { return this.new_subpixbuf.apply(this, arguments); }
            },
            "readPixelBytes": {
              "value": function () { return this.read_pixel_bytes.apply(this, arguments); }
            },
            "readPixels": {
              "value": function () { return this.read_pixels.apply(this, arguments); }
            },
            "rotateSimple": {
              "value": function () { return this.rotate_simple.apply(this, arguments); }
            },
            "saturateAndPixelate": {
              "value": function () { return this.saturate_and_pixelate.apply(this, arguments); }
            },
            "saveToBuffer": {
              "value": function () { return this.save_to_buffer.apply(this, arguments); }
            },
            "saveToBufferv": {
              "value": function () { return this.save_to_bufferv.apply(this, arguments); }
            },
            "saveToCallback": {
              "value": function () { return this.save_to_callback.apply(this, arguments); }
            },
            "saveToCallbackv": {
              "value": function () { return this.save_to_callbackv.apply(this, arguments); }
            },
            "saveToStream": {
              "value": function () { return this.save_to_stream.apply(this, arguments); }
            },
            "saveToStreamAsync": {
              "value": function () { return this.save_to_stream_async.apply(this, arguments); }
            },
            "scaleSimple": {
              "value": function () { return this.scale_simple.apply(this, arguments); }
            },
            "bitsPerSample": {
              "get": function () { return this.bits_per_sample; },
              "set": function (value) { this.bits_per_sample = value; }
            },
            "hasAlpha": {
              "get": function () { return this.has_alpha; },
              "set": function (value) { this.has_alpha = value; }
            },
            "nChannels": {
              "get": function () { return this.n_channels; },
              "set": function (value) { this.n_channels = value; }
            },
            "pixelBytes": {
              "get": function () { return this.pixel_bytes; },
              "set": function (value) { this.pixel_bytes = value; }
            }
          },
          "static": {
            "fromPixdata": {
              "value": function () { return this.from_pixdata.apply(this, arguments); }
            },
            "getFileInfo": {
              "value": function () { return this.get_file_info.apply(this, arguments); }
            },
            "getFileInfoAsync": {
              "value": function () { return this.get_file_info_async.apply(this, arguments); }
            },
            "getFileInfoFinish": {
              "value": function () { return this.get_file_info_finish.apply(this, arguments); }
            },
            "getFormats": {
              "value": function () { return this.get_formats.apply(this, arguments); }
            },
            "newFromStreamAsync": {
              "value": function () { return this.new_from_stream_async.apply(this, arguments); }
            },
            "newFromStreamAtScaleAsync": {
              "value": function () { return this.new_from_stream_at_scale_async.apply(this, arguments); }
            },
            "saveToStreamFinish": {
              "value": function () { return this.save_to_stream_finish.apply(this, arguments); }
            }
          }
        },
        "PixbufAnimation": {
          "prototype": {
            "getHeight": {
              "value": function () { return this.get_height.apply(this, arguments); }
            },
            "getIter": {
              "value": function () { return this.get_iter.apply(this, arguments); }
            },
            "getStaticImage": {
              "value": function () { return this.get_static_image.apply(this, arguments); }
            },
            "getWidth": {
              "value": function () { return this.get_width.apply(this, arguments); }
            },
            "isStaticImage": {
              "value": function () { return this.is_static_image.apply(this, arguments); }
            }
          },
          "static": {
            "newFromStreamAsync": {
              "value": function () { return this.new_from_stream_async.apply(this, arguments); }
            }
          }
        },
        "PixbufAnimationIter": {
          "prototype": {
            "getDelayTime": {
              "value": function () { return this.get_delay_time.apply(this, arguments); }
            },
            "getPixbuf": {
              "value": function () { return this.get_pixbuf.apply(this, arguments); }
            },
            "onCurrentlyLoadingFrame": {
              "value": function () { return this.on_currently_loading_frame.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "PixbufLoader": {
          "prototype": {
            "getAnimation": {
              "value": function () { return this.get_animation.apply(this, arguments); }
            },
            "getFormat": {
              "value": function () { return this.get_format.apply(this, arguments); }
            },
            "getPixbuf": {
              "value": function () { return this.get_pixbuf.apply(this, arguments); }
            },
            "setSize": {
              "value": function () { return this.set_size.apply(this, arguments); }
            },
            "writeBytes": {
              "value": function () { return this.write_bytes.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "PixbufSimpleAnim": {
          "prototype": {
            "addFrame": {
              "value": function () { return this.add_frame.apply(this, arguments); }
            },
            "getLoop": {
              "value": function () { return this.get_loop.apply(this, arguments); }
            },
            "setLoop": {
              "value": function () { return this.set_loop.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "PixbufSimpleAnimIter": {
          "prototype": {},
          "static": {}
        }
      },
      "static": {
        "pixbufErrorQuark": {
          "value": function () { return this.pixbuf_error_quark.apply(this, arguments); }
        }
      }
    },
    "GdkX11": {
      "class": {
        "X11AppLaunchContext": {
          "prototype": {},
          "static": {}
        },
        "X11Cursor": {
          "prototype": {
            "getXcursor": {
              "value": function () { return this.get_xcursor.apply(this, arguments); }
            },
            "getXdisplay": {
              "value": function () { return this.get_xdisplay.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "X11DeviceCore": {
          "prototype": {},
          "static": {}
        },
        "X11DeviceManagerCore": {
          "prototype": {},
          "static": {}
        },
        "X11DeviceManagerXI2": {
          "prototype": {},
          "static": {}
        },
        "X11DeviceXI2": {
          "prototype": {
            "deviceId": {
              "get": function () { return this.device_id; },
              "set": function (value) { this.device_id = value; }
            }
          },
          "static": {}
        },
        "X11Display": {
          "prototype": {
            "broadcastStartupMessage": {
              "value": function () { return this.broadcast_startup_message.apply(this, arguments); }
            },
            "errorTrapPop": {
              "value": function () { return this.error_trap_pop.apply(this, arguments); }
            },
            "errorTrapPopIgnored": {
              "value": function () { return this.error_trap_pop_ignored.apply(this, arguments); }
            },
            "errorTrapPush": {
              "value": function () { return this.error_trap_push.apply(this, arguments); }
            },
            "getStartupNotificationId": {
              "value": function () { return this.get_startup_notification_id.apply(this, arguments); }
            },
            "getUserTime": {
              "value": function () { return this.get_user_time.apply(this, arguments); }
            },
            "getXdisplay": {
              "value": function () { return this.get_xdisplay.apply(this, arguments); }
            },
            "setCursorTheme": {
              "value": function () { return this.set_cursor_theme.apply(this, arguments); }
            },
            "setStartupNotificationId": {
              "value": function () { return this.set_startup_notification_id.apply(this, arguments); }
            },
            "setWindowScale": {
              "value": function () { return this.set_window_scale.apply(this, arguments); }
            },
            "stringToCompoundText": {
              "value": function () { return this.string_to_compound_text.apply(this, arguments); }
            },
            "textPropertyToTextList": {
              "value": function () { return this.text_property_to_text_list.apply(this, arguments); }
            },
            "utf8ToCompoundText": {
              "value": function () { return this.utf8_to_compound_text.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "X11DisplayManager": {
          "prototype": {},
          "static": {}
        },
        "X11DragContext": {
          "prototype": {},
          "static": {}
        },
        "X11Keymap": {
          "prototype": {
            "getGroupForState": {
              "value": function () { return this.get_group_for_state.apply(this, arguments); }
            },
            "keyIsModifier": {
              "value": function () { return this.key_is_modifier.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "X11Screen": {
          "prototype": {
            "getCurrentDesktop": {
              "value": function () { return this.get_current_desktop.apply(this, arguments); }
            },
            "getMonitorOutput": {
              "value": function () { return this.get_monitor_output.apply(this, arguments); }
            },
            "getNumberOfDesktops": {
              "value": function () { return this.get_number_of_desktops.apply(this, arguments); }
            },
            "getScreenNumber": {
              "value": function () { return this.get_screen_number.apply(this, arguments); }
            },
            "getWindowManagerName": {
              "value": function () { return this.get_window_manager_name.apply(this, arguments); }
            },
            "getXscreen": {
              "value": function () { return this.get_xscreen.apply(this, arguments); }
            },
            "lookupVisual": {
              "value": function () { return this.lookup_visual.apply(this, arguments); }
            },
            "supportsNetWmHint": {
              "value": function () { return this.supports_net_wm_hint.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "X11Visual": {
          "prototype": {
            "getXvisual": {
              "value": function () { return this.get_xvisual.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "X11Window": {
          "prototype": {
            "getDesktop": {
              "value": function () { return this.get_desktop.apply(this, arguments); }
            },
            "getXid": {
              "value": function () { return this.get_xid.apply(this, arguments); }
            },
            "moveToCurrentDesktop": {
              "value": function () { return this.move_to_current_desktop.apply(this, arguments); }
            },
            "moveToDesktop": {
              "value": function () { return this.move_to_desktop.apply(this, arguments); }
            },
            "setFrameExtents": {
              "value": function () { return this.set_frame_extents.apply(this, arguments); }
            },
            "setFrameSyncEnabled": {
              "value": function () { return this.set_frame_sync_enabled.apply(this, arguments); }
            },
            "setHideTitlebarWhenMaximized": {
              "value": function () { return this.set_hide_titlebar_when_maximized.apply(this, arguments); }
            },
            "setThemeVariant": {
              "value": function () { return this.set_theme_variant.apply(this, arguments); }
            },
            "setUserTime": {
              "value": function () { return this.set_user_time.apply(this, arguments); }
            },
            "setUtf8Property": {
              "value": function () { return this.set_utf8_property.apply(this, arguments); }
            }
          },
          "static": {
            "lookupForDisplay": {
              "value": function () { return this.lookup_for_display.apply(this, arguments); }
            }
          }
        }
      },
      "static": {
        "x11AtomToXatom": {
          "value": function () { return this.x11_atom_to_xatom.apply(this, arguments); }
        },
        "x11AtomToXatomForDisplay": {
          "value": function () { return this.x11_atom_to_xatom_for_display.apply(this, arguments); }
        },
        "x11DeviceGetId": {
          "value": function () { return this.x11_device_get_id.apply(this, arguments); }
        },
        "x11DeviceManagerLookup": {
          "value": function () { return this.x11_device_manager_lookup.apply(this, arguments); }
        },
        "x11FreeCompoundText": {
          "value": function () { return this.x11_free_compound_text.apply(this, arguments); }
        },
        "x11FreeTextList": {
          "value": function () { return this.x11_free_text_list.apply(this, arguments); }
        },
        "x11GetDefaultRootXwindow": {
          "value": function () { return this.x11_get_default_root_xwindow.apply(this, arguments); }
        },
        "x11GetDefaultScreen": {
          "value": function () { return this.x11_get_default_screen.apply(this, arguments); }
        },
        "x11GetDefaultXdisplay": {
          "value": function () { return this.x11_get_default_xdisplay.apply(this, arguments); }
        },
        "x11GetServerTime": {
          "value": function () { return this.x11_get_server_time.apply(this, arguments); }
        },
        "x11GetXatomByName": {
          "value": function () { return this.x11_get_xatom_by_name.apply(this, arguments); }
        },
        "x11GetXatomByNameForDisplay": {
          "value": function () { return this.x11_get_xatom_by_name_for_display.apply(this, arguments); }
        },
        "x11GetXatomName": {
          "value": function () { return this.x11_get_xatom_name.apply(this, arguments); }
        },
        "x11GetXatomNameForDisplay": {
          "value": function () { return this.x11_get_xatom_name_for_display.apply(this, arguments); }
        },
        "x11GrabServer": {
          "value": function () { return this.x11_grab_server.apply(this, arguments); }
        },
        "x11LookupXdisplay": {
          "value": function () { return this.x11_lookup_xdisplay.apply(this, arguments); }
        },
        "x11RegisterStandardEventType": {
          "value": function () { return this.x11_register_standard_event_type.apply(this, arguments); }
        },
        "x11SetSmClientId": {
          "value": function () { return this.x11_set_sm_client_id.apply(this, arguments); }
        },
        "x11UngrabServer": {
          "value": function () { return this.x11_ungrab_server.apply(this, arguments); }
        },
        "x11XatomToAtom": {
          "value": function () { return this.x11_xatom_to_atom.apply(this, arguments); }
        },
        "x11XatomToAtomForDisplay": {
          "value": function () { return this.x11_xatom_to_atom_for_display.apply(this, arguments); }
        }
      }
    },
    "Gdm": {
      "class": {
        "ChooserProxy": {
          "prototype": {},
          "static": {
            "newForBus": {
              "value": function () { return this.new_for_bus.apply(this, arguments); }
            }
          }
        },
        "ChooserSkeleton": {
          "prototype": {},
          "static": {}
        },
        "Client": {
          "prototype": {
            "getChooser": {
              "value": function () { return this.get_chooser.apply(this, arguments); }
            },
            "getChooserFinish": {
              "value": function () { return this.get_chooser_finish.apply(this, arguments); }
            },
            "getChooserSync": {
              "value": function () { return this.get_chooser_sync.apply(this, arguments); }
            },
            "getGreeter": {
              "value": function () { return this.get_greeter.apply(this, arguments); }
            },
            "getGreeterFinish": {
              "value": function () { return this.get_greeter_finish.apply(this, arguments); }
            },
            "getGreeterSync": {
              "value": function () { return this.get_greeter_sync.apply(this, arguments); }
            },
            "getRemoteGreeter": {
              "value": function () { return this.get_remote_greeter.apply(this, arguments); }
            },
            "getRemoteGreeterFinish": {
              "value": function () { return this.get_remote_greeter_finish.apply(this, arguments); }
            },
            "getRemoteGreeterSync": {
              "value": function () { return this.get_remote_greeter_sync.apply(this, arguments); }
            },
            "getUserVerifier": {
              "value": function () { return this.get_user_verifier.apply(this, arguments); }
            },
            "getUserVerifierFinish": {
              "value": function () { return this.get_user_verifier_finish.apply(this, arguments); }
            },
            "getUserVerifierSync": {
              "value": function () { return this.get_user_verifier_sync.apply(this, arguments); }
            },
            "openReauthenticationChannel": {
              "value": function () { return this.open_reauthentication_channel.apply(this, arguments); }
            },
            "openReauthenticationChannelFinish": {
              "value": function () { return this.open_reauthentication_channel_finish.apply(this, arguments); }
            },
            "openReauthenticationChannelSync": {
              "value": function () { return this.open_reauthentication_channel_sync.apply(this, arguments); }
            }
          },
          "static": {
            "errorQuark": {
              "value": function () { return this.error_quark.apply(this, arguments); }
            }
          }
        },
        "GreeterProxy": {
          "prototype": {},
          "static": {
            "newForBus": {
              "value": function () { return this.new_for_bus.apply(this, arguments); }
            }
          }
        },
        "GreeterSkeleton": {
          "prototype": {},
          "static": {}
        },
        "ManagerProxy": {
          "prototype": {},
          "static": {
            "newForBus": {
              "value": function () { return this.new_for_bus.apply(this, arguments); }
            }
          }
        },
        "ManagerSkeleton": {
          "prototype": {},
          "static": {}
        },
        "RemoteGreeterProxy": {
          "prototype": {},
          "static": {
            "newForBus": {
              "value": function () { return this.new_for_bus.apply(this, arguments); }
            }
          }
        },
        "RemoteGreeterSkeleton": {
          "prototype": {},
          "static": {}
        },
        "UserVerifierProxy": {
          "prototype": {},
          "static": {
            "newForBus": {
              "value": function () { return this.new_for_bus.apply(this, arguments); }
            }
          }
        },
        "UserVerifierSkeleton": {
          "prototype": {},
          "static": {}
        },
        "WorkerManagerProxy": {
          "prototype": {},
          "static": {
            "newForBus": {
              "value": function () { return this.new_for_bus.apply(this, arguments); }
            }
          }
        },
        "WorkerManagerSkeleton": {
          "prototype": {},
          "static": {}
        }
      },
      "static": {
        "chooserInterfaceInfo": {
          "value": function () { return this.chooser_interface_info.apply(this, arguments); }
        },
        "chooserOverrideProperties": {
          "value": function () { return this.chooser_override_properties.apply(this, arguments); }
        },
        "getSessionIds": {
          "value": function () { return this.get_session_ids.apply(this, arguments); }
        },
        "getSessionNameAndDescription": {
          "value": function () { return this.get_session_name_and_description.apply(this, arguments); }
        },
        "gotoLoginSessionSync": {
          "value": function () { return this.goto_login_session_sync.apply(this, arguments); }
        },
        "greeterInterfaceInfo": {
          "value": function () { return this.greeter_interface_info.apply(this, arguments); }
        },
        "greeterOverrideProperties": {
          "value": function () { return this.greeter_override_properties.apply(this, arguments); }
        },
        "managerInterfaceInfo": {
          "value": function () { return this.manager_interface_info.apply(this, arguments); }
        },
        "managerOverrideProperties": {
          "value": function () { return this.manager_override_properties.apply(this, arguments); }
        },
        "remoteGreeterInterfaceInfo": {
          "value": function () { return this.remote_greeter_interface_info.apply(this, arguments); }
        },
        "remoteGreeterOverrideProperties": {
          "value": function () { return this.remote_greeter_override_properties.apply(this, arguments); }
        },
        "userVerifierInterfaceInfo": {
          "value": function () { return this.user_verifier_interface_info.apply(this, arguments); }
        },
        "userVerifierOverrideProperties": {
          "value": function () { return this.user_verifier_override_properties.apply(this, arguments); }
        },
        "workerManagerInterfaceInfo": {
          "value": function () { return this.worker_manager_interface_info.apply(this, arguments); }
        },
        "workerManagerOverrideProperties": {
          "value": function () { return this.worker_manager_override_properties.apply(this, arguments); }
        }
      }
    },
    "Gee": {
      "class": {
        "AbstractBidirList": {
          "prototype": {
            "bidirListIterator": {
              "value": function () { return this.bidir_list_iterator.apply(this, arguments); }
            },
            "getReadOnlyView": {
              "value": function () { return this.get_read_only_view.apply(this, arguments); }
            },
            "readOnlyView": {
              "get": function () { return this.read_only_view; },
              "set": function (value) { this.read_only_view = value; }
            }
          },
          "static": {}
        },
        "AbstractBidirSortedMap": {
          "prototype": {
            "bidirMapIterator": {
              "value": function () { return this.bidir_map_iterator.apply(this, arguments); }
            },
            "getReadOnlyView": {
              "value": function () { return this.get_read_only_view.apply(this, arguments); }
            },
            "readOnlyView": {
              "get": function () { return this.read_only_view; },
              "set": function (value) { this.read_only_view = value; }
            }
          },
          "static": {}
        },
        "AbstractBidirSortedSet": {
          "prototype": {
            "bidirIterator": {
              "value": function () { return this.bidir_iterator.apply(this, arguments); }
            },
            "getReadOnlyView": {
              "value": function () { return this.get_read_only_view.apply(this, arguments); }
            },
            "readOnlyView": {
              "get": function () { return this.read_only_view; },
              "set": function (value) { this.read_only_view = value; }
            }
          },
          "static": {}
        },
        "AbstractCollection": {
          "prototype": {
            "getSize": {
              "value": function () { return this.get_size.apply(this, arguments); }
            },
            "getReadOnly": {
              "value": function () { return this.get_read_only.apply(this, arguments); }
            },
            "getReadOnlyView": {
              "value": function () { return this.get_read_only_view.apply(this, arguments); }
            },
            "readOnly": {
              "get": function () { return this.read_only; },
              "set": function (value) { this.read_only = value; }
            },
            "readOnlyView": {
              "get": function () { return this.read_only_view; },
              "set": function (value) { this.read_only_view = value; }
            }
          },
          "static": {}
        },
        "AbstractList": {
          "prototype": {
            "listIterator": {
              "value": function () { return this.list_iterator.apply(this, arguments); }
            },
            "indexOf": {
              "value": function () { return this.index_of.apply(this, arguments); }
            },
            "removeAt": {
              "value": function () { return this.remove_at.apply(this, arguments); }
            },
            "getReadOnlyView": {
              "value": function () { return this.get_read_only_view.apply(this, arguments); }
            },
            "readOnlyView": {
              "get": function () { return this.read_only_view; },
              "set": function (value) { this.read_only_view = value; }
            }
          },
          "static": {}
        },
        "AbstractMap": {
          "prototype": {
            "hasKey": {
              "value": function () { return this.has_key.apply(this, arguments); }
            },
            "mapIterator": {
              "value": function () { return this.map_iterator.apply(this, arguments); }
            },
            "getSize": {
              "value": function () { return this.get_size.apply(this, arguments); }
            },
            "getReadOnly": {
              "value": function () { return this.get_read_only.apply(this, arguments); }
            },
            "getKeys": {
              "value": function () { return this.get_keys.apply(this, arguments); }
            },
            "getValues": {
              "value": function () { return this.get_values.apply(this, arguments); }
            },
            "getEntries": {
              "value": function () { return this.get_entries.apply(this, arguments); }
            },
            "getReadOnlyView": {
              "value": function () { return this.get_read_only_view.apply(this, arguments); }
            },
            "readOnly": {
              "get": function () { return this.read_only; },
              "set": function (value) { this.read_only = value; }
            },
            "readOnlyView": {
              "get": function () { return this.read_only_view; },
              "set": function (value) { this.read_only_view = value; }
            }
          },
          "static": {}
        },
        "AbstractMultiMap": {
          "prototype": {
            "createValueStorage": {
              "value": function () { return this.create_value_storage.apply(this, arguments); }
            },
            "createMultiKeySet": {
              "value": function () { return this.create_multi_key_set.apply(this, arguments); }
            },
            "getValueEqualFunc": {
              "value": function () { return this.get_value_equal_func.apply(this, arguments); }
            },
            "getReadOnlyView": {
              "value": function () { return this.get_read_only_view.apply(this, arguments); }
            },
            "readOnlyView": {
              "get": function () { return this.read_only_view; },
              "set": function (value) { this.read_only_view = value; }
            }
          },
          "static": {}
        },
        "AbstractMultiSet": {
          "prototype": {
            "getReadOnlyView": {
              "value": function () { return this.get_read_only_view.apply(this, arguments); }
            },
            "readOnlyView": {
              "get": function () { return this.read_only_view; },
              "set": function (value) { this.read_only_view = value; }
            }
          },
          "static": {}
        },
        "AbstractQueue": {
          "prototype": {
            "getCapacity": {
              "value": function () { return this.get_capacity.apply(this, arguments); }
            },
            "getRemainingCapacity": {
              "value": function () { return this.get_remaining_capacity.apply(this, arguments); }
            },
            "getIsFull": {
              "value": function () { return this.get_is_full.apply(this, arguments); }
            },
            "remainingCapacity": {
              "get": function () { return this.remaining_capacity; },
              "set": function (value) { this.remaining_capacity = value; }
            },
            "isFull": {
              "get": function () { return this.is_full; },
              "set": function (value) { this.is_full = value; }
            }
          },
          "static": {}
        },
        "AbstractSet": {
          "prototype": {
            "getReadOnlyView": {
              "value": function () { return this.get_read_only_view.apply(this, arguments); }
            },
            "readOnlyView": {
              "get": function () { return this.read_only_view; },
              "set": function (value) { this.read_only_view = value; }
            }
          },
          "static": {}
        },
        "AbstractSortedMap": {
          "prototype": {
            "headMap": {
              "value": function () { return this.head_map.apply(this, arguments); }
            },
            "tailMap": {
              "value": function () { return this.tail_map.apply(this, arguments); }
            },
            "subMap": {
              "value": function () { return this.sub_map.apply(this, arguments); }
            },
            "getAscendingKeys": {
              "value": function () { return this.get_ascending_keys.apply(this, arguments); }
            },
            "getAscendingEntries": {
              "value": function () { return this.get_ascending_entries.apply(this, arguments); }
            },
            "ascendingKeys": {
              "get": function () { return this.ascending_keys; },
              "set": function (value) { this.ascending_keys = value; }
            },
            "ascendingEntries": {
              "get": function () { return this.ascending_entries; },
              "set": function (value) { this.ascending_entries = value; }
            }
          },
          "static": {}
        },
        "AbstractSortedSet": {
          "prototype": {
            "iteratorAt": {
              "value": function () { return this.iterator_at.apply(this, arguments); }
            },
            "headSet": {
              "value": function () { return this.head_set.apply(this, arguments); }
            },
            "tailSet": {
              "value": function () { return this.tail_set.apply(this, arguments); }
            },
            "subSet": {
              "value": function () { return this.sub_set.apply(this, arguments); }
            },
            "getReadOnlyView": {
              "value": function () { return this.get_read_only_view.apply(this, arguments); }
            },
            "readOnlyView": {
              "get": function () { return this.read_only_view; },
              "set": function (value) { this.read_only_view = value; }
            }
          },
          "static": {}
        },
        "ArrayList": {
          "prototype": {
            "addAll": {
              "value": function () { return this.add_all.apply(this, arguments); }
            },
            "getEqualFunc": {
              "value": function () { return this.get_equal_func.apply(this, arguments); }
            },
            "equalFunc": {
              "get": function () { return this.equal_func; },
              "set": function (value) { this.equal_func = value; }
            }
          },
          "static": {}
        },
        "ArrayQueue": {
          "prototype": {
            "getEqualFunc": {
              "value": function () { return this.get_equal_func.apply(this, arguments); }
            },
            "getIsEmpty": {
              "value": function () { return this.get_is_empty.apply(this, arguments); }
            },
            "equalFunc": {
              "get": function () { return this.equal_func; },
              "set": function (value) { this.equal_func = value; }
            },
            "isEmpty": {
              "get": function () { return this.is_empty; },
              "set": function (value) { this.is_empty = value; }
            }
          },
          "static": {}
        },
        "ConcurrentList": {
          "prototype": {
            "getEqualFunc": {
              "value": function () { return this.get_equal_func.apply(this, arguments); }
            },
            "getIsEmpty": {
              "value": function () { return this.get_is_empty.apply(this, arguments); }
            },
            "equalFunc": {
              "get": function () { return this.equal_func; },
              "set": function (value) { this.equal_func = value; }
            },
            "isEmpty": {
              "get": function () { return this.is_empty; },
              "set": function (value) { this.is_empty = value; }
            }
          },
          "static": {}
        },
        "ConcurrentSet": {
          "prototype": {},
          "static": {}
        },
        "HashMap": {
          "prototype": {
            "getKeyHashFunc": {
              "value": function () { return this.get_key_hash_func.apply(this, arguments); }
            },
            "getKeyEqualFunc": {
              "value": function () { return this.get_key_equal_func.apply(this, arguments); }
            },
            "getValueEqualFunc": {
              "value": function () { return this.get_value_equal_func.apply(this, arguments); }
            },
            "keyHashFunc": {
              "get": function () { return this.key_hash_func; },
              "set": function (value) { this.key_hash_func = value; }
            },
            "keyEqualFunc": {
              "get": function () { return this.key_equal_func; },
              "set": function (value) { this.key_equal_func = value; }
            },
            "valueEqualFunc": {
              "get": function () { return this.value_equal_func; },
              "set": function (value) { this.value_equal_func = value; }
            }
          },
          "static": {}
        },
        "HashMultiMap": {
          "prototype": {
            "getKeyHashFunc": {
              "value": function () { return this.get_key_hash_func.apply(this, arguments); }
            },
            "getKeyEqualFunc": {
              "value": function () { return this.get_key_equal_func.apply(this, arguments); }
            },
            "getValueHashFunc": {
              "value": function () { return this.get_value_hash_func.apply(this, arguments); }
            },
            "getValueEqualFunc": {
              "value": function () { return this.get_value_equal_func.apply(this, arguments); }
            },
            "keyHashFunc": {
              "get": function () { return this.key_hash_func; },
              "set": function (value) { this.key_hash_func = value; }
            },
            "keyEqualFunc": {
              "get": function () { return this.key_equal_func; },
              "set": function (value) { this.key_equal_func = value; }
            },
            "valueHashFunc": {
              "get": function () { return this.value_hash_func; },
              "set": function (value) { this.value_hash_func = value; }
            },
            "valueEqualFunc": {
              "get": function () { return this.value_equal_func; },
              "set": function (value) { this.value_equal_func = value; }
            }
          },
          "static": {}
        },
        "HashMultiSet": {
          "prototype": {
            "getHashFunc": {
              "value": function () { return this.get_hash_func.apply(this, arguments); }
            },
            "getEqualFunc": {
              "value": function () { return this.get_equal_func.apply(this, arguments); }
            },
            "hashFunc": {
              "get": function () { return this.hash_func; },
              "set": function (value) { this.hash_func = value; }
            },
            "equalFunc": {
              "get": function () { return this.equal_func; },
              "set": function (value) { this.equal_func = value; }
            }
          },
          "static": {}
        },
        "HashSet": {
          "prototype": {
            "getHashFunc": {
              "value": function () { return this.get_hash_func.apply(this, arguments); }
            },
            "getEqualFunc": {
              "value": function () { return this.get_equal_func.apply(this, arguments); }
            },
            "hashFunc": {
              "get": function () { return this.hash_func; },
              "set": function (value) { this.hash_func = value; }
            },
            "equalFunc": {
              "get": function () { return this.equal_func; },
              "set": function (value) { this.equal_func = value; }
            }
          },
          "static": {}
        },
        "LinkedList": {
          "prototype": {
            "getEqualFunc": {
              "value": function () { return this.get_equal_func.apply(this, arguments); }
            },
            "equalFunc": {
              "get": function () { return this.equal_func; },
              "set": function (value) { this.equal_func = value; }
            }
          },
          "static": {}
        },
        "MapEntry": {
          "prototype": {
            "getKey": {
              "value": function () { return this.get_key.apply(this, arguments); }
            },
            "getValue": {
              "value": function () { return this.get_value.apply(this, arguments); }
            },
            "setValue": {
              "value": function () { return this.set_value.apply(this, arguments); }
            },
            "getReadOnly": {
              "value": function () { return this.get_read_only.apply(this, arguments); }
            },
            "readOnly": {
              "get": function () { return this.read_only; },
              "set": function (value) { this.read_only = value; }
            }
          },
          "static": {}
        },
        "PriorityQueue": {
          "prototype": {
            "getCompareFunc": {
              "value": function () { return this.get_compare_func.apply(this, arguments); }
            },
            "compareFunc": {
              "get": function () { return this.compare_func; },
              "set": function (value) { this.compare_func = value; }
            }
          },
          "static": {}
        },
        "TreeMap": {
          "prototype": {
            "getKeyCompareFunc": {
              "value": function () { return this.get_key_compare_func.apply(this, arguments); }
            },
            "getValueEqualFunc": {
              "value": function () { return this.get_value_equal_func.apply(this, arguments); }
            },
            "keyCompareFunc": {
              "get": function () { return this.key_compare_func; },
              "set": function (value) { this.key_compare_func = value; }
            },
            "valueEqualFunc": {
              "get": function () { return this.value_equal_func; },
              "set": function (value) { this.value_equal_func = value; }
            }
          },
          "static": {}
        },
        "TreeMultiMap": {
          "prototype": {
            "getKeyCompareFunc": {
              "value": function () { return this.get_key_compare_func.apply(this, arguments); }
            },
            "getValueCompareFunc": {
              "value": function () { return this.get_value_compare_func.apply(this, arguments); }
            },
            "keyCompareFunc": {
              "get": function () { return this.key_compare_func; },
              "set": function (value) { this.key_compare_func = value; }
            },
            "valueCompareFunc": {
              "get": function () { return this.value_compare_func; },
              "set": function (value) { this.value_compare_func = value; }
            }
          },
          "static": {}
        },
        "TreeMultiSet": {
          "prototype": {
            "getCompareFunc": {
              "value": function () { return this.get_compare_func.apply(this, arguments); }
            },
            "compareFunc": {
              "get": function () { return this.compare_func; },
              "set": function (value) { this.compare_func = value; }
            }
          },
          "static": {}
        },
        "TreeSet": {
          "prototype": {
            "getCompareFunc": {
              "value": function () { return this.get_compare_func.apply(this, arguments); }
            },
            "compareFunc": {
              "get": function () { return this.compare_func; },
              "set": function (value) { this.compare_func = value; }
            }
          },
          "static": {}
        },
        "UnrolledLinkedList": {
          "prototype": {
            "getEqualFunc": {
              "value": function () { return this.get_equal_func.apply(this, arguments); }
            },
            "equalFunc": {
              "get": function () { return this.equal_func; },
              "set": function (value) { this.equal_func = value; }
            }
          },
          "static": {}
        }
      },
      "static": {
        "asyncTask": {
          "value": function () { return this.async_task.apply(this, arguments); }
        },
        "asyncTaskFinish": {
          "value": function () { return this.async_task_finish.apply(this, arguments); }
        },
        "functionsGetCompareFuncFor": {
          "value": function () { return this.functions_get_compare_func_for.apply(this, arguments); }
        },
        "functionsGetEqualFuncFor": {
          "value": function () { return this.functions_get_equal_func_for.apply(this, arguments); }
        },
        "functionsGetHashFuncFor": {
          "value": function () { return this.functions_get_hash_func_for.apply(this, arguments); }
        },
        "hazardPointerPolicyIsBlocking": {
          "value": function () { return this.hazard_pointer_policy_is_blocking.apply(this, arguments); }
        },
        "hazardPointerPolicyIsConcrete": {
          "value": function () { return this.hazard_pointer_policy_is_concrete.apply(this, arguments); }
        },
        "hazardPointerPolicyIsSafe": {
          "value": function () { return this.hazard_pointer_policy_is_safe.apply(this, arguments); }
        },
        "hazardPointerPolicyToConcrete": {
          "value": function () { return this.hazard_pointer_policy_to_concrete.apply(this, arguments); }
        }
      }
    },
    "Geoclue": {
      "class": {
        "ClientProxy": {
          "prototype": {},
          "static": {
            "createFinish": {
              "value": function () { return this.create_finish.apply(this, arguments); }
            },
            "createSync": {
              "value": function () { return this.create_sync.apply(this, arguments); }
            },
            "newForBus": {
              "value": function () { return this.new_for_bus.apply(this, arguments); }
            }
          }
        },
        "ClientSkeleton": {
          "prototype": {},
          "static": {}
        },
        "LocationProxy": {
          "prototype": {},
          "static": {
            "newForBus": {
              "value": function () { return this.new_for_bus.apply(this, arguments); }
            }
          }
        },
        "LocationSkeleton": {
          "prototype": {},
          "static": {}
        },
        "ManagerProxy": {
          "prototype": {},
          "static": {
            "newForBus": {
              "value": function () { return this.new_for_bus.apply(this, arguments); }
            }
          }
        },
        "ManagerSkeleton": {
          "prototype": {},
          "static": {}
        },
        "Simple": {
          "prototype": {
            "getClient": {
              "value": function () { return this.get_client.apply(this, arguments); }
            },
            "getLocation": {
              "value": function () { return this.get_location.apply(this, arguments); }
            },
            "accuracyLevel": {
              "get": function () { return this.accuracy_level; },
              "set": function (value) { this.accuracy_level = value; }
            },
            "desktopId": {
              "get": function () { return this.desktop_id; },
              "set": function (value) { this.desktop_id = value; }
            }
          },
          "static": {}
        }
      },
      "static": {
        "clientInterfaceInfo": {
          "value": function () { return this.client_interface_info.apply(this, arguments); }
        },
        "clientOverrideProperties": {
          "value": function () { return this.client_override_properties.apply(this, arguments); }
        },
        "locationInterfaceInfo": {
          "value": function () { return this.location_interface_info.apply(this, arguments); }
        },
        "locationOverrideProperties": {
          "value": function () { return this.location_override_properties.apply(this, arguments); }
        },
        "managerInterfaceInfo": {
          "value": function () { return this.manager_interface_info.apply(this, arguments); }
        },
        "managerOverrideProperties": {
          "value": function () { return this.manager_override_properties.apply(this, arguments); }
        }
      }
    },
    "GeocodeGlib": {
      "class": {
        "BoundingBox": {
          "prototype": {
            "getBottom": {
              "value": function () { return this.get_bottom.apply(this, arguments); }
            },
            "getLeft": {
              "value": function () { return this.get_left.apply(this, arguments); }
            },
            "getRight": {
              "value": function () { return this.get_right.apply(this, arguments); }
            },
            "getTop": {
              "value": function () { return this.get_top.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Forward": {
          "prototype": {
            "getAnswerCount": {
              "value": function () { return this.get_answer_count.apply(this, arguments); }
            },
            "getBounded": {
              "value": function () { return this.get_bounded.apply(this, arguments); }
            },
            "getSearchArea": {
              "value": function () { return this.get_search_area.apply(this, arguments); }
            },
            "searchAsync": {
              "value": function () { return this.search_async.apply(this, arguments); }
            },
            "searchFinish": {
              "value": function () { return this.search_finish.apply(this, arguments); }
            },
            "setAnswerCount": {
              "value": function () { return this.set_answer_count.apply(this, arguments); }
            },
            "setBounded": {
              "value": function () { return this.set_bounded.apply(this, arguments); }
            },
            "setSearchArea": {
              "value": function () { return this.set_search_area.apply(this, arguments); }
            },
            "answerCount": {
              "get": function () { return this.answer_count; },
              "set": function (value) { this.answer_count = value; }
            },
            "searchArea": {
              "get": function () { return this.search_area; },
              "set": function (value) { this.search_area = value; }
            }
          },
          "static": {}
        },
        "Location": {
          "prototype": {
            "getAccuracy": {
              "value": function () { return this.get_accuracy.apply(this, arguments); }
            },
            "getAltitude": {
              "value": function () { return this.get_altitude.apply(this, arguments); }
            },
            "getCrs": {
              "value": function () { return this.get_crs.apply(this, arguments); }
            },
            "getDescription": {
              "value": function () { return this.get_description.apply(this, arguments); }
            },
            "getDistanceFrom": {
              "value": function () { return this.get_distance_from.apply(this, arguments); }
            },
            "getLatitude": {
              "value": function () { return this.get_latitude.apply(this, arguments); }
            },
            "getLongitude": {
              "value": function () { return this.get_longitude.apply(this, arguments); }
            },
            "getTimestamp": {
              "value": function () { return this.get_timestamp.apply(this, arguments); }
            },
            "setDescription": {
              "value": function () { return this.set_description.apply(this, arguments); }
            },
            "setFromUri": {
              "value": function () { return this.set_from_uri.apply(this, arguments); }
            },
            "toUri": {
              "value": function () { return this.to_uri.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Place": {
          "prototype": {
            "getAdministrativeArea": {
              "value": function () { return this.get_administrative_area.apply(this, arguments); }
            },
            "getArea": {
              "value": function () { return this.get_area.apply(this, arguments); }
            },
            "getBoundingBox": {
              "value": function () { return this.get_bounding_box.apply(this, arguments); }
            },
            "getBuilding": {
              "value": function () { return this.get_building.apply(this, arguments); }
            },
            "getContinent": {
              "value": function () { return this.get_continent.apply(this, arguments); }
            },
            "getCountry": {
              "value": function () { return this.get_country.apply(this, arguments); }
            },
            "getCountryCode": {
              "value": function () { return this.get_country_code.apply(this, arguments); }
            },
            "getCounty": {
              "value": function () { return this.get_county.apply(this, arguments); }
            },
            "getIcon": {
              "value": function () { return this.get_icon.apply(this, arguments); }
            },
            "getLocation": {
              "value": function () { return this.get_location.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getOsmId": {
              "value": function () { return this.get_osm_id.apply(this, arguments); }
            },
            "getOsmType": {
              "value": function () { return this.get_osm_type.apply(this, arguments); }
            },
            "getPlaceType": {
              "value": function () { return this.get_place_type.apply(this, arguments); }
            },
            "getPostalCode": {
              "value": function () { return this.get_postal_code.apply(this, arguments); }
            },
            "getState": {
              "value": function () { return this.get_state.apply(this, arguments); }
            },
            "getStreet": {
              "value": function () { return this.get_street.apply(this, arguments); }
            },
            "getStreetAddress": {
              "value": function () { return this.get_street_address.apply(this, arguments); }
            },
            "getTown": {
              "value": function () { return this.get_town.apply(this, arguments); }
            },
            "setAdministrativeArea": {
              "value": function () { return this.set_administrative_area.apply(this, arguments); }
            },
            "setArea": {
              "value": function () { return this.set_area.apply(this, arguments); }
            },
            "setBoundingBox": {
              "value": function () { return this.set_bounding_box.apply(this, arguments); }
            },
            "setBuilding": {
              "value": function () { return this.set_building.apply(this, arguments); }
            },
            "setContinent": {
              "value": function () { return this.set_continent.apply(this, arguments); }
            },
            "setCountry": {
              "value": function () { return this.set_country.apply(this, arguments); }
            },
            "setCountryCode": {
              "value": function () { return this.set_country_code.apply(this, arguments); }
            },
            "setCounty": {
              "value": function () { return this.set_county.apply(this, arguments); }
            },
            "setLocation": {
              "value": function () { return this.set_location.apply(this, arguments); }
            },
            "setName": {
              "value": function () { return this.set_name.apply(this, arguments); }
            },
            "setPostalCode": {
              "value": function () { return this.set_postal_code.apply(this, arguments); }
            },
            "setState": {
              "value": function () { return this.set_state.apply(this, arguments); }
            },
            "setStreet": {
              "value": function () { return this.set_street.apply(this, arguments); }
            },
            "setStreetAddress": {
              "value": function () { return this.set_street_address.apply(this, arguments); }
            },
            "setTown": {
              "value": function () { return this.set_town.apply(this, arguments); }
            },
            "administrativeArea": {
              "get": function () { return this.administrative_area; },
              "set": function (value) { this.administrative_area = value; }
            },
            "boundingBox": {
              "get": function () { return this.bounding_box; },
              "set": function (value) { this.bounding_box = value; }
            },
            "countryCode": {
              "get": function () { return this.country_code; },
              "set": function (value) { this.country_code = value; }
            },
            "osmId": {
              "get": function () { return this.osm_id; },
              "set": function (value) { this.osm_id = value; }
            },
            "osmType": {
              "get": function () { return this.osm_type; },
              "set": function (value) { this.osm_type = value; }
            },
            "placeType": {
              "get": function () { return this.place_type; },
              "set": function (value) { this.place_type = value; }
            },
            "postalCode": {
              "get": function () { return this.postal_code; },
              "set": function (value) { this.postal_code = value; }
            },
            "streetAddress": {
              "get": function () { return this.street_address; },
              "set": function (value) { this.street_address = value; }
            }
          },
          "static": {}
        },
        "Reverse": {
          "prototype": {
            "resolveAsync": {
              "value": function () { return this.resolve_async.apply(this, arguments); }
            },
            "resolveFinish": {
              "value": function () { return this.resolve_finish.apply(this, arguments); }
            }
          },
          "static": {}
        }
      },
      "static": {
        "errorQuark": {
          "value": function () { return this.error_quark.apply(this, arguments); }
        }
      }
    },
    "Gio": {
      "class": {
        "AppInfoMonitor": {
          "prototype": {},
          "static": {}
        },
        "AppLaunchContext": {
          "prototype": {
            "getDisplay": {
              "value": function () { return this.get_display.apply(this, arguments); }
            },
            "getEnvironment": {
              "value": function () { return this.get_environment.apply(this, arguments); }
            },
            "getStartupNotifyId": {
              "value": function () { return this.get_startup_notify_id.apply(this, arguments); }
            },
            "launchFailed": {
              "value": function () { return this.launch_failed.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Application": {
          "prototype": {
            "addMainOption": {
              "value": function () { return this.add_main_option.apply(this, arguments); }
            },
            "addMainOptionEntries": {
              "value": function () { return this.add_main_option_entries.apply(this, arguments); }
            },
            "addOptionGroup": {
              "value": function () { return this.add_option_group.apply(this, arguments); }
            },
            "bindBusyProperty": {
              "value": function () { return this.bind_busy_property.apply(this, arguments); }
            },
            "getApplicationId": {
              "value": function () { return this.get_application_id.apply(this, arguments); }
            },
            "getDbusConnection": {
              "value": function () { return this.get_dbus_connection.apply(this, arguments); }
            },
            "getDbusObjectPath": {
              "value": function () { return this.get_dbus_object_path.apply(this, arguments); }
            },
            "getFlags": {
              "value": function () { return this.get_flags.apply(this, arguments); }
            },
            "getInactivityTimeout": {
              "value": function () { return this.get_inactivity_timeout.apply(this, arguments); }
            },
            "getIsBusy": {
              "value": function () { return this.get_is_busy.apply(this, arguments); }
            },
            "getIsRegistered": {
              "value": function () { return this.get_is_registered.apply(this, arguments); }
            },
            "getIsRemote": {
              "value": function () { return this.get_is_remote.apply(this, arguments); }
            },
            "getResourceBasePath": {
              "value": function () { return this.get_resource_base_path.apply(this, arguments); }
            },
            "markBusy": {
              "value": function () { return this.mark_busy.apply(this, arguments); }
            },
            "sendNotification": {
              "value": function () { return this.send_notification.apply(this, arguments); }
            },
            "setActionGroup": {
              "value": function () { return this.set_action_group.apply(this, arguments); }
            },
            "setApplicationId": {
              "value": function () { return this.set_application_id.apply(this, arguments); }
            },
            "setDefault": {
              "value": function () { return this.set_default.apply(this, arguments); }
            },
            "setFlags": {
              "value": function () { return this.set_flags.apply(this, arguments); }
            },
            "setInactivityTimeout": {
              "value": function () { return this.set_inactivity_timeout.apply(this, arguments); }
            },
            "setResourceBasePath": {
              "value": function () { return this.set_resource_base_path.apply(this, arguments); }
            },
            "unbindBusyProperty": {
              "value": function () { return this.unbind_busy_property.apply(this, arguments); }
            },
            "unmarkBusy": {
              "value": function () { return this.unmark_busy.apply(this, arguments); }
            },
            "withdrawNotification": {
              "value": function () { return this.withdraw_notification.apply(this, arguments); }
            },
            "actionGroup": {
              "get": function () { return this.action_group; },
              "set": function (value) { this.action_group = value; }
            },
            "applicationId": {
              "get": function () { return this.application_id; },
              "set": function (value) { this.application_id = value; }
            },
            "inactivityTimeout": {
              "get": function () { return this.inactivity_timeout; },
              "set": function (value) { this.inactivity_timeout = value; }
            },
            "isBusy": {
              "get": function () { return this.is_busy; },
              "set": function (value) { this.is_busy = value; }
            },
            "isRegistered": {
              "get": function () { return this.is_registered; },
              "set": function (value) { this.is_registered = value; }
            },
            "isRemote": {
              "get": function () { return this.is_remote; },
              "set": function (value) { this.is_remote = value; }
            },
            "resourceBasePath": {
              "get": function () { return this.resource_base_path; },
              "set": function (value) { this.resource_base_path = value; }
            }
          },
          "static": {
            "getDefault": {
              "value": function () { return this.get_default.apply(this, arguments); }
            },
            "idIsValid": {
              "value": function () { return this.id_is_valid.apply(this, arguments); }
            }
          }
        },
        "ApplicationCommandLine": {
          "prototype": {
            "createFileForArg": {
              "value": function () { return this.create_file_for_arg.apply(this, arguments); }
            },
            "getArguments": {
              "value": function () { return this.get_arguments.apply(this, arguments); }
            },
            "getCwd": {
              "value": function () { return this.get_cwd.apply(this, arguments); }
            },
            "getEnviron": {
              "value": function () { return this.get_environ.apply(this, arguments); }
            },
            "getExitStatus": {
              "value": function () { return this.get_exit_status.apply(this, arguments); }
            },
            "getIsRemote": {
              "value": function () { return this.get_is_remote.apply(this, arguments); }
            },
            "getOptionsDict": {
              "value": function () { return this.get_options_dict.apply(this, arguments); }
            },
            "getPlatformData": {
              "value": function () { return this.get_platform_data.apply(this, arguments); }
            },
            "getStdin": {
              "value": function () { return this.get_stdin.apply(this, arguments); }
            },
            "setExitStatus": {
              "value": function () { return this.set_exit_status.apply(this, arguments); }
            },
            "isRemote": {
              "get": function () { return this.is_remote; },
              "set": function (value) { this.is_remote = value; }
            },
            "platformData": {
              "get": function () { return this.platform_data; },
              "set": function (value) { this.platform_data = value; }
            }
          },
          "static": {}
        },
        "BufferedInputStream": {
          "prototype": {
            "fillAsync": {
              "value": function () { return this.fill_async.apply(this, arguments); }
            },
            "fillFinish": {
              "value": function () { return this.fill_finish.apply(this, arguments); }
            },
            "getAvailable": {
              "value": function () { return this.get_available.apply(this, arguments); }
            },
            "getBufferSize": {
              "value": function () { return this.get_buffer_size.apply(this, arguments); }
            },
            "peekBuffer": {
              "value": function () { return this.peek_buffer.apply(this, arguments); }
            },
            "readByte": {
              "value": function () { return this.read_byte.apply(this, arguments); }
            },
            "setBufferSize": {
              "value": function () { return this.set_buffer_size.apply(this, arguments); }
            },
            "bufferSize": {
              "get": function () { return this.buffer_size; },
              "set": function (value) { this.buffer_size = value; }
            }
          },
          "static": {}
        },
        "BufferedOutputStream": {
          "prototype": {
            "getAutoGrow": {
              "value": function () { return this.get_auto_grow.apply(this, arguments); }
            },
            "getBufferSize": {
              "value": function () { return this.get_buffer_size.apply(this, arguments); }
            },
            "setAutoGrow": {
              "value": function () { return this.set_auto_grow.apply(this, arguments); }
            },
            "setBufferSize": {
              "value": function () { return this.set_buffer_size.apply(this, arguments); }
            },
            "autoGrow": {
              "get": function () { return this.auto_grow; },
              "set": function (value) { this.auto_grow = value; }
            },
            "bufferSize": {
              "get": function () { return this.buffer_size; },
              "set": function (value) { this.buffer_size = value; }
            }
          },
          "static": {}
        },
        "BytesIcon": {
          "prototype": {
            "getBytes": {
              "value": function () { return this.get_bytes.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Cancellable": {
          "prototype": {
            "getFd": {
              "value": function () { return this.get_fd.apply(this, arguments); }
            },
            "isCancelled": {
              "value": function () { return this.is_cancelled.apply(this, arguments); }
            },
            "makePollfd": {
              "value": function () { return this.make_pollfd.apply(this, arguments); }
            },
            "popCurrent": {
              "value": function () { return this.pop_current.apply(this, arguments); }
            },
            "pushCurrent": {
              "value": function () { return this.push_current.apply(this, arguments); }
            },
            "releaseFd": {
              "value": function () { return this.release_fd.apply(this, arguments); }
            },
            "setErrorIfCancelled": {
              "value": function () { return this.set_error_if_cancelled.apply(this, arguments); }
            },
            "sourceNew": {
              "value": function () { return this.source_new.apply(this, arguments); }
            }
          },
          "static": {
            "getCurrent": {
              "value": function () { return this.get_current.apply(this, arguments); }
            }
          }
        },
        "CharsetConverter": {
          "prototype": {
            "getNumFallbacks": {
              "value": function () { return this.get_num_fallbacks.apply(this, arguments); }
            },
            "getUseFallback": {
              "value": function () { return this.get_use_fallback.apply(this, arguments); }
            },
            "setUseFallback": {
              "value": function () { return this.set_use_fallback.apply(this, arguments); }
            },
            "fromCharset": {
              "get": function () { return this.from_charset; },
              "set": function (value) { this.from_charset = value; }
            },
            "toCharset": {
              "get": function () { return this.to_charset; },
              "set": function (value) { this.to_charset = value; }
            },
            "useFallback": {
              "get": function () { return this.use_fallback; },
              "set": function (value) { this.use_fallback = value; }
            }
          },
          "static": {}
        },
        "ConverterInputStream": {
          "prototype": {
            "getConverter": {
              "value": function () { return this.get_converter.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "ConverterOutputStream": {
          "prototype": {
            "getConverter": {
              "value": function () { return this.get_converter.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Credentials": {
          "prototype": {
            "getNative": {
              "value": function () { return this.get_native.apply(this, arguments); }
            },
            "getUnixPid": {
              "value": function () { return this.get_unix_pid.apply(this, arguments); }
            },
            "getUnixUser": {
              "value": function () { return this.get_unix_user.apply(this, arguments); }
            },
            "isSameUser": {
              "value": function () { return this.is_same_user.apply(this, arguments); }
            },
            "setNative": {
              "value": function () { return this.set_native.apply(this, arguments); }
            },
            "setUnixUser": {
              "value": function () { return this.set_unix_user.apply(this, arguments); }
            },
            "toString": {
              "value": function () { return this.to_string.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DBusActionGroup": {
          "prototype": {},
          "static": {}
        },
        "DBusAuthObserver": {
          "prototype": {
            "allowMechanism": {
              "value": function () { return this.allow_mechanism.apply(this, arguments); }
            },
            "authorizeAuthenticatedPeer": {
              "value": function () { return this.authorize_authenticated_peer.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DBusConnection": {
          "prototype": {
            "addFilter": {
              "value": function () { return this.add_filter.apply(this, arguments); }
            },
            "callFinish": {
              "value": function () { return this.call_finish.apply(this, arguments); }
            },
            "callSync": {
              "value": function () { return this.call_sync.apply(this, arguments); }
            },
            "callWithUnixFdList": {
              "value": function () { return this.call_with_unix_fd_list.apply(this, arguments); }
            },
            "callWithUnixFdListFinish": {
              "value": function () { return this.call_with_unix_fd_list_finish.apply(this, arguments); }
            },
            "callWithUnixFdListSync": {
              "value": function () { return this.call_with_unix_fd_list_sync.apply(this, arguments); }
            },
            "closeFinish": {
              "value": function () { return this.close_finish.apply(this, arguments); }
            },
            "closeSync": {
              "value": function () { return this.close_sync.apply(this, arguments); }
            },
            "emitSignal": {
              "value": function () { return this.emit_signal.apply(this, arguments); }
            },
            "exportActionGroup": {
              "value": function () { return this.export_action_group.apply(this, arguments); }
            },
            "exportMenuModel": {
              "value": function () { return this.export_menu_model.apply(this, arguments); }
            },
            "flushFinish": {
              "value": function () { return this.flush_finish.apply(this, arguments); }
            },
            "flushSync": {
              "value": function () { return this.flush_sync.apply(this, arguments); }
            },
            "getCapabilities": {
              "value": function () { return this.get_capabilities.apply(this, arguments); }
            },
            "getExitOnClose": {
              "value": function () { return this.get_exit_on_close.apply(this, arguments); }
            },
            "getGuid": {
              "value": function () { return this.get_guid.apply(this, arguments); }
            },
            "getLastSerial": {
              "value": function () { return this.get_last_serial.apply(this, arguments); }
            },
            "getPeerCredentials": {
              "value": function () { return this.get_peer_credentials.apply(this, arguments); }
            },
            "getStream": {
              "value": function () { return this.get_stream.apply(this, arguments); }
            },
            "getUniqueName": {
              "value": function () { return this.get_unique_name.apply(this, arguments); }
            },
            "isClosed": {
              "value": function () { return this.is_closed.apply(this, arguments); }
            },
            "registerObject": {
              "value": function () { return this.register_object.apply(this, arguments); }
            },
            "registerObjectWithClosures": {
              "value": function () { return this.register_object_with_closures.apply(this, arguments); }
            },
            "registerSubtree": {
              "value": function () { return this.register_subtree.apply(this, arguments); }
            },
            "removeFilter": {
              "value": function () { return this.remove_filter.apply(this, arguments); }
            },
            "sendMessage": {
              "value": function () { return this.send_message.apply(this, arguments); }
            },
            "sendMessageWithReply": {
              "value": function () { return this.send_message_with_reply.apply(this, arguments); }
            },
            "sendMessageWithReplyFinish": {
              "value": function () { return this.send_message_with_reply_finish.apply(this, arguments); }
            },
            "sendMessageWithReplySync": {
              "value": function () { return this.send_message_with_reply_sync.apply(this, arguments); }
            },
            "setExitOnClose": {
              "value": function () { return this.set_exit_on_close.apply(this, arguments); }
            },
            "signalSubscribe": {
              "value": function () { return this.signal_subscribe.apply(this, arguments); }
            },
            "signalUnsubscribe": {
              "value": function () { return this.signal_unsubscribe.apply(this, arguments); }
            },
            "startMessageProcessing": {
              "value": function () { return this.start_message_processing.apply(this, arguments); }
            },
            "unexportActionGroup": {
              "value": function () { return this.unexport_action_group.apply(this, arguments); }
            },
            "unexportMenuModel": {
              "value": function () { return this.unexport_menu_model.apply(this, arguments); }
            },
            "unregisterObject": {
              "value": function () { return this.unregister_object.apply(this, arguments); }
            },
            "unregisterSubtree": {
              "value": function () { return this.unregister_subtree.apply(this, arguments); }
            },
            "authenticationObserver": {
              "get": function () { return this.authentication_observer; },
              "set": function (value) { this.authentication_observer = value; }
            },
            "exitOnClose": {
              "get": function () { return this.exit_on_close; },
              "set": function (value) { this.exit_on_close = value; }
            },
            "uniqueName": {
              "get": function () { return this.unique_name; },
              "set": function (value) { this.unique_name = value; }
            }
          },
          "static": {
            "newForAddress": {
              "value": function () { return this.new_for_address.apply(this, arguments); }
            }
          }
        },
        "DBusInterfaceSkeleton": {
          "prototype": {
            "getConnection": {
              "value": function () { return this.get_connection.apply(this, arguments); }
            },
            "getConnections": {
              "value": function () { return this.get_connections.apply(this, arguments); }
            },
            "getFlags": {
              "value": function () { return this.get_flags.apply(this, arguments); }
            },
            "getInfo": {
              "value": function () { return this.get_info.apply(this, arguments); }
            },
            "getObjectPath": {
              "value": function () { return this.get_object_path.apply(this, arguments); }
            },
            "getProperties": {
              "value": function () { return this.get_properties.apply(this, arguments); }
            },
            "getVtable": {
              "value": function () { return this.get_vtable.apply(this, arguments); }
            },
            "hasConnection": {
              "value": function () { return this.has_connection.apply(this, arguments); }
            },
            "setFlags": {
              "value": function () { return this.set_flags.apply(this, arguments); }
            },
            "unexportFromConnection": {
              "value": function () { return this.unexport_from_connection.apply(this, arguments); }
            },
            "gFlags": {
              "get": function () { return this.g_flags; },
              "set": function (value) { this.g_flags = value; }
            }
          },
          "static": {}
        },
        "DBusMenuModel": {
          "prototype": {},
          "static": {}
        },
        "DBusMessage": {
          "prototype": {
            "getArg0": {
              "value": function () { return this.get_arg0.apply(this, arguments); }
            },
            "getBody": {
              "value": function () { return this.get_body.apply(this, arguments); }
            },
            "getByteOrder": {
              "value": function () { return this.get_byte_order.apply(this, arguments); }
            },
            "getDestination": {
              "value": function () { return this.get_destination.apply(this, arguments); }
            },
            "getErrorName": {
              "value": function () { return this.get_error_name.apply(this, arguments); }
            },
            "getFlags": {
              "value": function () { return this.get_flags.apply(this, arguments); }
            },
            "getHeader": {
              "value": function () { return this.get_header.apply(this, arguments); }
            },
            "getHeaderFields": {
              "value": function () { return this.get_header_fields.apply(this, arguments); }
            },
            "getInterface": {
              "value": function () { return this.get_interface.apply(this, arguments); }
            },
            "getLocked": {
              "value": function () { return this.get_locked.apply(this, arguments); }
            },
            "getMember": {
              "value": function () { return this.get_member.apply(this, arguments); }
            },
            "getMessageType": {
              "value": function () { return this.get_message_type.apply(this, arguments); }
            },
            "getNumUnixFds": {
              "value": function () { return this.get_num_unix_fds.apply(this, arguments); }
            },
            "getPath": {
              "value": function () { return this.get_path.apply(this, arguments); }
            },
            "getReplySerial": {
              "value": function () { return this.get_reply_serial.apply(this, arguments); }
            },
            "getSender": {
              "value": function () { return this.get_sender.apply(this, arguments); }
            },
            "getSerial": {
              "value": function () { return this.get_serial.apply(this, arguments); }
            },
            "getSignature": {
              "value": function () { return this.get_signature.apply(this, arguments); }
            },
            "getUnixFdList": {
              "value": function () { return this.get_unix_fd_list.apply(this, arguments); }
            },
            "newMethodError": {
              "value": function () { return this.new_method_error.apply(this, arguments); }
            },
            "newMethodErrorLiteral": {
              "value": function () { return this.new_method_error_literal.apply(this, arguments); }
            },
            "newMethodErrorValist": {
              "value": function () { return this.new_method_error_valist.apply(this, arguments); }
            },
            "newMethodReply": {
              "value": function () { return this.new_method_reply.apply(this, arguments); }
            },
            "setBody": {
              "value": function () { return this.set_body.apply(this, arguments); }
            },
            "setByteOrder": {
              "value": function () { return this.set_byte_order.apply(this, arguments); }
            },
            "setDestination": {
              "value": function () { return this.set_destination.apply(this, arguments); }
            },
            "setErrorName": {
              "value": function () { return this.set_error_name.apply(this, arguments); }
            },
            "setFlags": {
              "value": function () { return this.set_flags.apply(this, arguments); }
            },
            "setHeader": {
              "value": function () { return this.set_header.apply(this, arguments); }
            },
            "setInterface": {
              "value": function () { return this.set_interface.apply(this, arguments); }
            },
            "setMember": {
              "value": function () { return this.set_member.apply(this, arguments); }
            },
            "setMessageType": {
              "value": function () { return this.set_message_type.apply(this, arguments); }
            },
            "setNumUnixFds": {
              "value": function () { return this.set_num_unix_fds.apply(this, arguments); }
            },
            "setPath": {
              "value": function () { return this.set_path.apply(this, arguments); }
            },
            "setReplySerial": {
              "value": function () { return this.set_reply_serial.apply(this, arguments); }
            },
            "setSender": {
              "value": function () { return this.set_sender.apply(this, arguments); }
            },
            "setSerial": {
              "value": function () { return this.set_serial.apply(this, arguments); }
            },
            "setSignature": {
              "value": function () { return this.set_signature.apply(this, arguments); }
            },
            "setUnixFdList": {
              "value": function () { return this.set_unix_fd_list.apply(this, arguments); }
            },
            "toBlob": {
              "value": function () { return this.to_blob.apply(this, arguments); }
            },
            "toGerror": {
              "value": function () { return this.to_gerror.apply(this, arguments); }
            }
          },
          "static": {
            "bytesNeeded": {
              "value": function () { return this.bytes_needed.apply(this, arguments); }
            }
          }
        },
        "DBusMethodInvocation": {
          "prototype": {
            "getConnection": {
              "value": function () { return this.get_connection.apply(this, arguments); }
            },
            "getInterfaceName": {
              "value": function () { return this.get_interface_name.apply(this, arguments); }
            },
            "getMessage": {
              "value": function () { return this.get_message.apply(this, arguments); }
            },
            "getMethodInfo": {
              "value": function () { return this.get_method_info.apply(this, arguments); }
            },
            "getMethodName": {
              "value": function () { return this.get_method_name.apply(this, arguments); }
            },
            "getObjectPath": {
              "value": function () { return this.get_object_path.apply(this, arguments); }
            },
            "getParameters": {
              "value": function () { return this.get_parameters.apply(this, arguments); }
            },
            "getPropertyInfo": {
              "value": function () { return this.get_property_info.apply(this, arguments); }
            },
            "getSender": {
              "value": function () { return this.get_sender.apply(this, arguments); }
            },
            "getUserData": {
              "value": function () { return this.get_user_data.apply(this, arguments); }
            },
            "returnDbusError": {
              "value": function () { return this.return_dbus_error.apply(this, arguments); }
            },
            "returnError": {
              "value": function () { return this.return_error.apply(this, arguments); }
            },
            "returnErrorLiteral": {
              "value": function () { return this.return_error_literal.apply(this, arguments); }
            },
            "returnErrorValist": {
              "value": function () { return this.return_error_valist.apply(this, arguments); }
            },
            "returnGerror": {
              "value": function () { return this.return_gerror.apply(this, arguments); }
            },
            "returnValue": {
              "value": function () { return this.return_value.apply(this, arguments); }
            },
            "returnValueWithUnixFdList": {
              "value": function () { return this.return_value_with_unix_fd_list.apply(this, arguments); }
            },
            "takeError": {
              "value": function () { return this.take_error.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DBusObjectManagerClient": {
          "prototype": {
            "getConnection": {
              "value": function () { return this.get_connection.apply(this, arguments); }
            },
            "getFlags": {
              "value": function () { return this.get_flags.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getNameOwner": {
              "value": function () { return this.get_name_owner.apply(this, arguments); }
            },
            "busType": {
              "get": function () { return this.bus_type; },
              "set": function (value) { this.bus_type = value; }
            },
            "getProxyTypeDestroyNotify": {
              "get": function () { return this.get_proxy_type_destroy_notify; },
              "set": function (value) { this.get_proxy_type_destroy_notify = value; }
            },
            "getProxyTypeFunc": {
              "get": function () { return this.get_proxy_type_func; },
              "set": function (value) { this.get_proxy_type_func = value; }
            },
            "getProxyTypeUserData": {
              "get": function () { return this.get_proxy_type_user_data; },
              "set": function (value) { this.get_proxy_type_user_data = value; }
            },
            "nameOwner": {
              "get": function () { return this.name_owner; },
              "set": function (value) { this.name_owner = value; }
            },
            "objectPath": {
              "get": function () { return this.object_path; },
              "set": function (value) { this.object_path = value; }
            }
          },
          "static": {
            "newForBus": {
              "value": function () { return this.new_for_bus.apply(this, arguments); }
            }
          }
        },
        "DBusObjectManagerServer": {
          "prototype": {
            "exportUniquely": {
              "value": function () { return this.export_uniquely.apply(this, arguments); }
            },
            "getConnection": {
              "value": function () { return this.get_connection.apply(this, arguments); }
            },
            "isExported": {
              "value": function () { return this.is_exported.apply(this, arguments); }
            },
            "setConnection": {
              "value": function () { return this.set_connection.apply(this, arguments); }
            },
            "objectPath": {
              "get": function () { return this.object_path; },
              "set": function (value) { this.object_path = value; }
            }
          },
          "static": {}
        },
        "DBusObjectProxy": {
          "prototype": {
            "getConnection": {
              "value": function () { return this.get_connection.apply(this, arguments); }
            },
            "gConnection": {
              "get": function () { return this.g_connection; },
              "set": function (value) { this.g_connection = value; }
            },
            "gObjectPath": {
              "get": function () { return this.g_object_path; },
              "set": function (value) { this.g_object_path = value; }
            }
          },
          "static": {}
        },
        "DBusObjectSkeleton": {
          "prototype": {
            "addInterface": {
              "value": function () { return this.add_interface.apply(this, arguments); }
            },
            "removeInterface": {
              "value": function () { return this.remove_interface.apply(this, arguments); }
            },
            "removeInterfaceByName": {
              "value": function () { return this.remove_interface_by_name.apply(this, arguments); }
            },
            "setObjectPath": {
              "value": function () { return this.set_object_path.apply(this, arguments); }
            },
            "gObjectPath": {
              "get": function () { return this.g_object_path; },
              "set": function (value) { this.g_object_path = value; }
            }
          },
          "static": {}
        },
        "DBusProxy": {
          "prototype": {
            "callFinish": {
              "value": function () { return this.call_finish.apply(this, arguments); }
            },
            "callSync": {
              "value": function () { return this.call_sync.apply(this, arguments); }
            },
            "callWithUnixFdList": {
              "value": function () { return this.call_with_unix_fd_list.apply(this, arguments); }
            },
            "callWithUnixFdListFinish": {
              "value": function () { return this.call_with_unix_fd_list_finish.apply(this, arguments); }
            },
            "callWithUnixFdListSync": {
              "value": function () { return this.call_with_unix_fd_list_sync.apply(this, arguments); }
            },
            "getCachedProperty": {
              "value": function () { return this.get_cached_property.apply(this, arguments); }
            },
            "getCachedPropertyNames": {
              "value": function () { return this.get_cached_property_names.apply(this, arguments); }
            },
            "getConnection": {
              "value": function () { return this.get_connection.apply(this, arguments); }
            },
            "getDefaultTimeout": {
              "value": function () { return this.get_default_timeout.apply(this, arguments); }
            },
            "getFlags": {
              "value": function () { return this.get_flags.apply(this, arguments); }
            },
            "getInterfaceInfo": {
              "value": function () { return this.get_interface_info.apply(this, arguments); }
            },
            "getInterfaceName": {
              "value": function () { return this.get_interface_name.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getNameOwner": {
              "value": function () { return this.get_name_owner.apply(this, arguments); }
            },
            "getObjectPath": {
              "value": function () { return this.get_object_path.apply(this, arguments); }
            },
            "setCachedProperty": {
              "value": function () { return this.set_cached_property.apply(this, arguments); }
            },
            "setDefaultTimeout": {
              "value": function () { return this.set_default_timeout.apply(this, arguments); }
            },
            "setInterfaceInfo": {
              "value": function () { return this.set_interface_info.apply(this, arguments); }
            },
            "gBusType": {
              "get": function () { return this.g_bus_type; },
              "set": function (value) { this.g_bus_type = value; }
            },
            "gConnection": {
              "get": function () { return this.g_connection; },
              "set": function (value) { this.g_connection = value; }
            },
            "gDefaultTimeout": {
              "get": function () { return this.g_default_timeout; },
              "set": function (value) { this.g_default_timeout = value; }
            },
            "gFlags": {
              "get": function () { return this.g_flags; },
              "set": function (value) { this.g_flags = value; }
            },
            "gInterfaceInfo": {
              "get": function () { return this.g_interface_info; },
              "set": function (value) { this.g_interface_info = value; }
            },
            "gInterfaceName": {
              "get": function () { return this.g_interface_name; },
              "set": function (value) { this.g_interface_name = value; }
            },
            "gName": {
              "get": function () { return this.g_name; },
              "set": function (value) { this.g_name = value; }
            },
            "gNameOwner": {
              "get": function () { return this.g_name_owner; },
              "set": function (value) { this.g_name_owner = value; }
            },
            "gObjectPath": {
              "get": function () { return this.g_object_path; },
              "set": function (value) { this.g_object_path = value; }
            }
          },
          "static": {
            "newForBus": {
              "value": function () { return this.new_for_bus.apply(this, arguments); }
            }
          }
        },
        "DBusServer": {
          "prototype": {
            "getClientAddress": {
              "value": function () { return this.get_client_address.apply(this, arguments); }
            },
            "getFlags": {
              "value": function () { return this.get_flags.apply(this, arguments); }
            },
            "getGuid": {
              "value": function () { return this.get_guid.apply(this, arguments); }
            },
            "isActive": {
              "value": function () { return this.is_active.apply(this, arguments); }
            },
            "authenticationObserver": {
              "get": function () { return this.authentication_observer; },
              "set": function (value) { this.authentication_observer = value; }
            },
            "clientAddress": {
              "get": function () { return this.client_address; },
              "set": function (value) { this.client_address = value; }
            }
          },
          "static": {}
        },
        "DataInputStream": {
          "prototype": {
            "getByteOrder": {
              "value": function () { return this.get_byte_order.apply(this, arguments); }
            },
            "getNewlineType": {
              "value": function () { return this.get_newline_type.apply(this, arguments); }
            },
            "readByte": {
              "value": function () { return this.read_byte.apply(this, arguments); }
            },
            "readInt16": {
              "value": function () { return this.read_int16.apply(this, arguments); }
            },
            "readInt32": {
              "value": function () { return this.read_int32.apply(this, arguments); }
            },
            "readInt64": {
              "value": function () { return this.read_int64.apply(this, arguments); }
            },
            "readLine": {
              "value": function () { return this.read_line.apply(this, arguments); }
            },
            "readLineAsync": {
              "value": function () { return this.read_line_async.apply(this, arguments); }
            },
            "readLineFinish": {
              "value": function () { return this.read_line_finish.apply(this, arguments); }
            },
            "readLineFinishUtf8": {
              "value": function () { return this.read_line_finish_utf8.apply(this, arguments); }
            },
            "readLineUtf8": {
              "value": function () { return this.read_line_utf8.apply(this, arguments); }
            },
            "readUint16": {
              "value": function () { return this.read_uint16.apply(this, arguments); }
            },
            "readUint32": {
              "value": function () { return this.read_uint32.apply(this, arguments); }
            },
            "readUint64": {
              "value": function () { return this.read_uint64.apply(this, arguments); }
            },
            "readUntil": {
              "value": function () { return this.read_until.apply(this, arguments); }
            },
            "readUntilAsync": {
              "value": function () { return this.read_until_async.apply(this, arguments); }
            },
            "readUntilFinish": {
              "value": function () { return this.read_until_finish.apply(this, arguments); }
            },
            "readUpto": {
              "value": function () { return this.read_upto.apply(this, arguments); }
            },
            "readUptoAsync": {
              "value": function () { return this.read_upto_async.apply(this, arguments); }
            },
            "readUptoFinish": {
              "value": function () { return this.read_upto_finish.apply(this, arguments); }
            },
            "setByteOrder": {
              "value": function () { return this.set_byte_order.apply(this, arguments); }
            },
            "setNewlineType": {
              "value": function () { return this.set_newline_type.apply(this, arguments); }
            },
            "byteOrder": {
              "get": function () { return this.byte_order; },
              "set": function (value) { this.byte_order = value; }
            },
            "newlineType": {
              "get": function () { return this.newline_type; },
              "set": function (value) { this.newline_type = value; }
            }
          },
          "static": {}
        },
        "DataOutputStream": {
          "prototype": {
            "getByteOrder": {
              "value": function () { return this.get_byte_order.apply(this, arguments); }
            },
            "putByte": {
              "value": function () { return this.put_byte.apply(this, arguments); }
            },
            "putInt16": {
              "value": function () { return this.put_int16.apply(this, arguments); }
            },
            "putInt32": {
              "value": function () { return this.put_int32.apply(this, arguments); }
            },
            "putInt64": {
              "value": function () { return this.put_int64.apply(this, arguments); }
            },
            "putString": {
              "value": function () { return this.put_string.apply(this, arguments); }
            },
            "putUint16": {
              "value": function () { return this.put_uint16.apply(this, arguments); }
            },
            "putUint32": {
              "value": function () { return this.put_uint32.apply(this, arguments); }
            },
            "putUint64": {
              "value": function () { return this.put_uint64.apply(this, arguments); }
            },
            "setByteOrder": {
              "value": function () { return this.set_byte_order.apply(this, arguments); }
            },
            "byteOrder": {
              "get": function () { return this.byte_order; },
              "set": function (value) { this.byte_order = value; }
            }
          },
          "static": {}
        },
        "DesktopAppInfo": {
          "prototype": {
            "getActionName": {
              "value": function () { return this.get_action_name.apply(this, arguments); }
            },
            "getBoolean": {
              "value": function () { return this.get_boolean.apply(this, arguments); }
            },
            "getCategories": {
              "value": function () { return this.get_categories.apply(this, arguments); }
            },
            "getFilename": {
              "value": function () { return this.get_filename.apply(this, arguments); }
            },
            "getGenericName": {
              "value": function () { return this.get_generic_name.apply(this, arguments); }
            },
            "getIsHidden": {
              "value": function () { return this.get_is_hidden.apply(this, arguments); }
            },
            "getKeywords": {
              "value": function () { return this.get_keywords.apply(this, arguments); }
            },
            "getNodisplay": {
              "value": function () { return this.get_nodisplay.apply(this, arguments); }
            },
            "getShowIn": {
              "value": function () { return this.get_show_in.apply(this, arguments); }
            },
            "getStartupWmClass": {
              "value": function () { return this.get_startup_wm_class.apply(this, arguments); }
            },
            "getString": {
              "value": function () { return this.get_string.apply(this, arguments); }
            },
            "hasKey": {
              "value": function () { return this.has_key.apply(this, arguments); }
            },
            "launchAction": {
              "value": function () { return this.launch_action.apply(this, arguments); }
            },
            "launchUrisAsManager": {
              "value": function () { return this.launch_uris_as_manager.apply(this, arguments); }
            },
            "listActions": {
              "value": function () { return this.list_actions.apply(this, arguments); }
            }
          },
          "static": {
            "getImplementations": {
              "value": function () { return this.get_implementations.apply(this, arguments); }
            },
            "setDesktopEnv": {
              "value": function () { return this.set_desktop_env.apply(this, arguments); }
            }
          }
        },
        "Emblem": {
          "prototype": {
            "getIcon": {
              "value": function () { return this.get_icon.apply(this, arguments); }
            },
            "getOrigin": {
              "value": function () { return this.get_origin.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "EmblemedIcon": {
          "prototype": {
            "addEmblem": {
              "value": function () { return this.add_emblem.apply(this, arguments); }
            },
            "clearEmblems": {
              "value": function () { return this.clear_emblems.apply(this, arguments); }
            },
            "getEmblems": {
              "value": function () { return this.get_emblems.apply(this, arguments); }
            },
            "getIcon": {
              "value": function () { return this.get_icon.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "FileEnumerator": {
          "prototype": {
            "closeAsync": {
              "value": function () { return this.close_async.apply(this, arguments); }
            },
            "closeFinish": {
              "value": function () { return this.close_finish.apply(this, arguments); }
            },
            "getChild": {
              "value": function () { return this.get_child.apply(this, arguments); }
            },
            "getContainer": {
              "value": function () { return this.get_container.apply(this, arguments); }
            },
            "hasPending": {
              "value": function () { return this.has_pending.apply(this, arguments); }
            },
            "isClosed": {
              "value": function () { return this.is_closed.apply(this, arguments); }
            },
            "nextFile": {
              "value": function () { return this.next_file.apply(this, arguments); }
            },
            "nextFilesAsync": {
              "value": function () { return this.next_files_async.apply(this, arguments); }
            },
            "nextFilesFinish": {
              "value": function () { return this.next_files_finish.apply(this, arguments); }
            },
            "setPending": {
              "value": function () { return this.set_pending.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "FileIOStream": {
          "prototype": {
            "getEtag": {
              "value": function () { return this.get_etag.apply(this, arguments); }
            },
            "queryInfo": {
              "value": function () { return this.query_info.apply(this, arguments); }
            },
            "queryInfoAsync": {
              "value": function () { return this.query_info_async.apply(this, arguments); }
            },
            "queryInfoFinish": {
              "value": function () { return this.query_info_finish.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "FileIcon": {
          "prototype": {
            "getFile": {
              "value": function () { return this.get_file.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "FileInfo": {
          "prototype": {
            "clearStatus": {
              "value": function () { return this.clear_status.apply(this, arguments); }
            },
            "copyInto": {
              "value": function () { return this.copy_into.apply(this, arguments); }
            },
            "getAttributeAsString": {
              "value": function () { return this.get_attribute_as_string.apply(this, arguments); }
            },
            "getAttributeBoolean": {
              "value": function () { return this.get_attribute_boolean.apply(this, arguments); }
            },
            "getAttributeByteString": {
              "value": function () { return this.get_attribute_byte_string.apply(this, arguments); }
            },
            "getAttributeData": {
              "value": function () { return this.get_attribute_data.apply(this, arguments); }
            },
            "getAttributeInt32": {
              "value": function () { return this.get_attribute_int32.apply(this, arguments); }
            },
            "getAttributeInt64": {
              "value": function () { return this.get_attribute_int64.apply(this, arguments); }
            },
            "getAttributeObject": {
              "value": function () { return this.get_attribute_object.apply(this, arguments); }
            },
            "getAttributeStatus": {
              "value": function () { return this.get_attribute_status.apply(this, arguments); }
            },
            "getAttributeString": {
              "value": function () { return this.get_attribute_string.apply(this, arguments); }
            },
            "getAttributeStringv": {
              "value": function () { return this.get_attribute_stringv.apply(this, arguments); }
            },
            "getAttributeType": {
              "value": function () { return this.get_attribute_type.apply(this, arguments); }
            },
            "getAttributeUint32": {
              "value": function () { return this.get_attribute_uint32.apply(this, arguments); }
            },
            "getAttributeUint64": {
              "value": function () { return this.get_attribute_uint64.apply(this, arguments); }
            },
            "getContentType": {
              "value": function () { return this.get_content_type.apply(this, arguments); }
            },
            "getDeletionDate": {
              "value": function () { return this.get_deletion_date.apply(this, arguments); }
            },
            "getDisplayName": {
              "value": function () { return this.get_display_name.apply(this, arguments); }
            },
            "getEditName": {
              "value": function () { return this.get_edit_name.apply(this, arguments); }
            },
            "getEtag": {
              "value": function () { return this.get_etag.apply(this, arguments); }
            },
            "getFileType": {
              "value": function () { return this.get_file_type.apply(this, arguments); }
            },
            "getIcon": {
              "value": function () { return this.get_icon.apply(this, arguments); }
            },
            "getIsBackup": {
              "value": function () { return this.get_is_backup.apply(this, arguments); }
            },
            "getIsHidden": {
              "value": function () { return this.get_is_hidden.apply(this, arguments); }
            },
            "getIsSymlink": {
              "value": function () { return this.get_is_symlink.apply(this, arguments); }
            },
            "getModificationTime": {
              "value": function () { return this.get_modification_time.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getSize": {
              "value": function () { return this.get_size.apply(this, arguments); }
            },
            "getSortOrder": {
              "value": function () { return this.get_sort_order.apply(this, arguments); }
            },
            "getSymbolicIcon": {
              "value": function () { return this.get_symbolic_icon.apply(this, arguments); }
            },
            "getSymlinkTarget": {
              "value": function () { return this.get_symlink_target.apply(this, arguments); }
            },
            "hasAttribute": {
              "value": function () { return this.has_attribute.apply(this, arguments); }
            },
            "hasNamespace": {
              "value": function () { return this.has_namespace.apply(this, arguments); }
            },
            "listAttributes": {
              "value": function () { return this.list_attributes.apply(this, arguments); }
            },
            "removeAttribute": {
              "value": function () { return this.remove_attribute.apply(this, arguments); }
            },
            "setAttribute": {
              "value": function () { return this.set_attribute.apply(this, arguments); }
            },
            "setAttributeBoolean": {
              "value": function () { return this.set_attribute_boolean.apply(this, arguments); }
            },
            "setAttributeByteString": {
              "value": function () { return this.set_attribute_byte_string.apply(this, arguments); }
            },
            "setAttributeInt32": {
              "value": function () { return this.set_attribute_int32.apply(this, arguments); }
            },
            "setAttributeInt64": {
              "value": function () { return this.set_attribute_int64.apply(this, arguments); }
            },
            "setAttributeMask": {
              "value": function () { return this.set_attribute_mask.apply(this, arguments); }
            },
            "setAttributeObject": {
              "value": function () { return this.set_attribute_object.apply(this, arguments); }
            },
            "setAttributeStatus": {
              "value": function () { return this.set_attribute_status.apply(this, arguments); }
            },
            "setAttributeString": {
              "value": function () { return this.set_attribute_string.apply(this, arguments); }
            },
            "setAttributeStringv": {
              "value": function () { return this.set_attribute_stringv.apply(this, arguments); }
            },
            "setAttributeUint32": {
              "value": function () { return this.set_attribute_uint32.apply(this, arguments); }
            },
            "setAttributeUint64": {
              "value": function () { return this.set_attribute_uint64.apply(this, arguments); }
            },
            "setContentType": {
              "value": function () { return this.set_content_type.apply(this, arguments); }
            },
            "setDisplayName": {
              "value": function () { return this.set_display_name.apply(this, arguments); }
            },
            "setEditName": {
              "value": function () { return this.set_edit_name.apply(this, arguments); }
            },
            "setFileType": {
              "value": function () { return this.set_file_type.apply(this, arguments); }
            },
            "setIcon": {
              "value": function () { return this.set_icon.apply(this, arguments); }
            },
            "setIsHidden": {
              "value": function () { return this.set_is_hidden.apply(this, arguments); }
            },
            "setIsSymlink": {
              "value": function () { return this.set_is_symlink.apply(this, arguments); }
            },
            "setModificationTime": {
              "value": function () { return this.set_modification_time.apply(this, arguments); }
            },
            "setName": {
              "value": function () { return this.set_name.apply(this, arguments); }
            },
            "setSize": {
              "value": function () { return this.set_size.apply(this, arguments); }
            },
            "setSortOrder": {
              "value": function () { return this.set_sort_order.apply(this, arguments); }
            },
            "setSymbolicIcon": {
              "value": function () { return this.set_symbolic_icon.apply(this, arguments); }
            },
            "setSymlinkTarget": {
              "value": function () { return this.set_symlink_target.apply(this, arguments); }
            },
            "unsetAttributeMask": {
              "value": function () { return this.unset_attribute_mask.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "FileInputStream": {
          "prototype": {
            "queryInfo": {
              "value": function () { return this.query_info.apply(this, arguments); }
            },
            "queryInfoAsync": {
              "value": function () { return this.query_info_async.apply(this, arguments); }
            },
            "queryInfoFinish": {
              "value": function () { return this.query_info_finish.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "FileMonitor": {
          "prototype": {
            "emitEvent": {
              "value": function () { return this.emit_event.apply(this, arguments); }
            },
            "isCancelled": {
              "value": function () { return this.is_cancelled.apply(this, arguments); }
            },
            "setRateLimit": {
              "value": function () { return this.set_rate_limit.apply(this, arguments); }
            },
            "rateLimit": {
              "get": function () { return this.rate_limit; },
              "set": function (value) { this.rate_limit = value; }
            }
          },
          "static": {}
        },
        "FileOutputStream": {
          "prototype": {
            "getEtag": {
              "value": function () { return this.get_etag.apply(this, arguments); }
            },
            "queryInfo": {
              "value": function () { return this.query_info.apply(this, arguments); }
            },
            "queryInfoAsync": {
              "value": function () { return this.query_info_async.apply(this, arguments); }
            },
            "queryInfoFinish": {
              "value": function () { return this.query_info_finish.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "FilenameCompleter": {
          "prototype": {
            "getCompletionSuffix": {
              "value": function () { return this.get_completion_suffix.apply(this, arguments); }
            },
            "getCompletions": {
              "value": function () { return this.get_completions.apply(this, arguments); }
            },
            "setDirsOnly": {
              "value": function () { return this.set_dirs_only.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "FilterInputStream": {
          "prototype": {
            "getBaseStream": {
              "value": function () { return this.get_base_stream.apply(this, arguments); }
            },
            "getCloseBaseStream": {
              "value": function () { return this.get_close_base_stream.apply(this, arguments); }
            },
            "setCloseBaseStream": {
              "value": function () { return this.set_close_base_stream.apply(this, arguments); }
            },
            "baseStream": {
              "get": function () { return this.base_stream; },
              "set": function (value) { this.base_stream = value; }
            },
            "closeBaseStream": {
              "get": function () { return this.close_base_stream; },
              "set": function (value) { this.close_base_stream = value; }
            }
          },
          "static": {}
        },
        "FilterOutputStream": {
          "prototype": {
            "getBaseStream": {
              "value": function () { return this.get_base_stream.apply(this, arguments); }
            },
            "getCloseBaseStream": {
              "value": function () { return this.get_close_base_stream.apply(this, arguments); }
            },
            "setCloseBaseStream": {
              "value": function () { return this.set_close_base_stream.apply(this, arguments); }
            },
            "baseStream": {
              "get": function () { return this.base_stream; },
              "set": function (value) { this.base_stream = value; }
            },
            "closeBaseStream": {
              "get": function () { return this.close_base_stream; },
              "set": function (value) { this.close_base_stream = value; }
            }
          },
          "static": {}
        },
        "IOModule": {
          "prototype": {},
          "static": {}
        },
        "IOStream": {
          "prototype": {
            "clearPending": {
              "value": function () { return this.clear_pending.apply(this, arguments); }
            },
            "closeAsync": {
              "value": function () { return this.close_async.apply(this, arguments); }
            },
            "closeFinish": {
              "value": function () { return this.close_finish.apply(this, arguments); }
            },
            "getInputStream": {
              "value": function () { return this.get_input_stream.apply(this, arguments); }
            },
            "getOutputStream": {
              "value": function () { return this.get_output_stream.apply(this, arguments); }
            },
            "hasPending": {
              "value": function () { return this.has_pending.apply(this, arguments); }
            },
            "isClosed": {
              "value": function () { return this.is_closed.apply(this, arguments); }
            },
            "setPending": {
              "value": function () { return this.set_pending.apply(this, arguments); }
            },
            "spliceAsync": {
              "value": function () { return this.splice_async.apply(this, arguments); }
            },
            "inputStream": {
              "get": function () { return this.input_stream; },
              "set": function (value) { this.input_stream = value; }
            },
            "outputStream": {
              "get": function () { return this.output_stream; },
              "set": function (value) { this.output_stream = value; }
            }
          },
          "static": {
            "spliceFinish": {
              "value": function () { return this.splice_finish.apply(this, arguments); }
            }
          }
        },
        "InetAddress": {
          "prototype": {
            "getFamily": {
              "value": function () { return this.get_family.apply(this, arguments); }
            },
            "getIsAny": {
              "value": function () { return this.get_is_any.apply(this, arguments); }
            },
            "getIsLinkLocal": {
              "value": function () { return this.get_is_link_local.apply(this, arguments); }
            },
            "getIsLoopback": {
              "value": function () { return this.get_is_loopback.apply(this, arguments); }
            },
            "getIsMcGlobal": {
              "value": function () { return this.get_is_mc_global.apply(this, arguments); }
            },
            "getIsMcLinkLocal": {
              "value": function () { return this.get_is_mc_link_local.apply(this, arguments); }
            },
            "getIsMcNodeLocal": {
              "value": function () { return this.get_is_mc_node_local.apply(this, arguments); }
            },
            "getIsMcOrgLocal": {
              "value": function () { return this.get_is_mc_org_local.apply(this, arguments); }
            },
            "getIsMcSiteLocal": {
              "value": function () { return this.get_is_mc_site_local.apply(this, arguments); }
            },
            "getIsMulticast": {
              "value": function () { return this.get_is_multicast.apply(this, arguments); }
            },
            "getIsSiteLocal": {
              "value": function () { return this.get_is_site_local.apply(this, arguments); }
            },
            "getNativeSize": {
              "value": function () { return this.get_native_size.apply(this, arguments); }
            },
            "toBytes": {
              "value": function () { return this.to_bytes.apply(this, arguments); }
            },
            "toString": {
              "value": function () { return this.to_string.apply(this, arguments); }
            },
            "isAny": {
              "get": function () { return this.is_any; },
              "set": function (value) { this.is_any = value; }
            },
            "isLinkLocal": {
              "get": function () { return this.is_link_local; },
              "set": function (value) { this.is_link_local = value; }
            },
            "isLoopback": {
              "get": function () { return this.is_loopback; },
              "set": function (value) { this.is_loopback = value; }
            },
            "isMcGlobal": {
              "get": function () { return this.is_mc_global; },
              "set": function (value) { this.is_mc_global = value; }
            },
            "isMcLinkLocal": {
              "get": function () { return this.is_mc_link_local; },
              "set": function (value) { this.is_mc_link_local = value; }
            },
            "isMcNodeLocal": {
              "get": function () { return this.is_mc_node_local; },
              "set": function (value) { this.is_mc_node_local = value; }
            },
            "isMcOrgLocal": {
              "get": function () { return this.is_mc_org_local; },
              "set": function (value) { this.is_mc_org_local = value; }
            },
            "isMcSiteLocal": {
              "get": function () { return this.is_mc_site_local; },
              "set": function (value) { this.is_mc_site_local = value; }
            },
            "isMulticast": {
              "get": function () { return this.is_multicast; },
              "set": function (value) { this.is_multicast = value; }
            },
            "isSiteLocal": {
              "get": function () { return this.is_site_local; },
              "set": function (value) { this.is_site_local = value; }
            }
          },
          "static": {}
        },
        "InetAddressMask": {
          "prototype": {
            "getAddress": {
              "value": function () { return this.get_address.apply(this, arguments); }
            },
            "getFamily": {
              "value": function () { return this.get_family.apply(this, arguments); }
            },
            "getLength": {
              "value": function () { return this.get_length.apply(this, arguments); }
            },
            "toString": {
              "value": function () { return this.to_string.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "InetSocketAddress": {
          "prototype": {
            "getAddress": {
              "value": function () { return this.get_address.apply(this, arguments); }
            },
            "getFlowinfo": {
              "value": function () { return this.get_flowinfo.apply(this, arguments); }
            },
            "getPort": {
              "value": function () { return this.get_port.apply(this, arguments); }
            },
            "getScopeId": {
              "value": function () { return this.get_scope_id.apply(this, arguments); }
            },
            "scopeId": {
              "get": function () { return this.scope_id; },
              "set": function (value) { this.scope_id = value; }
            }
          },
          "static": {}
        },
        "InputStream": {
          "prototype": {
            "clearPending": {
              "value": function () { return this.clear_pending.apply(this, arguments); }
            },
            "closeAsync": {
              "value": function () { return this.close_async.apply(this, arguments); }
            },
            "closeFinish": {
              "value": function () { return this.close_finish.apply(this, arguments); }
            },
            "hasPending": {
              "value": function () { return this.has_pending.apply(this, arguments); }
            },
            "isClosed": {
              "value": function () { return this.is_closed.apply(this, arguments); }
            },
            "readAll": {
              "value": function () { return this.read_all.apply(this, arguments); }
            },
            "readAllAsync": {
              "value": function () { return this.read_all_async.apply(this, arguments); }
            },
            "readAllFinish": {
              "value": function () { return this.read_all_finish.apply(this, arguments); }
            },
            "readAsync": {
              "value": function () { return this.read_async.apply(this, arguments); }
            },
            "readBytes": {
              "value": function () { return this.read_bytes.apply(this, arguments); }
            },
            "readBytesAsync": {
              "value": function () { return this.read_bytes_async.apply(this, arguments); }
            },
            "readBytesFinish": {
              "value": function () { return this.read_bytes_finish.apply(this, arguments); }
            },
            "readFinish": {
              "value": function () { return this.read_finish.apply(this, arguments); }
            },
            "setPending": {
              "value": function () { return this.set_pending.apply(this, arguments); }
            },
            "skipAsync": {
              "value": function () { return this.skip_async.apply(this, arguments); }
            },
            "skipFinish": {
              "value": function () { return this.skip_finish.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "ListStore": {
          "prototype": {
            "insertSorted": {
              "value": function () { return this.insert_sorted.apply(this, arguments); }
            },
            "removeAll": {
              "value": function () { return this.remove_all.apply(this, arguments); }
            },
            "itemType": {
              "get": function () { return this.item_type; },
              "set": function (value) { this.item_type = value; }
            }
          },
          "static": {}
        },
        "MemoryInputStream": {
          "prototype": {
            "addBytes": {
              "value": function () { return this.add_bytes.apply(this, arguments); }
            },
            "addData": {
              "value": function () { return this.add_data.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "MemoryOutputStream": {
          "prototype": {
            "getData": {
              "value": function () { return this.get_data.apply(this, arguments); }
            },
            "getDataSize": {
              "value": function () { return this.get_data_size.apply(this, arguments); }
            },
            "getSize": {
              "value": function () { return this.get_size.apply(this, arguments); }
            },
            "stealAsBytes": {
              "value": function () { return this.steal_as_bytes.apply(this, arguments); }
            },
            "stealData": {
              "value": function () { return this.steal_data.apply(this, arguments); }
            },
            "dataSize": {
              "get": function () { return this.data_size; },
              "set": function (value) { this.data_size = value; }
            },
            "destroyFunction": {
              "get": function () { return this.destroy_function; },
              "set": function (value) { this.destroy_function = value; }
            },
            "reallocFunction": {
              "get": function () { return this.realloc_function; },
              "set": function (value) { this.realloc_function = value; }
            }
          },
          "static": {}
        },
        "Menu": {
          "prototype": {
            "appendItem": {
              "value": function () { return this.append_item.apply(this, arguments); }
            },
            "appendSection": {
              "value": function () { return this.append_section.apply(this, arguments); }
            },
            "appendSubmenu": {
              "value": function () { return this.append_submenu.apply(this, arguments); }
            },
            "insertItem": {
              "value": function () { return this.insert_item.apply(this, arguments); }
            },
            "insertSection": {
              "value": function () { return this.insert_section.apply(this, arguments); }
            },
            "insertSubmenu": {
              "value": function () { return this.insert_submenu.apply(this, arguments); }
            },
            "prependItem": {
              "value": function () { return this.prepend_item.apply(this, arguments); }
            },
            "prependSection": {
              "value": function () { return this.prepend_section.apply(this, arguments); }
            },
            "prependSubmenu": {
              "value": function () { return this.prepend_submenu.apply(this, arguments); }
            },
            "removeAll": {
              "value": function () { return this.remove_all.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "MenuAttributeIter": {
          "prototype": {
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getNext": {
              "value": function () { return this.get_next.apply(this, arguments); }
            },
            "getValue": {
              "value": function () { return this.get_value.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "MenuItem": {
          "prototype": {
            "getAttribute": {
              "value": function () { return this.get_attribute.apply(this, arguments); }
            },
            "getAttributeValue": {
              "value": function () { return this.get_attribute_value.apply(this, arguments); }
            },
            "getLink": {
              "value": function () { return this.get_link.apply(this, arguments); }
            },
            "setActionAndTarget": {
              "value": function () { return this.set_action_and_target.apply(this, arguments); }
            },
            "setActionAndTargetValue": {
              "value": function () { return this.set_action_and_target_value.apply(this, arguments); }
            },
            "setAttribute": {
              "value": function () { return this.set_attribute.apply(this, arguments); }
            },
            "setAttributeValue": {
              "value": function () { return this.set_attribute_value.apply(this, arguments); }
            },
            "setDetailedAction": {
              "value": function () { return this.set_detailed_action.apply(this, arguments); }
            },
            "setIcon": {
              "value": function () { return this.set_icon.apply(this, arguments); }
            },
            "setLabel": {
              "value": function () { return this.set_label.apply(this, arguments); }
            },
            "setLink": {
              "value": function () { return this.set_link.apply(this, arguments); }
            },
            "setSection": {
              "value": function () { return this.set_section.apply(this, arguments); }
            },
            "setSubmenu": {
              "value": function () { return this.set_submenu.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "MenuLinkIter": {
          "prototype": {
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getNext": {
              "value": function () { return this.get_next.apply(this, arguments); }
            },
            "getValue": {
              "value": function () { return this.get_value.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "MenuModel": {
          "prototype": {
            "getItemAttribute": {
              "value": function () { return this.get_item_attribute.apply(this, arguments); }
            },
            "getItemAttributeValue": {
              "value": function () { return this.get_item_attribute_value.apply(this, arguments); }
            },
            "getItemLink": {
              "value": function () { return this.get_item_link.apply(this, arguments); }
            },
            "getNItems": {
              "value": function () { return this.get_n_items.apply(this, arguments); }
            },
            "isMutable": {
              "value": function () { return this.is_mutable.apply(this, arguments); }
            },
            "itemsChanged": {
              "value": function () { return this.items_changed.apply(this, arguments); }
            },
            "iterateItemAttributes": {
              "value": function () { return this.iterate_item_attributes.apply(this, arguments); }
            },
            "iterateItemLinks": {
              "value": function () { return this.iterate_item_links.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "MountOperation": {
          "prototype": {
            "getAnonymous": {
              "value": function () { return this.get_anonymous.apply(this, arguments); }
            },
            "getChoice": {
              "value": function () { return this.get_choice.apply(this, arguments); }
            },
            "getDomain": {
              "value": function () { return this.get_domain.apply(this, arguments); }
            },
            "getPassword": {
              "value": function () { return this.get_password.apply(this, arguments); }
            },
            "getPasswordSave": {
              "value": function () { return this.get_password_save.apply(this, arguments); }
            },
            "getUsername": {
              "value": function () { return this.get_username.apply(this, arguments); }
            },
            "setAnonymous": {
              "value": function () { return this.set_anonymous.apply(this, arguments); }
            },
            "setChoice": {
              "value": function () { return this.set_choice.apply(this, arguments); }
            },
            "setDomain": {
              "value": function () { return this.set_domain.apply(this, arguments); }
            },
            "setPassword": {
              "value": function () { return this.set_password.apply(this, arguments); }
            },
            "setPasswordSave": {
              "value": function () { return this.set_password_save.apply(this, arguments); }
            },
            "setUsername": {
              "value": function () { return this.set_username.apply(this, arguments); }
            },
            "passwordSave": {
              "get": function () { return this.password_save; },
              "set": function (value) { this.password_save = value; }
            }
          },
          "static": {}
        },
        "NativeVolumeMonitor": {
          "prototype": {},
          "static": {}
        },
        "NetworkAddress": {
          "prototype": {
            "getHostname": {
              "value": function () { return this.get_hostname.apply(this, arguments); }
            },
            "getPort": {
              "value": function () { return this.get_port.apply(this, arguments); }
            },
            "getScheme": {
              "value": function () { return this.get_scheme.apply(this, arguments); }
            }
          },
          "static": {
            "parseUri": {
              "value": function () { return this.parse_uri.apply(this, arguments); }
            }
          }
        },
        "NetworkService": {
          "prototype": {
            "getDomain": {
              "value": function () { return this.get_domain.apply(this, arguments); }
            },
            "getProtocol": {
              "value": function () { return this.get_protocol.apply(this, arguments); }
            },
            "getScheme": {
              "value": function () { return this.get_scheme.apply(this, arguments); }
            },
            "getService": {
              "value": function () { return this.get_service.apply(this, arguments); }
            },
            "setScheme": {
              "value": function () { return this.set_scheme.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Notification": {
          "prototype": {
            "addButton": {
              "value": function () { return this.add_button.apply(this, arguments); }
            },
            "addButtonWithTarget": {
              "value": function () { return this.add_button_with_target.apply(this, arguments); }
            },
            "addButtonWithTargetValue": {
              "value": function () { return this.add_button_with_target_value.apply(this, arguments); }
            },
            "setBody": {
              "value": function () { return this.set_body.apply(this, arguments); }
            },
            "setDefaultAction": {
              "value": function () { return this.set_default_action.apply(this, arguments); }
            },
            "setDefaultActionAndTarget": {
              "value": function () { return this.set_default_action_and_target.apply(this, arguments); }
            },
            "setDefaultActionAndTargetValue": {
              "value": function () { return this.set_default_action_and_target_value.apply(this, arguments); }
            },
            "setIcon": {
              "value": function () { return this.set_icon.apply(this, arguments); }
            },
            "setPriority": {
              "value": function () { return this.set_priority.apply(this, arguments); }
            },
            "setTitle": {
              "value": function () { return this.set_title.apply(this, arguments); }
            },
            "setUrgent": {
              "value": function () { return this.set_urgent.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "OutputStream": {
          "prototype": {
            "clearPending": {
              "value": function () { return this.clear_pending.apply(this, arguments); }
            },
            "closeAsync": {
              "value": function () { return this.close_async.apply(this, arguments); }
            },
            "closeFinish": {
              "value": function () { return this.close_finish.apply(this, arguments); }
            },
            "flushAsync": {
              "value": function () { return this.flush_async.apply(this, arguments); }
            },
            "flushFinish": {
              "value": function () { return this.flush_finish.apply(this, arguments); }
            },
            "hasPending": {
              "value": function () { return this.has_pending.apply(this, arguments); }
            },
            "isClosed": {
              "value": function () { return this.is_closed.apply(this, arguments); }
            },
            "isClosing": {
              "value": function () { return this.is_closing.apply(this, arguments); }
            },
            "setPending": {
              "value": function () { return this.set_pending.apply(this, arguments); }
            },
            "spliceAsync": {
              "value": function () { return this.splice_async.apply(this, arguments); }
            },
            "spliceFinish": {
              "value": function () { return this.splice_finish.apply(this, arguments); }
            },
            "writeAll": {
              "value": function () { return this.write_all.apply(this, arguments); }
            },
            "writeAllAsync": {
              "value": function () { return this.write_all_async.apply(this, arguments); }
            },
            "writeAllFinish": {
              "value": function () { return this.write_all_finish.apply(this, arguments); }
            },
            "writeAsync": {
              "value": function () { return this.write_async.apply(this, arguments); }
            },
            "writeBytes": {
              "value": function () { return this.write_bytes.apply(this, arguments); }
            },
            "writeBytesAsync": {
              "value": function () { return this.write_bytes_async.apply(this, arguments); }
            },
            "writeBytesFinish": {
              "value": function () { return this.write_bytes_finish.apply(this, arguments); }
            },
            "writeFinish": {
              "value": function () { return this.write_finish.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Permission": {
          "prototype": {
            "acquireAsync": {
              "value": function () { return this.acquire_async.apply(this, arguments); }
            },
            "acquireFinish": {
              "value": function () { return this.acquire_finish.apply(this, arguments); }
            },
            "getAllowed": {
              "value": function () { return this.get_allowed.apply(this, arguments); }
            },
            "getCanAcquire": {
              "value": function () { return this.get_can_acquire.apply(this, arguments); }
            },
            "getCanRelease": {
              "value": function () { return this.get_can_release.apply(this, arguments); }
            },
            "implUpdate": {
              "value": function () { return this.impl_update.apply(this, arguments); }
            },
            "releaseAsync": {
              "value": function () { return this.release_async.apply(this, arguments); }
            },
            "releaseFinish": {
              "value": function () { return this.release_finish.apply(this, arguments); }
            },
            "canAcquire": {
              "get": function () { return this.can_acquire; },
              "set": function (value) { this.can_acquire = value; }
            },
            "canRelease": {
              "get": function () { return this.can_release; },
              "set": function (value) { this.can_release = value; }
            }
          },
          "static": {}
        },
        "PropertyAction": {
          "prototype": {
            "invertBoolean": {
              "get": function () { return this.invert_boolean; },
              "set": function (value) { this.invert_boolean = value; }
            },
            "parameterType": {
              "get": function () { return this.parameter_type; },
              "set": function (value) { this.parameter_type = value; }
            },
            "propertyName": {
              "get": function () { return this.property_name; },
              "set": function (value) { this.property_name = value; }
            },
            "stateType": {
              "get": function () { return this.state_type; },
              "set": function (value) { this.state_type = value; }
            }
          },
          "static": {}
        },
        "ProxyAddress": {
          "prototype": {
            "getDestinationHostname": {
              "value": function () { return this.get_destination_hostname.apply(this, arguments); }
            },
            "getDestinationPort": {
              "value": function () { return this.get_destination_port.apply(this, arguments); }
            },
            "getDestinationProtocol": {
              "value": function () { return this.get_destination_protocol.apply(this, arguments); }
            },
            "getPassword": {
              "value": function () { return this.get_password.apply(this, arguments); }
            },
            "getProtocol": {
              "value": function () { return this.get_protocol.apply(this, arguments); }
            },
            "getUri": {
              "value": function () { return this.get_uri.apply(this, arguments); }
            },
            "getUsername": {
              "value": function () { return this.get_username.apply(this, arguments); }
            },
            "destinationHostname": {
              "get": function () { return this.destination_hostname; },
              "set": function (value) { this.destination_hostname = value; }
            },
            "destinationPort": {
              "get": function () { return this.destination_port; },
              "set": function (value) { this.destination_port = value; }
            },
            "destinationProtocol": {
              "get": function () { return this.destination_protocol; },
              "set": function (value) { this.destination_protocol = value; }
            }
          },
          "static": {}
        },
        "ProxyAddressEnumerator": {
          "prototype": {
            "defaultPort": {
              "get": function () { return this.default_port; },
              "set": function (value) { this.default_port = value; }
            },
            "proxyResolver": {
              "get": function () { return this.proxy_resolver; },
              "set": function (value) { this.proxy_resolver = value; }
            }
          },
          "static": {}
        },
        "Resolver": {
          "prototype": {
            "lookupByAddress": {
              "value": function () { return this.lookup_by_address.apply(this, arguments); }
            },
            "lookupByAddressAsync": {
              "value": function () { return this.lookup_by_address_async.apply(this, arguments); }
            },
            "lookupByAddressFinish": {
              "value": function () { return this.lookup_by_address_finish.apply(this, arguments); }
            },
            "lookupByName": {
              "value": function () { return this.lookup_by_name.apply(this, arguments); }
            },
            "lookupByNameAsync": {
              "value": function () { return this.lookup_by_name_async.apply(this, arguments); }
            },
            "lookupByNameFinish": {
              "value": function () { return this.lookup_by_name_finish.apply(this, arguments); }
            },
            "lookupRecords": {
              "value": function () { return this.lookup_records.apply(this, arguments); }
            },
            "lookupRecordsAsync": {
              "value": function () { return this.lookup_records_async.apply(this, arguments); }
            },
            "lookupRecordsFinish": {
              "value": function () { return this.lookup_records_finish.apply(this, arguments); }
            },
            "lookupService": {
              "value": function () { return this.lookup_service.apply(this, arguments); }
            },
            "lookupServiceAsync": {
              "value": function () { return this.lookup_service_async.apply(this, arguments); }
            },
            "lookupServiceFinish": {
              "value": function () { return this.lookup_service_finish.apply(this, arguments); }
            },
            "setDefault": {
              "value": function () { return this.set_default.apply(this, arguments); }
            }
          },
          "static": {
            "freeAddresses": {
              "value": function () { return this.free_addresses.apply(this, arguments); }
            },
            "freeTargets": {
              "value": function () { return this.free_targets.apply(this, arguments); }
            },
            "getDefault": {
              "value": function () { return this.get_default.apply(this, arguments); }
            }
          }
        },
        "Settings": {
          "prototype": {
            "bindWithMapping": {
              "value": function () { return this.bind_with_mapping.apply(this, arguments); }
            },
            "bindWritable": {
              "value": function () { return this.bind_writable.apply(this, arguments); }
            },
            "createAction": {
              "value": function () { return this.create_action.apply(this, arguments); }
            },
            "getBoolean": {
              "value": function () { return this.get_boolean.apply(this, arguments); }
            },
            "getChild": {
              "value": function () { return this.get_child.apply(this, arguments); }
            },
            "getDefaultValue": {
              "value": function () { return this.get_default_value.apply(this, arguments); }
            },
            "getDouble": {
              "value": function () { return this.get_double.apply(this, arguments); }
            },
            "getEnum": {
              "value": function () { return this.get_enum.apply(this, arguments); }
            },
            "getFlags": {
              "value": function () { return this.get_flags.apply(this, arguments); }
            },
            "getHasUnapplied": {
              "value": function () { return this.get_has_unapplied.apply(this, arguments); }
            },
            "getInt": {
              "value": function () { return this.get_int.apply(this, arguments); }
            },
            "getMapped": {
              "value": function () { return this.get_mapped.apply(this, arguments); }
            },
            "getRange": {
              "value": function () { return this.get_range.apply(this, arguments); }
            },
            "getString": {
              "value": function () { return this.get_string.apply(this, arguments); }
            },
            "getStrv": {
              "value": function () { return this.get_strv.apply(this, arguments); }
            },
            "getUint": {
              "value": function () { return this.get_uint.apply(this, arguments); }
            },
            "getUserValue": {
              "value": function () { return this.get_user_value.apply(this, arguments); }
            },
            "getValue": {
              "value": function () { return this.get_value.apply(this, arguments); }
            },
            "isWritable": {
              "value": function () { return this.is_writable.apply(this, arguments); }
            },
            "listChildren": {
              "value": function () { return this.list_children.apply(this, arguments); }
            },
            "listKeys": {
              "value": function () { return this.list_keys.apply(this, arguments); }
            },
            "rangeCheck": {
              "value": function () { return this.range_check.apply(this, arguments); }
            },
            "setBoolean": {
              "value": function () { return this.set_boolean.apply(this, arguments); }
            },
            "setDouble": {
              "value": function () { return this.set_double.apply(this, arguments); }
            },
            "setEnum": {
              "value": function () { return this.set_enum.apply(this, arguments); }
            },
            "setFlags": {
              "value": function () { return this.set_flags.apply(this, arguments); }
            },
            "setInt": {
              "value": function () { return this.set_int.apply(this, arguments); }
            },
            "setString": {
              "value": function () { return this.set_string.apply(this, arguments); }
            },
            "setStrv": {
              "value": function () { return this.set_strv.apply(this, arguments); }
            },
            "setUint": {
              "value": function () { return this.set_uint.apply(this, arguments); }
            },
            "setValue": {
              "value": function () { return this.set_value.apply(this, arguments); }
            },
            "delayApply": {
              "get": function () { return this.delay_apply; },
              "set": function (value) { this.delay_apply = value; }
            },
            "hasUnapplied": {
              "get": function () { return this.has_unapplied; },
              "set": function (value) { this.has_unapplied = value; }
            },
            "schemaId": {
              "get": function () { return this.schema_id; },
              "set": function (value) { this.schema_id = value; }
            },
            "settingsSchema": {
              "get": function () { return this.settings_schema; },
              "set": function (value) { this.settings_schema = value; }
            }
          },
          "static": {
            "listRelocatableSchemas": {
              "value": function () { return this.list_relocatable_schemas.apply(this, arguments); }
            },
            "listSchemas": {
              "value": function () { return this.list_schemas.apply(this, arguments); }
            }
          }
        },
        "SimpleAction": {
          "prototype": {
            "setEnabled": {
              "value": function () { return this.set_enabled.apply(this, arguments); }
            },
            "setState": {
              "value": function () { return this.set_state.apply(this, arguments); }
            },
            "setStateHint": {
              "value": function () { return this.set_state_hint.apply(this, arguments); }
            },
            "parameterType": {
              "get": function () { return this.parameter_type; },
              "set": function (value) { this.parameter_type = value; }
            },
            "stateType": {
              "get": function () { return this.state_type; },
              "set": function (value) { this.state_type = value; }
            }
          },
          "static": {}
        },
        "SimpleActionGroup": {
          "prototype": {
            "addEntries": {
              "value": function () { return this.add_entries.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "SimpleAsyncResult": {
          "prototype": {
            "completeInIdle": {
              "value": function () { return this.complete_in_idle.apply(this, arguments); }
            },
            "getOpResGboolean": {
              "value": function () { return this.get_op_res_gboolean.apply(this, arguments); }
            },
            "getOpResGpointer": {
              "value": function () { return this.get_op_res_gpointer.apply(this, arguments); }
            },
            "getOpResGssize": {
              "value": function () { return this.get_op_res_gssize.apply(this, arguments); }
            },
            "getSourceTag": {
              "value": function () { return this.get_source_tag.apply(this, arguments); }
            },
            "propagateError": {
              "value": function () { return this.propagate_error.apply(this, arguments); }
            },
            "runInThread": {
              "value": function () { return this.run_in_thread.apply(this, arguments); }
            },
            "setCheckCancellable": {
              "value": function () { return this.set_check_cancellable.apply(this, arguments); }
            },
            "setError": {
              "value": function () { return this.set_error.apply(this, arguments); }
            },
            "setErrorVa": {
              "value": function () { return this.set_error_va.apply(this, arguments); }
            },
            "setFromError": {
              "value": function () { return this.set_from_error.apply(this, arguments); }
            },
            "setHandleCancellation": {
              "value": function () { return this.set_handle_cancellation.apply(this, arguments); }
            },
            "setOpResGboolean": {
              "value": function () { return this.set_op_res_gboolean.apply(this, arguments); }
            },
            "setOpResGpointer": {
              "value": function () { return this.set_op_res_gpointer.apply(this, arguments); }
            },
            "setOpResGssize": {
              "value": function () { return this.set_op_res_gssize.apply(this, arguments); }
            },
            "takeError": {
              "value": function () { return this.take_error.apply(this, arguments); }
            }
          },
          "static": {
            "isValid": {
              "value": function () { return this.is_valid.apply(this, arguments); }
            }
          }
        },
        "SimpleIOStream": {
          "prototype": {
            "inputStream": {
              "get": function () { return this.input_stream; },
              "set": function (value) { this.input_stream = value; }
            },
            "outputStream": {
              "get": function () { return this.output_stream; },
              "set": function (value) { this.output_stream = value; }
            }
          },
          "static": {}
        },
        "SimplePermission": {
          "prototype": {},
          "static": {}
        },
        "SimpleProxyResolver": {
          "prototype": {
            "setDefaultProxy": {
              "value": function () { return this.set_default_proxy.apply(this, arguments); }
            },
            "setIgnoreHosts": {
              "value": function () { return this.set_ignore_hosts.apply(this, arguments); }
            },
            "setUriProxy": {
              "value": function () { return this.set_uri_proxy.apply(this, arguments); }
            },
            "defaultProxy": {
              "get": function () { return this.default_proxy; },
              "set": function (value) { this.default_proxy = value; }
            },
            "ignoreHosts": {
              "get": function () { return this.ignore_hosts; },
              "set": function (value) { this.ignore_hosts = value; }
            }
          },
          "static": {}
        },
        "Socket": {
          "prototype": {
            "checkConnectResult": {
              "value": function () { return this.check_connect_result.apply(this, arguments); }
            },
            "conditionCheck": {
              "value": function () { return this.condition_check.apply(this, arguments); }
            },
            "conditionTimedWait": {
              "value": function () { return this.condition_timed_wait.apply(this, arguments); }
            },
            "conditionWait": {
              "value": function () { return this.condition_wait.apply(this, arguments); }
            },
            "connectionFactoryCreateConnection": {
              "value": function () { return this.connection_factory_create_connection.apply(this, arguments); }
            },
            "createSource": {
              "value": function () { return this.create_source.apply(this, arguments); }
            },
            "getAvailableBytes": {
              "value": function () { return this.get_available_bytes.apply(this, arguments); }
            },
            "getBlocking": {
              "value": function () { return this.get_blocking.apply(this, arguments); }
            },
            "getBroadcast": {
              "value": function () { return this.get_broadcast.apply(this, arguments); }
            },
            "getCredentials": {
              "value": function () { return this.get_credentials.apply(this, arguments); }
            },
            "getFamily": {
              "value": function () { return this.get_family.apply(this, arguments); }
            },
            "getFd": {
              "value": function () { return this.get_fd.apply(this, arguments); }
            },
            "getKeepalive": {
              "value": function () { return this.get_keepalive.apply(this, arguments); }
            },
            "getListenBacklog": {
              "value": function () { return this.get_listen_backlog.apply(this, arguments); }
            },
            "getLocalAddress": {
              "value": function () { return this.get_local_address.apply(this, arguments); }
            },
            "getMulticastLoopback": {
              "value": function () { return this.get_multicast_loopback.apply(this, arguments); }
            },
            "getMulticastTtl": {
              "value": function () { return this.get_multicast_ttl.apply(this, arguments); }
            },
            "getOption": {
              "value": function () { return this.get_option.apply(this, arguments); }
            },
            "getProtocol": {
              "value": function () { return this.get_protocol.apply(this, arguments); }
            },
            "getRemoteAddress": {
              "value": function () { return this.get_remote_address.apply(this, arguments); }
            },
            "getSocketType": {
              "value": function () { return this.get_socket_type.apply(this, arguments); }
            },
            "getTimeout": {
              "value": function () { return this.get_timeout.apply(this, arguments); }
            },
            "getTtl": {
              "value": function () { return this.get_ttl.apply(this, arguments); }
            },
            "isClosed": {
              "value": function () { return this.is_closed.apply(this, arguments); }
            },
            "isConnected": {
              "value": function () { return this.is_connected.apply(this, arguments); }
            },
            "joinMulticastGroup": {
              "value": function () { return this.join_multicast_group.apply(this, arguments); }
            },
            "leaveMulticastGroup": {
              "value": function () { return this.leave_multicast_group.apply(this, arguments); }
            },
            "receiveFrom": {
              "value": function () { return this.receive_from.apply(this, arguments); }
            },
            "receiveMessage": {
              "value": function () { return this.receive_message.apply(this, arguments); }
            },
            "receiveWithBlocking": {
              "value": function () { return this.receive_with_blocking.apply(this, arguments); }
            },
            "sendMessage": {
              "value": function () { return this.send_message.apply(this, arguments); }
            },
            "sendMessages": {
              "value": function () { return this.send_messages.apply(this, arguments); }
            },
            "sendTo": {
              "value": function () { return this.send_to.apply(this, arguments); }
            },
            "sendWithBlocking": {
              "value": function () { return this.send_with_blocking.apply(this, arguments); }
            },
            "setBlocking": {
              "value": function () { return this.set_blocking.apply(this, arguments); }
            },
            "setBroadcast": {
              "value": function () { return this.set_broadcast.apply(this, arguments); }
            },
            "setKeepalive": {
              "value": function () { return this.set_keepalive.apply(this, arguments); }
            },
            "setListenBacklog": {
              "value": function () { return this.set_listen_backlog.apply(this, arguments); }
            },
            "setMulticastLoopback": {
              "value": function () { return this.set_multicast_loopback.apply(this, arguments); }
            },
            "setMulticastTtl": {
              "value": function () { return this.set_multicast_ttl.apply(this, arguments); }
            },
            "setOption": {
              "value": function () { return this.set_option.apply(this, arguments); }
            },
            "setTimeout": {
              "value": function () { return this.set_timeout.apply(this, arguments); }
            },
            "setTtl": {
              "value": function () { return this.set_ttl.apply(this, arguments); }
            },
            "speaksIpv4": {
              "value": function () { return this.speaks_ipv4.apply(this, arguments); }
            },
            "listenBacklog": {
              "get": function () { return this.listen_backlog; },
              "set": function (value) { this.listen_backlog = value; }
            },
            "localAddress": {
              "get": function () { return this.local_address; },
              "set": function (value) { this.local_address = value; }
            },
            "multicastLoopback": {
              "get": function () { return this.multicast_loopback; },
              "set": function (value) { this.multicast_loopback = value; }
            },
            "multicastTtl": {
              "get": function () { return this.multicast_ttl; },
              "set": function (value) { this.multicast_ttl = value; }
            },
            "remoteAddress": {
              "get": function () { return this.remote_address; },
              "set": function (value) { this.remote_address = value; }
            }
          },
          "static": {}
        },
        "SocketAddress": {
          "prototype": {
            "getFamily": {
              "value": function () { return this.get_family.apply(this, arguments); }
            },
            "getNativeSize": {
              "value": function () { return this.get_native_size.apply(this, arguments); }
            },
            "toNative": {
              "value": function () { return this.to_native.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "SocketAddressEnumerator": {
          "prototype": {
            "nextAsync": {
              "value": function () { return this.next_async.apply(this, arguments); }
            },
            "nextFinish": {
              "value": function () { return this.next_finish.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "SocketClient": {
          "prototype": {
            "addApplicationProxy": {
              "value": function () { return this.add_application_proxy.apply(this, arguments); }
            },
            "connectAsync": {
              "value": function () { return this.connect_async.apply(this, arguments); }
            },
            "connectFinish": {
              "value": function () { return this.connect_finish.apply(this, arguments); }
            },
            "connectToHost": {
              "value": function () { return this.connect_to_host.apply(this, arguments); }
            },
            "connectToHostAsync": {
              "value": function () { return this.connect_to_host_async.apply(this, arguments); }
            },
            "connectToHostFinish": {
              "value": function () { return this.connect_to_host_finish.apply(this, arguments); }
            },
            "connectToService": {
              "value": function () { return this.connect_to_service.apply(this, arguments); }
            },
            "connectToServiceAsync": {
              "value": function () { return this.connect_to_service_async.apply(this, arguments); }
            },
            "connectToServiceFinish": {
              "value": function () { return this.connect_to_service_finish.apply(this, arguments); }
            },
            "connectToUri": {
              "value": function () { return this.connect_to_uri.apply(this, arguments); }
            },
            "connectToUriAsync": {
              "value": function () { return this.connect_to_uri_async.apply(this, arguments); }
            },
            "connectToUriFinish": {
              "value": function () { return this.connect_to_uri_finish.apply(this, arguments); }
            },
            "getEnableProxy": {
              "value": function () { return this.get_enable_proxy.apply(this, arguments); }
            },
            "getFamily": {
              "value": function () { return this.get_family.apply(this, arguments); }
            },
            "getLocalAddress": {
              "value": function () { return this.get_local_address.apply(this, arguments); }
            },
            "getProtocol": {
              "value": function () { return this.get_protocol.apply(this, arguments); }
            },
            "getProxyResolver": {
              "value": function () { return this.get_proxy_resolver.apply(this, arguments); }
            },
            "getSocketType": {
              "value": function () { return this.get_socket_type.apply(this, arguments); }
            },
            "getTimeout": {
              "value": function () { return this.get_timeout.apply(this, arguments); }
            },
            "getTls": {
              "value": function () { return this.get_tls.apply(this, arguments); }
            },
            "getTlsValidationFlags": {
              "value": function () { return this.get_tls_validation_flags.apply(this, arguments); }
            },
            "setEnableProxy": {
              "value": function () { return this.set_enable_proxy.apply(this, arguments); }
            },
            "setFamily": {
              "value": function () { return this.set_family.apply(this, arguments); }
            },
            "setLocalAddress": {
              "value": function () { return this.set_local_address.apply(this, arguments); }
            },
            "setProtocol": {
              "value": function () { return this.set_protocol.apply(this, arguments); }
            },
            "setProxyResolver": {
              "value": function () { return this.set_proxy_resolver.apply(this, arguments); }
            },
            "setSocketType": {
              "value": function () { return this.set_socket_type.apply(this, arguments); }
            },
            "setTimeout": {
              "value": function () { return this.set_timeout.apply(this, arguments); }
            },
            "setTls": {
              "value": function () { return this.set_tls.apply(this, arguments); }
            },
            "setTlsValidationFlags": {
              "value": function () { return this.set_tls_validation_flags.apply(this, arguments); }
            },
            "enableProxy": {
              "get": function () { return this.enable_proxy; },
              "set": function (value) { this.enable_proxy = value; }
            },
            "localAddress": {
              "get": function () { return this.local_address; },
              "set": function (value) { this.local_address = value; }
            },
            "proxyResolver": {
              "get": function () { return this.proxy_resolver; },
              "set": function (value) { this.proxy_resolver = value; }
            },
            "tlsValidationFlags": {
              "get": function () { return this.tls_validation_flags; },
              "set": function (value) { this.tls_validation_flags = value; }
            }
          },
          "static": {}
        },
        "SocketConnection": {
          "prototype": {
            "connectAsync": {
              "value": function () { return this.connect_async.apply(this, arguments); }
            },
            "connectFinish": {
              "value": function () { return this.connect_finish.apply(this, arguments); }
            },
            "getLocalAddress": {
              "value": function () { return this.get_local_address.apply(this, arguments); }
            },
            "getRemoteAddress": {
              "value": function () { return this.get_remote_address.apply(this, arguments); }
            },
            "getSocket": {
              "value": function () { return this.get_socket.apply(this, arguments); }
            },
            "isConnected": {
              "value": function () { return this.is_connected.apply(this, arguments); }
            }
          },
          "static": {
            "factoryLookupType": {
              "value": function () { return this.factory_lookup_type.apply(this, arguments); }
            },
            "factoryRegisterType": {
              "value": function () { return this.factory_register_type.apply(this, arguments); }
            }
          }
        },
        "SocketControlMessage": {
          "prototype": {
            "getLevel": {
              "value": function () { return this.get_level.apply(this, arguments); }
            },
            "getMsgType": {
              "value": function () { return this.get_msg_type.apply(this, arguments); }
            },
            "getSize": {
              "value": function () { return this.get_size.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "SocketListener": {
          "prototype": {
            "acceptAsync": {
              "value": function () { return this.accept_async.apply(this, arguments); }
            },
            "acceptFinish": {
              "value": function () { return this.accept_finish.apply(this, arguments); }
            },
            "acceptSocket": {
              "value": function () { return this.accept_socket.apply(this, arguments); }
            },
            "acceptSocketAsync": {
              "value": function () { return this.accept_socket_async.apply(this, arguments); }
            },
            "acceptSocketFinish": {
              "value": function () { return this.accept_socket_finish.apply(this, arguments); }
            },
            "addAddress": {
              "value": function () { return this.add_address.apply(this, arguments); }
            },
            "addAnyInetPort": {
              "value": function () { return this.add_any_inet_port.apply(this, arguments); }
            },
            "addInetPort": {
              "value": function () { return this.add_inet_port.apply(this, arguments); }
            },
            "addSocket": {
              "value": function () { return this.add_socket.apply(this, arguments); }
            },
            "setBacklog": {
              "value": function () { return this.set_backlog.apply(this, arguments); }
            },
            "listenBacklog": {
              "get": function () { return this.listen_backlog; },
              "set": function (value) { this.listen_backlog = value; }
            }
          },
          "static": {}
        },
        "SocketService": {
          "prototype": {
            "isActive": {
              "value": function () { return this.is_active.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Subprocess": {
          "prototype": {
            "communicateAsync": {
              "value": function () { return this.communicate_async.apply(this, arguments); }
            },
            "communicateFinish": {
              "value": function () { return this.communicate_finish.apply(this, arguments); }
            },
            "communicateUtf8": {
              "value": function () { return this.communicate_utf8.apply(this, arguments); }
            },
            "communicateUtf8Async": {
              "value": function () { return this.communicate_utf8_async.apply(this, arguments); }
            },
            "communicateUtf8Finish": {
              "value": function () { return this.communicate_utf8_finish.apply(this, arguments); }
            },
            "forceExit": {
              "value": function () { return this.force_exit.apply(this, arguments); }
            },
            "getExitStatus": {
              "value": function () { return this.get_exit_status.apply(this, arguments); }
            },
            "getIdentifier": {
              "value": function () { return this.get_identifier.apply(this, arguments); }
            },
            "getIfExited": {
              "value": function () { return this.get_if_exited.apply(this, arguments); }
            },
            "getIfSignaled": {
              "value": function () { return this.get_if_signaled.apply(this, arguments); }
            },
            "getStatus": {
              "value": function () { return this.get_status.apply(this, arguments); }
            },
            "getStderrPipe": {
              "value": function () { return this.get_stderr_pipe.apply(this, arguments); }
            },
            "getStdinPipe": {
              "value": function () { return this.get_stdin_pipe.apply(this, arguments); }
            },
            "getStdoutPipe": {
              "value": function () { return this.get_stdout_pipe.apply(this, arguments); }
            },
            "getSuccessful": {
              "value": function () { return this.get_successful.apply(this, arguments); }
            },
            "getTermSig": {
              "value": function () { return this.get_term_sig.apply(this, arguments); }
            },
            "sendSignal": {
              "value": function () { return this.send_signal.apply(this, arguments); }
            },
            "waitAsync": {
              "value": function () { return this.wait_async.apply(this, arguments); }
            },
            "waitCheck": {
              "value": function () { return this.wait_check.apply(this, arguments); }
            },
            "waitCheckAsync": {
              "value": function () { return this.wait_check_async.apply(this, arguments); }
            },
            "waitCheckFinish": {
              "value": function () { return this.wait_check_finish.apply(this, arguments); }
            },
            "waitFinish": {
              "value": function () { return this.wait_finish.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "SubprocessLauncher": {
          "prototype": {
            "setChildSetup": {
              "value": function () { return this.set_child_setup.apply(this, arguments); }
            },
            "setCwd": {
              "value": function () { return this.set_cwd.apply(this, arguments); }
            },
            "setEnviron": {
              "value": function () { return this.set_environ.apply(this, arguments); }
            },
            "setFlags": {
              "value": function () { return this.set_flags.apply(this, arguments); }
            },
            "setStderrFilePath": {
              "value": function () { return this.set_stderr_file_path.apply(this, arguments); }
            },
            "setStdinFilePath": {
              "value": function () { return this.set_stdin_file_path.apply(this, arguments); }
            },
            "setStdoutFilePath": {
              "value": function () { return this.set_stdout_file_path.apply(this, arguments); }
            },
            "takeFd": {
              "value": function () { return this.take_fd.apply(this, arguments); }
            },
            "takeStderrFd": {
              "value": function () { return this.take_stderr_fd.apply(this, arguments); }
            },
            "takeStdinFd": {
              "value": function () { return this.take_stdin_fd.apply(this, arguments); }
            },
            "takeStdoutFd": {
              "value": function () { return this.take_stdout_fd.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Task": {
          "prototype": {
            "attachSource": {
              "value": function () { return this.attach_source.apply(this, arguments); }
            },
            "getCancellable": {
              "value": function () { return this.get_cancellable.apply(this, arguments); }
            },
            "getCheckCancellable": {
              "value": function () { return this.get_check_cancellable.apply(this, arguments); }
            },
            "getCompleted": {
              "value": function () { return this.get_completed.apply(this, arguments); }
            },
            "getContext": {
              "value": function () { return this.get_context.apply(this, arguments); }
            },
            "getPriority": {
              "value": function () { return this.get_priority.apply(this, arguments); }
            },
            "getReturnOnCancel": {
              "value": function () { return this.get_return_on_cancel.apply(this, arguments); }
            },
            "getSourceObject": {
              "value": function () { return this.get_source_object.apply(this, arguments); }
            },
            "getSourceTag": {
              "value": function () { return this.get_source_tag.apply(this, arguments); }
            },
            "getTaskData": {
              "value": function () { return this.get_task_data.apply(this, arguments); }
            },
            "hadError": {
              "value": function () { return this.had_error.apply(this, arguments); }
            },
            "propagateBoolean": {
              "value": function () { return this.propagate_boolean.apply(this, arguments); }
            },
            "propagateInt": {
              "value": function () { return this.propagate_int.apply(this, arguments); }
            },
            "propagatePointer": {
              "value": function () { return this.propagate_pointer.apply(this, arguments); }
            },
            "returnBoolean": {
              "value": function () { return this.return_boolean.apply(this, arguments); }
            },
            "returnError": {
              "value": function () { return this.return_error.apply(this, arguments); }
            },
            "returnErrorIfCancelled": {
              "value": function () { return this.return_error_if_cancelled.apply(this, arguments); }
            },
            "returnInt": {
              "value": function () { return this.return_int.apply(this, arguments); }
            },
            "returnNewError": {
              "value": function () { return this.return_new_error.apply(this, arguments); }
            },
            "returnPointer": {
              "value": function () { return this.return_pointer.apply(this, arguments); }
            },
            "runInThread": {
              "value": function () { return this.run_in_thread.apply(this, arguments); }
            },
            "runInThreadSync": {
              "value": function () { return this.run_in_thread_sync.apply(this, arguments); }
            },
            "setCheckCancellable": {
              "value": function () { return this.set_check_cancellable.apply(this, arguments); }
            },
            "setPriority": {
              "value": function () { return this.set_priority.apply(this, arguments); }
            },
            "setReturnOnCancel": {
              "value": function () { return this.set_return_on_cancel.apply(this, arguments); }
            },
            "setSourceTag": {
              "value": function () { return this.set_source_tag.apply(this, arguments); }
            },
            "setTaskData": {
              "value": function () { return this.set_task_data.apply(this, arguments); }
            }
          },
          "static": {
            "isValid": {
              "value": function () { return this.is_valid.apply(this, arguments); }
            },
            "reportError": {
              "value": function () { return this.report_error.apply(this, arguments); }
            },
            "reportNewError": {
              "value": function () { return this.report_new_error.apply(this, arguments); }
            }
          }
        },
        "TcpConnection": {
          "prototype": {
            "getGracefulDisconnect": {
              "value": function () { return this.get_graceful_disconnect.apply(this, arguments); }
            },
            "setGracefulDisconnect": {
              "value": function () { return this.set_graceful_disconnect.apply(this, arguments); }
            },
            "gracefulDisconnect": {
              "get": function () { return this.graceful_disconnect; },
              "set": function (value) { this.graceful_disconnect = value; }
            }
          },
          "static": {}
        },
        "TcpWrapperConnection": {
          "prototype": {
            "getBaseIoStream": {
              "value": function () { return this.get_base_io_stream.apply(this, arguments); }
            },
            "baseIoStream": {
              "get": function () { return this.base_io_stream; },
              "set": function (value) { this.base_io_stream = value; }
            }
          },
          "static": {}
        },
        "TestDBus": {
          "prototype": {
            "addServiceDir": {
              "value": function () { return this.add_service_dir.apply(this, arguments); }
            },
            "getBusAddress": {
              "value": function () { return this.get_bus_address.apply(this, arguments); }
            },
            "getFlags": {
              "value": function () { return this.get_flags.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "ThemedIcon": {
          "prototype": {
            "appendName": {
              "value": function () { return this.append_name.apply(this, arguments); }
            },
            "getNames": {
              "value": function () { return this.get_names.apply(this, arguments); }
            },
            "prependName": {
              "value": function () { return this.prepend_name.apply(this, arguments); }
            },
            "useDefaultFallbacks": {
              "get": function () { return this.use_default_fallbacks; },
              "set": function (value) { this.use_default_fallbacks = value; }
            }
          },
          "static": {}
        },
        "ThreadedSocketService": {
          "prototype": {
            "maxThreads": {
              "get": function () { return this.max_threads; },
              "set": function (value) { this.max_threads = value; }
            }
          },
          "static": {}
        },
        "TlsCertificate": {
          "prototype": {
            "getIssuer": {
              "value": function () { return this.get_issuer.apply(this, arguments); }
            },
            "isSame": {
              "value": function () { return this.is_same.apply(this, arguments); }
            },
            "certificatePem": {
              "get": function () { return this.certificate_pem; },
              "set": function (value) { this.certificate_pem = value; }
            },
            "privateKey": {
              "get": function () { return this.private_key; },
              "set": function (value) { this.private_key = value; }
            },
            "privateKeyPem": {
              "get": function () { return this.private_key_pem; },
              "set": function (value) { this.private_key_pem = value; }
            }
          },
          "static": {
            "listNewFromFile": {
              "value": function () { return this.list_new_from_file.apply(this, arguments); }
            }
          }
        },
        "TlsConnection": {
          "prototype": {
            "emitAcceptCertificate": {
              "value": function () { return this.emit_accept_certificate.apply(this, arguments); }
            },
            "getCertificate": {
              "value": function () { return this.get_certificate.apply(this, arguments); }
            },
            "getDatabase": {
              "value": function () { return this.get_database.apply(this, arguments); }
            },
            "getInteraction": {
              "value": function () { return this.get_interaction.apply(this, arguments); }
            },
            "getPeerCertificate": {
              "value": function () { return this.get_peer_certificate.apply(this, arguments); }
            },
            "getPeerCertificateErrors": {
              "value": function () { return this.get_peer_certificate_errors.apply(this, arguments); }
            },
            "getRehandshakeMode": {
              "value": function () { return this.get_rehandshake_mode.apply(this, arguments); }
            },
            "getRequireCloseNotify": {
              "value": function () { return this.get_require_close_notify.apply(this, arguments); }
            },
            "getUseSystemCertdb": {
              "value": function () { return this.get_use_system_certdb.apply(this, arguments); }
            },
            "handshakeAsync": {
              "value": function () { return this.handshake_async.apply(this, arguments); }
            },
            "handshakeFinish": {
              "value": function () { return this.handshake_finish.apply(this, arguments); }
            },
            "setCertificate": {
              "value": function () { return this.set_certificate.apply(this, arguments); }
            },
            "setDatabase": {
              "value": function () { return this.set_database.apply(this, arguments); }
            },
            "setInteraction": {
              "value": function () { return this.set_interaction.apply(this, arguments); }
            },
            "setRehandshakeMode": {
              "value": function () { return this.set_rehandshake_mode.apply(this, arguments); }
            },
            "setRequireCloseNotify": {
              "value": function () { return this.set_require_close_notify.apply(this, arguments); }
            },
            "setUseSystemCertdb": {
              "value": function () { return this.set_use_system_certdb.apply(this, arguments); }
            },
            "baseIoStream": {
              "get": function () { return this.base_io_stream; },
              "set": function (value) { this.base_io_stream = value; }
            },
            "peerCertificate": {
              "get": function () { return this.peer_certificate; },
              "set": function (value) { this.peer_certificate = value; }
            },
            "peerCertificateErrors": {
              "get": function () { return this.peer_certificate_errors; },
              "set": function (value) { this.peer_certificate_errors = value; }
            },
            "rehandshakeMode": {
              "get": function () { return this.rehandshake_mode; },
              "set": function (value) { this.rehandshake_mode = value; }
            },
            "requireCloseNotify": {
              "get": function () { return this.require_close_notify; },
              "set": function (value) { this.require_close_notify = value; }
            },
            "useSystemCertdb": {
              "get": function () { return this.use_system_certdb; },
              "set": function (value) { this.use_system_certdb = value; }
            }
          },
          "static": {}
        },
        "TlsDatabase": {
          "prototype": {
            "createCertificateHandle": {
              "value": function () { return this.create_certificate_handle.apply(this, arguments); }
            },
            "lookupCertificateForHandle": {
              "value": function () { return this.lookup_certificate_for_handle.apply(this, arguments); }
            },
            "lookupCertificateForHandleAsync": {
              "value": function () { return this.lookup_certificate_for_handle_async.apply(this, arguments); }
            },
            "lookupCertificateForHandleFinish": {
              "value": function () { return this.lookup_certificate_for_handle_finish.apply(this, arguments); }
            },
            "lookupCertificateIssuer": {
              "value": function () { return this.lookup_certificate_issuer.apply(this, arguments); }
            },
            "lookupCertificateIssuerAsync": {
              "value": function () { return this.lookup_certificate_issuer_async.apply(this, arguments); }
            },
            "lookupCertificateIssuerFinish": {
              "value": function () { return this.lookup_certificate_issuer_finish.apply(this, arguments); }
            },
            "lookupCertificatesIssuedBy": {
              "value": function () { return this.lookup_certificates_issued_by.apply(this, arguments); }
            },
            "lookupCertificatesIssuedByAsync": {
              "value": function () { return this.lookup_certificates_issued_by_async.apply(this, arguments); }
            },
            "lookupCertificatesIssuedByFinish": {
              "value": function () { return this.lookup_certificates_issued_by_finish.apply(this, arguments); }
            },
            "verifyChain": {
              "value": function () { return this.verify_chain.apply(this, arguments); }
            },
            "verifyChainAsync": {
              "value": function () { return this.verify_chain_async.apply(this, arguments); }
            },
            "verifyChainFinish": {
              "value": function () { return this.verify_chain_finish.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "TlsInteraction": {
          "prototype": {
            "askPassword": {
              "value": function () { return this.ask_password.apply(this, arguments); }
            },
            "askPasswordAsync": {
              "value": function () { return this.ask_password_async.apply(this, arguments); }
            },
            "askPasswordFinish": {
              "value": function () { return this.ask_password_finish.apply(this, arguments); }
            },
            "invokeAskPassword": {
              "value": function () { return this.invoke_ask_password.apply(this, arguments); }
            },
            "invokeRequestCertificate": {
              "value": function () { return this.invoke_request_certificate.apply(this, arguments); }
            },
            "requestCertificate": {
              "value": function () { return this.request_certificate.apply(this, arguments); }
            },
            "requestCertificateAsync": {
              "value": function () { return this.request_certificate_async.apply(this, arguments); }
            },
            "requestCertificateFinish": {
              "value": function () { return this.request_certificate_finish.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "TlsPassword": {
          "prototype": {
            "getDescription": {
              "value": function () { return this.get_description.apply(this, arguments); }
            },
            "getFlags": {
              "value": function () { return this.get_flags.apply(this, arguments); }
            },
            "getValue": {
              "value": function () { return this.get_value.apply(this, arguments); }
            },
            "getWarning": {
              "value": function () { return this.get_warning.apply(this, arguments); }
            },
            "setDescription": {
              "value": function () { return this.set_description.apply(this, arguments); }
            },
            "setFlags": {
              "value": function () { return this.set_flags.apply(this, arguments); }
            },
            "setValue": {
              "value": function () { return this.set_value.apply(this, arguments); }
            },
            "setValueFull": {
              "value": function () { return this.set_value_full.apply(this, arguments); }
            },
            "setWarning": {
              "value": function () { return this.set_warning.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "UnixConnection": {
          "prototype": {
            "receiveCredentials": {
              "value": function () { return this.receive_credentials.apply(this, arguments); }
            },
            "receiveCredentialsAsync": {
              "value": function () { return this.receive_credentials_async.apply(this, arguments); }
            },
            "receiveCredentialsFinish": {
              "value": function () { return this.receive_credentials_finish.apply(this, arguments); }
            },
            "receiveFd": {
              "value": function () { return this.receive_fd.apply(this, arguments); }
            },
            "sendCredentials": {
              "value": function () { return this.send_credentials.apply(this, arguments); }
            },
            "sendCredentialsAsync": {
              "value": function () { return this.send_credentials_async.apply(this, arguments); }
            },
            "sendCredentialsFinish": {
              "value": function () { return this.send_credentials_finish.apply(this, arguments); }
            },
            "sendFd": {
              "value": function () { return this.send_fd.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "UnixCredentialsMessage": {
          "prototype": {
            "getCredentials": {
              "value": function () { return this.get_credentials.apply(this, arguments); }
            }
          },
          "static": {
            "isSupported": {
              "value": function () { return this.is_supported.apply(this, arguments); }
            }
          }
        },
        "UnixFDList": {
          "prototype": {
            "getLength": {
              "value": function () { return this.get_length.apply(this, arguments); }
            },
            "peekFds": {
              "value": function () { return this.peek_fds.apply(this, arguments); }
            },
            "stealFds": {
              "value": function () { return this.steal_fds.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "UnixFDMessage": {
          "prototype": {
            "appendFd": {
              "value": function () { return this.append_fd.apply(this, arguments); }
            },
            "getFdList": {
              "value": function () { return this.get_fd_list.apply(this, arguments); }
            },
            "stealFds": {
              "value": function () { return this.steal_fds.apply(this, arguments); }
            },
            "fdList": {
              "get": function () { return this.fd_list; },
              "set": function (value) { this.fd_list = value; }
            }
          },
          "static": {}
        },
        "UnixInputStream": {
          "prototype": {
            "getCloseFd": {
              "value": function () { return this.get_close_fd.apply(this, arguments); }
            },
            "getFd": {
              "value": function () { return this.get_fd.apply(this, arguments); }
            },
            "setCloseFd": {
              "value": function () { return this.set_close_fd.apply(this, arguments); }
            },
            "closeFd": {
              "get": function () { return this.close_fd; },
              "set": function (value) { this.close_fd = value; }
            }
          },
          "static": {}
        },
        "UnixMountMonitor": {
          "prototype": {
            "setRateLimit": {
              "value": function () { return this.set_rate_limit.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "UnixOutputStream": {
          "prototype": {
            "getCloseFd": {
              "value": function () { return this.get_close_fd.apply(this, arguments); }
            },
            "getFd": {
              "value": function () { return this.get_fd.apply(this, arguments); }
            },
            "setCloseFd": {
              "value": function () { return this.set_close_fd.apply(this, arguments); }
            },
            "closeFd": {
              "get": function () { return this.close_fd; },
              "set": function (value) { this.close_fd = value; }
            }
          },
          "static": {}
        },
        "UnixSocketAddress": {
          "prototype": {
            "getAddressType": {
              "value": function () { return this.get_address_type.apply(this, arguments); }
            },
            "getIsAbstract": {
              "value": function () { return this.get_is_abstract.apply(this, arguments); }
            },
            "getPath": {
              "value": function () { return this.get_path.apply(this, arguments); }
            },
            "getPathLen": {
              "value": function () { return this.get_path_len.apply(this, arguments); }
            },
            "addressType": {
              "get": function () { return this.address_type; },
              "set": function (value) { this.address_type = value; }
            },
            "pathAsArray": {
              "get": function () { return this.path_as_array; },
              "set": function (value) { this.path_as_array = value; }
            }
          },
          "static": {
            "abstractNamesSupported": {
              "value": function () { return this.abstract_names_supported.apply(this, arguments); }
            }
          }
        },
        "Vfs": {
          "prototype": {
            "getFileForPath": {
              "value": function () { return this.get_file_for_path.apply(this, arguments); }
            },
            "getFileForUri": {
              "value": function () { return this.get_file_for_uri.apply(this, arguments); }
            },
            "getSupportedUriSchemes": {
              "value": function () { return this.get_supported_uri_schemes.apply(this, arguments); }
            },
            "isActive": {
              "value": function () { return this.is_active.apply(this, arguments); }
            },
            "parseName": {
              "value": function () { return this.parse_name.apply(this, arguments); }
            }
          },
          "static": {
            "getDefault": {
              "value": function () { return this.get_default.apply(this, arguments); }
            },
            "getLocal": {
              "value": function () { return this.get_local.apply(this, arguments); }
            }
          }
        },
        "VolumeMonitor": {
          "prototype": {
            "getConnectedDrives": {
              "value": function () { return this.get_connected_drives.apply(this, arguments); }
            },
            "getMountForUuid": {
              "value": function () { return this.get_mount_for_uuid.apply(this, arguments); }
            },
            "getMounts": {
              "value": function () { return this.get_mounts.apply(this, arguments); }
            },
            "getVolumeForUuid": {
              "value": function () { return this.get_volume_for_uuid.apply(this, arguments); }
            },
            "getVolumes": {
              "value": function () { return this.get_volumes.apply(this, arguments); }
            }
          },
          "static": {
            "adoptOrphanMount": {
              "value": function () { return this.adopt_orphan_mount.apply(this, arguments); }
            }
          }
        },
        "ZlibCompressor": {
          "prototype": {
            "getFileInfo": {
              "value": function () { return this.get_file_info.apply(this, arguments); }
            },
            "setFileInfo": {
              "value": function () { return this.set_file_info.apply(this, arguments); }
            },
            "fileInfo": {
              "get": function () { return this.file_info; },
              "set": function (value) { this.file_info = value; }
            }
          },
          "static": {}
        },
        "ZlibDecompressor": {
          "prototype": {
            "getFileInfo": {
              "value": function () { return this.get_file_info.apply(this, arguments); }
            },
            "fileInfo": {
              "get": function () { return this.file_info; },
              "set": function (value) { this.file_info = value; }
            }
          },
          "static": {}
        }
      },
      "static": {
        "actionNameIsValid": {
          "value": function () { return this.action_name_is_valid.apply(this, arguments); }
        },
        "actionParseDetailedName": {
          "value": function () { return this.action_parse_detailed_name.apply(this, arguments); }
        },
        "actionPrintDetailedName": {
          "value": function () { return this.action_print_detailed_name.apply(this, arguments); }
        },
        "appInfoCreateFromCommandline": {
          "value": function () { return this.app_info_create_from_commandline.apply(this, arguments); }
        },
        "appInfoGetAll": {
          "value": function () { return this.app_info_get_all.apply(this, arguments); }
        },
        "appInfoGetAllForType": {
          "value": function () { return this.app_info_get_all_for_type.apply(this, arguments); }
        },
        "appInfoGetDefaultForType": {
          "value": function () { return this.app_info_get_default_for_type.apply(this, arguments); }
        },
        "appInfoGetDefaultForUriScheme": {
          "value": function () { return this.app_info_get_default_for_uri_scheme.apply(this, arguments); }
        },
        "appInfoGetFallbackForType": {
          "value": function () { return this.app_info_get_fallback_for_type.apply(this, arguments); }
        },
        "appInfoGetRecommendedForType": {
          "value": function () { return this.app_info_get_recommended_for_type.apply(this, arguments); }
        },
        "appInfoLaunchDefaultForUri": {
          "value": function () { return this.app_info_launch_default_for_uri.apply(this, arguments); }
        },
        "appInfoResetTypeAssociations": {
          "value": function () { return this.app_info_reset_type_associations.apply(this, arguments); }
        },
        "asyncInitableNewvAsync": {
          "value": function () { return this.async_initable_newv_async.apply(this, arguments); }
        },
        "busGet": {
          "value": function () { return this.bus_get.apply(this, arguments); }
        },
        "busGetFinish": {
          "value": function () { return this.bus_get_finish.apply(this, arguments); }
        },
        "busGetSync": {
          "value": function () { return this.bus_get_sync.apply(this, arguments); }
        },
        "busOwnName": {
          "value": function () { return this.bus_own_name.apply(this, arguments); }
        },
        "busOwnNameOnConnection": {
          "value": function () { return this.bus_own_name_on_connection.apply(this, arguments); }
        },
        "busOwnNameOnConnectionWithClosures": {
          "value": function () { return this.bus_own_name_on_connection_with_closures.apply(this, arguments); }
        },
        "busOwnNameWithClosures": {
          "value": function () { return this.bus_own_name_with_closures.apply(this, arguments); }
        },
        "busUnownName": {
          "value": function () { return this.bus_unown_name.apply(this, arguments); }
        },
        "busUnwatchName": {
          "value": function () { return this.bus_unwatch_name.apply(this, arguments); }
        },
        "busWatchName": {
          "value": function () { return this.bus_watch_name.apply(this, arguments); }
        },
        "busWatchNameOnConnection": {
          "value": function () { return this.bus_watch_name_on_connection.apply(this, arguments); }
        },
        "busWatchNameOnConnectionWithClosures": {
          "value": function () { return this.bus_watch_name_on_connection_with_closures.apply(this, arguments); }
        },
        "busWatchNameWithClosures": {
          "value": function () { return this.bus_watch_name_with_closures.apply(this, arguments); }
        },
        "contentTypeCanBeExecutable": {
          "value": function () { return this.content_type_can_be_executable.apply(this, arguments); }
        },
        "contentTypeEquals": {
          "value": function () { return this.content_type_equals.apply(this, arguments); }
        },
        "contentTypeFromMimeType": {
          "value": function () { return this.content_type_from_mime_type.apply(this, arguments); }
        },
        "contentTypeGetDescription": {
          "value": function () { return this.content_type_get_description.apply(this, arguments); }
        },
        "contentTypeGetGenericIconName": {
          "value": function () { return this.content_type_get_generic_icon_name.apply(this, arguments); }
        },
        "contentTypeGetIcon": {
          "value": function () { return this.content_type_get_icon.apply(this, arguments); }
        },
        "contentTypeGetMimeType": {
          "value": function () { return this.content_type_get_mime_type.apply(this, arguments); }
        },
        "contentTypeGetSymbolicIcon": {
          "value": function () { return this.content_type_get_symbolic_icon.apply(this, arguments); }
        },
        "contentTypeGuess": {
          "value": function () { return this.content_type_guess.apply(this, arguments); }
        },
        "contentTypeGuessForTree": {
          "value": function () { return this.content_type_guess_for_tree.apply(this, arguments); }
        },
        "contentTypeIsA": {
          "value": function () { return this.content_type_is_a.apply(this, arguments); }
        },
        "contentTypeIsUnknown": {
          "value": function () { return this.content_type_is_unknown.apply(this, arguments); }
        },
        "contentTypesGetRegistered": {
          "value": function () { return this.content_types_get_registered.apply(this, arguments); }
        },
        "dbusAddressEscapeValue": {
          "value": function () { return this.dbus_address_escape_value.apply(this, arguments); }
        },
        "dbusAddressGetForBusSync": {
          "value": function () { return this.dbus_address_get_for_bus_sync.apply(this, arguments); }
        },
        "dbusAddressGetStream": {
          "value": function () { return this.dbus_address_get_stream.apply(this, arguments); }
        },
        "dbusAddressGetStreamFinish": {
          "value": function () { return this.dbus_address_get_stream_finish.apply(this, arguments); }
        },
        "dbusAddressGetStreamSync": {
          "value": function () { return this.dbus_address_get_stream_sync.apply(this, arguments); }
        },
        "dbusAnnotationInfoLookup": {
          "value": function () { return this.dbus_annotation_info_lookup.apply(this, arguments); }
        },
        "dbusErrorEncodeGerror": {
          "value": function () { return this.dbus_error_encode_gerror.apply(this, arguments); }
        },
        "dbusErrorGetRemoteError": {
          "value": function () { return this.dbus_error_get_remote_error.apply(this, arguments); }
        },
        "dbusErrorIsRemoteError": {
          "value": function () { return this.dbus_error_is_remote_error.apply(this, arguments); }
        },
        "dbusErrorNewForDbusError": {
          "value": function () { return this.dbus_error_new_for_dbus_error.apply(this, arguments); }
        },
        "dbusErrorQuark": {
          "value": function () { return this.dbus_error_quark.apply(this, arguments); }
        },
        "dbusErrorRegisterError": {
          "value": function () { return this.dbus_error_register_error.apply(this, arguments); }
        },
        "dbusErrorRegisterErrorDomain": {
          "value": function () { return this.dbus_error_register_error_domain.apply(this, arguments); }
        },
        "dbusErrorStripRemoteError": {
          "value": function () { return this.dbus_error_strip_remote_error.apply(this, arguments); }
        },
        "dbusErrorUnregisterError": {
          "value": function () { return this.dbus_error_unregister_error.apply(this, arguments); }
        },
        "dbusGenerateGuid": {
          "value": function () { return this.dbus_generate_guid.apply(this, arguments); }
        },
        "dbusGvalueToGvariant": {
          "value": function () { return this.dbus_gvalue_to_gvariant.apply(this, arguments); }
        },
        "dbusGvariantToGvalue": {
          "value": function () { return this.dbus_gvariant_to_gvalue.apply(this, arguments); }
        },
        "dbusIsAddress": {
          "value": function () { return this.dbus_is_address.apply(this, arguments); }
        },
        "dbusIsGuid": {
          "value": function () { return this.dbus_is_guid.apply(this, arguments); }
        },
        "dbusIsInterfaceName": {
          "value": function () { return this.dbus_is_interface_name.apply(this, arguments); }
        },
        "dbusIsMemberName": {
          "value": function () { return this.dbus_is_member_name.apply(this, arguments); }
        },
        "dbusIsName": {
          "value": function () { return this.dbus_is_name.apply(this, arguments); }
        },
        "dbusIsSupportedAddress": {
          "value": function () { return this.dbus_is_supported_address.apply(this, arguments); }
        },
        "dbusIsUniqueName": {
          "value": function () { return this.dbus_is_unique_name.apply(this, arguments); }
        },
        "fileNewForCommandlineArg": {
          "value": function () { return this.file_new_for_commandline_arg.apply(this, arguments); }
        },
        "fileNewForCommandlineArgAndCwd": {
          "value": function () { return this.file_new_for_commandline_arg_and_cwd.apply(this, arguments); }
        },
        "fileNewForPath": {
          "value": function () { return this.file_new_for_path.apply(this, arguments); }
        },
        "fileNewForUri": {
          "value": function () { return this.file_new_for_uri.apply(this, arguments); }
        },
        "fileNewTmp": {
          "value": function () { return this.file_new_tmp.apply(this, arguments); }
        },
        "fileParseName": {
          "value": function () { return this.file_parse_name.apply(this, arguments); }
        },
        "iconDeserialize": {
          "value": function () { return this.icon_deserialize.apply(this, arguments); }
        },
        "iconHash": {
          "value": function () { return this.icon_hash.apply(this, arguments); }
        },
        "iconNewForString": {
          "value": function () { return this.icon_new_for_string.apply(this, arguments); }
        },
        "initableNewv": {
          "value": function () { return this.initable_newv.apply(this, arguments); }
        },
        "ioErrorFromErrno": {
          "value": function () { return this.io_error_from_errno.apply(this, arguments); }
        },
        "ioErrorQuark": {
          "value": function () { return this.io_error_quark.apply(this, arguments); }
        },
        "ioExtensionPointImplement": {
          "value": function () { return this.io_extension_point_implement.apply(this, arguments); }
        },
        "ioExtensionPointLookup": {
          "value": function () { return this.io_extension_point_lookup.apply(this, arguments); }
        },
        "ioExtensionPointRegister": {
          "value": function () { return this.io_extension_point_register.apply(this, arguments); }
        },
        "ioModulesLoadAllInDirectory": {
          "value": function () { return this.io_modules_load_all_in_directory.apply(this, arguments); }
        },
        "ioModulesLoadAllInDirectoryWithScope": {
          "value": function () { return this.io_modules_load_all_in_directory_with_scope.apply(this, arguments); }
        },
        "ioModulesScanAllInDirectory": {
          "value": function () { return this.io_modules_scan_all_in_directory.apply(this, arguments); }
        },
        "ioModulesScanAllInDirectoryWithScope": {
          "value": function () { return this.io_modules_scan_all_in_directory_with_scope.apply(this, arguments); }
        },
        "ioSchedulerCancelAllJobs": {
          "value": function () { return this.io_scheduler_cancel_all_jobs.apply(this, arguments); }
        },
        "ioSchedulerPushJob": {
          "value": function () { return this.io_scheduler_push_job.apply(this, arguments); }
        },
        "networkMonitorGetDefault": {
          "value": function () { return this.network_monitor_get_default.apply(this, arguments); }
        },
        "networkingInit": {
          "value": function () { return this.networking_init.apply(this, arguments); }
        },
        "pollableSourceNew": {
          "value": function () { return this.pollable_source_new.apply(this, arguments); }
        },
        "pollableSourceNewFull": {
          "value": function () { return this.pollable_source_new_full.apply(this, arguments); }
        },
        "pollableStreamRead": {
          "value": function () { return this.pollable_stream_read.apply(this, arguments); }
        },
        "pollableStreamWrite": {
          "value": function () { return this.pollable_stream_write.apply(this, arguments); }
        },
        "pollableStreamWriteAll": {
          "value": function () { return this.pollable_stream_write_all.apply(this, arguments); }
        },
        "proxyGetDefaultForProtocol": {
          "value": function () { return this.proxy_get_default_for_protocol.apply(this, arguments); }
        },
        "proxyResolverGetDefault": {
          "value": function () { return this.proxy_resolver_get_default.apply(this, arguments); }
        },
        "resolverErrorQuark": {
          "value": function () { return this.resolver_error_quark.apply(this, arguments); }
        },
        "resourceErrorQuark": {
          "value": function () { return this.resource_error_quark.apply(this, arguments); }
        },
        "resourceLoad": {
          "value": function () { return this.resource_load.apply(this, arguments); }
        },
        "resourcesEnumerateChildren": {
          "value": function () { return this.resources_enumerate_children.apply(this, arguments); }
        },
        "resourcesGetInfo": {
          "value": function () { return this.resources_get_info.apply(this, arguments); }
        },
        "resourcesLookupData": {
          "value": function () { return this.resources_lookup_data.apply(this, arguments); }
        },
        "resourcesOpenStream": {
          "value": function () { return this.resources_open_stream.apply(this, arguments); }
        },
        "resourcesRegister": {
          "value": function () { return this.resources_register.apply(this, arguments); }
        },
        "resourcesUnregister": {
          "value": function () { return this.resources_unregister.apply(this, arguments); }
        },
        "settingsSchemaSourceGetDefault": {
          "value": function () { return this.settings_schema_source_get_default.apply(this, arguments); }
        },
        "simpleAsyncReportErrorInIdle": {
          "value": function () { return this.simple_async_report_error_in_idle.apply(this, arguments); }
        },
        "simpleAsyncReportGerrorInIdle": {
          "value": function () { return this.simple_async_report_gerror_in_idle.apply(this, arguments); }
        },
        "simpleAsyncReportTakeGerrorInIdle": {
          "value": function () { return this.simple_async_report_take_gerror_in_idle.apply(this, arguments); }
        },
        "srvTargetListSort": {
          "value": function () { return this.srv_target_list_sort.apply(this, arguments); }
        },
        "tlsBackendGetDefault": {
          "value": function () { return this.tls_backend_get_default.apply(this, arguments); }
        },
        "tlsClientConnectionNew": {
          "value": function () { return this.tls_client_connection_new.apply(this, arguments); }
        },
        "tlsErrorQuark": {
          "value": function () { return this.tls_error_quark.apply(this, arguments); }
        },
        "tlsFileDatabaseNew": {
          "value": function () { return this.tls_file_database_new.apply(this, arguments); }
        },
        "tlsServerConnectionNew": {
          "value": function () { return this.tls_server_connection_new.apply(this, arguments); }
        },
        "unixIsMountPathSystemInternal": {
          "value": function () { return this.unix_is_mount_path_system_internal.apply(this, arguments); }
        },
        "unixMountAt": {
          "value": function () { return this.unix_mount_at.apply(this, arguments); }
        },
        "unixMountCompare": {
          "value": function () { return this.unix_mount_compare.apply(this, arguments); }
        },
        "unixMountFree": {
          "value": function () { return this.unix_mount_free.apply(this, arguments); }
        },
        "unixMountGetDevicePath": {
          "value": function () { return this.unix_mount_get_device_path.apply(this, arguments); }
        },
        "unixMountGetFsType": {
          "value": function () { return this.unix_mount_get_fs_type.apply(this, arguments); }
        },
        "unixMountGetMountPath": {
          "value": function () { return this.unix_mount_get_mount_path.apply(this, arguments); }
        },
        "unixMountGuessCanEject": {
          "value": function () { return this.unix_mount_guess_can_eject.apply(this, arguments); }
        },
        "unixMountGuessIcon": {
          "value": function () { return this.unix_mount_guess_icon.apply(this, arguments); }
        },
        "unixMountGuessName": {
          "value": function () { return this.unix_mount_guess_name.apply(this, arguments); }
        },
        "unixMountGuessShouldDisplay": {
          "value": function () { return this.unix_mount_guess_should_display.apply(this, arguments); }
        },
        "unixMountGuessSymbolicIcon": {
          "value": function () { return this.unix_mount_guess_symbolic_icon.apply(this, arguments); }
        },
        "unixMountIsReadonly": {
          "value": function () { return this.unix_mount_is_readonly.apply(this, arguments); }
        },
        "unixMountIsSystemInternal": {
          "value": function () { return this.unix_mount_is_system_internal.apply(this, arguments); }
        },
        "unixMountPointsChangedSince": {
          "value": function () { return this.unix_mount_points_changed_since.apply(this, arguments); }
        },
        "unixMountPointsGet": {
          "value": function () { return this.unix_mount_points_get.apply(this, arguments); }
        },
        "unixMountsChangedSince": {
          "value": function () { return this.unix_mounts_changed_since.apply(this, arguments); }
        },
        "unixMountsGet": {
          "value": function () { return this.unix_mounts_get.apply(this, arguments); }
        }
      }
    },
    "Gkbd": {
      "class": {
        "Configuration": {
          "prototype": {
            "appendObject": {
              "value": function () { return this.append_object.apply(this, arguments); }
            },
            "extractLayoutName": {
              "value": function () { return this.extract_layout_name.apply(this, arguments); }
            },
            "freeImages": {
              "value": function () { return this.free_images.apply(this, arguments); }
            },
            "getAllObjects": {
              "value": function () { return this.get_all_objects.apply(this, arguments); }
            },
            "getCapsLockState": {
              "value": function () { return this.get_caps_lock_state.apply(this, arguments); }
            },
            "getCurrentGroup": {
              "value": function () { return this.get_current_group.apply(this, arguments); }
            },
            "getCurrentTooltip": {
              "value": function () { return this.get_current_tooltip.apply(this, arguments); }
            },
            "getGroupName": {
              "value": function () { return this.get_group_name.apply(this, arguments); }
            },
            "getGroupNames": {
              "value": function () { return this.get_group_names.apply(this, arguments); }
            },
            "getImageFilename": {
              "value": function () { return this.get_image_filename.apply(this, arguments); }
            },
            "getIndicatorConfig": {
              "value": function () { return this.get_indicator_config.apply(this, arguments); }
            },
            "getKeyboardConfig": {
              "value": function () { return this.get_keyboard_config.apply(this, arguments); }
            },
            "getNumLockState": {
              "value": function () { return this.get_num_lock_state.apply(this, arguments); }
            },
            "getScrollLockState": {
              "value": function () { return this.get_scroll_lock_state.apply(this, arguments); }
            },
            "getShortGroupNames": {
              "value": function () { return this.get_short_group_names.apply(this, arguments); }
            },
            "getXklEngine": {
              "value": function () { return this.get_xkl_engine.apply(this, arguments); }
            },
            "ifAnyObjectExists": {
              "value": function () { return this.if_any_object_exists.apply(this, arguments); }
            },
            "ifFlagsShown": {
              "value": function () { return this.if_flags_shown.apply(this, arguments); }
            },
            "loadImages": {
              "value": function () { return this.load_images.apply(this, arguments); }
            },
            "lockGroup": {
              "value": function () { return this.lock_group.apply(this, arguments); }
            },
            "lockNextGroup": {
              "value": function () { return this.lock_next_group.apply(this, arguments); }
            },
            "removeObject": {
              "value": function () { return this.remove_object.apply(this, arguments); }
            },
            "startListen": {
              "value": function () { return this.start_listen.apply(this, arguments); }
            },
            "stopListen": {
              "value": function () { return this.stop_listen.apply(this, arguments); }
            }
          },
          "static": {
            "createLabelTitle": {
              "value": function () { return this.create_label_title.apply(this, arguments); }
            }
          }
        },
        "Indicator": {
          "prototype": {
            "reinitUi": {
              "value": function () { return this.reinit_ui.apply(this, arguments); }
            },
            "setAngle": {
              "value": function () { return this.set_angle.apply(this, arguments); }
            },
            "setParentTooltips": {
              "value": function () { return this.set_parent_tooltips.apply(this, arguments); }
            }
          },
          "static": {
            "getGroupNames": {
              "value": function () { return this.get_group_names.apply(this, arguments); }
            },
            "getImageFilename": {
              "value": function () { return this.get_image_filename.apply(this, arguments); }
            },
            "getMaxWidthHeightRatio": {
              "value": function () { return this.get_max_width_height_ratio.apply(this, arguments); }
            },
            "getXklEngine": {
              "value": function () { return this.get_xkl_engine.apply(this, arguments); }
            }
          }
        },
        "KeyboardDrawing": {
          "prototype": {
            "getCompat": {
              "value": function () { return this.get_compat.apply(this, arguments); }
            },
            "getGeometry": {
              "value": function () { return this.get_geometry.apply(this, arguments); }
            },
            "getKeycodes": {
              "value": function () { return this.get_keycodes.apply(this, arguments); }
            },
            "getSymbols": {
              "value": function () { return this.get_symbols.apply(this, arguments); }
            },
            "getTypes": {
              "value": function () { return this.get_types.apply(this, arguments); }
            },
            "setGroupsLevels": {
              "value": function () { return this.set_groups_levels.apply(this, arguments); }
            },
            "setKeyboard": {
              "value": function () { return this.set_keyboard.apply(this, arguments); }
            },
            "setLayout": {
              "value": function () { return this.set_layout.apply(this, arguments); }
            },
            "setTrackConfig": {
              "value": function () { return this.set_track_config.apply(this, arguments); }
            },
            "setTrackModifiers": {
              "value": function () { return this.set_track_modifiers.apply(this, arguments); }
            }
          },
          "static": {
            "dialogSetGroup": {
              "value": function () { return this.dialog_set_group.apply(this, arguments); }
            },
            "dialogSetLayout": {
              "value": function () { return this.dialog_set_layout.apply(this, arguments); }
            }
          }
        },
        "Status": {
          "prototype": {
            "reinitUi": {
              "value": function () { return this.reinit_ui.apply(this, arguments); }
            }
          },
          "static": {
            "getGroupNames": {
              "value": function () { return this.get_group_names.apply(this, arguments); }
            },
            "getImageFilename": {
              "value": function () { return this.get_image_filename.apply(this, arguments); }
            },
            "getXklEngine": {
              "value": function () { return this.get_xkl_engine.apply(this, arguments); }
            }
          }
        }
      },
      "static": {
        "installGlibLogAppender": {
          "value": function () { return this.install_glib_log_appender.apply(this, arguments); }
        },
        "keyboardConfigAddDefaultSwitchOptionIfNecessary": {
          "value": function () { return this.keyboard_config_add_default_switch_option_if_necessary.apply(this, arguments); }
        },
        "keyboardConfigFormatFullDescription": {
          "value": function () { return this.keyboard_config_format_full_description.apply(this, arguments); }
        },
        "keyboardConfigGetDescriptions": {
          "value": function () { return this.keyboard_config_get_descriptions.apply(this, arguments); }
        },
        "keyboardConfigMergeItems": {
          "value": function () { return this.keyboard_config_merge_items.apply(this, arguments); }
        },
        "keyboardConfigSplitItems": {
          "value": function () { return this.keyboard_config_split_items.apply(this, arguments); }
        },
        "previewLoadPosition": {
          "value": function () { return this.preview_load_position.apply(this, arguments); }
        },
        "previewSavePosition": {
          "value": function () { return this.preview_save_position.apply(this, arguments); }
        },
        "strvAppend": {
          "value": function () { return this.strv_append.apply(this, arguments); }
        },
        "strvBehead": {
          "value": function () { return this.strv_behead.apply(this, arguments); }
        },
        "strvRemove": {
          "value": function () { return this.strv_remove.apply(this, arguments); }
        }
      }
    },
    "GnomeBluetooth": {
      "class": {
        "Chooser": {
          "prototype": {
            "dumpSelectedDevice": {
              "value": function () { return this.dump_selected_device.apply(this, arguments); }
            },
            "getScrolledWindow": {
              "value": function () { return this.get_scrolled_window.apply(this, arguments); }
            },
            "getSelectedDevice": {
              "value": function () { return this.get_selected_device.apply(this, arguments); }
            },
            "getSelectedDeviceIcon": {
              "value": function () { return this.get_selected_device_icon.apply(this, arguments); }
            },
            "getSelectedDeviceInfo": {
              "value": function () { return this.get_selected_device_info.apply(this, arguments); }
            },
            "getSelectedDeviceIsConnected": {
              "value": function () { return this.get_selected_device_is_connected.apply(this, arguments); }
            },
            "getSelectedDeviceName": {
              "value": function () { return this.get_selected_device_name.apply(this, arguments); }
            },
            "getSelectedDeviceType": {
              "value": function () { return this.get_selected_device_type.apply(this, arguments); }
            },
            "startDiscovery": {
              "value": function () { return this.start_discovery.apply(this, arguments); }
            },
            "stopDiscovery": {
              "value": function () { return this.stop_discovery.apply(this, arguments); }
            },
            "deviceCategoryFilter": {
              "get": function () { return this.device_category_filter; },
              "set": function (value) { this.device_category_filter = value; }
            },
            "deviceSelected": {
              "get": function () { return this.device_selected; },
              "set": function (value) { this.device_selected = value; }
            },
            "deviceServiceFilter": {
              "get": function () { return this.device_service_filter; },
              "set": function (value) { this.device_service_filter = value; }
            },
            "deviceTypeFilter": {
              "get": function () { return this.device_type_filter; },
              "set": function (value) { this.device_type_filter = value; }
            },
            "hasInternalDeviceFilter": {
              "get": function () { return this.has_internal_device_filter; },
              "set": function (value) { this.has_internal_device_filter = value; }
            },
            "showConnected": {
              "get": function () { return this.show_connected; },
              "set": function (value) { this.show_connected = value; }
            },
            "showDeviceCategory": {
              "get": function () { return this.show_device_category; },
              "set": function (value) { this.show_device_category = value; }
            },
            "showDeviceType": {
              "get": function () { return this.show_device_type; },
              "set": function (value) { this.show_device_type = value; }
            },
            "showDeviceTypeColumn": {
              "get": function () { return this.show_device_type_column; },
              "set": function (value) { this.show_device_type_column = value; }
            },
            "showPairing": {
              "get": function () { return this.show_pairing; },
              "set": function (value) { this.show_pairing = value; }
            },
            "showSearching": {
              "get": function () { return this.show_searching; },
              "set": function (value) { this.show_searching = value; }
            }
          },
          "static": {}
        },
        "ChooserButton": {
          "prototype": {
            "isAvailable": {
              "get": function () { return this.is_available; },
              "set": function (value) { this.is_available = value; }
            }
          },
          "static": {}
        },
        "ChooserCombo": {
          "prototype": {},
          "static": {}
        },
        "Client": {
          "prototype": {
            "connectService": {
              "value": function () { return this.connect_service.apply(this, arguments); }
            },
            "connectServiceFinish": {
              "value": function () { return this.connect_service_finish.apply(this, arguments); }
            },
            "getAdapterModel": {
              "value": function () { return this.get_adapter_model.apply(this, arguments); }
            },
            "getDeviceModel": {
              "value": function () { return this.get_device_model.apply(this, arguments); }
            },
            "getFilterModel": {
              "value": function () { return this.get_filter_model.apply(this, arguments); }
            },
            "getModel": {
              "value": function () { return this.get_model.apply(this, arguments); }
            },
            "defaultAdapter": {
              "get": function () { return this.default_adapter; },
              "set": function (value) { this.default_adapter = value; }
            },
            "defaultAdapterDiscoverable": {
              "get": function () { return this.default_adapter_discoverable; },
              "set": function (value) { this.default_adapter_discoverable = value; }
            },
            "defaultAdapterDiscovering": {
              "get": function () { return this.default_adapter_discovering; },
              "set": function (value) { this.default_adapter_discovering = value; }
            },
            "defaultAdapterName": {
              "get": function () { return this.default_adapter_name; },
              "set": function (value) { this.default_adapter_name = value; }
            },
            "defaultAdapterPowered": {
              "get": function () { return this.default_adapter_powered; },
              "set": function (value) { this.default_adapter_powered = value; }
            }
          },
          "static": {}
        },
        "FilterWidget": {
          "prototype": {
            "bindFilter": {
              "value": function () { return this.bind_filter.apply(this, arguments); }
            },
            "setTitle": {
              "value": function () { return this.set_title.apply(this, arguments); }
            },
            "deviceCategoryFilter": {
              "get": function () { return this.device_category_filter; },
              "set": function (value) { this.device_category_filter = value; }
            },
            "deviceServiceFilter": {
              "get": function () { return this.device_service_filter; },
              "set": function (value) { this.device_service_filter = value; }
            },
            "deviceTypeFilter": {
              "get": function () { return this.device_type_filter; },
              "set": function (value) { this.device_type_filter = value; }
            },
            "showDeviceCategory": {
              "get": function () { return this.show_device_category; },
              "set": function (value) { this.show_device_category = value; }
            },
            "showDeviceType": {
              "get": function () { return this.show_device_type; },
              "set": function (value) { this.show_device_type = value; }
            }
          },
          "static": {}
        },
        "SettingsWidget": {
          "prototype": {
            "getDefaultAdapterPowered": {
              "value": function () { return this.get_default_adapter_powered.apply(this, arguments); }
            }
          },
          "static": {}
        }
      },
      "static": {
        "classToType": {
          "value": function () { return this.class_to_type.apply(this, arguments); }
        },
        "sendToAddress": {
          "value": function () { return this.send_to_address.apply(this, arguments); }
        },
        "typeToString": {
          "value": function () { return this.type_to_string.apply(this, arguments); }
        },
        "uuidToString": {
          "value": function () { return this.uuid_to_string.apply(this, arguments); }
        },
        "verifyAddress": {
          "value": function () { return this.verify_address.apply(this, arguments); }
        }
      }
    },
    "GnomeDesktop": {
      "class": {
        "BG": {
          "prototype": {
            "changesWithTime": {
              "value": function () { return this.changes_with_time.apply(this, arguments); }
            },
            "createFrameThumbnail": {
              "value": function () { return this.create_frame_thumbnail.apply(this, arguments); }
            },
            "createSurface": {
              "value": function () { return this.create_surface.apply(this, arguments); }
            },
            "createThumbnail": {
              "value": function () { return this.create_thumbnail.apply(this, arguments); }
            },
            "getColor": {
              "value": function () { return this.get_color.apply(this, arguments); }
            },
            "getFilename": {
              "value": function () { return this.get_filename.apply(this, arguments); }
            },
            "getImageSize": {
              "value": function () { return this.get_image_size.apply(this, arguments); }
            },
            "getPlacement": {
              "value": function () { return this.get_placement.apply(this, arguments); }
            },
            "hasMultipleSizes": {
              "value": function () { return this.has_multiple_sizes.apply(this, arguments); }
            },
            "isDark": {
              "value": function () { return this.is_dark.apply(this, arguments); }
            },
            "loadFromPreferences": {
              "value": function () { return this.load_from_preferences.apply(this, arguments); }
            },
            "saveToPreferences": {
              "value": function () { return this.save_to_preferences.apply(this, arguments); }
            },
            "setColor": {
              "value": function () { return this.set_color.apply(this, arguments); }
            },
            "setFilename": {
              "value": function () { return this.set_filename.apply(this, arguments); }
            },
            "setPlacement": {
              "value": function () { return this.set_placement.apply(this, arguments); }
            }
          },
          "static": {
            "getSurfaceFromRoot": {
              "value": function () { return this.get_surface_from_root.apply(this, arguments); }
            },
            "setSurfaceAsRoot": {
              "value": function () { return this.set_surface_as_root.apply(this, arguments); }
            },
            "setSurfaceAsRootWithCrossfade": {
              "value": function () { return this.set_surface_as_root_with_crossfade.apply(this, arguments); }
            }
          }
        },
        "BGCrossfade": {
          "prototype": {
            "isStarted": {
              "value": function () { return this.is_started.apply(this, arguments); }
            },
            "setEndSurface": {
              "value": function () { return this.set_end_surface.apply(this, arguments); }
            },
            "setStartSurface": {
              "value": function () { return this.set_start_surface.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "BGSlideShow": {
          "prototype": {
            "getCurrentSlide": {
              "value": function () { return this.get_current_slide.apply(this, arguments); }
            },
            "getHasMultipleSizes": {
              "value": function () { return this.get_has_multiple_sizes.apply(this, arguments); }
            },
            "getNumSlides": {
              "value": function () { return this.get_num_slides.apply(this, arguments); }
            },
            "getSlide": {
              "value": function () { return this.get_slide.apply(this, arguments); }
            },
            "getStartTime": {
              "value": function () { return this.get_start_time.apply(this, arguments); }
            },
            "getTotalDuration": {
              "value": function () { return this.get_total_duration.apply(this, arguments); }
            },
            "loadAsync": {
              "value": function () { return this.load_async.apply(this, arguments); }
            },
            "hasMultipleSizes": {
              "get": function () { return this.has_multiple_sizes; },
              "set": function (value) { this.has_multiple_sizes = value; }
            },
            "startTime": {
              "get": function () { return this.start_time; },
              "set": function (value) { this.start_time = value; }
            },
            "totalDuration": {
              "get": function () { return this.total_duration; },
              "set": function (value) { this.total_duration = value; }
            }
          },
          "static": {}
        },
        "DesktopThumbnailFactory": {
          "prototype": {
            "canThumbnail": {
              "value": function () { return this.can_thumbnail.apply(this, arguments); }
            },
            "createFailedThumbnail": {
              "value": function () { return this.create_failed_thumbnail.apply(this, arguments); }
            },
            "generateThumbnail": {
              "value": function () { return this.generate_thumbnail.apply(this, arguments); }
            },
            "hasValidFailedThumbnail": {
              "value": function () { return this.has_valid_failed_thumbnail.apply(this, arguments); }
            },
            "saveThumbnail": {
              "value": function () { return this.save_thumbnail.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "IdleMonitor": {
          "prototype": {
            "addIdleWatch": {
              "value": function () { return this.add_idle_watch.apply(this, arguments); }
            },
            "addUserActiveWatch": {
              "value": function () { return this.add_user_active_watch.apply(this, arguments); }
            },
            "getIdletime": {
              "value": function () { return this.get_idletime.apply(this, arguments); }
            },
            "removeWatch": {
              "value": function () { return this.remove_watch.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "PnpIds": {
          "prototype": {
            "getPnpId": {
              "value": function () { return this.get_pnp_id.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "RRConfig": {
          "prototype": {
            "applyPersistent": {
              "value": function () { return this.apply_persistent.apply(this, arguments); }
            },
            "ensurePrimary": {
              "value": function () { return this.ensure_primary.apply(this, arguments); }
            },
            "getClone": {
              "value": function () { return this.get_clone.apply(this, arguments); }
            },
            "getOutputs": {
              "value": function () { return this.get_outputs.apply(this, arguments); }
            },
            "loadCurrent": {
              "value": function () { return this.load_current.apply(this, arguments); }
            },
            "setClone": {
              "value": function () { return this.set_clone.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "RROutputInfo": {
          "prototype": {
            "getAspectRatio": {
              "value": function () { return this.get_aspect_ratio.apply(this, arguments); }
            },
            "getDisplayName": {
              "value": function () { return this.get_display_name.apply(this, arguments); }
            },
            "getGeometry": {
              "value": function () { return this.get_geometry.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getPreferredHeight": {
              "value": function () { return this.get_preferred_height.apply(this, arguments); }
            },
            "getPreferredWidth": {
              "value": function () { return this.get_preferred_width.apply(this, arguments); }
            },
            "getPrimary": {
              "value": function () { return this.get_primary.apply(this, arguments); }
            },
            "getProduct": {
              "value": function () { return this.get_product.apply(this, arguments); }
            },
            "getRefreshRate": {
              "value": function () { return this.get_refresh_rate.apply(this, arguments); }
            },
            "getRotation": {
              "value": function () { return this.get_rotation.apply(this, arguments); }
            },
            "getSerial": {
              "value": function () { return this.get_serial.apply(this, arguments); }
            },
            "getUnderscanning": {
              "value": function () { return this.get_underscanning.apply(this, arguments); }
            },
            "getVendor": {
              "value": function () { return this.get_vendor.apply(this, arguments); }
            },
            "isActive": {
              "value": function () { return this.is_active.apply(this, arguments); }
            },
            "isConnected": {
              "value": function () { return this.is_connected.apply(this, arguments); }
            },
            "isPrimaryTile": {
              "value": function () { return this.is_primary_tile.apply(this, arguments); }
            },
            "setActive": {
              "value": function () { return this.set_active.apply(this, arguments); }
            },
            "setGeometry": {
              "value": function () { return this.set_geometry.apply(this, arguments); }
            },
            "setPrimary": {
              "value": function () { return this.set_primary.apply(this, arguments); }
            },
            "setRefreshRate": {
              "value": function () { return this.set_refresh_rate.apply(this, arguments); }
            },
            "setRotation": {
              "value": function () { return this.set_rotation.apply(this, arguments); }
            },
            "setUnderscanning": {
              "value": function () { return this.set_underscanning.apply(this, arguments); }
            },
            "supportsRotation": {
              "value": function () { return this.supports_rotation.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "RRScreen": {
          "prototype": {
            "getCrtcById": {
              "value": function () { return this.get_crtc_by_id.apply(this, arguments); }
            },
            "getDpmsMode": {
              "value": function () { return this.get_dpms_mode.apply(this, arguments); }
            },
            "getOutputById": {
              "value": function () { return this.get_output_by_id.apply(this, arguments); }
            },
            "getOutputByName": {
              "value": function () { return this.get_output_by_name.apply(this, arguments); }
            },
            "getRanges": {
              "value": function () { return this.get_ranges.apply(this, arguments); }
            },
            "listCloneModes": {
              "value": function () { return this.list_clone_modes.apply(this, arguments); }
            },
            "listCrtcs": {
              "value": function () { return this.list_crtcs.apply(this, arguments); }
            },
            "listModes": {
              "value": function () { return this.list_modes.apply(this, arguments); }
            },
            "listOutputs": {
              "value": function () { return this.list_outputs.apply(this, arguments); }
            },
            "setDpmsMode": {
              "value": function () { return this.set_dpms_mode.apply(this, arguments); }
            },
            "dpmsMode": {
              "get": function () { return this.dpms_mode; },
              "set": function (value) { this.dpms_mode = value; }
            },
            "gdkScreen": {
              "get": function () { return this.gdk_screen; },
              "set": function (value) { this.gdk_screen = value; }
            }
          },
          "static": {
            "newAsync": {
              "value": function () { return this.new_async.apply(this, arguments); }
            }
          }
        },
        "WallClock": {
          "prototype": {
            "getClock": {
              "value": function () { return this.get_clock.apply(this, arguments); }
            },
            "getTimezone": {
              "value": function () { return this.get_timezone.apply(this, arguments); }
            },
            "stringForDatetime": {
              "value": function () { return this.string_for_datetime.apply(this, arguments); }
            },
            "timeOnly": {
              "get": function () { return this.time_only; },
              "set": function (value) { this.time_only = value; }
            }
          },
          "static": {}
        },
        "XkbInfo": {
          "prototype": {
            "descriptionForGroup": {
              "value": function () { return this.description_for_group.apply(this, arguments); }
            },
            "descriptionForOption": {
              "value": function () { return this.description_for_option.apply(this, arguments); }
            },
            "getAllLayouts": {
              "value": function () { return this.get_all_layouts.apply(this, arguments); }
            },
            "getAllOptionGroups": {
              "value": function () { return this.get_all_option_groups.apply(this, arguments); }
            },
            "getLanguagesForLayout": {
              "value": function () { return this.get_languages_for_layout.apply(this, arguments); }
            },
            "getLayoutInfo": {
              "value": function () { return this.get_layout_info.apply(this, arguments); }
            },
            "getLayoutsForCountry": {
              "value": function () { return this.get_layouts_for_country.apply(this, arguments); }
            },
            "getLayoutsForLanguage": {
              "value": function () { return this.get_layouts_for_language.apply(this, arguments); }
            },
            "getOptionsForGroup": {
              "value": function () { return this.get_options_for_group.apply(this, arguments); }
            }
          },
          "static": {}
        }
      },
      "static": {
        "desktopThumbnailHasUri": {
          "value": function () { return this.desktop_thumbnail_has_uri.apply(this, arguments); }
        },
        "desktopThumbnailIsValid": {
          "value": function () { return this.desktop_thumbnail_is_valid.apply(this, arguments); }
        },
        "desktopThumbnailMd5": {
          "value": function () { return this.desktop_thumbnail_md5.apply(this, arguments); }
        },
        "desktopThumbnailPathForUri": {
          "value": function () { return this.desktop_thumbnail_path_for_uri.apply(this, arguments); }
        },
        "desktopThumbnailScaleDownPixbuf": {
          "value": function () { return this.desktop_thumbnail_scale_down_pixbuf.apply(this, arguments); }
        },
        "getAllLocales": {
          "value": function () { return this.get_all_locales.apply(this, arguments); }
        },
        "getCountryFromCode": {
          "value": function () { return this.get_country_from_code.apply(this, arguments); }
        },
        "getCountryFromLocale": {
          "value": function () { return this.get_country_from_locale.apply(this, arguments); }
        },
        "getInputSourceFromLocale": {
          "value": function () { return this.get_input_source_from_locale.apply(this, arguments); }
        },
        "getLanguageFromCode": {
          "value": function () { return this.get_language_from_code.apply(this, arguments); }
        },
        "getLanguageFromLocale": {
          "value": function () { return this.get_language_from_locale.apply(this, arguments); }
        },
        "languageHasTranslations": {
          "value": function () { return this.language_has_translations.apply(this, arguments); }
        },
        "normalizeLocale": {
          "value": function () { return this.normalize_locale.apply(this, arguments); }
        },
        "parseLocale": {
          "value": function () { return this.parse_locale.apply(this, arguments); }
        },
        "rrErrorQuark": {
          "value": function () { return this.rr_error_quark.apply(this, arguments); }
        }
      }
    },
    "GnomeKeyring": {
      "class": {},
      "static": {
        "aclCopy": {
          "value": function () { return this.acl_copy.apply(this, arguments); }
        },
        "aclFree": {
          "value": function () { return this.acl_free.apply(this, arguments); }
        },
        "attributeListAppendString": {
          "value": function () { return this.attribute_list_append_string.apply(this, arguments); }
        },
        "attributeListAppendUint32": {
          "value": function () { return this.attribute_list_append_uint32.apply(this, arguments); }
        },
        "attributeListCopy": {
          "value": function () { return this.attribute_list_copy.apply(this, arguments); }
        },
        "attributeListFree": {
          "value": function () { return this.attribute_list_free.apply(this, arguments); }
        },
        "attributeListGetType": {
          "value": function () { return this.attribute_list_get_type.apply(this, arguments); }
        },
        "attributeListNew": {
          "value": function () { return this.attribute_list_new.apply(this, arguments); }
        },
        "attributeListToGlist": {
          "value": function () { return this.attribute_list_to_glist.apply(this, arguments); }
        },
        "cancelRequest": {
          "value": function () { return this.cancel_request.apply(this, arguments); }
        },
        "changePassword": {
          "value": function () { return this.change_password.apply(this, arguments); }
        },
        "changePasswordSync": {
          "value": function () { return this.change_password_sync.apply(this, arguments); }
        },
        "createSync": {
          "value": function () { return this.create_sync.apply(this, arguments); }
        },
        "daemonPrepareEnvironmentSync": {
          "value": function () { return this.daemon_prepare_environment_sync.apply(this, arguments); }
        },
        "daemonSetDisplaySync": {
          "value": function () { return this.daemon_set_display_sync.apply(this, arguments); }
        },
        "deletePassword": {
          "value": function () { return this.delete_password.apply(this, arguments); }
        },
        "deletePasswordSync": {
          "value": function () { return this.delete_password_sync.apply(this, arguments); }
        },
        "deleteSync": {
          "value": function () { return this.delete_sync.apply(this, arguments); }
        },
        "findItems": {
          "value": function () { return this.find_items.apply(this, arguments); }
        },
        "findItemsSync": {
          "value": function () { return this.find_items_sync.apply(this, arguments); }
        },
        "findItemsv": {
          "value": function () { return this.find_itemsv.apply(this, arguments); }
        },
        "findItemsvSync": {
          "value": function () { return this.find_itemsv_sync.apply(this, arguments); }
        },
        "findNetworkPassword": {
          "value": function () { return this.find_network_password.apply(this, arguments); }
        },
        "findNetworkPasswordSync": {
          "value": function () { return this.find_network_password_sync.apply(this, arguments); }
        },
        "findPassword": {
          "value": function () { return this.find_password.apply(this, arguments); }
        },
        "findPasswordSync": {
          "value": function () { return this.find_password_sync.apply(this, arguments); }
        },
        "foundListFree": {
          "value": function () { return this.found_list_free.apply(this, arguments); }
        },
        "freePassword": {
          "value": function () { return this.free_password.apply(this, arguments); }
        },
        "getDefaultKeyring": {
          "value": function () { return this.get_default_keyring.apply(this, arguments); }
        },
        "getDefaultKeyringSync": {
          "value": function () { return this.get_default_keyring_sync.apply(this, arguments); }
        },
        "getInfo": {
          "value": function () { return this.get_info.apply(this, arguments); }
        },
        "getInfoSync": {
          "value": function () { return this.get_info_sync.apply(this, arguments); }
        },
        "isAvailable": {
          "value": function () { return this.is_available.apply(this, arguments); }
        },
        "itemAcGetAccessType": {
          "value": function () { return this.item_ac_get_access_type.apply(this, arguments); }
        },
        "itemAcGetDisplayName": {
          "value": function () { return this.item_ac_get_display_name.apply(this, arguments); }
        },
        "itemAcGetPathName": {
          "value": function () { return this.item_ac_get_path_name.apply(this, arguments); }
        },
        "itemAcSetAccessType": {
          "value": function () { return this.item_ac_set_access_type.apply(this, arguments); }
        },
        "itemAcSetDisplayName": {
          "value": function () { return this.item_ac_set_display_name.apply(this, arguments); }
        },
        "itemAcSetPathName": {
          "value": function () { return this.item_ac_set_path_name.apply(this, arguments); }
        },
        "itemCreate": {
          "value": function () { return this.item_create.apply(this, arguments); }
        },
        "itemCreateSync": {
          "value": function () { return this.item_create_sync.apply(this, arguments); }
        },
        "itemDelete": {
          "value": function () { return this.item_delete.apply(this, arguments); }
        },
        "itemDeleteSync": {
          "value": function () { return this.item_delete_sync.apply(this, arguments); }
        },
        "itemGetAcl": {
          "value": function () { return this.item_get_acl.apply(this, arguments); }
        },
        "itemGetAclSync": {
          "value": function () { return this.item_get_acl_sync.apply(this, arguments); }
        },
        "itemGetAttributes": {
          "value": function () { return this.item_get_attributes.apply(this, arguments); }
        },
        "itemGetAttributesSync": {
          "value": function () { return this.item_get_attributes_sync.apply(this, arguments); }
        },
        "itemGetInfo": {
          "value": function () { return this.item_get_info.apply(this, arguments); }
        },
        "itemGetInfoFull": {
          "value": function () { return this.item_get_info_full.apply(this, arguments); }
        },
        "itemGetInfoFullSync": {
          "value": function () { return this.item_get_info_full_sync.apply(this, arguments); }
        },
        "itemGetInfoSync": {
          "value": function () { return this.item_get_info_sync.apply(this, arguments); }
        },
        "itemGrantAccessRights": {
          "value": function () { return this.item_grant_access_rights.apply(this, arguments); }
        },
        "itemGrantAccessRightsSync": {
          "value": function () { return this.item_grant_access_rights_sync.apply(this, arguments); }
        },
        "itemSetAcl": {
          "value": function () { return this.item_set_acl.apply(this, arguments); }
        },
        "itemSetAclSync": {
          "value": function () { return this.item_set_acl_sync.apply(this, arguments); }
        },
        "itemSetAttributes": {
          "value": function () { return this.item_set_attributes.apply(this, arguments); }
        },
        "itemSetAttributesSync": {
          "value": function () { return this.item_set_attributes_sync.apply(this, arguments); }
        },
        "itemSetInfo": {
          "value": function () { return this.item_set_info.apply(this, arguments); }
        },
        "itemSetInfoSync": {
          "value": function () { return this.item_set_info_sync.apply(this, arguments); }
        },
        "listItemIds": {
          "value": function () { return this.list_item_ids.apply(this, arguments); }
        },
        "listItemIdsSync": {
          "value": function () { return this.list_item_ids_sync.apply(this, arguments); }
        },
        "listKeyringNames": {
          "value": function () { return this.list_keyring_names.apply(this, arguments); }
        },
        "listKeyringNamesSync": {
          "value": function () { return this.list_keyring_names_sync.apply(this, arguments); }
        },
        "lockAll": {
          "value": function () { return this.lock_all.apply(this, arguments); }
        },
        "lockAllSync": {
          "value": function () { return this.lock_all_sync.apply(this, arguments); }
        },
        "lockSync": {
          "value": function () { return this.lock_sync.apply(this, arguments); }
        },
        "memoryAlloc": {
          "value": function () { return this.memory_alloc.apply(this, arguments); }
        },
        "memoryFree": {
          "value": function () { return this.memory_free.apply(this, arguments); }
        },
        "memoryIsSecure": {
          "value": function () { return this.memory_is_secure.apply(this, arguments); }
        },
        "memoryRealloc": {
          "value": function () { return this.memory_realloc.apply(this, arguments); }
        },
        "memoryStrdup": {
          "value": function () { return this.memory_strdup.apply(this, arguments); }
        },
        "memoryTryAlloc": {
          "value": function () { return this.memory_try_alloc.apply(this, arguments); }
        },
        "memoryTryRealloc": {
          "value": function () { return this.memory_try_realloc.apply(this, arguments); }
        },
        "networkPasswordFree": {
          "value": function () { return this.network_password_free.apply(this, arguments); }
        },
        "networkPasswordListFree": {
          "value": function () { return this.network_password_list_free.apply(this, arguments); }
        },
        "resultToMessage": {
          "value": function () { return this.result_to_message.apply(this, arguments); }
        },
        "setDefaultKeyring": {
          "value": function () { return this.set_default_keyring.apply(this, arguments); }
        },
        "setDefaultKeyringSync": {
          "value": function () { return this.set_default_keyring_sync.apply(this, arguments); }
        },
        "setInfo": {
          "value": function () { return this.set_info.apply(this, arguments); }
        },
        "setInfoSync": {
          "value": function () { return this.set_info_sync.apply(this, arguments); }
        },
        "setNetworkPassword": {
          "value": function () { return this.set_network_password.apply(this, arguments); }
        },
        "setNetworkPasswordSync": {
          "value": function () { return this.set_network_password_sync.apply(this, arguments); }
        },
        "storePassword": {
          "value": function () { return this.store_password.apply(this, arguments); }
        },
        "storePasswordSync": {
          "value": function () { return this.store_password_sync.apply(this, arguments); }
        },
        "stringListFree": {
          "value": function () { return this.string_list_free.apply(this, arguments); }
        },
        "unlockSync": {
          "value": function () { return this.unlock_sync.apply(this, arguments); }
        }
      }
    },
    "Goa": {
      "class": {
        "AccountProxy": {
          "prototype": {},
          "static": {
            "newForBus": {
              "value": function () { return this.new_for_bus.apply(this, arguments); }
            }
          }
        },
        "AccountSkeleton": {
          "prototype": {},
          "static": {}
        },
        "CalendarProxy": {
          "prototype": {},
          "static": {
            "newForBus": {
              "value": function () { return this.new_for_bus.apply(this, arguments); }
            }
          }
        },
        "CalendarSkeleton": {
          "prototype": {},
          "static": {}
        },
        "ChatProxy": {
          "prototype": {},
          "static": {
            "newForBus": {
              "value": function () { return this.new_for_bus.apply(this, arguments); }
            }
          }
        },
        "ChatSkeleton": {
          "prototype": {},
          "static": {}
        },
        "Client": {
          "prototype": {
            "getAccounts": {
              "value": function () { return this.get_accounts.apply(this, arguments); }
            },
            "getManager": {
              "value": function () { return this.get_manager.apply(this, arguments); }
            },
            "getObjectManager": {
              "value": function () { return this.get_object_manager.apply(this, arguments); }
            },
            "lookupById": {
              "value": function () { return this.lookup_by_id.apply(this, arguments); }
            },
            "objectManager": {
              "get": function () { return this.object_manager; },
              "set": function (value) { this.object_manager = value; }
            }
          },
          "static": {}
        },
        "ContactsProxy": {
          "prototype": {},
          "static": {
            "newForBus": {
              "value": function () { return this.new_for_bus.apply(this, arguments); }
            }
          }
        },
        "ContactsSkeleton": {
          "prototype": {},
          "static": {}
        },
        "DocumentsProxy": {
          "prototype": {},
          "static": {
            "newForBus": {
              "value": function () { return this.new_for_bus.apply(this, arguments); }
            }
          }
        },
        "DocumentsSkeleton": {
          "prototype": {},
          "static": {}
        },
        "ExchangeProxy": {
          "prototype": {},
          "static": {
            "newForBus": {
              "value": function () { return this.new_for_bus.apply(this, arguments); }
            }
          }
        },
        "ExchangeSkeleton": {
          "prototype": {},
          "static": {}
        },
        "FilesProxy": {
          "prototype": {},
          "static": {
            "newForBus": {
              "value": function () { return this.new_for_bus.apply(this, arguments); }
            }
          }
        },
        "FilesSkeleton": {
          "prototype": {},
          "static": {}
        },
        "MailProxy": {
          "prototype": {},
          "static": {
            "newForBus": {
              "value": function () { return this.new_for_bus.apply(this, arguments); }
            }
          }
        },
        "MailSkeleton": {
          "prototype": {},
          "static": {}
        },
        "ManagerProxy": {
          "prototype": {},
          "static": {
            "newForBus": {
              "value": function () { return this.new_for_bus.apply(this, arguments); }
            }
          }
        },
        "ManagerSkeleton": {
          "prototype": {},
          "static": {}
        },
        "MapsProxy": {
          "prototype": {},
          "static": {
            "newForBus": {
              "value": function () { return this.new_for_bus.apply(this, arguments); }
            }
          }
        },
        "MapsSkeleton": {
          "prototype": {},
          "static": {}
        },
        "MediaServerProxy": {
          "prototype": {},
          "static": {
            "newForBus": {
              "value": function () { return this.new_for_bus.apply(this, arguments); }
            }
          }
        },
        "MediaServerSkeleton": {
          "prototype": {},
          "static": {}
        },
        "MusicProxy": {
          "prototype": {},
          "static": {
            "newForBus": {
              "value": function () { return this.new_for_bus.apply(this, arguments); }
            }
          }
        },
        "MusicSkeleton": {
          "prototype": {},
          "static": {}
        },
        "OAuth2BasedProxy": {
          "prototype": {},
          "static": {
            "newForBus": {
              "value": function () { return this.new_for_bus.apply(this, arguments); }
            }
          }
        },
        "OAuth2BasedSkeleton": {
          "prototype": {},
          "static": {}
        },
        "OAuthBasedProxy": {
          "prototype": {},
          "static": {
            "newForBus": {
              "value": function () { return this.new_for_bus.apply(this, arguments); }
            }
          }
        },
        "OAuthBasedSkeleton": {
          "prototype": {},
          "static": {}
        },
        "ObjectManagerClient": {
          "prototype": {},
          "static": {
            "getProxyType": {
              "value": function () { return this.get_proxy_type.apply(this, arguments); }
            },
            "newForBus": {
              "value": function () { return this.new_for_bus.apply(this, arguments); }
            }
          }
        },
        "ObjectProxy": {
          "prototype": {},
          "static": {}
        },
        "ObjectSkeleton": {
          "prototype": {
            "setAccount": {
              "value": function () { return this.set_account.apply(this, arguments); }
            },
            "setCalendar": {
              "value": function () { return this.set_calendar.apply(this, arguments); }
            },
            "setChat": {
              "value": function () { return this.set_chat.apply(this, arguments); }
            },
            "setContacts": {
              "value": function () { return this.set_contacts.apply(this, arguments); }
            },
            "setDocuments": {
              "value": function () { return this.set_documents.apply(this, arguments); }
            },
            "setExchange": {
              "value": function () { return this.set_exchange.apply(this, arguments); }
            },
            "setFiles": {
              "value": function () { return this.set_files.apply(this, arguments); }
            },
            "setMail": {
              "value": function () { return this.set_mail.apply(this, arguments); }
            },
            "setManager": {
              "value": function () { return this.set_manager.apply(this, arguments); }
            },
            "setMaps": {
              "value": function () { return this.set_maps.apply(this, arguments); }
            },
            "setMediaServer": {
              "value": function () { return this.set_media_server.apply(this, arguments); }
            },
            "setMusic": {
              "value": function () { return this.set_music.apply(this, arguments); }
            },
            "setOauth2Based": {
              "value": function () { return this.set_oauth2_based.apply(this, arguments); }
            },
            "setOauthBased": {
              "value": function () { return this.set_oauth_based.apply(this, arguments); }
            },
            "setPasswordBased": {
              "value": function () { return this.set_password_based.apply(this, arguments); }
            },
            "setPhotos": {
              "value": function () { return this.set_photos.apply(this, arguments); }
            },
            "setPrinters": {
              "value": function () { return this.set_printers.apply(this, arguments); }
            },
            "setReadLater": {
              "value": function () { return this.set_read_later.apply(this, arguments); }
            },
            "setTicketing": {
              "value": function () { return this.set_ticketing.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "PasswordBasedProxy": {
          "prototype": {},
          "static": {
            "newForBus": {
              "value": function () { return this.new_for_bus.apply(this, arguments); }
            }
          }
        },
        "PasswordBasedSkeleton": {
          "prototype": {},
          "static": {}
        },
        "PhotosProxy": {
          "prototype": {},
          "static": {
            "newForBus": {
              "value": function () { return this.new_for_bus.apply(this, arguments); }
            }
          }
        },
        "PhotosSkeleton": {
          "prototype": {},
          "static": {}
        },
        "PrintersProxy": {
          "prototype": {},
          "static": {
            "newForBus": {
              "value": function () { return this.new_for_bus.apply(this, arguments); }
            }
          }
        },
        "PrintersSkeleton": {
          "prototype": {},
          "static": {}
        },
        "ReadLaterProxy": {
          "prototype": {},
          "static": {
            "newForBus": {
              "value": function () { return this.new_for_bus.apply(this, arguments); }
            }
          }
        },
        "ReadLaterSkeleton": {
          "prototype": {},
          "static": {}
        },
        "TicketingProxy": {
          "prototype": {},
          "static": {
            "newForBus": {
              "value": function () { return this.new_for_bus.apply(this, arguments); }
            }
          }
        },
        "TicketingSkeleton": {
          "prototype": {},
          "static": {}
        }
      },
      "static": {
        "accountInterfaceInfo": {
          "value": function () { return this.account_interface_info.apply(this, arguments); }
        },
        "accountOverrideProperties": {
          "value": function () { return this.account_override_properties.apply(this, arguments); }
        },
        "calendarInterfaceInfo": {
          "value": function () { return this.calendar_interface_info.apply(this, arguments); }
        },
        "calendarOverrideProperties": {
          "value": function () { return this.calendar_override_properties.apply(this, arguments); }
        },
        "chatInterfaceInfo": {
          "value": function () { return this.chat_interface_info.apply(this, arguments); }
        },
        "chatOverrideProperties": {
          "value": function () { return this.chat_override_properties.apply(this, arguments); }
        },
        "checkVersion": {
          "value": function () { return this.check_version.apply(this, arguments); }
        },
        "contactsInterfaceInfo": {
          "value": function () { return this.contacts_interface_info.apply(this, arguments); }
        },
        "contactsOverrideProperties": {
          "value": function () { return this.contacts_override_properties.apply(this, arguments); }
        },
        "documentsInterfaceInfo": {
          "value": function () { return this.documents_interface_info.apply(this, arguments); }
        },
        "documentsOverrideProperties": {
          "value": function () { return this.documents_override_properties.apply(this, arguments); }
        },
        "errorQuark": {
          "value": function () { return this.error_quark.apply(this, arguments); }
        },
        "exchangeInterfaceInfo": {
          "value": function () { return this.exchange_interface_info.apply(this, arguments); }
        },
        "exchangeOverrideProperties": {
          "value": function () { return this.exchange_override_properties.apply(this, arguments); }
        },
        "filesInterfaceInfo": {
          "value": function () { return this.files_interface_info.apply(this, arguments); }
        },
        "filesOverrideProperties": {
          "value": function () { return this.files_override_properties.apply(this, arguments); }
        },
        "mailInterfaceInfo": {
          "value": function () { return this.mail_interface_info.apply(this, arguments); }
        },
        "mailOverrideProperties": {
          "value": function () { return this.mail_override_properties.apply(this, arguments); }
        },
        "managerInterfaceInfo": {
          "value": function () { return this.manager_interface_info.apply(this, arguments); }
        },
        "managerOverrideProperties": {
          "value": function () { return this.manager_override_properties.apply(this, arguments); }
        },
        "mapsInterfaceInfo": {
          "value": function () { return this.maps_interface_info.apply(this, arguments); }
        },
        "mapsOverrideProperties": {
          "value": function () { return this.maps_override_properties.apply(this, arguments); }
        },
        "mediaServerInterfaceInfo": {
          "value": function () { return this.media_server_interface_info.apply(this, arguments); }
        },
        "mediaServerOverrideProperties": {
          "value": function () { return this.media_server_override_properties.apply(this, arguments); }
        },
        "musicInterfaceInfo": {
          "value": function () { return this.music_interface_info.apply(this, arguments); }
        },
        "musicOverrideProperties": {
          "value": function () { return this.music_override_properties.apply(this, arguments); }
        },
        "oauth2BasedInterfaceInfo": {
          "value": function () { return this.oauth2_based_interface_info.apply(this, arguments); }
        },
        "oauth2BasedOverrideProperties": {
          "value": function () { return this.oauth2_based_override_properties.apply(this, arguments); }
        },
        "oauthBasedInterfaceInfo": {
          "value": function () { return this.oauth_based_interface_info.apply(this, arguments); }
        },
        "oauthBasedOverrideProperties": {
          "value": function () { return this.oauth_based_override_properties.apply(this, arguments); }
        },
        "passwordBasedInterfaceInfo": {
          "value": function () { return this.password_based_interface_info.apply(this, arguments); }
        },
        "passwordBasedOverrideProperties": {
          "value": function () { return this.password_based_override_properties.apply(this, arguments); }
        },
        "photosInterfaceInfo": {
          "value": function () { return this.photos_interface_info.apply(this, arguments); }
        },
        "photosOverrideProperties": {
          "value": function () { return this.photos_override_properties.apply(this, arguments); }
        },
        "printersInterfaceInfo": {
          "value": function () { return this.printers_interface_info.apply(this, arguments); }
        },
        "printersOverrideProperties": {
          "value": function () { return this.printers_override_properties.apply(this, arguments); }
        },
        "readLaterInterfaceInfo": {
          "value": function () { return this.read_later_interface_info.apply(this, arguments); }
        },
        "readLaterOverrideProperties": {
          "value": function () { return this.read_later_override_properties.apply(this, arguments); }
        },
        "ticketingInterfaceInfo": {
          "value": function () { return this.ticketing_interface_info.apply(this, arguments); }
        },
        "ticketingOverrideProperties": {
          "value": function () { return this.ticketing_override_properties.apply(this, arguments); }
        }
      }
    },
    "Gom": {
      "class": {
        "Adapter": {
          "prototype": {
            "closeAsync": {
              "value": function () { return this.close_async.apply(this, arguments); }
            },
            "closeFinish": {
              "value": function () { return this.close_finish.apply(this, arguments); }
            },
            "closeSync": {
              "value": function () { return this.close_sync.apply(this, arguments); }
            },
            "executeSql": {
              "value": function () { return this.execute_sql.apply(this, arguments); }
            },
            "getHandle": {
              "value": function () { return this.get_handle.apply(this, arguments); }
            },
            "openAsync": {
              "value": function () { return this.open_async.apply(this, arguments); }
            },
            "openFinish": {
              "value": function () { return this.open_finish.apply(this, arguments); }
            },
            "openSync": {
              "value": function () { return this.open_sync.apply(this, arguments); }
            },
            "queueRead": {
              "value": function () { return this.queue_read.apply(this, arguments); }
            },
            "queueWrite": {
              "value": function () { return this.queue_write.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Command": {
          "prototype": {
            "getParamIndex": {
              "value": function () { return this.get_param_index.apply(this, arguments); }
            },
            "setParam": {
              "value": function () { return this.set_param.apply(this, arguments); }
            },
            "setParamDouble": {
              "value": function () { return this.set_param_double.apply(this, arguments); }
            },
            "setParamFloat": {
              "value": function () { return this.set_param_float.apply(this, arguments); }
            },
            "setParamInt": {
              "value": function () { return this.set_param_int.apply(this, arguments); }
            },
            "setParamInt64": {
              "value": function () { return this.set_param_int64.apply(this, arguments); }
            },
            "setParamString": {
              "value": function () { return this.set_param_string.apply(this, arguments); }
            },
            "setParamUint": {
              "value": function () { return this.set_param_uint.apply(this, arguments); }
            },
            "setParamUint64": {
              "value": function () { return this.set_param_uint64.apply(this, arguments); }
            },
            "setSql": {
              "value": function () { return this.set_sql.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "CommandBuilder": {
          "prototype": {
            "buildCount": {
              "value": function () { return this.build_count.apply(this, arguments); }
            },
            "buildCreate": {
              "value": function () { return this.build_create.apply(this, arguments); }
            },
            "buildDelete": {
              "value": function () { return this.build_delete.apply(this, arguments); }
            },
            "buildInsert": {
              "value": function () { return this.build_insert.apply(this, arguments); }
            },
            "buildSelect": {
              "value": function () { return this.build_select.apply(this, arguments); }
            },
            "buildUpdate": {
              "value": function () { return this.build_update.apply(this, arguments); }
            },
            "m2mTable": {
              "get": function () { return this.m2m_table; },
              "set": function (value) { this.m2m_table = value; }
            },
            "m2mType": {
              "get": function () { return this.m2m_type; },
              "set": function (value) { this.m2m_type = value; }
            },
            "resourceType": {
              "get": function () { return this.resource_type; },
              "set": function (value) { this.resource_type = value; }
            }
          },
          "static": {}
        },
        "Cursor": {
          "prototype": {
            "getColumn": {
              "value": function () { return this.get_column.apply(this, arguments); }
            },
            "getColumnBoolean": {
              "value": function () { return this.get_column_boolean.apply(this, arguments); }
            },
            "getColumnDouble": {
              "value": function () { return this.get_column_double.apply(this, arguments); }
            },
            "getColumnFloat": {
              "value": function () { return this.get_column_float.apply(this, arguments); }
            },
            "getColumnInt": {
              "value": function () { return this.get_column_int.apply(this, arguments); }
            },
            "getColumnInt64": {
              "value": function () { return this.get_column_int64.apply(this, arguments); }
            },
            "getColumnName": {
              "value": function () { return this.get_column_name.apply(this, arguments); }
            },
            "getColumnString": {
              "value": function () { return this.get_column_string.apply(this, arguments); }
            },
            "getColumnUint": {
              "value": function () { return this.get_column_uint.apply(this, arguments); }
            },
            "getColumnUint64": {
              "value": function () { return this.get_column_uint64.apply(this, arguments); }
            },
            "getNColumns": {
              "value": function () { return this.get_n_columns.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Filter": {
          "prototype": {
            "getSql": {
              "value": function () { return this.get_sql.apply(this, arguments); }
            },
            "getValues": {
              "value": function () { return this.get_values.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Repository": {
          "prototype": {
            "automaticMigrateAsync": {
              "value": function () { return this.automatic_migrate_async.apply(this, arguments); }
            },
            "automaticMigrateFinish": {
              "value": function () { return this.automatic_migrate_finish.apply(this, arguments); }
            },
            "automaticMigrateSync": {
              "value": function () { return this.automatic_migrate_sync.apply(this, arguments); }
            },
            "findAsync": {
              "value": function () { return this.find_async.apply(this, arguments); }
            },
            "findFinish": {
              "value": function () { return this.find_finish.apply(this, arguments); }
            },
            "findOneAsync": {
              "value": function () { return this.find_one_async.apply(this, arguments); }
            },
            "findOneFinish": {
              "value": function () { return this.find_one_finish.apply(this, arguments); }
            },
            "findOneSync": {
              "value": function () { return this.find_one_sync.apply(this, arguments); }
            },
            "findSortedAsync": {
              "value": function () { return this.find_sorted_async.apply(this, arguments); }
            },
            "findSortedSync": {
              "value": function () { return this.find_sorted_sync.apply(this, arguments); }
            },
            "findSync": {
              "value": function () { return this.find_sync.apply(this, arguments); }
            },
            "getAdapter": {
              "value": function () { return this.get_adapter.apply(this, arguments); }
            },
            "migrateAsync": {
              "value": function () { return this.migrate_async.apply(this, arguments); }
            },
            "migrateFinish": {
              "value": function () { return this.migrate_finish.apply(this, arguments); }
            },
            "migrateSync": {
              "value": function () { return this.migrate_sync.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Resource": {
          "prototype": {
            "buildSaveCmd": {
              "value": function () { return this.build_save_cmd.apply(this, arguments); }
            },
            "deleteAsync": {
              "value": function () { return this.delete_async.apply(this, arguments); }
            },
            "deleteFinish": {
              "value": function () { return this.delete_finish.apply(this, arguments); }
            },
            "deleteSync": {
              "value": function () { return this.delete_sync.apply(this, arguments); }
            },
            "doDelete": {
              "value": function () { return this.do_delete.apply(this, arguments); }
            },
            "doSave": {
              "value": function () { return this.do_save.apply(this, arguments); }
            },
            "fetchM2mAsync": {
              "value": function () { return this.fetch_m2m_async.apply(this, arguments); }
            },
            "fetchM2mFinish": {
              "value": function () { return this.fetch_m2m_finish.apply(this, arguments); }
            },
            "getIsFromTable": {
              "value": function () { return this.get_is_from_table.apply(this, arguments); }
            },
            "saveAsync": {
              "value": function () { return this.save_async.apply(this, arguments); }
            },
            "saveFinish": {
              "value": function () { return this.save_finish.apply(this, arguments); }
            },
            "saveSync": {
              "value": function () { return this.save_sync.apply(this, arguments); }
            },
            "setIsFromTable": {
              "value": function () { return this.set_is_from_table.apply(this, arguments); }
            },
            "setPostSaveProperties": {
              "value": function () { return this.set_post_save_properties.apply(this, arguments); }
            }
          },
          "static": {
            "fromBytesFuncQuark": {
              "value": function () { return this.from_bytes_func_quark.apply(this, arguments); }
            },
            "hasDynamicPkey": {
              "value": function () { return this.has_dynamic_pkey.apply(this, arguments); }
            },
            "newInVersionQuark": {
              "value": function () { return this.new_in_version_quark.apply(this, arguments); }
            },
            "notMappedQuark": {
              "value": function () { return this.not_mapped_quark.apply(this, arguments); }
            },
            "refPropertyName": {
              "value": function () { return this.ref_property_name.apply(this, arguments); }
            },
            "refTableClass": {
              "value": function () { return this.ref_table_class.apply(this, arguments); }
            },
            "toBytesFuncQuark": {
              "value": function () { return this.to_bytes_func_quark.apply(this, arguments); }
            }
          }
        },
        "ResourceGroup": {
          "prototype": {
            "deleteAsync": {
              "value": function () { return this.delete_async.apply(this, arguments); }
            },
            "deleteFinish": {
              "value": function () { return this.delete_finish.apply(this, arguments); }
            },
            "deleteSync": {
              "value": function () { return this.delete_sync.apply(this, arguments); }
            },
            "fetchAsync": {
              "value": function () { return this.fetch_async.apply(this, arguments); }
            },
            "fetchFinish": {
              "value": function () { return this.fetch_finish.apply(this, arguments); }
            },
            "fetchSync": {
              "value": function () { return this.fetch_sync.apply(this, arguments); }
            },
            "getCount": {
              "value": function () { return this.get_count.apply(this, arguments); }
            },
            "getIndex": {
              "value": function () { return this.get_index.apply(this, arguments); }
            },
            "getM2mTable": {
              "value": function () { return this.get_m2m_table.apply(this, arguments); }
            },
            "writeAsync": {
              "value": function () { return this.write_async.apply(this, arguments); }
            },
            "writeFinish": {
              "value": function () { return this.write_finish.apply(this, arguments); }
            },
            "writeSync": {
              "value": function () { return this.write_sync.apply(this, arguments); }
            },
            "isWritable": {
              "get": function () { return this.is_writable; },
              "set": function (value) { this.is_writable = value; }
            },
            "m2mTable": {
              "get": function () { return this.m2m_table; },
              "set": function (value) { this.m2m_table = value; }
            },
            "m2mType": {
              "get": function () { return this.m2m_type; },
              "set": function (value) { this.m2m_type = value; }
            },
            "resourceType": {
              "get": function () { return this.resource_type; },
              "set": function (value) { this.resource_type = value; }
            }
          },
          "static": {}
        },
        "Sorting": {
          "prototype": {
            "getSql": {
              "value": function () { return this.get_sql.apply(this, arguments); }
            }
          },
          "static": {}
        }
      },
      "static": {
        "errorQuark": {
          "value": function () { return this.error_quark.apply(this, arguments); }
        }
      }
    },
    "Graphene": {
      "class": {},
      "static": {
        "boxEmpty": {
          "value": function () { return this.box_empty.apply(this, arguments); }
        },
        "boxInfinite": {
          "value": function () { return this.box_infinite.apply(this, arguments); }
        },
        "boxMinusOne": {
          "value": function () { return this.box_minus_one.apply(this, arguments); }
        },
        "boxOne": {
          "value": function () { return this.box_one.apply(this, arguments); }
        },
        "boxOneMinusOne": {
          "value": function () { return this.box_one_minus_one.apply(this, arguments); }
        },
        "boxZero": {
          "value": function () { return this.box_zero.apply(this, arguments); }
        },
        "point3dZero": {
          "value": function () { return this.point3d_zero.apply(this, arguments); }
        },
        "pointZero": {
          "value": function () { return this.point_zero.apply(this, arguments); }
        },
        "rectAlloc": {
          "value": function () { return this.rect_alloc.apply(this, arguments); }
        },
        "sizeZero": {
          "value": function () { return this.size_zero.apply(this, arguments); }
        },
        "vec2One": {
          "value": function () { return this.vec2_one.apply(this, arguments); }
        },
        "vec2XAxis": {
          "value": function () { return this.vec2_x_axis.apply(this, arguments); }
        },
        "vec2YAxis": {
          "value": function () { return this.vec2_y_axis.apply(this, arguments); }
        },
        "vec2Zero": {
          "value": function () { return this.vec2_zero.apply(this, arguments); }
        },
        "vec3One": {
          "value": function () { return this.vec3_one.apply(this, arguments); }
        },
        "vec3XAxis": {
          "value": function () { return this.vec3_x_axis.apply(this, arguments); }
        },
        "vec3YAxis": {
          "value": function () { return this.vec3_y_axis.apply(this, arguments); }
        },
        "vec3ZAxis": {
          "value": function () { return this.vec3_z_axis.apply(this, arguments); }
        },
        "vec3Zero": {
          "value": function () { return this.vec3_zero.apply(this, arguments); }
        },
        "vec4One": {
          "value": function () { return this.vec4_one.apply(this, arguments); }
        },
        "vec4WAxis": {
          "value": function () { return this.vec4_w_axis.apply(this, arguments); }
        },
        "vec4XAxis": {
          "value": function () { return this.vec4_x_axis.apply(this, arguments); }
        },
        "vec4YAxis": {
          "value": function () { return this.vec4_y_axis.apply(this, arguments); }
        },
        "vec4ZAxis": {
          "value": function () { return this.vec4_z_axis.apply(this, arguments); }
        },
        "vec4Zero": {
          "value": function () { return this.vec4_zero.apply(this, arguments); }
        }
      }
    },
    "Grl": {
      "class": {
        "Caps": {
          "prototype": {
            "getKeyFilter": {
              "value": function () { return this.get_key_filter.apply(this, arguments); }
            },
            "getKeyRangeFilter": {
              "value": function () { return this.get_key_range_filter.apply(this, arguments); }
            },
            "getTypeFilter": {
              "value": function () { return this.get_type_filter.apply(this, arguments); }
            },
            "isKeyFilter": {
              "value": function () { return this.is_key_filter.apply(this, arguments); }
            },
            "isKeyRangeFilter": {
              "value": function () { return this.is_key_range_filter.apply(this, arguments); }
            },
            "setKeyFilter": {
              "value": function () { return this.set_key_filter.apply(this, arguments); }
            },
            "setKeyRangeFilter": {
              "value": function () { return this.set_key_range_filter.apply(this, arguments); }
            },
            "setTypeFilter": {
              "value": function () { return this.set_type_filter.apply(this, arguments); }
            },
            "testOption": {
              "value": function () { return this.test_option.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Config": {
          "prototype": {
            "getApiKey": {
              "value": function () { return this.get_api_key.apply(this, arguments); }
            },
            "getApiKeyBlob": {
              "value": function () { return this.get_api_key_blob.apply(this, arguments); }
            },
            "getApiSecret": {
              "value": function () { return this.get_api_secret.apply(this, arguments); }
            },
            "getApiToken": {
              "value": function () { return this.get_api_token.apply(this, arguments); }
            },
            "getApiTokenSecret": {
              "value": function () { return this.get_api_token_secret.apply(this, arguments); }
            },
            "getBinary": {
              "value": function () { return this.get_binary.apply(this, arguments); }
            },
            "getBoolean": {
              "value": function () { return this.get_boolean.apply(this, arguments); }
            },
            "getFloat": {
              "value": function () { return this.get_float.apply(this, arguments); }
            },
            "getInt": {
              "value": function () { return this.get_int.apply(this, arguments); }
            },
            "getPassword": {
              "value": function () { return this.get_password.apply(this, arguments); }
            },
            "getPlugin": {
              "value": function () { return this.get_plugin.apply(this, arguments); }
            },
            "getSource": {
              "value": function () { return this.get_source.apply(this, arguments); }
            },
            "getString": {
              "value": function () { return this.get_string.apply(this, arguments); }
            },
            "getUsername": {
              "value": function () { return this.get_username.apply(this, arguments); }
            },
            "hasParam": {
              "value": function () { return this.has_param.apply(this, arguments); }
            },
            "setApiKey": {
              "value": function () { return this.set_api_key.apply(this, arguments); }
            },
            "setApiKeyBlob": {
              "value": function () { return this.set_api_key_blob.apply(this, arguments); }
            },
            "setApiSecret": {
              "value": function () { return this.set_api_secret.apply(this, arguments); }
            },
            "setApiToken": {
              "value": function () { return this.set_api_token.apply(this, arguments); }
            },
            "setApiTokenSecret": {
              "value": function () { return this.set_api_token_secret.apply(this, arguments); }
            },
            "setBinary": {
              "value": function () { return this.set_binary.apply(this, arguments); }
            },
            "setBoolean": {
              "value": function () { return this.set_boolean.apply(this, arguments); }
            },
            "setFloat": {
              "value": function () { return this.set_float.apply(this, arguments); }
            },
            "setInt": {
              "value": function () { return this.set_int.apply(this, arguments); }
            },
            "setPassword": {
              "value": function () { return this.set_password.apply(this, arguments); }
            },
            "setPlugin": {
              "value": function () { return this.set_plugin.apply(this, arguments); }
            },
            "setSource": {
              "value": function () { return this.set_source.apply(this, arguments); }
            },
            "setString": {
              "value": function () { return this.set_string.apply(this, arguments); }
            },
            "setUsername": {
              "value": function () { return this.set_username.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Data": {
          "prototype": {
            "addBinary": {
              "value": function () { return this.add_binary.apply(this, arguments); }
            },
            "addBoxed": {
              "value": function () { return this.add_boxed.apply(this, arguments); }
            },
            "addFloat": {
              "value": function () { return this.add_float.apply(this, arguments); }
            },
            "addInt": {
              "value": function () { return this.add_int.apply(this, arguments); }
            },
            "addInt64": {
              "value": function () { return this.add_int64.apply(this, arguments); }
            },
            "addRelatedKeys": {
              "value": function () { return this.add_related_keys.apply(this, arguments); }
            },
            "addString": {
              "value": function () { return this.add_string.apply(this, arguments); }
            },
            "getBinary": {
              "value": function () { return this.get_binary.apply(this, arguments); }
            },
            "getBoolean": {
              "value": function () { return this.get_boolean.apply(this, arguments); }
            },
            "getBoxed": {
              "value": function () { return this.get_boxed.apply(this, arguments); }
            },
            "getFloat": {
              "value": function () { return this.get_float.apply(this, arguments); }
            },
            "getInt": {
              "value": function () { return this.get_int.apply(this, arguments); }
            },
            "getInt64": {
              "value": function () { return this.get_int64.apply(this, arguments); }
            },
            "getKeys": {
              "value": function () { return this.get_keys.apply(this, arguments); }
            },
            "getRelatedKeys": {
              "value": function () { return this.get_related_keys.apply(this, arguments); }
            },
            "getSingleValuesForKey": {
              "value": function () { return this.get_single_values_for_key.apply(this, arguments); }
            },
            "getSingleValuesForKeyString": {
              "value": function () { return this.get_single_values_for_key_string.apply(this, arguments); }
            },
            "getString": {
              "value": function () { return this.get_string.apply(this, arguments); }
            },
            "hasKey": {
              "value": function () { return this.has_key.apply(this, arguments); }
            },
            "removeNth": {
              "value": function () { return this.remove_nth.apply(this, arguments); }
            },
            "setBinary": {
              "value": function () { return this.set_binary.apply(this, arguments); }
            },
            "setBoolean": {
              "value": function () { return this.set_boolean.apply(this, arguments); }
            },
            "setBoxed": {
              "value": function () { return this.set_boxed.apply(this, arguments); }
            },
            "setFloat": {
              "value": function () { return this.set_float.apply(this, arguments); }
            },
            "setInt": {
              "value": function () { return this.set_int.apply(this, arguments); }
            },
            "setInt64": {
              "value": function () { return this.set_int64.apply(this, arguments); }
            },
            "setRelatedKeys": {
              "value": function () { return this.set_related_keys.apply(this, arguments); }
            },
            "setString": {
              "value": function () { return this.set_string.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Media": {
          "prototype": {
            "addAuthor": {
              "value": function () { return this.add_author.apply(this, arguments); }
            },
            "addExternalPlayer": {
              "value": function () { return this.add_external_player.apply(this, arguments); }
            },
            "addExternalUrl": {
              "value": function () { return this.add_external_url.apply(this, arguments); }
            },
            "addKeyword": {
              "value": function () { return this.add_keyword.apply(this, arguments); }
            },
            "addRegionData": {
              "value": function () { return this.add_region_data.apply(this, arguments); }
            },
            "addThumbnail": {
              "value": function () { return this.add_thumbnail.apply(this, arguments); }
            },
            "addThumbnailBinary": {
              "value": function () { return this.add_thumbnail_binary.apply(this, arguments); }
            },
            "addUrlData": {
              "value": function () { return this.add_url_data.apply(this, arguments); }
            },
            "getAuthor": {
              "value": function () { return this.get_author.apply(this, arguments); }
            },
            "getAuthorNth": {
              "value": function () { return this.get_author_nth.apply(this, arguments); }
            },
            "getCertificate": {
              "value": function () { return this.get_certificate.apply(this, arguments); }
            },
            "getCreationDate": {
              "value": function () { return this.get_creation_date.apply(this, arguments); }
            },
            "getDescription": {
              "value": function () { return this.get_description.apply(this, arguments); }
            },
            "getDuration": {
              "value": function () { return this.get_duration.apply(this, arguments); }
            },
            "getExternalUrl": {
              "value": function () { return this.get_external_url.apply(this, arguments); }
            },
            "getExternalUrlNth": {
              "value": function () { return this.get_external_url_nth.apply(this, arguments); }
            },
            "getFavourite": {
              "value": function () { return this.get_favourite.apply(this, arguments); }
            },
            "getId": {
              "value": function () { return this.get_id.apply(this, arguments); }
            },
            "getKeyword": {
              "value": function () { return this.get_keyword.apply(this, arguments); }
            },
            "getKeywordNth": {
              "value": function () { return this.get_keyword_nth.apply(this, arguments); }
            },
            "getLastPlayed": {
              "value": function () { return this.get_last_played.apply(this, arguments); }
            },
            "getLastPosition": {
              "value": function () { return this.get_last_position.apply(this, arguments); }
            },
            "getLicense": {
              "value": function () { return this.get_license.apply(this, arguments); }
            },
            "getMime": {
              "value": function () { return this.get_mime.apply(this, arguments); }
            },
            "getModificationDate": {
              "value": function () { return this.get_modification_date.apply(this, arguments); }
            },
            "getPlayCount": {
              "value": function () { return this.get_play_count.apply(this, arguments); }
            },
            "getPlayer": {
              "value": function () { return this.get_player.apply(this, arguments); }
            },
            "getPlayerNth": {
              "value": function () { return this.get_player_nth.apply(this, arguments); }
            },
            "getPublicationDate": {
              "value": function () { return this.get_publication_date.apply(this, arguments); }
            },
            "getRating": {
              "value": function () { return this.get_rating.apply(this, arguments); }
            },
            "getRegion": {
              "value": function () { return this.get_region.apply(this, arguments); }
            },
            "getRegionData": {
              "value": function () { return this.get_region_data.apply(this, arguments); }
            },
            "getRegionDataNth": {
              "value": function () { return this.get_region_data_nth.apply(this, arguments); }
            },
            "getSite": {
              "value": function () { return this.get_site.apply(this, arguments); }
            },
            "getSize": {
              "value": function () { return this.get_size.apply(this, arguments); }
            },
            "getSource": {
              "value": function () { return this.get_source.apply(this, arguments); }
            },
            "getStartTime": {
              "value": function () { return this.get_start_time.apply(this, arguments); }
            },
            "getStudio": {
              "value": function () { return this.get_studio.apply(this, arguments); }
            },
            "getThumbnail": {
              "value": function () { return this.get_thumbnail.apply(this, arguments); }
            },
            "getThumbnailBinary": {
              "value": function () { return this.get_thumbnail_binary.apply(this, arguments); }
            },
            "getThumbnailBinaryNth": {
              "value": function () { return this.get_thumbnail_binary_nth.apply(this, arguments); }
            },
            "getThumbnailNth": {
              "value": function () { return this.get_thumbnail_nth.apply(this, arguments); }
            },
            "getTitle": {
              "value": function () { return this.get_title.apply(this, arguments); }
            },
            "getUrl": {
              "value": function () { return this.get_url.apply(this, arguments); }
            },
            "getUrlData": {
              "value": function () { return this.get_url_data.apply(this, arguments); }
            },
            "getUrlDataNth": {
              "value": function () { return this.get_url_data_nth.apply(this, arguments); }
            },
            "serializeExtended": {
              "value": function () { return this.serialize_extended.apply(this, arguments); }
            },
            "setAuthor": {
              "value": function () { return this.set_author.apply(this, arguments); }
            },
            "setCertificate": {
              "value": function () { return this.set_certificate.apply(this, arguments); }
            },
            "setCreationDate": {
              "value": function () { return this.set_creation_date.apply(this, arguments); }
            },
            "setDescription": {
              "value": function () { return this.set_description.apply(this, arguments); }
            },
            "setDuration": {
              "value": function () { return this.set_duration.apply(this, arguments); }
            },
            "setExternalPlayer": {
              "value": function () { return this.set_external_player.apply(this, arguments); }
            },
            "setExternalUrl": {
              "value": function () { return this.set_external_url.apply(this, arguments); }
            },
            "setFavourite": {
              "value": function () { return this.set_favourite.apply(this, arguments); }
            },
            "setId": {
              "value": function () { return this.set_id.apply(this, arguments); }
            },
            "setKeyword": {
              "value": function () { return this.set_keyword.apply(this, arguments); }
            },
            "setLastPlayed": {
              "value": function () { return this.set_last_played.apply(this, arguments); }
            },
            "setLastPosition": {
              "value": function () { return this.set_last_position.apply(this, arguments); }
            },
            "setLicense": {
              "value": function () { return this.set_license.apply(this, arguments); }
            },
            "setMime": {
              "value": function () { return this.set_mime.apply(this, arguments); }
            },
            "setModificationDate": {
              "value": function () { return this.set_modification_date.apply(this, arguments); }
            },
            "setPlayCount": {
              "value": function () { return this.set_play_count.apply(this, arguments); }
            },
            "setPublicationDate": {
              "value": function () { return this.set_publication_date.apply(this, arguments); }
            },
            "setRating": {
              "value": function () { return this.set_rating.apply(this, arguments); }
            },
            "setRegion": {
              "value": function () { return this.set_region.apply(this, arguments); }
            },
            "setRegionData": {
              "value": function () { return this.set_region_data.apply(this, arguments); }
            },
            "setSite": {
              "value": function () { return this.set_site.apply(this, arguments); }
            },
            "setSize": {
              "value": function () { return this.set_size.apply(this, arguments); }
            },
            "setSource": {
              "value": function () { return this.set_source.apply(this, arguments); }
            },
            "setStudio": {
              "value": function () { return this.set_studio.apply(this, arguments); }
            },
            "setThumbnail": {
              "value": function () { return this.set_thumbnail.apply(this, arguments); }
            },
            "setThumbnailBinary": {
              "value": function () { return this.set_thumbnail_binary.apply(this, arguments); }
            },
            "setTitle": {
              "value": function () { return this.set_title.apply(this, arguments); }
            },
            "setUrl": {
              "value": function () { return this.set_url.apply(this, arguments); }
            },
            "setUrlData": {
              "value": function () { return this.set_url_data.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "MediaAudio": {
          "prototype": {
            "addArtist": {
              "value": function () { return this.add_artist.apply(this, arguments); }
            },
            "addGenre": {
              "value": function () { return this.add_genre.apply(this, arguments); }
            },
            "addLyrics": {
              "value": function () { return this.add_lyrics.apply(this, arguments); }
            },
            "addMbArtistId": {
              "value": function () { return this.add_mb_artist_id.apply(this, arguments); }
            },
            "addUrlData": {
              "value": function () { return this.add_url_data.apply(this, arguments); }
            },
            "getAlbum": {
              "value": function () { return this.get_album.apply(this, arguments); }
            },
            "getArtist": {
              "value": function () { return this.get_artist.apply(this, arguments); }
            },
            "getArtistNth": {
              "value": function () { return this.get_artist_nth.apply(this, arguments); }
            },
            "getBitrate": {
              "value": function () { return this.get_bitrate.apply(this, arguments); }
            },
            "getGenre": {
              "value": function () { return this.get_genre.apply(this, arguments); }
            },
            "getGenreNth": {
              "value": function () { return this.get_genre_nth.apply(this, arguments); }
            },
            "getLyrics": {
              "value": function () { return this.get_lyrics.apply(this, arguments); }
            },
            "getLyricsNth": {
              "value": function () { return this.get_lyrics_nth.apply(this, arguments); }
            },
            "getMbAlbumId": {
              "value": function () { return this.get_mb_album_id.apply(this, arguments); }
            },
            "getMbArtistId": {
              "value": function () { return this.get_mb_artist_id.apply(this, arguments); }
            },
            "getMbArtistIdNth": {
              "value": function () { return this.get_mb_artist_id_nth.apply(this, arguments); }
            },
            "getMbRecordingId": {
              "value": function () { return this.get_mb_recording_id.apply(this, arguments); }
            },
            "getMbTrackId": {
              "value": function () { return this.get_mb_track_id.apply(this, arguments); }
            },
            "getTrackNumber": {
              "value": function () { return this.get_track_number.apply(this, arguments); }
            },
            "getUrlData": {
              "value": function () { return this.get_url_data.apply(this, arguments); }
            },
            "getUrlDataNth": {
              "value": function () { return this.get_url_data_nth.apply(this, arguments); }
            },
            "setAlbum": {
              "value": function () { return this.set_album.apply(this, arguments); }
            },
            "setArtist": {
              "value": function () { return this.set_artist.apply(this, arguments); }
            },
            "setBitrate": {
              "value": function () { return this.set_bitrate.apply(this, arguments); }
            },
            "setGenre": {
              "value": function () { return this.set_genre.apply(this, arguments); }
            },
            "setLyrics": {
              "value": function () { return this.set_lyrics.apply(this, arguments); }
            },
            "setMbAlbumId": {
              "value": function () { return this.set_mb_album_id.apply(this, arguments); }
            },
            "setMbArtistId": {
              "value": function () { return this.set_mb_artist_id.apply(this, arguments); }
            },
            "setMbRecordingId": {
              "value": function () { return this.set_mb_recording_id.apply(this, arguments); }
            },
            "setMbTrackId": {
              "value": function () { return this.set_mb_track_id.apply(this, arguments); }
            },
            "setTrackNumber": {
              "value": function () { return this.set_track_number.apply(this, arguments); }
            },
            "setUrlData": {
              "value": function () { return this.set_url_data.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "MediaBox": {
          "prototype": {
            "getChildcount": {
              "value": function () { return this.get_childcount.apply(this, arguments); }
            },
            "setChildcount": {
              "value": function () { return this.set_childcount.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "MediaImage": {
          "prototype": {
            "addUrlData": {
              "value": function () { return this.add_url_data.apply(this, arguments); }
            },
            "getCameraModel": {
              "value": function () { return this.get_camera_model.apply(this, arguments); }
            },
            "getExposureTime": {
              "value": function () { return this.get_exposure_time.apply(this, arguments); }
            },
            "getFlashUsed": {
              "value": function () { return this.get_flash_used.apply(this, arguments); }
            },
            "getHeight": {
              "value": function () { return this.get_height.apply(this, arguments); }
            },
            "getIsoSpeed": {
              "value": function () { return this.get_iso_speed.apply(this, arguments); }
            },
            "getOrientation": {
              "value": function () { return this.get_orientation.apply(this, arguments); }
            },
            "getUrlData": {
              "value": function () { return this.get_url_data.apply(this, arguments); }
            },
            "getUrlDataNth": {
              "value": function () { return this.get_url_data_nth.apply(this, arguments); }
            },
            "getWidth": {
              "value": function () { return this.get_width.apply(this, arguments); }
            },
            "setCameraModel": {
              "value": function () { return this.set_camera_model.apply(this, arguments); }
            },
            "setExposureTime": {
              "value": function () { return this.set_exposure_time.apply(this, arguments); }
            },
            "setFlashUsed": {
              "value": function () { return this.set_flash_used.apply(this, arguments); }
            },
            "setHeight": {
              "value": function () { return this.set_height.apply(this, arguments); }
            },
            "setIsoSpeed": {
              "value": function () { return this.set_iso_speed.apply(this, arguments); }
            },
            "setOrientation": {
              "value": function () { return this.set_orientation.apply(this, arguments); }
            },
            "setSize": {
              "value": function () { return this.set_size.apply(this, arguments); }
            },
            "setUrlData": {
              "value": function () { return this.set_url_data.apply(this, arguments); }
            },
            "setWidth": {
              "value": function () { return this.set_width.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "MediaVideo": {
          "prototype": {
            "addDirector": {
              "value": function () { return this.add_director.apply(this, arguments); }
            },
            "addPerformer": {
              "value": function () { return this.add_performer.apply(this, arguments); }
            },
            "addProducer": {
              "value": function () { return this.add_producer.apply(this, arguments); }
            },
            "addUrlData": {
              "value": function () { return this.add_url_data.apply(this, arguments); }
            },
            "getDirector": {
              "value": function () { return this.get_director.apply(this, arguments); }
            },
            "getDirectorNth": {
              "value": function () { return this.get_director_nth.apply(this, arguments); }
            },
            "getEpisode": {
              "value": function () { return this.get_episode.apply(this, arguments); }
            },
            "getEpisodeTitle": {
              "value": function () { return this.get_episode_title.apply(this, arguments); }
            },
            "getFramerate": {
              "value": function () { return this.get_framerate.apply(this, arguments); }
            },
            "getHeight": {
              "value": function () { return this.get_height.apply(this, arguments); }
            },
            "getOriginalTitle": {
              "value": function () { return this.get_original_title.apply(this, arguments); }
            },
            "getPerformer": {
              "value": function () { return this.get_performer.apply(this, arguments); }
            },
            "getPerformerNth": {
              "value": function () { return this.get_performer_nth.apply(this, arguments); }
            },
            "getProducer": {
              "value": function () { return this.get_producer.apply(this, arguments); }
            },
            "getProducerNth": {
              "value": function () { return this.get_producer_nth.apply(this, arguments); }
            },
            "getSeason": {
              "value": function () { return this.get_season.apply(this, arguments); }
            },
            "getShow": {
              "value": function () { return this.get_show.apply(this, arguments); }
            },
            "getUrlData": {
              "value": function () { return this.get_url_data.apply(this, arguments); }
            },
            "getUrlDataNth": {
              "value": function () { return this.get_url_data_nth.apply(this, arguments); }
            },
            "getWidth": {
              "value": function () { return this.get_width.apply(this, arguments); }
            },
            "setDirector": {
              "value": function () { return this.set_director.apply(this, arguments); }
            },
            "setEpisode": {
              "value": function () { return this.set_episode.apply(this, arguments); }
            },
            "setEpisodeTitle": {
              "value": function () { return this.set_episode_title.apply(this, arguments); }
            },
            "setFramerate": {
              "value": function () { return this.set_framerate.apply(this, arguments); }
            },
            "setHeight": {
              "value": function () { return this.set_height.apply(this, arguments); }
            },
            "setOriginalTitle": {
              "value": function () { return this.set_original_title.apply(this, arguments); }
            },
            "setPerformer": {
              "value": function () { return this.set_performer.apply(this, arguments); }
            },
            "setProducer": {
              "value": function () { return this.set_producer.apply(this, arguments); }
            },
            "setSeason": {
              "value": function () { return this.set_season.apply(this, arguments); }
            },
            "setShow": {
              "value": function () { return this.set_show.apply(this, arguments); }
            },
            "setSize": {
              "value": function () { return this.set_size.apply(this, arguments); }
            },
            "setUrlData": {
              "value": function () { return this.set_url_data.apply(this, arguments); }
            },
            "setWidth": {
              "value": function () { return this.set_width.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "OperationOptions": {
          "prototype": {
            "getCount": {
              "value": function () { return this.get_count.apply(this, arguments); }
            },
            "getFlags": {
              "value": function () { return this.get_flags.apply(this, arguments); }
            },
            "getKeyFilter": {
              "value": function () { return this.get_key_filter.apply(this, arguments); }
            },
            "getKeyFilterList": {
              "value": function () { return this.get_key_filter_list.apply(this, arguments); }
            },
            "getKeyRangeFilter": {
              "value": function () { return this.get_key_range_filter.apply(this, arguments); }
            },
            "getKeyRangeFilterList": {
              "value": function () { return this.get_key_range_filter_list.apply(this, arguments); }
            },
            "getResolutionFlags": {
              "value": function () { return this.get_resolution_flags.apply(this, arguments); }
            },
            "getSkip": {
              "value": function () { return this.get_skip.apply(this, arguments); }
            },
            "getTypeFilter": {
              "value": function () { return this.get_type_filter.apply(this, arguments); }
            },
            "keyIsSet": {
              "value": function () { return this.key_is_set.apply(this, arguments); }
            },
            "obeyCaps": {
              "value": function () { return this.obey_caps.apply(this, arguments); }
            },
            "setCount": {
              "value": function () { return this.set_count.apply(this, arguments); }
            },
            "setFlags": {
              "value": function () { return this.set_flags.apply(this, arguments); }
            },
            "setKeyFilterDictionary": {
              "value": function () { return this.set_key_filter_dictionary.apply(this, arguments); }
            },
            "setKeyFilterValue": {
              "value": function () { return this.set_key_filter_value.apply(this, arguments); }
            },
            "setKeyFilters": {
              "value": function () { return this.set_key_filters.apply(this, arguments); }
            },
            "setKeyRangeFilter": {
              "value": function () { return this.set_key_range_filter.apply(this, arguments); }
            },
            "setKeyRangeFilterValue": {
              "value": function () { return this.set_key_range_filter_value.apply(this, arguments); }
            },
            "setResolutionFlags": {
              "value": function () { return this.set_resolution_flags.apply(this, arguments); }
            },
            "setSkip": {
              "value": function () { return this.set_skip.apply(this, arguments); }
            },
            "setTypeFilter": {
              "value": function () { return this.set_type_filter.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Plugin": {
          "prototype": {
            "getAuthor": {
              "value": function () { return this.get_author.apply(this, arguments); }
            },
            "getDescription": {
              "value": function () { return this.get_description.apply(this, arguments); }
            },
            "getFilename": {
              "value": function () { return this.get_filename.apply(this, arguments); }
            },
            "getId": {
              "value": function () { return this.get_id.apply(this, arguments); }
            },
            "getInfo": {
              "value": function () { return this.get_info.apply(this, arguments); }
            },
            "getInfoKeys": {
              "value": function () { return this.get_info_keys.apply(this, arguments); }
            },
            "getLicense": {
              "value": function () { return this.get_license.apply(this, arguments); }
            },
            "getModule": {
              "value": function () { return this.get_module.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getSite": {
              "value": function () { return this.get_site.apply(this, arguments); }
            },
            "getSources": {
              "value": function () { return this.get_sources.apply(this, arguments); }
            },
            "getVersion": {
              "value": function () { return this.get_version.apply(this, arguments); }
            },
            "registerKeys": {
              "value": function () { return this.register_keys.apply(this, arguments); }
            },
            "setFilename": {
              "value": function () { return this.set_filename.apply(this, arguments); }
            },
            "setId": {
              "value": function () { return this.set_id.apply(this, arguments); }
            },
            "setInfo": {
              "value": function () { return this.set_info.apply(this, arguments); }
            },
            "setLoadFunc": {
              "value": function () { return this.set_load_func.apply(this, arguments); }
            },
            "setModule": {
              "value": function () { return this.set_module.apply(this, arguments); }
            },
            "setOptionalInfo": {
              "value": function () { return this.set_optional_info.apply(this, arguments); }
            },
            "setRegisterKeysFunc": {
              "value": function () { return this.set_register_keys_func.apply(this, arguments); }
            },
            "setUnloadFunc": {
              "value": function () { return this.set_unload_func.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Registry": {
          "prototype": {
            "addConfig": {
              "value": function () { return this.add_config.apply(this, arguments); }
            },
            "addConfigFromFile": {
              "value": function () { return this.add_config_from_file.apply(this, arguments); }
            },
            "addConfigFromResource": {
              "value": function () { return this.add_config_from_resource.apply(this, arguments); }
            },
            "addDirectory": {
              "value": function () { return this.add_directory.apply(this, arguments); }
            },
            "getMetadataKeys": {
              "value": function () { return this.get_metadata_keys.apply(this, arguments); }
            },
            "getPlugins": {
              "value": function () { return this.get_plugins.apply(this, arguments); }
            },
            "getSources": {
              "value": function () { return this.get_sources.apply(this, arguments); }
            },
            "getSourcesByOperations": {
              "value": function () { return this.get_sources_by_operations.apply(this, arguments); }
            },
            "loadAllPlugins": {
              "value": function () { return this.load_all_plugins.apply(this, arguments); }
            },
            "loadPlugin": {
              "value": function () { return this.load_plugin.apply(this, arguments); }
            },
            "loadPluginById": {
              "value": function () { return this.load_plugin_by_id.apply(this, arguments); }
            },
            "loadPluginDirectory": {
              "value": function () { return this.load_plugin_directory.apply(this, arguments); }
            },
            "loadPluginFromDesc": {
              "value": function () { return this.load_plugin_from_desc.apply(this, arguments); }
            },
            "lookupMetadataKey": {
              "value": function () { return this.lookup_metadata_key.apply(this, arguments); }
            },
            "lookupMetadataKeyDesc": {
              "value": function () { return this.lookup_metadata_key_desc.apply(this, arguments); }
            },
            "lookupMetadataKeyName": {
              "value": function () { return this.lookup_metadata_key_name.apply(this, arguments); }
            },
            "lookupMetadataKeyRelation": {
              "value": function () { return this.lookup_metadata_key_relation.apply(this, arguments); }
            },
            "lookupMetadataKeyType": {
              "value": function () { return this.lookup_metadata_key_type.apply(this, arguments); }
            },
            "lookupPlugin": {
              "value": function () { return this.lookup_plugin.apply(this, arguments); }
            },
            "lookupSource": {
              "value": function () { return this.lookup_source.apply(this, arguments); }
            },
            "metadataKeyValidate": {
              "value": function () { return this.metadata_key_validate.apply(this, arguments); }
            },
            "registerMetadataKey": {
              "value": function () { return this.register_metadata_key.apply(this, arguments); }
            },
            "registerMetadataKeyRelation": {
              "value": function () { return this.register_metadata_key_relation.apply(this, arguments); }
            },
            "registerMetadataKeySystem": {
              "value": function () { return this.register_metadata_key_system.apply(this, arguments); }
            },
            "registerSource": {
              "value": function () { return this.register_source.apply(this, arguments); }
            },
            "restrictPlugins": {
              "value": function () { return this.restrict_plugins.apply(this, arguments); }
            },
            "unloadPlugin": {
              "value": function () { return this.unload_plugin.apply(this, arguments); }
            },
            "unregisterSource": {
              "value": function () { return this.unregister_source.apply(this, arguments); }
            }
          },
          "static": {
            "getDefault": {
              "value": function () { return this.get_default.apply(this, arguments); }
            }
          }
        },
        "RelatedKeys": {
          "prototype": {
            "getBinary": {
              "value": function () { return this.get_binary.apply(this, arguments); }
            },
            "getBoolean": {
              "value": function () { return this.get_boolean.apply(this, arguments); }
            },
            "getBoxed": {
              "value": function () { return this.get_boxed.apply(this, arguments); }
            },
            "getFloat": {
              "value": function () { return this.get_float.apply(this, arguments); }
            },
            "getInt": {
              "value": function () { return this.get_int.apply(this, arguments); }
            },
            "getInt64": {
              "value": function () { return this.get_int64.apply(this, arguments); }
            },
            "getKeys": {
              "value": function () { return this.get_keys.apply(this, arguments); }
            },
            "getString": {
              "value": function () { return this.get_string.apply(this, arguments); }
            },
            "hasKey": {
              "value": function () { return this.has_key.apply(this, arguments); }
            },
            "setBinary": {
              "value": function () { return this.set_binary.apply(this, arguments); }
            },
            "setBoolean": {
              "value": function () { return this.set_boolean.apply(this, arguments); }
            },
            "setBoxed": {
              "value": function () { return this.set_boxed.apply(this, arguments); }
            },
            "setFloat": {
              "value": function () { return this.set_float.apply(this, arguments); }
            },
            "setInt": {
              "value": function () { return this.set_int.apply(this, arguments); }
            },
            "setInt64": {
              "value": function () { return this.set_int64.apply(this, arguments); }
            },
            "setString": {
              "value": function () { return this.set_string.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Source": {
          "prototype": {
            "browseSync": {
              "value": function () { return this.browse_sync.apply(this, arguments); }
            },
            "getAutoSplitThreshold": {
              "value": function () { return this.get_auto_split_threshold.apply(this, arguments); }
            },
            "getCaps": {
              "value": function () { return this.get_caps.apply(this, arguments); }
            },
            "getDescription": {
              "value": function () { return this.get_description.apply(this, arguments); }
            },
            "getIcon": {
              "value": function () { return this.get_icon.apply(this, arguments); }
            },
            "getId": {
              "value": function () { return this.get_id.apply(this, arguments); }
            },
            "getMediaFromUri": {
              "value": function () { return this.get_media_from_uri.apply(this, arguments); }
            },
            "getMediaFromUriSync": {
              "value": function () { return this.get_media_from_uri_sync.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getPlugin": {
              "value": function () { return this.get_plugin.apply(this, arguments); }
            },
            "getRank": {
              "value": function () { return this.get_rank.apply(this, arguments); }
            },
            "getSupportedMedia": {
              "value": function () { return this.get_supported_media.apply(this, arguments); }
            },
            "getTags": {
              "value": function () { return this.get_tags.apply(this, arguments); }
            },
            "mayResolve": {
              "value": function () { return this.may_resolve.apply(this, arguments); }
            },
            "notifyChange": {
              "value": function () { return this.notify_change.apply(this, arguments); }
            },
            "notifyChangeList": {
              "value": function () { return this.notify_change_list.apply(this, arguments); }
            },
            "notifyChangeStart": {
              "value": function () { return this.notify_change_start.apply(this, arguments); }
            },
            "notifyChangeStop": {
              "value": function () { return this.notify_change_stop.apply(this, arguments); }
            },
            "querySync": {
              "value": function () { return this.query_sync.apply(this, arguments); }
            },
            "removeSync": {
              "value": function () { return this.remove_sync.apply(this, arguments); }
            },
            "resolveSync": {
              "value": function () { return this.resolve_sync.apply(this, arguments); }
            },
            "searchSync": {
              "value": function () { return this.search_sync.apply(this, arguments); }
            },
            "setAutoSplitThreshold": {
              "value": function () { return this.set_auto_split_threshold.apply(this, arguments); }
            },
            "slowKeys": {
              "value": function () { return this.slow_keys.apply(this, arguments); }
            },
            "storeMetadata": {
              "value": function () { return this.store_metadata.apply(this, arguments); }
            },
            "storeMetadataSync": {
              "value": function () { return this.store_metadata_sync.apply(this, arguments); }
            },
            "storeSync": {
              "value": function () { return this.store_sync.apply(this, arguments); }
            },
            "supportedKeys": {
              "value": function () { return this.supported_keys.apply(this, arguments); }
            },
            "supportedOperations": {
              "value": function () { return this.supported_operations.apply(this, arguments); }
            },
            "testMediaFromUri": {
              "value": function () { return this.test_media_from_uri.apply(this, arguments); }
            },
            "writableKeys": {
              "value": function () { return this.writable_keys.apply(this, arguments); }
            },
            "autoSplitThreshold": {
              "get": function () { return this.auto_split_threshold; },
              "set": function (value) { this.auto_split_threshold = value; }
            },
            "sourceDesc": {
              "get": function () { return this.source_desc; },
              "set": function (value) { this.source_desc = value; }
            },
            "sourceIcon": {
              "get": function () { return this.source_icon; },
              "set": function (value) { this.source_icon = value; }
            },
            "sourceId": {
              "get": function () { return this.source_id; },
              "set": function (value) { this.source_id = value; }
            },
            "sourceName": {
              "get": function () { return this.source_name; },
              "set": function (value) { this.source_name = value; }
            },
            "sourceTags": {
              "get": function () { return this.source_tags; },
              "set": function (value) { this.source_tags = value; }
            },
            "supportedMedia": {
              "get": function () { return this.supported_media; },
              "set": function (value) { this.supported_media = value; }
            }
          },
          "static": {}
        }
      },
      "static": {
        "dateTimeFromIso8601": {
          "value": function () { return this.date_time_from_iso8601.apply(this, arguments); }
        },
        "gValueDup": {
          "value": function () { return this.g_value_dup.apply(this, arguments); }
        },
        "gValueFree": {
          "value": function () { return this.g_value_free.apply(this, arguments); }
        },
        "gValueHashtableNew": {
          "value": function () { return this.g_value_hashtable_new.apply(this, arguments); }
        },
        "gValueHashtableNewDirect": {
          "value": function () { return this.g_value_hashtable_new_direct.apply(this, arguments); }
        },
        "gValueNew": {
          "value": function () { return this.g_value_new.apply(this, arguments); }
        },
        "initGetOptionGroup": {
          "value": function () { return this.init_get_option_group.apply(this, arguments); }
        },
        "listFromVa": {
          "value": function () { return this.list_from_va.apply(this, arguments); }
        },
        "logConfigure": {
          "value": function () { return this.log_configure.apply(this, arguments); }
        },
        "logDomainNew": {
          "value": function () { return this.log_domain_new.apply(this, arguments); }
        },
        "marshalVOID_BOXEDENUMBOOLEAN": {
          "value": function () { return this.marshal_VOID__BOXED_ENUM_BOOLEAN.apply(this, arguments); }
        },
        "metadataKeyGetDesc": {
          "value": function () { return this.metadata_key_get_desc.apply(this, arguments); }
        },
        "metadataKeyGetName": {
          "value": function () { return this.metadata_key_get_name.apply(this, arguments); }
        },
        "metadataKeyGetType": {
          "value": function () { return this.metadata_key_get_type.apply(this, arguments); }
        },
        "metadataKeyListNew": {
          "value": function () { return this.metadata_key_list_new.apply(this, arguments); }
        },
        "metadataKeySetupSystemKeys": {
          "value": function () { return this.metadata_key_setup_system_keys.apply(this, arguments); }
        },
        "multipleGetMediaFromUri": {
          "value": function () { return this.multiple_get_media_from_uri.apply(this, arguments); }
        },
        "multipleSearch": {
          "value": function () { return this.multiple_search.apply(this, arguments); }
        },
        "multipleSearchSync": {
          "value": function () { return this.multiple_search_sync.apply(this, arguments); }
        },
        "operationCancel": {
          "value": function () { return this.operation_cancel.apply(this, arguments); }
        },
        "operationGenerateId": {
          "value": function () { return this.operation_generate_id.apply(this, arguments); }
        },
        "operationGetData": {
          "value": function () { return this.operation_get_data.apply(this, arguments); }
        },
        "operationGetPrivateData": {
          "value": function () { return this.operation_get_private_data.apply(this, arguments); }
        },
        "operationInit": {
          "value": function () { return this.operation_init.apply(this, arguments); }
        },
        "operationRemove": {
          "value": function () { return this.operation_remove.apply(this, arguments); }
        },
        "operationSetData": {
          "value": function () { return this.operation_set_data.apply(this, arguments); }
        },
        "operationSetDataFull": {
          "value": function () { return this.operation_set_data_full.apply(this, arguments); }
        },
        "operationSetPrivateData": {
          "value": function () { return this.operation_set_private_data.apply(this, arguments); }
        },
        "pagingTranslate": {
          "value": function () { return this.paging_translate.apply(this, arguments); }
        },
        "rangeValueHashtableInsert": {
          "value": function () { return this.range_value_hashtable_insert.apply(this, arguments); }
        },
        "rangeValueHashtableNew": {
          "value": function () { return this.range_value_hashtable_new.apply(this, arguments); }
        }
      }
    },
    "GrlNet": {
      "class": {
        "Wc": {
          "prototype": {
            "flushDelayedRequests": {
              "value": function () { return this.flush_delayed_requests.apply(this, arguments); }
            },
            "requestAsync": {
              "value": function () { return this.request_async.apply(this, arguments); }
            },
            "requestFinish": {
              "value": function () { return this.request_finish.apply(this, arguments); }
            },
            "requestWithHeadersAsync": {
              "value": function () { return this.request_with_headers_async.apply(this, arguments); }
            },
            "requestWithHeadersHashAsync": {
              "value": function () { return this.request_with_headers_hash_async.apply(this, arguments); }
            },
            "setCache": {
              "value": function () { return this.set_cache.apply(this, arguments); }
            },
            "setCacheSize": {
              "value": function () { return this.set_cache_size.apply(this, arguments); }
            },
            "setLogLevel": {
              "value": function () { return this.set_log_level.apply(this, arguments); }
            },
            "setThrottling": {
              "value": function () { return this.set_throttling.apply(this, arguments); }
            },
            "cacheSize": {
              "get": function () { return this.cache_size; },
              "set": function (value) { this.cache_size = value; }
            },
            "userAgent": {
              "get": function () { return this.user_agent; },
              "set": function (value) { this.user_agent = value; }
            }
          },
          "static": {
            "errorQuark": {
              "value": function () { return this.error_quark.apply(this, arguments); }
            }
          }
        }
      },
      "static": {}
    },
    "GrlPls": {
      "class": {},
      "static": {
        "browseBySpec": {
          "value": function () { return this.browse_by_spec.apply(this, arguments); }
        },
        "browseSync": {
          "value": function () { return this.browse_sync.apply(this, arguments); }
        },
        "fileToMedia": {
          "value": function () { return this.file_to_media.apply(this, arguments); }
        },
        "getFileAttributes": {
          "value": function () { return this.get_file_attributes.apply(this, arguments); }
        },
        "mediaIsPlaylist": {
          "value": function () { return this.media_is_playlist.apply(this, arguments); }
        }
      }
    },
    "Gsf": {
      "class": {
        "Blob": {
          "prototype": {
            "getSize": {
              "value": function () { return this.get_size.apply(this, arguments); }
            },
            "peekData": {
              "value": function () { return this.peek_data.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "ClipData": {
          "prototype": {
            "getDataBlob": {
              "value": function () { return this.get_data_blob.apply(this, arguments); }
            },
            "getFormat": {
              "value": function () { return this.get_format.apply(this, arguments); }
            },
            "getWindowsClipboardFormat": {
              "value": function () { return this.get_windows_clipboard_format.apply(this, arguments); }
            },
            "peekRealData": {
              "value": function () { return this.peek_real_data.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DocMetaData": {
          "prototype": {
            "odfSubtree": {
              "value": function () { return this.odf_subtree.apply(this, arguments); }
            },
            "readFromMsole": {
              "value": function () { return this.read_from_msole.apply(this, arguments); }
            },
            "readFromOdf": {
              "value": function () { return this.read_from_odf.apply(this, arguments); }
            },
            "writeToMsole": {
              "value": function () { return this.write_to_msole.apply(this, arguments); }
            },
            "writeToOdf": {
              "value": function () { return this.write_to_odf.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DocPropVector": {
          "prototype": {
            "asString": {
              "value": function () { return this.as_string.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Infile": {
          "prototype": {
            "childByAname": {
              "value": function () { return this.child_by_aname.apply(this, arguments); }
            },
            "childByIndex": {
              "value": function () { return this.child_by_index.apply(this, arguments); }
            },
            "childByName": {
              "value": function () { return this.child_by_name.apply(this, arguments); }
            },
            "childByVaname": {
              "value": function () { return this.child_by_vaname.apply(this, arguments); }
            },
            "childByVname": {
              "value": function () { return this.child_by_vname.apply(this, arguments); }
            },
            "nameByIndex": {
              "value": function () { return this.name_by_index.apply(this, arguments); }
            },
            "numChildren": {
              "value": function () { return this.num_children.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "InfileMSOle": {
          "prototype": {
            "getClassId": {
              "value": function () { return this.get_class_id.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "InfileMSVBA": {
          "prototype": {
            "getModules": {
              "value": function () { return this.get_modules.apply(this, arguments); }
            },
            "stealModules": {
              "value": function () { return this.steal_modules.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "InfileStdio": {
          "prototype": {},
          "static": {}
        },
        "InfileTar": {
          "prototype": {},
          "static": {}
        },
        "InfileZip": {
          "prototype": {
            "compressionLevel": {
              "get": function () { return this.compression_level; },
              "set": function (value) { this.compression_level = value; }
            },
            "internalParent": {
              "get": function () { return this.internal_parent; },
              "set": function (value) { this.internal_parent = value; }
            }
          },
          "static": {}
        },
        "Input": {
          "prototype": {
            "findVba": {
              "value": function () { return this.find_vba.apply(this, arguments); }
            },
            "getModtime": {
              "value": function () { return this.get_modtime.apply(this, arguments); }
            },
            "seekEmulate": {
              "value": function () { return this.seek_emulate.apply(this, arguments); }
            },
            "setContainer": {
              "value": function () { return this.set_container.apply(this, arguments); }
            },
            "setModtime": {
              "value": function () { return this.set_modtime.apply(this, arguments); }
            },
            "setName": {
              "value": function () { return this.set_name.apply(this, arguments); }
            },
            "setNameFromFilename": {
              "value": function () { return this.set_name_from_filename.apply(this, arguments); }
            },
            "setSize": {
              "value": function () { return this.set_size.apply(this, arguments); }
            }
          },
          "static": {
            "errorId": {
              "value": function () { return this.error_id.apply(this, arguments); }
            }
          }
        },
        "InputGZip": {
          "prototype": {
            "uncompressedSize": {
              "get": function () { return this.uncompressed_size; },
              "set": function (value) { this.uncompressed_size = value; }
            }
          },
          "static": {}
        },
        "InputGio": {
          "prototype": {},
          "static": {}
        },
        "InputHTTP": {
          "prototype": {
            "getContentType": {
              "value": function () { return this.get_content_type.apply(this, arguments); }
            },
            "getUrl": {
              "value": function () { return this.get_url.apply(this, arguments); }
            },
            "contentType": {
              "get": function () { return this.content_type; },
              "set": function (value) { this.content_type = value; }
            }
          },
          "static": {}
        },
        "InputMemory": {
          "prototype": {},
          "static": {}
        },
        "InputProxy": {
          "prototype": {},
          "static": {}
        },
        "InputStdio": {
          "prototype": {},
          "static": {}
        },
        "InputTextline": {
          "prototype": {
            "asciiGets": {
              "value": function () { return this.ascii_gets.apply(this, arguments); }
            },
            "utf8Gets": {
              "value": function () { return this.utf8_gets.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "ODFOut": {
          "prototype": {
            "getVersion": {
              "value": function () { return this.get_version.apply(this, arguments); }
            },
            "getVersionString": {
              "value": function () { return this.get_version_string.apply(this, arguments); }
            },
            "odfVersion": {
              "get": function () { return this.odf_version; },
              "set": function (value) { this.odf_version = value; }
            }
          },
          "static": {}
        },
        "Outfile": {
          "prototype": {
            "newChild": {
              "value": function () { return this.new_child.apply(this, arguments); }
            },
            "newChildFull": {
              "value": function () { return this.new_child_full.apply(this, arguments); }
            },
            "newChildVarg": {
              "value": function () { return this.new_child_varg.apply(this, arguments); }
            },
            "openPkgAddRel": {
              "value": function () { return this.open_pkg_add_rel.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "OutfileMSOle": {
          "prototype": {
            "setClassId": {
              "value": function () { return this.set_class_id.apply(this, arguments); }
            },
            "bigBlockSize": {
              "get": function () { return this.big_block_size; },
              "set": function (value) { this.big_block_size = value; }
            },
            "smallBlockSize": {
              "get": function () { return this.small_block_size; },
              "set": function (value) { this.small_block_size = value; }
            }
          },
          "static": {}
        },
        "OutfileOpenPkg": {
          "prototype": {
            "addExternRel": {
              "value": function () { return this.add_extern_rel.apply(this, arguments); }
            },
            "setContentType": {
              "value": function () { return this.set_content_type.apply(this, arguments); }
            },
            "setSink": {
              "value": function () { return this.set_sink.apply(this, arguments); }
            },
            "contentType": {
              "get": function () { return this.content_type; },
              "set": function (value) { this.content_type = value; }
            },
            "isDir": {
              "get": function () { return this.is_dir; },
              "set": function (value) { this.is_dir = value; }
            }
          },
          "static": {}
        },
        "OutfileStdio": {
          "prototype": {},
          "static": {}
        },
        "OutfileZip": {
          "prototype": {
            "setCompressionMethod": {
              "value": function () { return this.set_compression_method.apply(this, arguments); }
            },
            "compressionLevel": {
              "get": function () { return this.compression_level; },
              "set": function (value) { this.compression_level = value; }
            },
            "deflateLevel": {
              "get": function () { return this.deflate_level; },
              "set": function (value) { this.deflate_level = value; }
            },
            "entryName": {
              "get": function () { return this.entry_name; },
              "set": function (value) { this.entry_name = value; }
            }
          },
          "static": {}
        },
        "Output": {
          "prototype": {
            "getModtime": {
              "value": function () { return this.get_modtime.apply(this, arguments); }
            },
            "isClosed": {
              "get": function () { return this.is_closed; },
              "set": function (value) { this.is_closed = value; }
            },
            "setContainer": {
              "value": function () { return this.set_container.apply(this, arguments); }
            },
            "setError": {
              "value": function () { return this.set_error.apply(this, arguments); }
            },
            "setModtime": {
              "value": function () { return this.set_modtime.apply(this, arguments); }
            },
            "setName": {
              "value": function () { return this.set_name.apply(this, arguments); }
            },
            "setNameFromFilename": {
              "value": function () { return this.set_name_from_filename.apply(this, arguments); }
            }
          },
          "static": {
            "errorId": {
              "value": function () { return this.error_id.apply(this, arguments); }
            }
          }
        },
        "OutputBzip": {
          "prototype": {},
          "static": {}
        },
        "OutputCsv": {
          "prototype": {
            "writeEol": {
              "value": function () { return this.write_eol.apply(this, arguments); }
            },
            "writeField": {
              "value": function () { return this.write_field.apply(this, arguments); }
            },
            "quotingMode": {
              "get": function () { return this.quoting_mode; },
              "set": function (value) { this.quoting_mode = value; }
            },
            "quotingOnWhitespace": {
              "get": function () { return this.quoting_on_whitespace; },
              "set": function (value) { this.quoting_on_whitespace = value; }
            },
            "quotingTriggers": {
              "get": function () { return this.quoting_triggers; },
              "set": function (value) { this.quoting_triggers = value; }
            }
          },
          "static": {}
        },
        "OutputGZip": {
          "prototype": {},
          "static": {}
        },
        "OutputGio": {
          "prototype": {},
          "static": {}
        },
        "OutputIOChannel": {
          "prototype": {},
          "static": {}
        },
        "OutputIconv": {
          "prototype": {
            "inputCharset": {
              "get": function () { return this.input_charset; },
              "set": function (value) { this.input_charset = value; }
            },
            "outputCharset": {
              "get": function () { return this.output_charset; },
              "set": function (value) { this.output_charset = value; }
            }
          },
          "static": {}
        },
        "OutputMemory": {
          "prototype": {
            "getBytes": {
              "value": function () { return this.get_bytes.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "OutputStdio": {
          "prototype": {},
          "static": {}
        },
        "SharedMemory": {
          "prototype": {},
          "static": {}
        },
        "StructuredBlob": {
          "prototype": {},
          "static": {}
        },
        "XMLOut": {
          "prototype": {
            "addBase64": {
              "value": function () { return this.add_base64.apply(this, arguments); }
            },
            "addBool": {
              "value": function () { return this.add_bool.apply(this, arguments); }
            },
            "addColor": {
              "value": function () { return this.add_color.apply(this, arguments); }
            },
            "addCstr": {
              "value": function () { return this.add_cstr.apply(this, arguments); }
            },
            "addCstrUnchecked": {
              "value": function () { return this.add_cstr_unchecked.apply(this, arguments); }
            },
            "addEnum": {
              "value": function () { return this.add_enum.apply(this, arguments); }
            },
            "addFloat": {
              "value": function () { return this.add_float.apply(this, arguments); }
            },
            "addGvalue": {
              "value": function () { return this.add_gvalue.apply(this, arguments); }
            },
            "addInt": {
              "value": function () { return this.add_int.apply(this, arguments); }
            },
            "addUint": {
              "value": function () { return this.add_uint.apply(this, arguments); }
            },
            "endElement": {
              "value": function () { return this.end_element.apply(this, arguments); }
            },
            "getOutput": {
              "value": function () { return this.get_output.apply(this, arguments); }
            },
            "getPrettyPrint": {
              "value": function () { return this.get_pretty_print.apply(this, arguments); }
            },
            "setDocType": {
              "value": function () { return this.set_doc_type.apply(this, arguments); }
            },
            "setPrettyPrint": {
              "value": function () { return this.set_pretty_print.apply(this, arguments); }
            },
            "simpleElement": {
              "value": function () { return this.simple_element.apply(this, arguments); }
            },
            "simpleFloatElement": {
              "value": function () { return this.simple_float_element.apply(this, arguments); }
            },
            "simpleIntElement": {
              "value": function () { return this.simple_int_element.apply(this, arguments); }
            },
            "startElement": {
              "value": function () { return this.start_element.apply(this, arguments); }
            },
            "prettyPrint": {
              "get": function () { return this.pretty_print; },
              "set": function (value) { this.pretty_print = value; }
            }
          },
          "static": {}
        }
      },
      "static": {
        "base64DecodeSimple": {
          "value": function () { return this.base64_decode_simple.apply(this, arguments); }
        },
        "base64DecodeStep": {
          "value": function () { return this.base64_decode_step.apply(this, arguments); }
        },
        "base64EncodeClose": {
          "value": function () { return this.base64_encode_close.apply(this, arguments); }
        },
        "base64EncodeSimple": {
          "value": function () { return this.base64_encode_simple.apply(this, arguments); }
        },
        "base64EncodeStep": {
          "value": function () { return this.base64_encode_step.apply(this, arguments); }
        },
        "debugFlag": {
          "value": function () { return this.debug_flag.apply(this, arguments); }
        },
        "docMetaDump": {
          "value": function () { return this.doc_meta_dump.apply(this, arguments); }
        },
        "errorQuark": {
          "value": function () { return this.error_quark.apply(this, arguments); }
        },
        "extensionPointer": {
          "value": function () { return this.extension_pointer.apply(this, arguments); }
        },
        "filenameToUtf8": {
          "value": function () { return this.filename_to_utf8.apply(this, arguments); }
        },
        "iconvClose": {
          "value": function () { return this.iconv_close.apply(this, arguments); }
        },
        "initDynamic": {
          "value": function () { return this.init_dynamic.apply(this, arguments); }
        },
        "leGetDouble": {
          "value": function () { return this.le_get_double.apply(this, arguments); }
        },
        "leGetFloat": {
          "value": function () { return this.le_get_float.apply(this, arguments); }
        },
        "leGetGuint64": {
          "value": function () { return this.le_get_guint64.apply(this, arguments); }
        },
        "leSetDouble": {
          "value": function () { return this.le_set_double.apply(this, arguments); }
        },
        "leSetFloat": {
          "value": function () { return this.le_set_float.apply(this, arguments); }
        },
        "memDump": {
          "value": function () { return this.mem_dump.apply(this, arguments); }
        },
        "msoleCodepageToLid": {
          "value": function () { return this.msole_codepage_to_lid.apply(this, arguments); }
        },
        "msoleIconvOpenCodepageForExport": {
          "value": function () { return this.msole_iconv_open_codepage_for_export.apply(this, arguments); }
        },
        "msoleIconvOpenCodepageForImport": {
          "value": function () { return this.msole_iconv_open_codepage_for_import.apply(this, arguments); }
        },
        "msoleIconvOpenCodepagesForExport": {
          "value": function () { return this.msole_iconv_open_codepages_for_export.apply(this, arguments); }
        },
        "msoleIconvOpenForExport": {
          "value": function () { return this.msole_iconv_open_for_export.apply(this, arguments); }
        },
        "msoleIconvOpenForImport": {
          "value": function () { return this.msole_iconv_open_for_import.apply(this, arguments); }
        },
        "msoleIconvWinCodepage": {
          "value": function () { return this.msole_iconv_win_codepage.apply(this, arguments); }
        },
        "msoleInflate": {
          "value": function () { return this.msole_inflate.apply(this, arguments); }
        },
        "msoleLanguageForLid": {
          "value": function () { return this.msole_language_for_lid.apply(this, arguments); }
        },
        "msoleLidForLanguage": {
          "value": function () { return this.msole_lid_for_language.apply(this, arguments); }
        },
        "msoleLidToCodepage": {
          "value": function () { return this.msole_lid_to_codepage.apply(this, arguments); }
        },
        "msoleLidToCodepageStr": {
          "value": function () { return this.msole_lid_to_codepage_str.apply(this, arguments); }
        },
        "odfGetNs": {
          "value": function () { return this.odf_get_ns.apply(this, arguments); }
        },
        "odfGetVersion": {
          "value": function () { return this.odf_get_version.apply(this, arguments); }
        },
        "odfGetVersionString": {
          "value": function () { return this.odf_get_version_string.apply(this, arguments); }
        },
        "openPkgErrorId": {
          "value": function () { return this.open_pkg_error_id.apply(this, arguments); }
        },
        "openPkgForeachRel": {
          "value": function () { return this.open_pkg_foreach_rel.apply(this, arguments); }
        },
        "openPkgLookupRelById": {
          "value": function () { return this.open_pkg_lookup_rel_by_id.apply(this, arguments); }
        },
        "openPkgLookupRelByType": {
          "value": function () { return this.open_pkg_lookup_rel_by_type.apply(this, arguments); }
        },
        "openPkgOpenRel": {
          "value": function () { return this.open_pkg_open_rel.apply(this, arguments); }
        },
        "openPkgOpenRelById": {
          "value": function () { return this.open_pkg_open_rel_by_id.apply(this, arguments); }
        },
        "openPkgOpenRelByType": {
          "value": function () { return this.open_pkg_open_rel_by_type.apply(this, arguments); }
        },
        "openPkgParseRelById": {
          "value": function () { return this.open_pkg_parse_rel_by_id.apply(this, arguments); }
        },
        "propertySettingsCollect": {
          "value": function () { return this.property_settings_collect.apply(this, arguments); }
        },
        "propertySettingsCollectValist": {
          "value": function () { return this.property_settings_collect_valist.apply(this, arguments); }
        },
        "propertySettingsFind": {
          "value": function () { return this.property_settings_find.apply(this, arguments); }
        },
        "propertySettingsFree": {
          "value": function () { return this.property_settings_free.apply(this, arguments); }
        },
        "shutdownDynamic": {
          "value": function () { return this.shutdown_dynamic.apply(this, arguments); }
        },
        "valueGetDocpropVarray": {
          "value": function () { return this.value_get_docprop_varray.apply(this, arguments); }
        },
        "valueGetDocpropVector": {
          "value": function () { return this.value_get_docprop_vector.apply(this, arguments); }
        },
        "vbaInflate": {
          "value": function () { return this.vba_inflate.apply(this, arguments); }
        },
        "xmlGvalueFromStr": {
          "value": function () { return this.xml_gvalue_from_str.apply(this, arguments); }
        },
        "xmlParserContext": {
          "value": function () { return this.xml_parser_context.apply(this, arguments); }
        },
        "xmlProbe": {
          "value": function () { return this.xml_probe.apply(this, arguments); }
        }
      }
    },
    "Gst": {
      "class": {
        "Allocator": {
          "prototype": {
            "setDefault": {
              "value": function () { return this.set_default.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Bin": {
          "prototype": {
            "addMany": {
              "value": function () { return this.add_many.apply(this, arguments); }
            },
            "findUnlinkedPad": {
              "value": function () { return this.find_unlinked_pad.apply(this, arguments); }
            },
            "getByInterface": {
              "value": function () { return this.get_by_interface.apply(this, arguments); }
            },
            "getByName": {
              "value": function () { return this.get_by_name.apply(this, arguments); }
            },
            "getByNameRecurseUp": {
              "value": function () { return this.get_by_name_recurse_up.apply(this, arguments); }
            },
            "iterateAllByInterface": {
              "value": function () { return this.iterate_all_by_interface.apply(this, arguments); }
            },
            "iterateElements": {
              "value": function () { return this.iterate_elements.apply(this, arguments); }
            },
            "iterateRecurse": {
              "value": function () { return this.iterate_recurse.apply(this, arguments); }
            },
            "iterateSinks": {
              "value": function () { return this.iterate_sinks.apply(this, arguments); }
            },
            "iterateSorted": {
              "value": function () { return this.iterate_sorted.apply(this, arguments); }
            },
            "iterateSources": {
              "value": function () { return this.iterate_sources.apply(this, arguments); }
            },
            "recalculateLatency": {
              "value": function () { return this.recalculate_latency.apply(this, arguments); }
            },
            "removeMany": {
              "value": function () { return this.remove_many.apply(this, arguments); }
            },
            "syncChildrenStates": {
              "value": function () { return this.sync_children_states.apply(this, arguments); }
            },
            "asyncHandling": {
              "get": function () { return this.async_handling; },
              "set": function (value) { this.async_handling = value; }
            },
            "messageForward": {
              "get": function () { return this.message_forward; },
              "set": function (value) { this.message_forward = value; }
            }
          },
          "static": {}
        },
        "Bitmask": {
          "prototype": {},
          "static": {}
        },
        "BufferPool": {
          "prototype": {
            "acquireBuffer": {
              "value": function () { return this.acquire_buffer.apply(this, arguments); }
            },
            "getConfig": {
              "value": function () { return this.get_config.apply(this, arguments); }
            },
            "getOptions": {
              "value": function () { return this.get_options.apply(this, arguments); }
            },
            "hasOption": {
              "value": function () { return this.has_option.apply(this, arguments); }
            },
            "isActive": {
              "value": function () { return this.is_active.apply(this, arguments); }
            },
            "releaseBuffer": {
              "value": function () { return this.release_buffer.apply(this, arguments); }
            },
            "setActive": {
              "value": function () { return this.set_active.apply(this, arguments); }
            },
            "setConfig": {
              "value": function () { return this.set_config.apply(this, arguments); }
            },
            "setFlushing": {
              "value": function () { return this.set_flushing.apply(this, arguments); }
            }
          },
          "static": {
            "configAddOption": {
              "value": function () { return this.config_add_option.apply(this, arguments); }
            },
            "configGetAllocator": {
              "value": function () { return this.config_get_allocator.apply(this, arguments); }
            },
            "configGetOption": {
              "value": function () { return this.config_get_option.apply(this, arguments); }
            },
            "configGetParams": {
              "value": function () { return this.config_get_params.apply(this, arguments); }
            },
            "configHasOption": {
              "value": function () { return this.config_has_option.apply(this, arguments); }
            },
            "configNOptions": {
              "value": function () { return this.config_n_options.apply(this, arguments); }
            },
            "configSetAllocator": {
              "value": function () { return this.config_set_allocator.apply(this, arguments); }
            },
            "configSetParams": {
              "value": function () { return this.config_set_params.apply(this, arguments); }
            },
            "configValidateParams": {
              "value": function () { return this.config_validate_params.apply(this, arguments); }
            }
          }
        },
        "Bus": {
          "prototype": {
            "addSignalWatch": {
              "value": function () { return this.add_signal_watch.apply(this, arguments); }
            },
            "addSignalWatchFull": {
              "value": function () { return this.add_signal_watch_full.apply(this, arguments); }
            },
            "addWatch": {
              "value": function () { return this.add_watch.apply(this, arguments); }
            },
            "addWatchFull": {
              "value": function () { return this.add_watch_full.apply(this, arguments); }
            },
            "asyncSignalFunc": {
              "value": function () { return this.async_signal_func.apply(this, arguments); }
            },
            "createWatch": {
              "value": function () { return this.create_watch.apply(this, arguments); }
            },
            "disableSyncMessageEmission": {
              "value": function () { return this.disable_sync_message_emission.apply(this, arguments); }
            },
            "enableSyncMessageEmission": {
              "value": function () { return this.enable_sync_message_emission.apply(this, arguments); }
            },
            "havePending": {
              "value": function () { return this.have_pending.apply(this, arguments); }
            },
            "popFiltered": {
              "value": function () { return this.pop_filtered.apply(this, arguments); }
            },
            "removeSignalWatch": {
              "value": function () { return this.remove_signal_watch.apply(this, arguments); }
            },
            "removeWatch": {
              "value": function () { return this.remove_watch.apply(this, arguments); }
            },
            "setFlushing": {
              "value": function () { return this.set_flushing.apply(this, arguments); }
            },
            "setSyncHandler": {
              "value": function () { return this.set_sync_handler.apply(this, arguments); }
            },
            "syncSignalHandler": {
              "value": function () { return this.sync_signal_handler.apply(this, arguments); }
            },
            "timedPop": {
              "value": function () { return this.timed_pop.apply(this, arguments); }
            },
            "timedPopFiltered": {
              "value": function () { return this.timed_pop_filtered.apply(this, arguments); }
            },
            "enableAsync": {
              "get": function () { return this.enable_async; },
              "set": function (value) { this.enable_async = value; }
            }
          },
          "static": {}
        },
        "Clock": {
          "prototype": {
            "addObservation": {
              "value": function () { return this.add_observation.apply(this, arguments); }
            },
            "addObservationUnapplied": {
              "value": function () { return this.add_observation_unapplied.apply(this, arguments); }
            },
            "adjustUnlocked": {
              "value": function () { return this.adjust_unlocked.apply(this, arguments); }
            },
            "adjustWithCalibration": {
              "value": function () { return this.adjust_with_calibration.apply(this, arguments); }
            },
            "getCalibration": {
              "value": function () { return this.get_calibration.apply(this, arguments); }
            },
            "getInternalTime": {
              "value": function () { return this.get_internal_time.apply(this, arguments); }
            },
            "getMaster": {
              "value": function () { return this.get_master.apply(this, arguments); }
            },
            "getResolution": {
              "value": function () { return this.get_resolution.apply(this, arguments); }
            },
            "getTime": {
              "value": function () { return this.get_time.apply(this, arguments); }
            },
            "getTimeout": {
              "value": function () { return this.get_timeout.apply(this, arguments); }
            },
            "isSynced": {
              "value": function () { return this.is_synced.apply(this, arguments); }
            },
            "newPeriodicId": {
              "value": function () { return this.new_periodic_id.apply(this, arguments); }
            },
            "newSingleShotId": {
              "value": function () { return this.new_single_shot_id.apply(this, arguments); }
            },
            "periodicIdReinit": {
              "value": function () { return this.periodic_id_reinit.apply(this, arguments); }
            },
            "setCalibration": {
              "value": function () { return this.set_calibration.apply(this, arguments); }
            },
            "setMaster": {
              "value": function () { return this.set_master.apply(this, arguments); }
            },
            "setResolution": {
              "value": function () { return this.set_resolution.apply(this, arguments); }
            },
            "setSynced": {
              "value": function () { return this.set_synced.apply(this, arguments); }
            },
            "setTimeout": {
              "value": function () { return this.set_timeout.apply(this, arguments); }
            },
            "singleShotIdReinit": {
              "value": function () { return this.single_shot_id_reinit.apply(this, arguments); }
            },
            "unadjustUnlocked": {
              "value": function () { return this.unadjust_unlocked.apply(this, arguments); }
            },
            "waitForSync": {
              "value": function () { return this.wait_for_sync.apply(this, arguments); }
            },
            "windowSize": {
              "get": function () { return this.window_size; },
              "set": function (value) { this.window_size = value; }
            },
            "windowThreshold": {
              "get": function () { return this.window_threshold; },
              "set": function (value) { this.window_threshold = value; }
            }
          },
          "static": {
            "idCompareFunc": {
              "value": function () { return this.id_compare_func.apply(this, arguments); }
            },
            "idGetTime": {
              "value": function () { return this.id_get_time.apply(this, arguments); }
            },
            "idRef": {
              "value": function () { return this.id_ref.apply(this, arguments); }
            },
            "idUnref": {
              "value": function () { return this.id_unref.apply(this, arguments); }
            },
            "idUnschedule": {
              "value": function () { return this.id_unschedule.apply(this, arguments); }
            },
            "idWait": {
              "value": function () { return this.id_wait.apply(this, arguments); }
            },
            "idWaitAsync": {
              "value": function () { return this.id_wait_async.apply(this, arguments); }
            }
          }
        },
        "ControlBinding": {
          "prototype": {
            "getGValueArray": {
              "value": function () { return this.get_g_value_array.apply(this, arguments); }
            },
            "getValue": {
              "value": function () { return this.get_value.apply(this, arguments); }
            },
            "getValueArray": {
              "value": function () { return this.get_value_array.apply(this, arguments); }
            },
            "isDisabled": {
              "value": function () { return this.is_disabled.apply(this, arguments); }
            },
            "setDisabled": {
              "value": function () { return this.set_disabled.apply(this, arguments); }
            },
            "syncValues": {
              "value": function () { return this.sync_values.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "ControlSource": {
          "prototype": {
            "controlSourceGetValue": {
              "value": function () { return this.control_source_get_value.apply(this, arguments); }
            },
            "controlSourceGetValueArray": {
              "value": function () { return this.control_source_get_value_array.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Device": {
          "prototype": {
            "createElement": {
              "value": function () { return this.create_element.apply(this, arguments); }
            },
            "getCaps": {
              "value": function () { return this.get_caps.apply(this, arguments); }
            },
            "getDeviceClass": {
              "value": function () { return this.get_device_class.apply(this, arguments); }
            },
            "getDisplayName": {
              "value": function () { return this.get_display_name.apply(this, arguments); }
            },
            "getProperties": {
              "value": function () { return this.get_properties.apply(this, arguments); }
            },
            "hasClasses": {
              "value": function () { return this.has_classes.apply(this, arguments); }
            },
            "hasClassesv": {
              "value": function () { return this.has_classesv.apply(this, arguments); }
            },
            "reconfigureElement": {
              "value": function () { return this.reconfigure_element.apply(this, arguments); }
            },
            "deviceClass": {
              "get": function () { return this.device_class; },
              "set": function (value) { this.device_class = value; }
            },
            "displayName": {
              "get": function () { return this.display_name; },
              "set": function (value) { this.display_name = value; }
            }
          },
          "static": {}
        },
        "DeviceMonitor": {
          "prototype": {
            "addFilter": {
              "value": function () { return this.add_filter.apply(this, arguments); }
            },
            "getBus": {
              "value": function () { return this.get_bus.apply(this, arguments); }
            },
            "getDevices": {
              "value": function () { return this.get_devices.apply(this, arguments); }
            },
            "getProviders": {
              "value": function () { return this.get_providers.apply(this, arguments); }
            },
            "getShowAllDevices": {
              "value": function () { return this.get_show_all_devices.apply(this, arguments); }
            },
            "removeFilter": {
              "value": function () { return this.remove_filter.apply(this, arguments); }
            },
            "setShowAllDevices": {
              "value": function () { return this.set_show_all_devices.apply(this, arguments); }
            },
            "showAll": {
              "get": function () { return this.show_all; },
              "set": function (value) { this.show_all = value; }
            }
          },
          "static": {}
        },
        "DeviceProvider": {
          "prototype": {
            "canMonitor": {
              "value": function () { return this.can_monitor.apply(this, arguments); }
            },
            "deviceAdd": {
              "value": function () { return this.device_add.apply(this, arguments); }
            },
            "deviceRemove": {
              "value": function () { return this.device_remove.apply(this, arguments); }
            },
            "getBus": {
              "value": function () { return this.get_bus.apply(this, arguments); }
            },
            "getDevices": {
              "value": function () { return this.get_devices.apply(this, arguments); }
            },
            "getFactory": {
              "value": function () { return this.get_factory.apply(this, arguments); }
            },
            "getHiddenProviders": {
              "value": function () { return this.get_hidden_providers.apply(this, arguments); }
            },
            "hideProvider": {
              "value": function () { return this.hide_provider.apply(this, arguments); }
            },
            "unhideProvider": {
              "value": function () { return this.unhide_provider.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DeviceProviderFactory": {
          "prototype": {
            "getDeviceProviderType": {
              "value": function () { return this.get_device_provider_type.apply(this, arguments); }
            },
            "getMetadata": {
              "value": function () { return this.get_metadata.apply(this, arguments); }
            },
            "getMetadataKeys": {
              "value": function () { return this.get_metadata_keys.apply(this, arguments); }
            },
            "hasClasses": {
              "value": function () { return this.has_classes.apply(this, arguments); }
            },
            "hasClassesv": {
              "value": function () { return this.has_classesv.apply(this, arguments); }
            }
          },
          "static": {
            "getByName": {
              "value": function () { return this.get_by_name.apply(this, arguments); }
            },
            "listGetDeviceProviders": {
              "value": function () { return this.list_get_device_providers.apply(this, arguments); }
            }
          }
        },
        "DoubleRange": {
          "prototype": {},
          "static": {}
        },
        "Element": {
          "prototype": {
            "abortState": {
              "value": function () { return this.abort_state.apply(this, arguments); }
            },
            "addPad": {
              "value": function () { return this.add_pad.apply(this, arguments); }
            },
            "changeState": {
              "value": function () { return this.change_state.apply(this, arguments); }
            },
            "continueState": {
              "value": function () { return this.continue_state.apply(this, arguments); }
            },
            "createAllPads": {
              "value": function () { return this.create_all_pads.apply(this, arguments); }
            },
            "getBaseTime": {
              "value": function () { return this.get_base_time.apply(this, arguments); }
            },
            "getBus": {
              "value": function () { return this.get_bus.apply(this, arguments); }
            },
            "getClock": {
              "value": function () { return this.get_clock.apply(this, arguments); }
            },
            "getCompatiblePad": {
              "value": function () { return this.get_compatible_pad.apply(this, arguments); }
            },
            "getCompatiblePadTemplate": {
              "value": function () { return this.get_compatible_pad_template.apply(this, arguments); }
            },
            "getFactory": {
              "value": function () { return this.get_factory.apply(this, arguments); }
            },
            "getRequestPad": {
              "value": function () { return this.get_request_pad.apply(this, arguments); }
            },
            "getStartTime": {
              "value": function () { return this.get_start_time.apply(this, arguments); }
            },
            "getState": {
              "value": function () { return this.get_state.apply(this, arguments); }
            },
            "getStaticPad": {
              "value": function () { return this.get_static_pad.apply(this, arguments); }
            },
            "isLockedState": {
              "value": function () { return this.is_locked_state.apply(this, arguments); }
            },
            "iteratePads": {
              "value": function () { return this.iterate_pads.apply(this, arguments); }
            },
            "iterateSinkPads": {
              "value": function () { return this.iterate_sink_pads.apply(this, arguments); }
            },
            "iterateSrcPads": {
              "value": function () { return this.iterate_src_pads.apply(this, arguments); }
            },
            "linkFiltered": {
              "value": function () { return this.link_filtered.apply(this, arguments); }
            },
            "linkMany": {
              "value": function () { return this.link_many.apply(this, arguments); }
            },
            "linkPads": {
              "value": function () { return this.link_pads.apply(this, arguments); }
            },
            "linkPadsFiltered": {
              "value": function () { return this.link_pads_filtered.apply(this, arguments); }
            },
            "linkPadsFull": {
              "value": function () { return this.link_pads_full.apply(this, arguments); }
            },
            "lostState": {
              "value": function () { return this.lost_state.apply(this, arguments); }
            },
            "messageFull": {
              "value": function () { return this.message_full.apply(this, arguments); }
            },
            "noMorePads": {
              "value": function () { return this.no_more_pads.apply(this, arguments); }
            },
            "postMessage": {
              "value": function () { return this.post_message.apply(this, arguments); }
            },
            "provideClock": {
              "value": function () { return this.provide_clock.apply(this, arguments); }
            },
            "queryConvert": {
              "value": function () { return this.query_convert.apply(this, arguments); }
            },
            "queryDuration": {
              "value": function () { return this.query_duration.apply(this, arguments); }
            },
            "queryPosition": {
              "value": function () { return this.query_position.apply(this, arguments); }
            },
            "releaseRequestPad": {
              "value": function () { return this.release_request_pad.apply(this, arguments); }
            },
            "removePad": {
              "value": function () { return this.remove_pad.apply(this, arguments); }
            },
            "requestPad": {
              "value": function () { return this.request_pad.apply(this, arguments); }
            },
            "seekSimple": {
              "value": function () { return this.seek_simple.apply(this, arguments); }
            },
            "sendEvent": {
              "value": function () { return this.send_event.apply(this, arguments); }
            },
            "setBaseTime": {
              "value": function () { return this.set_base_time.apply(this, arguments); }
            },
            "setBus": {
              "value": function () { return this.set_bus.apply(this, arguments); }
            },
            "setClock": {
              "value": function () { return this.set_clock.apply(this, arguments); }
            },
            "setContext": {
              "value": function () { return this.set_context.apply(this, arguments); }
            },
            "setLockedState": {
              "value": function () { return this.set_locked_state.apply(this, arguments); }
            },
            "setStartTime": {
              "value": function () { return this.set_start_time.apply(this, arguments); }
            },
            "setState": {
              "value": function () { return this.set_state.apply(this, arguments); }
            },
            "syncStateWithParent": {
              "value": function () { return this.sync_state_with_parent.apply(this, arguments); }
            },
            "unlinkMany": {
              "value": function () { return this.unlink_many.apply(this, arguments); }
            },
            "unlinkPads": {
              "value": function () { return this.unlink_pads.apply(this, arguments); }
            }
          },
          "static": {
            "makeFromUri": {
              "value": function () { return this.make_from_uri.apply(this, arguments); }
            },
            "stateChangeReturnGetName": {
              "value": function () { return this.state_change_return_get_name.apply(this, arguments); }
            },
            "stateGetName": {
              "value": function () { return this.state_get_name.apply(this, arguments); }
            }
          }
        },
        "ElementFactory": {
          "prototype": {
            "canSinkAllCaps": {
              "value": function () { return this.can_sink_all_caps.apply(this, arguments); }
            },
            "canSinkAnyCaps": {
              "value": function () { return this.can_sink_any_caps.apply(this, arguments); }
            },
            "canSrcAllCaps": {
              "value": function () { return this.can_src_all_caps.apply(this, arguments); }
            },
            "canSrcAnyCaps": {
              "value": function () { return this.can_src_any_caps.apply(this, arguments); }
            },
            "getElementType": {
              "value": function () { return this.get_element_type.apply(this, arguments); }
            },
            "getMetadata": {
              "value": function () { return this.get_metadata.apply(this, arguments); }
            },
            "getMetadataKeys": {
              "value": function () { return this.get_metadata_keys.apply(this, arguments); }
            },
            "getNumPadTemplates": {
              "value": function () { return this.get_num_pad_templates.apply(this, arguments); }
            },
            "getStaticPadTemplates": {
              "value": function () { return this.get_static_pad_templates.apply(this, arguments); }
            },
            "getUriProtocols": {
              "value": function () { return this.get_uri_protocols.apply(this, arguments); }
            },
            "getUriType": {
              "value": function () { return this.get_uri_type.apply(this, arguments); }
            },
            "hasInterface": {
              "value": function () { return this.has_interface.apply(this, arguments); }
            },
            "listIsType": {
              "value": function () { return this.list_is_type.apply(this, arguments); }
            }
          },
          "static": {
            "listFilter": {
              "value": function () { return this.list_filter.apply(this, arguments); }
            },
            "listGetElements": {
              "value": function () { return this.list_get_elements.apply(this, arguments); }
            }
          }
        },
        "FlagSet": {
          "prototype": {},
          "static": {}
        },
        "Fraction": {
          "prototype": {},
          "static": {}
        },
        "FractionRange": {
          "prototype": {},
          "static": {}
        },
        "GhostPad": {
          "prototype": {
            "getTarget": {
              "value": function () { return this.get_target.apply(this, arguments); }
            },
            "setTarget": {
              "value": function () { return this.set_target.apply(this, arguments); }
            }
          },
          "static": {
            "activateModeDefault": {
              "value": function () { return this.activate_mode_default.apply(this, arguments); }
            },
            "internalActivateModeDefault": {
              "value": function () { return this.internal_activate_mode_default.apply(this, arguments); }
            }
          }
        },
        "Int64Range": {
          "prototype": {},
          "static": {}
        },
        "IntRange": {
          "prototype": {},
          "static": {}
        },
        "Object": {
          "prototype": {
            "addControlBinding": {
              "value": function () { return this.add_control_binding.apply(this, arguments); }
            },
            "defaultError": {
              "value": function () { return this.default_error.apply(this, arguments); }
            },
            "getControlBinding": {
              "value": function () { return this.get_control_binding.apply(this, arguments); }
            },
            "getControlRate": {
              "value": function () { return this.get_control_rate.apply(this, arguments); }
            },
            "getGValueArray": {
              "value": function () { return this.get_g_value_array.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getParent": {
              "value": function () { return this.get_parent.apply(this, arguments); }
            },
            "getPathString": {
              "value": function () { return this.get_path_string.apply(this, arguments); }
            },
            "getValue": {
              "value": function () { return this.get_value.apply(this, arguments); }
            },
            "getValueArray": {
              "value": function () { return this.get_value_array.apply(this, arguments); }
            },
            "hasActiveControlBindings": {
              "value": function () { return this.has_active_control_bindings.apply(this, arguments); }
            },
            "hasAncestor": {
              "value": function () { return this.has_ancestor.apply(this, arguments); }
            },
            "hasAsAncestor": {
              "value": function () { return this.has_as_ancestor.apply(this, arguments); }
            },
            "hasAsParent": {
              "value": function () { return this.has_as_parent.apply(this, arguments); }
            },
            "removeControlBinding": {
              "value": function () { return this.remove_control_binding.apply(this, arguments); }
            },
            "setControlBindingDisabled": {
              "value": function () { return this.set_control_binding_disabled.apply(this, arguments); }
            },
            "setControlBindingsDisabled": {
              "value": function () { return this.set_control_bindings_disabled.apply(this, arguments); }
            },
            "setControlRate": {
              "value": function () { return this.set_control_rate.apply(this, arguments); }
            },
            "setName": {
              "value": function () { return this.set_name.apply(this, arguments); }
            },
            "setParent": {
              "value": function () { return this.set_parent.apply(this, arguments); }
            },
            "suggestNextSync": {
              "value": function () { return this.suggest_next_sync.apply(this, arguments); }
            },
            "syncValues": {
              "value": function () { return this.sync_values.apply(this, arguments); }
            }
          },
          "static": {
            "checkUniqueness": {
              "value": function () { return this.check_uniqueness.apply(this, arguments); }
            },
            "defaultDeepNotify": {
              "value": function () { return this.default_deep_notify.apply(this, arguments); }
            },
            "refSink": {
              "value": function () { return this.ref_sink.apply(this, arguments); }
            }
          }
        },
        "Pad": {
          "prototype": {
            "activateMode": {
              "value": function () { return this.activate_mode.apply(this, arguments); }
            },
            "addProbe": {
              "value": function () { return this.add_probe.apply(this, arguments); }
            },
            "canLink": {
              "value": function () { return this.can_link.apply(this, arguments); }
            },
            "chainList": {
              "value": function () { return this.chain_list.apply(this, arguments); }
            },
            "checkReconfigure": {
              "value": function () { return this.check_reconfigure.apply(this, arguments); }
            },
            "createStreamId": {
              "value": function () { return this.create_stream_id.apply(this, arguments); }
            },
            "createStreamIdPrintf": {
              "value": function () { return this.create_stream_id_printf.apply(this, arguments); }
            },
            "createStreamIdPrintfValist": {
              "value": function () { return this.create_stream_id_printf_valist.apply(this, arguments); }
            },
            "eventDefault": {
              "value": function () { return this.event_default.apply(this, arguments); }
            },
            "getAllowedCaps": {
              "value": function () { return this.get_allowed_caps.apply(this, arguments); }
            },
            "getCurrentCaps": {
              "value": function () { return this.get_current_caps.apply(this, arguments); }
            },
            "getDirection": {
              "value": function () { return this.get_direction.apply(this, arguments); }
            },
            "getElementPrivate": {
              "value": function () { return this.get_element_private.apply(this, arguments); }
            },
            "getLastFlowReturn": {
              "value": function () { return this.get_last_flow_return.apply(this, arguments); }
            },
            "getOffset": {
              "value": function () { return this.get_offset.apply(this, arguments); }
            },
            "getPadTemplate": {
              "value": function () { return this.get_pad_template.apply(this, arguments); }
            },
            "getPadTemplateCaps": {
              "value": function () { return this.get_pad_template_caps.apply(this, arguments); }
            },
            "getParentElement": {
              "value": function () { return this.get_parent_element.apply(this, arguments); }
            },
            "getPeer": {
              "value": function () { return this.get_peer.apply(this, arguments); }
            },
            "getRange": {
              "value": function () { return this.get_range.apply(this, arguments); }
            },
            "getStickyEvent": {
              "value": function () { return this.get_sticky_event.apply(this, arguments); }
            },
            "getStreamId": {
              "value": function () { return this.get_stream_id.apply(this, arguments); }
            },
            "hasCurrentCaps": {
              "value": function () { return this.has_current_caps.apply(this, arguments); }
            },
            "isActive": {
              "value": function () { return this.is_active.apply(this, arguments); }
            },
            "isBlocked": {
              "value": function () { return this.is_blocked.apply(this, arguments); }
            },
            "isBlocking": {
              "value": function () { return this.is_blocking.apply(this, arguments); }
            },
            "isLinked": {
              "value": function () { return this.is_linked.apply(this, arguments); }
            },
            "iterateInternalLinks": {
              "value": function () { return this.iterate_internal_links.apply(this, arguments); }
            },
            "iterateInternalLinksDefault": {
              "value": function () { return this.iterate_internal_links_default.apply(this, arguments); }
            },
            "linkFull": {
              "value": function () { return this.link_full.apply(this, arguments); }
            },
            "markReconfigure": {
              "value": function () { return this.mark_reconfigure.apply(this, arguments); }
            },
            "needsReconfigure": {
              "value": function () { return this.needs_reconfigure.apply(this, arguments); }
            },
            "pauseTask": {
              "value": function () { return this.pause_task.apply(this, arguments); }
            },
            "peerQuery": {
              "value": function () { return this.peer_query.apply(this, arguments); }
            },
            "peerQueryAcceptCaps": {
              "value": function () { return this.peer_query_accept_caps.apply(this, arguments); }
            },
            "peerQueryCaps": {
              "value": function () { return this.peer_query_caps.apply(this, arguments); }
            },
            "peerQueryConvert": {
              "value": function () { return this.peer_query_convert.apply(this, arguments); }
            },
            "peerQueryDuration": {
              "value": function () { return this.peer_query_duration.apply(this, arguments); }
            },
            "peerQueryPosition": {
              "value": function () { return this.peer_query_position.apply(this, arguments); }
            },
            "proxyQueryAcceptCaps": {
              "value": function () { return this.proxy_query_accept_caps.apply(this, arguments); }
            },
            "proxyQueryCaps": {
              "value": function () { return this.proxy_query_caps.apply(this, arguments); }
            },
            "pullRange": {
              "value": function () { return this.pull_range.apply(this, arguments); }
            },
            "pushEvent": {
              "value": function () { return this.push_event.apply(this, arguments); }
            },
            "pushList": {
              "value": function () { return this.push_list.apply(this, arguments); }
            },
            "queryAcceptCaps": {
              "value": function () { return this.query_accept_caps.apply(this, arguments); }
            },
            "queryCaps": {
              "value": function () { return this.query_caps.apply(this, arguments); }
            },
            "queryConvert": {
              "value": function () { return this.query_convert.apply(this, arguments); }
            },
            "queryDefault": {
              "value": function () { return this.query_default.apply(this, arguments); }
            },
            "queryDuration": {
              "value": function () { return this.query_duration.apply(this, arguments); }
            },
            "queryPosition": {
              "value": function () { return this.query_position.apply(this, arguments); }
            },
            "removeProbe": {
              "value": function () { return this.remove_probe.apply(this, arguments); }
            },
            "sendEvent": {
              "value": function () { return this.send_event.apply(this, arguments); }
            },
            "setActivateFunctionFull": {
              "value": function () { return this.set_activate_function_full.apply(this, arguments); }
            },
            "setActivatemodeFunctionFull": {
              "value": function () { return this.set_activatemode_function_full.apply(this, arguments); }
            },
            "setActive": {
              "value": function () { return this.set_active.apply(this, arguments); }
            },
            "setChainFunctionFull": {
              "value": function () { return this.set_chain_function_full.apply(this, arguments); }
            },
            "setChainListFunctionFull": {
              "value": function () { return this.set_chain_list_function_full.apply(this, arguments); }
            },
            "setElementPrivate": {
              "value": function () { return this.set_element_private.apply(this, arguments); }
            },
            "setEventFunctionFull": {
              "value": function () { return this.set_event_function_full.apply(this, arguments); }
            },
            "setGetrangeFunctionFull": {
              "value": function () { return this.set_getrange_function_full.apply(this, arguments); }
            },
            "setIterateInternalLinksFunctionFull": {
              "value": function () { return this.set_iterate_internal_links_function_full.apply(this, arguments); }
            },
            "setLinkFunctionFull": {
              "value": function () { return this.set_link_function_full.apply(this, arguments); }
            },
            "setOffset": {
              "value": function () { return this.set_offset.apply(this, arguments); }
            },
            "setQueryFunctionFull": {
              "value": function () { return this.set_query_function_full.apply(this, arguments); }
            },
            "setUnlinkFunctionFull": {
              "value": function () { return this.set_unlink_function_full.apply(this, arguments); }
            },
            "startTask": {
              "value": function () { return this.start_task.apply(this, arguments); }
            },
            "stickyEventsForeach": {
              "value": function () { return this.sticky_events_foreach.apply(this, arguments); }
            },
            "stopTask": {
              "value": function () { return this.stop_task.apply(this, arguments); }
            },
            "storeStickyEvent": {
              "value": function () { return this.store_sticky_event.apply(this, arguments); }
            },
            "useFixedCaps": {
              "value": function () { return this.use_fixed_caps.apply(this, arguments); }
            }
          },
          "static": {
            "linkGetName": {
              "value": function () { return this.link_get_name.apply(this, arguments); }
            }
          }
        },
        "PadTemplate": {
          "prototype": {
            "getCaps": {
              "value": function () { return this.get_caps.apply(this, arguments); }
            },
            "padCreated": {
              "value": function () { return this.pad_created.apply(this, arguments); }
            },
            "nameTemplate": {
              "get": function () { return this.name_template; },
              "set": function (value) { this.name_template = value; }
            }
          },
          "static": {}
        },
        "ParamFraction": {
          "prototype": {},
          "static": {}
        },
        "Pipeline": {
          "prototype": {
            "autoClock": {
              "value": function () { return this.auto_clock.apply(this, arguments); }
            },
            "getAutoFlushBus": {
              "value": function () { return this.get_auto_flush_bus.apply(this, arguments); }
            },
            "getBus": {
              "value": function () { return this.get_bus.apply(this, arguments); }
            },
            "getClock": {
              "value": function () { return this.get_clock.apply(this, arguments); }
            },
            "getDelay": {
              "value": function () { return this.get_delay.apply(this, arguments); }
            },
            "getLatency": {
              "value": function () { return this.get_latency.apply(this, arguments); }
            },
            "getPipelineClock": {
              "value": function () { return this.get_pipeline_clock.apply(this, arguments); }
            },
            "setAutoFlushBus": {
              "value": function () { return this.set_auto_flush_bus.apply(this, arguments); }
            },
            "setClock": {
              "value": function () { return this.set_clock.apply(this, arguments); }
            },
            "setDelay": {
              "value": function () { return this.set_delay.apply(this, arguments); }
            },
            "setLatency": {
              "value": function () { return this.set_latency.apply(this, arguments); }
            },
            "useClock": {
              "value": function () { return this.use_clock.apply(this, arguments); }
            },
            "autoFlushBus": {
              "get": function () { return this.auto_flush_bus; },
              "set": function (value) { this.auto_flush_bus = value; }
            }
          },
          "static": {}
        },
        "Plugin": {
          "prototype": {
            "addDependency": {
              "value": function () { return this.add_dependency.apply(this, arguments); }
            },
            "addDependencySimple": {
              "value": function () { return this.add_dependency_simple.apply(this, arguments); }
            },
            "getCacheData": {
              "value": function () { return this.get_cache_data.apply(this, arguments); }
            },
            "getDescription": {
              "value": function () { return this.get_description.apply(this, arguments); }
            },
            "getFilename": {
              "value": function () { return this.get_filename.apply(this, arguments); }
            },
            "getLicense": {
              "value": function () { return this.get_license.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getOrigin": {
              "value": function () { return this.get_origin.apply(this, arguments); }
            },
            "getPackage": {
              "value": function () { return this.get_package.apply(this, arguments); }
            },
            "getReleaseDateString": {
              "value": function () { return this.get_release_date_string.apply(this, arguments); }
            },
            "getSource": {
              "value": function () { return this.get_source.apply(this, arguments); }
            },
            "getVersion": {
              "value": function () { return this.get_version.apply(this, arguments); }
            },
            "isLoaded": {
              "value": function () { return this.is_loaded.apply(this, arguments); }
            },
            "setCacheData": {
              "value": function () { return this.set_cache_data.apply(this, arguments); }
            }
          },
          "static": {
            "listFree": {
              "value": function () { return this.list_free.apply(this, arguments); }
            },
            "loadByName": {
              "value": function () { return this.load_by_name.apply(this, arguments); }
            },
            "loadFile": {
              "value": function () { return this.load_file.apply(this, arguments); }
            },
            "registerStatic": {
              "value": function () { return this.register_static.apply(this, arguments); }
            },
            "registerStaticFull": {
              "value": function () { return this.register_static_full.apply(this, arguments); }
            }
          }
        },
        "PluginFeature": {
          "prototype": {
            "checkVersion": {
              "value": function () { return this.check_version.apply(this, arguments); }
            },
            "getPlugin": {
              "value": function () { return this.get_plugin.apply(this, arguments); }
            },
            "getPluginName": {
              "value": function () { return this.get_plugin_name.apply(this, arguments); }
            },
            "getRank": {
              "value": function () { return this.get_rank.apply(this, arguments); }
            },
            "setRank": {
              "value": function () { return this.set_rank.apply(this, arguments); }
            }
          },
          "static": {
            "listCopy": {
              "value": function () { return this.list_copy.apply(this, arguments); }
            },
            "listDebug": {
              "value": function () { return this.list_debug.apply(this, arguments); }
            },
            "listFree": {
              "value": function () { return this.list_free.apply(this, arguments); }
            },
            "rankCompareFunc": {
              "value": function () { return this.rank_compare_func.apply(this, arguments); }
            }
          }
        },
        "ProxyPad": {
          "prototype": {
            "getInternal": {
              "value": function () { return this.get_internal.apply(this, arguments); }
            }
          },
          "static": {
            "chainDefault": {
              "value": function () { return this.chain_default.apply(this, arguments); }
            },
            "chainListDefault": {
              "value": function () { return this.chain_list_default.apply(this, arguments); }
            },
            "getrangeDefault": {
              "value": function () { return this.getrange_default.apply(this, arguments); }
            },
            "iterateInternalLinksDefault": {
              "value": function () { return this.iterate_internal_links_default.apply(this, arguments); }
            }
          }
        },
        "Registry": {
          "prototype": {
            "addFeature": {
              "value": function () { return this.add_feature.apply(this, arguments); }
            },
            "addPlugin": {
              "value": function () { return this.add_plugin.apply(this, arguments); }
            },
            "checkFeatureVersion": {
              "value": function () { return this.check_feature_version.apply(this, arguments); }
            },
            "featureFilter": {
              "value": function () { return this.feature_filter.apply(this, arguments); }
            },
            "findFeature": {
              "value": function () { return this.find_feature.apply(this, arguments); }
            },
            "findPlugin": {
              "value": function () { return this.find_plugin.apply(this, arguments); }
            },
            "getFeatureList": {
              "value": function () { return this.get_feature_list.apply(this, arguments); }
            },
            "getFeatureListByPlugin": {
              "value": function () { return this.get_feature_list_by_plugin.apply(this, arguments); }
            },
            "getFeatureListCookie": {
              "value": function () { return this.get_feature_list_cookie.apply(this, arguments); }
            },
            "getPluginList": {
              "value": function () { return this.get_plugin_list.apply(this, arguments); }
            },
            "lookupFeature": {
              "value": function () { return this.lookup_feature.apply(this, arguments); }
            },
            "pluginFilter": {
              "value": function () { return this.plugin_filter.apply(this, arguments); }
            },
            "removeFeature": {
              "value": function () { return this.remove_feature.apply(this, arguments); }
            },
            "removePlugin": {
              "value": function () { return this.remove_plugin.apply(this, arguments); }
            },
            "scanPath": {
              "value": function () { return this.scan_path.apply(this, arguments); }
            }
          },
          "static": {
            "forkIsEnabled": {
              "value": function () { return this.fork_is_enabled.apply(this, arguments); }
            },
            "forkSetEnabled": {
              "value": function () { return this.fork_set_enabled.apply(this, arguments); }
            }
          }
        },
        "SystemClock": {
          "prototype": {
            "clockType": {
              "get": function () { return this.clock_type; },
              "set": function (value) { this.clock_type = value; }
            }
          },
          "static": {
            "setDefault": {
              "value": function () { return this.set_default.apply(this, arguments); }
            }
          }
        },
        "Task": {
          "prototype": {
            "getPool": {
              "value": function () { return this.get_pool.apply(this, arguments); }
            },
            "getState": {
              "value": function () { return this.get_state.apply(this, arguments); }
            },
            "setEnterCallback": {
              "value": function () { return this.set_enter_callback.apply(this, arguments); }
            },
            "setLeaveCallback": {
              "value": function () { return this.set_leave_callback.apply(this, arguments); }
            },
            "setLock": {
              "value": function () { return this.set_lock.apply(this, arguments); }
            },
            "setPool": {
              "value": function () { return this.set_pool.apply(this, arguments); }
            },
            "setState": {
              "value": function () { return this.set_state.apply(this, arguments); }
            }
          },
          "static": {
            "cleanupAll": {
              "value": function () { return this.cleanup_all.apply(this, arguments); }
            }
          }
        },
        "TaskPool": {
          "prototype": {},
          "static": {}
        },
        "TypeFindFactory": {
          "prototype": {
            "callFunction": {
              "value": function () { return this.call_function.apply(this, arguments); }
            },
            "getCaps": {
              "value": function () { return this.get_caps.apply(this, arguments); }
            },
            "getExtensions": {
              "value": function () { return this.get_extensions.apply(this, arguments); }
            },
            "hasFunction": {
              "value": function () { return this.has_function.apply(this, arguments); }
            }
          },
          "static": {
            "getList": {
              "value": function () { return this.get_list.apply(this, arguments); }
            }
          }
        },
        "ValueArray": {
          "prototype": {},
          "static": {
            "appendAndTakeValue": {
              "value": function () { return this.append_and_take_value.apply(this, arguments); }
            },
            "appendValue": {
              "value": function () { return this.append_value.apply(this, arguments); }
            },
            "getSize": {
              "value": function () { return this.get_size.apply(this, arguments); }
            },
            "getValue": {
              "value": function () { return this.get_value.apply(this, arguments); }
            },
            "prependValue": {
              "value": function () { return this.prepend_value.apply(this, arguments); }
            }
          }
        },
        "ValueList": {
          "prototype": {},
          "static": {
            "appendAndTakeValue": {
              "value": function () { return this.append_and_take_value.apply(this, arguments); }
            },
            "appendValue": {
              "value": function () { return this.append_value.apply(this, arguments); }
            },
            "getSize": {
              "value": function () { return this.get_size.apply(this, arguments); }
            },
            "getValue": {
              "value": function () { return this.get_value.apply(this, arguments); }
            },
            "prependValue": {
              "value": function () { return this.prepend_value.apply(this, arguments); }
            }
          }
        }
      },
      "static": {
        "bufferGetMaxMemory": {
          "value": function () { return this.buffer_get_max_memory.apply(this, arguments); }
        },
        "capsFeaturesFromString": {
          "value": function () { return this.caps_features_from_string.apply(this, arguments); }
        },
        "capsFromString": {
          "value": function () { return this.caps_from_string.apply(this, arguments); }
        },
        "coreErrorQuark": {
          "value": function () { return this.core_error_quark.apply(this, arguments); }
        },
        "debugAddLogFunction": {
          "value": function () { return this.debug_add_log_function.apply(this, arguments); }
        },
        "debugBinToDotData": {
          "value": function () { return this.debug_bin_to_dot_data.apply(this, arguments); }
        },
        "debugBinToDotFile": {
          "value": function () { return this.debug_bin_to_dot_file.apply(this, arguments); }
        },
        "debugBinToDotFileWithTs": {
          "value": function () { return this.debug_bin_to_dot_file_with_ts.apply(this, arguments); }
        },
        "debugConstructTermColor": {
          "value": function () { return this.debug_construct_term_color.apply(this, arguments); }
        },
        "debugConstructWinColor": {
          "value": function () { return this.debug_construct_win_color.apply(this, arguments); }
        },
        "debugGetAllCategories": {
          "value": function () { return this.debug_get_all_categories.apply(this, arguments); }
        },
        "debugGetColorMode": {
          "value": function () { return this.debug_get_color_mode.apply(this, arguments); }
        },
        "debugGetDefaultThreshold": {
          "value": function () { return this.debug_get_default_threshold.apply(this, arguments); }
        },
        "debugIsActive": {
          "value": function () { return this.debug_is_active.apply(this, arguments); }
        },
        "debugIsColored": {
          "value": function () { return this.debug_is_colored.apply(this, arguments); }
        },
        "debugLevelGetName": {
          "value": function () { return this.debug_level_get_name.apply(this, arguments); }
        },
        "debugLog": {
          "value": function () { return this.debug_log.apply(this, arguments); }
        },
        "debugLogDefault": {
          "value": function () { return this.debug_log_default.apply(this, arguments); }
        },
        "debugLogValist": {
          "value": function () { return this.debug_log_valist.apply(this, arguments); }
        },
        "debugPrintStackTrace": {
          "value": function () { return this.debug_print_stack_trace.apply(this, arguments); }
        },
        "debugRemoveLogFunction": {
          "value": function () { return this.debug_remove_log_function.apply(this, arguments); }
        },
        "debugRemoveLogFunctionByData": {
          "value": function () { return this.debug_remove_log_function_by_data.apply(this, arguments); }
        },
        "debugSetActive": {
          "value": function () { return this.debug_set_active.apply(this, arguments); }
        },
        "debugSetColorMode": {
          "value": function () { return this.debug_set_color_mode.apply(this, arguments); }
        },
        "debugSetColorModeFromString": {
          "value": function () { return this.debug_set_color_mode_from_string.apply(this, arguments); }
        },
        "debugSetColored": {
          "value": function () { return this.debug_set_colored.apply(this, arguments); }
        },
        "debugSetDefaultThreshold": {
          "value": function () { return this.debug_set_default_threshold.apply(this, arguments); }
        },
        "debugSetThresholdForName": {
          "value": function () { return this.debug_set_threshold_for_name.apply(this, arguments); }
        },
        "debugSetThresholdFromString": {
          "value": function () { return this.debug_set_threshold_from_string.apply(this, arguments); }
        },
        "debugUnsetThresholdForName": {
          "value": function () { return this.debug_unset_threshold_for_name.apply(this, arguments); }
        },
        "errorGetMessage": {
          "value": function () { return this.error_get_message.apply(this, arguments); }
        },
        "eventTypeGetFlags": {
          "value": function () { return this.event_type_get_flags.apply(this, arguments); }
        },
        "eventTypeGetName": {
          "value": function () { return this.event_type_get_name.apply(this, arguments); }
        },
        "eventTypeToQuark": {
          "value": function () { return this.event_type_to_quark.apply(this, arguments); }
        },
        "filenameToUri": {
          "value": function () { return this.filename_to_uri.apply(this, arguments); }
        },
        "flowGetName": {
          "value": function () { return this.flow_get_name.apply(this, arguments); }
        },
        "flowToQuark": {
          "value": function () { return this.flow_to_quark.apply(this, arguments); }
        },
        "formatGetByNick": {
          "value": function () { return this.format_get_by_nick.apply(this, arguments); }
        },
        "formatGetDetails": {
          "value": function () { return this.format_get_details.apply(this, arguments); }
        },
        "formatGetName": {
          "value": function () { return this.format_get_name.apply(this, arguments); }
        },
        "formatIterateDefinitions": {
          "value": function () { return this.format_iterate_definitions.apply(this, arguments); }
        },
        "formatRegister": {
          "value": function () { return this.format_register.apply(this, arguments); }
        },
        "formatToQuark": {
          "value": function () { return this.format_to_quark.apply(this, arguments); }
        },
        "formatsContains": {
          "value": function () { return this.formats_contains.apply(this, arguments); }
        },
        "initCheck": {
          "value": function () { return this.init_check.apply(this, arguments); }
        },
        "initGetOptionGroup": {
          "value": function () { return this.init_get_option_group.apply(this, arguments); }
        },
        "isCapsFeatures": {
          "value": function () { return this.is_caps_features.apply(this, arguments); }
        },
        "isInitialized": {
          "value": function () { return this.is_initialized.apply(this, arguments); }
        },
        "libraryErrorQuark": {
          "value": function () { return this.library_error_quark.apply(this, arguments); }
        },
        "messageTypeGetName": {
          "value": function () { return this.message_type_get_name.apply(this, arguments); }
        },
        "messageTypeToQuark": {
          "value": function () { return this.message_type_to_quark.apply(this, arguments); }
        },
        "metaApiTypeGetTags": {
          "value": function () { return this.meta_api_type_get_tags.apply(this, arguments); }
        },
        "metaApiTypeHasTag": {
          "value": function () { return this.meta_api_type_has_tag.apply(this, arguments); }
        },
        "metaApiTypeRegister": {
          "value": function () { return this.meta_api_type_register.apply(this, arguments); }
        },
        "metaGetInfo": {
          "value": function () { return this.meta_get_info.apply(this, arguments); }
        },
        "metaRegister": {
          "value": function () { return this.meta_register.apply(this, arguments); }
        },
        "miniObjectReplace": {
          "value": function () { return this.mini_object_replace.apply(this, arguments); }
        },
        "miniObjectSteal": {
          "value": function () { return this.mini_object_steal.apply(this, arguments); }
        },
        "miniObjectTake": {
          "value": function () { return this.mini_object_take.apply(this, arguments); }
        },
        "padModeGetName": {
          "value": function () { return this.pad_mode_get_name.apply(this, arguments); }
        },
        "paramSpecFraction": {
          "value": function () { return this.param_spec_fraction.apply(this, arguments); }
        },
        "parentBufferMetaApiGetType": {
          "value": function () { return this.parent_buffer_meta_api_get_type.apply(this, arguments); }
        },
        "parentBufferMetaGetInfo": {
          "value": function () { return this.parent_buffer_meta_get_info.apply(this, arguments); }
        },
        "parseBinFromDescription": {
          "value": function () { return this.parse_bin_from_description.apply(this, arguments); }
        },
        "parseBinFromDescriptionFull": {
          "value": function () { return this.parse_bin_from_description_full.apply(this, arguments); }
        },
        "parseErrorQuark": {
          "value": function () { return this.parse_error_quark.apply(this, arguments); }
        },
        "parseLaunch": {
          "value": function () { return this.parse_launch.apply(this, arguments); }
        },
        "parseLaunchFull": {
          "value": function () { return this.parse_launch_full.apply(this, arguments); }
        },
        "parseLaunchv": {
          "value": function () { return this.parse_launchv.apply(this, arguments); }
        },
        "parseLaunchvFull": {
          "value": function () { return this.parse_launchv_full.apply(this, arguments); }
        },
        "pluginErrorQuark": {
          "value": function () { return this.plugin_error_quark.apply(this, arguments); }
        },
        "pollNew": {
          "value": function () { return this.poll_new.apply(this, arguments); }
        },
        "pollNewTimer": {
          "value": function () { return this.poll_new_timer.apply(this, arguments); }
        },
        "presetGetAppDir": {
          "value": function () { return this.preset_get_app_dir.apply(this, arguments); }
        },
        "presetSetAppDir": {
          "value": function () { return this.preset_set_app_dir.apply(this, arguments); }
        },
        "protectionMetaApiGetType": {
          "value": function () { return this.protection_meta_api_get_type.apply(this, arguments); }
        },
        "protectionMetaGetInfo": {
          "value": function () { return this.protection_meta_get_info.apply(this, arguments); }
        },
        "protectionSelectSystem": {
          "value": function () { return this.protection_select_system.apply(this, arguments); }
        },
        "queryTypeGetFlags": {
          "value": function () { return this.query_type_get_flags.apply(this, arguments); }
        },
        "queryTypeGetName": {
          "value": function () { return this.query_type_get_name.apply(this, arguments); }
        },
        "queryTypeToQuark": {
          "value": function () { return this.query_type_to_quark.apply(this, arguments); }
        },
        "resourceErrorQuark": {
          "value": function () { return this.resource_error_quark.apply(this, arguments); }
        },
        "segtrapIsEnabled": {
          "value": function () { return this.segtrap_is_enabled.apply(this, arguments); }
        },
        "segtrapSetEnabled": {
          "value": function () { return this.segtrap_set_enabled.apply(this, arguments); }
        },
        "staticCapsGetType": {
          "value": function () { return this.static_caps_get_type.apply(this, arguments); }
        },
        "staticPadTemplateGetType": {
          "value": function () { return this.static_pad_template_get_type.apply(this, arguments); }
        },
        "streamErrorQuark": {
          "value": function () { return this.stream_error_quark.apply(this, arguments); }
        },
        "structureFromString": {
          "value": function () { return this.structure_from_string.apply(this, arguments); }
        },
        "tagExists": {
          "value": function () { return this.tag_exists.apply(this, arguments); }
        },
        "tagGetDescription": {
          "value": function () { return this.tag_get_description.apply(this, arguments); }
        },
        "tagGetFlag": {
          "value": function () { return this.tag_get_flag.apply(this, arguments); }
        },
        "tagGetNick": {
          "value": function () { return this.tag_get_nick.apply(this, arguments); }
        },
        "tagGetType": {
          "value": function () { return this.tag_get_type.apply(this, arguments); }
        },
        "tagIsFixed": {
          "value": function () { return this.tag_is_fixed.apply(this, arguments); }
        },
        "tagListCopyValue": {
          "value": function () { return this.tag_list_copy_value.apply(this, arguments); }
        },
        "tagMergeStringsWithComma": {
          "value": function () { return this.tag_merge_strings_with_comma.apply(this, arguments); }
        },
        "tagMergeUseFirst": {
          "value": function () { return this.tag_merge_use_first.apply(this, arguments); }
        },
        "tagRegister": {
          "value": function () { return this.tag_register.apply(this, arguments); }
        },
        "tagRegisterStatic": {
          "value": function () { return this.tag_register_static.apply(this, arguments); }
        },
        "tocEntryTypeGetNick": {
          "value": function () { return this.toc_entry_type_get_nick.apply(this, arguments); }
        },
        "typeFindGetType": {
          "value": function () { return this.type_find_get_type.apply(this, arguments); }
        },
        "typeFindRegister": {
          "value": function () { return this.type_find_register.apply(this, arguments); }
        },
        "updateRegistry": {
          "value": function () { return this.update_registry.apply(this, arguments); }
        },
        "uriConstruct": {
          "value": function () { return this.uri_construct.apply(this, arguments); }
        },
        "uriErrorQuark": {
          "value": function () { return this.uri_error_quark.apply(this, arguments); }
        },
        "uriFromString": {
          "value": function () { return this.uri_from_string.apply(this, arguments); }
        },
        "uriGetLocation": {
          "value": function () { return this.uri_get_location.apply(this, arguments); }
        },
        "uriGetProtocol": {
          "value": function () { return this.uri_get_protocol.apply(this, arguments); }
        },
        "uriHasProtocol": {
          "value": function () { return this.uri_has_protocol.apply(this, arguments); }
        },
        "uriIsValid": {
          "value": function () { return this.uri_is_valid.apply(this, arguments); }
        },
        "uriJoinStrings": {
          "value": function () { return this.uri_join_strings.apply(this, arguments); }
        },
        "uriProtocolIsSupported": {
          "value": function () { return this.uri_protocol_is_supported.apply(this, arguments); }
        },
        "uriProtocolIsValid": {
          "value": function () { return this.uri_protocol_is_valid.apply(this, arguments); }
        },
        "utilArrayBinarySearch": {
          "value": function () { return this.util_array_binary_search.apply(this, arguments); }
        },
        "utilDoubleToFraction": {
          "value": function () { return this.util_double_to_fraction.apply(this, arguments); }
        },
        "utilDumpMem": {
          "value": function () { return this.util_dump_mem.apply(this, arguments); }
        },
        "utilFractionAdd": {
          "value": function () { return this.util_fraction_add.apply(this, arguments); }
        },
        "utilFractionCompare": {
          "value": function () { return this.util_fraction_compare.apply(this, arguments); }
        },
        "utilFractionMultiply": {
          "value": function () { return this.util_fraction_multiply.apply(this, arguments); }
        },
        "utilFractionToDouble": {
          "value": function () { return this.util_fraction_to_double.apply(this, arguments); }
        },
        "utilGdoubleToGuint64": {
          "value": function () { return this.util_gdouble_to_guint64.apply(this, arguments); }
        },
        "utilGetTimestamp": {
          "value": function () { return this.util_get_timestamp.apply(this, arguments); }
        },
        "utilGreatestCommonDivisor": {
          "value": function () { return this.util_greatest_common_divisor.apply(this, arguments); }
        },
        "utilGreatestCommonDivisorInt64": {
          "value": function () { return this.util_greatest_common_divisor_int64.apply(this, arguments); }
        },
        "utilGroupIdNext": {
          "value": function () { return this.util_group_id_next.apply(this, arguments); }
        },
        "utilGuint64ToGdouble": {
          "value": function () { return this.util_guint64_to_gdouble.apply(this, arguments); }
        },
        "utilSeqnumCompare": {
          "value": function () { return this.util_seqnum_compare.apply(this, arguments); }
        },
        "utilSeqnumNext": {
          "value": function () { return this.util_seqnum_next.apply(this, arguments); }
        },
        "utilSetObjectArg": {
          "value": function () { return this.util_set_object_arg.apply(this, arguments); }
        },
        "utilSetValueFromString": {
          "value": function () { return this.util_set_value_from_string.apply(this, arguments); }
        },
        "utilUint64Scale": {
          "value": function () { return this.util_uint64_scale.apply(this, arguments); }
        },
        "utilUint64ScaleCeil": {
          "value": function () { return this.util_uint64_scale_ceil.apply(this, arguments); }
        },
        "utilUint64ScaleInt": {
          "value": function () { return this.util_uint64_scale_int.apply(this, arguments); }
        },
        "utilUint64ScaleIntCeil": {
          "value": function () { return this.util_uint64_scale_int_ceil.apply(this, arguments); }
        },
        "utilUint64ScaleIntRound": {
          "value": function () { return this.util_uint64_scale_int_round.apply(this, arguments); }
        },
        "utilUint64ScaleRound": {
          "value": function () { return this.util_uint64_scale_round.apply(this, arguments); }
        },
        "valueCanCompare": {
          "value": function () { return this.value_can_compare.apply(this, arguments); }
        },
        "valueCanIntersect": {
          "value": function () { return this.value_can_intersect.apply(this, arguments); }
        },
        "valueCanSubtract": {
          "value": function () { return this.value_can_subtract.apply(this, arguments); }
        },
        "valueCanUnion": {
          "value": function () { return this.value_can_union.apply(this, arguments); }
        },
        "valueCompare": {
          "value": function () { return this.value_compare.apply(this, arguments); }
        },
        "valueDeserialize": {
          "value": function () { return this.value_deserialize.apply(this, arguments); }
        },
        "valueFixate": {
          "value": function () { return this.value_fixate.apply(this, arguments); }
        },
        "valueFractionMultiply": {
          "value": function () { return this.value_fraction_multiply.apply(this, arguments); }
        },
        "valueFractionSubtract": {
          "value": function () { return this.value_fraction_subtract.apply(this, arguments); }
        },
        "valueGetBitmask": {
          "value": function () { return this.value_get_bitmask.apply(this, arguments); }
        },
        "valueGetCaps": {
          "value": function () { return this.value_get_caps.apply(this, arguments); }
        },
        "valueGetCapsFeatures": {
          "value": function () { return this.value_get_caps_features.apply(this, arguments); }
        },
        "valueGetDoubleRangeMax": {
          "value": function () { return this.value_get_double_range_max.apply(this, arguments); }
        },
        "valueGetDoubleRangeMin": {
          "value": function () { return this.value_get_double_range_min.apply(this, arguments); }
        },
        "valueGetFlagsetFlags": {
          "value": function () { return this.value_get_flagset_flags.apply(this, arguments); }
        },
        "valueGetFlagsetMask": {
          "value": function () { return this.value_get_flagset_mask.apply(this, arguments); }
        },
        "valueGetFractionDenominator": {
          "value": function () { return this.value_get_fraction_denominator.apply(this, arguments); }
        },
        "valueGetFractionNumerator": {
          "value": function () { return this.value_get_fraction_numerator.apply(this, arguments); }
        },
        "valueGetFractionRangeMax": {
          "value": function () { return this.value_get_fraction_range_max.apply(this, arguments); }
        },
        "valueGetFractionRangeMin": {
          "value": function () { return this.value_get_fraction_range_min.apply(this, arguments); }
        },
        "valueGetInt64RangeMax": {
          "value": function () { return this.value_get_int64_range_max.apply(this, arguments); }
        },
        "valueGetInt64RangeMin": {
          "value": function () { return this.value_get_int64_range_min.apply(this, arguments); }
        },
        "valueGetInt64RangeStep": {
          "value": function () { return this.value_get_int64_range_step.apply(this, arguments); }
        },
        "valueGetIntRangeMax": {
          "value": function () { return this.value_get_int_range_max.apply(this, arguments); }
        },
        "valueGetIntRangeMin": {
          "value": function () { return this.value_get_int_range_min.apply(this, arguments); }
        },
        "valueGetIntRangeStep": {
          "value": function () { return this.value_get_int_range_step.apply(this, arguments); }
        },
        "valueGetStructure": {
          "value": function () { return this.value_get_structure.apply(this, arguments); }
        },
        "valueInitAndCopy": {
          "value": function () { return this.value_init_and_copy.apply(this, arguments); }
        },
        "valueIntersect": {
          "value": function () { return this.value_intersect.apply(this, arguments); }
        },
        "valueIsFixed": {
          "value": function () { return this.value_is_fixed.apply(this, arguments); }
        },
        "valueIsSubset": {
          "value": function () { return this.value_is_subset.apply(this, arguments); }
        },
        "valueRegister": {
          "value": function () { return this.value_register.apply(this, arguments); }
        },
        "valueSerialize": {
          "value": function () { return this.value_serialize.apply(this, arguments); }
        },
        "valueSetBitmask": {
          "value": function () { return this.value_set_bitmask.apply(this, arguments); }
        },
        "valueSetCaps": {
          "value": function () { return this.value_set_caps.apply(this, arguments); }
        },
        "valueSetCapsFeatures": {
          "value": function () { return this.value_set_caps_features.apply(this, arguments); }
        },
        "valueSetDoubleRange": {
          "value": function () { return this.value_set_double_range.apply(this, arguments); }
        },
        "valueSetFlagset": {
          "value": function () { return this.value_set_flagset.apply(this, arguments); }
        },
        "valueSetFraction": {
          "value": function () { return this.value_set_fraction.apply(this, arguments); }
        },
        "valueSetFractionRange": {
          "value": function () { return this.value_set_fraction_range.apply(this, arguments); }
        },
        "valueSetFractionRangeFull": {
          "value": function () { return this.value_set_fraction_range_full.apply(this, arguments); }
        },
        "valueSetInt64Range": {
          "value": function () { return this.value_set_int64_range.apply(this, arguments); }
        },
        "valueSetInt64RangeStep": {
          "value": function () { return this.value_set_int64_range_step.apply(this, arguments); }
        },
        "valueSetIntRange": {
          "value": function () { return this.value_set_int_range.apply(this, arguments); }
        },
        "valueSetIntRangeStep": {
          "value": function () { return this.value_set_int_range_step.apply(this, arguments); }
        },
        "valueSetStructure": {
          "value": function () { return this.value_set_structure.apply(this, arguments); }
        },
        "valueSubtract": {
          "value": function () { return this.value_subtract.apply(this, arguments); }
        },
        "valueUnion": {
          "value": function () { return this.value_union.apply(this, arguments); }
        },
        "versionString": {
          "value": function () { return this.version_string.apply(this, arguments); }
        }
      }
    },
    "GstAllocators": {
      "class": {
        "FdAllocator": {
          "prototype": {},
          "static": {}
        }
      },
      "static": {
        "dmabufAllocatorAlloc": {
          "value": function () { return this.dmabuf_allocator_alloc.apply(this, arguments); }
        },
        "dmabufAllocatorNew": {
          "value": function () { return this.dmabuf_allocator_new.apply(this, arguments); }
        },
        "dmabufMemoryGetFd": {
          "value": function () { return this.dmabuf_memory_get_fd.apply(this, arguments); }
        },
        "fdMemoryGetFd": {
          "value": function () { return this.fd_memory_get_fd.apply(this, arguments); }
        },
        "isDmabufMemory": {
          "value": function () { return this.is_dmabuf_memory.apply(this, arguments); }
        },
        "isFdMemory": {
          "value": function () { return this.is_fd_memory.apply(this, arguments); }
        }
      }
    },
    "GstApp": {
      "class": {
        "AppSink": {
          "prototype": {
            "getCaps": {
              "value": function () { return this.get_caps.apply(this, arguments); }
            },
            "getDrop": {
              "value": function () { return this.get_drop.apply(this, arguments); }
            },
            "getEmitSignals": {
              "value": function () { return this.get_emit_signals.apply(this, arguments); }
            },
            "getMaxBuffers": {
              "value": function () { return this.get_max_buffers.apply(this, arguments); }
            },
            "isEos": {
              "value": function () { return this.is_eos.apply(this, arguments); }
            },
            "pullPreroll": {
              "value": function () { return this.pull_preroll.apply(this, arguments); }
            },
            "pullSample": {
              "value": function () { return this.pull_sample.apply(this, arguments); }
            },
            "setCallbacks": {
              "value": function () { return this.set_callbacks.apply(this, arguments); }
            },
            "setCaps": {
              "value": function () { return this.set_caps.apply(this, arguments); }
            },
            "setDrop": {
              "value": function () { return this.set_drop.apply(this, arguments); }
            },
            "setEmitSignals": {
              "value": function () { return this.set_emit_signals.apply(this, arguments); }
            },
            "setMaxBuffers": {
              "value": function () { return this.set_max_buffers.apply(this, arguments); }
            },
            "emitSignals": {
              "get": function () { return this.emit_signals; },
              "set": function (value) { this.emit_signals = value; }
            },
            "maxBuffers": {
              "get": function () { return this.max_buffers; },
              "set": function (value) { this.max_buffers = value; }
            }
          },
          "static": {}
        },
        "AppSrc": {
          "prototype": {
            "endOfStream": {
              "value": function () { return this.end_of_stream.apply(this, arguments); }
            },
            "getCaps": {
              "value": function () { return this.get_caps.apply(this, arguments); }
            },
            "getCurrentLevelBytes": {
              "value": function () { return this.get_current_level_bytes.apply(this, arguments); }
            },
            "getEmitSignals": {
              "value": function () { return this.get_emit_signals.apply(this, arguments); }
            },
            "getLatency": {
              "value": function () { return this.get_latency.apply(this, arguments); }
            },
            "getMaxBytes": {
              "value": function () { return this.get_max_bytes.apply(this, arguments); }
            },
            "getSize": {
              "value": function () { return this.get_size.apply(this, arguments); }
            },
            "getStreamType": {
              "value": function () { return this.get_stream_type.apply(this, arguments); }
            },
            "pushBuffer": {
              "value": function () { return this.push_buffer.apply(this, arguments); }
            },
            "pushSample": {
              "value": function () { return this.push_sample.apply(this, arguments); }
            },
            "setCallbacks": {
              "value": function () { return this.set_callbacks.apply(this, arguments); }
            },
            "setCaps": {
              "value": function () { return this.set_caps.apply(this, arguments); }
            },
            "setEmitSignals": {
              "value": function () { return this.set_emit_signals.apply(this, arguments); }
            },
            "setLatency": {
              "value": function () { return this.set_latency.apply(this, arguments); }
            },
            "setMaxBytes": {
              "value": function () { return this.set_max_bytes.apply(this, arguments); }
            },
            "setSize": {
              "value": function () { return this.set_size.apply(this, arguments); }
            },
            "setStreamType": {
              "value": function () { return this.set_stream_type.apply(this, arguments); }
            },
            "currentLevelBytes": {
              "get": function () { return this.current_level_bytes; },
              "set": function (value) { this.current_level_bytes = value; }
            },
            "emitSignals": {
              "get": function () { return this.emit_signals; },
              "set": function (value) { this.emit_signals = value; }
            },
            "isLive": {
              "get": function () { return this.is_live; },
              "set": function (value) { this.is_live = value; }
            },
            "maxBytes": {
              "get": function () { return this.max_bytes; },
              "set": function (value) { this.max_bytes = value; }
            },
            "maxLatency": {
              "get": function () { return this.max_latency; },
              "set": function (value) { this.max_latency = value; }
            },
            "minLatency": {
              "get": function () { return this.min_latency; },
              "set": function (value) { this.min_latency = value; }
            },
            "minPercent": {
              "get": function () { return this.min_percent; },
              "set": function (value) { this.min_percent = value; }
            },
            "streamType": {
              "get": function () { return this.stream_type; },
              "set": function (value) { this.stream_type = value; }
            }
          },
          "static": {}
        }
      },
      "static": {}
    },
    "GstAudio": {
      "class": {
        "AudioBaseSink": {
          "prototype": {
            "createRingbuffer": {
              "value": function () { return this.create_ringbuffer.apply(this, arguments); }
            },
            "getAlignmentThreshold": {
              "value": function () { return this.get_alignment_threshold.apply(this, arguments); }
            },
            "getDiscontWait": {
              "value": function () { return this.get_discont_wait.apply(this, arguments); }
            },
            "getDriftTolerance": {
              "value": function () { return this.get_drift_tolerance.apply(this, arguments); }
            },
            "getProvideClock": {
              "value": function () { return this.get_provide_clock.apply(this, arguments); }
            },
            "getSlaveMethod": {
              "value": function () { return this.get_slave_method.apply(this, arguments); }
            },
            "reportDeviceFailure": {
              "value": function () { return this.report_device_failure.apply(this, arguments); }
            },
            "setAlignmentThreshold": {
              "value": function () { return this.set_alignment_threshold.apply(this, arguments); }
            },
            "setCustomSlavingCallback": {
              "value": function () { return this.set_custom_slaving_callback.apply(this, arguments); }
            },
            "setDiscontWait": {
              "value": function () { return this.set_discont_wait.apply(this, arguments); }
            },
            "setDriftTolerance": {
              "value": function () { return this.set_drift_tolerance.apply(this, arguments); }
            },
            "setProvideClock": {
              "value": function () { return this.set_provide_clock.apply(this, arguments); }
            },
            "setSlaveMethod": {
              "value": function () { return this.set_slave_method.apply(this, arguments); }
            },
            "alignmentThreshold": {
              "get": function () { return this.alignment_threshold; },
              "set": function (value) { this.alignment_threshold = value; }
            },
            "bufferTime": {
              "get": function () { return this.buffer_time; },
              "set": function (value) { this.buffer_time = value; }
            },
            "canActivatePull": {
              "get": function () { return this.can_activate_pull; },
              "set": function (value) { this.can_activate_pull = value; }
            },
            "discontWait": {
              "get": function () { return this.discont_wait; },
              "set": function (value) { this.discont_wait = value; }
            },
            "driftTolerance": {
              "get": function () { return this.drift_tolerance; },
              "set": function (value) { this.drift_tolerance = value; }
            },
            "latencyTime": {
              "get": function () { return this.latency_time; },
              "set": function (value) { this.latency_time = value; }
            },
            "provideClock": {
              "get": function () { return this.provide_clock; },
              "set": function (value) { this.provide_clock = value; }
            },
            "slaveMethod": {
              "get": function () { return this.slave_method; },
              "set": function (value) { this.slave_method = value; }
            }
          },
          "static": {}
        },
        "AudioBaseSrc": {
          "prototype": {
            "createRingbuffer": {
              "value": function () { return this.create_ringbuffer.apply(this, arguments); }
            },
            "getProvideClock": {
              "value": function () { return this.get_provide_clock.apply(this, arguments); }
            },
            "getSlaveMethod": {
              "value": function () { return this.get_slave_method.apply(this, arguments); }
            },
            "setProvideClock": {
              "value": function () { return this.set_provide_clock.apply(this, arguments); }
            },
            "setSlaveMethod": {
              "value": function () { return this.set_slave_method.apply(this, arguments); }
            },
            "actualBufferTime": {
              "get": function () { return this.actual_buffer_time; },
              "set": function (value) { this.actual_buffer_time = value; }
            },
            "actualLatencyTime": {
              "get": function () { return this.actual_latency_time; },
              "set": function (value) { this.actual_latency_time = value; }
            },
            "bufferTime": {
              "get": function () { return this.buffer_time; },
              "set": function (value) { this.buffer_time = value; }
            },
            "latencyTime": {
              "get": function () { return this.latency_time; },
              "set": function (value) { this.latency_time = value; }
            },
            "provideClock": {
              "get": function () { return this.provide_clock; },
              "set": function (value) { this.provide_clock = value; }
            },
            "slaveMethod": {
              "get": function () { return this.slave_method; },
              "set": function (value) { this.slave_method = value; }
            }
          },
          "static": {}
        },
        "AudioCdSrc": {
          "prototype": {
            "addTrack": {
              "value": function () { return this.add_track.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "AudioClock": {
          "prototype": {},
          "static": {
            "getTime": {
              "value": function () { return this.get_time.apply(this, arguments); }
            }
          }
        },
        "AudioDecoder": {
          "prototype": {
            "allocateOutputBuffer": {
              "value": function () { return this.allocate_output_buffer.apply(this, arguments); }
            },
            "finishFrame": {
              "value": function () { return this.finish_frame.apply(this, arguments); }
            },
            "getAllocator": {
              "value": function () { return this.get_allocator.apply(this, arguments); }
            },
            "getAudioInfo": {
              "value": function () { return this.get_audio_info.apply(this, arguments); }
            },
            "getDelay": {
              "value": function () { return this.get_delay.apply(this, arguments); }
            },
            "getDrainable": {
              "value": function () { return this.get_drainable.apply(this, arguments); }
            },
            "getEstimateRate": {
              "value": function () { return this.get_estimate_rate.apply(this, arguments); }
            },
            "getLatency": {
              "value": function () { return this.get_latency.apply(this, arguments); }
            },
            "getMaxErrors": {
              "value": function () { return this.get_max_errors.apply(this, arguments); }
            },
            "getMinLatency": {
              "value": function () { return this.get_min_latency.apply(this, arguments); }
            },
            "getNeedsFormat": {
              "value": function () { return this.get_needs_format.apply(this, arguments); }
            },
            "getParseState": {
              "value": function () { return this.get_parse_state.apply(this, arguments); }
            },
            "getPlc": {
              "value": function () { return this.get_plc.apply(this, arguments); }
            },
            "getPlcAware": {
              "value": function () { return this.get_plc_aware.apply(this, arguments); }
            },
            "getTolerance": {
              "value": function () { return this.get_tolerance.apply(this, arguments); }
            },
            "mergeTags": {
              "value": function () { return this.merge_tags.apply(this, arguments); }
            },
            "proxyGetcaps": {
              "value": function () { return this.proxy_getcaps.apply(this, arguments); }
            },
            "setDrainable": {
              "value": function () { return this.set_drainable.apply(this, arguments); }
            },
            "setEstimateRate": {
              "value": function () { return this.set_estimate_rate.apply(this, arguments); }
            },
            "setLatency": {
              "value": function () { return this.set_latency.apply(this, arguments); }
            },
            "setMaxErrors": {
              "value": function () { return this.set_max_errors.apply(this, arguments); }
            },
            "setMinLatency": {
              "value": function () { return this.set_min_latency.apply(this, arguments); }
            },
            "setNeedsFormat": {
              "value": function () { return this.set_needs_format.apply(this, arguments); }
            },
            "setOutputFormat": {
              "value": function () { return this.set_output_format.apply(this, arguments); }
            },
            "setPlc": {
              "value": function () { return this.set_plc.apply(this, arguments); }
            },
            "setPlcAware": {
              "value": function () { return this.set_plc_aware.apply(this, arguments); }
            },
            "setTolerance": {
              "value": function () { return this.set_tolerance.apply(this, arguments); }
            },
            "setUseDefaultPadAcceptcaps": {
              "value": function () { return this.set_use_default_pad_acceptcaps.apply(this, arguments); }
            },
            "minLatency": {
              "get": function () { return this.min_latency; },
              "set": function (value) { this.min_latency = value; }
            }
          },
          "static": {}
        },
        "AudioEncoder": {
          "prototype": {
            "allocateOutputBuffer": {
              "value": function () { return this.allocate_output_buffer.apply(this, arguments); }
            },
            "finishFrame": {
              "value": function () { return this.finish_frame.apply(this, arguments); }
            },
            "getAllocator": {
              "value": function () { return this.get_allocator.apply(this, arguments); }
            },
            "getAudioInfo": {
              "value": function () { return this.get_audio_info.apply(this, arguments); }
            },
            "getDrainable": {
              "value": function () { return this.get_drainable.apply(this, arguments); }
            },
            "getFrameMax": {
              "value": function () { return this.get_frame_max.apply(this, arguments); }
            },
            "getFrameSamplesMax": {
              "value": function () { return this.get_frame_samples_max.apply(this, arguments); }
            },
            "getFrameSamplesMin": {
              "value": function () { return this.get_frame_samples_min.apply(this, arguments); }
            },
            "getHardMin": {
              "value": function () { return this.get_hard_min.apply(this, arguments); }
            },
            "getHardResync": {
              "value": function () { return this.get_hard_resync.apply(this, arguments); }
            },
            "getLatency": {
              "value": function () { return this.get_latency.apply(this, arguments); }
            },
            "getLookahead": {
              "value": function () { return this.get_lookahead.apply(this, arguments); }
            },
            "getMarkGranule": {
              "value": function () { return this.get_mark_granule.apply(this, arguments); }
            },
            "getPerfectTimestamp": {
              "value": function () { return this.get_perfect_timestamp.apply(this, arguments); }
            },
            "getTolerance": {
              "value": function () { return this.get_tolerance.apply(this, arguments); }
            },
            "mergeTags": {
              "value": function () { return this.merge_tags.apply(this, arguments); }
            },
            "proxyGetcaps": {
              "value": function () { return this.proxy_getcaps.apply(this, arguments); }
            },
            "setDrainable": {
              "value": function () { return this.set_drainable.apply(this, arguments); }
            },
            "setFrameMax": {
              "value": function () { return this.set_frame_max.apply(this, arguments); }
            },
            "setFrameSamplesMax": {
              "value": function () { return this.set_frame_samples_max.apply(this, arguments); }
            },
            "setFrameSamplesMin": {
              "value": function () { return this.set_frame_samples_min.apply(this, arguments); }
            },
            "setHardMin": {
              "value": function () { return this.set_hard_min.apply(this, arguments); }
            },
            "setHardResync": {
              "value": function () { return this.set_hard_resync.apply(this, arguments); }
            },
            "setHeaders": {
              "value": function () { return this.set_headers.apply(this, arguments); }
            },
            "setLatency": {
              "value": function () { return this.set_latency.apply(this, arguments); }
            },
            "setLookahead": {
              "value": function () { return this.set_lookahead.apply(this, arguments); }
            },
            "setMarkGranule": {
              "value": function () { return this.set_mark_granule.apply(this, arguments); }
            },
            "setOutputFormat": {
              "value": function () { return this.set_output_format.apply(this, arguments); }
            },
            "setPerfectTimestamp": {
              "value": function () { return this.set_perfect_timestamp.apply(this, arguments); }
            },
            "setTolerance": {
              "value": function () { return this.set_tolerance.apply(this, arguments); }
            },
            "hardResync": {
              "get": function () { return this.hard_resync; },
              "set": function (value) { this.hard_resync = value; }
            },
            "markGranule": {
              "get": function () { return this.mark_granule; },
              "set": function (value) { this.mark_granule = value; }
            },
            "perfectTimestamp": {
              "get": function () { return this.perfect_timestamp; },
              "set": function (value) { this.perfect_timestamp = value; }
            }
          },
          "static": {}
        },
        "AudioFilter": {
          "prototype": {},
          "static": {}
        },
        "AudioRingBuffer": {
          "prototype": {
            "clearAll": {
              "value": function () { return this.clear_all.apply(this, arguments); }
            },
            "closeDevice": {
              "value": function () { return this.close_device.apply(this, arguments); }
            },
            "deviceIsOpen": {
              "value": function () { return this.device_is_open.apply(this, arguments); }
            },
            "isAcquired": {
              "value": function () { return this.is_acquired.apply(this, arguments); }
            },
            "isActive": {
              "value": function () { return this.is_active.apply(this, arguments); }
            },
            "isFlushing": {
              "value": function () { return this.is_flushing.apply(this, arguments); }
            },
            "mayStart": {
              "value": function () { return this.may_start.apply(this, arguments); }
            },
            "openDevice": {
              "value": function () { return this.open_device.apply(this, arguments); }
            },
            "prepareRead": {
              "value": function () { return this.prepare_read.apply(this, arguments); }
            },
            "samplesDone": {
              "value": function () { return this.samples_done.apply(this, arguments); }
            },
            "setCallback": {
              "value": function () { return this.set_callback.apply(this, arguments); }
            },
            "setChannelPositions": {
              "value": function () { return this.set_channel_positions.apply(this, arguments); }
            },
            "setFlushing": {
              "value": function () { return this.set_flushing.apply(this, arguments); }
            },
            "setSample": {
              "value": function () { return this.set_sample.apply(this, arguments); }
            },
            "setTimestamp": {
              "value": function () { return this.set_timestamp.apply(this, arguments); }
            }
          },
          "static": {
            "debugSpecBuff": {
              "value": function () { return this.debug_spec_buff.apply(this, arguments); }
            },
            "debugSpecCaps": {
              "value": function () { return this.debug_spec_caps.apply(this, arguments); }
            },
            "parseCaps": {
              "value": function () { return this.parse_caps.apply(this, arguments); }
            }
          }
        },
        "AudioSink": {
          "prototype": {},
          "static": {}
        },
        "AudioSrc": {
          "prototype": {},
          "static": {}
        }
      },
      "static": {
        "audioBufferClip": {
          "value": function () { return this.audio_buffer_clip.apply(this, arguments); }
        },
        "audioBufferReorderChannels": {
          "value": function () { return this.audio_buffer_reorder_channels.apply(this, arguments); }
        },
        "audioChannelPositionsFromMask": {
          "value": function () { return this.audio_channel_positions_from_mask.apply(this, arguments); }
        },
        "audioChannelPositionsToMask": {
          "value": function () { return this.audio_channel_positions_to_mask.apply(this, arguments); }
        },
        "audioChannelPositionsToValidOrder": {
          "value": function () { return this.audio_channel_positions_to_valid_order.apply(this, arguments); }
        },
        "audioCheckValidChannelPositions": {
          "value": function () { return this.audio_check_valid_channel_positions.apply(this, arguments); }
        },
        "audioDownmixMetaApiGetType": {
          "value": function () { return this.audio_downmix_meta_api_get_type.apply(this, arguments); }
        },
        "audioDownmixMetaGetInfo": {
          "value": function () { return this.audio_downmix_meta_get_info.apply(this, arguments); }
        },
        "audioFormatBuildInteger": {
          "value": function () { return this.audio_format_build_integer.apply(this, arguments); }
        },
        "audioFormatFillSilence": {
          "value": function () { return this.audio_format_fill_silence.apply(this, arguments); }
        },
        "audioFormatFromString": {
          "value": function () { return this.audio_format_from_string.apply(this, arguments); }
        },
        "audioFormatGetInfo": {
          "value": function () { return this.audio_format_get_info.apply(this, arguments); }
        },
        "audioFormatInfoGetType": {
          "value": function () { return this.audio_format_info_get_type.apply(this, arguments); }
        },
        "audioFormatToString": {
          "value": function () { return this.audio_format_to_string.apply(this, arguments); }
        },
        "audioGetChannelReorderMap": {
          "value": function () { return this.audio_get_channel_reorder_map.apply(this, arguments); }
        },
        "audioIec61937FrameSize": {
          "value": function () { return this.audio_iec61937_frame_size.apply(this, arguments); }
        },
        "audioIec61937Payload": {
          "value": function () { return this.audio_iec61937_payload.apply(this, arguments); }
        },
        "audioReorderChannels": {
          "value": function () { return this.audio_reorder_channels.apply(this, arguments); }
        },
        "bufferAddAudioDownmixMeta": {
          "value": function () { return this.buffer_add_audio_downmix_meta.apply(this, arguments); }
        },
        "bufferGetAudioDownmixMetaForChannels": {
          "value": function () { return this.buffer_get_audio_downmix_meta_for_channels.apply(this, arguments); }
        },
        "streamVolumeConvertVolume": {
          "value": function () { return this.stream_volume_convert_volume.apply(this, arguments); }
        }
      }
    },
    "GstBase": {
      "class": {
        "Adapter": {
          "prototype": {
            "availableFast": {
              "value": function () { return this.available_fast.apply(this, arguments); }
            },
            "copyBytes": {
              "value": function () { return this.copy_bytes.apply(this, arguments); }
            },
            "getBuffer": {
              "value": function () { return this.get_buffer.apply(this, arguments); }
            },
            "getBufferFast": {
              "value": function () { return this.get_buffer_fast.apply(this, arguments); }
            },
            "getBufferList": {
              "value": function () { return this.get_buffer_list.apply(this, arguments); }
            },
            "getList": {
              "value": function () { return this.get_list.apply(this, arguments); }
            },
            "maskedScanUint32": {
              "value": function () { return this.masked_scan_uint32.apply(this, arguments); }
            },
            "maskedScanUint32Peek": {
              "value": function () { return this.masked_scan_uint32_peek.apply(this, arguments); }
            },
            "prevDts": {
              "value": function () { return this.prev_dts.apply(this, arguments); }
            },
            "prevDtsAtOffset": {
              "value": function () { return this.prev_dts_at_offset.apply(this, arguments); }
            },
            "prevPts": {
              "value": function () { return this.prev_pts.apply(this, arguments); }
            },
            "prevPtsAtOffset": {
              "value": function () { return this.prev_pts_at_offset.apply(this, arguments); }
            },
            "takeBuffer": {
              "value": function () { return this.take_buffer.apply(this, arguments); }
            },
            "takeBufferFast": {
              "value": function () { return this.take_buffer_fast.apply(this, arguments); }
            },
            "takeBufferList": {
              "value": function () { return this.take_buffer_list.apply(this, arguments); }
            },
            "takeList": {
              "value": function () { return this.take_list.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "BaseParse": {
          "prototype": {
            "addIndexEntry": {
              "value": function () { return this.add_index_entry.apply(this, arguments); }
            },
            "convertDefault": {
              "value": function () { return this.convert_default.apply(this, arguments); }
            },
            "finishFrame": {
              "value": function () { return this.finish_frame.apply(this, arguments); }
            },
            "mergeTags": {
              "value": function () { return this.merge_tags.apply(this, arguments); }
            },
            "pushFrame": {
              "value": function () { return this.push_frame.apply(this, arguments); }
            },
            "setAverageBitrate": {
              "value": function () { return this.set_average_bitrate.apply(this, arguments); }
            },
            "setDuration": {
              "value": function () { return this.set_duration.apply(this, arguments); }
            },
            "setFrameRate": {
              "value": function () { return this.set_frame_rate.apply(this, arguments); }
            },
            "setHasTimingInfo": {
              "value": function () { return this.set_has_timing_info.apply(this, arguments); }
            },
            "setInferTs": {
              "value": function () { return this.set_infer_ts.apply(this, arguments); }
            },
            "setLatency": {
              "value": function () { return this.set_latency.apply(this, arguments); }
            },
            "setMinFrameSize": {
              "value": function () { return this.set_min_frame_size.apply(this, arguments); }
            },
            "setPassthrough": {
              "value": function () { return this.set_passthrough.apply(this, arguments); }
            },
            "setPtsInterpolation": {
              "value": function () { return this.set_pts_interpolation.apply(this, arguments); }
            },
            "setSyncable": {
              "value": function () { return this.set_syncable.apply(this, arguments); }
            },
            "setTsAtOffset": {
              "value": function () { return this.set_ts_at_offset.apply(this, arguments); }
            },
            "disablePassthrough": {
              "get": function () { return this.disable_passthrough; },
              "set": function (value) { this.disable_passthrough = value; }
            }
          },
          "static": {}
        },
        "BaseSink": {
          "prototype": {
            "doPreroll": {
              "value": function () { return this.do_preroll.apply(this, arguments); }
            },
            "getBlocksize": {
              "value": function () { return this.get_blocksize.apply(this, arguments); }
            },
            "getLastSample": {
              "value": function () { return this.get_last_sample.apply(this, arguments); }
            },
            "getLatency": {
              "value": function () { return this.get_latency.apply(this, arguments); }
            },
            "getMaxBitrate": {
              "value": function () { return this.get_max_bitrate.apply(this, arguments); }
            },
            "getMaxLateness": {
              "value": function () { return this.get_max_lateness.apply(this, arguments); }
            },
            "getRenderDelay": {
              "value": function () { return this.get_render_delay.apply(this, arguments); }
            },
            "getSync": {
              "value": function () { return this.get_sync.apply(this, arguments); }
            },
            "getThrottleTime": {
              "value": function () { return this.get_throttle_time.apply(this, arguments); }
            },
            "getTsOffset": {
              "value": function () { return this.get_ts_offset.apply(this, arguments); }
            },
            "isAsyncEnabled": {
              "value": function () { return this.is_async_enabled.apply(this, arguments); }
            },
            "isLastSampleEnabled": {
              "value": function () { return this.is_last_sample_enabled.apply(this, arguments); }
            },
            "isQosEnabled": {
              "value": function () { return this.is_qos_enabled.apply(this, arguments); }
            },
            "queryLatency": {
              "value": function () { return this.query_latency.apply(this, arguments); }
            },
            "setAsyncEnabled": {
              "value": function () { return this.set_async_enabled.apply(this, arguments); }
            },
            "setBlocksize": {
              "value": function () { return this.set_blocksize.apply(this, arguments); }
            },
            "setLastSampleEnabled": {
              "value": function () { return this.set_last_sample_enabled.apply(this, arguments); }
            },
            "setMaxBitrate": {
              "value": function () { return this.set_max_bitrate.apply(this, arguments); }
            },
            "setMaxLateness": {
              "value": function () { return this.set_max_lateness.apply(this, arguments); }
            },
            "setQosEnabled": {
              "value": function () { return this.set_qos_enabled.apply(this, arguments); }
            },
            "setRenderDelay": {
              "value": function () { return this.set_render_delay.apply(this, arguments); }
            },
            "setSync": {
              "value": function () { return this.set_sync.apply(this, arguments); }
            },
            "setThrottleTime": {
              "value": function () { return this.set_throttle_time.apply(this, arguments); }
            },
            "setTsOffset": {
              "value": function () { return this.set_ts_offset.apply(this, arguments); }
            },
            "waitClock": {
              "value": function () { return this.wait_clock.apply(this, arguments); }
            },
            "waitPreroll": {
              "value": function () { return this.wait_preroll.apply(this, arguments); }
            },
            "enableLastSample": {
              "get": function () { return this.enable_last_sample; },
              "set": function (value) { this.enable_last_sample = value; }
            },
            "lastSample": {
              "get": function () { return this.last_sample; },
              "set": function (value) { this.last_sample = value; }
            },
            "maxBitrate": {
              "get": function () { return this.max_bitrate; },
              "set": function (value) { this.max_bitrate = value; }
            },
            "maxLateness": {
              "get": function () { return this.max_lateness; },
              "set": function (value) { this.max_lateness = value; }
            },
            "renderDelay": {
              "get": function () { return this.render_delay; },
              "set": function (value) { this.render_delay = value; }
            },
            "throttleTime": {
              "get": function () { return this.throttle_time; },
              "set": function (value) { this.throttle_time = value; }
            },
            "tsOffset": {
              "get": function () { return this.ts_offset; },
              "set": function (value) { this.ts_offset = value; }
            }
          },
          "static": {}
        },
        "BaseSrc": {
          "prototype": {
            "getAllocator": {
              "value": function () { return this.get_allocator.apply(this, arguments); }
            },
            "getBlocksize": {
              "value": function () { return this.get_blocksize.apply(this, arguments); }
            },
            "getBufferPool": {
              "value": function () { return this.get_buffer_pool.apply(this, arguments); }
            },
            "getDoTimestamp": {
              "value": function () { return this.get_do_timestamp.apply(this, arguments); }
            },
            "isAsync": {
              "value": function () { return this.is_async.apply(this, arguments); }
            },
            "isLive": {
              "value": function () { return this.is_live.apply(this, arguments); }
            },
            "newSeamlessSegment": {
              "value": function () { return this.new_seamless_segment.apply(this, arguments); }
            },
            "queryLatency": {
              "value": function () { return this.query_latency.apply(this, arguments); }
            },
            "setAsync": {
              "value": function () { return this.set_async.apply(this, arguments); }
            },
            "setAutomaticEos": {
              "value": function () { return this.set_automatic_eos.apply(this, arguments); }
            },
            "setBlocksize": {
              "value": function () { return this.set_blocksize.apply(this, arguments); }
            },
            "setCaps": {
              "value": function () { return this.set_caps.apply(this, arguments); }
            },
            "setDoTimestamp": {
              "value": function () { return this.set_do_timestamp.apply(this, arguments); }
            },
            "setDynamicSize": {
              "value": function () { return this.set_dynamic_size.apply(this, arguments); }
            },
            "setFormat": {
              "value": function () { return this.set_format.apply(this, arguments); }
            },
            "setLive": {
              "value": function () { return this.set_live.apply(this, arguments); }
            },
            "startComplete": {
              "value": function () { return this.start_complete.apply(this, arguments); }
            },
            "startWait": {
              "value": function () { return this.start_wait.apply(this, arguments); }
            },
            "waitPlaying": {
              "value": function () { return this.wait_playing.apply(this, arguments); }
            },
            "doTimestamp": {
              "get": function () { return this.do_timestamp; },
              "set": function (value) { this.do_timestamp = value; }
            },
            "numBuffers": {
              "get": function () { return this.num_buffers; },
              "set": function (value) { this.num_buffers = value; }
            }
          },
          "static": {}
        },
        "BaseTransform": {
          "prototype": {
            "getAllocator": {
              "value": function () { return this.get_allocator.apply(this, arguments); }
            },
            "getBufferPool": {
              "value": function () { return this.get_buffer_pool.apply(this, arguments); }
            },
            "isInPlace": {
              "value": function () { return this.is_in_place.apply(this, arguments); }
            },
            "isPassthrough": {
              "value": function () { return this.is_passthrough.apply(this, arguments); }
            },
            "isQosEnabled": {
              "value": function () { return this.is_qos_enabled.apply(this, arguments); }
            },
            "reconfigureSink": {
              "value": function () { return this.reconfigure_sink.apply(this, arguments); }
            },
            "reconfigureSrc": {
              "value": function () { return this.reconfigure_src.apply(this, arguments); }
            },
            "setGapAware": {
              "value": function () { return this.set_gap_aware.apply(this, arguments); }
            },
            "setInPlace": {
              "value": function () { return this.set_in_place.apply(this, arguments); }
            },
            "setPassthrough": {
              "value": function () { return this.set_passthrough.apply(this, arguments); }
            },
            "setPreferPassthrough": {
              "value": function () { return this.set_prefer_passthrough.apply(this, arguments); }
            },
            "setQosEnabled": {
              "value": function () { return this.set_qos_enabled.apply(this, arguments); }
            },
            "updateQos": {
              "value": function () { return this.update_qos.apply(this, arguments); }
            },
            "updateSrcCaps": {
              "value": function () { return this.update_src_caps.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "CollectPads": {
          "prototype": {
            "addPad": {
              "value": function () { return this.add_pad.apply(this, arguments); }
            },
            "clipRunningTime": {
              "value": function () { return this.clip_running_time.apply(this, arguments); }
            },
            "eventDefault": {
              "value": function () { return this.event_default.apply(this, arguments); }
            },
            "queryDefault": {
              "value": function () { return this.query_default.apply(this, arguments); }
            },
            "readBuffer": {
              "value": function () { return this.read_buffer.apply(this, arguments); }
            },
            "removePad": {
              "value": function () { return this.remove_pad.apply(this, arguments); }
            },
            "setBufferFunction": {
              "value": function () { return this.set_buffer_function.apply(this, arguments); }
            },
            "setClipFunction": {
              "value": function () { return this.set_clip_function.apply(this, arguments); }
            },
            "setCompareFunction": {
              "value": function () { return this.set_compare_function.apply(this, arguments); }
            },
            "setEventFunction": {
              "value": function () { return this.set_event_function.apply(this, arguments); }
            },
            "setFlushFunction": {
              "value": function () { return this.set_flush_function.apply(this, arguments); }
            },
            "setFlushing": {
              "value": function () { return this.set_flushing.apply(this, arguments); }
            },
            "setFunction": {
              "value": function () { return this.set_function.apply(this, arguments); }
            },
            "setQueryFunction": {
              "value": function () { return this.set_query_function.apply(this, arguments); }
            },
            "setWaiting": {
              "value": function () { return this.set_waiting.apply(this, arguments); }
            },
            "srcEventDefault": {
              "value": function () { return this.src_event_default.apply(this, arguments); }
            },
            "takeBuffer": {
              "value": function () { return this.take_buffer.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DataQueue": {
          "prototype": {
            "dropHead": {
              "value": function () { return this.drop_head.apply(this, arguments); }
            },
            "getLevel": {
              "value": function () { return this.get_level.apply(this, arguments); }
            },
            "isEmpty": {
              "value": function () { return this.is_empty.apply(this, arguments); }
            },
            "isFull": {
              "value": function () { return this.is_full.apply(this, arguments); }
            },
            "limitsChanged": {
              "value": function () { return this.limits_changed.apply(this, arguments); }
            },
            "pushForce": {
              "value": function () { return this.push_force.apply(this, arguments); }
            },
            "setFlushing": {
              "value": function () { return this.set_flushing.apply(this, arguments); }
            },
            "currentLevelBytes": {
              "get": function () { return this.current_level_bytes; },
              "set": function (value) { this.current_level_bytes = value; }
            },
            "currentLevelTime": {
              "get": function () { return this.current_level_time; },
              "set": function (value) { this.current_level_time = value; }
            },
            "currentLevelVisible": {
              "get": function () { return this.current_level_visible; },
              "set": function (value) { this.current_level_visible = value; }
            }
          },
          "static": {}
        },
        "PushSrc": {
          "prototype": {},
          "static": {}
        }
      },
      "static": {
        "bitReaderNew": {
          "value": function () { return this.bit_reader_new.apply(this, arguments); }
        },
        "byteReaderNew": {
          "value": function () { return this.byte_reader_new.apply(this, arguments); }
        },
        "byteWriterNew": {
          "value": function () { return this.byte_writer_new.apply(this, arguments); }
        },
        "byteWriterNewWithData": {
          "value": function () { return this.byte_writer_new_with_data.apply(this, arguments); }
        },
        "byteWriterNewWithSize": {
          "value": function () { return this.byte_writer_new_with_size.apply(this, arguments); }
        },
        "queueArrayNew": {
          "value": function () { return this.queue_array_new.apply(this, arguments); }
        },
        "queueArrayNewForStruct": {
          "value": function () { return this.queue_array_new_for_struct.apply(this, arguments); }
        },
        "typeFindHelper": {
          "value": function () { return this.type_find_helper.apply(this, arguments); }
        },
        "typeFindHelperForBuffer": {
          "value": function () { return this.type_find_helper_for_buffer.apply(this, arguments); }
        },
        "typeFindHelperForData": {
          "value": function () { return this.type_find_helper_for_data.apply(this, arguments); }
        },
        "typeFindHelperForExtension": {
          "value": function () { return this.type_find_helper_for_extension.apply(this, arguments); }
        },
        "typeFindHelperGetRange": {
          "value": function () { return this.type_find_helper_get_range.apply(this, arguments); }
        }
      }
    },
    "GstCheck": {
      "class": {
        "TestClock": {
          "prototype": {
            "advanceTime": {
              "value": function () { return this.advance_time.apply(this, arguments); }
            },
            "getNextEntryTime": {
              "value": function () { return this.get_next_entry_time.apply(this, arguments); }
            },
            "hasId": {
              "value": function () { return this.has_id.apply(this, arguments); }
            },
            "peekIdCount": {
              "value": function () { return this.peek_id_count.apply(this, arguments); }
            },
            "peekNextPendingId": {
              "value": function () { return this.peek_next_pending_id.apply(this, arguments); }
            },
            "processIdList": {
              "value": function () { return this.process_id_list.apply(this, arguments); }
            },
            "processNextClockId": {
              "value": function () { return this.process_next_clock_id.apply(this, arguments); }
            },
            "setTime": {
              "value": function () { return this.set_time.apply(this, arguments); }
            },
            "waitForMultiplePendingIds": {
              "value": function () { return this.wait_for_multiple_pending_ids.apply(this, arguments); }
            },
            "waitForNextPendingId": {
              "value": function () { return this.wait_for_next_pending_id.apply(this, arguments); }
            },
            "waitForPendingIdCount": {
              "value": function () { return this.wait_for_pending_id_count.apply(this, arguments); }
            },
            "startTime": {
              "get": function () { return this.start_time; },
              "set": function (value) { this.start_time = value; }
            }
          },
          "static": {
            "idListGetLatestTime": {
              "value": function () { return this.id_list_get_latest_time.apply(this, arguments); }
            }
          }
        }
      },
      "static": {
        "bufferStrawGetBuffer": {
          "value": function () { return this.buffer_straw_get_buffer.apply(this, arguments); }
        },
        "bufferStrawStartPipeline": {
          "value": function () { return this.buffer_straw_start_pipeline.apply(this, arguments); }
        },
        "bufferStrawStopPipeline": {
          "value": function () { return this.buffer_straw_stop_pipeline.apply(this, arguments); }
        },
        "checkAbiList": {
          "value": function () { return this.check_abi_list.apply(this, arguments); }
        },
        "checkBufferData": {
          "value": function () { return this.check_buffer_data.apply(this, arguments); }
        },
        "checkCapsEqual": {
          "value": function () { return this.check_caps_equal.apply(this, arguments); }
        },
        "checkChainFunc": {
          "value": function () { return this.check_chain_func.apply(this, arguments); }
        },
        "checkDropBuffers": {
          "value": function () { return this.check_drop_buffers.apply(this, arguments); }
        },
        "checkElementPushBuffer": {
          "value": function () { return this.check_element_push_buffer.apply(this, arguments); }
        },
        "checkElementPushBufferList": {
          "value": function () { return this.check_element_push_buffer_list.apply(this, arguments); }
        },
        "checkInit": {
          "value": function () { return this.check_init.apply(this, arguments); }
        },
        "checkMessageError": {
          "value": function () { return this.check_message_error.apply(this, arguments); }
        },
        "checkObjectDestroyedOnUnref": {
          "value": function () { return this.check_object_destroyed_on_unref.apply(this, arguments); }
        },
        "checkObjectsDestroyedOnUnref": {
          "value": function () { return this.check_objects_destroyed_on_unref.apply(this, arguments); }
        },
        "checkRunSuite": {
          "value": function () { return this.check_run_suite.apply(this, arguments); }
        },
        "checkSetupElement": {
          "value": function () { return this.check_setup_element.apply(this, arguments); }
        },
        "checkSetupEvents": {
          "value": function () { return this.check_setup_events.apply(this, arguments); }
        },
        "checkSetupEventsWithStreamId": {
          "value": function () { return this.check_setup_events_with_stream_id.apply(this, arguments); }
        },
        "checkSetupSinkPad": {
          "value": function () { return this.check_setup_sink_pad.apply(this, arguments); }
        },
        "checkSetupSinkPadByName": {
          "value": function () { return this.check_setup_sink_pad_by_name.apply(this, arguments); }
        },
        "checkSetupSinkPadByNameFromTemplate": {
          "value": function () { return this.check_setup_sink_pad_by_name_from_template.apply(this, arguments); }
        },
        "checkSetupSinkPadFromTemplate": {
          "value": function () { return this.check_setup_sink_pad_from_template.apply(this, arguments); }
        },
        "checkSetupSrcPad": {
          "value": function () { return this.check_setup_src_pad.apply(this, arguments); }
        },
        "checkSetupSrcPadByName": {
          "value": function () { return this.check_setup_src_pad_by_name.apply(this, arguments); }
        },
        "checkSetupSrcPadByNameFromTemplate": {
          "value": function () { return this.check_setup_src_pad_by_name_from_template.apply(this, arguments); }
        },
        "checkSetupSrcPadFromTemplate": {
          "value": function () { return this.check_setup_src_pad_from_template.apply(this, arguments); }
        },
        "checkTeardownElement": {
          "value": function () { return this.check_teardown_element.apply(this, arguments); }
        },
        "checkTeardownPadByName": {
          "value": function () { return this.check_teardown_pad_by_name.apply(this, arguments); }
        },
        "checkTeardownSinkPad": {
          "value": function () { return this.check_teardown_sink_pad.apply(this, arguments); }
        },
        "checkTeardownSrcPad": {
          "value": function () { return this.check_teardown_src_pad.apply(this, arguments); }
        },
        "consistencyCheckerAddPad": {
          "value": function () { return this.consistency_checker_add_pad.apply(this, arguments); }
        },
        "consistencyCheckerFree": {
          "value": function () { return this.consistency_checker_free.apply(this, arguments); }
        },
        "consistencyCheckerNew": {
          "value": function () { return this.consistency_checker_new.apply(this, arguments); }
        },
        "consistencyCheckerReset": {
          "value": function () { return this.consistency_checker_reset.apply(this, arguments); }
        },
        "harnessNew": {
          "value": function () { return this.harness_new.apply(this, arguments); }
        },
        "harnessNewFull": {
          "value": function () { return this.harness_new_full.apply(this, arguments); }
        },
        "harnessNewParse": {
          "value": function () { return this.harness_new_parse.apply(this, arguments); }
        },
        "harnessNewWithElement": {
          "value": function () { return this.harness_new_with_element.apply(this, arguments); }
        },
        "harnessNewWithPadnames": {
          "value": function () { return this.harness_new_with_padnames.apply(this, arguments); }
        },
        "harnessNewWithTemplates": {
          "value": function () { return this.harness_new_with_templates.apply(this, arguments); }
        },
        "harnessStressThreadStop": {
          "value": function () { return this.harness_stress_thread_stop.apply(this, arguments); }
        }
      }
    },
    "GstController": {
      "class": {
        "ARGBControlBinding": {
          "prototype": {
            "controlSourceA": {
              "get": function () { return this.control_source_a; },
              "set": function (value) { this.control_source_a = value; }
            },
            "controlSourceB": {
              "get": function () { return this.control_source_b; },
              "set": function (value) { this.control_source_b = value; }
            },
            "controlSourceG": {
              "get": function () { return this.control_source_g; },
              "set": function (value) { this.control_source_g = value; }
            },
            "controlSourceR": {
              "get": function () { return this.control_source_r; },
              "set": function (value) { this.control_source_r = value; }
            }
          },
          "static": {}
        },
        "DirectControlBinding": {
          "prototype": {
            "controlSource": {
              "get": function () { return this.control_source; },
              "set": function (value) { this.control_source = value; }
            }
          },
          "static": {}
        },
        "InterpolationControlSource": {
          "prototype": {},
          "static": {}
        },
        "LFOControlSource": {
          "prototype": {},
          "static": {}
        },
        "TimedValueControlSource": {
          "prototype": {
            "findControlPointIter": {
              "value": function () { return this.find_control_point_iter.apply(this, arguments); }
            },
            "getAll": {
              "value": function () { return this.get_all.apply(this, arguments); }
            },
            "getCount": {
              "value": function () { return this.get_count.apply(this, arguments); }
            },
            "setFromList": {
              "value": function () { return this.set_from_list.apply(this, arguments); }
            },
            "unsetAll": {
              "value": function () { return this.unset_all.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "TriggerControlSource": {
          "prototype": {},
          "static": {}
        }
      },
      "static": {
        "timedValueControlInvalidateCache": {
          "value": function () { return this.timed_value_control_invalidate_cache.apply(this, arguments); }
        }
      }
    },
    "GstFft": {
      "class": {},
      "static": {
        "fftF32New": {
          "value": function () { return this.fft_f32_new.apply(this, arguments); }
        },
        "fftF64New": {
          "value": function () { return this.fft_f64_new.apply(this, arguments); }
        },
        "fftNextFastLength": {
          "value": function () { return this.fft_next_fast_length.apply(this, arguments); }
        },
        "fftS16New": {
          "value": function () { return this.fft_s16_new.apply(this, arguments); }
        },
        "fftS32New": {
          "value": function () { return this.fft_s32_new.apply(this, arguments); }
        }
      }
    },
    "GstGL": {
      "class": {
        "GLAllocator": {
          "prototype": {},
          "static": {}
        },
        "GLBaseBufferAllocator": {
          "prototype": {},
          "static": {}
        },
        "GLBaseFilter": {
          "prototype": {},
          "static": {}
        },
        "GLBufferPool": {
          "prototype": {
            "replaceLastBuffer": {
              "value": function () { return this.replace_last_buffer.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "GLColorConvert": {
          "prototype": {
            "setCaps": {
              "value": function () { return this.set_caps.apply(this, arguments); }
            }
          },
          "static": {
            "transformCaps": {
              "value": function () { return this.transform_caps.apply(this, arguments); }
            }
          }
        },
        "GLContext": {
          "prototype": {
            "canShare": {
              "value": function () { return this.can_share.apply(this, arguments); }
            },
            "checkFeature": {
              "value": function () { return this.check_feature.apply(this, arguments); }
            },
            "checkFramebufferStatus": {
              "value": function () { return this.check_framebuffer_status.apply(this, arguments); }
            },
            "checkGlVersion": {
              "value": function () { return this.check_gl_version.apply(this, arguments); }
            },
            "clearShader": {
              "value": function () { return this.clear_shader.apply(this, arguments); }
            },
            "delFbo": {
              "value": function () { return this.del_fbo.apply(this, arguments); }
            },
            "delShader": {
              "value": function () { return this.del_shader.apply(this, arguments); }
            },
            "delTexture": {
              "value": function () { return this.del_texture.apply(this, arguments); }
            },
            "fillInfo": {
              "value": function () { return this.fill_info.apply(this, arguments); }
            },
            "genFbo": {
              "value": function () { return this.gen_fbo.apply(this, arguments); }
            },
            "genShader": {
              "value": function () { return this.gen_shader.apply(this, arguments); }
            },
            "genTexture": {
              "value": function () { return this.gen_texture.apply(this, arguments); }
            },
            "getDisplay": {
              "value": function () { return this.get_display.apply(this, arguments); }
            },
            "getGlApi": {
              "value": function () { return this.get_gl_api.apply(this, arguments); }
            },
            "getGlContext": {
              "value": function () { return this.get_gl_context.apply(this, arguments); }
            },
            "getGlPlatform": {
              "value": function () { return this.get_gl_platform.apply(this, arguments); }
            },
            "getGlVersion": {
              "value": function () { return this.get_gl_version.apply(this, arguments); }
            },
            "getProcAddress": {
              "value": function () { return this.get_proc_address.apply(this, arguments); }
            },
            "getThread": {
              "value": function () { return this.get_thread.apply(this, arguments); }
            },
            "getWindow": {
              "value": function () { return this.get_window.apply(this, arguments); }
            },
            "setError": {
              "value": function () { return this.set_error.apply(this, arguments); }
            },
            "setWindow": {
              "value": function () { return this.set_window.apply(this, arguments); }
            },
            "threadAdd": {
              "value": function () { return this.thread_add.apply(this, arguments); }
            },
            "useFboV2": {
              "value": function () { return this.use_fbo_v2.apply(this, arguments); }
            }
          },
          "static": {
            "defaultGetProcAddress": {
              "value": function () { return this.default_get_proc_address.apply(this, arguments); }
            },
            "errorQuark": {
              "value": function () { return this.error_quark.apply(this, arguments); }
            },
            "getCurrent": {
              "value": function () { return this.get_current.apply(this, arguments); }
            },
            "getCurrentGlApi": {
              "value": function () { return this.get_current_gl_api.apply(this, arguments); }
            },
            "getCurrentGlContext": {
              "value": function () { return this.get_current_gl_context.apply(this, arguments); }
            },
            "getError": {
              "value": function () { return this.get_error.apply(this, arguments); }
            },
            "getProcAddressWithPlatform": {
              "value": function () { return this.get_proc_address_with_platform.apply(this, arguments); }
            }
          }
        },
        "GLDisplay": {
          "prototype": {
            "addContext": {
              "value": function () { return this.add_context.apply(this, arguments); }
            },
            "createContext": {
              "value": function () { return this.create_context.apply(this, arguments); }
            },
            "filterGlApi": {
              "value": function () { return this.filter_gl_api.apply(this, arguments); }
            },
            "getGlApi": {
              "value": function () { return this.get_gl_api.apply(this, arguments); }
            },
            "getGlApiUnlocked": {
              "value": function () { return this.get_gl_api_unlocked.apply(this, arguments); }
            },
            "getGlContextForThread": {
              "value": function () { return this.get_gl_context_for_thread.apply(this, arguments); }
            },
            "getHandle": {
              "value": function () { return this.get_handle.apply(this, arguments); }
            },
            "getHandleType": {
              "value": function () { return this.get_handle_type.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "GLDownload": {
          "prototype": {
            "performWithData": {
              "value": function () { return this.perform_with_data.apply(this, arguments); }
            },
            "setFormat": {
              "value": function () { return this.set_format.apply(this, arguments); }
            }
          },
          "static": {
            "transformCaps": {
              "value": function () { return this.transform_caps.apply(this, arguments); }
            }
          }
        },
        "GLFilter": {
          "prototype": {
            "drawTexture": {
              "value": function () { return this.draw_texture.apply(this, arguments); }
            },
            "filterTexture": {
              "value": function () { return this.filter_texture.apply(this, arguments); }
            },
            "renderToTarget": {
              "value": function () { return this.render_to_target.apply(this, arguments); }
            },
            "renderToTargetWithShader": {
              "value": function () { return this.render_to_target_with_shader.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "GLFramebuffer": {
          "prototype": {
            "useV2": {
              "value": function () { return this.use_v2.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "GLOverlayCompositor": {
          "prototype": {
            "drawOverlays": {
              "value": function () { return this.draw_overlays.apply(this, arguments); }
            },
            "freeOverlays": {
              "value": function () { return this.free_overlays.apply(this, arguments); }
            },
            "uploadOverlays": {
              "value": function () { return this.upload_overlays.apply(this, arguments); }
            }
          },
          "static": {
            "addCaps": {
              "value": function () { return this.add_caps.apply(this, arguments); }
            }
          }
        },
        "GLShader": {
          "prototype": {
            "ariableSet": {
              "value": function () { return this.ariable_set.apply(this, arguments); }
            },
            "ariablesParse": {
              "value": function () { return this.ariables_parse.apply(this, arguments); }
            },
            "bindAttributeLocation": {
              "value": function () { return this.bind_attribute_location.apply(this, arguments); }
            },
            "compileAllWithAttribsAndCheck": {
              "value": function () { return this.compile_all_with_attribs_and_check.apply(this, arguments); }
            },
            "compileAndCheck": {
              "value": function () { return this.compile_and_check.apply(this, arguments); }
            },
            "compileWithDefaultFAndCheck": {
              "value": function () { return this.compile_with_default_f_and_check.apply(this, arguments); }
            },
            "compileWithDefaultVAndCheck": {
              "value": function () { return this.compile_with_default_v_and_check.apply(this, arguments); }
            },
            "compileWithDefaultVfAndCheck": {
              "value": function () { return this.compile_with_default_vf_and_check.apply(this, arguments); }
            },
            "getAttributeLocation": {
              "value": function () { return this.get_attribute_location.apply(this, arguments); }
            },
            "getFragmentSource": {
              "value": function () { return this.get_fragment_source.apply(this, arguments); }
            },
            "getProgramHandle": {
              "value": function () { return this.get_program_handle.apply(this, arguments); }
            },
            "getVertexSource": {
              "value": function () { return this.get_vertex_source.apply(this, arguments); }
            },
            "isCompiled": {
              "value": function () { return this.is_compiled.apply(this, arguments); }
            },
            "setActive": {
              "value": function () { return this.set_active.apply(this, arguments); }
            },
            "setFragmentSource": {
              "value": function () { return this.set_fragment_source.apply(this, arguments); }
            },
            "setUniform1f": {
              "value": function () { return this.set_uniform_1f.apply(this, arguments); }
            },
            "setUniform1fv": {
              "value": function () { return this.set_uniform_1fv.apply(this, arguments); }
            },
            "setUniform1i": {
              "value": function () { return this.set_uniform_1i.apply(this, arguments); }
            },
            "setUniform1iv": {
              "value": function () { return this.set_uniform_1iv.apply(this, arguments); }
            },
            "setUniform2f": {
              "value": function () { return this.set_uniform_2f.apply(this, arguments); }
            },
            "setUniform2fv": {
              "value": function () { return this.set_uniform_2fv.apply(this, arguments); }
            },
            "setUniform2i": {
              "value": function () { return this.set_uniform_2i.apply(this, arguments); }
            },
            "setUniform2iv": {
              "value": function () { return this.set_uniform_2iv.apply(this, arguments); }
            },
            "setUniform3f": {
              "value": function () { return this.set_uniform_3f.apply(this, arguments); }
            },
            "setUniform3fv": {
              "value": function () { return this.set_uniform_3fv.apply(this, arguments); }
            },
            "setUniform3i": {
              "value": function () { return this.set_uniform_3i.apply(this, arguments); }
            },
            "setUniform3iv": {
              "value": function () { return this.set_uniform_3iv.apply(this, arguments); }
            },
            "setUniform4f": {
              "value": function () { return this.set_uniform_4f.apply(this, arguments); }
            },
            "setUniform4fv": {
              "value": function () { return this.set_uniform_4fv.apply(this, arguments); }
            },
            "setUniform4i": {
              "value": function () { return this.set_uniform_4i.apply(this, arguments); }
            },
            "setUniform4iv": {
              "value": function () { return this.set_uniform_4iv.apply(this, arguments); }
            },
            "setUniformMatrix2fv": {
              "value": function () { return this.set_uniform_matrix_2fv.apply(this, arguments); }
            },
            "setUniformMatrix2x3fv": {
              "value": function () { return this.set_uniform_matrix_2x3fv.apply(this, arguments); }
            },
            "setUniformMatrix2x4fv": {
              "value": function () { return this.set_uniform_matrix_2x4fv.apply(this, arguments); }
            },
            "setUniformMatrix3fv": {
              "value": function () { return this.set_uniform_matrix_3fv.apply(this, arguments); }
            },
            "setUniformMatrix3x2fv": {
              "value": function () { return this.set_uniform_matrix_3x2fv.apply(this, arguments); }
            },
            "setUniformMatrix3x4fv": {
              "value": function () { return this.set_uniform_matrix_3x4fv.apply(this, arguments); }
            },
            "setUniformMatrix4fv": {
              "value": function () { return this.set_uniform_matrix_4fv.apply(this, arguments); }
            },
            "setUniformMatrix4x2fv": {
              "value": function () { return this.set_uniform_matrix_4x2fv.apply(this, arguments); }
            },
            "setUniformMatrix4x3fv": {
              "value": function () { return this.set_uniform_matrix_4x3fv.apply(this, arguments); }
            },
            "setVertexSource": {
              "value": function () { return this.set_vertex_source.apply(this, arguments); }
            },
            "fragmentSrc": {
              "get": function () { return this.fragment_src; },
              "set": function (value) { this.fragment_src = value; }
            },
            "vertexSrc": {
              "get": function () { return this.vertex_src; },
              "set": function (value) { this.vertex_src = value; }
            }
          },
          "static": {
            "errorQuark": {
              "value": function () { return this.error_quark.apply(this, arguments); }
            }
          }
        },
        "GLUpload": {
          "prototype": {
            "getCaps": {
              "value": function () { return this.get_caps.apply(this, arguments); }
            },
            "performWithBuffer": {
              "value": function () { return this.perform_with_buffer.apply(this, arguments); }
            },
            "proposeAllocation": {
              "value": function () { return this.propose_allocation.apply(this, arguments); }
            },
            "releaseBuffer": {
              "value": function () { return this.release_buffer.apply(this, arguments); }
            },
            "setCaps": {
              "value": function () { return this.set_caps.apply(this, arguments); }
            }
          },
          "static": {
            "getInputTemplateCaps": {
              "value": function () { return this.get_input_template_caps.apply(this, arguments); }
            },
            "transformCaps": {
              "value": function () { return this.transform_caps.apply(this, arguments); }
            }
          }
        },
        "GLUploadMeta": {
          "prototype": {
            "addToBuffer": {
              "value": function () { return this.add_to_buffer.apply(this, arguments); }
            },
            "getFormat": {
              "value": function () { return this.get_format.apply(this, arguments); }
            },
            "setFormat": {
              "value": function () { return this.set_format.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "GLViewConvert": {
          "prototype": {
            "fixateCaps": {
              "value": function () { return this.fixate_caps.apply(this, arguments); }
            },
            "getOutput": {
              "value": function () { return this.get_output.apply(this, arguments); }
            },
            "setCaps": {
              "value": function () { return this.set_caps.apply(this, arguments); }
            },
            "setContext": {
              "value": function () { return this.set_context.apply(this, arguments); }
            },
            "setFormat": {
              "value": function () { return this.set_format.apply(this, arguments); }
            },
            "submitInputBuffer": {
              "value": function () { return this.submit_input_buffer.apply(this, arguments); }
            },
            "transformCaps": {
              "value": function () { return this.transform_caps.apply(this, arguments); }
            },
            "downmixMode": {
              "get": function () { return this.downmix_mode; },
              "set": function (value) { this.downmix_mode = value; }
            },
            "inputFlagsOverride": {
              "get": function () { return this.input_flags_override; },
              "set": function (value) { this.input_flags_override = value; }
            },
            "inputModeOverride": {
              "get": function () { return this.input_mode_override; },
              "set": function (value) { this.input_mode_override = value; }
            },
            "outputFlagsOverride": {
              "get": function () { return this.output_flags_override; },
              "set": function (value) { this.output_flags_override = value; }
            },
            "outputModeOverride": {
              "get": function () { return this.output_mode_override; },
              "set": function (value) { this.output_mode_override = value; }
            }
          },
          "static": {}
        },
        "GLWindow": {
          "prototype": {
            "drawUnlocked": {
              "value": function () { return this.draw_unlocked.apply(this, arguments); }
            },
            "getContext": {
              "value": function () { return this.get_context.apply(this, arguments); }
            },
            "getDisplay": {
              "value": function () { return this.get_display.apply(this, arguments); }
            },
            "getSurfaceDimensions": {
              "value": function () { return this.get_surface_dimensions.apply(this, arguments); }
            },
            "getWindowHandle": {
              "value": function () { return this.get_window_handle.apply(this, arguments); }
            },
            "handleEvents": {
              "value": function () { return this.handle_events.apply(this, arguments); }
            },
            "isRunning": {
              "value": function () { return this.is_running.apply(this, arguments); }
            },
            "queueResize": {
              "value": function () { return this.queue_resize.apply(this, arguments); }
            },
            "sendKeyEvent": {
              "value": function () { return this.send_key_event.apply(this, arguments); }
            },
            "sendMessage": {
              "value": function () { return this.send_message.apply(this, arguments); }
            },
            "sendMessageAsync": {
              "value": function () { return this.send_message_async.apply(this, arguments); }
            },
            "sendMouseEvent": {
              "value": function () { return this.send_mouse_event.apply(this, arguments); }
            },
            "setCloseCallback": {
              "value": function () { return this.set_close_callback.apply(this, arguments); }
            },
            "setDrawCallback": {
              "value": function () { return this.set_draw_callback.apply(this, arguments); }
            },
            "setPreferredSize": {
              "value": function () { return this.set_preferred_size.apply(this, arguments); }
            },
            "setRenderRectangle": {
              "value": function () { return this.set_render_rectangle.apply(this, arguments); }
            },
            "setResizeCallback": {
              "value": function () { return this.set_resize_callback.apply(this, arguments); }
            },
            "setWindowHandle": {
              "value": function () { return this.set_window_handle.apply(this, arguments); }
            }
          },
          "static": {
            "errorQuark": {
              "value": function () { return this.error_quark.apply(this, arguments); }
            },
            "keyEventCb": {
              "value": function () { return this.key_event_cb.apply(this, arguments); }
            },
            "mouseEventCb": {
              "value": function () { return this.mouse_event_cb.apply(this, arguments); }
            }
          }
        }
      },
      "static": {
        "bufferAddGlSyncMeta": {
          "value": function () { return this.buffer_add_gl_sync_meta.apply(this, arguments); }
        },
        "contextGetGlDisplay": {
          "value": function () { return this.context_get_gl_display.apply(this, arguments); }
        },
        "contextSetGlDisplay": {
          "value": function () { return this.context_set_gl_display.apply(this, arguments); }
        },
        "glApiFromString": {
          "value": function () { return this.gl_api_from_string.apply(this, arguments); }
        },
        "glApiToString": {
          "value": function () { return this.gl_api_to_string.apply(this, arguments); }
        },
        "glBaseBufferErrorQuark": {
          "value": function () { return this.gl_base_buffer_error_quark.apply(this, arguments); }
        },
        "glBaseBufferInitOnce": {
          "value": function () { return this.gl_base_buffer_init_once.apply(this, arguments); }
        },
        "glCapsReplaceAllCapsFeatures": {
          "value": function () { return this.gl_caps_replace_all_caps_features.apply(this, arguments); }
        },
        "glCheckExtension": {
          "value": function () { return this.gl_check_extension.apply(this, arguments); }
        },
        "glEnsureElementData": {
          "value": function () { return this.gl_ensure_element_data.apply(this, arguments); }
        },
        "glFormatFromGlTextureType": {
          "value": function () { return this.gl_format_from_gl_texture_type.apply(this, arguments); }
        },
        "glGenerateTextureFull": {
          "value": function () { return this.gl_generate_texture_full.apply(this, arguments); }
        },
        "glGetPlaneDataSize": {
          "value": function () { return this.gl_get_plane_data_size.apply(this, arguments); }
        },
        "glHandleContextQuery": {
          "value": function () { return this.gl_handle_context_query.apply(this, arguments); }
        },
        "glHandleSetContext": {
          "value": function () { return this.gl_handle_set_context.apply(this, arguments); }
        },
        "glMemoryInit": {
          "value": function () { return this.gl_memory_init.apply(this, arguments); }
        },
        "glPlatformFromString": {
          "value": function () { return this.gl_platform_from_string.apply(this, arguments); }
        },
        "glPlatformToString": {
          "value": function () { return this.gl_platform_to_string.apply(this, arguments); }
        },
        "glRunQuery": {
          "value": function () { return this.gl_run_query.apply(this, arguments); }
        },
        "glShadervariableSet": {
          "value": function () { return this.gl_shadervariable_set.apply(this, arguments); }
        },
        "glShadervariablesParse": {
          "value": function () { return this.gl_shadervariables_parse.apply(this, arguments); }
        },
        "glSizedGlFormatFromGlFormatType": {
          "value": function () { return this.gl_sized_gl_format_from_gl_format_type.apply(this, arguments); }
        },
        "glSyncMetaApiGetType": {
          "value": function () { return this.gl_sync_meta_api_get_type.apply(this, arguments); }
        },
        "glSyncMetaGetInfo": {
          "value": function () { return this.gl_sync_meta_get_info.apply(this, arguments); }
        },
        "glTextureTypeFromFormat": {
          "value": function () { return this.gl_texture_type_from_format.apply(this, arguments); }
        },
        "isGlBaseBuffer": {
          "value": function () { return this.is_gl_base_buffer.apply(this, arguments); }
        },
        "isGlMemory": {
          "value": function () { return this.is_gl_memory.apply(this, arguments); }
        }
      }
    },
    "GstInsertBin": {
      "class": {
        "InsertBin": {
          "prototype": {
            "insertAfter": {
              "value": function () { return this.insert_after.apply(this, arguments); }
            },
            "insertBefore": {
              "value": function () { return this.insert_before.apply(this, arguments); }
            }
          },
          "static": {}
        }
      },
      "static": {}
    },
    "GstInterfaces": {
      "class": {
        "ColorBalanceChannel": {
          "prototype": {},
          "static": {}
        },
        "MixerOptions": {
          "prototype": {
            "getValues": {
              "value": function () { return this.get_values.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "MixerTrack": {
          "prototype": {
            "maxVolume": {
              "get": function () { return this.max_volume; },
              "set": function (value) { this.max_volume = value; }
            },
            "minVolume": {
              "get": function () { return this.min_volume; },
              "set": function (value) { this.min_volume = value; }
            },
            "numChannels": {
              "get": function () { return this.num_channels; },
              "set": function (value) { this.num_channels = value; }
            },
            "untranslatedLabel": {
              "get": function () { return this.untranslated_label; },
              "set": function (value) { this.untranslated_label = value; }
            }
          },
          "static": {}
        },
        "TunerChannel": {
          "prototype": {},
          "static": {}
        },
        "TunerNorm": {
          "prototype": {},
          "static": {}
        }
      },
      "static": {
        "interfacesMarshalVOID_OBJECTBOOLEAN": {
          "value": function () { return this.interfaces_marshal_VOID__OBJECT_BOOLEAN.apply(this, arguments); }
        },
        "interfacesMarshalVOID_OBJECTINT": {
          "value": function () { return this.interfaces_marshal_VOID__OBJECT_INT.apply(this, arguments); }
        },
        "interfacesMarshalVOID_OBJECTPOINTER": {
          "value": function () { return this.interfaces_marshal_VOID__OBJECT_POINTER.apply(this, arguments); }
        },
        "interfacesMarshalVOID_OBJECTSTRING": {
          "value": function () { return this.interfaces_marshal_VOID__OBJECT_STRING.apply(this, arguments); }
        },
        "interfacesMarshalVOID_OBJECTULONG": {
          "value": function () { return this.interfaces_marshal_VOID__OBJECT_ULONG.apply(this, arguments); }
        },
        "mixerMessageGetType": {
          "value": function () { return this.mixer_message_get_type.apply(this, arguments); }
        },
        "mixerMessageParseMuteToggled": {
          "value": function () { return this.mixer_message_parse_mute_toggled.apply(this, arguments); }
        },
        "mixerMessageParseOptionChanged": {
          "value": function () { return this.mixer_message_parse_option_changed.apply(this, arguments); }
        },
        "mixerMessageParseOptionsListChanged": {
          "value": function () { return this.mixer_message_parse_options_list_changed.apply(this, arguments); }
        },
        "mixerMessageParseRecordToggled": {
          "value": function () { return this.mixer_message_parse_record_toggled.apply(this, arguments); }
        },
        "mixerMessageParseVolumeChanged": {
          "value": function () { return this.mixer_message_parse_volume_changed.apply(this, arguments); }
        },
        "navigationEventGetType": {
          "value": function () { return this.navigation_event_get_type.apply(this, arguments); }
        },
        "navigationEventParseCommand": {
          "value": function () { return this.navigation_event_parse_command.apply(this, arguments); }
        },
        "navigationEventParseKeyEvent": {
          "value": function () { return this.navigation_event_parse_key_event.apply(this, arguments); }
        },
        "navigationEventParseMouseButtonEvent": {
          "value": function () { return this.navigation_event_parse_mouse_button_event.apply(this, arguments); }
        },
        "navigationEventParseMouseMoveEvent": {
          "value": function () { return this.navigation_event_parse_mouse_move_event.apply(this, arguments); }
        },
        "navigationMessageGetType": {
          "value": function () { return this.navigation_message_get_type.apply(this, arguments); }
        },
        "navigationMessageParseAnglesChanged": {
          "value": function () { return this.navigation_message_parse_angles_changed.apply(this, arguments); }
        },
        "navigationMessageParseMouseOver": {
          "value": function () { return this.navigation_message_parse_mouse_over.apply(this, arguments); }
        },
        "navigationQueryGetType": {
          "value": function () { return this.navigation_query_get_type.apply(this, arguments); }
        },
        "navigationQueryParseAngles": {
          "value": function () { return this.navigation_query_parse_angles.apply(this, arguments); }
        },
        "navigationQueryParseCommandsLength": {
          "value": function () { return this.navigation_query_parse_commands_length.apply(this, arguments); }
        },
        "navigationQueryParseCommandsNth": {
          "value": function () { return this.navigation_query_parse_commands_nth.apply(this, arguments); }
        },
        "navigationQuerySetAngles": {
          "value": function () { return this.navigation_query_set_angles.apply(this, arguments); }
        },
        "navigationQuerySetCommandsv": {
          "value": function () { return this.navigation_query_set_commandsv.apply(this, arguments); }
        },
        "streamVolumeConvertVolume": {
          "value": function () { return this.stream_volume_convert_volume.apply(this, arguments); }
        }
      }
    },
    "GstMpegts": {
      "class": {},
      "static": {
        "descriptorFromCustom": {
          "value": function () { return this.descriptor_from_custom.apply(this, arguments); }
        },
        "descriptorFromDvbNetworkName": {
          "value": function () { return this.descriptor_from_dvb_network_name.apply(this, arguments); }
        },
        "descriptorFromDvbService": {
          "value": function () { return this.descriptor_from_dvb_service.apply(this, arguments); }
        },
        "descriptorFromDvbSubtitling": {
          "value": function () { return this.descriptor_from_dvb_subtitling.apply(this, arguments); }
        },
        "descriptorFromRegistration": {
          "value": function () { return this.descriptor_from_registration.apply(this, arguments); }
        },
        "dvbComponentDescriptorFree": {
          "value": function () { return this.dvb_component_descriptor_free.apply(this, arguments); }
        },
        "eventParseMpegtsSection": {
          "value": function () { return this.event_parse_mpegts_section.apply(this, arguments); }
        },
        "findDescriptor": {
          "value": function () { return this.find_descriptor.apply(this, arguments); }
        },
        "messageNewMpegtsSection": {
          "value": function () { return this.message_new_mpegts_section.apply(this, arguments); }
        },
        "messageParseMpegtsSection": {
          "value": function () { return this.message_parse_mpegts_section.apply(this, arguments); }
        },
        "parseDescriptors": {
          "value": function () { return this.parse_descriptors.apply(this, arguments); }
        },
        "patNew": {
          "value": function () { return this.pat_new.apply(this, arguments); }
        },
        "sectionFromNit": {
          "value": function () { return this.section_from_nit.apply(this, arguments); }
        },
        "sectionFromPat": {
          "value": function () { return this.section_from_pat.apply(this, arguments); }
        },
        "sectionFromPmt": {
          "value": function () { return this.section_from_pmt.apply(this, arguments); }
        },
        "sectionFromSdt": {
          "value": function () { return this.section_from_sdt.apply(this, arguments); }
        }
      }
    },
    "GstNet": {
      "class": {
        "NetClientClock": {
          "prototype": {
            "baseTime": {
              "get": function () { return this.base_time; },
              "set": function (value) { this.base_time = value; }
            },
            "internalClock": {
              "get": function () { return this.internal_clock; },
              "set": function (value) { this.internal_clock = value; }
            },
            "minimumUpdateInterval": {
              "get": function () { return this.minimum_update_interval; },
              "set": function (value) { this.minimum_update_interval = value; }
            },
            "roundTripLimit": {
              "get": function () { return this.round_trip_limit; },
              "set": function (value) { this.round_trip_limit = value; }
            }
          },
          "static": {}
        },
        "NetTimeProvider": {
          "prototype": {},
          "static": {}
        },
        "NtpClock": {
          "prototype": {},
          "static": {}
        },
        "PtpClock": {
          "prototype": {
            "internalClock": {
              "get": function () { return this.internal_clock; },
              "set": function (value) { this.internal_clock = value; }
            }
          },
          "static": {}
        }
      },
      "static": {
        "bufferAddNetAddressMeta": {
          "value": function () { return this.buffer_add_net_address_meta.apply(this, arguments); }
        },
        "bufferAddNetControlMessageMeta": {
          "value": function () { return this.buffer_add_net_control_message_meta.apply(this, arguments); }
        },
        "netAddressMetaApiGetType": {
          "value": function () { return this.net_address_meta_api_get_type.apply(this, arguments); }
        },
        "netAddressMetaGetInfo": {
          "value": function () { return this.net_address_meta_get_info.apply(this, arguments); }
        },
        "netControlMessageMetaApiGetType": {
          "value": function () { return this.net_control_message_meta_api_get_type.apply(this, arguments); }
        },
        "netControlMessageMetaGetInfo": {
          "value": function () { return this.net_control_message_meta_get_info.apply(this, arguments); }
        },
        "netTimePacketReceive": {
          "value": function () { return this.net_time_packet_receive.apply(this, arguments); }
        },
        "ptpDeinit": {
          "value": function () { return this.ptp_deinit.apply(this, arguments); }
        },
        "ptpInit": {
          "value": function () { return this.ptp_init.apply(this, arguments); }
        },
        "ptpIsInitialized": {
          "value": function () { return this.ptp_is_initialized.apply(this, arguments); }
        },
        "ptpIsSupported": {
          "value": function () { return this.ptp_is_supported.apply(this, arguments); }
        },
        "ptpStatisticsCallbackAdd": {
          "value": function () { return this.ptp_statistics_callback_add.apply(this, arguments); }
        },
        "ptpStatisticsCallbackRemove": {
          "value": function () { return this.ptp_statistics_callback_remove.apply(this, arguments); }
        }
      }
    },
    "GstNetbuffer": {
      "class": {
        "NetBuffer": {
          "prototype": {},
          "static": {}
        }
      },
      "static": {
        "netaddressEqual": {
          "value": function () { return this.netaddress_equal.apply(this, arguments); }
        },
        "netaddressGetAddressBytes": {
          "value": function () { return this.netaddress_get_address_bytes.apply(this, arguments); }
        },
        "netaddressGetIp4Address": {
          "value": function () { return this.netaddress_get_ip4_address.apply(this, arguments); }
        },
        "netaddressGetIp6Address": {
          "value": function () { return this.netaddress_get_ip6_address.apply(this, arguments); }
        },
        "netaddressGetNetType": {
          "value": function () { return this.netaddress_get_net_type.apply(this, arguments); }
        },
        "netaddressSetAddressBytes": {
          "value": function () { return this.netaddress_set_address_bytes.apply(this, arguments); }
        },
        "netaddressSetIp4Address": {
          "value": function () { return this.netaddress_set_ip4_address.apply(this, arguments); }
        },
        "netaddressSetIp6Address": {
          "value": function () { return this.netaddress_set_ip6_address.apply(this, arguments); }
        },
        "netaddressToString": {
          "value": function () { return this.netaddress_to_string.apply(this, arguments); }
        }
      }
    },
    "GstPbutils": {
      "class": {
        "Discoverer": {
          "prototype": {
            "discoverUri": {
              "value": function () { return this.discover_uri.apply(this, arguments); }
            },
            "discoverUriAsync": {
              "value": function () { return this.discover_uri_async.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DiscovererAudioInfo": {
          "prototype": {
            "getBitrate": {
              "value": function () { return this.get_bitrate.apply(this, arguments); }
            },
            "getChannels": {
              "value": function () { return this.get_channels.apply(this, arguments); }
            },
            "getDepth": {
              "value": function () { return this.get_depth.apply(this, arguments); }
            },
            "getLanguage": {
              "value": function () { return this.get_language.apply(this, arguments); }
            },
            "getMaxBitrate": {
              "value": function () { return this.get_max_bitrate.apply(this, arguments); }
            },
            "getSampleRate": {
              "value": function () { return this.get_sample_rate.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DiscovererContainerInfo": {
          "prototype": {
            "getStreams": {
              "value": function () { return this.get_streams.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DiscovererInfo": {
          "prototype": {
            "getAudioStreams": {
              "value": function () { return this.get_audio_streams.apply(this, arguments); }
            },
            "getContainerStreams": {
              "value": function () { return this.get_container_streams.apply(this, arguments); }
            },
            "getDuration": {
              "value": function () { return this.get_duration.apply(this, arguments); }
            },
            "getMisc": {
              "value": function () { return this.get_misc.apply(this, arguments); }
            },
            "getMissingElementsInstallerDetails": {
              "value": function () { return this.get_missing_elements_installer_details.apply(this, arguments); }
            },
            "getResult": {
              "value": function () { return this.get_result.apply(this, arguments); }
            },
            "getSeekable": {
              "value": function () { return this.get_seekable.apply(this, arguments); }
            },
            "getStreamInfo": {
              "value": function () { return this.get_stream_info.apply(this, arguments); }
            },
            "getStreamList": {
              "value": function () { return this.get_stream_list.apply(this, arguments); }
            },
            "getStreams": {
              "value": function () { return this.get_streams.apply(this, arguments); }
            },
            "getSubtitleStreams": {
              "value": function () { return this.get_subtitle_streams.apply(this, arguments); }
            },
            "getTags": {
              "value": function () { return this.get_tags.apply(this, arguments); }
            },
            "getToc": {
              "value": function () { return this.get_toc.apply(this, arguments); }
            },
            "getUri": {
              "value": function () { return this.get_uri.apply(this, arguments); }
            },
            "getVideoStreams": {
              "value": function () { return this.get_video_streams.apply(this, arguments); }
            },
            "toVariant": {
              "value": function () { return this.to_variant.apply(this, arguments); }
            }
          },
          "static": {
            "fromVariant": {
              "value": function () { return this.from_variant.apply(this, arguments); }
            }
          }
        },
        "DiscovererStreamInfo": {
          "prototype": {
            "getCaps": {
              "value": function () { return this.get_caps.apply(this, arguments); }
            },
            "getMisc": {
              "value": function () { return this.get_misc.apply(this, arguments); }
            },
            "getNext": {
              "value": function () { return this.get_next.apply(this, arguments); }
            },
            "getPrevious": {
              "value": function () { return this.get_previous.apply(this, arguments); }
            },
            "getStreamId": {
              "value": function () { return this.get_stream_id.apply(this, arguments); }
            },
            "getStreamTypeNick": {
              "value": function () { return this.get_stream_type_nick.apply(this, arguments); }
            },
            "getTags": {
              "value": function () { return this.get_tags.apply(this, arguments); }
            },
            "getToc": {
              "value": function () { return this.get_toc.apply(this, arguments); }
            }
          },
          "static": {
            "listFree": {
              "value": function () { return this.list_free.apply(this, arguments); }
            }
          }
        },
        "DiscovererSubtitleInfo": {
          "prototype": {
            "getLanguage": {
              "value": function () { return this.get_language.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DiscovererVideoInfo": {
          "prototype": {
            "getBitrate": {
              "value": function () { return this.get_bitrate.apply(this, arguments); }
            },
            "getDepth": {
              "value": function () { return this.get_depth.apply(this, arguments); }
            },
            "getFramerateDenom": {
              "value": function () { return this.get_framerate_denom.apply(this, arguments); }
            },
            "getFramerateNum": {
              "value": function () { return this.get_framerate_num.apply(this, arguments); }
            },
            "getHeight": {
              "value": function () { return this.get_height.apply(this, arguments); }
            },
            "getMaxBitrate": {
              "value": function () { return this.get_max_bitrate.apply(this, arguments); }
            },
            "getParDenom": {
              "value": function () { return this.get_par_denom.apply(this, arguments); }
            },
            "getParNum": {
              "value": function () { return this.get_par_num.apply(this, arguments); }
            },
            "getWidth": {
              "value": function () { return this.get_width.apply(this, arguments); }
            },
            "isImage": {
              "value": function () { return this.is_image.apply(this, arguments); }
            },
            "isInterlaced": {
              "value": function () { return this.is_interlaced.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "EncodingAudioProfile": {
          "prototype": {},
          "static": {}
        },
        "EncodingContainerProfile": {
          "prototype": {
            "addProfile": {
              "value": function () { return this.add_profile.apply(this, arguments); }
            },
            "containsProfile": {
              "value": function () { return this.contains_profile.apply(this, arguments); }
            },
            "getProfiles": {
              "value": function () { return this.get_profiles.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "EncodingProfile": {
          "prototype": {
            "getAllowDynamicOutput": {
              "value": function () { return this.get_allow_dynamic_output.apply(this, arguments); }
            },
            "getDescription": {
              "value": function () { return this.get_description.apply(this, arguments); }
            },
            "getFileExtension": {
              "value": function () { return this.get_file_extension.apply(this, arguments); }
            },
            "getFormat": {
              "value": function () { return this.get_format.apply(this, arguments); }
            },
            "getInputCaps": {
              "value": function () { return this.get_input_caps.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getPresence": {
              "value": function () { return this.get_presence.apply(this, arguments); }
            },
            "getPreset": {
              "value": function () { return this.get_preset.apply(this, arguments); }
            },
            "getPresetName": {
              "value": function () { return this.get_preset_name.apply(this, arguments); }
            },
            "getRestriction": {
              "value": function () { return this.get_restriction.apply(this, arguments); }
            },
            "getTypeNick": {
              "value": function () { return this.get_type_nick.apply(this, arguments); }
            },
            "isEnabled": {
              "value": function () { return this.is_enabled.apply(this, arguments); }
            },
            "isEqual": {
              "value": function () { return this.is_equal.apply(this, arguments); }
            },
            "setAllowDynamicOutput": {
              "value": function () { return this.set_allow_dynamic_output.apply(this, arguments); }
            },
            "setDescription": {
              "value": function () { return this.set_description.apply(this, arguments); }
            },
            "setEnabled": {
              "value": function () { return this.set_enabled.apply(this, arguments); }
            },
            "setFormat": {
              "value": function () { return this.set_format.apply(this, arguments); }
            },
            "setName": {
              "value": function () { return this.set_name.apply(this, arguments); }
            },
            "setPresence": {
              "value": function () { return this.set_presence.apply(this, arguments); }
            },
            "setPreset": {
              "value": function () { return this.set_preset.apply(this, arguments); }
            },
            "setPresetName": {
              "value": function () { return this.set_preset_name.apply(this, arguments); }
            },
            "setRestriction": {
              "value": function () { return this.set_restriction.apply(this, arguments); }
            },
            "restrictionCaps": {
              "get": function () { return this.restriction_caps; },
              "set": function (value) { this.restriction_caps = value; }
            }
          },
          "static": {
            "fromDiscoverer": {
              "value": function () { return this.from_discoverer.apply(this, arguments); }
            }
          }
        },
        "EncodingTarget": {
          "prototype": {
            "addProfile": {
              "value": function () { return this.add_profile.apply(this, arguments); }
            },
            "getCategory": {
              "value": function () { return this.get_category.apply(this, arguments); }
            },
            "getDescription": {
              "value": function () { return this.get_description.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getProfile": {
              "value": function () { return this.get_profile.apply(this, arguments); }
            },
            "getProfiles": {
              "value": function () { return this.get_profiles.apply(this, arguments); }
            },
            "saveToFile": {
              "value": function () { return this.save_to_file.apply(this, arguments); }
            }
          },
          "static": {
            "loadFromFile": {
              "value": function () { return this.load_from_file.apply(this, arguments); }
            }
          }
        },
        "EncodingVideoProfile": {
          "prototype": {
            "getPass": {
              "value": function () { return this.get_pass.apply(this, arguments); }
            },
            "getVariableframerate": {
              "value": function () { return this.get_variableframerate.apply(this, arguments); }
            },
            "setPass": {
              "value": function () { return this.set_pass.apply(this, arguments); }
            },
            "setVariableframerate": {
              "value": function () { return this.set_variableframerate.apply(this, arguments); }
            }
          },
          "static": {}
        }
      },
      "static": {
        "codecUtilsAacCapsSetLevelAndProfile": {
          "value": function () { return this.codec_utils_aac_caps_set_level_and_profile.apply(this, arguments); }
        },
        "codecUtilsAacGetIndexFromSampleRate": {
          "value": function () { return this.codec_utils_aac_get_index_from_sample_rate.apply(this, arguments); }
        },
        "codecUtilsAacGetLevel": {
          "value": function () { return this.codec_utils_aac_get_level.apply(this, arguments); }
        },
        "codecUtilsAacGetProfile": {
          "value": function () { return this.codec_utils_aac_get_profile.apply(this, arguments); }
        },
        "codecUtilsAacGetSampleRateFromIndex": {
          "value": function () { return this.codec_utils_aac_get_sample_rate_from_index.apply(this, arguments); }
        },
        "codecUtilsH264CapsSetLevelAndProfile": {
          "value": function () { return this.codec_utils_h264_caps_set_level_and_profile.apply(this, arguments); }
        },
        "codecUtilsH264GetLevel": {
          "value": function () { return this.codec_utils_h264_get_level.apply(this, arguments); }
        },
        "codecUtilsH264GetLevelIdc": {
          "value": function () { return this.codec_utils_h264_get_level_idc.apply(this, arguments); }
        },
        "codecUtilsH264GetProfile": {
          "value": function () { return this.codec_utils_h264_get_profile.apply(this, arguments); }
        },
        "codecUtilsH265CapsSetLevelTierAndProfile": {
          "value": function () { return this.codec_utils_h265_caps_set_level_tier_and_profile.apply(this, arguments); }
        },
        "codecUtilsH265GetLevel": {
          "value": function () { return this.codec_utils_h265_get_level.apply(this, arguments); }
        },
        "codecUtilsH265GetLevelIdc": {
          "value": function () { return this.codec_utils_h265_get_level_idc.apply(this, arguments); }
        },
        "codecUtilsH265GetProfile": {
          "value": function () { return this.codec_utils_h265_get_profile.apply(this, arguments); }
        },
        "codecUtilsH265GetTier": {
          "value": function () { return this.codec_utils_h265_get_tier.apply(this, arguments); }
        },
        "codecUtilsMpeg4videoCapsSetLevelAndProfile": {
          "value": function () { return this.codec_utils_mpeg4video_caps_set_level_and_profile.apply(this, arguments); }
        },
        "codecUtilsMpeg4videoGetLevel": {
          "value": function () { return this.codec_utils_mpeg4video_get_level.apply(this, arguments); }
        },
        "codecUtilsMpeg4videoGetProfile": {
          "value": function () { return this.codec_utils_mpeg4video_get_profile.apply(this, arguments); }
        },
        "encodingListAllTargets": {
          "value": function () { return this.encoding_list_all_targets.apply(this, arguments); }
        },
        "encodingListAvailableCategories": {
          "value": function () { return this.encoding_list_available_categories.apply(this, arguments); }
        },
        "installPluginsAsync": {
          "value": function () { return this.install_plugins_async.apply(this, arguments); }
        },
        "installPluginsInstallationInProgress": {
          "value": function () { return this.install_plugins_installation_in_progress.apply(this, arguments); }
        },
        "installPluginsReturnGetName": {
          "value": function () { return this.install_plugins_return_get_name.apply(this, arguments); }
        },
        "installPluginsSupported": {
          "value": function () { return this.install_plugins_supported.apply(this, arguments); }
        },
        "installPluginsSync": {
          "value": function () { return this.install_plugins_sync.apply(this, arguments); }
        },
        "isMissingPluginMessage": {
          "value": function () { return this.is_missing_plugin_message.apply(this, arguments); }
        },
        "missingDecoderInstallerDetailNew": {
          "value": function () { return this.missing_decoder_installer_detail_new.apply(this, arguments); }
        },
        "missingDecoderMessageNew": {
          "value": function () { return this.missing_decoder_message_new.apply(this, arguments); }
        },
        "missingElementInstallerDetailNew": {
          "value": function () { return this.missing_element_installer_detail_new.apply(this, arguments); }
        },
        "missingElementMessageNew": {
          "value": function () { return this.missing_element_message_new.apply(this, arguments); }
        },
        "missingEncoderInstallerDetailNew": {
          "value": function () { return this.missing_encoder_installer_detail_new.apply(this, arguments); }
        },
        "missingEncoderMessageNew": {
          "value": function () { return this.missing_encoder_message_new.apply(this, arguments); }
        },
        "missingPluginMessageGetDescription": {
          "value": function () { return this.missing_plugin_message_get_description.apply(this, arguments); }
        },
        "missingPluginMessageGetInstallerDetail": {
          "value": function () { return this.missing_plugin_message_get_installer_detail.apply(this, arguments); }
        },
        "missingUriSinkInstallerDetailNew": {
          "value": function () { return this.missing_uri_sink_installer_detail_new.apply(this, arguments); }
        },
        "missingUriSinkMessageNew": {
          "value": function () { return this.missing_uri_sink_message_new.apply(this, arguments); }
        },
        "missingUriSourceInstallerDetailNew": {
          "value": function () { return this.missing_uri_source_installer_detail_new.apply(this, arguments); }
        },
        "missingUriSourceMessageNew": {
          "value": function () { return this.missing_uri_source_message_new.apply(this, arguments); }
        },
        "pbUtilsAddCodecDescriptionToTagList": {
          "value": function () { return this.pb_utils_add_codec_description_to_tag_list.apply(this, arguments); }
        },
        "pbUtilsGetCodecDescription": {
          "value": function () { return this.pb_utils_get_codec_description.apply(this, arguments); }
        },
        "pbUtilsGetDecoderDescription": {
          "value": function () { return this.pb_utils_get_decoder_description.apply(this, arguments); }
        },
        "pbUtilsGetElementDescription": {
          "value": function () { return this.pb_utils_get_element_description.apply(this, arguments); }
        },
        "pbUtilsGetEncoderDescription": {
          "value": function () { return this.pb_utils_get_encoder_description.apply(this, arguments); }
        },
        "pbUtilsGetSinkDescription": {
          "value": function () { return this.pb_utils_get_sink_description.apply(this, arguments); }
        },
        "pbUtilsGetSourceDescription": {
          "value": function () { return this.pb_utils_get_source_description.apply(this, arguments); }
        },
        "pbUtilsInit": {
          "value": function () { return this.pb_utils_init.apply(this, arguments); }
        },
        "pluginsBaseVersion": {
          "value": function () { return this.plugins_base_version.apply(this, arguments); }
        },
        "pluginsBaseVersionString": {
          "value": function () { return this.plugins_base_version_string.apply(this, arguments); }
        }
      }
    },
    "GstRiff": {
      "class": {},
      "static": {
        "riffCreateAudioCaps": {
          "value": function () { return this.riff_create_audio_caps.apply(this, arguments); }
        },
        "riffCreateAudioTemplateCaps": {
          "value": function () { return this.riff_create_audio_template_caps.apply(this, arguments); }
        },
        "riffCreateIavsCaps": {
          "value": function () { return this.riff_create_iavs_caps.apply(this, arguments); }
        },
        "riffCreateIavsTemplateCaps": {
          "value": function () { return this.riff_create_iavs_template_caps.apply(this, arguments); }
        },
        "riffCreateVideoCaps": {
          "value": function () { return this.riff_create_video_caps.apply(this, arguments); }
        },
        "riffCreateVideoTemplateCaps": {
          "value": function () { return this.riff_create_video_template_caps.apply(this, arguments); }
        },
        "riffInit": {
          "value": function () { return this.riff_init.apply(this, arguments); }
        },
        "riffParseChunk": {
          "value": function () { return this.riff_parse_chunk.apply(this, arguments); }
        },
        "riffParseFileHeader": {
          "value": function () { return this.riff_parse_file_header.apply(this, arguments); }
        },
        "riffParseInfo": {
          "value": function () { return this.riff_parse_info.apply(this, arguments); }
        },
        "riffParseStrfAuds": {
          "value": function () { return this.riff_parse_strf_auds.apply(this, arguments); }
        },
        "riffParseStrfIavs": {
          "value": function () { return this.riff_parse_strf_iavs.apply(this, arguments); }
        },
        "riffParseStrfVids": {
          "value": function () { return this.riff_parse_strf_vids.apply(this, arguments); }
        },
        "riffParseStrh": {
          "value": function () { return this.riff_parse_strh.apply(this, arguments); }
        },
        "riffReadChunk": {
          "value": function () { return this.riff_read_chunk.apply(this, arguments); }
        }
      }
    },
    "GstRtp": {
      "class": {
        "RTPBaseAudioPayload": {
          "prototype": {
            "getAdapter": {
              "value": function () { return this.get_adapter.apply(this, arguments); }
            },
            "setFrameBased": {
              "value": function () { return this.set_frame_based.apply(this, arguments); }
            },
            "setFrameOptions": {
              "value": function () { return this.set_frame_options.apply(this, arguments); }
            },
            "setSampleBased": {
              "value": function () { return this.set_sample_based.apply(this, arguments); }
            },
            "setSampleOptions": {
              "value": function () { return this.set_sample_options.apply(this, arguments); }
            },
            "setSamplebitsOptions": {
              "value": function () { return this.set_samplebits_options.apply(this, arguments); }
            },
            "bufferList": {
              "get": function () { return this.buffer_list; },
              "set": function (value) { this.buffer_list = value; }
            }
          },
          "static": {}
        },
        "RTPBaseDepayload": {
          "prototype": {
            "pushList": {
              "value": function () { return this.push_list.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "RTPBasePayload": {
          "prototype": {
            "isFilled": {
              "value": function () { return this.is_filled.apply(this, arguments); }
            },
            "pushList": {
              "value": function () { return this.push_list.apply(this, arguments); }
            },
            "setOptions": {
              "value": function () { return this.set_options.apply(this, arguments); }
            },
            "setOutcaps": {
              "value": function () { return this.set_outcaps.apply(this, arguments); }
            },
            "maxPtime": {
              "get": function () { return this.max_ptime; },
              "set": function (value) { this.max_ptime = value; }
            },
            "minPtime": {
              "get": function () { return this.min_ptime; },
              "set": function (value) { this.min_ptime = value; }
            },
            "perfectRtptime": {
              "get": function () { return this.perfect_rtptime; },
              "set": function (value) { this.perfect_rtptime = value; }
            },
            "ptimeMultiple": {
              "get": function () { return this.ptime_multiple; },
              "set": function (value) { this.ptime_multiple = value; }
            },
            "seqnumOffset": {
              "get": function () { return this.seqnum_offset; },
              "set": function (value) { this.seqnum_offset = value; }
            },
            "timestampOffset": {
              "get": function () { return this.timestamp_offset; },
              "set": function (value) { this.timestamp_offset = value; }
            }
          },
          "static": {}
        }
      },
      "static": {
        "rtcpBufferMap": {
          "value": function () { return this.rtcp_buffer_map.apply(this, arguments); }
        },
        "rtcpBufferNew": {
          "value": function () { return this.rtcp_buffer_new.apply(this, arguments); }
        },
        "rtcpBufferNewCopyData": {
          "value": function () { return this.rtcp_buffer_new_copy_data.apply(this, arguments); }
        },
        "rtcpBufferNewTakeData": {
          "value": function () { return this.rtcp_buffer_new_take_data.apply(this, arguments); }
        },
        "rtcpBufferValidate": {
          "value": function () { return this.rtcp_buffer_validate.apply(this, arguments); }
        },
        "rtcpBufferValidateData": {
          "value": function () { return this.rtcp_buffer_validate_data.apply(this, arguments); }
        },
        "rtcpBufferValidateDataReduced": {
          "value": function () { return this.rtcp_buffer_validate_data_reduced.apply(this, arguments); }
        },
        "rtcpBufferValidateReduced": {
          "value": function () { return this.rtcp_buffer_validate_reduced.apply(this, arguments); }
        },
        "rtcpNtpToUnix": {
          "value": function () { return this.rtcp_ntp_to_unix.apply(this, arguments); }
        },
        "rtcpSdesNameToType": {
          "value": function () { return this.rtcp_sdes_name_to_type.apply(this, arguments); }
        },
        "rtcpSdesTypeToName": {
          "value": function () { return this.rtcp_sdes_type_to_name.apply(this, arguments); }
        },
        "rtcpUnixToNtp": {
          "value": function () { return this.rtcp_unix_to_ntp.apply(this, arguments); }
        },
        "rtpBufferAllocateData": {
          "value": function () { return this.rtp_buffer_allocate_data.apply(this, arguments); }
        },
        "rtpBufferCalcHeaderLen": {
          "value": function () { return this.rtp_buffer_calc_header_len.apply(this, arguments); }
        },
        "rtpBufferCalcPacketLen": {
          "value": function () { return this.rtp_buffer_calc_packet_len.apply(this, arguments); }
        },
        "rtpBufferCalcPayloadLen": {
          "value": function () { return this.rtp_buffer_calc_payload_len.apply(this, arguments); }
        },
        "rtpBufferCompareSeqnum": {
          "value": function () { return this.rtp_buffer_compare_seqnum.apply(this, arguments); }
        },
        "rtpBufferDefaultClockRate": {
          "value": function () { return this.rtp_buffer_default_clock_rate.apply(this, arguments); }
        },
        "rtpBufferExtTimestamp": {
          "value": function () { return this.rtp_buffer_ext_timestamp.apply(this, arguments); }
        },
        "rtpBufferMap": {
          "value": function () { return this.rtp_buffer_map.apply(this, arguments); }
        },
        "rtpBufferNewAllocate": {
          "value": function () { return this.rtp_buffer_new_allocate.apply(this, arguments); }
        },
        "rtpBufferNewAllocateLen": {
          "value": function () { return this.rtp_buffer_new_allocate_len.apply(this, arguments); }
        },
        "rtpBufferNewCopyData": {
          "value": function () { return this.rtp_buffer_new_copy_data.apply(this, arguments); }
        },
        "rtpBufferNewTakeData": {
          "value": function () { return this.rtp_buffer_new_take_data.apply(this, arguments); }
        },
        "rtpHdrextGetNtp56": {
          "value": function () { return this.rtp_hdrext_get_ntp_56.apply(this, arguments); }
        },
        "rtpHdrextGetNtp64": {
          "value": function () { return this.rtp_hdrext_get_ntp_64.apply(this, arguments); }
        },
        "rtpHdrextSetNtp56": {
          "value": function () { return this.rtp_hdrext_set_ntp_56.apply(this, arguments); }
        },
        "rtpHdrextSetNtp64": {
          "value": function () { return this.rtp_hdrext_set_ntp_64.apply(this, arguments); }
        },
        "rtpPayloadInfoForName": {
          "value": function () { return this.rtp_payload_info_for_name.apply(this, arguments); }
        },
        "rtpPayloadInfoForPt": {
          "value": function () { return this.rtp_payload_info_for_pt.apply(this, arguments); }
        }
      }
    },
    "GstRtsp": {
      "class": {},
      "static": {
        "rtspConnectionAccept": {
          "value": function () { return this.rtsp_connection_accept.apply(this, arguments); }
        },
        "rtspConnectionCreate": {
          "value": function () { return this.rtsp_connection_create.apply(this, arguments); }
        },
        "rtspConnectionCreateFromSocket": {
          "value": function () { return this.rtsp_connection_create_from_socket.apply(this, arguments); }
        },
        "rtspFindHeaderField": {
          "value": function () { return this.rtsp_find_header_field.apply(this, arguments); }
        },
        "rtspFindMethod": {
          "value": function () { return this.rtsp_find_method.apply(this, arguments); }
        },
        "rtspHeaderAllowMultiple": {
          "value": function () { return this.rtsp_header_allow_multiple.apply(this, arguments); }
        },
        "rtspHeaderAsText": {
          "value": function () { return this.rtsp_header_as_text.apply(this, arguments); }
        },
        "rtspMessageNew": {
          "value": function () { return this.rtsp_message_new.apply(this, arguments); }
        },
        "rtspMessageNewData": {
          "value": function () { return this.rtsp_message_new_data.apply(this, arguments); }
        },
        "rtspMessageNewRequest": {
          "value": function () { return this.rtsp_message_new_request.apply(this, arguments); }
        },
        "rtspMessageNewResponse": {
          "value": function () { return this.rtsp_message_new_response.apply(this, arguments); }
        },
        "rtspMethodAsText": {
          "value": function () { return this.rtsp_method_as_text.apply(this, arguments); }
        },
        "rtspOptionsAsText": {
          "value": function () { return this.rtsp_options_as_text.apply(this, arguments); }
        },
        "rtspOptionsFromText": {
          "value": function () { return this.rtsp_options_from_text.apply(this, arguments); }
        },
        "rtspRangeConvertUnits": {
          "value": function () { return this.rtsp_range_convert_units.apply(this, arguments); }
        },
        "rtspRangeFree": {
          "value": function () { return this.rtsp_range_free.apply(this, arguments); }
        },
        "rtspRangeGetTimes": {
          "value": function () { return this.rtsp_range_get_times.apply(this, arguments); }
        },
        "rtspRangeParse": {
          "value": function () { return this.rtsp_range_parse.apply(this, arguments); }
        },
        "rtspRangeToString": {
          "value": function () { return this.rtsp_range_to_string.apply(this, arguments); }
        },
        "rtspStatusAsText": {
          "value": function () { return this.rtsp_status_as_text.apply(this, arguments); }
        },
        "rtspStrresult": {
          "value": function () { return this.rtsp_strresult.apply(this, arguments); }
        },
        "rtspTransportGetManager": {
          "value": function () { return this.rtsp_transport_get_manager.apply(this, arguments); }
        },
        "rtspTransportGetMime": {
          "value": function () { return this.rtsp_transport_get_mime.apply(this, arguments); }
        },
        "rtspTransportNew": {
          "value": function () { return this.rtsp_transport_new.apply(this, arguments); }
        },
        "rtspTransportParse": {
          "value": function () { return this.rtsp_transport_parse.apply(this, arguments); }
        },
        "rtspUrlParse": {
          "value": function () { return this.rtsp_url_parse.apply(this, arguments); }
        },
        "rtspVersionAsText": {
          "value": function () { return this.rtsp_version_as_text.apply(this, arguments); }
        },
        "rtspWatchNew": {
          "value": function () { return this.rtsp_watch_new.apply(this, arguments); }
        }
      }
    },
    "GstSdp": {
      "class": {},
      "static": {
        "sdpAddressIsMulticast": {
          "value": function () { return this.sdp_address_is_multicast.apply(this, arguments); }
        },
        "sdpMediaNew": {
          "value": function () { return this.sdp_media_new.apply(this, arguments); }
        },
        "sdpMessageAsUri": {
          "value": function () { return this.sdp_message_as_uri.apply(this, arguments); }
        },
        "sdpMessageNew": {
          "value": function () { return this.sdp_message_new.apply(this, arguments); }
        },
        "sdpMessageParseBuffer": {
          "value": function () { return this.sdp_message_parse_buffer.apply(this, arguments); }
        },
        "sdpMessageParseUri": {
          "value": function () { return this.sdp_message_parse_uri.apply(this, arguments); }
        }
      }
    },
    "GstTag": {
      "class": {
        "TagDemux": {
          "prototype": {},
          "static": {}
        },
        "TagMux": {
          "prototype": {},
          "static": {}
        }
      },
      "static": {
        "tagCheckLanguageCode": {
          "value": function () { return this.tag_check_language_code.apply(this, arguments); }
        },
        "tagFreeformStringToUtf8": {
          "value": function () { return this.tag_freeform_string_to_utf8.apply(this, arguments); }
        },
        "tagFromId3Tag": {
          "value": function () { return this.tag_from_id3_tag.apply(this, arguments); }
        },
        "tagFromId3UserTag": {
          "value": function () { return this.tag_from_id3_user_tag.apply(this, arguments); }
        },
        "tagFromVorbisTag": {
          "value": function () { return this.tag_from_vorbis_tag.apply(this, arguments); }
        },
        "tagGetId3v2TagSize": {
          "value": function () { return this.tag_get_id3v2_tag_size.apply(this, arguments); }
        },
        "tagGetLanguageCodeIso6391": {
          "value": function () { return this.tag_get_language_code_iso_639_1.apply(this, arguments); }
        },
        "tagGetLanguageCodeIso6392B": {
          "value": function () { return this.tag_get_language_code_iso_639_2B.apply(this, arguments); }
        },
        "tagGetLanguageCodeIso6392T": {
          "value": function () { return this.tag_get_language_code_iso_639_2T.apply(this, arguments); }
        },
        "tagGetLanguageCodes": {
          "value": function () { return this.tag_get_language_codes.apply(this, arguments); }
        },
        "tagGetLanguageName": {
          "value": function () { return this.tag_get_language_name.apply(this, arguments); }
        },
        "tagGetLicenseDescription": {
          "value": function () { return this.tag_get_license_description.apply(this, arguments); }
        },
        "tagGetLicenseFlags": {
          "value": function () { return this.tag_get_license_flags.apply(this, arguments); }
        },
        "tagGetLicenseJurisdiction": {
          "value": function () { return this.tag_get_license_jurisdiction.apply(this, arguments); }
        },
        "tagGetLicenseNick": {
          "value": function () { return this.tag_get_license_nick.apply(this, arguments); }
        },
        "tagGetLicenseTitle": {
          "value": function () { return this.tag_get_license_title.apply(this, arguments); }
        },
        "tagGetLicenseVersion": {
          "value": function () { return this.tag_get_license_version.apply(this, arguments); }
        },
        "tagGetLicenses": {
          "value": function () { return this.tag_get_licenses.apply(this, arguments); }
        },
        "tagId3GenreCount": {
          "value": function () { return this.tag_id3_genre_count.apply(this, arguments); }
        },
        "tagId3GenreGet": {
          "value": function () { return this.tag_id3_genre_get.apply(this, arguments); }
        },
        "tagImageDataToImageSample": {
          "value": function () { return this.tag_image_data_to_image_sample.apply(this, arguments); }
        },
        "tagListAddId3Image": {
          "value": function () { return this.tag_list_add_id3_image.apply(this, arguments); }
        },
        "tagListFromExifBuffer": {
          "value": function () { return this.tag_list_from_exif_buffer.apply(this, arguments); }
        },
        "tagListFromExifBufferWithTiffHeader": {
          "value": function () { return this.tag_list_from_exif_buffer_with_tiff_header.apply(this, arguments); }
        },
        "tagListFromId3v2Tag": {
          "value": function () { return this.tag_list_from_id3v2_tag.apply(this, arguments); }
        },
        "tagListFromVorbiscomment": {
          "value": function () { return this.tag_list_from_vorbiscomment.apply(this, arguments); }
        },
        "tagListFromVorbiscommentBuffer": {
          "value": function () { return this.tag_list_from_vorbiscomment_buffer.apply(this, arguments); }
        },
        "tagListFromXmpBuffer": {
          "value": function () { return this.tag_list_from_xmp_buffer.apply(this, arguments); }
        },
        "tagListNewFromId3v1": {
          "value": function () { return this.tag_list_new_from_id3v1.apply(this, arguments); }
        },
        "tagListToExifBuffer": {
          "value": function () { return this.tag_list_to_exif_buffer.apply(this, arguments); }
        },
        "tagListToExifBufferWithTiffHeader": {
          "value": function () { return this.tag_list_to_exif_buffer_with_tiff_header.apply(this, arguments); }
        },
        "tagListToVorbiscommentBuffer": {
          "value": function () { return this.tag_list_to_vorbiscomment_buffer.apply(this, arguments); }
        },
        "tagListToXmpBuffer": {
          "value": function () { return this.tag_list_to_xmp_buffer.apply(this, arguments); }
        },
        "tagParseExtendedComment": {
          "value": function () { return this.tag_parse_extended_comment.apply(this, arguments); }
        },
        "tagRegisterMusicbrainzTags": {
          "value": function () { return this.tag_register_musicbrainz_tags.apply(this, arguments); }
        },
        "tagToId3Tag": {
          "value": function () { return this.tag_to_id3_tag.apply(this, arguments); }
        },
        "tagToVorbisComments": {
          "value": function () { return this.tag_to_vorbis_comments.apply(this, arguments); }
        },
        "tagToVorbisTag": {
          "value": function () { return this.tag_to_vorbis_tag.apply(this, arguments); }
        },
        "tagXmpListSchemas": {
          "value": function () { return this.tag_xmp_list_schemas.apply(this, arguments); }
        },
        "vorbisTagAdd": {
          "value": function () { return this.vorbis_tag_add.apply(this, arguments); }
        }
      }
    },
    "GstVideo": {
      "class": {
        "ColorBalanceChannel": {
          "prototype": {},
          "static": {}
        },
        "VideoBufferPool": {
          "prototype": {},
          "static": {}
        },
        "VideoDecoder": {
          "prototype": {
            "addToFrame": {
              "value": function () { return this.add_to_frame.apply(this, arguments); }
            },
            "allocateOutputBuffer": {
              "value": function () { return this.allocate_output_buffer.apply(this, arguments); }
            },
            "allocateOutputFrame": {
              "value": function () { return this.allocate_output_frame.apply(this, arguments); }
            },
            "dropFrame": {
              "value": function () { return this.drop_frame.apply(this, arguments); }
            },
            "finishFrame": {
              "value": function () { return this.finish_frame.apply(this, arguments); }
            },
            "getAllocator": {
              "value": function () { return this.get_allocator.apply(this, arguments); }
            },
            "getBufferPool": {
              "value": function () { return this.get_buffer_pool.apply(this, arguments); }
            },
            "getEstimateRate": {
              "value": function () { return this.get_estimate_rate.apply(this, arguments); }
            },
            "getFrame": {
              "value": function () { return this.get_frame.apply(this, arguments); }
            },
            "getFrames": {
              "value": function () { return this.get_frames.apply(this, arguments); }
            },
            "getLatency": {
              "value": function () { return this.get_latency.apply(this, arguments); }
            },
            "getMaxDecodeTime": {
              "value": function () { return this.get_max_decode_time.apply(this, arguments); }
            },
            "getMaxErrors": {
              "value": function () { return this.get_max_errors.apply(this, arguments); }
            },
            "getNeedsFormat": {
              "value": function () { return this.get_needs_format.apply(this, arguments); }
            },
            "getOldestFrame": {
              "value": function () { return this.get_oldest_frame.apply(this, arguments); }
            },
            "getOutputState": {
              "value": function () { return this.get_output_state.apply(this, arguments); }
            },
            "getPacketized": {
              "value": function () { return this.get_packetized.apply(this, arguments); }
            },
            "getPendingFrameSize": {
              "value": function () { return this.get_pending_frame_size.apply(this, arguments); }
            },
            "getQosProportion": {
              "value": function () { return this.get_qos_proportion.apply(this, arguments); }
            },
            "haveFrame": {
              "value": function () { return this.have_frame.apply(this, arguments); }
            },
            "mergeTags": {
              "value": function () { return this.merge_tags.apply(this, arguments); }
            },
            "proxyGetcaps": {
              "value": function () { return this.proxy_getcaps.apply(this, arguments); }
            },
            "releaseFrame": {
              "value": function () { return this.release_frame.apply(this, arguments); }
            },
            "setEstimateRate": {
              "value": function () { return this.set_estimate_rate.apply(this, arguments); }
            },
            "setLatency": {
              "value": function () { return this.set_latency.apply(this, arguments); }
            },
            "setMaxErrors": {
              "value": function () { return this.set_max_errors.apply(this, arguments); }
            },
            "setNeedsFormat": {
              "value": function () { return this.set_needs_format.apply(this, arguments); }
            },
            "setOutputState": {
              "value": function () { return this.set_output_state.apply(this, arguments); }
            },
            "setPacketized": {
              "value": function () { return this.set_packetized.apply(this, arguments); }
            },
            "setUseDefaultPadAcceptcaps": {
              "value": function () { return this.set_use_default_pad_acceptcaps.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "VideoEncoder": {
          "prototype": {
            "allocateOutputBuffer": {
              "value": function () { return this.allocate_output_buffer.apply(this, arguments); }
            },
            "allocateOutputFrame": {
              "value": function () { return this.allocate_output_frame.apply(this, arguments); }
            },
            "finishFrame": {
              "value": function () { return this.finish_frame.apply(this, arguments); }
            },
            "getAllocator": {
              "value": function () { return this.get_allocator.apply(this, arguments); }
            },
            "getFrame": {
              "value": function () { return this.get_frame.apply(this, arguments); }
            },
            "getFrames": {
              "value": function () { return this.get_frames.apply(this, arguments); }
            },
            "getLatency": {
              "value": function () { return this.get_latency.apply(this, arguments); }
            },
            "getOldestFrame": {
              "value": function () { return this.get_oldest_frame.apply(this, arguments); }
            },
            "getOutputState": {
              "value": function () { return this.get_output_state.apply(this, arguments); }
            },
            "mergeTags": {
              "value": function () { return this.merge_tags.apply(this, arguments); }
            },
            "proxyGetcaps": {
              "value": function () { return this.proxy_getcaps.apply(this, arguments); }
            },
            "setHeaders": {
              "value": function () { return this.set_headers.apply(this, arguments); }
            },
            "setLatency": {
              "value": function () { return this.set_latency.apply(this, arguments); }
            },
            "setMinPts": {
              "value": function () { return this.set_min_pts.apply(this, arguments); }
            },
            "setOutputState": {
              "value": function () { return this.set_output_state.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "VideoFilter": {
          "prototype": {},
          "static": {}
        },
        "VideoMultiviewFlagsSet": {
          "prototype": {},
          "static": {}
        },
        "VideoSink": {
          "prototype": {
            "showPrerollFrame": {
              "get": function () { return this.show_preroll_frame; },
              "set": function (value) { this.show_preroll_frame = value; }
            }
          },
          "static": {
            "centerRect": {
              "value": function () { return this.center_rect.apply(this, arguments); }
            }
          }
        }
      },
      "static": {
        "bufferAddVideoGlTextureUploadMeta": {
          "value": function () { return this.buffer_add_video_gl_texture_upload_meta.apply(this, arguments); }
        },
        "bufferAddVideoMeta": {
          "value": function () { return this.buffer_add_video_meta.apply(this, arguments); }
        },
        "bufferAddVideoMetaFull": {
          "value": function () { return this.buffer_add_video_meta_full.apply(this, arguments); }
        },
        "bufferAddVideoOverlayCompositionMeta": {
          "value": function () { return this.buffer_add_video_overlay_composition_meta.apply(this, arguments); }
        },
        "bufferAddVideoRegionOfInterestMeta": {
          "value": function () { return this.buffer_add_video_region_of_interest_meta.apply(this, arguments); }
        },
        "bufferAddVideoRegionOfInterestMetaId": {
          "value": function () { return this.buffer_add_video_region_of_interest_meta_id.apply(this, arguments); }
        },
        "bufferGetVideoMeta": {
          "value": function () { return this.buffer_get_video_meta.apply(this, arguments); }
        },
        "bufferGetVideoMetaId": {
          "value": function () { return this.buffer_get_video_meta_id.apply(this, arguments); }
        },
        "bufferGetVideoRegionOfInterestMetaId": {
          "value": function () { return this.buffer_get_video_region_of_interest_meta_id.apply(this, arguments); }
        },
        "bufferPoolConfigGetVideoAlignment": {
          "value": function () { return this.buffer_pool_config_get_video_alignment.apply(this, arguments); }
        },
        "bufferPoolConfigSetVideoAlignment": {
          "value": function () { return this.buffer_pool_config_set_video_alignment.apply(this, arguments); }
        },
        "isVideoOverlayPrepareWindowHandleMessage": {
          "value": function () { return this.is_video_overlay_prepare_window_handle_message.apply(this, arguments); }
        },
        "navigationEventGetType": {
          "value": function () { return this.navigation_event_get_type.apply(this, arguments); }
        },
        "navigationEventParseCommand": {
          "value": function () { return this.navigation_event_parse_command.apply(this, arguments); }
        },
        "navigationEventParseKeyEvent": {
          "value": function () { return this.navigation_event_parse_key_event.apply(this, arguments); }
        },
        "navigationEventParseMouseButtonEvent": {
          "value": function () { return this.navigation_event_parse_mouse_button_event.apply(this, arguments); }
        },
        "navigationEventParseMouseMoveEvent": {
          "value": function () { return this.navigation_event_parse_mouse_move_event.apply(this, arguments); }
        },
        "navigationMessageGetType": {
          "value": function () { return this.navigation_message_get_type.apply(this, arguments); }
        },
        "navigationMessageNewAnglesChanged": {
          "value": function () { return this.navigation_message_new_angles_changed.apply(this, arguments); }
        },
        "navigationMessageNewCommandsChanged": {
          "value": function () { return this.navigation_message_new_commands_changed.apply(this, arguments); }
        },
        "navigationMessageNewEvent": {
          "value": function () { return this.navigation_message_new_event.apply(this, arguments); }
        },
        "navigationMessageNewMouseOver": {
          "value": function () { return this.navigation_message_new_mouse_over.apply(this, arguments); }
        },
        "navigationMessageParseAnglesChanged": {
          "value": function () { return this.navigation_message_parse_angles_changed.apply(this, arguments); }
        },
        "navigationMessageParseEvent": {
          "value": function () { return this.navigation_message_parse_event.apply(this, arguments); }
        },
        "navigationMessageParseMouseOver": {
          "value": function () { return this.navigation_message_parse_mouse_over.apply(this, arguments); }
        },
        "navigationQueryGetType": {
          "value": function () { return this.navigation_query_get_type.apply(this, arguments); }
        },
        "navigationQueryNewAngles": {
          "value": function () { return this.navigation_query_new_angles.apply(this, arguments); }
        },
        "navigationQueryNewCommands": {
          "value": function () { return this.navigation_query_new_commands.apply(this, arguments); }
        },
        "navigationQueryParseAngles": {
          "value": function () { return this.navigation_query_parse_angles.apply(this, arguments); }
        },
        "navigationQueryParseCommandsLength": {
          "value": function () { return this.navigation_query_parse_commands_length.apply(this, arguments); }
        },
        "navigationQueryParseCommandsNth": {
          "value": function () { return this.navigation_query_parse_commands_nth.apply(this, arguments); }
        },
        "navigationQuerySetAngles": {
          "value": function () { return this.navigation_query_set_angles.apply(this, arguments); }
        },
        "navigationQuerySetCommandsv": {
          "value": function () { return this.navigation_query_set_commandsv.apply(this, arguments); }
        },
        "videoBlend": {
          "value": function () { return this.video_blend.apply(this, arguments); }
        },
        "videoBlendScaleLinearRGBA": {
          "value": function () { return this.video_blend_scale_linear_RGBA.apply(this, arguments); }
        },
        "videoCalculateDisplayRatio": {
          "value": function () { return this.video_calculate_display_ratio.apply(this, arguments); }
        },
        "videoChromaFromString": {
          "value": function () { return this.video_chroma_from_string.apply(this, arguments); }
        },
        "videoChromaResample": {
          "value": function () { return this.video_chroma_resample.apply(this, arguments); }
        },
        "videoChromaResampleNew": {
          "value": function () { return this.video_chroma_resample_new.apply(this, arguments); }
        },
        "videoChromaToString": {
          "value": function () { return this.video_chroma_to_string.apply(this, arguments); }
        },
        "videoColorMatrixGetKrKb": {
          "value": function () { return this.video_color_matrix_get_Kr_Kb.apply(this, arguments); }
        },
        "videoColorPrimariesGetInfo": {
          "value": function () { return this.video_color_primaries_get_info.apply(this, arguments); }
        },
        "videoColorRangeOffsets": {
          "value": function () { return this.video_color_range_offsets.apply(this, arguments); }
        },
        "videoColorTransferDecode": {
          "value": function () { return this.video_color_transfer_decode.apply(this, arguments); }
        },
        "videoColorTransferEncode": {
          "value": function () { return this.video_color_transfer_encode.apply(this, arguments); }
        },
        "videoConvertSample": {
          "value": function () { return this.video_convert_sample.apply(this, arguments); }
        },
        "videoConvertSampleAsync": {
          "value": function () { return this.video_convert_sample_async.apply(this, arguments); }
        },
        "videoConverterNew": {
          "value": function () { return this.video_converter_new.apply(this, arguments); }
        },
        "videoCropMetaApiGetType": {
          "value": function () { return this.video_crop_meta_api_get_type.apply(this, arguments); }
        },
        "videoCropMetaGetInfo": {
          "value": function () { return this.video_crop_meta_get_info.apply(this, arguments); }
        },
        "videoDitherNew": {
          "value": function () { return this.video_dither_new.apply(this, arguments); }
        },
        "videoEventIsForceKeyUnit": {
          "value": function () { return this.video_event_is_force_key_unit.apply(this, arguments); }
        },
        "videoEventNewDownstreamForceKeyUnit": {
          "value": function () { return this.video_event_new_downstream_force_key_unit.apply(this, arguments); }
        },
        "videoEventNewStillFrame": {
          "value": function () { return this.video_event_new_still_frame.apply(this, arguments); }
        },
        "videoEventNewUpstreamForceKeyUnit": {
          "value": function () { return this.video_event_new_upstream_force_key_unit.apply(this, arguments); }
        },
        "videoEventParseDownstreamForceKeyUnit": {
          "value": function () { return this.video_event_parse_downstream_force_key_unit.apply(this, arguments); }
        },
        "videoEventParseStillFrame": {
          "value": function () { return this.video_event_parse_still_frame.apply(this, arguments); }
        },
        "videoEventParseUpstreamForceKeyUnit": {
          "value": function () { return this.video_event_parse_upstream_force_key_unit.apply(this, arguments); }
        },
        "videoFormatFromFourcc": {
          "value": function () { return this.video_format_from_fourcc.apply(this, arguments); }
        },
        "videoFormatFromMasks": {
          "value": function () { return this.video_format_from_masks.apply(this, arguments); }
        },
        "videoFormatFromString": {
          "value": function () { return this.video_format_from_string.apply(this, arguments); }
        },
        "videoFormatGetInfo": {
          "value": function () { return this.video_format_get_info.apply(this, arguments); }
        },
        "videoFormatGetPalette": {
          "value": function () { return this.video_format_get_palette.apply(this, arguments); }
        },
        "videoFormatToFourcc": {
          "value": function () { return this.video_format_to_fourcc.apply(this, arguments); }
        },
        "videoFormatToString": {
          "value": function () { return this.video_format_to_string.apply(this, arguments); }
        },
        "videoGlTextureUploadMetaApiGetType": {
          "value": function () { return this.video_gl_texture_upload_meta_api_get_type.apply(this, arguments); }
        },
        "videoGlTextureUploadMetaGetInfo": {
          "value": function () { return this.video_gl_texture_upload_meta_get_info.apply(this, arguments); }
        },
        "videoGuessFramerate": {
          "value": function () { return this.video_guess_framerate.apply(this, arguments); }
        },
        "videoInterlaceModeFromString": {
          "value": function () { return this.video_interlace_mode_from_string.apply(this, arguments); }
        },
        "videoInterlaceModeToString": {
          "value": function () { return this.video_interlace_mode_to_string.apply(this, arguments); }
        },
        "videoMetaApiGetType": {
          "value": function () { return this.video_meta_api_get_type.apply(this, arguments); }
        },
        "videoMetaGetInfo": {
          "value": function () { return this.video_meta_get_info.apply(this, arguments); }
        },
        "videoMetaTransformScaleGetQuark": {
          "value": function () { return this.video_meta_transform_scale_get_quark.apply(this, arguments); }
        },
        "videoMultiviewGetDoubledHeightModes": {
          "value": function () { return this.video_multiview_get_doubled_height_modes.apply(this, arguments); }
        },
        "videoMultiviewGetDoubledSizeModes": {
          "value": function () { return this.video_multiview_get_doubled_size_modes.apply(this, arguments); }
        },
        "videoMultiviewGetDoubledWidthModes": {
          "value": function () { return this.video_multiview_get_doubled_width_modes.apply(this, arguments); }
        },
        "videoMultiviewGetMonoModes": {
          "value": function () { return this.video_multiview_get_mono_modes.apply(this, arguments); }
        },
        "videoMultiviewGetUnpackedModes": {
          "value": function () { return this.video_multiview_get_unpacked_modes.apply(this, arguments); }
        },
        "videoMultiviewGuessHalfAspect": {
          "value": function () { return this.video_multiview_guess_half_aspect.apply(this, arguments); }
        },
        "videoMultiviewModeFromCapsString": {
          "value": function () { return this.video_multiview_mode_from_caps_string.apply(this, arguments); }
        },
        "videoMultiviewModeToCapsString": {
          "value": function () { return this.video_multiview_mode_to_caps_string.apply(this, arguments); }
        },
        "videoMultiviewVideoInfoChangeMode": {
          "value": function () { return this.video_multiview_video_info_change_mode.apply(this, arguments); }
        },
        "videoOverlayCompositionMetaApiGetType": {
          "value": function () { return this.video_overlay_composition_meta_api_get_type.apply(this, arguments); }
        },
        "videoOverlayCompositionMetaGetInfo": {
          "value": function () { return this.video_overlay_composition_meta_get_info.apply(this, arguments); }
        },
        "videoRegionOfInterestMetaApiGetType": {
          "value": function () { return this.video_region_of_interest_meta_api_get_type.apply(this, arguments); }
        },
        "videoRegionOfInterestMetaGetInfo": {
          "value": function () { return this.video_region_of_interest_meta_get_info.apply(this, arguments); }
        },
        "videoScalerNew": {
          "value": function () { return this.video_scaler_new.apply(this, arguments); }
        },
        "videoTileGetIndex": {
          "value": function () { return this.video_tile_get_index.apply(this, arguments); }
        }
      }
    },
    "Gtk": {
      "class": {
        "AboutDialog": {
          "prototype": {
            "addCreditSection": {
              "value": function () { return this.add_credit_section.apply(this, arguments); }
            },
            "getArtists": {
              "value": function () { return this.get_artists.apply(this, arguments); }
            },
            "getAuthors": {
              "value": function () { return this.get_authors.apply(this, arguments); }
            },
            "getComments": {
              "value": function () { return this.get_comments.apply(this, arguments); }
            },
            "getCopyright": {
              "value": function () { return this.get_copyright.apply(this, arguments); }
            },
            "getDocumenters": {
              "value": function () { return this.get_documenters.apply(this, arguments); }
            },
            "getLicense": {
              "value": function () { return this.get_license.apply(this, arguments); }
            },
            "getLicenseType": {
              "value": function () { return this.get_license_type.apply(this, arguments); }
            },
            "getLogo": {
              "value": function () { return this.get_logo.apply(this, arguments); }
            },
            "getLogoIconName": {
              "value": function () { return this.get_logo_icon_name.apply(this, arguments); }
            },
            "getProgramName": {
              "value": function () { return this.get_program_name.apply(this, arguments); }
            },
            "getTranslatorCredits": {
              "value": function () { return this.get_translator_credits.apply(this, arguments); }
            },
            "getVersion": {
              "value": function () { return this.get_version.apply(this, arguments); }
            },
            "getWebsite": {
              "value": function () { return this.get_website.apply(this, arguments); }
            },
            "getWebsiteLabel": {
              "value": function () { return this.get_website_label.apply(this, arguments); }
            },
            "getWrapLicense": {
              "value": function () { return this.get_wrap_license.apply(this, arguments); }
            },
            "setArtists": {
              "value": function () { return this.set_artists.apply(this, arguments); }
            },
            "setAuthors": {
              "value": function () { return this.set_authors.apply(this, arguments); }
            },
            "setComments": {
              "value": function () { return this.set_comments.apply(this, arguments); }
            },
            "setCopyright": {
              "value": function () { return this.set_copyright.apply(this, arguments); }
            },
            "setDocumenters": {
              "value": function () { return this.set_documenters.apply(this, arguments); }
            },
            "setLicense": {
              "value": function () { return this.set_license.apply(this, arguments); }
            },
            "setLicenseType": {
              "value": function () { return this.set_license_type.apply(this, arguments); }
            },
            "setLogo": {
              "value": function () { return this.set_logo.apply(this, arguments); }
            },
            "setLogoIconName": {
              "value": function () { return this.set_logo_icon_name.apply(this, arguments); }
            },
            "setProgramName": {
              "value": function () { return this.set_program_name.apply(this, arguments); }
            },
            "setTranslatorCredits": {
              "value": function () { return this.set_translator_credits.apply(this, arguments); }
            },
            "setVersion": {
              "value": function () { return this.set_version.apply(this, arguments); }
            },
            "setWebsite": {
              "value": function () { return this.set_website.apply(this, arguments); }
            },
            "setWebsiteLabel": {
              "value": function () { return this.set_website_label.apply(this, arguments); }
            },
            "setWrapLicense": {
              "value": function () { return this.set_wrap_license.apply(this, arguments); }
            },
            "licenseType": {
              "get": function () { return this.license_type; },
              "set": function (value) { this.license_type = value; }
            },
            "logoIconName": {
              "get": function () { return this.logo_icon_name; },
              "set": function (value) { this.logo_icon_name = value; }
            },
            "programName": {
              "get": function () { return this.program_name; },
              "set": function (value) { this.program_name = value; }
            },
            "translatorCredits": {
              "get": function () { return this.translator_credits; },
              "set": function (value) { this.translator_credits = value; }
            },
            "websiteLabel": {
              "get": function () { return this.website_label; },
              "set": function (value) { this.website_label = value; }
            },
            "wrapLicense": {
              "get": function () { return this.wrap_license; },
              "set": function (value) { this.wrap_license = value; }
            }
          },
          "static": {}
        },
        "AccelGroup": {
          "prototype": {
            "connectByPath": {
              "value": function () { return this.connect_by_path.apply(this, arguments); }
            },
            "disconnectKey": {
              "value": function () { return this.disconnect_key.apply(this, arguments); }
            },
            "getIsLocked": {
              "value": function () { return this.get_is_locked.apply(this, arguments); }
            },
            "getModifierMask": {
              "value": function () { return this.get_modifier_mask.apply(this, arguments); }
            },
            "isLocked": {
              "get": function () { return this.is_locked; },
              "set": function (value) { this.is_locked = value; }
            },
            "modifierMask": {
              "get": function () { return this.modifier_mask; },
              "set": function (value) { this.modifier_mask = value; }
            }
          },
          "static": {
            "fromAccelClosure": {
              "value": function () { return this.from_accel_closure.apply(this, arguments); }
            }
          }
        },
        "AccelLabel": {
          "prototype": {
            "getAccel": {
              "value": function () { return this.get_accel.apply(this, arguments); }
            },
            "getAccelWidget": {
              "value": function () { return this.get_accel_widget.apply(this, arguments); }
            },
            "getAccelWidth": {
              "value": function () { return this.get_accel_width.apply(this, arguments); }
            },
            "setAccel": {
              "value": function () { return this.set_accel.apply(this, arguments); }
            },
            "setAccelClosure": {
              "value": function () { return this.set_accel_closure.apply(this, arguments); }
            },
            "setAccelWidget": {
              "value": function () { return this.set_accel_widget.apply(this, arguments); }
            },
            "accelClosure": {
              "get": function () { return this.accel_closure; },
              "set": function (value) { this.accel_closure = value; }
            },
            "accelWidget": {
              "get": function () { return this.accel_widget; },
              "set": function (value) { this.accel_widget = value; }
            }
          },
          "static": {}
        },
        "AccelMap": {
          "prototype": {},
          "static": {
            "addEntry": {
              "value": function () { return this.add_entry.apply(this, arguments); }
            },
            "addFilter": {
              "value": function () { return this.add_filter.apply(this, arguments); }
            },
            "changeEntry": {
              "value": function () { return this.change_entry.apply(this, arguments); }
            },
            "foreachUnfiltered": {
              "value": function () { return this.foreach_unfiltered.apply(this, arguments); }
            },
            "loadFd": {
              "value": function () { return this.load_fd.apply(this, arguments); }
            },
            "loadScanner": {
              "value": function () { return this.load_scanner.apply(this, arguments); }
            },
            "lockPath": {
              "value": function () { return this.lock_path.apply(this, arguments); }
            },
            "lookupEntry": {
              "value": function () { return this.lookup_entry.apply(this, arguments); }
            },
            "saveFd": {
              "value": function () { return this.save_fd.apply(this, arguments); }
            },
            "unlockPath": {
              "value": function () { return this.unlock_path.apply(this, arguments); }
            }
          }
        },
        "Accessible": {
          "prototype": {
            "connectWidgetDestroyed": {
              "value": function () { return this.connect_widget_destroyed.apply(this, arguments); }
            },
            "getWidget": {
              "value": function () { return this.get_widget.apply(this, arguments); }
            },
            "setWidget": {
              "value": function () { return this.set_widget.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Action": {
          "prototype": {
            "blockActivate": {
              "value": function () { return this.block_activate.apply(this, arguments); }
            },
            "connectAccelerator": {
              "value": function () { return this.connect_accelerator.apply(this, arguments); }
            },
            "createIcon": {
              "value": function () { return this.create_icon.apply(this, arguments); }
            },
            "createMenu": {
              "value": function () { return this.create_menu.apply(this, arguments); }
            },
            "createMenuItem": {
              "value": function () { return this.create_menu_item.apply(this, arguments); }
            },
            "createToolItem": {
              "value": function () { return this.create_tool_item.apply(this, arguments); }
            },
            "disconnectAccelerator": {
              "value": function () { return this.disconnect_accelerator.apply(this, arguments); }
            },
            "getAccelClosure": {
              "value": function () { return this.get_accel_closure.apply(this, arguments); }
            },
            "getAccelPath": {
              "value": function () { return this.get_accel_path.apply(this, arguments); }
            },
            "getAlwaysShowImage": {
              "value": function () { return this.get_always_show_image.apply(this, arguments); }
            },
            "getGicon": {
              "value": function () { return this.get_gicon.apply(this, arguments); }
            },
            "getIconName": {
              "value": function () { return this.get_icon_name.apply(this, arguments); }
            },
            "getIsImportant": {
              "value": function () { return this.get_is_important.apply(this, arguments); }
            },
            "getLabel": {
              "value": function () { return this.get_label.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getProxies": {
              "value": function () { return this.get_proxies.apply(this, arguments); }
            },
            "getSensitive": {
              "value": function () { return this.get_sensitive.apply(this, arguments); }
            },
            "getShortLabel": {
              "value": function () { return this.get_short_label.apply(this, arguments); }
            },
            "getStockId": {
              "value": function () { return this.get_stock_id.apply(this, arguments); }
            },
            "getTooltip": {
              "value": function () { return this.get_tooltip.apply(this, arguments); }
            },
            "getVisible": {
              "value": function () { return this.get_visible.apply(this, arguments); }
            },
            "getVisibleHorizontal": {
              "value": function () { return this.get_visible_horizontal.apply(this, arguments); }
            },
            "getVisibleVertical": {
              "value": function () { return this.get_visible_vertical.apply(this, arguments); }
            },
            "isSensitive": {
              "value": function () { return this.is_sensitive.apply(this, arguments); }
            },
            "isVisible": {
              "value": function () { return this.is_visible.apply(this, arguments); }
            },
            "setAccelGroup": {
              "value": function () { return this.set_accel_group.apply(this, arguments); }
            },
            "setAccelPath": {
              "value": function () { return this.set_accel_path.apply(this, arguments); }
            },
            "setAlwaysShowImage": {
              "value": function () { return this.set_always_show_image.apply(this, arguments); }
            },
            "setGicon": {
              "value": function () { return this.set_gicon.apply(this, arguments); }
            },
            "setIconName": {
              "value": function () { return this.set_icon_name.apply(this, arguments); }
            },
            "setIsImportant": {
              "value": function () { return this.set_is_important.apply(this, arguments); }
            },
            "setLabel": {
              "value": function () { return this.set_label.apply(this, arguments); }
            },
            "setSensitive": {
              "value": function () { return this.set_sensitive.apply(this, arguments); }
            },
            "setShortLabel": {
              "value": function () { return this.set_short_label.apply(this, arguments); }
            },
            "setStockId": {
              "value": function () { return this.set_stock_id.apply(this, arguments); }
            },
            "setTooltip": {
              "value": function () { return this.set_tooltip.apply(this, arguments); }
            },
            "setVisible": {
              "value": function () { return this.set_visible.apply(this, arguments); }
            },
            "setVisibleHorizontal": {
              "value": function () { return this.set_visible_horizontal.apply(this, arguments); }
            },
            "setVisibleVertical": {
              "value": function () { return this.set_visible_vertical.apply(this, arguments); }
            },
            "unblockActivate": {
              "value": function () { return this.unblock_activate.apply(this, arguments); }
            },
            "actionGroup": {
              "get": function () { return this.action_group; },
              "set": function (value) { this.action_group = value; }
            },
            "alwaysShowImage": {
              "get": function () { return this.always_show_image; },
              "set": function (value) { this.always_show_image = value; }
            },
            "hideIfEmpty": {
              "get": function () { return this.hide_if_empty; },
              "set": function (value) { this.hide_if_empty = value; }
            },
            "iconName": {
              "get": function () { return this.icon_name; },
              "set": function (value) { this.icon_name = value; }
            },
            "isImportant": {
              "get": function () { return this.is_important; },
              "set": function (value) { this.is_important = value; }
            },
            "shortLabel": {
              "get": function () { return this.short_label; },
              "set": function (value) { this.short_label = value; }
            },
            "stockId": {
              "get": function () { return this.stock_id; },
              "set": function (value) { this.stock_id = value; }
            },
            "visibleHorizontal": {
              "get": function () { return this.visible_horizontal; },
              "set": function (value) { this.visible_horizontal = value; }
            },
            "visibleOverflown": {
              "get": function () { return this.visible_overflown; },
              "set": function (value) { this.visible_overflown = value; }
            },
            "visibleVertical": {
              "get": function () { return this.visible_vertical; },
              "set": function (value) { this.visible_vertical = value; }
            }
          },
          "static": {}
        },
        "ActionBar": {
          "prototype": {
            "getCenterWidget": {
              "value": function () { return this.get_center_widget.apply(this, arguments); }
            },
            "packEnd": {
              "value": function () { return this.pack_end.apply(this, arguments); }
            },
            "packStart": {
              "value": function () { return this.pack_start.apply(this, arguments); }
            },
            "setCenterWidget": {
              "value": function () { return this.set_center_widget.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "ActionGroup": {
          "prototype": {
            "addAction": {
              "value": function () { return this.add_action.apply(this, arguments); }
            },
            "addActionWithAccel": {
              "value": function () { return this.add_action_with_accel.apply(this, arguments); }
            },
            "addActions": {
              "value": function () { return this.add_actions.apply(this, arguments); }
            },
            "addActionsFull": {
              "value": function () { return this.add_actions_full.apply(this, arguments); }
            },
            "addRadioActions": {
              "value": function () { return this.add_radio_actions.apply(this, arguments); }
            },
            "addRadioActionsFull": {
              "value": function () { return this.add_radio_actions_full.apply(this, arguments); }
            },
            "addToggleActions": {
              "value": function () { return this.add_toggle_actions.apply(this, arguments); }
            },
            "addToggleActionsFull": {
              "value": function () { return this.add_toggle_actions_full.apply(this, arguments); }
            },
            "getAccelGroup": {
              "value": function () { return this.get_accel_group.apply(this, arguments); }
            },
            "getAction": {
              "value": function () { return this.get_action.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getSensitive": {
              "value": function () { return this.get_sensitive.apply(this, arguments); }
            },
            "getVisible": {
              "value": function () { return this.get_visible.apply(this, arguments); }
            },
            "listActions": {
              "value": function () { return this.list_actions.apply(this, arguments); }
            },
            "removeAction": {
              "value": function () { return this.remove_action.apply(this, arguments); }
            },
            "setAccelGroup": {
              "value": function () { return this.set_accel_group.apply(this, arguments); }
            },
            "setSensitive": {
              "value": function () { return this.set_sensitive.apply(this, arguments); }
            },
            "setTranslateFunc": {
              "value": function () { return this.set_translate_func.apply(this, arguments); }
            },
            "setTranslationDomain": {
              "value": function () { return this.set_translation_domain.apply(this, arguments); }
            },
            "setVisible": {
              "value": function () { return this.set_visible.apply(this, arguments); }
            },
            "translateString": {
              "value": function () { return this.translate_string.apply(this, arguments); }
            },
            "accelGroup": {
              "get": function () { return this.accel_group; },
              "set": function (value) { this.accel_group = value; }
            }
          },
          "static": {}
        },
        "Adjustment": {
          "prototype": {
            "clampPage": {
              "value": function () { return this.clamp_page.apply(this, arguments); }
            },
            "getLower": {
              "value": function () { return this.get_lower.apply(this, arguments); }
            },
            "getMinimumIncrement": {
              "value": function () { return this.get_minimum_increment.apply(this, arguments); }
            },
            "getPageIncrement": {
              "value": function () { return this.get_page_increment.apply(this, arguments); }
            },
            "getPageSize": {
              "value": function () { return this.get_page_size.apply(this, arguments); }
            },
            "getStepIncrement": {
              "value": function () { return this.get_step_increment.apply(this, arguments); }
            },
            "getUpper": {
              "value": function () { return this.get_upper.apply(this, arguments); }
            },
            "getValue": {
              "value": function () { return this.get_value.apply(this, arguments); }
            },
            "setLower": {
              "value": function () { return this.set_lower.apply(this, arguments); }
            },
            "setPageIncrement": {
              "value": function () { return this.set_page_increment.apply(this, arguments); }
            },
            "setPageSize": {
              "value": function () { return this.set_page_size.apply(this, arguments); }
            },
            "setStepIncrement": {
              "value": function () { return this.set_step_increment.apply(this, arguments); }
            },
            "setUpper": {
              "value": function () { return this.set_upper.apply(this, arguments); }
            },
            "setValue": {
              "value": function () { return this.set_value.apply(this, arguments); }
            },
            "valueChanged": {
              "value": function () { return this.value_changed.apply(this, arguments); }
            },
            "pageIncrement": {
              "get": function () { return this.page_increment; },
              "set": function (value) { this.page_increment = value; }
            },
            "pageSize": {
              "get": function () { return this.page_size; },
              "set": function (value) { this.page_size = value; }
            },
            "stepIncrement": {
              "get": function () { return this.step_increment; },
              "set": function (value) { this.step_increment = value; }
            }
          },
          "static": {}
        },
        "Alignment": {
          "prototype": {
            "getPadding": {
              "value": function () { return this.get_padding.apply(this, arguments); }
            },
            "setPadding": {
              "value": function () { return this.set_padding.apply(this, arguments); }
            },
            "bottomPadding": {
              "get": function () { return this.bottom_padding; },
              "set": function (value) { this.bottom_padding = value; }
            },
            "leftPadding": {
              "get": function () { return this.left_padding; },
              "set": function (value) { this.left_padding = value; }
            },
            "rightPadding": {
              "get": function () { return this.right_padding; },
              "set": function (value) { this.right_padding = value; }
            },
            "topPadding": {
              "get": function () { return this.top_padding; },
              "set": function (value) { this.top_padding = value; }
            }
          },
          "static": {}
        },
        "AppChooserButton": {
          "prototype": {
            "appendCustomItem": {
              "value": function () { return this.append_custom_item.apply(this, arguments); }
            },
            "appendSeparator": {
              "value": function () { return this.append_separator.apply(this, arguments); }
            },
            "getHeading": {
              "value": function () { return this.get_heading.apply(this, arguments); }
            },
            "getShowDefaultItem": {
              "value": function () { return this.get_show_default_item.apply(this, arguments); }
            },
            "getShowDialogItem": {
              "value": function () { return this.get_show_dialog_item.apply(this, arguments); }
            },
            "setActiveCustomItem": {
              "value": function () { return this.set_active_custom_item.apply(this, arguments); }
            },
            "setHeading": {
              "value": function () { return this.set_heading.apply(this, arguments); }
            },
            "setShowDefaultItem": {
              "value": function () { return this.set_show_default_item.apply(this, arguments); }
            },
            "setShowDialogItem": {
              "value": function () { return this.set_show_dialog_item.apply(this, arguments); }
            },
            "showDefaultItem": {
              "get": function () { return this.show_default_item; },
              "set": function (value) { this.show_default_item = value; }
            },
            "showDialogItem": {
              "get": function () { return this.show_dialog_item; },
              "set": function (value) { this.show_dialog_item = value; }
            }
          },
          "static": {}
        },
        "AppChooserDialog": {
          "prototype": {
            "getHeading": {
              "value": function () { return this.get_heading.apply(this, arguments); }
            },
            "getWidget": {
              "value": function () { return this.get_widget.apply(this, arguments); }
            },
            "setHeading": {
              "value": function () { return this.set_heading.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "AppChooserWidget": {
          "prototype": {
            "getDefaultText": {
              "value": function () { return this.get_default_text.apply(this, arguments); }
            },
            "getShowAll": {
              "value": function () { return this.get_show_all.apply(this, arguments); }
            },
            "getShowDefault": {
              "value": function () { return this.get_show_default.apply(this, arguments); }
            },
            "getShowFallback": {
              "value": function () { return this.get_show_fallback.apply(this, arguments); }
            },
            "getShowOther": {
              "value": function () { return this.get_show_other.apply(this, arguments); }
            },
            "getShowRecommended": {
              "value": function () { return this.get_show_recommended.apply(this, arguments); }
            },
            "setDefaultText": {
              "value": function () { return this.set_default_text.apply(this, arguments); }
            },
            "setShowAll": {
              "value": function () { return this.set_show_all.apply(this, arguments); }
            },
            "setShowDefault": {
              "value": function () { return this.set_show_default.apply(this, arguments); }
            },
            "setShowFallback": {
              "value": function () { return this.set_show_fallback.apply(this, arguments); }
            },
            "setShowOther": {
              "value": function () { return this.set_show_other.apply(this, arguments); }
            },
            "setShowRecommended": {
              "value": function () { return this.set_show_recommended.apply(this, arguments); }
            },
            "defaultText": {
              "get": function () { return this.default_text; },
              "set": function (value) { this.default_text = value; }
            },
            "showAll": {
              "get": function () { return this.show_all; },
              "set": function (value) { this.show_all = value; }
            },
            "showDefault": {
              "get": function () { return this.show_default; },
              "set": function (value) { this.show_default = value; }
            },
            "showFallback": {
              "get": function () { return this.show_fallback; },
              "set": function (value) { this.show_fallback = value; }
            },
            "showOther": {
              "get": function () { return this.show_other; },
              "set": function (value) { this.show_other = value; }
            },
            "showRecommended": {
              "get": function () { return this.show_recommended; },
              "set": function (value) { this.show_recommended = value; }
            }
          },
          "static": {}
        },
        "Application": {
          "prototype": {
            "addAccelerator": {
              "value": function () { return this.add_accelerator.apply(this, arguments); }
            },
            "addWindow": {
              "value": function () { return this.add_window.apply(this, arguments); }
            },
            "getAccelsForAction": {
              "value": function () { return this.get_accels_for_action.apply(this, arguments); }
            },
            "getActionsForAccel": {
              "value": function () { return this.get_actions_for_accel.apply(this, arguments); }
            },
            "getActiveWindow": {
              "value": function () { return this.get_active_window.apply(this, arguments); }
            },
            "getAppMenu": {
              "value": function () { return this.get_app_menu.apply(this, arguments); }
            },
            "getMenuById": {
              "value": function () { return this.get_menu_by_id.apply(this, arguments); }
            },
            "getMenubar": {
              "value": function () { return this.get_menubar.apply(this, arguments); }
            },
            "getWindowById": {
              "value": function () { return this.get_window_by_id.apply(this, arguments); }
            },
            "getWindows": {
              "value": function () { return this.get_windows.apply(this, arguments); }
            },
            "isInhibited": {
              "value": function () { return this.is_inhibited.apply(this, arguments); }
            },
            "listActionDescriptions": {
              "value": function () { return this.list_action_descriptions.apply(this, arguments); }
            },
            "prefersAppMenu": {
              "value": function () { return this.prefers_app_menu.apply(this, arguments); }
            },
            "removeAccelerator": {
              "value": function () { return this.remove_accelerator.apply(this, arguments); }
            },
            "removeWindow": {
              "value": function () { return this.remove_window.apply(this, arguments); }
            },
            "setAccelsForAction": {
              "value": function () { return this.set_accels_for_action.apply(this, arguments); }
            },
            "setAppMenu": {
              "value": function () { return this.set_app_menu.apply(this, arguments); }
            },
            "setMenubar": {
              "value": function () { return this.set_menubar.apply(this, arguments); }
            },
            "activeWindow": {
              "get": function () { return this.active_window; },
              "set": function (value) { this.active_window = value; }
            },
            "appMenu": {
              "get": function () { return this.app_menu; },
              "set": function (value) { this.app_menu = value; }
            },
            "registerSession": {
              "get": function () { return this.register_session; },
              "set": function (value) { this.register_session = value; }
            }
          },
          "static": {}
        },
        "ApplicationWindow": {
          "prototype": {
            "getId": {
              "value": function () { return this.get_id.apply(this, arguments); }
            },
            "getShowMenubar": {
              "value": function () { return this.get_show_menubar.apply(this, arguments); }
            },
            "setShowMenubar": {
              "value": function () { return this.set_show_menubar.apply(this, arguments); }
            },
            "showMenubar": {
              "get": function () { return this.show_menubar; },
              "set": function (value) { this.show_menubar = value; }
            }
          },
          "static": {}
        },
        "Arrow": {
          "prototype": {
            "arrowType": {
              "get": function () { return this.arrow_type; },
              "set": function (value) { this.arrow_type = value; }
            },
            "shadowType": {
              "get": function () { return this.shadow_type; },
              "set": function (value) { this.shadow_type = value; }
            }
          },
          "static": {}
        },
        "ArrowAccessible": {
          "prototype": {},
          "static": {}
        },
        "AspectFrame": {
          "prototype": {
            "obeyChild": {
              "get": function () { return this.obey_child; },
              "set": function (value) { this.obey_child = value; }
            }
          },
          "static": {}
        },
        "Assistant": {
          "prototype": {
            "addActionWidget": {
              "value": function () { return this.add_action_widget.apply(this, arguments); }
            },
            "appendPage": {
              "value": function () { return this.append_page.apply(this, arguments); }
            },
            "getCurrentPage": {
              "value": function () { return this.get_current_page.apply(this, arguments); }
            },
            "getNPages": {
              "value": function () { return this.get_n_pages.apply(this, arguments); }
            },
            "getNthPage": {
              "value": function () { return this.get_nth_page.apply(this, arguments); }
            },
            "getPageComplete": {
              "value": function () { return this.get_page_complete.apply(this, arguments); }
            },
            "getPageHasPadding": {
              "value": function () { return this.get_page_has_padding.apply(this, arguments); }
            },
            "getPageHeaderImage": {
              "value": function () { return this.get_page_header_image.apply(this, arguments); }
            },
            "getPageSideImage": {
              "value": function () { return this.get_page_side_image.apply(this, arguments); }
            },
            "getPageTitle": {
              "value": function () { return this.get_page_title.apply(this, arguments); }
            },
            "getPageType": {
              "value": function () { return this.get_page_type.apply(this, arguments); }
            },
            "insertPage": {
              "value": function () { return this.insert_page.apply(this, arguments); }
            },
            "nextPage": {
              "value": function () { return this.next_page.apply(this, arguments); }
            },
            "prependPage": {
              "value": function () { return this.prepend_page.apply(this, arguments); }
            },
            "previousPage": {
              "value": function () { return this.previous_page.apply(this, arguments); }
            },
            "removeActionWidget": {
              "value": function () { return this.remove_action_widget.apply(this, arguments); }
            },
            "removePage": {
              "value": function () { return this.remove_page.apply(this, arguments); }
            },
            "setCurrentPage": {
              "value": function () { return this.set_current_page.apply(this, arguments); }
            },
            "setForwardPageFunc": {
              "value": function () { return this.set_forward_page_func.apply(this, arguments); }
            },
            "setPageComplete": {
              "value": function () { return this.set_page_complete.apply(this, arguments); }
            },
            "setPageHasPadding": {
              "value": function () { return this.set_page_has_padding.apply(this, arguments); }
            },
            "setPageHeaderImage": {
              "value": function () { return this.set_page_header_image.apply(this, arguments); }
            },
            "setPageSideImage": {
              "value": function () { return this.set_page_side_image.apply(this, arguments); }
            },
            "setPageTitle": {
              "value": function () { return this.set_page_title.apply(this, arguments); }
            },
            "setPageType": {
              "value": function () { return this.set_page_type.apply(this, arguments); }
            },
            "updateButtonsState": {
              "value": function () { return this.update_buttons_state.apply(this, arguments); }
            },
            "useHeaderBar": {
              "get": function () { return this.use_header_bar; },
              "set": function (value) { this.use_header_bar = value; }
            }
          },
          "static": {}
        },
        "Bin": {
          "prototype": {
            "getChild": {
              "value": function () { return this.get_child.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "BooleanCellAccessible": {
          "prototype": {},
          "static": {}
        },
        "Box": {
          "prototype": {
            "getBaselinePosition": {
              "value": function () { return this.get_baseline_position.apply(this, arguments); }
            },
            "getCenterWidget": {
              "value": function () { return this.get_center_widget.apply(this, arguments); }
            },
            "getHomogeneous": {
              "value": function () { return this.get_homogeneous.apply(this, arguments); }
            },
            "getSpacing": {
              "value": function () { return this.get_spacing.apply(this, arguments); }
            },
            "packEnd": {
              "value": function () { return this.pack_end.apply(this, arguments); }
            },
            "packStart": {
              "value": function () { return this.pack_start.apply(this, arguments); }
            },
            "queryChildPacking": {
              "value": function () { return this.query_child_packing.apply(this, arguments); }
            },
            "reorderChild": {
              "value": function () { return this.reorder_child.apply(this, arguments); }
            },
            "setBaselinePosition": {
              "value": function () { return this.set_baseline_position.apply(this, arguments); }
            },
            "setCenterWidget": {
              "value": function () { return this.set_center_widget.apply(this, arguments); }
            },
            "setChildPacking": {
              "value": function () { return this.set_child_packing.apply(this, arguments); }
            },
            "setHomogeneous": {
              "value": function () { return this.set_homogeneous.apply(this, arguments); }
            },
            "setSpacing": {
              "value": function () { return this.set_spacing.apply(this, arguments); }
            },
            "baselinePosition": {
              "get": function () { return this.baseline_position; },
              "set": function (value) { this.baseline_position = value; }
            }
          },
          "static": {}
        },
        "Builder": {
          "prototype": {
            "addCallbackSymbol": {
              "value": function () { return this.add_callback_symbol.apply(this, arguments); }
            },
            "addCallbackSymbols": {
              "value": function () { return this.add_callback_symbols.apply(this, arguments); }
            },
            "addFromFile": {
              "value": function () { return this.add_from_file.apply(this, arguments); }
            },
            "addFromResource": {
              "value": function () { return this.add_from_resource.apply(this, arguments); }
            },
            "addFromString": {
              "value": function () { return this.add_from_string.apply(this, arguments); }
            },
            "addObjectsFromFile": {
              "value": function () { return this.add_objects_from_file.apply(this, arguments); }
            },
            "addObjectsFromResource": {
              "value": function () { return this.add_objects_from_resource.apply(this, arguments); }
            },
            "addObjectsFromString": {
              "value": function () { return this.add_objects_from_string.apply(this, arguments); }
            },
            "connectSignals": {
              "value": function () { return this.connect_signals.apply(this, arguments); }
            },
            "connectSignalsFull": {
              "value": function () { return this.connect_signals_full.apply(this, arguments); }
            },
            "exposeObject": {
              "value": function () { return this.expose_object.apply(this, arguments); }
            },
            "getApplication": {
              "value": function () { return this.get_application.apply(this, arguments); }
            },
            "getObject": {
              "value": function () { return this.get_object.apply(this, arguments); }
            },
            "getObjects": {
              "value": function () { return this.get_objects.apply(this, arguments); }
            },
            "getTranslationDomain": {
              "value": function () { return this.get_translation_domain.apply(this, arguments); }
            },
            "getTypeFromName": {
              "value": function () { return this.get_type_from_name.apply(this, arguments); }
            },
            "lookupCallbackSymbol": {
              "value": function () { return this.lookup_callback_symbol.apply(this, arguments); }
            },
            "setApplication": {
              "value": function () { return this.set_application.apply(this, arguments); }
            },
            "setTranslationDomain": {
              "value": function () { return this.set_translation_domain.apply(this, arguments); }
            },
            "valueFromString": {
              "value": function () { return this.value_from_string.apply(this, arguments); }
            },
            "valueFromStringType": {
              "value": function () { return this.value_from_string_type.apply(this, arguments); }
            },
            "translationDomain": {
              "get": function () { return this.translation_domain; },
              "set": function (value) { this.translation_domain = value; }
            }
          },
          "static": {}
        },
        "Button": {
          "prototype": {
            "getAlignment": {
              "value": function () { return this.get_alignment.apply(this, arguments); }
            },
            "getAlwaysShowImage": {
              "value": function () { return this.get_always_show_image.apply(this, arguments); }
            },
            "getEventWindow": {
              "value": function () { return this.get_event_window.apply(this, arguments); }
            },
            "getFocusOnClick": {
              "value": function () { return this.get_focus_on_click.apply(this, arguments); }
            },
            "getImage": {
              "value": function () { return this.get_image.apply(this, arguments); }
            },
            "getImagePosition": {
              "value": function () { return this.get_image_position.apply(this, arguments); }
            },
            "getLabel": {
              "value": function () { return this.get_label.apply(this, arguments); }
            },
            "getRelief": {
              "value": function () { return this.get_relief.apply(this, arguments); }
            },
            "getUseStock": {
              "value": function () { return this.get_use_stock.apply(this, arguments); }
            },
            "getUseUnderline": {
              "value": function () { return this.get_use_underline.apply(this, arguments); }
            },
            "setAlignment": {
              "value": function () { return this.set_alignment.apply(this, arguments); }
            },
            "setAlwaysShowImage": {
              "value": function () { return this.set_always_show_image.apply(this, arguments); }
            },
            "setFocusOnClick": {
              "value": function () { return this.set_focus_on_click.apply(this, arguments); }
            },
            "setImage": {
              "value": function () { return this.set_image.apply(this, arguments); }
            },
            "setImagePosition": {
              "value": function () { return this.set_image_position.apply(this, arguments); }
            },
            "setLabel": {
              "value": function () { return this.set_label.apply(this, arguments); }
            },
            "setRelief": {
              "value": function () { return this.set_relief.apply(this, arguments); }
            },
            "setUseStock": {
              "value": function () { return this.set_use_stock.apply(this, arguments); }
            },
            "setUseUnderline": {
              "value": function () { return this.set_use_underline.apply(this, arguments); }
            },
            "alwaysShowImage": {
              "get": function () { return this.always_show_image; },
              "set": function (value) { this.always_show_image = value; }
            },
            "focusOnClick": {
              "get": function () { return this.focus_on_click; },
              "set": function (value) { this.focus_on_click = value; }
            },
            "imagePosition": {
              "get": function () { return this.image_position; },
              "set": function (value) { this.image_position = value; }
            },
            "useStock": {
              "get": function () { return this.use_stock; },
              "set": function (value) { this.use_stock = value; }
            },
            "useUnderline": {
              "get": function () { return this.use_underline; },
              "set": function (value) { this.use_underline = value; }
            }
          },
          "static": {}
        },
        "ButtonAccessible": {
          "prototype": {},
          "static": {}
        },
        "ButtonBox": {
          "prototype": {
            "getChildNonHomogeneous": {
              "value": function () { return this.get_child_non_homogeneous.apply(this, arguments); }
            },
            "getChildSecondary": {
              "value": function () { return this.get_child_secondary.apply(this, arguments); }
            },
            "getLayout": {
              "value": function () { return this.get_layout.apply(this, arguments); }
            },
            "setChildNonHomogeneous": {
              "value": function () { return this.set_child_non_homogeneous.apply(this, arguments); }
            },
            "setChildSecondary": {
              "value": function () { return this.set_child_secondary.apply(this, arguments); }
            },
            "setLayout": {
              "value": function () { return this.set_layout.apply(this, arguments); }
            },
            "layoutStyle": {
              "get": function () { return this.layout_style; },
              "set": function (value) { this.layout_style = value; }
            }
          },
          "static": {}
        },
        "Calendar": {
          "prototype": {
            "clearMarks": {
              "value": function () { return this.clear_marks.apply(this, arguments); }
            },
            "getDate": {
              "value": function () { return this.get_date.apply(this, arguments); }
            },
            "getDayIsMarked": {
              "value": function () { return this.get_day_is_marked.apply(this, arguments); }
            },
            "getDetailHeightRows": {
              "value": function () { return this.get_detail_height_rows.apply(this, arguments); }
            },
            "getDetailWidthChars": {
              "value": function () { return this.get_detail_width_chars.apply(this, arguments); }
            },
            "getDisplayOptions": {
              "value": function () { return this.get_display_options.apply(this, arguments); }
            },
            "markDay": {
              "value": function () { return this.mark_day.apply(this, arguments); }
            },
            "selectDay": {
              "value": function () { return this.select_day.apply(this, arguments); }
            },
            "selectMonth": {
              "value": function () { return this.select_month.apply(this, arguments); }
            },
            "setDetailFunc": {
              "value": function () { return this.set_detail_func.apply(this, arguments); }
            },
            "setDetailHeightRows": {
              "value": function () { return this.set_detail_height_rows.apply(this, arguments); }
            },
            "setDetailWidthChars": {
              "value": function () { return this.set_detail_width_chars.apply(this, arguments); }
            },
            "setDisplayOptions": {
              "value": function () { return this.set_display_options.apply(this, arguments); }
            },
            "unmarkDay": {
              "value": function () { return this.unmark_day.apply(this, arguments); }
            },
            "detailHeightRows": {
              "get": function () { return this.detail_height_rows; },
              "set": function (value) { this.detail_height_rows = value; }
            },
            "detailWidthChars": {
              "get": function () { return this.detail_width_chars; },
              "set": function (value) { this.detail_width_chars = value; }
            },
            "noMonthChange": {
              "get": function () { return this.no_month_change; },
              "set": function (value) { this.no_month_change = value; }
            },
            "showDayNames": {
              "get": function () { return this.show_day_names; },
              "set": function (value) { this.show_day_names = value; }
            },
            "showDetails": {
              "get": function () { return this.show_details; },
              "set": function (value) { this.show_details = value; }
            },
            "showHeading": {
              "get": function () { return this.show_heading; },
              "set": function (value) { this.show_heading = value; }
            },
            "showWeekNumbers": {
              "get": function () { return this.show_week_numbers; },
              "set": function (value) { this.show_week_numbers = value; }
            }
          },
          "static": {}
        },
        "CellAccessible": {
          "prototype": {},
          "static": {}
        },
        "CellArea": {
          "prototype": {
            "activateCell": {
              "value": function () { return this.activate_cell.apply(this, arguments); }
            },
            "addFocusSibling": {
              "value": function () { return this.add_focus_sibling.apply(this, arguments); }
            },
            "addWithProperties": {
              "value": function () { return this.add_with_properties.apply(this, arguments); }
            },
            "applyAttributes": {
              "value": function () { return this.apply_attributes.apply(this, arguments); }
            },
            "attributeConnect": {
              "value": function () { return this.attribute_connect.apply(this, arguments); }
            },
            "attributeDisconnect": {
              "value": function () { return this.attribute_disconnect.apply(this, arguments); }
            },
            "attributeGetColumn": {
              "value": function () { return this.attribute_get_column.apply(this, arguments); }
            },
            "cellGet": {
              "value": function () { return this.cell_get.apply(this, arguments); }
            },
            "cellGetProperty": {
              "value": function () { return this.cell_get_property.apply(this, arguments); }
            },
            "cellGetValist": {
              "value": function () { return this.cell_get_valist.apply(this, arguments); }
            },
            "cellSet": {
              "value": function () { return this.cell_set.apply(this, arguments); }
            },
            "cellSetProperty": {
              "value": function () { return this.cell_set_property.apply(this, arguments); }
            },
            "cellSetValist": {
              "value": function () { return this.cell_set_valist.apply(this, arguments); }
            },
            "copyContext": {
              "value": function () { return this.copy_context.apply(this, arguments); }
            },
            "createContext": {
              "value": function () { return this.create_context.apply(this, arguments); }
            },
            "foreachAlloc": {
              "value": function () { return this.foreach_alloc.apply(this, arguments); }
            },
            "getCellAllocation": {
              "value": function () { return this.get_cell_allocation.apply(this, arguments); }
            },
            "getCellAtPosition": {
              "value": function () { return this.get_cell_at_position.apply(this, arguments); }
            },
            "getCurrentPathString": {
              "value": function () { return this.get_current_path_string.apply(this, arguments); }
            },
            "getEditWidget": {
              "value": function () { return this.get_edit_widget.apply(this, arguments); }
            },
            "getEditedCell": {
              "value": function () { return this.get_edited_cell.apply(this, arguments); }
            },
            "getFocusCell": {
              "value": function () { return this.get_focus_cell.apply(this, arguments); }
            },
            "getFocusFromSibling": {
              "value": function () { return this.get_focus_from_sibling.apply(this, arguments); }
            },
            "getFocusSiblings": {
              "value": function () { return this.get_focus_siblings.apply(this, arguments); }
            },
            "getPreferredHeight": {
              "value": function () { return this.get_preferred_height.apply(this, arguments); }
            },
            "getPreferredHeightForWidth": {
              "value": function () { return this.get_preferred_height_for_width.apply(this, arguments); }
            },
            "getPreferredWidth": {
              "value": function () { return this.get_preferred_width.apply(this, arguments); }
            },
            "getPreferredWidthForHeight": {
              "value": function () { return this.get_preferred_width_for_height.apply(this, arguments); }
            },
            "getRequestMode": {
              "value": function () { return this.get_request_mode.apply(this, arguments); }
            },
            "hasRenderer": {
              "value": function () { return this.has_renderer.apply(this, arguments); }
            },
            "innerCellArea": {
              "value": function () { return this.inner_cell_area.apply(this, arguments); }
            },
            "isActivatable": {
              "value": function () { return this.is_activatable.apply(this, arguments); }
            },
            "isFocusSibling": {
              "value": function () { return this.is_focus_sibling.apply(this, arguments); }
            },
            "removeFocusSibling": {
              "value": function () { return this.remove_focus_sibling.apply(this, arguments); }
            },
            "requestRenderer": {
              "value": function () { return this.request_renderer.apply(this, arguments); }
            },
            "setFocusCell": {
              "value": function () { return this.set_focus_cell.apply(this, arguments); }
            },
            "stopEditing": {
              "value": function () { return this.stop_editing.apply(this, arguments); }
            },
            "editWidget": {
              "get": function () { return this.edit_widget; },
              "set": function (value) { this.edit_widget = value; }
            },
            "editedCell": {
              "get": function () { return this.edited_cell; },
              "set": function (value) { this.edited_cell = value; }
            },
            "focusCell": {
              "get": function () { return this.focus_cell; },
              "set": function (value) { this.focus_cell = value; }
            }
          },
          "static": {}
        },
        "CellAreaBox": {
          "prototype": {
            "getSpacing": {
              "value": function () { return this.get_spacing.apply(this, arguments); }
            },
            "packEnd": {
              "value": function () { return this.pack_end.apply(this, arguments); }
            },
            "packStart": {
              "value": function () { return this.pack_start.apply(this, arguments); }
            },
            "setSpacing": {
              "value": function () { return this.set_spacing.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "CellAreaContext": {
          "prototype": {
            "getAllocation": {
              "value": function () { return this.get_allocation.apply(this, arguments); }
            },
            "getArea": {
              "value": function () { return this.get_area.apply(this, arguments); }
            },
            "getPreferredHeight": {
              "value": function () { return this.get_preferred_height.apply(this, arguments); }
            },
            "getPreferredHeightForWidth": {
              "value": function () { return this.get_preferred_height_for_width.apply(this, arguments); }
            },
            "getPreferredWidth": {
              "value": function () { return this.get_preferred_width.apply(this, arguments); }
            },
            "getPreferredWidthForHeight": {
              "value": function () { return this.get_preferred_width_for_height.apply(this, arguments); }
            },
            "pushPreferredHeight": {
              "value": function () { return this.push_preferred_height.apply(this, arguments); }
            },
            "pushPreferredWidth": {
              "value": function () { return this.push_preferred_width.apply(this, arguments); }
            },
            "minimumHeight": {
              "get": function () { return this.minimum_height; },
              "set": function (value) { this.minimum_height = value; }
            },
            "minimumWidth": {
              "get": function () { return this.minimum_width; },
              "set": function (value) { this.minimum_width = value; }
            },
            "naturalHeight": {
              "get": function () { return this.natural_height; },
              "set": function (value) { this.natural_height = value; }
            },
            "naturalWidth": {
              "get": function () { return this.natural_width; },
              "set": function (value) { this.natural_width = value; }
            }
          },
          "static": {}
        },
        "CellRenderer": {
          "prototype": {
            "getAlignedArea": {
              "value": function () { return this.get_aligned_area.apply(this, arguments); }
            },
            "getAlignment": {
              "value": function () { return this.get_alignment.apply(this, arguments); }
            },
            "getFixedSize": {
              "value": function () { return this.get_fixed_size.apply(this, arguments); }
            },
            "getPadding": {
              "value": function () { return this.get_padding.apply(this, arguments); }
            },
            "getPreferredHeight": {
              "value": function () { return this.get_preferred_height.apply(this, arguments); }
            },
            "getPreferredHeightForWidth": {
              "value": function () { return this.get_preferred_height_for_width.apply(this, arguments); }
            },
            "getPreferredSize": {
              "value": function () { return this.get_preferred_size.apply(this, arguments); }
            },
            "getPreferredWidth": {
              "value": function () { return this.get_preferred_width.apply(this, arguments); }
            },
            "getPreferredWidthForHeight": {
              "value": function () { return this.get_preferred_width_for_height.apply(this, arguments); }
            },
            "getRequestMode": {
              "value": function () { return this.get_request_mode.apply(this, arguments); }
            },
            "getSensitive": {
              "value": function () { return this.get_sensitive.apply(this, arguments); }
            },
            "getSize": {
              "value": function () { return this.get_size.apply(this, arguments); }
            },
            "getState": {
              "value": function () { return this.get_state.apply(this, arguments); }
            },
            "getVisible": {
              "value": function () { return this.get_visible.apply(this, arguments); }
            },
            "isActivatable": {
              "value": function () { return this.is_activatable.apply(this, arguments); }
            },
            "setAlignment": {
              "value": function () { return this.set_alignment.apply(this, arguments); }
            },
            "setFixedSize": {
              "value": function () { return this.set_fixed_size.apply(this, arguments); }
            },
            "setPadding": {
              "value": function () { return this.set_padding.apply(this, arguments); }
            },
            "setSensitive": {
              "value": function () { return this.set_sensitive.apply(this, arguments); }
            },
            "setVisible": {
              "value": function () { return this.set_visible.apply(this, arguments); }
            },
            "startEditing": {
              "value": function () { return this.start_editing.apply(this, arguments); }
            },
            "stopEditing": {
              "value": function () { return this.stop_editing.apply(this, arguments); }
            },
            "cellBackground": {
              "get": function () { return this.cell_background; },
              "set": function (value) { this.cell_background = value; }
            },
            "cellBackgroundGdk": {
              "get": function () { return this.cell_background_gdk; },
              "set": function (value) { this.cell_background_gdk = value; }
            },
            "cellBackgroundRgba": {
              "get": function () { return this.cell_background_rgba; },
              "set": function (value) { this.cell_background_rgba = value; }
            },
            "cellBackgroundSet": {
              "get": function () { return this.cell_background_set; },
              "set": function (value) { this.cell_background_set = value; }
            },
            "isExpanded": {
              "get": function () { return this.is_expanded; },
              "set": function (value) { this.is_expanded = value; }
            },
            "isExpander": {
              "get": function () { return this.is_expander; },
              "set": function (value) { this.is_expander = value; }
            }
          },
          "static": {}
        },
        "CellRendererAccel": {
          "prototype": {
            "accelKey": {
              "get": function () { return this.accel_key; },
              "set": function (value) { this.accel_key = value; }
            },
            "accelMode": {
              "get": function () { return this.accel_mode; },
              "set": function (value) { this.accel_mode = value; }
            },
            "accelMods": {
              "get": function () { return this.accel_mods; },
              "set": function (value) { this.accel_mods = value; }
            }
          },
          "static": {}
        },
        "CellRendererCombo": {
          "prototype": {
            "hasEntry": {
              "get": function () { return this.has_entry; },
              "set": function (value) { this.has_entry = value; }
            },
            "textColumn": {
              "get": function () { return this.text_column; },
              "set": function (value) { this.text_column = value; }
            }
          },
          "static": {}
        },
        "CellRendererPixbuf": {
          "prototype": {
            "followState": {
              "get": function () { return this.follow_state; },
              "set": function (value) { this.follow_state = value; }
            },
            "iconName": {
              "get": function () { return this.icon_name; },
              "set": function (value) { this.icon_name = value; }
            },
            "pixbufExpanderClosed": {
              "get": function () { return this.pixbuf_expander_closed; },
              "set": function (value) { this.pixbuf_expander_closed = value; }
            },
            "pixbufExpanderOpen": {
              "get": function () { return this.pixbuf_expander_open; },
              "set": function (value) { this.pixbuf_expander_open = value; }
            },
            "stockDetail": {
              "get": function () { return this.stock_detail; },
              "set": function (value) { this.stock_detail = value; }
            },
            "stockId": {
              "get": function () { return this.stock_id; },
              "set": function (value) { this.stock_id = value; }
            },
            "stockSize": {
              "get": function () { return this.stock_size; },
              "set": function (value) { this.stock_size = value; }
            }
          },
          "static": {}
        },
        "CellRendererProgress": {
          "prototype": {
            "textXalign": {
              "get": function () { return this.text_xalign; },
              "set": function (value) { this.text_xalign = value; }
            },
            "textYalign": {
              "get": function () { return this.text_yalign; },
              "set": function (value) { this.text_yalign = value; }
            }
          },
          "static": {}
        },
        "CellRendererSpin": {
          "prototype": {
            "climbRate": {
              "get": function () { return this.climb_rate; },
              "set": function (value) { this.climb_rate = value; }
            }
          },
          "static": {}
        },
        "CellRendererSpinner": {
          "prototype": {},
          "static": {}
        },
        "CellRendererText": {
          "prototype": {
            "setFixedHeightFromFont": {
              "value": function () { return this.set_fixed_height_from_font.apply(this, arguments); }
            },
            "alignSet": {
              "get": function () { return this.align_set; },
              "set": function (value) { this.align_set = value; }
            },
            "backgroundGdk": {
              "get": function () { return this.background_gdk; },
              "set": function (value) { this.background_gdk = value; }
            },
            "backgroundRgba": {
              "get": function () { return this.background_rgba; },
              "set": function (value) { this.background_rgba = value; }
            },
            "backgroundSet": {
              "get": function () { return this.background_set; },
              "set": function (value) { this.background_set = value; }
            },
            "editableSet": {
              "get": function () { return this.editable_set; },
              "set": function (value) { this.editable_set = value; }
            },
            "ellipsizeSet": {
              "get": function () { return this.ellipsize_set; },
              "set": function (value) { this.ellipsize_set = value; }
            },
            "familySet": {
              "get": function () { return this.family_set; },
              "set": function (value) { this.family_set = value; }
            },
            "fontDesc": {
              "get": function () { return this.font_desc; },
              "set": function (value) { this.font_desc = value; }
            },
            "foregroundGdk": {
              "get": function () { return this.foreground_gdk; },
              "set": function (value) { this.foreground_gdk = value; }
            },
            "foregroundRgba": {
              "get": function () { return this.foreground_rgba; },
              "set": function (value) { this.foreground_rgba = value; }
            },
            "foregroundSet": {
              "get": function () { return this.foreground_set; },
              "set": function (value) { this.foreground_set = value; }
            },
            "languageSet": {
              "get": function () { return this.language_set; },
              "set": function (value) { this.language_set = value; }
            },
            "maxWidthChars": {
              "get": function () { return this.max_width_chars; },
              "set": function (value) { this.max_width_chars = value; }
            },
            "placeholderText": {
              "get": function () { return this.placeholder_text; },
              "set": function (value) { this.placeholder_text = value; }
            },
            "riseSet": {
              "get": function () { return this.rise_set; },
              "set": function (value) { this.rise_set = value; }
            },
            "scaleSet": {
              "get": function () { return this.scale_set; },
              "set": function (value) { this.scale_set = value; }
            },
            "singleParagraphMode": {
              "get": function () { return this.single_paragraph_mode; },
              "set": function (value) { this.single_paragraph_mode = value; }
            },
            "sizePoints": {
              "get": function () { return this.size_points; },
              "set": function (value) { this.size_points = value; }
            },
            "sizeSet": {
              "get": function () { return this.size_set; },
              "set": function (value) { this.size_set = value; }
            },
            "stretchSet": {
              "get": function () { return this.stretch_set; },
              "set": function (value) { this.stretch_set = value; }
            },
            "strikethroughSet": {
              "get": function () { return this.strikethrough_set; },
              "set": function (value) { this.strikethrough_set = value; }
            },
            "styleSet": {
              "get": function () { return this.style_set; },
              "set": function (value) { this.style_set = value; }
            },
            "underlineSet": {
              "get": function () { return this.underline_set; },
              "set": function (value) { this.underline_set = value; }
            },
            "variantSet": {
              "get": function () { return this.variant_set; },
              "set": function (value) { this.variant_set = value; }
            },
            "weightSet": {
              "get": function () { return this.weight_set; },
              "set": function (value) { this.weight_set = value; }
            },
            "widthChars": {
              "get": function () { return this.width_chars; },
              "set": function (value) { this.width_chars = value; }
            },
            "wrapMode": {
              "get": function () { return this.wrap_mode; },
              "set": function (value) { this.wrap_mode = value; }
            },
            "wrapWidth": {
              "get": function () { return this.wrap_width; },
              "set": function (value) { this.wrap_width = value; }
            }
          },
          "static": {}
        },
        "CellRendererToggle": {
          "prototype": {
            "getActivatable": {
              "value": function () { return this.get_activatable.apply(this, arguments); }
            },
            "getActive": {
              "value": function () { return this.get_active.apply(this, arguments); }
            },
            "getRadio": {
              "value": function () { return this.get_radio.apply(this, arguments); }
            },
            "setActivatable": {
              "value": function () { return this.set_activatable.apply(this, arguments); }
            },
            "setActive": {
              "value": function () { return this.set_active.apply(this, arguments); }
            },
            "setRadio": {
              "value": function () { return this.set_radio.apply(this, arguments); }
            },
            "indicatorSize": {
              "get": function () { return this.indicator_size; },
              "set": function (value) { this.indicator_size = value; }
            }
          },
          "static": {}
        },
        "CellView": {
          "prototype": {
            "getDisplayedRow": {
              "value": function () { return this.get_displayed_row.apply(this, arguments); }
            },
            "getDrawSensitive": {
              "value": function () { return this.get_draw_sensitive.apply(this, arguments); }
            },
            "getFitModel": {
              "value": function () { return this.get_fit_model.apply(this, arguments); }
            },
            "getModel": {
              "value": function () { return this.get_model.apply(this, arguments); }
            },
            "getSizeOfRow": {
              "value": function () { return this.get_size_of_row.apply(this, arguments); }
            },
            "setBackgroundColor": {
              "value": function () { return this.set_background_color.apply(this, arguments); }
            },
            "setBackgroundRgba": {
              "value": function () { return this.set_background_rgba.apply(this, arguments); }
            },
            "setDisplayedRow": {
              "value": function () { return this.set_displayed_row.apply(this, arguments); }
            },
            "setDrawSensitive": {
              "value": function () { return this.set_draw_sensitive.apply(this, arguments); }
            },
            "setFitModel": {
              "value": function () { return this.set_fit_model.apply(this, arguments); }
            },
            "setModel": {
              "value": function () { return this.set_model.apply(this, arguments); }
            },
            "backgroundGdk": {
              "get": function () { return this.background_gdk; },
              "set": function (value) { this.background_gdk = value; }
            },
            "backgroundRgba": {
              "get": function () { return this.background_rgba; },
              "set": function (value) { this.background_rgba = value; }
            },
            "backgroundSet": {
              "get": function () { return this.background_set; },
              "set": function (value) { this.background_set = value; }
            },
            "cellArea": {
              "get": function () { return this.cell_area; },
              "set": function (value) { this.cell_area = value; }
            },
            "cellAreaContext": {
              "get": function () { return this.cell_area_context; },
              "set": function (value) { this.cell_area_context = value; }
            },
            "drawSensitive": {
              "get": function () { return this.draw_sensitive; },
              "set": function (value) { this.draw_sensitive = value; }
            },
            "fitModel": {
              "get": function () { return this.fit_model; },
              "set": function (value) { this.fit_model = value; }
            }
          },
          "static": {}
        },
        "CheckButton": {
          "prototype": {},
          "static": {}
        },
        "CheckMenuItem": {
          "prototype": {
            "getActive": {
              "value": function () { return this.get_active.apply(this, arguments); }
            },
            "getDrawAsRadio": {
              "value": function () { return this.get_draw_as_radio.apply(this, arguments); }
            },
            "getInconsistent": {
              "value": function () { return this.get_inconsistent.apply(this, arguments); }
            },
            "setActive": {
              "value": function () { return this.set_active.apply(this, arguments); }
            },
            "setDrawAsRadio": {
              "value": function () { return this.set_draw_as_radio.apply(this, arguments); }
            },
            "setInconsistent": {
              "value": function () { return this.set_inconsistent.apply(this, arguments); }
            },
            "drawAsRadio": {
              "get": function () { return this.draw_as_radio; },
              "set": function (value) { this.draw_as_radio = value; }
            }
          },
          "static": {}
        },
        "CheckMenuItemAccessible": {
          "prototype": {},
          "static": {}
        },
        "Clipboard": {
          "prototype": {
            "getDisplay": {
              "value": function () { return this.get_display.apply(this, arguments); }
            },
            "getOwner": {
              "value": function () { return this.get_owner.apply(this, arguments); }
            },
            "requestContents": {
              "value": function () { return this.request_contents.apply(this, arguments); }
            },
            "requestImage": {
              "value": function () { return this.request_image.apply(this, arguments); }
            },
            "requestRichText": {
              "value": function () { return this.request_rich_text.apply(this, arguments); }
            },
            "requestTargets": {
              "value": function () { return this.request_targets.apply(this, arguments); }
            },
            "requestText": {
              "value": function () { return this.request_text.apply(this, arguments); }
            },
            "requestUris": {
              "value": function () { return this.request_uris.apply(this, arguments); }
            },
            "setCanStore": {
              "value": function () { return this.set_can_store.apply(this, arguments); }
            },
            "setImage": {
              "value": function () { return this.set_image.apply(this, arguments); }
            },
            "setText": {
              "value": function () { return this.set_text.apply(this, arguments); }
            },
            "setWithData": {
              "value": function () { return this.set_with_data.apply(this, arguments); }
            },
            "setWithOwner": {
              "value": function () { return this.set_with_owner.apply(this, arguments); }
            },
            "waitForContents": {
              "value": function () { return this.wait_for_contents.apply(this, arguments); }
            },
            "waitForImage": {
              "value": function () { return this.wait_for_image.apply(this, arguments); }
            },
            "waitForRichText": {
              "value": function () { return this.wait_for_rich_text.apply(this, arguments); }
            },
            "waitForTargets": {
              "value": function () { return this.wait_for_targets.apply(this, arguments); }
            },
            "waitForText": {
              "value": function () { return this.wait_for_text.apply(this, arguments); }
            },
            "waitForUris": {
              "value": function () { return this.wait_for_uris.apply(this, arguments); }
            },
            "waitIsImageAvailable": {
              "value": function () { return this.wait_is_image_available.apply(this, arguments); }
            },
            "waitIsRichTextAvailable": {
              "value": function () { return this.wait_is_rich_text_available.apply(this, arguments); }
            },
            "waitIsTargetAvailable": {
              "value": function () { return this.wait_is_target_available.apply(this, arguments); }
            },
            "waitIsTextAvailable": {
              "value": function () { return this.wait_is_text_available.apply(this, arguments); }
            },
            "waitIsUrisAvailable": {
              "value": function () { return this.wait_is_uris_available.apply(this, arguments); }
            }
          },
          "static": {
            "getDefault": {
              "value": function () { return this.get_default.apply(this, arguments); }
            },
            "getForDisplay": {
              "value": function () { return this.get_for_display.apply(this, arguments); }
            }
          }
        },
        "ColorButton": {
          "prototype": {
            "getAlpha": {
              "value": function () { return this.get_alpha.apply(this, arguments); }
            },
            "getColor": {
              "value": function () { return this.get_color.apply(this, arguments); }
            },
            "getRgba": {
              "value": function () { return this.get_rgba.apply(this, arguments); }
            },
            "getTitle": {
              "value": function () { return this.get_title.apply(this, arguments); }
            },
            "getUseAlpha": {
              "value": function () { return this.get_use_alpha.apply(this, arguments); }
            },
            "setAlpha": {
              "value": function () { return this.set_alpha.apply(this, arguments); }
            },
            "setColor": {
              "value": function () { return this.set_color.apply(this, arguments); }
            },
            "setRgba": {
              "value": function () { return this.set_rgba.apply(this, arguments); }
            },
            "setTitle": {
              "value": function () { return this.set_title.apply(this, arguments); }
            },
            "setUseAlpha": {
              "value": function () { return this.set_use_alpha.apply(this, arguments); }
            },
            "useAlpha": {
              "get": function () { return this.use_alpha; },
              "set": function (value) { this.use_alpha = value; }
            }
          },
          "static": {}
        },
        "ColorChooserDialog": {
          "prototype": {
            "showEditor": {
              "get": function () { return this.show_editor; },
              "set": function (value) { this.show_editor = value; }
            }
          },
          "static": {}
        },
        "ColorChooserWidget": {
          "prototype": {
            "showEditor": {
              "get": function () { return this.show_editor; },
              "set": function (value) { this.show_editor = value; }
            }
          },
          "static": {}
        },
        "ColorSelection": {
          "prototype": {
            "getCurrentAlpha": {
              "value": function () { return this.get_current_alpha.apply(this, arguments); }
            },
            "getCurrentColor": {
              "value": function () { return this.get_current_color.apply(this, arguments); }
            },
            "getCurrentRgba": {
              "value": function () { return this.get_current_rgba.apply(this, arguments); }
            },
            "getHasOpacityControl": {
              "value": function () { return this.get_has_opacity_control.apply(this, arguments); }
            },
            "getHasPalette": {
              "value": function () { return this.get_has_palette.apply(this, arguments); }
            },
            "getPreviousAlpha": {
              "value": function () { return this.get_previous_alpha.apply(this, arguments); }
            },
            "getPreviousColor": {
              "value": function () { return this.get_previous_color.apply(this, arguments); }
            },
            "getPreviousRgba": {
              "value": function () { return this.get_previous_rgba.apply(this, arguments); }
            },
            "isAdjusting": {
              "value": function () { return this.is_adjusting.apply(this, arguments); }
            },
            "setCurrentAlpha": {
              "value": function () { return this.set_current_alpha.apply(this, arguments); }
            },
            "setCurrentColor": {
              "value": function () { return this.set_current_color.apply(this, arguments); }
            },
            "setCurrentRgba": {
              "value": function () { return this.set_current_rgba.apply(this, arguments); }
            },
            "setHasOpacityControl": {
              "value": function () { return this.set_has_opacity_control.apply(this, arguments); }
            },
            "setHasPalette": {
              "value": function () { return this.set_has_palette.apply(this, arguments); }
            },
            "setPreviousAlpha": {
              "value": function () { return this.set_previous_alpha.apply(this, arguments); }
            },
            "setPreviousColor": {
              "value": function () { return this.set_previous_color.apply(this, arguments); }
            },
            "setPreviousRgba": {
              "value": function () { return this.set_previous_rgba.apply(this, arguments); }
            },
            "currentAlpha": {
              "get": function () { return this.current_alpha; },
              "set": function (value) { this.current_alpha = value; }
            },
            "currentColor": {
              "get": function () { return this.current_color; },
              "set": function (value) { this.current_color = value; }
            },
            "currentRgba": {
              "get": function () { return this.current_rgba; },
              "set": function (value) { this.current_rgba = value; }
            },
            "hasOpacityControl": {
              "get": function () { return this.has_opacity_control; },
              "set": function (value) { this.has_opacity_control = value; }
            },
            "hasPalette": {
              "get": function () { return this.has_palette; },
              "set": function (value) { this.has_palette = value; }
            }
          },
          "static": {
            "paletteFromString": {
              "value": function () { return this.palette_from_string.apply(this, arguments); }
            },
            "paletteToString": {
              "value": function () { return this.palette_to_string.apply(this, arguments); }
            },
            "setChangePaletteWithScreenHook": {
              "value": function () { return this.set_change_palette_with_screen_hook.apply(this, arguments); }
            }
          }
        },
        "ColorSelectionDialog": {
          "prototype": {
            "getColorSelection": {
              "value": function () { return this.get_color_selection.apply(this, arguments); }
            },
            "cancelButton": {
              "get": function () { return this.cancel_button; },
              "set": function (value) { this.cancel_button = value; }
            },
            "colorSelection": {
              "get": function () { return this.color_selection; },
              "set": function (value) { this.color_selection = value; }
            },
            "helpButton": {
              "get": function () { return this.help_button; },
              "set": function (value) { this.help_button = value; }
            },
            "okButton": {
              "get": function () { return this.ok_button; },
              "set": function (value) { this.ok_button = value; }
            }
          },
          "static": {}
        },
        "ComboBox": {
          "prototype": {
            "getActive": {
              "value": function () { return this.get_active.apply(this, arguments); }
            },
            "getActiveId": {
              "value": function () { return this.get_active_id.apply(this, arguments); }
            },
            "getActiveIter": {
              "value": function () { return this.get_active_iter.apply(this, arguments); }
            },
            "getAddTearoffs": {
              "value": function () { return this.get_add_tearoffs.apply(this, arguments); }
            },
            "getButtonSensitivity": {
              "value": function () { return this.get_button_sensitivity.apply(this, arguments); }
            },
            "getColumnSpanColumn": {
              "value": function () { return this.get_column_span_column.apply(this, arguments); }
            },
            "getEntryTextColumn": {
              "value": function () { return this.get_entry_text_column.apply(this, arguments); }
            },
            "getFocusOnClick": {
              "value": function () { return this.get_focus_on_click.apply(this, arguments); }
            },
            "getHasEntry": {
              "value": function () { return this.get_has_entry.apply(this, arguments); }
            },
            "getIdColumn": {
              "value": function () { return this.get_id_column.apply(this, arguments); }
            },
            "getModel": {
              "value": function () { return this.get_model.apply(this, arguments); }
            },
            "getPopupAccessible": {
              "value": function () { return this.get_popup_accessible.apply(this, arguments); }
            },
            "getPopupFixedWidth": {
              "value": function () { return this.get_popup_fixed_width.apply(this, arguments); }
            },
            "getRowSeparatorFunc": {
              "value": function () { return this.get_row_separator_func.apply(this, arguments); }
            },
            "getRowSpanColumn": {
              "value": function () { return this.get_row_span_column.apply(this, arguments); }
            },
            "getTitle": {
              "value": function () { return this.get_title.apply(this, arguments); }
            },
            "getWrapWidth": {
              "value": function () { return this.get_wrap_width.apply(this, arguments); }
            },
            "popupForDevice": {
              "value": function () { return this.popup_for_device.apply(this, arguments); }
            },
            "setActive": {
              "value": function () { return this.set_active.apply(this, arguments); }
            },
            "setActiveId": {
              "value": function () { return this.set_active_id.apply(this, arguments); }
            },
            "setActiveIter": {
              "value": function () { return this.set_active_iter.apply(this, arguments); }
            },
            "setAddTearoffs": {
              "value": function () { return this.set_add_tearoffs.apply(this, arguments); }
            },
            "setButtonSensitivity": {
              "value": function () { return this.set_button_sensitivity.apply(this, arguments); }
            },
            "setColumnSpanColumn": {
              "value": function () { return this.set_column_span_column.apply(this, arguments); }
            },
            "setEntryTextColumn": {
              "value": function () { return this.set_entry_text_column.apply(this, arguments); }
            },
            "setFocusOnClick": {
              "value": function () { return this.set_focus_on_click.apply(this, arguments); }
            },
            "setIdColumn": {
              "value": function () { return this.set_id_column.apply(this, arguments); }
            },
            "setModel": {
              "value": function () { return this.set_model.apply(this, arguments); }
            },
            "setPopupFixedWidth": {
              "value": function () { return this.set_popup_fixed_width.apply(this, arguments); }
            },
            "setRowSeparatorFunc": {
              "value": function () { return this.set_row_separator_func.apply(this, arguments); }
            },
            "setRowSpanColumn": {
              "value": function () { return this.set_row_span_column.apply(this, arguments); }
            },
            "setTitle": {
              "value": function () { return this.set_title.apply(this, arguments); }
            },
            "setWrapWidth": {
              "value": function () { return this.set_wrap_width.apply(this, arguments); }
            },
            "activeId": {
              "get": function () { return this.active_id; },
              "set": function (value) { this.active_id = value; }
            },
            "addTearoffs": {
              "get": function () { return this.add_tearoffs; },
              "set": function (value) { this.add_tearoffs = value; }
            },
            "buttonSensitivity": {
              "get": function () { return this.button_sensitivity; },
              "set": function (value) { this.button_sensitivity = value; }
            },
            "cellArea": {
              "get": function () { return this.cell_area; },
              "set": function (value) { this.cell_area = value; }
            },
            "columnSpanColumn": {
              "get": function () { return this.column_span_column; },
              "set": function (value) { this.column_span_column = value; }
            },
            "entryTextColumn": {
              "get": function () { return this.entry_text_column; },
              "set": function (value) { this.entry_text_column = value; }
            },
            "focusOnClick": {
              "get": function () { return this.focus_on_click; },
              "set": function (value) { this.focus_on_click = value; }
            },
            "hasEntry": {
              "get": function () { return this.has_entry; },
              "set": function (value) { this.has_entry = value; }
            },
            "hasFrame": {
              "get": function () { return this.has_frame; },
              "set": function (value) { this.has_frame = value; }
            },
            "idColumn": {
              "get": function () { return this.id_column; },
              "set": function (value) { this.id_column = value; }
            },
            "popupFixedWidth": {
              "get": function () { return this.popup_fixed_width; },
              "set": function (value) { this.popup_fixed_width = value; }
            },
            "popupShown": {
              "get": function () { return this.popup_shown; },
              "set": function (value) { this.popup_shown = value; }
            },
            "rowSpanColumn": {
              "get": function () { return this.row_span_column; },
              "set": function (value) { this.row_span_column = value; }
            },
            "tearoffTitle": {
              "get": function () { return this.tearoff_title; },
              "set": function (value) { this.tearoff_title = value; }
            },
            "wrapWidth": {
              "get": function () { return this.wrap_width; },
              "set": function (value) { this.wrap_width = value; }
            }
          },
          "static": {}
        },
        "ComboBoxAccessible": {
          "prototype": {},
          "static": {}
        },
        "ComboBoxText": {
          "prototype": {
            "appendText": {
              "value": function () { return this.append_text.apply(this, arguments); }
            },
            "getActiveText": {
              "value": function () { return this.get_active_text.apply(this, arguments); }
            },
            "insertText": {
              "value": function () { return this.insert_text.apply(this, arguments); }
            },
            "prependText": {
              "value": function () { return this.prepend_text.apply(this, arguments); }
            },
            "removeAll": {
              "value": function () { return this.remove_all.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Container": {
          "prototype": {
            "addWithProperties": {
              "value": function () { return this.add_with_properties.apply(this, arguments); }
            },
            "checkResize": {
              "value": function () { return this.check_resize.apply(this, arguments); }
            },
            "childGet": {
              "value": function () { return this.child_get.apply(this, arguments); }
            },
            "childGetProperty": {
              "value": function () { return this.child_get_property.apply(this, arguments); }
            },
            "childGetValist": {
              "value": function () { return this.child_get_valist.apply(this, arguments); }
            },
            "childNotify": {
              "value": function () { return this.child_notify.apply(this, arguments); }
            },
            "childNotifyByPspec": {
              "value": function () { return this.child_notify_by_pspec.apply(this, arguments); }
            },
            "childSet": {
              "value": function () { return this.child_set.apply(this, arguments); }
            },
            "childSetProperty": {
              "value": function () { return this.child_set_property.apply(this, arguments); }
            },
            "childSetValist": {
              "value": function () { return this.child_set_valist.apply(this, arguments); }
            },
            "childType": {
              "value": function () { return this.child_type.apply(this, arguments); }
            },
            "getBorderWidth": {
              "value": function () { return this.get_border_width.apply(this, arguments); }
            },
            "getChildren": {
              "value": function () { return this.get_children.apply(this, arguments); }
            },
            "getFocusChain": {
              "value": function () { return this.get_focus_chain.apply(this, arguments); }
            },
            "getFocusChild": {
              "value": function () { return this.get_focus_child.apply(this, arguments); }
            },
            "getFocusHadjustment": {
              "value": function () { return this.get_focus_hadjustment.apply(this, arguments); }
            },
            "getFocusVadjustment": {
              "value": function () { return this.get_focus_vadjustment.apply(this, arguments); }
            },
            "getPathForChild": {
              "value": function () { return this.get_path_for_child.apply(this, arguments); }
            },
            "getResizeMode": {
              "value": function () { return this.get_resize_mode.apply(this, arguments); }
            },
            "propagateDraw": {
              "value": function () { return this.propagate_draw.apply(this, arguments); }
            },
            "resizeChildren": {
              "value": function () { return this.resize_children.apply(this, arguments); }
            },
            "setBorderWidth": {
              "value": function () { return this.set_border_width.apply(this, arguments); }
            },
            "setFocusChain": {
              "value": function () { return this.set_focus_chain.apply(this, arguments); }
            },
            "setFocusChild": {
              "value": function () { return this.set_focus_child.apply(this, arguments); }
            },
            "setFocusHadjustment": {
              "value": function () { return this.set_focus_hadjustment.apply(this, arguments); }
            },
            "setFocusVadjustment": {
              "value": function () { return this.set_focus_vadjustment.apply(this, arguments); }
            },
            "setReallocateRedraws": {
              "value": function () { return this.set_reallocate_redraws.apply(this, arguments); }
            },
            "setResizeMode": {
              "value": function () { return this.set_resize_mode.apply(this, arguments); }
            },
            "unsetFocusChain": {
              "value": function () { return this.unset_focus_chain.apply(this, arguments); }
            },
            "borderWidth": {
              "get": function () { return this.border_width; },
              "set": function (value) { this.border_width = value; }
            },
            "resizeMode": {
              "get": function () { return this.resize_mode; },
              "set": function (value) { this.resize_mode = value; }
            }
          },
          "static": {}
        },
        "ContainerAccessible": {
          "prototype": {},
          "static": {}
        },
        "ContainerCellAccessible": {
          "prototype": {
            "addChild": {
              "value": function () { return this.add_child.apply(this, arguments); }
            },
            "getChildren": {
              "value": function () { return this.get_children.apply(this, arguments); }
            },
            "removeChild": {
              "value": function () { return this.remove_child.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "CssProvider": {
          "prototype": {
            "loadFromData": {
              "value": function () { return this.load_from_data.apply(this, arguments); }
            },
            "loadFromFile": {
              "value": function () { return this.load_from_file.apply(this, arguments); }
            },
            "loadFromPath": {
              "value": function () { return this.load_from_path.apply(this, arguments); }
            },
            "loadFromResource": {
              "value": function () { return this.load_from_resource.apply(this, arguments); }
            },
            "toString": {
              "value": function () { return this.to_string.apply(this, arguments); }
            }
          },
          "static": {
            "getDefault": {
              "value": function () { return this.get_default.apply(this, arguments); }
            },
            "getNamed": {
              "value": function () { return this.get_named.apply(this, arguments); }
            }
          }
        },
        "Dialog": {
          "prototype": {
            "addActionWidget": {
              "value": function () { return this.add_action_widget.apply(this, arguments); }
            },
            "addButton": {
              "value": function () { return this.add_button.apply(this, arguments); }
            },
            "addButtons": {
              "value": function () { return this.add_buttons.apply(this, arguments); }
            },
            "getActionArea": {
              "value": function () { return this.get_action_area.apply(this, arguments); }
            },
            "getContentArea": {
              "value": function () { return this.get_content_area.apply(this, arguments); }
            },
            "getHeaderBar": {
              "value": function () { return this.get_header_bar.apply(this, arguments); }
            },
            "getResponseForWidget": {
              "value": function () { return this.get_response_for_widget.apply(this, arguments); }
            },
            "getWidgetForResponse": {
              "value": function () { return this.get_widget_for_response.apply(this, arguments); }
            },
            "setAlternativeButtonOrder": {
              "value": function () { return this.set_alternative_button_order.apply(this, arguments); }
            },
            "setAlternativeButtonOrderFromArray": {
              "value": function () { return this.set_alternative_button_order_from_array.apply(this, arguments); }
            },
            "setDefaultResponse": {
              "value": function () { return this.set_default_response.apply(this, arguments); }
            },
            "setResponseSensitive": {
              "value": function () { return this.set_response_sensitive.apply(this, arguments); }
            },
            "useHeaderBar": {
              "get": function () { return this.use_header_bar; },
              "set": function (value) { this.use_header_bar = value; }
            }
          },
          "static": {}
        },
        "DrawingArea": {
          "prototype": {},
          "static": {}
        },
        "Entry": {
          "prototype": {
            "getActivatesDefault": {
              "value": function () { return this.get_activates_default.apply(this, arguments); }
            },
            "getAlignment": {
              "value": function () { return this.get_alignment.apply(this, arguments); }
            },
            "getAttributes": {
              "value": function () { return this.get_attributes.apply(this, arguments); }
            },
            "getBuffer": {
              "value": function () { return this.get_buffer.apply(this, arguments); }
            },
            "getCompletion": {
              "value": function () { return this.get_completion.apply(this, arguments); }
            },
            "getCurrentIconDragSource": {
              "value": function () { return this.get_current_icon_drag_source.apply(this, arguments); }
            },
            "getCursorHadjustment": {
              "value": function () { return this.get_cursor_hadjustment.apply(this, arguments); }
            },
            "getHasFrame": {
              "value": function () { return this.get_has_frame.apply(this, arguments); }
            },
            "getIconActivatable": {
              "value": function () { return this.get_icon_activatable.apply(this, arguments); }
            },
            "getIconArea": {
              "value": function () { return this.get_icon_area.apply(this, arguments); }
            },
            "getIconAtPos": {
              "value": function () { return this.get_icon_at_pos.apply(this, arguments); }
            },
            "getIconGicon": {
              "value": function () { return this.get_icon_gicon.apply(this, arguments); }
            },
            "getIconName": {
              "value": function () { return this.get_icon_name.apply(this, arguments); }
            },
            "getIconPixbuf": {
              "value": function () { return this.get_icon_pixbuf.apply(this, arguments); }
            },
            "getIconSensitive": {
              "value": function () { return this.get_icon_sensitive.apply(this, arguments); }
            },
            "getIconStock": {
              "value": function () { return this.get_icon_stock.apply(this, arguments); }
            },
            "getIconStorageType": {
              "value": function () { return this.get_icon_storage_type.apply(this, arguments); }
            },
            "getIconTooltipMarkup": {
              "value": function () { return this.get_icon_tooltip_markup.apply(this, arguments); }
            },
            "getIconTooltipText": {
              "value": function () { return this.get_icon_tooltip_text.apply(this, arguments); }
            },
            "getInnerBorder": {
              "value": function () { return this.get_inner_border.apply(this, arguments); }
            },
            "getInputHints": {
              "value": function () { return this.get_input_hints.apply(this, arguments); }
            },
            "getInputPurpose": {
              "value": function () { return this.get_input_purpose.apply(this, arguments); }
            },
            "getInvisibleChar": {
              "value": function () { return this.get_invisible_char.apply(this, arguments); }
            },
            "getLayout": {
              "value": function () { return this.get_layout.apply(this, arguments); }
            },
            "getLayoutOffsets": {
              "value": function () { return this.get_layout_offsets.apply(this, arguments); }
            },
            "getMaxLength": {
              "value": function () { return this.get_max_length.apply(this, arguments); }
            },
            "getMaxWidthChars": {
              "value": function () { return this.get_max_width_chars.apply(this, arguments); }
            },
            "getOverwriteMode": {
              "value": function () { return this.get_overwrite_mode.apply(this, arguments); }
            },
            "getPlaceholderText": {
              "value": function () { return this.get_placeholder_text.apply(this, arguments); }
            },
            "getProgressFraction": {
              "value": function () { return this.get_progress_fraction.apply(this, arguments); }
            },
            "getProgressPulseStep": {
              "value": function () { return this.get_progress_pulse_step.apply(this, arguments); }
            },
            "getTabs": {
              "value": function () { return this.get_tabs.apply(this, arguments); }
            },
            "getText": {
              "value": function () { return this.get_text.apply(this, arguments); }
            },
            "getTextArea": {
              "value": function () { return this.get_text_area.apply(this, arguments); }
            },
            "getTextLength": {
              "value": function () { return this.get_text_length.apply(this, arguments); }
            },
            "getVisibility": {
              "value": function () { return this.get_visibility.apply(this, arguments); }
            },
            "getWidthChars": {
              "value": function () { return this.get_width_chars.apply(this, arguments); }
            },
            "grabFocusWithoutSelecting": {
              "value": function () { return this.grab_focus_without_selecting.apply(this, arguments); }
            },
            "imContextFilterKeypress": {
              "value": function () { return this.im_context_filter_keypress.apply(this, arguments); }
            },
            "layoutIndexToTextIndex": {
              "value": function () { return this.layout_index_to_text_index.apply(this, arguments); }
            },
            "progressPulse": {
              "value": function () { return this.progress_pulse.apply(this, arguments); }
            },
            "resetImContext": {
              "value": function () { return this.reset_im_context.apply(this, arguments); }
            },
            "setActivatesDefault": {
              "value": function () { return this.set_activates_default.apply(this, arguments); }
            },
            "setAlignment": {
              "value": function () { return this.set_alignment.apply(this, arguments); }
            },
            "setAttributes": {
              "value": function () { return this.set_attributes.apply(this, arguments); }
            },
            "setBuffer": {
              "value": function () { return this.set_buffer.apply(this, arguments); }
            },
            "setCompletion": {
              "value": function () { return this.set_completion.apply(this, arguments); }
            },
            "setCursorHadjustment": {
              "value": function () { return this.set_cursor_hadjustment.apply(this, arguments); }
            },
            "setHasFrame": {
              "value": function () { return this.set_has_frame.apply(this, arguments); }
            },
            "setIconActivatable": {
              "value": function () { return this.set_icon_activatable.apply(this, arguments); }
            },
            "setIconDragSource": {
              "value": function () { return this.set_icon_drag_source.apply(this, arguments); }
            },
            "setIconFromGicon": {
              "value": function () { return this.set_icon_from_gicon.apply(this, arguments); }
            },
            "setIconFromIconName": {
              "value": function () { return this.set_icon_from_icon_name.apply(this, arguments); }
            },
            "setIconFromPixbuf": {
              "value": function () { return this.set_icon_from_pixbuf.apply(this, arguments); }
            },
            "setIconFromStock": {
              "value": function () { return this.set_icon_from_stock.apply(this, arguments); }
            },
            "setIconSensitive": {
              "value": function () { return this.set_icon_sensitive.apply(this, arguments); }
            },
            "setIconTooltipMarkup": {
              "value": function () { return this.set_icon_tooltip_markup.apply(this, arguments); }
            },
            "setIconTooltipText": {
              "value": function () { return this.set_icon_tooltip_text.apply(this, arguments); }
            },
            "setInnerBorder": {
              "value": function () { return this.set_inner_border.apply(this, arguments); }
            },
            "setInputHints": {
              "value": function () { return this.set_input_hints.apply(this, arguments); }
            },
            "setInputPurpose": {
              "value": function () { return this.set_input_purpose.apply(this, arguments); }
            },
            "setInvisibleChar": {
              "value": function () { return this.set_invisible_char.apply(this, arguments); }
            },
            "setMaxLength": {
              "value": function () { return this.set_max_length.apply(this, arguments); }
            },
            "setMaxWidthChars": {
              "value": function () { return this.set_max_width_chars.apply(this, arguments); }
            },
            "setOverwriteMode": {
              "value": function () { return this.set_overwrite_mode.apply(this, arguments); }
            },
            "setPlaceholderText": {
              "value": function () { return this.set_placeholder_text.apply(this, arguments); }
            },
            "setProgressFraction": {
              "value": function () { return this.set_progress_fraction.apply(this, arguments); }
            },
            "setProgressPulseStep": {
              "value": function () { return this.set_progress_pulse_step.apply(this, arguments); }
            },
            "setTabs": {
              "value": function () { return this.set_tabs.apply(this, arguments); }
            },
            "setText": {
              "value": function () { return this.set_text.apply(this, arguments); }
            },
            "setVisibility": {
              "value": function () { return this.set_visibility.apply(this, arguments); }
            },
            "setWidthChars": {
              "value": function () { return this.set_width_chars.apply(this, arguments); }
            },
            "textIndexToLayoutIndex": {
              "value": function () { return this.text_index_to_layout_index.apply(this, arguments); }
            },
            "unsetInvisibleChar": {
              "value": function () { return this.unset_invisible_char.apply(this, arguments); }
            },
            "activatesDefault": {
              "get": function () { return this.activates_default; },
              "set": function (value) { this.activates_default = value; }
            },
            "capsLockWarning": {
              "get": function () { return this.caps_lock_warning; },
              "set": function (value) { this.caps_lock_warning = value; }
            },
            "cursorPosition": {
              "get": function () { return this.cursor_position; },
              "set": function (value) { this.cursor_position = value; }
            },
            "hasFrame": {
              "get": function () { return this.has_frame; },
              "set": function (value) { this.has_frame = value; }
            },
            "imModule": {
              "get": function () { return this.im_module; },
              "set": function (value) { this.im_module = value; }
            },
            "innerBorder": {
              "get": function () { return this.inner_border; },
              "set": function (value) { this.inner_border = value; }
            },
            "inputHints": {
              "get": function () { return this.input_hints; },
              "set": function (value) { this.input_hints = value; }
            },
            "inputPurpose": {
              "get": function () { return this.input_purpose; },
              "set": function (value) { this.input_purpose = value; }
            },
            "invisibleChar": {
              "get": function () { return this.invisible_char; },
              "set": function (value) { this.invisible_char = value; }
            },
            "invisibleCharSet": {
              "get": function () { return this.invisible_char_set; },
              "set": function (value) { this.invisible_char_set = value; }
            },
            "maxLength": {
              "get": function () { return this.max_length; },
              "set": function (value) { this.max_length = value; }
            },
            "maxWidthChars": {
              "get": function () { return this.max_width_chars; },
              "set": function (value) { this.max_width_chars = value; }
            },
            "overwriteMode": {
              "get": function () { return this.overwrite_mode; },
              "set": function (value) { this.overwrite_mode = value; }
            },
            "placeholderText": {
              "get": function () { return this.placeholder_text; },
              "set": function (value) { this.placeholder_text = value; }
            },
            "populateAll": {
              "get": function () { return this.populate_all; },
              "set": function (value) { this.populate_all = value; }
            },
            "primaryIconActivatable": {
              "get": function () { return this.primary_icon_activatable; },
              "set": function (value) { this.primary_icon_activatable = value; }
            },
            "primaryIconGicon": {
              "get": function () { return this.primary_icon_gicon; },
              "set": function (value) { this.primary_icon_gicon = value; }
            },
            "primaryIconName": {
              "get": function () { return this.primary_icon_name; },
              "set": function (value) { this.primary_icon_name = value; }
            },
            "primaryIconPixbuf": {
              "get": function () { return this.primary_icon_pixbuf; },
              "set": function (value) { this.primary_icon_pixbuf = value; }
            },
            "primaryIconSensitive": {
              "get": function () { return this.primary_icon_sensitive; },
              "set": function (value) { this.primary_icon_sensitive = value; }
            },
            "primaryIconStock": {
              "get": function () { return this.primary_icon_stock; },
              "set": function (value) { this.primary_icon_stock = value; }
            },
            "primaryIconStorageType": {
              "get": function () { return this.primary_icon_storage_type; },
              "set": function (value) { this.primary_icon_storage_type = value; }
            },
            "primaryIconTooltipMarkup": {
              "get": function () { return this.primary_icon_tooltip_markup; },
              "set": function (value) { this.primary_icon_tooltip_markup = value; }
            },
            "primaryIconTooltipText": {
              "get": function () { return this.primary_icon_tooltip_text; },
              "set": function (value) { this.primary_icon_tooltip_text = value; }
            },
            "progressFraction": {
              "get": function () { return this.progress_fraction; },
              "set": function (value) { this.progress_fraction = value; }
            },
            "progressPulseStep": {
              "get": function () { return this.progress_pulse_step; },
              "set": function (value) { this.progress_pulse_step = value; }
            },
            "scrollOffset": {
              "get": function () { return this.scroll_offset; },
              "set": function (value) { this.scroll_offset = value; }
            },
            "secondaryIconActivatable": {
              "get": function () { return this.secondary_icon_activatable; },
              "set": function (value) { this.secondary_icon_activatable = value; }
            },
            "secondaryIconGicon": {
              "get": function () { return this.secondary_icon_gicon; },
              "set": function (value) { this.secondary_icon_gicon = value; }
            },
            "secondaryIconName": {
              "get": function () { return this.secondary_icon_name; },
              "set": function (value) { this.secondary_icon_name = value; }
            },
            "secondaryIconPixbuf": {
              "get": function () { return this.secondary_icon_pixbuf; },
              "set": function (value) { this.secondary_icon_pixbuf = value; }
            },
            "secondaryIconSensitive": {
              "get": function () { return this.secondary_icon_sensitive; },
              "set": function (value) { this.secondary_icon_sensitive = value; }
            },
            "secondaryIconStock": {
              "get": function () { return this.secondary_icon_stock; },
              "set": function (value) { this.secondary_icon_stock = value; }
            },
            "secondaryIconStorageType": {
              "get": function () { return this.secondary_icon_storage_type; },
              "set": function (value) { this.secondary_icon_storage_type = value; }
            },
            "secondaryIconTooltipMarkup": {
              "get": function () { return this.secondary_icon_tooltip_markup; },
              "set": function (value) { this.secondary_icon_tooltip_markup = value; }
            },
            "secondaryIconTooltipText": {
              "get": function () { return this.secondary_icon_tooltip_text; },
              "set": function (value) { this.secondary_icon_tooltip_text = value; }
            },
            "selectionBound": {
              "get": function () { return this.selection_bound; },
              "set": function (value) { this.selection_bound = value; }
            },
            "shadowType": {
              "get": function () { return this.shadow_type; },
              "set": function (value) { this.shadow_type = value; }
            },
            "textLength": {
              "get": function () { return this.text_length; },
              "set": function (value) { this.text_length = value; }
            },
            "truncateMultiline": {
              "get": function () { return this.truncate_multiline; },
              "set": function (value) { this.truncate_multiline = value; }
            },
            "widthChars": {
              "get": function () { return this.width_chars; },
              "set": function (value) { this.width_chars = value; }
            }
          },
          "static": {}
        },
        "EntryAccessible": {
          "prototype": {},
          "static": {}
        },
        "EntryBuffer": {
          "prototype": {
            "deleteText": {
              "value": function () { return this.delete_text.apply(this, arguments); }
            },
            "emitDeletedText": {
              "value": function () { return this.emit_deleted_text.apply(this, arguments); }
            },
            "emitInsertedText": {
              "value": function () { return this.emit_inserted_text.apply(this, arguments); }
            },
            "getBytes": {
              "value": function () { return this.get_bytes.apply(this, arguments); }
            },
            "getLength": {
              "value": function () { return this.get_length.apply(this, arguments); }
            },
            "getMaxLength": {
              "value": function () { return this.get_max_length.apply(this, arguments); }
            },
            "getText": {
              "value": function () { return this.get_text.apply(this, arguments); }
            },
            "insertText": {
              "value": function () { return this.insert_text.apply(this, arguments); }
            },
            "setMaxLength": {
              "value": function () { return this.set_max_length.apply(this, arguments); }
            },
            "setText": {
              "value": function () { return this.set_text.apply(this, arguments); }
            },
            "maxLength": {
              "get": function () { return this.max_length; },
              "set": function (value) { this.max_length = value; }
            }
          },
          "static": {}
        },
        "EntryCompletion": {
          "prototype": {
            "computePrefix": {
              "value": function () { return this.compute_prefix.apply(this, arguments); }
            },
            "deleteAction": {
              "value": function () { return this.delete_action.apply(this, arguments); }
            },
            "getCompletionPrefix": {
              "value": function () { return this.get_completion_prefix.apply(this, arguments); }
            },
            "getEntry": {
              "value": function () { return this.get_entry.apply(this, arguments); }
            },
            "getInlineCompletion": {
              "value": function () { return this.get_inline_completion.apply(this, arguments); }
            },
            "getInlineSelection": {
              "value": function () { return this.get_inline_selection.apply(this, arguments); }
            },
            "getMinimumKeyLength": {
              "value": function () { return this.get_minimum_key_length.apply(this, arguments); }
            },
            "getModel": {
              "value": function () { return this.get_model.apply(this, arguments); }
            },
            "getPopupCompletion": {
              "value": function () { return this.get_popup_completion.apply(this, arguments); }
            },
            "getPopupSetWidth": {
              "value": function () { return this.get_popup_set_width.apply(this, arguments); }
            },
            "getPopupSingleMatch": {
              "value": function () { return this.get_popup_single_match.apply(this, arguments); }
            },
            "getTextColumn": {
              "value": function () { return this.get_text_column.apply(this, arguments); }
            },
            "insertActionMarkup": {
              "value": function () { return this.insert_action_markup.apply(this, arguments); }
            },
            "insertActionText": {
              "value": function () { return this.insert_action_text.apply(this, arguments); }
            },
            "insertPrefix": {
              "value": function () { return this.insert_prefix.apply(this, arguments); }
            },
            "setInlineCompletion": {
              "value": function () { return this.set_inline_completion.apply(this, arguments); }
            },
            "setInlineSelection": {
              "value": function () { return this.set_inline_selection.apply(this, arguments); }
            },
            "setMatchFunc": {
              "value": function () { return this.set_match_func.apply(this, arguments); }
            },
            "setMinimumKeyLength": {
              "value": function () { return this.set_minimum_key_length.apply(this, arguments); }
            },
            "setModel": {
              "value": function () { return this.set_model.apply(this, arguments); }
            },
            "setPopupCompletion": {
              "value": function () { return this.set_popup_completion.apply(this, arguments); }
            },
            "setPopupSetWidth": {
              "value": function () { return this.set_popup_set_width.apply(this, arguments); }
            },
            "setPopupSingleMatch": {
              "value": function () { return this.set_popup_single_match.apply(this, arguments); }
            },
            "setTextColumn": {
              "value": function () { return this.set_text_column.apply(this, arguments); }
            },
            "cellArea": {
              "get": function () { return this.cell_area; },
              "set": function (value) { this.cell_area = value; }
            },
            "inlineCompletion": {
              "get": function () { return this.inline_completion; },
              "set": function (value) { this.inline_completion = value; }
            },
            "inlineSelection": {
              "get": function () { return this.inline_selection; },
              "set": function (value) { this.inline_selection = value; }
            },
            "minimumKeyLength": {
              "get": function () { return this.minimum_key_length; },
              "set": function (value) { this.minimum_key_length = value; }
            },
            "popupCompletion": {
              "get": function () { return this.popup_completion; },
              "set": function (value) { this.popup_completion = value; }
            },
            "popupSetWidth": {
              "get": function () { return this.popup_set_width; },
              "set": function (value) { this.popup_set_width = value; }
            },
            "popupSingleMatch": {
              "get": function () { return this.popup_single_match; },
              "set": function (value) { this.popup_single_match = value; }
            },
            "textColumn": {
              "get": function () { return this.text_column; },
              "set": function (value) { this.text_column = value; }
            }
          },
          "static": {}
        },
        "EntryIconAccessible": {
          "prototype": {},
          "static": {}
        },
        "EventBox": {
          "prototype": {
            "getAboveChild": {
              "value": function () { return this.get_above_child.apply(this, arguments); }
            },
            "getVisibleWindow": {
              "value": function () { return this.get_visible_window.apply(this, arguments); }
            },
            "setAboveChild": {
              "value": function () { return this.set_above_child.apply(this, arguments); }
            },
            "setVisibleWindow": {
              "value": function () { return this.set_visible_window.apply(this, arguments); }
            },
            "aboveChild": {
              "get": function () { return this.above_child; },
              "set": function (value) { this.above_child = value; }
            },
            "visibleWindow": {
              "get": function () { return this.visible_window; },
              "set": function (value) { this.visible_window = value; }
            }
          },
          "static": {}
        },
        "EventController": {
          "prototype": {
            "getPropagationPhase": {
              "value": function () { return this.get_propagation_phase.apply(this, arguments); }
            },
            "getWidget": {
              "value": function () { return this.get_widget.apply(this, arguments); }
            },
            "handleEvent": {
              "value": function () { return this.handle_event.apply(this, arguments); }
            },
            "setPropagationPhase": {
              "value": function () { return this.set_propagation_phase.apply(this, arguments); }
            },
            "propagationPhase": {
              "get": function () { return this.propagation_phase; },
              "set": function (value) { this.propagation_phase = value; }
            }
          },
          "static": {}
        },
        "Expander": {
          "prototype": {
            "getExpanded": {
              "value": function () { return this.get_expanded.apply(this, arguments); }
            },
            "getLabel": {
              "value": function () { return this.get_label.apply(this, arguments); }
            },
            "getLabelFill": {
              "value": function () { return this.get_label_fill.apply(this, arguments); }
            },
            "getLabelWidget": {
              "value": function () { return this.get_label_widget.apply(this, arguments); }
            },
            "getResizeToplevel": {
              "value": function () { return this.get_resize_toplevel.apply(this, arguments); }
            },
            "getSpacing": {
              "value": function () { return this.get_spacing.apply(this, arguments); }
            },
            "getUseMarkup": {
              "value": function () { return this.get_use_markup.apply(this, arguments); }
            },
            "getUseUnderline": {
              "value": function () { return this.get_use_underline.apply(this, arguments); }
            },
            "setExpanded": {
              "value": function () { return this.set_expanded.apply(this, arguments); }
            },
            "setLabel": {
              "value": function () { return this.set_label.apply(this, arguments); }
            },
            "setLabelFill": {
              "value": function () { return this.set_label_fill.apply(this, arguments); }
            },
            "setLabelWidget": {
              "value": function () { return this.set_label_widget.apply(this, arguments); }
            },
            "setResizeToplevel": {
              "value": function () { return this.set_resize_toplevel.apply(this, arguments); }
            },
            "setSpacing": {
              "value": function () { return this.set_spacing.apply(this, arguments); }
            },
            "setUseMarkup": {
              "value": function () { return this.set_use_markup.apply(this, arguments); }
            },
            "setUseUnderline": {
              "value": function () { return this.set_use_underline.apply(this, arguments); }
            },
            "labelFill": {
              "get": function () { return this.label_fill; },
              "set": function (value) { this.label_fill = value; }
            },
            "labelWidget": {
              "get": function () { return this.label_widget; },
              "set": function (value) { this.label_widget = value; }
            },
            "resizeToplevel": {
              "get": function () { return this.resize_toplevel; },
              "set": function (value) { this.resize_toplevel = value; }
            },
            "useMarkup": {
              "get": function () { return this.use_markup; },
              "set": function (value) { this.use_markup = value; }
            },
            "useUnderline": {
              "get": function () { return this.use_underline; },
              "set": function (value) { this.use_underline = value; }
            }
          },
          "static": {}
        },
        "ExpanderAccessible": {
          "prototype": {},
          "static": {}
        },
        "FileChooserButton": {
          "prototype": {
            "getFocusOnClick": {
              "value": function () { return this.get_focus_on_click.apply(this, arguments); }
            },
            "getTitle": {
              "value": function () { return this.get_title.apply(this, arguments); }
            },
            "getWidthChars": {
              "value": function () { return this.get_width_chars.apply(this, arguments); }
            },
            "setFocusOnClick": {
              "value": function () { return this.set_focus_on_click.apply(this, arguments); }
            },
            "setTitle": {
              "value": function () { return this.set_title.apply(this, arguments); }
            },
            "setWidthChars": {
              "value": function () { return this.set_width_chars.apply(this, arguments); }
            },
            "focusOnClick": {
              "get": function () { return this.focus_on_click; },
              "set": function (value) { this.focus_on_click = value; }
            },
            "widthChars": {
              "get": function () { return this.width_chars; },
              "set": function (value) { this.width_chars = value; }
            }
          },
          "static": {}
        },
        "FileChooserDialog": {
          "prototype": {},
          "static": {}
        },
        "FileChooserWidget": {
          "prototype": {
            "searchMode": {
              "get": function () { return this.search_mode; },
              "set": function (value) { this.search_mode = value; }
            }
          },
          "static": {}
        },
        "FileFilter": {
          "prototype": {
            "addCustom": {
              "value": function () { return this.add_custom.apply(this, arguments); }
            },
            "addMimeType": {
              "value": function () { return this.add_mime_type.apply(this, arguments); }
            },
            "addPattern": {
              "value": function () { return this.add_pattern.apply(this, arguments); }
            },
            "addPixbufFormats": {
              "value": function () { return this.add_pixbuf_formats.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getNeeded": {
              "value": function () { return this.get_needed.apply(this, arguments); }
            },
            "setName": {
              "value": function () { return this.set_name.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Fixed": {
          "prototype": {},
          "static": {}
        },
        "FlowBox": {
          "prototype": {
            "bindModel": {
              "value": function () { return this.bind_model.apply(this, arguments); }
            },
            "getActivateOnSingleClick": {
              "value": function () { return this.get_activate_on_single_click.apply(this, arguments); }
            },
            "getChildAtIndex": {
              "value": function () { return this.get_child_at_index.apply(this, arguments); }
            },
            "getColumnSpacing": {
              "value": function () { return this.get_column_spacing.apply(this, arguments); }
            },
            "getHomogeneous": {
              "value": function () { return this.get_homogeneous.apply(this, arguments); }
            },
            "getMaxChildrenPerLine": {
              "value": function () { return this.get_max_children_per_line.apply(this, arguments); }
            },
            "getMinChildrenPerLine": {
              "value": function () { return this.get_min_children_per_line.apply(this, arguments); }
            },
            "getRowSpacing": {
              "value": function () { return this.get_row_spacing.apply(this, arguments); }
            },
            "getSelectedChildren": {
              "value": function () { return this.get_selected_children.apply(this, arguments); }
            },
            "getSelectionMode": {
              "value": function () { return this.get_selection_mode.apply(this, arguments); }
            },
            "invalidateFilter": {
              "value": function () { return this.invalidate_filter.apply(this, arguments); }
            },
            "invalidateSort": {
              "value": function () { return this.invalidate_sort.apply(this, arguments); }
            },
            "selectAll": {
              "value": function () { return this.select_all.apply(this, arguments); }
            },
            "selectChild": {
              "value": function () { return this.select_child.apply(this, arguments); }
            },
            "selectedForeach": {
              "value": function () { return this.selected_foreach.apply(this, arguments); }
            },
            "setActivateOnSingleClick": {
              "value": function () { return this.set_activate_on_single_click.apply(this, arguments); }
            },
            "setColumnSpacing": {
              "value": function () { return this.set_column_spacing.apply(this, arguments); }
            },
            "setFilterFunc": {
              "value": function () { return this.set_filter_func.apply(this, arguments); }
            },
            "setHadjustment": {
              "value": function () { return this.set_hadjustment.apply(this, arguments); }
            },
            "setHomogeneous": {
              "value": function () { return this.set_homogeneous.apply(this, arguments); }
            },
            "setMaxChildrenPerLine": {
              "value": function () { return this.set_max_children_per_line.apply(this, arguments); }
            },
            "setMinChildrenPerLine": {
              "value": function () { return this.set_min_children_per_line.apply(this, arguments); }
            },
            "setRowSpacing": {
              "value": function () { return this.set_row_spacing.apply(this, arguments); }
            },
            "setSelectionMode": {
              "value": function () { return this.set_selection_mode.apply(this, arguments); }
            },
            "setSortFunc": {
              "value": function () { return this.set_sort_func.apply(this, arguments); }
            },
            "setVadjustment": {
              "value": function () { return this.set_vadjustment.apply(this, arguments); }
            },
            "unselectAll": {
              "value": function () { return this.unselect_all.apply(this, arguments); }
            },
            "unselectChild": {
              "value": function () { return this.unselect_child.apply(this, arguments); }
            },
            "activateOnSingleClick": {
              "get": function () { return this.activate_on_single_click; },
              "set": function (value) { this.activate_on_single_click = value; }
            },
            "columnSpacing": {
              "get": function () { return this.column_spacing; },
              "set": function (value) { this.column_spacing = value; }
            },
            "maxChildrenPerLine": {
              "get": function () { return this.max_children_per_line; },
              "set": function (value) { this.max_children_per_line = value; }
            },
            "minChildrenPerLine": {
              "get": function () { return this.min_children_per_line; },
              "set": function (value) { this.min_children_per_line = value; }
            },
            "rowSpacing": {
              "get": function () { return this.row_spacing; },
              "set": function (value) { this.row_spacing = value; }
            },
            "selectionMode": {
              "get": function () { return this.selection_mode; },
              "set": function (value) { this.selection_mode = value; }
            }
          },
          "static": {}
        },
        "FlowBoxAccessible": {
          "prototype": {},
          "static": {}
        },
        "FlowBoxChild": {
          "prototype": {
            "getIndex": {
              "value": function () { return this.get_index.apply(this, arguments); }
            },
            "isSelected": {
              "value": function () { return this.is_selected.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "FlowBoxChildAccessible": {
          "prototype": {},
          "static": {}
        },
        "FontButton": {
          "prototype": {
            "getFontName": {
              "value": function () { return this.get_font_name.apply(this, arguments); }
            },
            "getShowSize": {
              "value": function () { return this.get_show_size.apply(this, arguments); }
            },
            "getShowStyle": {
              "value": function () { return this.get_show_style.apply(this, arguments); }
            },
            "getTitle": {
              "value": function () { return this.get_title.apply(this, arguments); }
            },
            "getUseFont": {
              "value": function () { return this.get_use_font.apply(this, arguments); }
            },
            "getUseSize": {
              "value": function () { return this.get_use_size.apply(this, arguments); }
            },
            "setFontName": {
              "value": function () { return this.set_font_name.apply(this, arguments); }
            },
            "setShowSize": {
              "value": function () { return this.set_show_size.apply(this, arguments); }
            },
            "setShowStyle": {
              "value": function () { return this.set_show_style.apply(this, arguments); }
            },
            "setTitle": {
              "value": function () { return this.set_title.apply(this, arguments); }
            },
            "setUseFont": {
              "value": function () { return this.set_use_font.apply(this, arguments); }
            },
            "setUseSize": {
              "value": function () { return this.set_use_size.apply(this, arguments); }
            },
            "fontName": {
              "get": function () { return this.font_name; },
              "set": function (value) { this.font_name = value; }
            },
            "showSize": {
              "get": function () { return this.show_size; },
              "set": function (value) { this.show_size = value; }
            },
            "showStyle": {
              "get": function () { return this.show_style; },
              "set": function (value) { this.show_style = value; }
            },
            "useFont": {
              "get": function () { return this.use_font; },
              "set": function (value) { this.use_font = value; }
            },
            "useSize": {
              "get": function () { return this.use_size; },
              "set": function (value) { this.use_size = value; }
            }
          },
          "static": {}
        },
        "FontChooserDialog": {
          "prototype": {},
          "static": {}
        },
        "FontChooserWidget": {
          "prototype": {},
          "static": {}
        },
        "FontSelection": {
          "prototype": {
            "getFace": {
              "value": function () { return this.get_face.apply(this, arguments); }
            },
            "getFaceList": {
              "value": function () { return this.get_face_list.apply(this, arguments); }
            },
            "getFamily": {
              "value": function () { return this.get_family.apply(this, arguments); }
            },
            "getFamilyList": {
              "value": function () { return this.get_family_list.apply(this, arguments); }
            },
            "getFontName": {
              "value": function () { return this.get_font_name.apply(this, arguments); }
            },
            "getPreviewEntry": {
              "value": function () { return this.get_preview_entry.apply(this, arguments); }
            },
            "getPreviewText": {
              "value": function () { return this.get_preview_text.apply(this, arguments); }
            },
            "getSize": {
              "value": function () { return this.get_size.apply(this, arguments); }
            },
            "getSizeEntry": {
              "value": function () { return this.get_size_entry.apply(this, arguments); }
            },
            "getSizeList": {
              "value": function () { return this.get_size_list.apply(this, arguments); }
            },
            "setFontName": {
              "value": function () { return this.set_font_name.apply(this, arguments); }
            },
            "setPreviewText": {
              "value": function () { return this.set_preview_text.apply(this, arguments); }
            },
            "fontName": {
              "get": function () { return this.font_name; },
              "set": function (value) { this.font_name = value; }
            },
            "previewText": {
              "get": function () { return this.preview_text; },
              "set": function (value) { this.preview_text = value; }
            }
          },
          "static": {}
        },
        "FontSelectionDialog": {
          "prototype": {
            "getCancelButton": {
              "value": function () { return this.get_cancel_button.apply(this, arguments); }
            },
            "getFontName": {
              "value": function () { return this.get_font_name.apply(this, arguments); }
            },
            "getFontSelection": {
              "value": function () { return this.get_font_selection.apply(this, arguments); }
            },
            "getOkButton": {
              "value": function () { return this.get_ok_button.apply(this, arguments); }
            },
            "getPreviewText": {
              "value": function () { return this.get_preview_text.apply(this, arguments); }
            },
            "setFontName": {
              "value": function () { return this.set_font_name.apply(this, arguments); }
            },
            "setPreviewText": {
              "value": function () { return this.set_preview_text.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Frame": {
          "prototype": {
            "getLabel": {
              "value": function () { return this.get_label.apply(this, arguments); }
            },
            "getLabelAlign": {
              "value": function () { return this.get_label_align.apply(this, arguments); }
            },
            "getLabelWidget": {
              "value": function () { return this.get_label_widget.apply(this, arguments); }
            },
            "getShadowType": {
              "value": function () { return this.get_shadow_type.apply(this, arguments); }
            },
            "setLabel": {
              "value": function () { return this.set_label.apply(this, arguments); }
            },
            "setLabelAlign": {
              "value": function () { return this.set_label_align.apply(this, arguments); }
            },
            "setLabelWidget": {
              "value": function () { return this.set_label_widget.apply(this, arguments); }
            },
            "setShadowType": {
              "value": function () { return this.set_shadow_type.apply(this, arguments); }
            },
            "labelWidget": {
              "get": function () { return this.label_widget; },
              "set": function (value) { this.label_widget = value; }
            },
            "labelXalign": {
              "get": function () { return this.label_xalign; },
              "set": function (value) { this.label_xalign = value; }
            },
            "labelYalign": {
              "get": function () { return this.label_yalign; },
              "set": function (value) { this.label_yalign = value; }
            },
            "shadowType": {
              "get": function () { return this.shadow_type; },
              "set": function (value) { this.shadow_type = value; }
            }
          },
          "static": {}
        },
        "FrameAccessible": {
          "prototype": {},
          "static": {}
        },
        "GLArea": {
          "prototype": {
            "attachBuffers": {
              "value": function () { return this.attach_buffers.apply(this, arguments); }
            },
            "getAutoRender": {
              "value": function () { return this.get_auto_render.apply(this, arguments); }
            },
            "getContext": {
              "value": function () { return this.get_context.apply(this, arguments); }
            },
            "getError": {
              "value": function () { return this.get_error.apply(this, arguments); }
            },
            "getHasAlpha": {
              "value": function () { return this.get_has_alpha.apply(this, arguments); }
            },
            "getHasDepthBuffer": {
              "value": function () { return this.get_has_depth_buffer.apply(this, arguments); }
            },
            "getHasStencilBuffer": {
              "value": function () { return this.get_has_stencil_buffer.apply(this, arguments); }
            },
            "getRequiredVersion": {
              "value": function () { return this.get_required_version.apply(this, arguments); }
            },
            "makeCurrent": {
              "value": function () { return this.make_current.apply(this, arguments); }
            },
            "queueRender": {
              "value": function () { return this.queue_render.apply(this, arguments); }
            },
            "setAutoRender": {
              "value": function () { return this.set_auto_render.apply(this, arguments); }
            },
            "setError": {
              "value": function () { return this.set_error.apply(this, arguments); }
            },
            "setHasAlpha": {
              "value": function () { return this.set_has_alpha.apply(this, arguments); }
            },
            "setHasDepthBuffer": {
              "value": function () { return this.set_has_depth_buffer.apply(this, arguments); }
            },
            "setHasStencilBuffer": {
              "value": function () { return this.set_has_stencil_buffer.apply(this, arguments); }
            },
            "setRequiredVersion": {
              "value": function () { return this.set_required_version.apply(this, arguments); }
            },
            "autoRender": {
              "get": function () { return this.auto_render; },
              "set": function (value) { this.auto_render = value; }
            },
            "hasAlpha": {
              "get": function () { return this.has_alpha; },
              "set": function (value) { this.has_alpha = value; }
            },
            "hasDepthBuffer": {
              "get": function () { return this.has_depth_buffer; },
              "set": function (value) { this.has_depth_buffer = value; }
            },
            "hasStencilBuffer": {
              "get": function () { return this.has_stencil_buffer; },
              "set": function (value) { this.has_stencil_buffer = value; }
            }
          },
          "static": {}
        },
        "Gesture": {
          "prototype": {
            "getBoundingBox": {
              "value": function () { return this.get_bounding_box.apply(this, arguments); }
            },
            "getBoundingBoxCenter": {
              "value": function () { return this.get_bounding_box_center.apply(this, arguments); }
            },
            "getDevice": {
              "value": function () { return this.get_device.apply(this, arguments); }
            },
            "getGroup": {
              "value": function () { return this.get_group.apply(this, arguments); }
            },
            "getLastEvent": {
              "value": function () { return this.get_last_event.apply(this, arguments); }
            },
            "getLastUpdatedSequence": {
              "value": function () { return this.get_last_updated_sequence.apply(this, arguments); }
            },
            "getPoint": {
              "value": function () { return this.get_point.apply(this, arguments); }
            },
            "getSequenceState": {
              "value": function () { return this.get_sequence_state.apply(this, arguments); }
            },
            "getSequences": {
              "value": function () { return this.get_sequences.apply(this, arguments); }
            },
            "getWindow": {
              "value": function () { return this.get_window.apply(this, arguments); }
            },
            "handlesSequence": {
              "value": function () { return this.handles_sequence.apply(this, arguments); }
            },
            "isActive": {
              "value": function () { return this.is_active.apply(this, arguments); }
            },
            "isGroupedWith": {
              "value": function () { return this.is_grouped_with.apply(this, arguments); }
            },
            "isRecognized": {
              "value": function () { return this.is_recognized.apply(this, arguments); }
            },
            "setSequenceState": {
              "value": function () { return this.set_sequence_state.apply(this, arguments); }
            },
            "setState": {
              "value": function () { return this.set_state.apply(this, arguments); }
            },
            "setWindow": {
              "value": function () { return this.set_window.apply(this, arguments); }
            },
            "nPoints": {
              "get": function () { return this.n_points; },
              "set": function (value) { this.n_points = value; }
            }
          },
          "static": {}
        },
        "GestureDrag": {
          "prototype": {
            "getOffset": {
              "value": function () { return this.get_offset.apply(this, arguments); }
            },
            "getStartPoint": {
              "value": function () { return this.get_start_point.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "GestureLongPress": {
          "prototype": {
            "delayFactor": {
              "get": function () { return this.delay_factor; },
              "set": function (value) { this.delay_factor = value; }
            }
          },
          "static": {}
        },
        "GestureMultiPress": {
          "prototype": {
            "getArea": {
              "value": function () { return this.get_area.apply(this, arguments); }
            },
            "setArea": {
              "value": function () { return this.set_area.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "GesturePan": {
          "prototype": {
            "getOrientation": {
              "value": function () { return this.get_orientation.apply(this, arguments); }
            },
            "setOrientation": {
              "value": function () { return this.set_orientation.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "GestureRotate": {
          "prototype": {
            "getAngleDelta": {
              "value": function () { return this.get_angle_delta.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "GestureSingle": {
          "prototype": {
            "getButton": {
              "value": function () { return this.get_button.apply(this, arguments); }
            },
            "getCurrentButton": {
              "value": function () { return this.get_current_button.apply(this, arguments); }
            },
            "getCurrentSequence": {
              "value": function () { return this.get_current_sequence.apply(this, arguments); }
            },
            "getExclusive": {
              "value": function () { return this.get_exclusive.apply(this, arguments); }
            },
            "getTouchOnly": {
              "value": function () { return this.get_touch_only.apply(this, arguments); }
            },
            "setButton": {
              "value": function () { return this.set_button.apply(this, arguments); }
            },
            "setExclusive": {
              "value": function () { return this.set_exclusive.apply(this, arguments); }
            },
            "setTouchOnly": {
              "value": function () { return this.set_touch_only.apply(this, arguments); }
            },
            "touchOnly": {
              "get": function () { return this.touch_only; },
              "set": function (value) { this.touch_only = value; }
            }
          },
          "static": {}
        },
        "GestureSwipe": {
          "prototype": {
            "getVelocity": {
              "value": function () { return this.get_velocity.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "GestureZoom": {
          "prototype": {
            "getScaleDelta": {
              "value": function () { return this.get_scale_delta.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Grid": {
          "prototype": {
            "attachNextTo": {
              "value": function () { return this.attach_next_to.apply(this, arguments); }
            },
            "getBaselineRow": {
              "value": function () { return this.get_baseline_row.apply(this, arguments); }
            },
            "getChildAt": {
              "value": function () { return this.get_child_at.apply(this, arguments); }
            },
            "getColumnHomogeneous": {
              "value": function () { return this.get_column_homogeneous.apply(this, arguments); }
            },
            "getColumnSpacing": {
              "value": function () { return this.get_column_spacing.apply(this, arguments); }
            },
            "getRowBaselinePosition": {
              "value": function () { return this.get_row_baseline_position.apply(this, arguments); }
            },
            "getRowHomogeneous": {
              "value": function () { return this.get_row_homogeneous.apply(this, arguments); }
            },
            "getRowSpacing": {
              "value": function () { return this.get_row_spacing.apply(this, arguments); }
            },
            "insertColumn": {
              "value": function () { return this.insert_column.apply(this, arguments); }
            },
            "insertNextTo": {
              "value": function () { return this.insert_next_to.apply(this, arguments); }
            },
            "insertRow": {
              "value": function () { return this.insert_row.apply(this, arguments); }
            },
            "removeColumn": {
              "value": function () { return this.remove_column.apply(this, arguments); }
            },
            "removeRow": {
              "value": function () { return this.remove_row.apply(this, arguments); }
            },
            "setBaselineRow": {
              "value": function () { return this.set_baseline_row.apply(this, arguments); }
            },
            "setColumnHomogeneous": {
              "value": function () { return this.set_column_homogeneous.apply(this, arguments); }
            },
            "setColumnSpacing": {
              "value": function () { return this.set_column_spacing.apply(this, arguments); }
            },
            "setRowBaselinePosition": {
              "value": function () { return this.set_row_baseline_position.apply(this, arguments); }
            },
            "setRowHomogeneous": {
              "value": function () { return this.set_row_homogeneous.apply(this, arguments); }
            },
            "setRowSpacing": {
              "value": function () { return this.set_row_spacing.apply(this, arguments); }
            },
            "baselineRow": {
              "get": function () { return this.baseline_row; },
              "set": function (value) { this.baseline_row = value; }
            },
            "columnHomogeneous": {
              "get": function () { return this.column_homogeneous; },
              "set": function (value) { this.column_homogeneous = value; }
            },
            "columnSpacing": {
              "get": function () { return this.column_spacing; },
              "set": function (value) { this.column_spacing = value; }
            },
            "rowHomogeneous": {
              "get": function () { return this.row_homogeneous; },
              "set": function (value) { this.row_homogeneous = value; }
            },
            "rowSpacing": {
              "get": function () { return this.row_spacing; },
              "set": function (value) { this.row_spacing = value; }
            }
          },
          "static": {}
        },
        "HBox": {
          "prototype": {},
          "static": {}
        },
        "HButtonBox": {
          "prototype": {},
          "static": {}
        },
        "HPaned": {
          "prototype": {},
          "static": {}
        },
        "HSV": {
          "prototype": {
            "getColor": {
              "value": function () { return this.get_color.apply(this, arguments); }
            },
            "getMetrics": {
              "value": function () { return this.get_metrics.apply(this, arguments); }
            },
            "isAdjusting": {
              "value": function () { return this.is_adjusting.apply(this, arguments); }
            },
            "setColor": {
              "value": function () { return this.set_color.apply(this, arguments); }
            },
            "setMetrics": {
              "value": function () { return this.set_metrics.apply(this, arguments); }
            }
          },
          "static": {
            "toRgb": {
              "value": function () { return this.to_rgb.apply(this, arguments); }
            }
          }
        },
        "HScale": {
          "prototype": {},
          "static": {}
        },
        "HScrollbar": {
          "prototype": {},
          "static": {}
        },
        "HSeparator": {
          "prototype": {},
          "static": {}
        },
        "HandleBox": {
          "prototype": {
            "getChildDetached": {
              "value": function () { return this.get_child_detached.apply(this, arguments); }
            },
            "getHandlePosition": {
              "value": function () { return this.get_handle_position.apply(this, arguments); }
            },
            "getShadowType": {
              "value": function () { return this.get_shadow_type.apply(this, arguments); }
            },
            "getSnapEdge": {
              "value": function () { return this.get_snap_edge.apply(this, arguments); }
            },
            "setHandlePosition": {
              "value": function () { return this.set_handle_position.apply(this, arguments); }
            },
            "setShadowType": {
              "value": function () { return this.set_shadow_type.apply(this, arguments); }
            },
            "setSnapEdge": {
              "value": function () { return this.set_snap_edge.apply(this, arguments); }
            },
            "childDetached": {
              "get": function () { return this.child_detached; },
              "set": function (value) { this.child_detached = value; }
            },
            "handlePosition": {
              "get": function () { return this.handle_position; },
              "set": function (value) { this.handle_position = value; }
            },
            "shadowType": {
              "get": function () { return this.shadow_type; },
              "set": function (value) { this.shadow_type = value; }
            },
            "snapEdge": {
              "get": function () { return this.snap_edge; },
              "set": function (value) { this.snap_edge = value; }
            },
            "snapEdgeSet": {
              "get": function () { return this.snap_edge_set; },
              "set": function (value) { this.snap_edge_set = value; }
            }
          },
          "static": {}
        },
        "HeaderBar": {
          "prototype": {
            "getCustomTitle": {
              "value": function () { return this.get_custom_title.apply(this, arguments); }
            },
            "getDecorationLayout": {
              "value": function () { return this.get_decoration_layout.apply(this, arguments); }
            },
            "getHasSubtitle": {
              "value": function () { return this.get_has_subtitle.apply(this, arguments); }
            },
            "getShowCloseButton": {
              "value": function () { return this.get_show_close_button.apply(this, arguments); }
            },
            "getSubtitle": {
              "value": function () { return this.get_subtitle.apply(this, arguments); }
            },
            "getTitle": {
              "value": function () { return this.get_title.apply(this, arguments); }
            },
            "packEnd": {
              "value": function () { return this.pack_end.apply(this, arguments); }
            },
            "packStart": {
              "value": function () { return this.pack_start.apply(this, arguments); }
            },
            "setCustomTitle": {
              "value": function () { return this.set_custom_title.apply(this, arguments); }
            },
            "setDecorationLayout": {
              "value": function () { return this.set_decoration_layout.apply(this, arguments); }
            },
            "setHasSubtitle": {
              "value": function () { return this.set_has_subtitle.apply(this, arguments); }
            },
            "setShowCloseButton": {
              "value": function () { return this.set_show_close_button.apply(this, arguments); }
            },
            "setSubtitle": {
              "value": function () { return this.set_subtitle.apply(this, arguments); }
            },
            "setTitle": {
              "value": function () { return this.set_title.apply(this, arguments); }
            },
            "customTitle": {
              "get": function () { return this.custom_title; },
              "set": function (value) { this.custom_title = value; }
            },
            "decorationLayout": {
              "get": function () { return this.decoration_layout; },
              "set": function (value) { this.decoration_layout = value; }
            },
            "decorationLayoutSet": {
              "get": function () { return this.decoration_layout_set; },
              "set": function (value) { this.decoration_layout_set = value; }
            },
            "hasSubtitle": {
              "get": function () { return this.has_subtitle; },
              "set": function (value) { this.has_subtitle = value; }
            },
            "showCloseButton": {
              "get": function () { return this.show_close_button; },
              "set": function (value) { this.show_close_button = value; }
            }
          },
          "static": {}
        },
        "IMContext": {
          "prototype": {
            "deleteSurrounding": {
              "value": function () { return this.delete_surrounding.apply(this, arguments); }
            },
            "filterKeypress": {
              "value": function () { return this.filter_keypress.apply(this, arguments); }
            },
            "focusIn": {
              "value": function () { return this.focus_in.apply(this, arguments); }
            },
            "focusOut": {
              "value": function () { return this.focus_out.apply(this, arguments); }
            },
            "getPreeditString": {
              "value": function () { return this.get_preedit_string.apply(this, arguments); }
            },
            "getSurrounding": {
              "value": function () { return this.get_surrounding.apply(this, arguments); }
            },
            "setClientWindow": {
              "value": function () { return this.set_client_window.apply(this, arguments); }
            },
            "setCursorLocation": {
              "value": function () { return this.set_cursor_location.apply(this, arguments); }
            },
            "setSurrounding": {
              "value": function () { return this.set_surrounding.apply(this, arguments); }
            },
            "setUsePreedit": {
              "value": function () { return this.set_use_preedit.apply(this, arguments); }
            },
            "inputHints": {
              "get": function () { return this.input_hints; },
              "set": function (value) { this.input_hints = value; }
            },
            "inputPurpose": {
              "get": function () { return this.input_purpose; },
              "set": function (value) { this.input_purpose = value; }
            }
          },
          "static": {}
        },
        "IMContextSimple": {
          "prototype": {
            "addTable": {
              "value": function () { return this.add_table.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "IMMulticontext": {
          "prototype": {
            "appendMenuitems": {
              "value": function () { return this.append_menuitems.apply(this, arguments); }
            },
            "getContextId": {
              "value": function () { return this.get_context_id.apply(this, arguments); }
            },
            "setContextId": {
              "value": function () { return this.set_context_id.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "IconFactory": {
          "prototype": {
            "addDefault": {
              "value": function () { return this.add_default.apply(this, arguments); }
            },
            "removeDefault": {
              "value": function () { return this.remove_default.apply(this, arguments); }
            }
          },
          "static": {
            "lookupDefault": {
              "value": function () { return this.lookup_default.apply(this, arguments); }
            }
          }
        },
        "IconInfo": {
          "prototype": {
            "getAttachPoints": {
              "value": function () { return this.get_attach_points.apply(this, arguments); }
            },
            "getBaseScale": {
              "value": function () { return this.get_base_scale.apply(this, arguments); }
            },
            "getBaseSize": {
              "value": function () { return this.get_base_size.apply(this, arguments); }
            },
            "getBuiltinPixbuf": {
              "value": function () { return this.get_builtin_pixbuf.apply(this, arguments); }
            },
            "getDisplayName": {
              "value": function () { return this.get_display_name.apply(this, arguments); }
            },
            "getEmbeddedRect": {
              "value": function () { return this.get_embedded_rect.apply(this, arguments); }
            },
            "getFilename": {
              "value": function () { return this.get_filename.apply(this, arguments); }
            },
            "isSymbolic": {
              "value": function () { return this.is_symbolic.apply(this, arguments); }
            },
            "loadIcon": {
              "value": function () { return this.load_icon.apply(this, arguments); }
            },
            "loadIconAsync": {
              "value": function () { return this.load_icon_async.apply(this, arguments); }
            },
            "loadIconFinish": {
              "value": function () { return this.load_icon_finish.apply(this, arguments); }
            },
            "loadSurface": {
              "value": function () { return this.load_surface.apply(this, arguments); }
            },
            "loadSymbolic": {
              "value": function () { return this.load_symbolic.apply(this, arguments); }
            },
            "loadSymbolicAsync": {
              "value": function () { return this.load_symbolic_async.apply(this, arguments); }
            },
            "loadSymbolicFinish": {
              "value": function () { return this.load_symbolic_finish.apply(this, arguments); }
            },
            "loadSymbolicForContext": {
              "value": function () { return this.load_symbolic_for_context.apply(this, arguments); }
            },
            "loadSymbolicForContextAsync": {
              "value": function () { return this.load_symbolic_for_context_async.apply(this, arguments); }
            },
            "loadSymbolicForContextFinish": {
              "value": function () { return this.load_symbolic_for_context_finish.apply(this, arguments); }
            },
            "loadSymbolicForStyle": {
              "value": function () { return this.load_symbolic_for_style.apply(this, arguments); }
            },
            "setRawCoordinates": {
              "value": function () { return this.set_raw_coordinates.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "IconTheme": {
          "prototype": {
            "addResourcePath": {
              "value": function () { return this.add_resource_path.apply(this, arguments); }
            },
            "appendSearchPath": {
              "value": function () { return this.append_search_path.apply(this, arguments); }
            },
            "chooseIcon": {
              "value": function () { return this.choose_icon.apply(this, arguments); }
            },
            "chooseIconForScale": {
              "value": function () { return this.choose_icon_for_scale.apply(this, arguments); }
            },
            "getExampleIconName": {
              "value": function () { return this.get_example_icon_name.apply(this, arguments); }
            },
            "getIconSizes": {
              "value": function () { return this.get_icon_sizes.apply(this, arguments); }
            },
            "getSearchPath": {
              "value": function () { return this.get_search_path.apply(this, arguments); }
            },
            "hasIcon": {
              "value": function () { return this.has_icon.apply(this, arguments); }
            },
            "listContexts": {
              "value": function () { return this.list_contexts.apply(this, arguments); }
            },
            "listIcons": {
              "value": function () { return this.list_icons.apply(this, arguments); }
            },
            "loadIcon": {
              "value": function () { return this.load_icon.apply(this, arguments); }
            },
            "loadIconForScale": {
              "value": function () { return this.load_icon_for_scale.apply(this, arguments); }
            },
            "loadSurface": {
              "value": function () { return this.load_surface.apply(this, arguments); }
            },
            "lookupByGicon": {
              "value": function () { return this.lookup_by_gicon.apply(this, arguments); }
            },
            "lookupByGiconForScale": {
              "value": function () { return this.lookup_by_gicon_for_scale.apply(this, arguments); }
            },
            "lookupIcon": {
              "value": function () { return this.lookup_icon.apply(this, arguments); }
            },
            "lookupIconForScale": {
              "value": function () { return this.lookup_icon_for_scale.apply(this, arguments); }
            },
            "prependSearchPath": {
              "value": function () { return this.prepend_search_path.apply(this, arguments); }
            },
            "rescanIfNeeded": {
              "value": function () { return this.rescan_if_needed.apply(this, arguments); }
            },
            "setCustomTheme": {
              "value": function () { return this.set_custom_theme.apply(this, arguments); }
            },
            "setScreen": {
              "value": function () { return this.set_screen.apply(this, arguments); }
            },
            "setSearchPath": {
              "value": function () { return this.set_search_path.apply(this, arguments); }
            }
          },
          "static": {
            "addBuiltinIcon": {
              "value": function () { return this.add_builtin_icon.apply(this, arguments); }
            },
            "getDefault": {
              "value": function () { return this.get_default.apply(this, arguments); }
            },
            "getForScreen": {
              "value": function () { return this.get_for_screen.apply(this, arguments); }
            }
          }
        },
        "IconView": {
          "prototype": {
            "convertWidgetToBinWindowCoords": {
              "value": function () { return this.convert_widget_to_bin_window_coords.apply(this, arguments); }
            },
            "createDragIcon": {
              "value": function () { return this.create_drag_icon.apply(this, arguments); }
            },
            "enableModelDragDest": {
              "value": function () { return this.enable_model_drag_dest.apply(this, arguments); }
            },
            "enableModelDragSource": {
              "value": function () { return this.enable_model_drag_source.apply(this, arguments); }
            },
            "getActivateOnSingleClick": {
              "value": function () { return this.get_activate_on_single_click.apply(this, arguments); }
            },
            "getCellRect": {
              "value": function () { return this.get_cell_rect.apply(this, arguments); }
            },
            "getColumnSpacing": {
              "value": function () { return this.get_column_spacing.apply(this, arguments); }
            },
            "getColumns": {
              "value": function () { return this.get_columns.apply(this, arguments); }
            },
            "getCursor": {
              "value": function () { return this.get_cursor.apply(this, arguments); }
            },
            "getDestItemAtPos": {
              "value": function () { return this.get_dest_item_at_pos.apply(this, arguments); }
            },
            "getDragDestItem": {
              "value": function () { return this.get_drag_dest_item.apply(this, arguments); }
            },
            "getItemAtPos": {
              "value": function () { return this.get_item_at_pos.apply(this, arguments); }
            },
            "getItemColumn": {
              "value": function () { return this.get_item_column.apply(this, arguments); }
            },
            "getItemOrientation": {
              "value": function () { return this.get_item_orientation.apply(this, arguments); }
            },
            "getItemPadding": {
              "value": function () { return this.get_item_padding.apply(this, arguments); }
            },
            "getItemRow": {
              "value": function () { return this.get_item_row.apply(this, arguments); }
            },
            "getItemWidth": {
              "value": function () { return this.get_item_width.apply(this, arguments); }
            },
            "getMargin": {
              "value": function () { return this.get_margin.apply(this, arguments); }
            },
            "getMarkupColumn": {
              "value": function () { return this.get_markup_column.apply(this, arguments); }
            },
            "getModel": {
              "value": function () { return this.get_model.apply(this, arguments); }
            },
            "getPathAtPos": {
              "value": function () { return this.get_path_at_pos.apply(this, arguments); }
            },
            "getPixbufColumn": {
              "value": function () { return this.get_pixbuf_column.apply(this, arguments); }
            },
            "getReorderable": {
              "value": function () { return this.get_reorderable.apply(this, arguments); }
            },
            "getRowSpacing": {
              "value": function () { return this.get_row_spacing.apply(this, arguments); }
            },
            "getSelectedItems": {
              "value": function () { return this.get_selected_items.apply(this, arguments); }
            },
            "getSelectionMode": {
              "value": function () { return this.get_selection_mode.apply(this, arguments); }
            },
            "getSpacing": {
              "value": function () { return this.get_spacing.apply(this, arguments); }
            },
            "getTextColumn": {
              "value": function () { return this.get_text_column.apply(this, arguments); }
            },
            "getTooltipColumn": {
              "value": function () { return this.get_tooltip_column.apply(this, arguments); }
            },
            "getTooltipContext": {
              "value": function () { return this.get_tooltip_context.apply(this, arguments); }
            },
            "getVisibleRange": {
              "value": function () { return this.get_visible_range.apply(this, arguments); }
            },
            "itemActivated": {
              "value": function () { return this.item_activated.apply(this, arguments); }
            },
            "pathIsSelected": {
              "value": function () { return this.path_is_selected.apply(this, arguments); }
            },
            "scrollToPath": {
              "value": function () { return this.scroll_to_path.apply(this, arguments); }
            },
            "selectAll": {
              "value": function () { return this.select_all.apply(this, arguments); }
            },
            "selectPath": {
              "value": function () { return this.select_path.apply(this, arguments); }
            },
            "selectedForeach": {
              "value": function () { return this.selected_foreach.apply(this, arguments); }
            },
            "setActivateOnSingleClick": {
              "value": function () { return this.set_activate_on_single_click.apply(this, arguments); }
            },
            "setColumnSpacing": {
              "value": function () { return this.set_column_spacing.apply(this, arguments); }
            },
            "setColumns": {
              "value": function () { return this.set_columns.apply(this, arguments); }
            },
            "setCursor": {
              "value": function () { return this.set_cursor.apply(this, arguments); }
            },
            "setDragDestItem": {
              "value": function () { return this.set_drag_dest_item.apply(this, arguments); }
            },
            "setItemOrientation": {
              "value": function () { return this.set_item_orientation.apply(this, arguments); }
            },
            "setItemPadding": {
              "value": function () { return this.set_item_padding.apply(this, arguments); }
            },
            "setItemWidth": {
              "value": function () { return this.set_item_width.apply(this, arguments); }
            },
            "setMargin": {
              "value": function () { return this.set_margin.apply(this, arguments); }
            },
            "setMarkupColumn": {
              "value": function () { return this.set_markup_column.apply(this, arguments); }
            },
            "setModel": {
              "value": function () { return this.set_model.apply(this, arguments); }
            },
            "setPixbufColumn": {
              "value": function () { return this.set_pixbuf_column.apply(this, arguments); }
            },
            "setReorderable": {
              "value": function () { return this.set_reorderable.apply(this, arguments); }
            },
            "setRowSpacing": {
              "value": function () { return this.set_row_spacing.apply(this, arguments); }
            },
            "setSelectionMode": {
              "value": function () { return this.set_selection_mode.apply(this, arguments); }
            },
            "setSpacing": {
              "value": function () { return this.set_spacing.apply(this, arguments); }
            },
            "setTextColumn": {
              "value": function () { return this.set_text_column.apply(this, arguments); }
            },
            "setTooltipCell": {
              "value": function () { return this.set_tooltip_cell.apply(this, arguments); }
            },
            "setTooltipColumn": {
              "value": function () { return this.set_tooltip_column.apply(this, arguments); }
            },
            "setTooltipItem": {
              "value": function () { return this.set_tooltip_item.apply(this, arguments); }
            },
            "unselectAll": {
              "value": function () { return this.unselect_all.apply(this, arguments); }
            },
            "unselectPath": {
              "value": function () { return this.unselect_path.apply(this, arguments); }
            },
            "unsetModelDragDest": {
              "value": function () { return this.unset_model_drag_dest.apply(this, arguments); }
            },
            "unsetModelDragSource": {
              "value": function () { return this.unset_model_drag_source.apply(this, arguments); }
            },
            "activateOnSingleClick": {
              "get": function () { return this.activate_on_single_click; },
              "set": function (value) { this.activate_on_single_click = value; }
            },
            "cellArea": {
              "get": function () { return this.cell_area; },
              "set": function (value) { this.cell_area = value; }
            },
            "columnSpacing": {
              "get": function () { return this.column_spacing; },
              "set": function (value) { this.column_spacing = value; }
            },
            "itemOrientation": {
              "get": function () { return this.item_orientation; },
              "set": function (value) { this.item_orientation = value; }
            },
            "itemPadding": {
              "get": function () { return this.item_padding; },
              "set": function (value) { this.item_padding = value; }
            },
            "itemWidth": {
              "get": function () { return this.item_width; },
              "set": function (value) { this.item_width = value; }
            },
            "markupColumn": {
              "get": function () { return this.markup_column; },
              "set": function (value) { this.markup_column = value; }
            },
            "pixbufColumn": {
              "get": function () { return this.pixbuf_column; },
              "set": function (value) { this.pixbuf_column = value; }
            },
            "rowSpacing": {
              "get": function () { return this.row_spacing; },
              "set": function (value) { this.row_spacing = value; }
            },
            "selectionMode": {
              "get": function () { return this.selection_mode; },
              "set": function (value) { this.selection_mode = value; }
            },
            "textColumn": {
              "get": function () { return this.text_column; },
              "set": function (value) { this.text_column = value; }
            },
            "tooltipColumn": {
              "get": function () { return this.tooltip_column; },
              "set": function (value) { this.tooltip_column = value; }
            }
          },
          "static": {}
        },
        "IconViewAccessible": {
          "prototype": {},
          "static": {}
        },
        "Image": {
          "prototype": {
            "getAnimation": {
              "value": function () { return this.get_animation.apply(this, arguments); }
            },
            "getGicon": {
              "value": function () { return this.get_gicon.apply(this, arguments); }
            },
            "getIconName": {
              "value": function () { return this.get_icon_name.apply(this, arguments); }
            },
            "getIconSet": {
              "value": function () { return this.get_icon_set.apply(this, arguments); }
            },
            "getPixbuf": {
              "value": function () { return this.get_pixbuf.apply(this, arguments); }
            },
            "getPixelSize": {
              "value": function () { return this.get_pixel_size.apply(this, arguments); }
            },
            "getStock": {
              "value": function () { return this.get_stock.apply(this, arguments); }
            },
            "getStorageType": {
              "value": function () { return this.get_storage_type.apply(this, arguments); }
            },
            "setFromAnimation": {
              "value": function () { return this.set_from_animation.apply(this, arguments); }
            },
            "setFromFile": {
              "value": function () { return this.set_from_file.apply(this, arguments); }
            },
            "setFromGicon": {
              "value": function () { return this.set_from_gicon.apply(this, arguments); }
            },
            "setFromIconName": {
              "value": function () { return this.set_from_icon_name.apply(this, arguments); }
            },
            "setFromIconSet": {
              "value": function () { return this.set_from_icon_set.apply(this, arguments); }
            },
            "setFromPixbuf": {
              "value": function () { return this.set_from_pixbuf.apply(this, arguments); }
            },
            "setFromResource": {
              "value": function () { return this.set_from_resource.apply(this, arguments); }
            },
            "setFromStock": {
              "value": function () { return this.set_from_stock.apply(this, arguments); }
            },
            "setFromSurface": {
              "value": function () { return this.set_from_surface.apply(this, arguments); }
            },
            "setPixelSize": {
              "value": function () { return this.set_pixel_size.apply(this, arguments); }
            },
            "iconName": {
              "get": function () { return this.icon_name; },
              "set": function (value) { this.icon_name = value; }
            },
            "iconSet": {
              "get": function () { return this.icon_set; },
              "set": function (value) { this.icon_set = value; }
            },
            "iconSize": {
              "get": function () { return this.icon_size; },
              "set": function (value) { this.icon_size = value; }
            },
            "pixbufAnimation": {
              "get": function () { return this.pixbuf_animation; },
              "set": function (value) { this.pixbuf_animation = value; }
            },
            "pixelSize": {
              "get": function () { return this.pixel_size; },
              "set": function (value) { this.pixel_size = value; }
            },
            "storageType": {
              "get": function () { return this.storage_type; },
              "set": function (value) { this.storage_type = value; }
            },
            "useFallback": {
              "get": function () { return this.use_fallback; },
              "set": function (value) { this.use_fallback = value; }
            }
          },
          "static": {}
        },
        "ImageAccessible": {
          "prototype": {},
          "static": {}
        },
        "ImageCellAccessible": {
          "prototype": {},
          "static": {}
        },
        "ImageMenuItem": {
          "prototype": {
            "getAlwaysShowImage": {
              "value": function () { return this.get_always_show_image.apply(this, arguments); }
            },
            "getImage": {
              "value": function () { return this.get_image.apply(this, arguments); }
            },
            "getUseStock": {
              "value": function () { return this.get_use_stock.apply(this, arguments); }
            },
            "setAccelGroup": {
              "value": function () { return this.set_accel_group.apply(this, arguments); }
            },
            "setAlwaysShowImage": {
              "value": function () { return this.set_always_show_image.apply(this, arguments); }
            },
            "setImage": {
              "value": function () { return this.set_image.apply(this, arguments); }
            },
            "setUseStock": {
              "value": function () { return this.set_use_stock.apply(this, arguments); }
            },
            "accelGroup": {
              "get": function () { return this.accel_group; },
              "set": function (value) { this.accel_group = value; }
            },
            "alwaysShowImage": {
              "get": function () { return this.always_show_image; },
              "set": function (value) { this.always_show_image = value; }
            },
            "useStock": {
              "get": function () { return this.use_stock; },
              "set": function (value) { this.use_stock = value; }
            }
          },
          "static": {}
        },
        "InfoBar": {
          "prototype": {
            "addActionWidget": {
              "value": function () { return this.add_action_widget.apply(this, arguments); }
            },
            "addButton": {
              "value": function () { return this.add_button.apply(this, arguments); }
            },
            "addButtons": {
              "value": function () { return this.add_buttons.apply(this, arguments); }
            },
            "getActionArea": {
              "value": function () { return this.get_action_area.apply(this, arguments); }
            },
            "getContentArea": {
              "value": function () { return this.get_content_area.apply(this, arguments); }
            },
            "getMessageType": {
              "value": function () { return this.get_message_type.apply(this, arguments); }
            },
            "getShowCloseButton": {
              "value": function () { return this.get_show_close_button.apply(this, arguments); }
            },
            "setDefaultResponse": {
              "value": function () { return this.set_default_response.apply(this, arguments); }
            },
            "setMessageType": {
              "value": function () { return this.set_message_type.apply(this, arguments); }
            },
            "setResponseSensitive": {
              "value": function () { return this.set_response_sensitive.apply(this, arguments); }
            },
            "setShowCloseButton": {
              "value": function () { return this.set_show_close_button.apply(this, arguments); }
            },
            "messageType": {
              "get": function () { return this.message_type; },
              "set": function (value) { this.message_type = value; }
            },
            "showCloseButton": {
              "get": function () { return this.show_close_button; },
              "set": function (value) { this.show_close_button = value; }
            }
          },
          "static": {}
        },
        "Invisible": {
          "prototype": {
            "getScreen": {
              "value": function () { return this.get_screen.apply(this, arguments); }
            },
            "setScreen": {
              "value": function () { return this.set_screen.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Label": {
          "prototype": {
            "getAngle": {
              "value": function () { return this.get_angle.apply(this, arguments); }
            },
            "getAttributes": {
              "value": function () { return this.get_attributes.apply(this, arguments); }
            },
            "getCurrentUri": {
              "value": function () { return this.get_current_uri.apply(this, arguments); }
            },
            "getEllipsize": {
              "value": function () { return this.get_ellipsize.apply(this, arguments); }
            },
            "getJustify": {
              "value": function () { return this.get_justify.apply(this, arguments); }
            },
            "getLabel": {
              "value": function () { return this.get_label.apply(this, arguments); }
            },
            "getLayout": {
              "value": function () { return this.get_layout.apply(this, arguments); }
            },
            "getLayoutOffsets": {
              "value": function () { return this.get_layout_offsets.apply(this, arguments); }
            },
            "getLineWrap": {
              "value": function () { return this.get_line_wrap.apply(this, arguments); }
            },
            "getLineWrapMode": {
              "value": function () { return this.get_line_wrap_mode.apply(this, arguments); }
            },
            "getLines": {
              "value": function () { return this.get_lines.apply(this, arguments); }
            },
            "getMaxWidthChars": {
              "value": function () { return this.get_max_width_chars.apply(this, arguments); }
            },
            "getMnemonicKeyval": {
              "value": function () { return this.get_mnemonic_keyval.apply(this, arguments); }
            },
            "getMnemonicWidget": {
              "value": function () { return this.get_mnemonic_widget.apply(this, arguments); }
            },
            "getSelectable": {
              "value": function () { return this.get_selectable.apply(this, arguments); }
            },
            "getSelectionBounds": {
              "value": function () { return this.get_selection_bounds.apply(this, arguments); }
            },
            "getSingleLineMode": {
              "value": function () { return this.get_single_line_mode.apply(this, arguments); }
            },
            "getText": {
              "value": function () { return this.get_text.apply(this, arguments); }
            },
            "getTrackVisitedLinks": {
              "value": function () { return this.get_track_visited_links.apply(this, arguments); }
            },
            "getUseMarkup": {
              "value": function () { return this.get_use_markup.apply(this, arguments); }
            },
            "getUseUnderline": {
              "value": function () { return this.get_use_underline.apply(this, arguments); }
            },
            "getWidthChars": {
              "value": function () { return this.get_width_chars.apply(this, arguments); }
            },
            "getXalign": {
              "value": function () { return this.get_xalign.apply(this, arguments); }
            },
            "getYalign": {
              "value": function () { return this.get_yalign.apply(this, arguments); }
            },
            "selectRegion": {
              "value": function () { return this.select_region.apply(this, arguments); }
            },
            "setAngle": {
              "value": function () { return this.set_angle.apply(this, arguments); }
            },
            "setAttributes": {
              "value": function () { return this.set_attributes.apply(this, arguments); }
            },
            "setEllipsize": {
              "value": function () { return this.set_ellipsize.apply(this, arguments); }
            },
            "setJustify": {
              "value": function () { return this.set_justify.apply(this, arguments); }
            },
            "setLabel": {
              "value": function () { return this.set_label.apply(this, arguments); }
            },
            "setLineWrap": {
              "value": function () { return this.set_line_wrap.apply(this, arguments); }
            },
            "setLineWrapMode": {
              "value": function () { return this.set_line_wrap_mode.apply(this, arguments); }
            },
            "setLines": {
              "value": function () { return this.set_lines.apply(this, arguments); }
            },
            "setMarkup": {
              "value": function () { return this.set_markup.apply(this, arguments); }
            },
            "setMarkupWithMnemonic": {
              "value": function () { return this.set_markup_with_mnemonic.apply(this, arguments); }
            },
            "setMaxWidthChars": {
              "value": function () { return this.set_max_width_chars.apply(this, arguments); }
            },
            "setMnemonicWidget": {
              "value": function () { return this.set_mnemonic_widget.apply(this, arguments); }
            },
            "setPattern": {
              "value": function () { return this.set_pattern.apply(this, arguments); }
            },
            "setSelectable": {
              "value": function () { return this.set_selectable.apply(this, arguments); }
            },
            "setSingleLineMode": {
              "value": function () { return this.set_single_line_mode.apply(this, arguments); }
            },
            "setText": {
              "value": function () { return this.set_text.apply(this, arguments); }
            },
            "setTextWithMnemonic": {
              "value": function () { return this.set_text_with_mnemonic.apply(this, arguments); }
            },
            "setTrackVisitedLinks": {
              "value": function () { return this.set_track_visited_links.apply(this, arguments); }
            },
            "setUseMarkup": {
              "value": function () { return this.set_use_markup.apply(this, arguments); }
            },
            "setUseUnderline": {
              "value": function () { return this.set_use_underline.apply(this, arguments); }
            },
            "setWidthChars": {
              "value": function () { return this.set_width_chars.apply(this, arguments); }
            },
            "setXalign": {
              "value": function () { return this.set_xalign.apply(this, arguments); }
            },
            "setYalign": {
              "value": function () { return this.set_yalign.apply(this, arguments); }
            },
            "cursorPosition": {
              "get": function () { return this.cursor_position; },
              "set": function (value) { this.cursor_position = value; }
            },
            "maxWidthChars": {
              "get": function () { return this.max_width_chars; },
              "set": function (value) { this.max_width_chars = value; }
            },
            "mnemonicKeyval": {
              "get": function () { return this.mnemonic_keyval; },
              "set": function (value) { this.mnemonic_keyval = value; }
            },
            "mnemonicWidget": {
              "get": function () { return this.mnemonic_widget; },
              "set": function (value) { this.mnemonic_widget = value; }
            },
            "selectionBound": {
              "get": function () { return this.selection_bound; },
              "set": function (value) { this.selection_bound = value; }
            },
            "singleLineMode": {
              "get": function () { return this.single_line_mode; },
              "set": function (value) { this.single_line_mode = value; }
            },
            "trackVisitedLinks": {
              "get": function () { return this.track_visited_links; },
              "set": function (value) { this.track_visited_links = value; }
            },
            "useMarkup": {
              "get": function () { return this.use_markup; },
              "set": function (value) { this.use_markup = value; }
            },
            "useUnderline": {
              "get": function () { return this.use_underline; },
              "set": function (value) { this.use_underline = value; }
            },
            "widthChars": {
              "get": function () { return this.width_chars; },
              "set": function (value) { this.width_chars = value; }
            },
            "wrapMode": {
              "get": function () { return this.wrap_mode; },
              "set": function (value) { this.wrap_mode = value; }
            }
          },
          "static": {}
        },
        "LabelAccessible": {
          "prototype": {},
          "static": {}
        },
        "Layout": {
          "prototype": {
            "getBinWindow": {
              "value": function () { return this.get_bin_window.apply(this, arguments); }
            },
            "getHadjustment": {
              "value": function () { return this.get_hadjustment.apply(this, arguments); }
            },
            "getSize": {
              "value": function () { return this.get_size.apply(this, arguments); }
            },
            "getVadjustment": {
              "value": function () { return this.get_vadjustment.apply(this, arguments); }
            },
            "setHadjustment": {
              "value": function () { return this.set_hadjustment.apply(this, arguments); }
            },
            "setSize": {
              "value": function () { return this.set_size.apply(this, arguments); }
            },
            "setVadjustment": {
              "value": function () { return this.set_vadjustment.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "LevelBar": {
          "prototype": {
            "addOffsetValue": {
              "value": function () { return this.add_offset_value.apply(this, arguments); }
            },
            "getInverted": {
              "value": function () { return this.get_inverted.apply(this, arguments); }
            },
            "getMaxValue": {
              "value": function () { return this.get_max_value.apply(this, arguments); }
            },
            "getMinValue": {
              "value": function () { return this.get_min_value.apply(this, arguments); }
            },
            "getMode": {
              "value": function () { return this.get_mode.apply(this, arguments); }
            },
            "getOffsetValue": {
              "value": function () { return this.get_offset_value.apply(this, arguments); }
            },
            "getValue": {
              "value": function () { return this.get_value.apply(this, arguments); }
            },
            "removeOffsetValue": {
              "value": function () { return this.remove_offset_value.apply(this, arguments); }
            },
            "setInverted": {
              "value": function () { return this.set_inverted.apply(this, arguments); }
            },
            "setMaxValue": {
              "value": function () { return this.set_max_value.apply(this, arguments); }
            },
            "setMinValue": {
              "value": function () { return this.set_min_value.apply(this, arguments); }
            },
            "setMode": {
              "value": function () { return this.set_mode.apply(this, arguments); }
            },
            "setValue": {
              "value": function () { return this.set_value.apply(this, arguments); }
            },
            "maxValue": {
              "get": function () { return this.max_value; },
              "set": function (value) { this.max_value = value; }
            },
            "minValue": {
              "get": function () { return this.min_value; },
              "set": function (value) { this.min_value = value; }
            }
          },
          "static": {}
        },
        "LevelBarAccessible": {
          "prototype": {},
          "static": {}
        },
        "LinkButton": {
          "prototype": {
            "getUri": {
              "value": function () { return this.get_uri.apply(this, arguments); }
            },
            "getVisited": {
              "value": function () { return this.get_visited.apply(this, arguments); }
            },
            "setUri": {
              "value": function () { return this.set_uri.apply(this, arguments); }
            },
            "setVisited": {
              "value": function () { return this.set_visited.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "LinkButtonAccessible": {
          "prototype": {},
          "static": {}
        },
        "ListBox": {
          "prototype": {
            "bindModel": {
              "value": function () { return this.bind_model.apply(this, arguments); }
            },
            "dragHighlightRow": {
              "value": function () { return this.drag_highlight_row.apply(this, arguments); }
            },
            "dragUnhighlightRow": {
              "value": function () { return this.drag_unhighlight_row.apply(this, arguments); }
            },
            "getActivateOnSingleClick": {
              "value": function () { return this.get_activate_on_single_click.apply(this, arguments); }
            },
            "getAdjustment": {
              "value": function () { return this.get_adjustment.apply(this, arguments); }
            },
            "getRowAtIndex": {
              "value": function () { return this.get_row_at_index.apply(this, arguments); }
            },
            "getRowAtY": {
              "value": function () { return this.get_row_at_y.apply(this, arguments); }
            },
            "getSelectedRow": {
              "value": function () { return this.get_selected_row.apply(this, arguments); }
            },
            "getSelectedRows": {
              "value": function () { return this.get_selected_rows.apply(this, arguments); }
            },
            "getSelectionMode": {
              "value": function () { return this.get_selection_mode.apply(this, arguments); }
            },
            "invalidateFilter": {
              "value": function () { return this.invalidate_filter.apply(this, arguments); }
            },
            "invalidateHeaders": {
              "value": function () { return this.invalidate_headers.apply(this, arguments); }
            },
            "invalidateSort": {
              "value": function () { return this.invalidate_sort.apply(this, arguments); }
            },
            "selectAll": {
              "value": function () { return this.select_all.apply(this, arguments); }
            },
            "selectRow": {
              "value": function () { return this.select_row.apply(this, arguments); }
            },
            "selectedForeach": {
              "value": function () { return this.selected_foreach.apply(this, arguments); }
            },
            "setActivateOnSingleClick": {
              "value": function () { return this.set_activate_on_single_click.apply(this, arguments); }
            },
            "setAdjustment": {
              "value": function () { return this.set_adjustment.apply(this, arguments); }
            },
            "setFilterFunc": {
              "value": function () { return this.set_filter_func.apply(this, arguments); }
            },
            "setHeaderFunc": {
              "value": function () { return this.set_header_func.apply(this, arguments); }
            },
            "setPlaceholder": {
              "value": function () { return this.set_placeholder.apply(this, arguments); }
            },
            "setSelectionMode": {
              "value": function () { return this.set_selection_mode.apply(this, arguments); }
            },
            "setSortFunc": {
              "value": function () { return this.set_sort_func.apply(this, arguments); }
            },
            "unselectAll": {
              "value": function () { return this.unselect_all.apply(this, arguments); }
            },
            "unselectRow": {
              "value": function () { return this.unselect_row.apply(this, arguments); }
            },
            "activateOnSingleClick": {
              "get": function () { return this.activate_on_single_click; },
              "set": function (value) { this.activate_on_single_click = value; }
            },
            "selectionMode": {
              "get": function () { return this.selection_mode; },
              "set": function (value) { this.selection_mode = value; }
            }
          },
          "static": {}
        },
        "ListBoxAccessible": {
          "prototype": {},
          "static": {}
        },
        "ListBoxRow": {
          "prototype": {
            "getActivatable": {
              "value": function () { return this.get_activatable.apply(this, arguments); }
            },
            "getHeader": {
              "value": function () { return this.get_header.apply(this, arguments); }
            },
            "getIndex": {
              "value": function () { return this.get_index.apply(this, arguments); }
            },
            "getSelectable": {
              "value": function () { return this.get_selectable.apply(this, arguments); }
            },
            "isSelected": {
              "value": function () { return this.is_selected.apply(this, arguments); }
            },
            "setActivatable": {
              "value": function () { return this.set_activatable.apply(this, arguments); }
            },
            "setHeader": {
              "value": function () { return this.set_header.apply(this, arguments); }
            },
            "setSelectable": {
              "value": function () { return this.set_selectable.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "ListBoxRowAccessible": {
          "prototype": {},
          "static": {}
        },
        "ListStore": {
          "prototype": {
            "insertAfter": {
              "value": function () { return this.insert_after.apply(this, arguments); }
            },
            "insertBefore": {
              "value": function () { return this.insert_before.apply(this, arguments); }
            },
            "insertWithValues": {
              "value": function () { return this.insert_with_values.apply(this, arguments); }
            },
            "insertWithValuesv": {
              "value": function () { return this.insert_with_valuesv.apply(this, arguments); }
            },
            "iterIsValid": {
              "value": function () { return this.iter_is_valid.apply(this, arguments); }
            },
            "moveAfter": {
              "value": function () { return this.move_after.apply(this, arguments); }
            },
            "moveBefore": {
              "value": function () { return this.move_before.apply(this, arguments); }
            },
            "setColumnTypes": {
              "value": function () { return this.set_column_types.apply(this, arguments); }
            },
            "setValist": {
              "value": function () { return this.set_valist.apply(this, arguments); }
            },
            "setValue": {
              "value": function () { return this.set_value.apply(this, arguments); }
            },
            "setValuesv": {
              "value": function () { return this.set_valuesv.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "LockButton": {
          "prototype": {
            "getPermission": {
              "value": function () { return this.get_permission.apply(this, arguments); }
            },
            "setPermission": {
              "value": function () { return this.set_permission.apply(this, arguments); }
            },
            "textLock": {
              "get": function () { return this.text_lock; },
              "set": function (value) { this.text_lock = value; }
            },
            "textUnlock": {
              "get": function () { return this.text_unlock; },
              "set": function (value) { this.text_unlock = value; }
            },
            "tooltipLock": {
              "get": function () { return this.tooltip_lock; },
              "set": function (value) { this.tooltip_lock = value; }
            },
            "tooltipNotAuthorized": {
              "get": function () { return this.tooltip_not_authorized; },
              "set": function (value) { this.tooltip_not_authorized = value; }
            },
            "tooltipUnlock": {
              "get": function () { return this.tooltip_unlock; },
              "set": function (value) { this.tooltip_unlock = value; }
            }
          },
          "static": {}
        },
        "LockButtonAccessible": {
          "prototype": {},
          "static": {}
        },
        "Menu": {
          "prototype": {
            "attachToWidget": {
              "value": function () { return this.attach_to_widget.apply(this, arguments); }
            },
            "getAccelGroup": {
              "value": function () { return this.get_accel_group.apply(this, arguments); }
            },
            "getAccelPath": {
              "value": function () { return this.get_accel_path.apply(this, arguments); }
            },
            "getActive": {
              "value": function () { return this.get_active.apply(this, arguments); }
            },
            "getAttachWidget": {
              "value": function () { return this.get_attach_widget.apply(this, arguments); }
            },
            "getMonitor": {
              "value": function () { return this.get_monitor.apply(this, arguments); }
            },
            "getReserveToggleSize": {
              "value": function () { return this.get_reserve_toggle_size.apply(this, arguments); }
            },
            "getTearoffState": {
              "value": function () { return this.get_tearoff_state.apply(this, arguments); }
            },
            "getTitle": {
              "value": function () { return this.get_title.apply(this, arguments); }
            },
            "popupForDevice": {
              "value": function () { return this.popup_for_device.apply(this, arguments); }
            },
            "reorderChild": {
              "value": function () { return this.reorder_child.apply(this, arguments); }
            },
            "setAccelGroup": {
              "value": function () { return this.set_accel_group.apply(this, arguments); }
            },
            "setAccelPath": {
              "value": function () { return this.set_accel_path.apply(this, arguments); }
            },
            "setActive": {
              "value": function () { return this.set_active.apply(this, arguments); }
            },
            "setMonitor": {
              "value": function () { return this.set_monitor.apply(this, arguments); }
            },
            "setReserveToggleSize": {
              "value": function () { return this.set_reserve_toggle_size.apply(this, arguments); }
            },
            "setScreen": {
              "value": function () { return this.set_screen.apply(this, arguments); }
            },
            "setTearoffState": {
              "value": function () { return this.set_tearoff_state.apply(this, arguments); }
            },
            "setTitle": {
              "value": function () { return this.set_title.apply(this, arguments); }
            },
            "accelGroup": {
              "get": function () { return this.accel_group; },
              "set": function (value) { this.accel_group = value; }
            },
            "accelPath": {
              "get": function () { return this.accel_path; },
              "set": function (value) { this.accel_path = value; }
            },
            "attachWidget": {
              "get": function () { return this.attach_widget; },
              "set": function (value) { this.attach_widget = value; }
            },
            "reserveToggleSize": {
              "get": function () { return this.reserve_toggle_size; },
              "set": function (value) { this.reserve_toggle_size = value; }
            },
            "tearoffState": {
              "get": function () { return this.tearoff_state; },
              "set": function (value) { this.tearoff_state = value; }
            },
            "tearoffTitle": {
              "get": function () { return this.tearoff_title; },
              "set": function (value) { this.tearoff_title = value; }
            }
          },
          "static": {
            "getForAttachWidget": {
              "value": function () { return this.get_for_attach_widget.apply(this, arguments); }
            }
          }
        },
        "MenuAccessible": {
          "prototype": {},
          "static": {}
        },
        "MenuBar": {
          "prototype": {
            "getChildPackDirection": {
              "value": function () { return this.get_child_pack_direction.apply(this, arguments); }
            },
            "getPackDirection": {
              "value": function () { return this.get_pack_direction.apply(this, arguments); }
            },
            "setChildPackDirection": {
              "value": function () { return this.set_child_pack_direction.apply(this, arguments); }
            },
            "setPackDirection": {
              "value": function () { return this.set_pack_direction.apply(this, arguments); }
            },
            "childPackDirection": {
              "get": function () { return this.child_pack_direction; },
              "set": function (value) { this.child_pack_direction = value; }
            },
            "packDirection": {
              "get": function () { return this.pack_direction; },
              "set": function (value) { this.pack_direction = value; }
            }
          },
          "static": {}
        },
        "MenuButton": {
          "prototype": {
            "getAlignWidget": {
              "value": function () { return this.get_align_widget.apply(this, arguments); }
            },
            "getDirection": {
              "value": function () { return this.get_direction.apply(this, arguments); }
            },
            "getMenuModel": {
              "value": function () { return this.get_menu_model.apply(this, arguments); }
            },
            "getPopover": {
              "value": function () { return this.get_popover.apply(this, arguments); }
            },
            "getPopup": {
              "value": function () { return this.get_popup.apply(this, arguments); }
            },
            "getUsePopover": {
              "value": function () { return this.get_use_popover.apply(this, arguments); }
            },
            "setAlignWidget": {
              "value": function () { return this.set_align_widget.apply(this, arguments); }
            },
            "setDirection": {
              "value": function () { return this.set_direction.apply(this, arguments); }
            },
            "setMenuModel": {
              "value": function () { return this.set_menu_model.apply(this, arguments); }
            },
            "setPopover": {
              "value": function () { return this.set_popover.apply(this, arguments); }
            },
            "setPopup": {
              "value": function () { return this.set_popup.apply(this, arguments); }
            },
            "setUsePopover": {
              "value": function () { return this.set_use_popover.apply(this, arguments); }
            },
            "alignWidget": {
              "get": function () { return this.align_widget; },
              "set": function (value) { this.align_widget = value; }
            },
            "menuModel": {
              "get": function () { return this.menu_model; },
              "set": function (value) { this.menu_model = value; }
            },
            "usePopover": {
              "get": function () { return this.use_popover; },
              "set": function (value) { this.use_popover = value; }
            }
          },
          "static": {}
        },
        "MenuButtonAccessible": {
          "prototype": {},
          "static": {}
        },
        "MenuItem": {
          "prototype": {
            "getAccelPath": {
              "value": function () { return this.get_accel_path.apply(this, arguments); }
            },
            "getLabel": {
              "value": function () { return this.get_label.apply(this, arguments); }
            },
            "getReserveIndicator": {
              "value": function () { return this.get_reserve_indicator.apply(this, arguments); }
            },
            "getRightJustified": {
              "value": function () { return this.get_right_justified.apply(this, arguments); }
            },
            "getSubmenu": {
              "value": function () { return this.get_submenu.apply(this, arguments); }
            },
            "getUseUnderline": {
              "value": function () { return this.get_use_underline.apply(this, arguments); }
            },
            "setAccelPath": {
              "value": function () { return this.set_accel_path.apply(this, arguments); }
            },
            "setLabel": {
              "value": function () { return this.set_label.apply(this, arguments); }
            },
            "setReserveIndicator": {
              "value": function () { return this.set_reserve_indicator.apply(this, arguments); }
            },
            "setRightJustified": {
              "value": function () { return this.set_right_justified.apply(this, arguments); }
            },
            "setSubmenu": {
              "value": function () { return this.set_submenu.apply(this, arguments); }
            },
            "setUseUnderline": {
              "value": function () { return this.set_use_underline.apply(this, arguments); }
            },
            "toggleSizeAllocate": {
              "value": function () { return this.toggle_size_allocate.apply(this, arguments); }
            },
            "toggleSizeRequest": {
              "value": function () { return this.toggle_size_request.apply(this, arguments); }
            },
            "accelPath": {
              "get": function () { return this.accel_path; },
              "set": function (value) { this.accel_path = value; }
            },
            "rightJustified": {
              "get": function () { return this.right_justified; },
              "set": function (value) { this.right_justified = value; }
            },
            "useUnderline": {
              "get": function () { return this.use_underline; },
              "set": function (value) { this.use_underline = value; }
            }
          },
          "static": {}
        },
        "MenuItemAccessible": {
          "prototype": {},
          "static": {}
        },
        "MenuShell": {
          "prototype": {
            "activateItem": {
              "value": function () { return this.activate_item.apply(this, arguments); }
            },
            "bindModel": {
              "value": function () { return this.bind_model.apply(this, arguments); }
            },
            "getParentShell": {
              "value": function () { return this.get_parent_shell.apply(this, arguments); }
            },
            "getSelectedItem": {
              "value": function () { return this.get_selected_item.apply(this, arguments); }
            },
            "getTakeFocus": {
              "value": function () { return this.get_take_focus.apply(this, arguments); }
            },
            "selectFirst": {
              "value": function () { return this.select_first.apply(this, arguments); }
            },
            "selectItem": {
              "value": function () { return this.select_item.apply(this, arguments); }
            },
            "setTakeFocus": {
              "value": function () { return this.set_take_focus.apply(this, arguments); }
            },
            "takeFocus": {
              "get": function () { return this.take_focus; },
              "set": function (value) { this.take_focus = value; }
            }
          },
          "static": {}
        },
        "MenuShellAccessible": {
          "prototype": {},
          "static": {}
        },
        "MenuToolButton": {
          "prototype": {
            "getMenu": {
              "value": function () { return this.get_menu.apply(this, arguments); }
            },
            "setArrowTooltipMarkup": {
              "value": function () { return this.set_arrow_tooltip_markup.apply(this, arguments); }
            },
            "setArrowTooltipText": {
              "value": function () { return this.set_arrow_tooltip_text.apply(this, arguments); }
            },
            "setMenu": {
              "value": function () { return this.set_menu.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "MessageDialog": {
          "prototype": {
            "formatSecondaryMarkup": {
              "value": function () { return this.format_secondary_markup.apply(this, arguments); }
            },
            "formatSecondaryText": {
              "value": function () { return this.format_secondary_text.apply(this, arguments); }
            },
            "getImage": {
              "value": function () { return this.get_image.apply(this, arguments); }
            },
            "getMessageArea": {
              "value": function () { return this.get_message_area.apply(this, arguments); }
            },
            "setImage": {
              "value": function () { return this.set_image.apply(this, arguments); }
            },
            "setMarkup": {
              "value": function () { return this.set_markup.apply(this, arguments); }
            },
            "messageArea": {
              "get": function () { return this.message_area; },
              "set": function (value) { this.message_area = value; }
            },
            "messageType": {
              "get": function () { return this.message_type; },
              "set": function (value) { this.message_type = value; }
            },
            "secondaryText": {
              "get": function () { return this.secondary_text; },
              "set": function (value) { this.secondary_text = value; }
            },
            "secondaryUseMarkup": {
              "get": function () { return this.secondary_use_markup; },
              "set": function (value) { this.secondary_use_markup = value; }
            },
            "useMarkup": {
              "get": function () { return this.use_markup; },
              "set": function (value) { this.use_markup = value; }
            }
          },
          "static": {}
        },
        "Misc": {
          "prototype": {
            "getAlignment": {
              "value": function () { return this.get_alignment.apply(this, arguments); }
            },
            "getPadding": {
              "value": function () { return this.get_padding.apply(this, arguments); }
            },
            "setAlignment": {
              "value": function () { return this.set_alignment.apply(this, arguments); }
            },
            "setPadding": {
              "value": function () { return this.set_padding.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "ModelButton": {
          "prototype": {
            "menuName": {
              "get": function () { return this.menu_name; },
              "set": function (value) { this.menu_name = value; }
            }
          },
          "static": {}
        },
        "MountOperation": {
          "prototype": {
            "getParent": {
              "value": function () { return this.get_parent.apply(this, arguments); }
            },
            "getScreen": {
              "value": function () { return this.get_screen.apply(this, arguments); }
            },
            "isShowing": {
              "get": function () { return this.is_showing; },
              "set": function (value) { this.is_showing = value; }
            },
            "setParent": {
              "value": function () { return this.set_parent.apply(this, arguments); }
            },
            "setScreen": {
              "value": function () { return this.set_screen.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Notebook": {
          "prototype": {
            "appendPage": {
              "value": function () { return this.append_page.apply(this, arguments); }
            },
            "appendPageMenu": {
              "value": function () { return this.append_page_menu.apply(this, arguments); }
            },
            "detachTab": {
              "value": function () { return this.detach_tab.apply(this, arguments); }
            },
            "getActionWidget": {
              "value": function () { return this.get_action_widget.apply(this, arguments); }
            },
            "getCurrentPage": {
              "value": function () { return this.get_current_page.apply(this, arguments); }
            },
            "getGroupName": {
              "value": function () { return this.get_group_name.apply(this, arguments); }
            },
            "getMenuLabel": {
              "value": function () { return this.get_menu_label.apply(this, arguments); }
            },
            "getMenuLabelText": {
              "value": function () { return this.get_menu_label_text.apply(this, arguments); }
            },
            "getNPages": {
              "value": function () { return this.get_n_pages.apply(this, arguments); }
            },
            "getNthPage": {
              "value": function () { return this.get_nth_page.apply(this, arguments); }
            },
            "getScrollable": {
              "value": function () { return this.get_scrollable.apply(this, arguments); }
            },
            "getShowBorder": {
              "value": function () { return this.get_show_border.apply(this, arguments); }
            },
            "getShowTabs": {
              "value": function () { return this.get_show_tabs.apply(this, arguments); }
            },
            "getTabDetachable": {
              "value": function () { return this.get_tab_detachable.apply(this, arguments); }
            },
            "getTabHborder": {
              "value": function () { return this.get_tab_hborder.apply(this, arguments); }
            },
            "getTabLabel": {
              "value": function () { return this.get_tab_label.apply(this, arguments); }
            },
            "getTabLabelText": {
              "value": function () { return this.get_tab_label_text.apply(this, arguments); }
            },
            "getTabPos": {
              "value": function () { return this.get_tab_pos.apply(this, arguments); }
            },
            "getTabReorderable": {
              "value": function () { return this.get_tab_reorderable.apply(this, arguments); }
            },
            "getTabVborder": {
              "value": function () { return this.get_tab_vborder.apply(this, arguments); }
            },
            "insertPage": {
              "value": function () { return this.insert_page.apply(this, arguments); }
            },
            "insertPageMenu": {
              "value": function () { return this.insert_page_menu.apply(this, arguments); }
            },
            "nextPage": {
              "value": function () { return this.next_page.apply(this, arguments); }
            },
            "pageNum": {
              "value": function () { return this.page_num.apply(this, arguments); }
            },
            "popupDisable": {
              "value": function () { return this.popup_disable.apply(this, arguments); }
            },
            "popupEnable": {
              "value": function () { return this.popup_enable.apply(this, arguments); }
            },
            "prependPage": {
              "value": function () { return this.prepend_page.apply(this, arguments); }
            },
            "prependPageMenu": {
              "value": function () { return this.prepend_page_menu.apply(this, arguments); }
            },
            "prevPage": {
              "value": function () { return this.prev_page.apply(this, arguments); }
            },
            "removePage": {
              "value": function () { return this.remove_page.apply(this, arguments); }
            },
            "reorderChild": {
              "value": function () { return this.reorder_child.apply(this, arguments); }
            },
            "setActionWidget": {
              "value": function () { return this.set_action_widget.apply(this, arguments); }
            },
            "setCurrentPage": {
              "value": function () { return this.set_current_page.apply(this, arguments); }
            },
            "setGroupName": {
              "value": function () { return this.set_group_name.apply(this, arguments); }
            },
            "setMenuLabel": {
              "value": function () { return this.set_menu_label.apply(this, arguments); }
            },
            "setMenuLabelText": {
              "value": function () { return this.set_menu_label_text.apply(this, arguments); }
            },
            "setScrollable": {
              "value": function () { return this.set_scrollable.apply(this, arguments); }
            },
            "setShowBorder": {
              "value": function () { return this.set_show_border.apply(this, arguments); }
            },
            "setShowTabs": {
              "value": function () { return this.set_show_tabs.apply(this, arguments); }
            },
            "setTabDetachable": {
              "value": function () { return this.set_tab_detachable.apply(this, arguments); }
            },
            "setTabLabel": {
              "value": function () { return this.set_tab_label.apply(this, arguments); }
            },
            "setTabLabelText": {
              "value": function () { return this.set_tab_label_text.apply(this, arguments); }
            },
            "setTabPos": {
              "value": function () { return this.set_tab_pos.apply(this, arguments); }
            },
            "setTabReorderable": {
              "value": function () { return this.set_tab_reorderable.apply(this, arguments); }
            },
            "enablePopup": {
              "get": function () { return this.enable_popup; },
              "set": function (value) { this.enable_popup = value; }
            },
            "groupName": {
              "get": function () { return this.group_name; },
              "set": function (value) { this.group_name = value; }
            },
            "showBorder": {
              "get": function () { return this.show_border; },
              "set": function (value) { this.show_border = value; }
            },
            "showTabs": {
              "get": function () { return this.show_tabs; },
              "set": function (value) { this.show_tabs = value; }
            },
            "tabPos": {
              "get": function () { return this.tab_pos; },
              "set": function (value) { this.tab_pos = value; }
            }
          },
          "static": {}
        },
        "NotebookAccessible": {
          "prototype": {},
          "static": {}
        },
        "NotebookPageAccessible": {
          "prototype": {},
          "static": {}
        },
        "NumerableIcon": {
          "prototype": {
            "getBackgroundGicon": {
              "value": function () { return this.get_background_gicon.apply(this, arguments); }
            },
            "getBackgroundIconName": {
              "value": function () { return this.get_background_icon_name.apply(this, arguments); }
            },
            "getCount": {
              "value": function () { return this.get_count.apply(this, arguments); }
            },
            "getLabel": {
              "value": function () { return this.get_label.apply(this, arguments); }
            },
            "getStyleContext": {
              "value": function () { return this.get_style_context.apply(this, arguments); }
            },
            "setBackgroundGicon": {
              "value": function () { return this.set_background_gicon.apply(this, arguments); }
            },
            "setBackgroundIconName": {
              "value": function () { return this.set_background_icon_name.apply(this, arguments); }
            },
            "setCount": {
              "value": function () { return this.set_count.apply(this, arguments); }
            },
            "setLabel": {
              "value": function () { return this.set_label.apply(this, arguments); }
            },
            "setStyleContext": {
              "value": function () { return this.set_style_context.apply(this, arguments); }
            },
            "backgroundIcon": {
              "get": function () { return this.background_icon; },
              "set": function (value) { this.background_icon = value; }
            },
            "backgroundIconName": {
              "get": function () { return this.background_icon_name; },
              "set": function (value) { this.background_icon_name = value; }
            },
            "styleContext": {
              "get": function () { return this.style_context; },
              "set": function (value) { this.style_context = value; }
            }
          },
          "static": {
            "newWithStyleContext": {
              "value": function () { return this.new_with_style_context.apply(this, arguments); }
            }
          }
        },
        "OffscreenWindow": {
          "prototype": {
            "getPixbuf": {
              "value": function () { return this.get_pixbuf.apply(this, arguments); }
            },
            "getSurface": {
              "value": function () { return this.get_surface.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Overlay": {
          "prototype": {
            "addOverlay": {
              "value": function () { return this.add_overlay.apply(this, arguments); }
            },
            "getOverlayPassThrough": {
              "value": function () { return this.get_overlay_pass_through.apply(this, arguments); }
            },
            "reorderOverlay": {
              "value": function () { return this.reorder_overlay.apply(this, arguments); }
            },
            "setOverlayPassThrough": {
              "value": function () { return this.set_overlay_pass_through.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "PageSetup": {
          "prototype": {
            "getBottomMargin": {
              "value": function () { return this.get_bottom_margin.apply(this, arguments); }
            },
            "getLeftMargin": {
              "value": function () { return this.get_left_margin.apply(this, arguments); }
            },
            "getOrientation": {
              "value": function () { return this.get_orientation.apply(this, arguments); }
            },
            "getPageHeight": {
              "value": function () { return this.get_page_height.apply(this, arguments); }
            },
            "getPageWidth": {
              "value": function () { return this.get_page_width.apply(this, arguments); }
            },
            "getPaperHeight": {
              "value": function () { return this.get_paper_height.apply(this, arguments); }
            },
            "getPaperSize": {
              "value": function () { return this.get_paper_size.apply(this, arguments); }
            },
            "getPaperWidth": {
              "value": function () { return this.get_paper_width.apply(this, arguments); }
            },
            "getRightMargin": {
              "value": function () { return this.get_right_margin.apply(this, arguments); }
            },
            "getTopMargin": {
              "value": function () { return this.get_top_margin.apply(this, arguments); }
            },
            "loadFile": {
              "value": function () { return this.load_file.apply(this, arguments); }
            },
            "loadKeyFile": {
              "value": function () { return this.load_key_file.apply(this, arguments); }
            },
            "setBottomMargin": {
              "value": function () { return this.set_bottom_margin.apply(this, arguments); }
            },
            "setLeftMargin": {
              "value": function () { return this.set_left_margin.apply(this, arguments); }
            },
            "setOrientation": {
              "value": function () { return this.set_orientation.apply(this, arguments); }
            },
            "setPaperSize": {
              "value": function () { return this.set_paper_size.apply(this, arguments); }
            },
            "setPaperSizeAndDefaultMargins": {
              "value": function () { return this.set_paper_size_and_default_margins.apply(this, arguments); }
            },
            "setRightMargin": {
              "value": function () { return this.set_right_margin.apply(this, arguments); }
            },
            "setTopMargin": {
              "value": function () { return this.set_top_margin.apply(this, arguments); }
            },
            "toFile": {
              "value": function () { return this.to_file.apply(this, arguments); }
            },
            "toKeyFile": {
              "value": function () { return this.to_key_file.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Paned": {
          "prototype": {
            "getChild1": {
              "value": function () { return this.get_child1.apply(this, arguments); }
            },
            "getChild2": {
              "value": function () { return this.get_child2.apply(this, arguments); }
            },
            "getHandleWindow": {
              "value": function () { return this.get_handle_window.apply(this, arguments); }
            },
            "getPosition": {
              "value": function () { return this.get_position.apply(this, arguments); }
            },
            "getWideHandle": {
              "value": function () { return this.get_wide_handle.apply(this, arguments); }
            },
            "setPosition": {
              "value": function () { return this.set_position.apply(this, arguments); }
            },
            "setWideHandle": {
              "value": function () { return this.set_wide_handle.apply(this, arguments); }
            },
            "maxPosition": {
              "get": function () { return this.max_position; },
              "set": function (value) { this.max_position = value; }
            },
            "minPosition": {
              "get": function () { return this.min_position; },
              "set": function (value) { this.min_position = value; }
            },
            "positionSet": {
              "get": function () { return this.position_set; },
              "set": function (value) { this.position_set = value; }
            },
            "wideHandle": {
              "get": function () { return this.wide_handle; },
              "set": function (value) { this.wide_handle = value; }
            }
          },
          "static": {}
        },
        "PanedAccessible": {
          "prototype": {},
          "static": {}
        },
        "PlacesSidebar": {
          "prototype": {
            "addShortcut": {
              "value": function () { return this.add_shortcut.apply(this, arguments); }
            },
            "getLocalOnly": {
              "value": function () { return this.get_local_only.apply(this, arguments); }
            },
            "getLocation": {
              "value": function () { return this.get_location.apply(this, arguments); }
            },
            "getNthBookmark": {
              "value": function () { return this.get_nth_bookmark.apply(this, arguments); }
            },
            "getOpenFlags": {
              "value": function () { return this.get_open_flags.apply(this, arguments); }
            },
            "getShowConnectToServer": {
              "value": function () { return this.get_show_connect_to_server.apply(this, arguments); }
            },
            "getShowDesktop": {
              "value": function () { return this.get_show_desktop.apply(this, arguments); }
            },
            "getShowEnterLocation": {
              "value": function () { return this.get_show_enter_location.apply(this, arguments); }
            },
            "getShowOtherLocations": {
              "value": function () { return this.get_show_other_locations.apply(this, arguments); }
            },
            "getShowRecent": {
              "value": function () { return this.get_show_recent.apply(this, arguments); }
            },
            "getShowTrash": {
              "value": function () { return this.get_show_trash.apply(this, arguments); }
            },
            "listShortcuts": {
              "value": function () { return this.list_shortcuts.apply(this, arguments); }
            },
            "removeShortcut": {
              "value": function () { return this.remove_shortcut.apply(this, arguments); }
            },
            "setDropTargetsVisible": {
              "value": function () { return this.set_drop_targets_visible.apply(this, arguments); }
            },
            "setLocalOnly": {
              "value": function () { return this.set_local_only.apply(this, arguments); }
            },
            "setLocation": {
              "value": function () { return this.set_location.apply(this, arguments); }
            },
            "setOpenFlags": {
              "value": function () { return this.set_open_flags.apply(this, arguments); }
            },
            "setShowConnectToServer": {
              "value": function () { return this.set_show_connect_to_server.apply(this, arguments); }
            },
            "setShowDesktop": {
              "value": function () { return this.set_show_desktop.apply(this, arguments); }
            },
            "setShowEnterLocation": {
              "value": function () { return this.set_show_enter_location.apply(this, arguments); }
            },
            "setShowOtherLocations": {
              "value": function () { return this.set_show_other_locations.apply(this, arguments); }
            },
            "setShowRecent": {
              "value": function () { return this.set_show_recent.apply(this, arguments); }
            },
            "setShowTrash": {
              "value": function () { return this.set_show_trash.apply(this, arguments); }
            },
            "localOnly": {
              "get": function () { return this.local_only; },
              "set": function (value) { this.local_only = value; }
            },
            "openFlags": {
              "get": function () { return this.open_flags; },
              "set": function (value) { this.open_flags = value; }
            },
            "populateAll": {
              "get": function () { return this.populate_all; },
              "set": function (value) { this.populate_all = value; }
            },
            "showConnectToServer": {
              "get": function () { return this.show_connect_to_server; },
              "set": function (value) { this.show_connect_to_server = value; }
            },
            "showDesktop": {
              "get": function () { return this.show_desktop; },
              "set": function (value) { this.show_desktop = value; }
            },
            "showEnterLocation": {
              "get": function () { return this.show_enter_location; },
              "set": function (value) { this.show_enter_location = value; }
            },
            "showOtherLocations": {
              "get": function () { return this.show_other_locations; },
              "set": function (value) { this.show_other_locations = value; }
            },
            "showRecent": {
              "get": function () { return this.show_recent; },
              "set": function (value) { this.show_recent = value; }
            },
            "showTrash": {
              "get": function () { return this.show_trash; },
              "set": function (value) { this.show_trash = value; }
            }
          },
          "static": {}
        },
        "Plug": {
          "prototype": {
            "constructForDisplay": {
              "value": function () { return this.construct_for_display.apply(this, arguments); }
            },
            "getEmbedded": {
              "value": function () { return this.get_embedded.apply(this, arguments); }
            },
            "getId": {
              "value": function () { return this.get_id.apply(this, arguments); }
            },
            "getSocketWindow": {
              "value": function () { return this.get_socket_window.apply(this, arguments); }
            },
            "socketWindow": {
              "get": function () { return this.socket_window; },
              "set": function (value) { this.socket_window = value; }
            }
          },
          "static": {}
        },
        "Popover": {
          "prototype": {
            "bindModel": {
              "value": function () { return this.bind_model.apply(this, arguments); }
            },
            "getDefaultWidget": {
              "value": function () { return this.get_default_widget.apply(this, arguments); }
            },
            "getModal": {
              "value": function () { return this.get_modal.apply(this, arguments); }
            },
            "getPointingTo": {
              "value": function () { return this.get_pointing_to.apply(this, arguments); }
            },
            "getPosition": {
              "value": function () { return this.get_position.apply(this, arguments); }
            },
            "getRelativeTo": {
              "value": function () { return this.get_relative_to.apply(this, arguments); }
            },
            "getTransitionsEnabled": {
              "value": function () { return this.get_transitions_enabled.apply(this, arguments); }
            },
            "setDefaultWidget": {
              "value": function () { return this.set_default_widget.apply(this, arguments); }
            },
            "setModal": {
              "value": function () { return this.set_modal.apply(this, arguments); }
            },
            "setPointingTo": {
              "value": function () { return this.set_pointing_to.apply(this, arguments); }
            },
            "setPosition": {
              "value": function () { return this.set_position.apply(this, arguments); }
            },
            "setRelativeTo": {
              "value": function () { return this.set_relative_to.apply(this, arguments); }
            },
            "setTransitionsEnabled": {
              "value": function () { return this.set_transitions_enabled.apply(this, arguments); }
            },
            "pointingTo": {
              "get": function () { return this.pointing_to; },
              "set": function (value) { this.pointing_to = value; }
            },
            "relativeTo": {
              "get": function () { return this.relative_to; },
              "set": function (value) { this.relative_to = value; }
            },
            "transitionsEnabled": {
              "get": function () { return this.transitions_enabled; },
              "set": function (value) { this.transitions_enabled = value; }
            }
          },
          "static": {}
        },
        "PopoverAccessible": {
          "prototype": {},
          "static": {}
        },
        "PopoverMenu": {
          "prototype": {
            "openSubmenu": {
              "value": function () { return this.open_submenu.apply(this, arguments); }
            },
            "visibleSubmenu": {
              "get": function () { return this.visible_submenu; },
              "set": function (value) { this.visible_submenu = value; }
            }
          },
          "static": {}
        },
        "PrintContext": {
          "prototype": {
            "createPangoContext": {
              "value": function () { return this.create_pango_context.apply(this, arguments); }
            },
            "createPangoLayout": {
              "value": function () { return this.create_pango_layout.apply(this, arguments); }
            },
            "getCairoContext": {
              "value": function () { return this.get_cairo_context.apply(this, arguments); }
            },
            "getDpiX": {
              "value": function () { return this.get_dpi_x.apply(this, arguments); }
            },
            "getDpiY": {
              "value": function () { return this.get_dpi_y.apply(this, arguments); }
            },
            "getHardMargins": {
              "value": function () { return this.get_hard_margins.apply(this, arguments); }
            },
            "getHeight": {
              "value": function () { return this.get_height.apply(this, arguments); }
            },
            "getPageSetup": {
              "value": function () { return this.get_page_setup.apply(this, arguments); }
            },
            "getPangoFontmap": {
              "value": function () { return this.get_pango_fontmap.apply(this, arguments); }
            },
            "getWidth": {
              "value": function () { return this.get_width.apply(this, arguments); }
            },
            "setCairoContext": {
              "value": function () { return this.set_cairo_context.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "PrintOperation": {
          "prototype": {
            "drawPageFinish": {
              "value": function () { return this.draw_page_finish.apply(this, arguments); }
            },
            "getDefaultPageSetup": {
              "value": function () { return this.get_default_page_setup.apply(this, arguments); }
            },
            "getEmbedPageSetup": {
              "value": function () { return this.get_embed_page_setup.apply(this, arguments); }
            },
            "getError": {
              "value": function () { return this.get_error.apply(this, arguments); }
            },
            "getHasSelection": {
              "value": function () { return this.get_has_selection.apply(this, arguments); }
            },
            "getNPagesToPrint": {
              "value": function () { return this.get_n_pages_to_print.apply(this, arguments); }
            },
            "getPrintSettings": {
              "value": function () { return this.get_print_settings.apply(this, arguments); }
            },
            "getStatus": {
              "value": function () { return this.get_status.apply(this, arguments); }
            },
            "getStatusString": {
              "value": function () { return this.get_status_string.apply(this, arguments); }
            },
            "getSupportSelection": {
              "value": function () { return this.get_support_selection.apply(this, arguments); }
            },
            "isFinished": {
              "value": function () { return this.is_finished.apply(this, arguments); }
            },
            "setAllowAsync": {
              "value": function () { return this.set_allow_async.apply(this, arguments); }
            },
            "setCurrentPage": {
              "value": function () { return this.set_current_page.apply(this, arguments); }
            },
            "setCustomTabLabel": {
              "value": function () { return this.set_custom_tab_label.apply(this, arguments); }
            },
            "setDefaultPageSetup": {
              "value": function () { return this.set_default_page_setup.apply(this, arguments); }
            },
            "setDeferDrawing": {
              "value": function () { return this.set_defer_drawing.apply(this, arguments); }
            },
            "setEmbedPageSetup": {
              "value": function () { return this.set_embed_page_setup.apply(this, arguments); }
            },
            "setExportFilename": {
              "value": function () { return this.set_export_filename.apply(this, arguments); }
            },
            "setHasSelection": {
              "value": function () { return this.set_has_selection.apply(this, arguments); }
            },
            "setJobName": {
              "value": function () { return this.set_job_name.apply(this, arguments); }
            },
            "setNPages": {
              "value": function () { return this.set_n_pages.apply(this, arguments); }
            },
            "setPrintSettings": {
              "value": function () { return this.set_print_settings.apply(this, arguments); }
            },
            "setShowProgress": {
              "value": function () { return this.set_show_progress.apply(this, arguments); }
            },
            "setSupportSelection": {
              "value": function () { return this.set_support_selection.apply(this, arguments); }
            },
            "setTrackPrintStatus": {
              "value": function () { return this.set_track_print_status.apply(this, arguments); }
            },
            "setUnit": {
              "value": function () { return this.set_unit.apply(this, arguments); }
            },
            "setUseFullPage": {
              "value": function () { return this.set_use_full_page.apply(this, arguments); }
            },
            "allowAsync": {
              "get": function () { return this.allow_async; },
              "set": function (value) { this.allow_async = value; }
            },
            "currentPage": {
              "get": function () { return this.current_page; },
              "set": function (value) { this.current_page = value; }
            },
            "customTabLabel": {
              "get": function () { return this.custom_tab_label; },
              "set": function (value) { this.custom_tab_label = value; }
            },
            "defaultPageSetup": {
              "get": function () { return this.default_page_setup; },
              "set": function (value) { this.default_page_setup = value; }
            },
            "embedPageSetup": {
              "get": function () { return this.embed_page_setup; },
              "set": function (value) { this.embed_page_setup = value; }
            },
            "exportFilename": {
              "get": function () { return this.export_filename; },
              "set": function (value) { this.export_filename = value; }
            },
            "hasSelection": {
              "get": function () { return this.has_selection; },
              "set": function (value) { this.has_selection = value; }
            },
            "jobName": {
              "get": function () { return this.job_name; },
              "set": function (value) { this.job_name = value; }
            },
            "nPages": {
              "get": function () { return this.n_pages; },
              "set": function (value) { this.n_pages = value; }
            },
            "nPagesToPrint": {
              "get": function () { return this.n_pages_to_print; },
              "set": function (value) { this.n_pages_to_print = value; }
            },
            "printSettings": {
              "get": function () { return this.print_settings; },
              "set": function (value) { this.print_settings = value; }
            },
            "showProgress": {
              "get": function () { return this.show_progress; },
              "set": function (value) { this.show_progress = value; }
            },
            "statusString": {
              "get": function () { return this.status_string; },
              "set": function (value) { this.status_string = value; }
            },
            "supportSelection": {
              "get": function () { return this.support_selection; },
              "set": function (value) { this.support_selection = value; }
            },
            "trackPrintStatus": {
              "get": function () { return this.track_print_status; },
              "set": function (value) { this.track_print_status = value; }
            },
            "useFullPage": {
              "get": function () { return this.use_full_page; },
              "set": function (value) { this.use_full_page = value; }
            }
          },
          "static": {}
        },
        "PrintSettings": {
          "prototype": {
            "getBool": {
              "value": function () { return this.get_bool.apply(this, arguments); }
            },
            "getCollate": {
              "value": function () { return this.get_collate.apply(this, arguments); }
            },
            "getDefaultSource": {
              "value": function () { return this.get_default_source.apply(this, arguments); }
            },
            "getDither": {
              "value": function () { return this.get_dither.apply(this, arguments); }
            },
            "getDouble": {
              "value": function () { return this.get_double.apply(this, arguments); }
            },
            "getDoubleWithDefault": {
              "value": function () { return this.get_double_with_default.apply(this, arguments); }
            },
            "getDuplex": {
              "value": function () { return this.get_duplex.apply(this, arguments); }
            },
            "getFinishings": {
              "value": function () { return this.get_finishings.apply(this, arguments); }
            },
            "getInt": {
              "value": function () { return this.get_int.apply(this, arguments); }
            },
            "getIntWithDefault": {
              "value": function () { return this.get_int_with_default.apply(this, arguments); }
            },
            "getLength": {
              "value": function () { return this.get_length.apply(this, arguments); }
            },
            "getMediaType": {
              "value": function () { return this.get_media_type.apply(this, arguments); }
            },
            "getNCopies": {
              "value": function () { return this.get_n_copies.apply(this, arguments); }
            },
            "getNumberUp": {
              "value": function () { return this.get_number_up.apply(this, arguments); }
            },
            "getNumberUpLayout": {
              "value": function () { return this.get_number_up_layout.apply(this, arguments); }
            },
            "getOrientation": {
              "value": function () { return this.get_orientation.apply(this, arguments); }
            },
            "getOutputBin": {
              "value": function () { return this.get_output_bin.apply(this, arguments); }
            },
            "getPageRanges": {
              "value": function () { return this.get_page_ranges.apply(this, arguments); }
            },
            "getPageSet": {
              "value": function () { return this.get_page_set.apply(this, arguments); }
            },
            "getPaperHeight": {
              "value": function () { return this.get_paper_height.apply(this, arguments); }
            },
            "getPaperSize": {
              "value": function () { return this.get_paper_size.apply(this, arguments); }
            },
            "getPaperWidth": {
              "value": function () { return this.get_paper_width.apply(this, arguments); }
            },
            "getPrintPages": {
              "value": function () { return this.get_print_pages.apply(this, arguments); }
            },
            "getPrinter": {
              "value": function () { return this.get_printer.apply(this, arguments); }
            },
            "getPrinterLpi": {
              "value": function () { return this.get_printer_lpi.apply(this, arguments); }
            },
            "getQuality": {
              "value": function () { return this.get_quality.apply(this, arguments); }
            },
            "getResolution": {
              "value": function () { return this.get_resolution.apply(this, arguments); }
            },
            "getResolutionX": {
              "value": function () { return this.get_resolution_x.apply(this, arguments); }
            },
            "getResolutionY": {
              "value": function () { return this.get_resolution_y.apply(this, arguments); }
            },
            "getReverse": {
              "value": function () { return this.get_reverse.apply(this, arguments); }
            },
            "getScale": {
              "value": function () { return this.get_scale.apply(this, arguments); }
            },
            "getUseColor": {
              "value": function () { return this.get_use_color.apply(this, arguments); }
            },
            "hasKey": {
              "value": function () { return this.has_key.apply(this, arguments); }
            },
            "loadFile": {
              "value": function () { return this.load_file.apply(this, arguments); }
            },
            "loadKeyFile": {
              "value": function () { return this.load_key_file.apply(this, arguments); }
            },
            "setBool": {
              "value": function () { return this.set_bool.apply(this, arguments); }
            },
            "setCollate": {
              "value": function () { return this.set_collate.apply(this, arguments); }
            },
            "setDefaultSource": {
              "value": function () { return this.set_default_source.apply(this, arguments); }
            },
            "setDither": {
              "value": function () { return this.set_dither.apply(this, arguments); }
            },
            "setDouble": {
              "value": function () { return this.set_double.apply(this, arguments); }
            },
            "setDuplex": {
              "value": function () { return this.set_duplex.apply(this, arguments); }
            },
            "setFinishings": {
              "value": function () { return this.set_finishings.apply(this, arguments); }
            },
            "setInt": {
              "value": function () { return this.set_int.apply(this, arguments); }
            },
            "setLength": {
              "value": function () { return this.set_length.apply(this, arguments); }
            },
            "setMediaType": {
              "value": function () { return this.set_media_type.apply(this, arguments); }
            },
            "setNCopies": {
              "value": function () { return this.set_n_copies.apply(this, arguments); }
            },
            "setNumberUp": {
              "value": function () { return this.set_number_up.apply(this, arguments); }
            },
            "setNumberUpLayout": {
              "value": function () { return this.set_number_up_layout.apply(this, arguments); }
            },
            "setOrientation": {
              "value": function () { return this.set_orientation.apply(this, arguments); }
            },
            "setOutputBin": {
              "value": function () { return this.set_output_bin.apply(this, arguments); }
            },
            "setPageRanges": {
              "value": function () { return this.set_page_ranges.apply(this, arguments); }
            },
            "setPageSet": {
              "value": function () { return this.set_page_set.apply(this, arguments); }
            },
            "setPaperHeight": {
              "value": function () { return this.set_paper_height.apply(this, arguments); }
            },
            "setPaperSize": {
              "value": function () { return this.set_paper_size.apply(this, arguments); }
            },
            "setPaperWidth": {
              "value": function () { return this.set_paper_width.apply(this, arguments); }
            },
            "setPrintPages": {
              "value": function () { return this.set_print_pages.apply(this, arguments); }
            },
            "setPrinter": {
              "value": function () { return this.set_printer.apply(this, arguments); }
            },
            "setPrinterLpi": {
              "value": function () { return this.set_printer_lpi.apply(this, arguments); }
            },
            "setQuality": {
              "value": function () { return this.set_quality.apply(this, arguments); }
            },
            "setResolution": {
              "value": function () { return this.set_resolution.apply(this, arguments); }
            },
            "setResolutionXy": {
              "value": function () { return this.set_resolution_xy.apply(this, arguments); }
            },
            "setReverse": {
              "value": function () { return this.set_reverse.apply(this, arguments); }
            },
            "setScale": {
              "value": function () { return this.set_scale.apply(this, arguments); }
            },
            "setUseColor": {
              "value": function () { return this.set_use_color.apply(this, arguments); }
            },
            "toFile": {
              "value": function () { return this.to_file.apply(this, arguments); }
            },
            "toKeyFile": {
              "value": function () { return this.to_key_file.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "ProgressBar": {
          "prototype": {
            "getEllipsize": {
              "value": function () { return this.get_ellipsize.apply(this, arguments); }
            },
            "getFraction": {
              "value": function () { return this.get_fraction.apply(this, arguments); }
            },
            "getInverted": {
              "value": function () { return this.get_inverted.apply(this, arguments); }
            },
            "getPulseStep": {
              "value": function () { return this.get_pulse_step.apply(this, arguments); }
            },
            "getShowText": {
              "value": function () { return this.get_show_text.apply(this, arguments); }
            },
            "getText": {
              "value": function () { return this.get_text.apply(this, arguments); }
            },
            "setEllipsize": {
              "value": function () { return this.set_ellipsize.apply(this, arguments); }
            },
            "setFraction": {
              "value": function () { return this.set_fraction.apply(this, arguments); }
            },
            "setInverted": {
              "value": function () { return this.set_inverted.apply(this, arguments); }
            },
            "setPulseStep": {
              "value": function () { return this.set_pulse_step.apply(this, arguments); }
            },
            "setShowText": {
              "value": function () { return this.set_show_text.apply(this, arguments); }
            },
            "setText": {
              "value": function () { return this.set_text.apply(this, arguments); }
            },
            "pulseStep": {
              "get": function () { return this.pulse_step; },
              "set": function (value) { this.pulse_step = value; }
            },
            "showText": {
              "get": function () { return this.show_text; },
              "set": function (value) { this.show_text = value; }
            }
          },
          "static": {}
        },
        "ProgressBarAccessible": {
          "prototype": {},
          "static": {}
        },
        "RadioAction": {
          "prototype": {
            "getCurrentValue": {
              "value": function () { return this.get_current_value.apply(this, arguments); }
            },
            "getGroup": {
              "value": function () { return this.get_group.apply(this, arguments); }
            },
            "joinGroup": {
              "value": function () { return this.join_group.apply(this, arguments); }
            },
            "setCurrentValue": {
              "value": function () { return this.set_current_value.apply(this, arguments); }
            },
            "setGroup": {
              "value": function () { return this.set_group.apply(this, arguments); }
            },
            "currentValue": {
              "get": function () { return this.current_value; },
              "set": function (value) { this.current_value = value; }
            }
          },
          "static": {}
        },
        "RadioButton": {
          "prototype": {
            "getGroup": {
              "value": function () { return this.get_group.apply(this, arguments); }
            },
            "joinGroup": {
              "value": function () { return this.join_group.apply(this, arguments); }
            },
            "setGroup": {
              "value": function () { return this.set_group.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "RadioButtonAccessible": {
          "prototype": {},
          "static": {}
        },
        "RadioMenuItem": {
          "prototype": {
            "getGroup": {
              "value": function () { return this.get_group.apply(this, arguments); }
            },
            "joinGroup": {
              "value": function () { return this.join_group.apply(this, arguments); }
            },
            "setGroup": {
              "value": function () { return this.set_group.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "RadioMenuItemAccessible": {
          "prototype": {},
          "static": {}
        },
        "RadioToolButton": {
          "prototype": {
            "getGroup": {
              "value": function () { return this.get_group.apply(this, arguments); }
            },
            "setGroup": {
              "value": function () { return this.set_group.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Range": {
          "prototype": {
            "getAdjustment": {
              "value": function () { return this.get_adjustment.apply(this, arguments); }
            },
            "getFillLevel": {
              "value": function () { return this.get_fill_level.apply(this, arguments); }
            },
            "getFlippable": {
              "value": function () { return this.get_flippable.apply(this, arguments); }
            },
            "getInverted": {
              "value": function () { return this.get_inverted.apply(this, arguments); }
            },
            "getLowerStepperSensitivity": {
              "value": function () { return this.get_lower_stepper_sensitivity.apply(this, arguments); }
            },
            "getMinSliderSize": {
              "value": function () { return this.get_min_slider_size.apply(this, arguments); }
            },
            "getRangeRect": {
              "value": function () { return this.get_range_rect.apply(this, arguments); }
            },
            "getRestrictToFillLevel": {
              "value": function () { return this.get_restrict_to_fill_level.apply(this, arguments); }
            },
            "getRoundDigits": {
              "value": function () { return this.get_round_digits.apply(this, arguments); }
            },
            "getShowFillLevel": {
              "value": function () { return this.get_show_fill_level.apply(this, arguments); }
            },
            "getSliderRange": {
              "value": function () { return this.get_slider_range.apply(this, arguments); }
            },
            "getSliderSizeFixed": {
              "value": function () { return this.get_slider_size_fixed.apply(this, arguments); }
            },
            "getUpperStepperSensitivity": {
              "value": function () { return this.get_upper_stepper_sensitivity.apply(this, arguments); }
            },
            "getValue": {
              "value": function () { return this.get_value.apply(this, arguments); }
            },
            "setAdjustment": {
              "value": function () { return this.set_adjustment.apply(this, arguments); }
            },
            "setFillLevel": {
              "value": function () { return this.set_fill_level.apply(this, arguments); }
            },
            "setFlippable": {
              "value": function () { return this.set_flippable.apply(this, arguments); }
            },
            "setIncrements": {
              "value": function () { return this.set_increments.apply(this, arguments); }
            },
            "setInverted": {
              "value": function () { return this.set_inverted.apply(this, arguments); }
            },
            "setLowerStepperSensitivity": {
              "value": function () { return this.set_lower_stepper_sensitivity.apply(this, arguments); }
            },
            "setMinSliderSize": {
              "value": function () { return this.set_min_slider_size.apply(this, arguments); }
            },
            "setRange": {
              "value": function () { return this.set_range.apply(this, arguments); }
            },
            "setRestrictToFillLevel": {
              "value": function () { return this.set_restrict_to_fill_level.apply(this, arguments); }
            },
            "setRoundDigits": {
              "value": function () { return this.set_round_digits.apply(this, arguments); }
            },
            "setShowFillLevel": {
              "value": function () { return this.set_show_fill_level.apply(this, arguments); }
            },
            "setSliderSizeFixed": {
              "value": function () { return this.set_slider_size_fixed.apply(this, arguments); }
            },
            "setUpperStepperSensitivity": {
              "value": function () { return this.set_upper_stepper_sensitivity.apply(this, arguments); }
            },
            "setValue": {
              "value": function () { return this.set_value.apply(this, arguments); }
            },
            "fillLevel": {
              "get": function () { return this.fill_level; },
              "set": function (value) { this.fill_level = value; }
            },
            "lowerStepperSensitivity": {
              "get": function () { return this.lower_stepper_sensitivity; },
              "set": function (value) { this.lower_stepper_sensitivity = value; }
            },
            "restrictToFillLevel": {
              "get": function () { return this.restrict_to_fill_level; },
              "set": function (value) { this.restrict_to_fill_level = value; }
            },
            "roundDigits": {
              "get": function () { return this.round_digits; },
              "set": function (value) { this.round_digits = value; }
            },
            "showFillLevel": {
              "get": function () { return this.show_fill_level; },
              "set": function (value) { this.show_fill_level = value; }
            },
            "upperStepperSensitivity": {
              "get": function () { return this.upper_stepper_sensitivity; },
              "set": function (value) { this.upper_stepper_sensitivity = value; }
            }
          },
          "static": {}
        },
        "RangeAccessible": {
          "prototype": {},
          "static": {}
        },
        "RcStyle": {
          "prototype": {},
          "static": {}
        },
        "RecentAction": {
          "prototype": {
            "getShowNumbers": {
              "value": function () { return this.get_show_numbers.apply(this, arguments); }
            },
            "setShowNumbers": {
              "value": function () { return this.set_show_numbers.apply(this, arguments); }
            },
            "showNumbers": {
              "get": function () { return this.show_numbers; },
              "set": function (value) { this.show_numbers = value; }
            }
          },
          "static": {}
        },
        "RecentChooserDialog": {
          "prototype": {},
          "static": {}
        },
        "RecentChooserMenu": {
          "prototype": {
            "getShowNumbers": {
              "value": function () { return this.get_show_numbers.apply(this, arguments); }
            },
            "setShowNumbers": {
              "value": function () { return this.set_show_numbers.apply(this, arguments); }
            },
            "showNumbers": {
              "get": function () { return this.show_numbers; },
              "set": function (value) { this.show_numbers = value; }
            }
          },
          "static": {}
        },
        "RecentChooserWidget": {
          "prototype": {},
          "static": {}
        },
        "RecentFilter": {
          "prototype": {
            "addAge": {
              "value": function () { return this.add_age.apply(this, arguments); }
            },
            "addApplication": {
              "value": function () { return this.add_application.apply(this, arguments); }
            },
            "addCustom": {
              "value": function () { return this.add_custom.apply(this, arguments); }
            },
            "addGroup": {
              "value": function () { return this.add_group.apply(this, arguments); }
            },
            "addMimeType": {
              "value": function () { return this.add_mime_type.apply(this, arguments); }
            },
            "addPattern": {
              "value": function () { return this.add_pattern.apply(this, arguments); }
            },
            "addPixbufFormats": {
              "value": function () { return this.add_pixbuf_formats.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getNeeded": {
              "value": function () { return this.get_needed.apply(this, arguments); }
            },
            "setName": {
              "value": function () { return this.set_name.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "RecentManager": {
          "prototype": {
            "addFull": {
              "value": function () { return this.add_full.apply(this, arguments); }
            },
            "addItem": {
              "value": function () { return this.add_item.apply(this, arguments); }
            },
            "getItems": {
              "value": function () { return this.get_items.apply(this, arguments); }
            },
            "hasItem": {
              "value": function () { return this.has_item.apply(this, arguments); }
            },
            "lookupItem": {
              "value": function () { return this.lookup_item.apply(this, arguments); }
            },
            "moveItem": {
              "value": function () { return this.move_item.apply(this, arguments); }
            },
            "purgeItems": {
              "value": function () { return this.purge_items.apply(this, arguments); }
            },
            "removeItem": {
              "value": function () { return this.remove_item.apply(this, arguments); }
            }
          },
          "static": {
            "getDefault": {
              "value": function () { return this.get_default.apply(this, arguments); }
            }
          }
        },
        "RendererCellAccessible": {
          "prototype": {},
          "static": {}
        },
        "Revealer": {
          "prototype": {
            "getChildRevealed": {
              "value": function () { return this.get_child_revealed.apply(this, arguments); }
            },
            "getRevealChild": {
              "value": function () { return this.get_reveal_child.apply(this, arguments); }
            },
            "getTransitionDuration": {
              "value": function () { return this.get_transition_duration.apply(this, arguments); }
            },
            "getTransitionType": {
              "value": function () { return this.get_transition_type.apply(this, arguments); }
            },
            "setRevealChild": {
              "value": function () { return this.set_reveal_child.apply(this, arguments); }
            },
            "setTransitionDuration": {
              "value": function () { return this.set_transition_duration.apply(this, arguments); }
            },
            "setTransitionType": {
              "value": function () { return this.set_transition_type.apply(this, arguments); }
            },
            "childRevealed": {
              "get": function () { return this.child_revealed; },
              "set": function (value) { this.child_revealed = value; }
            },
            "revealChild": {
              "get": function () { return this.reveal_child; },
              "set": function (value) { this.reveal_child = value; }
            },
            "transitionDuration": {
              "get": function () { return this.transition_duration; },
              "set": function (value) { this.transition_duration = value; }
            },
            "transitionType": {
              "get": function () { return this.transition_type; },
              "set": function (value) { this.transition_type = value; }
            }
          },
          "static": {}
        },
        "Scale": {
          "prototype": {
            "addMark": {
              "value": function () { return this.add_mark.apply(this, arguments); }
            },
            "clearMarks": {
              "value": function () { return this.clear_marks.apply(this, arguments); }
            },
            "getDigits": {
              "value": function () { return this.get_digits.apply(this, arguments); }
            },
            "getDrawValue": {
              "value": function () { return this.get_draw_value.apply(this, arguments); }
            },
            "getHasOrigin": {
              "value": function () { return this.get_has_origin.apply(this, arguments); }
            },
            "getLayout": {
              "value": function () { return this.get_layout.apply(this, arguments); }
            },
            "getLayoutOffsets": {
              "value": function () { return this.get_layout_offsets.apply(this, arguments); }
            },
            "getValuePos": {
              "value": function () { return this.get_value_pos.apply(this, arguments); }
            },
            "setDigits": {
              "value": function () { return this.set_digits.apply(this, arguments); }
            },
            "setDrawValue": {
              "value": function () { return this.set_draw_value.apply(this, arguments); }
            },
            "setHasOrigin": {
              "value": function () { return this.set_has_origin.apply(this, arguments); }
            },
            "setValuePos": {
              "value": function () { return this.set_value_pos.apply(this, arguments); }
            },
            "drawValue": {
              "get": function () { return this.draw_value; },
              "set": function (value) { this.draw_value = value; }
            },
            "hasOrigin": {
              "get": function () { return this.has_origin; },
              "set": function (value) { this.has_origin = value; }
            },
            "valuePos": {
              "get": function () { return this.value_pos; },
              "set": function (value) { this.value_pos = value; }
            }
          },
          "static": {}
        },
        "ScaleAccessible": {
          "prototype": {},
          "static": {}
        },
        "ScaleButton": {
          "prototype": {
            "getAdjustment": {
              "value": function () { return this.get_adjustment.apply(this, arguments); }
            },
            "getMinusButton": {
              "value": function () { return this.get_minus_button.apply(this, arguments); }
            },
            "getPlusButton": {
              "value": function () { return this.get_plus_button.apply(this, arguments); }
            },
            "getPopup": {
              "value": function () { return this.get_popup.apply(this, arguments); }
            },
            "getValue": {
              "value": function () { return this.get_value.apply(this, arguments); }
            },
            "setAdjustment": {
              "value": function () { return this.set_adjustment.apply(this, arguments); }
            },
            "setIcons": {
              "value": function () { return this.set_icons.apply(this, arguments); }
            },
            "setValue": {
              "value": function () { return this.set_value.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "ScaleButtonAccessible": {
          "prototype": {},
          "static": {}
        },
        "Scrollbar": {
          "prototype": {},
          "static": {}
        },
        "ScrolledWindow": {
          "prototype": {
            "addWithViewport": {
              "value": function () { return this.add_with_viewport.apply(this, arguments); }
            },
            "getCaptureButtonPress": {
              "value": function () { return this.get_capture_button_press.apply(this, arguments); }
            },
            "getHadjustment": {
              "value": function () { return this.get_hadjustment.apply(this, arguments); }
            },
            "getHscrollbar": {
              "value": function () { return this.get_hscrollbar.apply(this, arguments); }
            },
            "getKineticScrolling": {
              "value": function () { return this.get_kinetic_scrolling.apply(this, arguments); }
            },
            "getMinContentHeight": {
              "value": function () { return this.get_min_content_height.apply(this, arguments); }
            },
            "getMinContentWidth": {
              "value": function () { return this.get_min_content_width.apply(this, arguments); }
            },
            "getOverlayScrolling": {
              "value": function () { return this.get_overlay_scrolling.apply(this, arguments); }
            },
            "getPlacement": {
              "value": function () { return this.get_placement.apply(this, arguments); }
            },
            "getPolicy": {
              "value": function () { return this.get_policy.apply(this, arguments); }
            },
            "getShadowType": {
              "value": function () { return this.get_shadow_type.apply(this, arguments); }
            },
            "getVadjustment": {
              "value": function () { return this.get_vadjustment.apply(this, arguments); }
            },
            "getVscrollbar": {
              "value": function () { return this.get_vscrollbar.apply(this, arguments); }
            },
            "setCaptureButtonPress": {
              "value": function () { return this.set_capture_button_press.apply(this, arguments); }
            },
            "setHadjustment": {
              "value": function () { return this.set_hadjustment.apply(this, arguments); }
            },
            "setKineticScrolling": {
              "value": function () { return this.set_kinetic_scrolling.apply(this, arguments); }
            },
            "setMinContentHeight": {
              "value": function () { return this.set_min_content_height.apply(this, arguments); }
            },
            "setMinContentWidth": {
              "value": function () { return this.set_min_content_width.apply(this, arguments); }
            },
            "setOverlayScrolling": {
              "value": function () { return this.set_overlay_scrolling.apply(this, arguments); }
            },
            "setPlacement": {
              "value": function () { return this.set_placement.apply(this, arguments); }
            },
            "setPolicy": {
              "value": function () { return this.set_policy.apply(this, arguments); }
            },
            "setShadowType": {
              "value": function () { return this.set_shadow_type.apply(this, arguments); }
            },
            "setVadjustment": {
              "value": function () { return this.set_vadjustment.apply(this, arguments); }
            },
            "unsetPlacement": {
              "value": function () { return this.unset_placement.apply(this, arguments); }
            },
            "hscrollbarPolicy": {
              "get": function () { return this.hscrollbar_policy; },
              "set": function (value) { this.hscrollbar_policy = value; }
            },
            "kineticScrolling": {
              "get": function () { return this.kinetic_scrolling; },
              "set": function (value) { this.kinetic_scrolling = value; }
            },
            "minContentHeight": {
              "get": function () { return this.min_content_height; },
              "set": function (value) { this.min_content_height = value; }
            },
            "minContentWidth": {
              "get": function () { return this.min_content_width; },
              "set": function (value) { this.min_content_width = value; }
            },
            "overlayScrolling": {
              "get": function () { return this.overlay_scrolling; },
              "set": function (value) { this.overlay_scrolling = value; }
            },
            "shadowType": {
              "get": function () { return this.shadow_type; },
              "set": function (value) { this.shadow_type = value; }
            },
            "vscrollbarPolicy": {
              "get": function () { return this.vscrollbar_policy; },
              "set": function (value) { this.vscrollbar_policy = value; }
            },
            "windowPlacement": {
              "get": function () { return this.window_placement; },
              "set": function (value) { this.window_placement = value; }
            },
            "windowPlacementSet": {
              "get": function () { return this.window_placement_set; },
              "set": function (value) { this.window_placement_set = value; }
            }
          },
          "static": {}
        },
        "ScrolledWindowAccessible": {
          "prototype": {},
          "static": {}
        },
        "SearchBar": {
          "prototype": {
            "connectEntry": {
              "value": function () { return this.connect_entry.apply(this, arguments); }
            },
            "getSearchMode": {
              "value": function () { return this.get_search_mode.apply(this, arguments); }
            },
            "getShowCloseButton": {
              "value": function () { return this.get_show_close_button.apply(this, arguments); }
            },
            "handleEvent": {
              "value": function () { return this.handle_event.apply(this, arguments); }
            },
            "setSearchMode": {
              "value": function () { return this.set_search_mode.apply(this, arguments); }
            },
            "setShowCloseButton": {
              "value": function () { return this.set_show_close_button.apply(this, arguments); }
            },
            "searchModeEnabled": {
              "get": function () { return this.search_mode_enabled; },
              "set": function (value) { this.search_mode_enabled = value; }
            },
            "showCloseButton": {
              "get": function () { return this.show_close_button; },
              "set": function (value) { this.show_close_button = value; }
            }
          },
          "static": {}
        },
        "SearchEntry": {
          "prototype": {
            "handleEvent": {
              "value": function () { return this.handle_event.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Separator": {
          "prototype": {},
          "static": {}
        },
        "SeparatorMenuItem": {
          "prototype": {},
          "static": {}
        },
        "SeparatorToolItem": {
          "prototype": {
            "getDraw": {
              "value": function () { return this.get_draw.apply(this, arguments); }
            },
            "setDraw": {
              "value": function () { return this.set_draw.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Settings": {
          "prototype": {
            "setDoubleProperty": {
              "value": function () { return this.set_double_property.apply(this, arguments); }
            },
            "setLongProperty": {
              "value": function () { return this.set_long_property.apply(this, arguments); }
            },
            "setPropertyValue": {
              "value": function () { return this.set_property_value.apply(this, arguments); }
            },
            "setStringProperty": {
              "value": function () { return this.set_string_property.apply(this, arguments); }
            },
            "colorHash": {
              "get": function () { return this.color_hash; },
              "set": function (value) { this.color_hash = value; }
            },
            "gtkAlternativeButtonOrder": {
              "get": function () { return this.gtk_alternative_button_order; },
              "set": function (value) { this.gtk_alternative_button_order = value; }
            },
            "gtkAlternativeSortArrows": {
              "get": function () { return this.gtk_alternative_sort_arrows; },
              "set": function (value) { this.gtk_alternative_sort_arrows = value; }
            },
            "gtkApplicationPreferDarkTheme": {
              "get": function () { return this.gtk_application_prefer_dark_theme; },
              "set": function (value) { this.gtk_application_prefer_dark_theme = value; }
            },
            "gtkAutoMnemonics": {
              "get": function () { return this.gtk_auto_mnemonics; },
              "set": function (value) { this.gtk_auto_mnemonics = value; }
            },
            "gtkButtonImages": {
              "get": function () { return this.gtk_button_images; },
              "set": function (value) { this.gtk_button_images = value; }
            },
            "gtkCanChangeAccels": {
              "get": function () { return this.gtk_can_change_accels; },
              "set": function (value) { this.gtk_can_change_accels = value; }
            },
            "gtkColorPalette": {
              "get": function () { return this.gtk_color_palette; },
              "set": function (value) { this.gtk_color_palette = value; }
            },
            "gtkColorScheme": {
              "get": function () { return this.gtk_color_scheme; },
              "set": function (value) { this.gtk_color_scheme = value; }
            },
            "gtkCursorBlink": {
              "get": function () { return this.gtk_cursor_blink; },
              "set": function (value) { this.gtk_cursor_blink = value; }
            },
            "gtkCursorBlinkTime": {
              "get": function () { return this.gtk_cursor_blink_time; },
              "set": function (value) { this.gtk_cursor_blink_time = value; }
            },
            "gtkCursorBlinkTimeout": {
              "get": function () { return this.gtk_cursor_blink_timeout; },
              "set": function (value) { this.gtk_cursor_blink_timeout = value; }
            },
            "gtkCursorThemeName": {
              "get": function () { return this.gtk_cursor_theme_name; },
              "set": function (value) { this.gtk_cursor_theme_name = value; }
            },
            "gtkCursorThemeSize": {
              "get": function () { return this.gtk_cursor_theme_size; },
              "set": function (value) { this.gtk_cursor_theme_size = value; }
            },
            "gtkDecorationLayout": {
              "get": function () { return this.gtk_decoration_layout; },
              "set": function (value) { this.gtk_decoration_layout = value; }
            },
            "gtkDialogsUseHeader": {
              "get": function () { return this.gtk_dialogs_use_header; },
              "set": function (value) { this.gtk_dialogs_use_header = value; }
            },
            "gtkDndDragThreshold": {
              "get": function () { return this.gtk_dnd_drag_threshold; },
              "set": function (value) { this.gtk_dnd_drag_threshold = value; }
            },
            "gtkDoubleClickDistance": {
              "get": function () { return this.gtk_double_click_distance; },
              "set": function (value) { this.gtk_double_click_distance = value; }
            },
            "gtkDoubleClickTime": {
              "get": function () { return this.gtk_double_click_time; },
              "set": function (value) { this.gtk_double_click_time = value; }
            },
            "gtkEnableAccels": {
              "get": function () { return this.gtk_enable_accels; },
              "set": function (value) { this.gtk_enable_accels = value; }
            },
            "gtkEnableAnimations": {
              "get": function () { return this.gtk_enable_animations; },
              "set": function (value) { this.gtk_enable_animations = value; }
            },
            "gtkEnableEventSounds": {
              "get": function () { return this.gtk_enable_event_sounds; },
              "set": function (value) { this.gtk_enable_event_sounds = value; }
            },
            "gtkEnableInputFeedbackSounds": {
              "get": function () { return this.gtk_enable_input_feedback_sounds; },
              "set": function (value) { this.gtk_enable_input_feedback_sounds = value; }
            },
            "gtkEnableMnemonics": {
              "get": function () { return this.gtk_enable_mnemonics; },
              "set": function (value) { this.gtk_enable_mnemonics = value; }
            },
            "gtkEnablePrimaryPaste": {
              "get": function () { return this.gtk_enable_primary_paste; },
              "set": function (value) { this.gtk_enable_primary_paste = value; }
            },
            "gtkEnableTooltips": {
              "get": function () { return this.gtk_enable_tooltips; },
              "set": function (value) { this.gtk_enable_tooltips = value; }
            },
            "gtkEntryPasswordHintTimeout": {
              "get": function () { return this.gtk_entry_password_hint_timeout; },
              "set": function (value) { this.gtk_entry_password_hint_timeout = value; }
            },
            "gtkEntrySelectOnFocus": {
              "get": function () { return this.gtk_entry_select_on_focus; },
              "set": function (value) { this.gtk_entry_select_on_focus = value; }
            },
            "gtkErrorBell": {
              "get": function () { return this.gtk_error_bell; },
              "set": function (value) { this.gtk_error_bell = value; }
            },
            "gtkFallbackIconTheme": {
              "get": function () { return this.gtk_fallback_icon_theme; },
              "set": function (value) { this.gtk_fallback_icon_theme = value; }
            },
            "gtkFileChooserBackend": {
              "get": function () { return this.gtk_file_chooser_backend; },
              "set": function (value) { this.gtk_file_chooser_backend = value; }
            },
            "gtkFontName": {
              "get": function () { return this.gtk_font_name; },
              "set": function (value) { this.gtk_font_name = value; }
            },
            "gtkFontconfigTimestamp": {
              "get": function () { return this.gtk_fontconfig_timestamp; },
              "set": function (value) { this.gtk_fontconfig_timestamp = value; }
            },
            "gtkIconSizes": {
              "get": function () { return this.gtk_icon_sizes; },
              "set": function (value) { this.gtk_icon_sizes = value; }
            },
            "gtkIconThemeName": {
              "get": function () { return this.gtk_icon_theme_name; },
              "set": function (value) { this.gtk_icon_theme_name = value; }
            },
            "gtkImModule": {
              "get": function () { return this.gtk_im_module; },
              "set": function (value) { this.gtk_im_module = value; }
            },
            "gtkImPreeditStyle": {
              "get": function () { return this.gtk_im_preedit_style; },
              "set": function (value) { this.gtk_im_preedit_style = value; }
            },
            "gtkImStatusStyle": {
              "get": function () { return this.gtk_im_status_style; },
              "set": function (value) { this.gtk_im_status_style = value; }
            },
            "gtkKeyThemeName": {
              "get": function () { return this.gtk_key_theme_name; },
              "set": function (value) { this.gtk_key_theme_name = value; }
            },
            "gtkKeynavCursorOnly": {
              "get": function () { return this.gtk_keynav_cursor_only; },
              "set": function (value) { this.gtk_keynav_cursor_only = value; }
            },
            "gtkKeynavWrapAround": {
              "get": function () { return this.gtk_keynav_wrap_around; },
              "set": function (value) { this.gtk_keynav_wrap_around = value; }
            },
            "gtkLabelSelectOnFocus": {
              "get": function () { return this.gtk_label_select_on_focus; },
              "set": function (value) { this.gtk_label_select_on_focus = value; }
            },
            "gtkLongPressTime": {
              "get": function () { return this.gtk_long_press_time; },
              "set": function (value) { this.gtk_long_press_time = value; }
            },
            "gtkMenuBarAccel": {
              "get": function () { return this.gtk_menu_bar_accel; },
              "set": function (value) { this.gtk_menu_bar_accel = value; }
            },
            "gtkMenuBarPopupDelay": {
              "get": function () { return this.gtk_menu_bar_popup_delay; },
              "set": function (value) { this.gtk_menu_bar_popup_delay = value; }
            },
            "gtkMenuImages": {
              "get": function () { return this.gtk_menu_images; },
              "set": function (value) { this.gtk_menu_images = value; }
            },
            "gtkMenuPopdownDelay": {
              "get": function () { return this.gtk_menu_popdown_delay; },
              "set": function (value) { this.gtk_menu_popdown_delay = value; }
            },
            "gtkMenuPopupDelay": {
              "get": function () { return this.gtk_menu_popup_delay; },
              "set": function (value) { this.gtk_menu_popup_delay = value; }
            },
            "gtkModules": {
              "get": function () { return this.gtk_modules; },
              "set": function (value) { this.gtk_modules = value; }
            },
            "gtkPrimaryButtonWarpsSlider": {
              "get": function () { return this.gtk_primary_button_warps_slider; },
              "set": function (value) { this.gtk_primary_button_warps_slider = value; }
            },
            "gtkPrintBackends": {
              "get": function () { return this.gtk_print_backends; },
              "set": function (value) { this.gtk_print_backends = value; }
            },
            "gtkPrintPreviewCommand": {
              "get": function () { return this.gtk_print_preview_command; },
              "set": function (value) { this.gtk_print_preview_command = value; }
            },
            "gtkRecentFilesEnabled": {
              "get": function () { return this.gtk_recent_files_enabled; },
              "set": function (value) { this.gtk_recent_files_enabled = value; }
            },
            "gtkRecentFilesLimit": {
              "get": function () { return this.gtk_recent_files_limit; },
              "set": function (value) { this.gtk_recent_files_limit = value; }
            },
            "gtkRecentFilesMaxAge": {
              "get": function () { return this.gtk_recent_files_max_age; },
              "set": function (value) { this.gtk_recent_files_max_age = value; }
            },
            "gtkScrolledWindowPlacement": {
              "get": function () { return this.gtk_scrolled_window_placement; },
              "set": function (value) { this.gtk_scrolled_window_placement = value; }
            },
            "gtkShellShowsAppMenu": {
              "get": function () { return this.gtk_shell_shows_app_menu; },
              "set": function (value) { this.gtk_shell_shows_app_menu = value; }
            },
            "gtkShellShowsDesktop": {
              "get": function () { return this.gtk_shell_shows_desktop; },
              "set": function (value) { this.gtk_shell_shows_desktop = value; }
            },
            "gtkShellShowsMenubar": {
              "get": function () { return this.gtk_shell_shows_menubar; },
              "set": function (value) { this.gtk_shell_shows_menubar = value; }
            },
            "gtkShowInputMethodMenu": {
              "get": function () { return this.gtk_show_input_method_menu; },
              "set": function (value) { this.gtk_show_input_method_menu = value; }
            },
            "gtkShowUnicodeMenu": {
              "get": function () { return this.gtk_show_unicode_menu; },
              "set": function (value) { this.gtk_show_unicode_menu = value; }
            },
            "gtkSoundThemeName": {
              "get": function () { return this.gtk_sound_theme_name; },
              "set": function (value) { this.gtk_sound_theme_name = value; }
            },
            "gtkSplitCursor": {
              "get": function () { return this.gtk_split_cursor; },
              "set": function (value) { this.gtk_split_cursor = value; }
            },
            "gtkThemeName": {
              "get": function () { return this.gtk_theme_name; },
              "set": function (value) { this.gtk_theme_name = value; }
            },
            "gtkTimeoutExpand": {
              "get": function () { return this.gtk_timeout_expand; },
              "set": function (value) { this.gtk_timeout_expand = value; }
            },
            "gtkTimeoutInitial": {
              "get": function () { return this.gtk_timeout_initial; },
              "set": function (value) { this.gtk_timeout_initial = value; }
            },
            "gtkTimeoutRepeat": {
              "get": function () { return this.gtk_timeout_repeat; },
              "set": function (value) { this.gtk_timeout_repeat = value; }
            },
            "gtkTitlebarDoubleClick": {
              "get": function () { return this.gtk_titlebar_double_click; },
              "set": function (value) { this.gtk_titlebar_double_click = value; }
            },
            "gtkTitlebarMiddleClick": {
              "get": function () { return this.gtk_titlebar_middle_click; },
              "set": function (value) { this.gtk_titlebar_middle_click = value; }
            },
            "gtkTitlebarRightClick": {
              "get": function () { return this.gtk_titlebar_right_click; },
              "set": function (value) { this.gtk_titlebar_right_click = value; }
            },
            "gtkToolbarIconSize": {
              "get": function () { return this.gtk_toolbar_icon_size; },
              "set": function (value) { this.gtk_toolbar_icon_size = value; }
            },
            "gtkToolbarStyle": {
              "get": function () { return this.gtk_toolbar_style; },
              "set": function (value) { this.gtk_toolbar_style = value; }
            },
            "gtkTooltipBrowseModeTimeout": {
              "get": function () { return this.gtk_tooltip_browse_mode_timeout; },
              "set": function (value) { this.gtk_tooltip_browse_mode_timeout = value; }
            },
            "gtkTooltipBrowseTimeout": {
              "get": function () { return this.gtk_tooltip_browse_timeout; },
              "set": function (value) { this.gtk_tooltip_browse_timeout = value; }
            },
            "gtkTooltipTimeout": {
              "get": function () { return this.gtk_tooltip_timeout; },
              "set": function (value) { this.gtk_tooltip_timeout = value; }
            },
            "gtkTouchscreenMode": {
              "get": function () { return this.gtk_touchscreen_mode; },
              "set": function (value) { this.gtk_touchscreen_mode = value; }
            },
            "gtkVisibleFocus": {
              "get": function () { return this.gtk_visible_focus; },
              "set": function (value) { this.gtk_visible_focus = value; }
            },
            "gtkXftAntialias": {
              "get": function () { return this.gtk_xft_antialias; },
              "set": function (value) { this.gtk_xft_antialias = value; }
            },
            "gtkXftDpi": {
              "get": function () { return this.gtk_xft_dpi; },
              "set": function (value) { this.gtk_xft_dpi = value; }
            },
            "gtkXftHinting": {
              "get": function () { return this.gtk_xft_hinting; },
              "set": function (value) { this.gtk_xft_hinting = value; }
            },
            "gtkXftHintstyle": {
              "get": function () { return this.gtk_xft_hintstyle; },
              "set": function (value) { this.gtk_xft_hintstyle = value; }
            },
            "gtkXftRgba": {
              "get": function () { return this.gtk_xft_rgba; },
              "set": function (value) { this.gtk_xft_rgba = value; }
            }
          },
          "static": {
            "getDefault": {
              "value": function () { return this.get_default.apply(this, arguments); }
            },
            "getForScreen": {
              "value": function () { return this.get_for_screen.apply(this, arguments); }
            },
            "installProperty": {
              "value": function () { return this.install_property.apply(this, arguments); }
            },
            "installPropertyParser": {
              "value": function () { return this.install_property_parser.apply(this, arguments); }
            }
          }
        },
        "SizeGroup": {
          "prototype": {
            "addWidget": {
              "value": function () { return this.add_widget.apply(this, arguments); }
            },
            "getIgnoreHidden": {
              "value": function () { return this.get_ignore_hidden.apply(this, arguments); }
            },
            "getMode": {
              "value": function () { return this.get_mode.apply(this, arguments); }
            },
            "getWidgets": {
              "value": function () { return this.get_widgets.apply(this, arguments); }
            },
            "removeWidget": {
              "value": function () { return this.remove_widget.apply(this, arguments); }
            },
            "setIgnoreHidden": {
              "value": function () { return this.set_ignore_hidden.apply(this, arguments); }
            },
            "setMode": {
              "value": function () { return this.set_mode.apply(this, arguments); }
            },
            "ignoreHidden": {
              "get": function () { return this.ignore_hidden; },
              "set": function (value) { this.ignore_hidden = value; }
            }
          },
          "static": {}
        },
        "Socket": {
          "prototype": {
            "addId": {
              "value": function () { return this.add_id.apply(this, arguments); }
            },
            "getId": {
              "value": function () { return this.get_id.apply(this, arguments); }
            },
            "getPlugWindow": {
              "value": function () { return this.get_plug_window.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "SpinButton": {
          "prototype": {
            "getAdjustment": {
              "value": function () { return this.get_adjustment.apply(this, arguments); }
            },
            "getDigits": {
              "value": function () { return this.get_digits.apply(this, arguments); }
            },
            "getIncrements": {
              "value": function () { return this.get_increments.apply(this, arguments); }
            },
            "getNumeric": {
              "value": function () { return this.get_numeric.apply(this, arguments); }
            },
            "getRange": {
              "value": function () { return this.get_range.apply(this, arguments); }
            },
            "getSnapToTicks": {
              "value": function () { return this.get_snap_to_ticks.apply(this, arguments); }
            },
            "getUpdatePolicy": {
              "value": function () { return this.get_update_policy.apply(this, arguments); }
            },
            "getValue": {
              "value": function () { return this.get_value.apply(this, arguments); }
            },
            "getValueAsInt": {
              "value": function () { return this.get_value_as_int.apply(this, arguments); }
            },
            "getWrap": {
              "value": function () { return this.get_wrap.apply(this, arguments); }
            },
            "setAdjustment": {
              "value": function () { return this.set_adjustment.apply(this, arguments); }
            },
            "setDigits": {
              "value": function () { return this.set_digits.apply(this, arguments); }
            },
            "setIncrements": {
              "value": function () { return this.set_increments.apply(this, arguments); }
            },
            "setNumeric": {
              "value": function () { return this.set_numeric.apply(this, arguments); }
            },
            "setRange": {
              "value": function () { return this.set_range.apply(this, arguments); }
            },
            "setSnapToTicks": {
              "value": function () { return this.set_snap_to_ticks.apply(this, arguments); }
            },
            "setUpdatePolicy": {
              "value": function () { return this.set_update_policy.apply(this, arguments); }
            },
            "setValue": {
              "value": function () { return this.set_value.apply(this, arguments); }
            },
            "setWrap": {
              "value": function () { return this.set_wrap.apply(this, arguments); }
            },
            "climbRate": {
              "get": function () { return this.climb_rate; },
              "set": function (value) { this.climb_rate = value; }
            },
            "snapToTicks": {
              "get": function () { return this.snap_to_ticks; },
              "set": function (value) { this.snap_to_ticks = value; }
            },
            "updatePolicy": {
              "get": function () { return this.update_policy; },
              "set": function (value) { this.update_policy = value; }
            }
          },
          "static": {}
        },
        "SpinButtonAccessible": {
          "prototype": {},
          "static": {}
        },
        "Spinner": {
          "prototype": {},
          "static": {}
        },
        "SpinnerAccessible": {
          "prototype": {},
          "static": {}
        },
        "Stack": {
          "prototype": {
            "addNamed": {
              "value": function () { return this.add_named.apply(this, arguments); }
            },
            "addTitled": {
              "value": function () { return this.add_titled.apply(this, arguments); }
            },
            "getChildByName": {
              "value": function () { return this.get_child_by_name.apply(this, arguments); }
            },
            "getHhomogeneous": {
              "value": function () { return this.get_hhomogeneous.apply(this, arguments); }
            },
            "getHomogeneous": {
              "value": function () { return this.get_homogeneous.apply(this, arguments); }
            },
            "getInterpolateSize": {
              "value": function () { return this.get_interpolate_size.apply(this, arguments); }
            },
            "getTransitionDuration": {
              "value": function () { return this.get_transition_duration.apply(this, arguments); }
            },
            "getTransitionRunning": {
              "value": function () { return this.get_transition_running.apply(this, arguments); }
            },
            "getTransitionType": {
              "value": function () { return this.get_transition_type.apply(this, arguments); }
            },
            "getVhomogeneous": {
              "value": function () { return this.get_vhomogeneous.apply(this, arguments); }
            },
            "getVisibleChild": {
              "value": function () { return this.get_visible_child.apply(this, arguments); }
            },
            "getVisibleChildName": {
              "value": function () { return this.get_visible_child_name.apply(this, arguments); }
            },
            "setHhomogeneous": {
              "value": function () { return this.set_hhomogeneous.apply(this, arguments); }
            },
            "setHomogeneous": {
              "value": function () { return this.set_homogeneous.apply(this, arguments); }
            },
            "setInterpolateSize": {
              "value": function () { return this.set_interpolate_size.apply(this, arguments); }
            },
            "setTransitionDuration": {
              "value": function () { return this.set_transition_duration.apply(this, arguments); }
            },
            "setTransitionType": {
              "value": function () { return this.set_transition_type.apply(this, arguments); }
            },
            "setVhomogeneous": {
              "value": function () { return this.set_vhomogeneous.apply(this, arguments); }
            },
            "setVisibleChild": {
              "value": function () { return this.set_visible_child.apply(this, arguments); }
            },
            "setVisibleChildFull": {
              "value": function () { return this.set_visible_child_full.apply(this, arguments); }
            },
            "setVisibleChildName": {
              "value": function () { return this.set_visible_child_name.apply(this, arguments); }
            },
            "interpolateSize": {
              "get": function () { return this.interpolate_size; },
              "set": function (value) { this.interpolate_size = value; }
            },
            "transitionDuration": {
              "get": function () { return this.transition_duration; },
              "set": function (value) { this.transition_duration = value; }
            },
            "transitionRunning": {
              "get": function () { return this.transition_running; },
              "set": function (value) { this.transition_running = value; }
            },
            "transitionType": {
              "get": function () { return this.transition_type; },
              "set": function (value) { this.transition_type = value; }
            },
            "visibleChild": {
              "get": function () { return this.visible_child; },
              "set": function (value) { this.visible_child = value; }
            },
            "visibleChildName": {
              "get": function () { return this.visible_child_name; },
              "set": function (value) { this.visible_child_name = value; }
            }
          },
          "static": {}
        },
        "StackSidebar": {
          "prototype": {
            "getStack": {
              "value": function () { return this.get_stack.apply(this, arguments); }
            },
            "setStack": {
              "value": function () { return this.set_stack.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "StackSwitcher": {
          "prototype": {
            "getStack": {
              "value": function () { return this.get_stack.apply(this, arguments); }
            },
            "setStack": {
              "value": function () { return this.set_stack.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "StatusIcon": {
          "prototype": {
            "getGeometry": {
              "value": function () { return this.get_geometry.apply(this, arguments); }
            },
            "getGicon": {
              "value": function () { return this.get_gicon.apply(this, arguments); }
            },
            "getHasTooltip": {
              "value": function () { return this.get_has_tooltip.apply(this, arguments); }
            },
            "getIconName": {
              "value": function () { return this.get_icon_name.apply(this, arguments); }
            },
            "getPixbuf": {
              "value": function () { return this.get_pixbuf.apply(this, arguments); }
            },
            "getScreen": {
              "value": function () { return this.get_screen.apply(this, arguments); }
            },
            "getSize": {
              "value": function () { return this.get_size.apply(this, arguments); }
            },
            "getStock": {
              "value": function () { return this.get_stock.apply(this, arguments); }
            },
            "getStorageType": {
              "value": function () { return this.get_storage_type.apply(this, arguments); }
            },
            "getTitle": {
              "value": function () { return this.get_title.apply(this, arguments); }
            },
            "getTooltipMarkup": {
              "value": function () { return this.get_tooltip_markup.apply(this, arguments); }
            },
            "getTooltipText": {
              "value": function () { return this.get_tooltip_text.apply(this, arguments); }
            },
            "getVisible": {
              "value": function () { return this.get_visible.apply(this, arguments); }
            },
            "getX11WindowId": {
              "value": function () { return this.get_x11_window_id.apply(this, arguments); }
            },
            "isEmbedded": {
              "value": function () { return this.is_embedded.apply(this, arguments); }
            },
            "setFromFile": {
              "value": function () { return this.set_from_file.apply(this, arguments); }
            },
            "setFromGicon": {
              "value": function () { return this.set_from_gicon.apply(this, arguments); }
            },
            "setFromIconName": {
              "value": function () { return this.set_from_icon_name.apply(this, arguments); }
            },
            "setFromPixbuf": {
              "value": function () { return this.set_from_pixbuf.apply(this, arguments); }
            },
            "setFromStock": {
              "value": function () { return this.set_from_stock.apply(this, arguments); }
            },
            "setHasTooltip": {
              "value": function () { return this.set_has_tooltip.apply(this, arguments); }
            },
            "setName": {
              "value": function () { return this.set_name.apply(this, arguments); }
            },
            "setScreen": {
              "value": function () { return this.set_screen.apply(this, arguments); }
            },
            "setTitle": {
              "value": function () { return this.set_title.apply(this, arguments); }
            },
            "setTooltipMarkup": {
              "value": function () { return this.set_tooltip_markup.apply(this, arguments); }
            },
            "setTooltipText": {
              "value": function () { return this.set_tooltip_text.apply(this, arguments); }
            },
            "setVisible": {
              "value": function () { return this.set_visible.apply(this, arguments); }
            },
            "hasTooltip": {
              "get": function () { return this.has_tooltip; },
              "set": function (value) { this.has_tooltip = value; }
            },
            "iconName": {
              "get": function () { return this.icon_name; },
              "set": function (value) { this.icon_name = value; }
            },
            "storageType": {
              "get": function () { return this.storage_type; },
              "set": function (value) { this.storage_type = value; }
            },
            "tooltipMarkup": {
              "get": function () { return this.tooltip_markup; },
              "set": function (value) { this.tooltip_markup = value; }
            },
            "tooltipText": {
              "get": function () { return this.tooltip_text; },
              "set": function (value) { this.tooltip_text = value; }
            }
          },
          "static": {
            "positionMenu": {
              "value": function () { return this.position_menu.apply(this, arguments); }
            }
          }
        },
        "Statusbar": {
          "prototype": {
            "getContextId": {
              "value": function () { return this.get_context_id.apply(this, arguments); }
            },
            "getMessageArea": {
              "value": function () { return this.get_message_area.apply(this, arguments); }
            },
            "removeAll": {
              "value": function () { return this.remove_all.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "StatusbarAccessible": {
          "prototype": {},
          "static": {}
        },
        "Style": {
          "prototype": {
            "applyDefaultBackground": {
              "value": function () { return this.apply_default_background.apply(this, arguments); }
            },
            "getStyleProperty": {
              "value": function () { return this.get_style_property.apply(this, arguments); }
            },
            "getValist": {
              "value": function () { return this.get_valist.apply(this, arguments); }
            },
            "hasContext": {
              "value": function () { return this.has_context.apply(this, arguments); }
            },
            "lookupColor": {
              "value": function () { return this.lookup_color.apply(this, arguments); }
            },
            "lookupIconSet": {
              "value": function () { return this.lookup_icon_set.apply(this, arguments); }
            },
            "renderIcon": {
              "value": function () { return this.render_icon.apply(this, arguments); }
            },
            "setBackground": {
              "value": function () { return this.set_background.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "StyleContext": {
          "prototype": {
            "addClass": {
              "value": function () { return this.add_class.apply(this, arguments); }
            },
            "addProvider": {
              "value": function () { return this.add_provider.apply(this, arguments); }
            },
            "addRegion": {
              "value": function () { return this.add_region.apply(this, arguments); }
            },
            "cancelAnimations": {
              "value": function () { return this.cancel_animations.apply(this, arguments); }
            },
            "getBackgroundColor": {
              "value": function () { return this.get_background_color.apply(this, arguments); }
            },
            "getBorder": {
              "value": function () { return this.get_border.apply(this, arguments); }
            },
            "getBorderColor": {
              "value": function () { return this.get_border_color.apply(this, arguments); }
            },
            "getColor": {
              "value": function () { return this.get_color.apply(this, arguments); }
            },
            "getDirection": {
              "value": function () { return this.get_direction.apply(this, arguments); }
            },
            "getFont": {
              "value": function () { return this.get_font.apply(this, arguments); }
            },
            "getFrameClock": {
              "value": function () { return this.get_frame_clock.apply(this, arguments); }
            },
            "getJunctionSides": {
              "value": function () { return this.get_junction_sides.apply(this, arguments); }
            },
            "getMargin": {
              "value": function () { return this.get_margin.apply(this, arguments); }
            },
            "getPadding": {
              "value": function () { return this.get_padding.apply(this, arguments); }
            },
            "getParent": {
              "value": function () { return this.get_parent.apply(this, arguments); }
            },
            "getPath": {
              "value": function () { return this.get_path.apply(this, arguments); }
            },
            "getProperty": {
              "value": function () { return this.get_property.apply(this, arguments); }
            },
            "getScale": {
              "value": function () { return this.get_scale.apply(this, arguments); }
            },
            "getScreen": {
              "value": function () { return this.get_screen.apply(this, arguments); }
            },
            "getSection": {
              "value": function () { return this.get_section.apply(this, arguments); }
            },
            "getState": {
              "value": function () { return this.get_state.apply(this, arguments); }
            },
            "getStyle": {
              "value": function () { return this.get_style.apply(this, arguments); }
            },
            "getStyleProperty": {
              "value": function () { return this.get_style_property.apply(this, arguments); }
            },
            "getStyleValist": {
              "value": function () { return this.get_style_valist.apply(this, arguments); }
            },
            "getValist": {
              "value": function () { return this.get_valist.apply(this, arguments); }
            },
            "hasClass": {
              "value": function () { return this.has_class.apply(this, arguments); }
            },
            "hasRegion": {
              "value": function () { return this.has_region.apply(this, arguments); }
            },
            "listClasses": {
              "value": function () { return this.list_classes.apply(this, arguments); }
            },
            "listRegions": {
              "value": function () { return this.list_regions.apply(this, arguments); }
            },
            "lookupColor": {
              "value": function () { return this.lookup_color.apply(this, arguments); }
            },
            "lookupIconSet": {
              "value": function () { return this.lookup_icon_set.apply(this, arguments); }
            },
            "notifyStateChange": {
              "value": function () { return this.notify_state_change.apply(this, arguments); }
            },
            "popAnimatableRegion": {
              "value": function () { return this.pop_animatable_region.apply(this, arguments); }
            },
            "pushAnimatableRegion": {
              "value": function () { return this.push_animatable_region.apply(this, arguments); }
            },
            "removeClass": {
              "value": function () { return this.remove_class.apply(this, arguments); }
            },
            "removeProvider": {
              "value": function () { return this.remove_provider.apply(this, arguments); }
            },
            "removeRegion": {
              "value": function () { return this.remove_region.apply(this, arguments); }
            },
            "scrollAnimations": {
              "value": function () { return this.scroll_animations.apply(this, arguments); }
            },
            "setBackground": {
              "value": function () { return this.set_background.apply(this, arguments); }
            },
            "setDirection": {
              "value": function () { return this.set_direction.apply(this, arguments); }
            },
            "setFrameClock": {
              "value": function () { return this.set_frame_clock.apply(this, arguments); }
            },
            "setJunctionSides": {
              "value": function () { return this.set_junction_sides.apply(this, arguments); }
            },
            "setParent": {
              "value": function () { return this.set_parent.apply(this, arguments); }
            },
            "setPath": {
              "value": function () { return this.set_path.apply(this, arguments); }
            },
            "setScale": {
              "value": function () { return this.set_scale.apply(this, arguments); }
            },
            "setScreen": {
              "value": function () { return this.set_screen.apply(this, arguments); }
            },
            "setState": {
              "value": function () { return this.set_state.apply(this, arguments); }
            },
            "stateIsRunning": {
              "value": function () { return this.state_is_running.apply(this, arguments); }
            },
            "paintClock": {
              "get": function () { return this.paint_clock; },
              "set": function (value) { this.paint_clock = value; }
            }
          },
          "static": {
            "addProviderForScreen": {
              "value": function () { return this.add_provider_for_screen.apply(this, arguments); }
            },
            "removeProviderForScreen": {
              "value": function () { return this.remove_provider_for_screen.apply(this, arguments); }
            },
            "resetWidgets": {
              "value": function () { return this.reset_widgets.apply(this, arguments); }
            }
          }
        },
        "StyleProperties": {
          "prototype": {
            "getProperty": {
              "value": function () { return this.get_property.apply(this, arguments); }
            },
            "getValist": {
              "value": function () { return this.get_valist.apply(this, arguments); }
            },
            "lookupColor": {
              "value": function () { return this.lookup_color.apply(this, arguments); }
            },
            "mapColor": {
              "value": function () { return this.map_color.apply(this, arguments); }
            },
            "setProperty": {
              "value": function () { return this.set_property.apply(this, arguments); }
            },
            "setValist": {
              "value": function () { return this.set_valist.apply(this, arguments); }
            },
            "unsetProperty": {
              "value": function () { return this.unset_property.apply(this, arguments); }
            }
          },
          "static": {
            "lookupProperty": {
              "value": function () { return this.lookup_property.apply(this, arguments); }
            },
            "registerProperty": {
              "value": function () { return this.register_property.apply(this, arguments); }
            }
          }
        },
        "Switch": {
          "prototype": {
            "getActive": {
              "value": function () { return this.get_active.apply(this, arguments); }
            },
            "getState": {
              "value": function () { return this.get_state.apply(this, arguments); }
            },
            "setActive": {
              "value": function () { return this.set_active.apply(this, arguments); }
            },
            "setState": {
              "value": function () { return this.set_state.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "SwitchAccessible": {
          "prototype": {},
          "static": {}
        },
        "Table": {
          "prototype": {
            "attachDefaults": {
              "value": function () { return this.attach_defaults.apply(this, arguments); }
            },
            "getColSpacing": {
              "value": function () { return this.get_col_spacing.apply(this, arguments); }
            },
            "getDefaultColSpacing": {
              "value": function () { return this.get_default_col_spacing.apply(this, arguments); }
            },
            "getDefaultRowSpacing": {
              "value": function () { return this.get_default_row_spacing.apply(this, arguments); }
            },
            "getHomogeneous": {
              "value": function () { return this.get_homogeneous.apply(this, arguments); }
            },
            "getRowSpacing": {
              "value": function () { return this.get_row_spacing.apply(this, arguments); }
            },
            "getSize": {
              "value": function () { return this.get_size.apply(this, arguments); }
            },
            "setColSpacing": {
              "value": function () { return this.set_col_spacing.apply(this, arguments); }
            },
            "setColSpacings": {
              "value": function () { return this.set_col_spacings.apply(this, arguments); }
            },
            "setHomogeneous": {
              "value": function () { return this.set_homogeneous.apply(this, arguments); }
            },
            "setRowSpacing": {
              "value": function () { return this.set_row_spacing.apply(this, arguments); }
            },
            "setRowSpacings": {
              "value": function () { return this.set_row_spacings.apply(this, arguments); }
            },
            "columnSpacing": {
              "get": function () { return this.column_spacing; },
              "set": function (value) { this.column_spacing = value; }
            },
            "nColumns": {
              "get": function () { return this.n_columns; },
              "set": function (value) { this.n_columns = value; }
            },
            "nRows": {
              "get": function () { return this.n_rows; },
              "set": function (value) { this.n_rows = value; }
            },
            "rowSpacing": {
              "get": function () { return this.row_spacing; },
              "set": function (value) { this.row_spacing = value; }
            }
          },
          "static": {}
        },
        "TearoffMenuItem": {
          "prototype": {},
          "static": {}
        },
        "TextBuffer": {
          "prototype": {
            "addMark": {
              "value": function () { return this.add_mark.apply(this, arguments); }
            },
            "addSelectionClipboard": {
              "value": function () { return this.add_selection_clipboard.apply(this, arguments); }
            },
            "applyTag": {
              "value": function () { return this.apply_tag.apply(this, arguments); }
            },
            "applyTagByName": {
              "value": function () { return this.apply_tag_by_name.apply(this, arguments); }
            },
            "beginUserAction": {
              "value": function () { return this.begin_user_action.apply(this, arguments); }
            },
            "copyClipboard": {
              "value": function () { return this.copy_clipboard.apply(this, arguments); }
            },
            "createChildAnchor": {
              "value": function () { return this.create_child_anchor.apply(this, arguments); }
            },
            "createMark": {
              "value": function () { return this.create_mark.apply(this, arguments); }
            },
            "createTag": {
              "value": function () { return this.create_tag.apply(this, arguments); }
            },
            "cutClipboard": {
              "value": function () { return this.cut_clipboard.apply(this, arguments); }
            },
            "deleteInteractive": {
              "value": function () { return this.delete_interactive.apply(this, arguments); }
            },
            "deleteMark": {
              "value": function () { return this.delete_mark.apply(this, arguments); }
            },
            "deleteMarkByName": {
              "value": function () { return this.delete_mark_by_name.apply(this, arguments); }
            },
            "deleteSelection": {
              "value": function () { return this.delete_selection.apply(this, arguments); }
            },
            "deserializeGetCanCreateTags": {
              "value": function () { return this.deserialize_get_can_create_tags.apply(this, arguments); }
            },
            "deserializeSetCanCreateTags": {
              "value": function () { return this.deserialize_set_can_create_tags.apply(this, arguments); }
            },
            "endUserAction": {
              "value": function () { return this.end_user_action.apply(this, arguments); }
            },
            "getBounds": {
              "value": function () { return this.get_bounds.apply(this, arguments); }
            },
            "getCharCount": {
              "value": function () { return this.get_char_count.apply(this, arguments); }
            },
            "getCopyTargetList": {
              "value": function () { return this.get_copy_target_list.apply(this, arguments); }
            },
            "getDeserializeFormats": {
              "value": function () { return this.get_deserialize_formats.apply(this, arguments); }
            },
            "getEndIter": {
              "value": function () { return this.get_end_iter.apply(this, arguments); }
            },
            "getHasSelection": {
              "value": function () { return this.get_has_selection.apply(this, arguments); }
            },
            "getInsert": {
              "value": function () { return this.get_insert.apply(this, arguments); }
            },
            "getIterAtChildAnchor": {
              "value": function () { return this.get_iter_at_child_anchor.apply(this, arguments); }
            },
            "getIterAtLine": {
              "value": function () { return this.get_iter_at_line.apply(this, arguments); }
            },
            "getIterAtLineIndex": {
              "value": function () { return this.get_iter_at_line_index.apply(this, arguments); }
            },
            "getIterAtLineOffset": {
              "value": function () { return this.get_iter_at_line_offset.apply(this, arguments); }
            },
            "getIterAtMark": {
              "value": function () { return this.get_iter_at_mark.apply(this, arguments); }
            },
            "getIterAtOffset": {
              "value": function () { return this.get_iter_at_offset.apply(this, arguments); }
            },
            "getLineCount": {
              "value": function () { return this.get_line_count.apply(this, arguments); }
            },
            "getMark": {
              "value": function () { return this.get_mark.apply(this, arguments); }
            },
            "getModified": {
              "value": function () { return this.get_modified.apply(this, arguments); }
            },
            "getPasteTargetList": {
              "value": function () { return this.get_paste_target_list.apply(this, arguments); }
            },
            "getSelectionBound": {
              "value": function () { return this.get_selection_bound.apply(this, arguments); }
            },
            "getSelectionBounds": {
              "value": function () { return this.get_selection_bounds.apply(this, arguments); }
            },
            "getSerializeFormats": {
              "value": function () { return this.get_serialize_formats.apply(this, arguments); }
            },
            "getSlice": {
              "value": function () { return this.get_slice.apply(this, arguments); }
            },
            "getStartIter": {
              "value": function () { return this.get_start_iter.apply(this, arguments); }
            },
            "getTagTable": {
              "value": function () { return this.get_tag_table.apply(this, arguments); }
            },
            "getText": {
              "value": function () { return this.get_text.apply(this, arguments); }
            },
            "insertAtCursor": {
              "value": function () { return this.insert_at_cursor.apply(this, arguments); }
            },
            "insertChildAnchor": {
              "value": function () { return this.insert_child_anchor.apply(this, arguments); }
            },
            "insertInteractive": {
              "value": function () { return this.insert_interactive.apply(this, arguments); }
            },
            "insertInteractiveAtCursor": {
              "value": function () { return this.insert_interactive_at_cursor.apply(this, arguments); }
            },
            "insertMarkup": {
              "value": function () { return this.insert_markup.apply(this, arguments); }
            },
            "insertPixbuf": {
              "value": function () { return this.insert_pixbuf.apply(this, arguments); }
            },
            "insertRange": {
              "value": function () { return this.insert_range.apply(this, arguments); }
            },
            "insertRangeInteractive": {
              "value": function () { return this.insert_range_interactive.apply(this, arguments); }
            },
            "insertWithTags": {
              "value": function () { return this.insert_with_tags.apply(this, arguments); }
            },
            "insertWithTagsByName": {
              "value": function () { return this.insert_with_tags_by_name.apply(this, arguments); }
            },
            "moveMark": {
              "value": function () { return this.move_mark.apply(this, arguments); }
            },
            "moveMarkByName": {
              "value": function () { return this.move_mark_by_name.apply(this, arguments); }
            },
            "pasteClipboard": {
              "value": function () { return this.paste_clipboard.apply(this, arguments); }
            },
            "placeCursor": {
              "value": function () { return this.place_cursor.apply(this, arguments); }
            },
            "registerDeserializeFormat": {
              "value": function () { return this.register_deserialize_format.apply(this, arguments); }
            },
            "registerDeserializeTagset": {
              "value": function () { return this.register_deserialize_tagset.apply(this, arguments); }
            },
            "registerSerializeFormat": {
              "value": function () { return this.register_serialize_format.apply(this, arguments); }
            },
            "registerSerializeTagset": {
              "value": function () { return this.register_serialize_tagset.apply(this, arguments); }
            },
            "removeAllTags": {
              "value": function () { return this.remove_all_tags.apply(this, arguments); }
            },
            "removeSelectionClipboard": {
              "value": function () { return this.remove_selection_clipboard.apply(this, arguments); }
            },
            "removeTag": {
              "value": function () { return this.remove_tag.apply(this, arguments); }
            },
            "removeTagByName": {
              "value": function () { return this.remove_tag_by_name.apply(this, arguments); }
            },
            "selectRange": {
              "value": function () { return this.select_range.apply(this, arguments); }
            },
            "setModified": {
              "value": function () { return this.set_modified.apply(this, arguments); }
            },
            "setText": {
              "value": function () { return this.set_text.apply(this, arguments); }
            },
            "unregisterDeserializeFormat": {
              "value": function () { return this.unregister_deserialize_format.apply(this, arguments); }
            },
            "unregisterSerializeFormat": {
              "value": function () { return this.unregister_serialize_format.apply(this, arguments); }
            },
            "copyTargetList": {
              "get": function () { return this.copy_target_list; },
              "set": function (value) { this.copy_target_list = value; }
            },
            "cursorPosition": {
              "get": function () { return this.cursor_position; },
              "set": function (value) { this.cursor_position = value; }
            },
            "hasSelection": {
              "get": function () { return this.has_selection; },
              "set": function (value) { this.has_selection = value; }
            },
            "pasteTargetList": {
              "get": function () { return this.paste_target_list; },
              "set": function (value) { this.paste_target_list = value; }
            },
            "tagTable": {
              "get": function () { return this.tag_table; },
              "set": function (value) { this.tag_table = value; }
            }
          },
          "static": {}
        },
        "TextCellAccessible": {
          "prototype": {},
          "static": {}
        },
        "TextChildAnchor": {
          "prototype": {
            "getDeleted": {
              "value": function () { return this.get_deleted.apply(this, arguments); }
            },
            "getWidgets": {
              "value": function () { return this.get_widgets.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "TextMark": {
          "prototype": {
            "getBuffer": {
              "value": function () { return this.get_buffer.apply(this, arguments); }
            },
            "getDeleted": {
              "value": function () { return this.get_deleted.apply(this, arguments); }
            },
            "getLeftGravity": {
              "value": function () { return this.get_left_gravity.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getVisible": {
              "value": function () { return this.get_visible.apply(this, arguments); }
            },
            "setVisible": {
              "value": function () { return this.set_visible.apply(this, arguments); }
            },
            "leftGravity": {
              "get": function () { return this.left_gravity; },
              "set": function (value) { this.left_gravity = value; }
            }
          },
          "static": {}
        },
        "TextTag": {
          "prototype": {
            "getPriority": {
              "value": function () { return this.get_priority.apply(this, arguments); }
            },
            "setPriority": {
              "value": function () { return this.set_priority.apply(this, arguments); }
            },
            "accumulativeMargin": {
              "get": function () { return this.accumulative_margin; },
              "set": function (value) { this.accumulative_margin = value; }
            },
            "backgroundFullHeight": {
              "get": function () { return this.background_full_height; },
              "set": function (value) { this.background_full_height = value; }
            },
            "backgroundFullHeightSet": {
              "get": function () { return this.background_full_height_set; },
              "set": function (value) { this.background_full_height_set = value; }
            },
            "backgroundGdk": {
              "get": function () { return this.background_gdk; },
              "set": function (value) { this.background_gdk = value; }
            },
            "backgroundRgba": {
              "get": function () { return this.background_rgba; },
              "set": function (value) { this.background_rgba = value; }
            },
            "backgroundSet": {
              "get": function () { return this.background_set; },
              "set": function (value) { this.background_set = value; }
            },
            "editableSet": {
              "get": function () { return this.editable_set; },
              "set": function (value) { this.editable_set = value; }
            },
            "fallbackSet": {
              "get": function () { return this.fallback_set; },
              "set": function (value) { this.fallback_set = value; }
            },
            "familySet": {
              "get": function () { return this.family_set; },
              "set": function (value) { this.family_set = value; }
            },
            "fontDesc": {
              "get": function () { return this.font_desc; },
              "set": function (value) { this.font_desc = value; }
            },
            "fontFeatures": {
              "get": function () { return this.font_features; },
              "set": function (value) { this.font_features = value; }
            },
            "fontFeaturesSet": {
              "get": function () { return this.font_features_set; },
              "set": function (value) { this.font_features_set = value; }
            },
            "foregroundGdk": {
              "get": function () { return this.foreground_gdk; },
              "set": function (value) { this.foreground_gdk = value; }
            },
            "foregroundRgba": {
              "get": function () { return this.foreground_rgba; },
              "set": function (value) { this.foreground_rgba = value; }
            },
            "foregroundSet": {
              "get": function () { return this.foreground_set; },
              "set": function (value) { this.foreground_set = value; }
            },
            "indentSet": {
              "get": function () { return this.indent_set; },
              "set": function (value) { this.indent_set = value; }
            },
            "invisibleSet": {
              "get": function () { return this.invisible_set; },
              "set": function (value) { this.invisible_set = value; }
            },
            "justificationSet": {
              "get": function () { return this.justification_set; },
              "set": function (value) { this.justification_set = value; }
            },
            "languageSet": {
              "get": function () { return this.language_set; },
              "set": function (value) { this.language_set = value; }
            },
            "leftMargin": {
              "get": function () { return this.left_margin; },
              "set": function (value) { this.left_margin = value; }
            },
            "leftMarginSet": {
              "get": function () { return this.left_margin_set; },
              "set": function (value) { this.left_margin_set = value; }
            },
            "letterSpacing": {
              "get": function () { return this.letter_spacing; },
              "set": function (value) { this.letter_spacing = value; }
            },
            "letterSpacingSet": {
              "get": function () { return this.letter_spacing_set; },
              "set": function (value) { this.letter_spacing_set = value; }
            },
            "paragraphBackground": {
              "get": function () { return this.paragraph_background; },
              "set": function (value) { this.paragraph_background = value; }
            },
            "paragraphBackgroundGdk": {
              "get": function () { return this.paragraph_background_gdk; },
              "set": function (value) { this.paragraph_background_gdk = value; }
            },
            "paragraphBackgroundRgba": {
              "get": function () { return this.paragraph_background_rgba; },
              "set": function (value) { this.paragraph_background_rgba = value; }
            },
            "paragraphBackgroundSet": {
              "get": function () { return this.paragraph_background_set; },
              "set": function (value) { this.paragraph_background_set = value; }
            },
            "pixelsAboveLines": {
              "get": function () { return this.pixels_above_lines; },
              "set": function (value) { this.pixels_above_lines = value; }
            },
            "pixelsAboveLinesSet": {
              "get": function () { return this.pixels_above_lines_set; },
              "set": function (value) { this.pixels_above_lines_set = value; }
            },
            "pixelsBelowLines": {
              "get": function () { return this.pixels_below_lines; },
              "set": function (value) { this.pixels_below_lines = value; }
            },
            "pixelsBelowLinesSet": {
              "get": function () { return this.pixels_below_lines_set; },
              "set": function (value) { this.pixels_below_lines_set = value; }
            },
            "pixelsInsideWrap": {
              "get": function () { return this.pixels_inside_wrap; },
              "set": function (value) { this.pixels_inside_wrap = value; }
            },
            "pixelsInsideWrapSet": {
              "get": function () { return this.pixels_inside_wrap_set; },
              "set": function (value) { this.pixels_inside_wrap_set = value; }
            },
            "rightMargin": {
              "get": function () { return this.right_margin; },
              "set": function (value) { this.right_margin = value; }
            },
            "rightMarginSet": {
              "get": function () { return this.right_margin_set; },
              "set": function (value) { this.right_margin_set = value; }
            },
            "riseSet": {
              "get": function () { return this.rise_set; },
              "set": function (value) { this.rise_set = value; }
            },
            "scaleSet": {
              "get": function () { return this.scale_set; },
              "set": function (value) { this.scale_set = value; }
            },
            "sizePoints": {
              "get": function () { return this.size_points; },
              "set": function (value) { this.size_points = value; }
            },
            "sizeSet": {
              "get": function () { return this.size_set; },
              "set": function (value) { this.size_set = value; }
            },
            "stretchSet": {
              "get": function () { return this.stretch_set; },
              "set": function (value) { this.stretch_set = value; }
            },
            "strikethroughRgba": {
              "get": function () { return this.strikethrough_rgba; },
              "set": function (value) { this.strikethrough_rgba = value; }
            },
            "strikethroughRgbaSet": {
              "get": function () { return this.strikethrough_rgba_set; },
              "set": function (value) { this.strikethrough_rgba_set = value; }
            },
            "strikethroughSet": {
              "get": function () { return this.strikethrough_set; },
              "set": function (value) { this.strikethrough_set = value; }
            },
            "styleSet": {
              "get": function () { return this.style_set; },
              "set": function (value) { this.style_set = value; }
            },
            "tabsSet": {
              "get": function () { return this.tabs_set; },
              "set": function (value) { this.tabs_set = value; }
            },
            "underlineRgba": {
              "get": function () { return this.underline_rgba; },
              "set": function (value) { this.underline_rgba = value; }
            },
            "underlineRgbaSet": {
              "get": function () { return this.underline_rgba_set; },
              "set": function (value) { this.underline_rgba_set = value; }
            },
            "underlineSet": {
              "get": function () { return this.underline_set; },
              "set": function (value) { this.underline_set = value; }
            },
            "variantSet": {
              "get": function () { return this.variant_set; },
              "set": function (value) { this.variant_set = value; }
            },
            "weightSet": {
              "get": function () { return this.weight_set; },
              "set": function (value) { this.weight_set = value; }
            },
            "wrapMode": {
              "get": function () { return this.wrap_mode; },
              "set": function (value) { this.wrap_mode = value; }
            },
            "wrapModeSet": {
              "get": function () { return this.wrap_mode_set; },
              "set": function (value) { this.wrap_mode_set = value; }
            }
          },
          "static": {}
        },
        "TextTagTable": {
          "prototype": {
            "getSize": {
              "value": function () { return this.get_size.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "TextView": {
          "prototype": {
            "addChildAtAnchor": {
              "value": function () { return this.add_child_at_anchor.apply(this, arguments); }
            },
            "addChildInWindow": {
              "value": function () { return this.add_child_in_window.apply(this, arguments); }
            },
            "backwardDisplayLine": {
              "value": function () { return this.backward_display_line.apply(this, arguments); }
            },
            "backwardDisplayLineStart": {
              "value": function () { return this.backward_display_line_start.apply(this, arguments); }
            },
            "bufferToWindowCoords": {
              "value": function () { return this.buffer_to_window_coords.apply(this, arguments); }
            },
            "forwardDisplayLine": {
              "value": function () { return this.forward_display_line.apply(this, arguments); }
            },
            "forwardDisplayLineEnd": {
              "value": function () { return this.forward_display_line_end.apply(this, arguments); }
            },
            "getAcceptsTab": {
              "value": function () { return this.get_accepts_tab.apply(this, arguments); }
            },
            "getBorderWindowSize": {
              "value": function () { return this.get_border_window_size.apply(this, arguments); }
            },
            "getBottomMargin": {
              "value": function () { return this.get_bottom_margin.apply(this, arguments); }
            },
            "getBuffer": {
              "value": function () { return this.get_buffer.apply(this, arguments); }
            },
            "getCursorLocations": {
              "value": function () { return this.get_cursor_locations.apply(this, arguments); }
            },
            "getCursorVisible": {
              "value": function () { return this.get_cursor_visible.apply(this, arguments); }
            },
            "getDefaultAttributes": {
              "value": function () { return this.get_default_attributes.apply(this, arguments); }
            },
            "getEditable": {
              "value": function () { return this.get_editable.apply(this, arguments); }
            },
            "getHadjustment": {
              "value": function () { return this.get_hadjustment.apply(this, arguments); }
            },
            "getIndent": {
              "value": function () { return this.get_indent.apply(this, arguments); }
            },
            "getInputHints": {
              "value": function () { return this.get_input_hints.apply(this, arguments); }
            },
            "getInputPurpose": {
              "value": function () { return this.get_input_purpose.apply(this, arguments); }
            },
            "getIterAtLocation": {
              "value": function () { return this.get_iter_at_location.apply(this, arguments); }
            },
            "getIterAtPosition": {
              "value": function () { return this.get_iter_at_position.apply(this, arguments); }
            },
            "getIterLocation": {
              "value": function () { return this.get_iter_location.apply(this, arguments); }
            },
            "getJustification": {
              "value": function () { return this.get_justification.apply(this, arguments); }
            },
            "getLeftMargin": {
              "value": function () { return this.get_left_margin.apply(this, arguments); }
            },
            "getLineAtY": {
              "value": function () { return this.get_line_at_y.apply(this, arguments); }
            },
            "getLineYrange": {
              "value": function () { return this.get_line_yrange.apply(this, arguments); }
            },
            "getMonospace": {
              "value": function () { return this.get_monospace.apply(this, arguments); }
            },
            "getOverwrite": {
              "value": function () { return this.get_overwrite.apply(this, arguments); }
            },
            "getPixelsAboveLines": {
              "value": function () { return this.get_pixels_above_lines.apply(this, arguments); }
            },
            "getPixelsBelowLines": {
              "value": function () { return this.get_pixels_below_lines.apply(this, arguments); }
            },
            "getPixelsInsideWrap": {
              "value": function () { return this.get_pixels_inside_wrap.apply(this, arguments); }
            },
            "getRightMargin": {
              "value": function () { return this.get_right_margin.apply(this, arguments); }
            },
            "getTabs": {
              "value": function () { return this.get_tabs.apply(this, arguments); }
            },
            "getTopMargin": {
              "value": function () { return this.get_top_margin.apply(this, arguments); }
            },
            "getVadjustment": {
              "value": function () { return this.get_vadjustment.apply(this, arguments); }
            },
            "getVisibleRect": {
              "value": function () { return this.get_visible_rect.apply(this, arguments); }
            },
            "getWindow": {
              "value": function () { return this.get_window.apply(this, arguments); }
            },
            "getWindowType": {
              "value": function () { return this.get_window_type.apply(this, arguments); }
            },
            "getWrapMode": {
              "value": function () { return this.get_wrap_mode.apply(this, arguments); }
            },
            "imContextFilterKeypress": {
              "value": function () { return this.im_context_filter_keypress.apply(this, arguments); }
            },
            "moveChild": {
              "value": function () { return this.move_child.apply(this, arguments); }
            },
            "moveMarkOnscreen": {
              "value": function () { return this.move_mark_onscreen.apply(this, arguments); }
            },
            "moveVisually": {
              "value": function () { return this.move_visually.apply(this, arguments); }
            },
            "placeCursorOnscreen": {
              "value": function () { return this.place_cursor_onscreen.apply(this, arguments); }
            },
            "resetImContext": {
              "value": function () { return this.reset_im_context.apply(this, arguments); }
            },
            "scrollMarkOnscreen": {
              "value": function () { return this.scroll_mark_onscreen.apply(this, arguments); }
            },
            "scrollToIter": {
              "value": function () { return this.scroll_to_iter.apply(this, arguments); }
            },
            "scrollToMark": {
              "value": function () { return this.scroll_to_mark.apply(this, arguments); }
            },
            "setAcceptsTab": {
              "value": function () { return this.set_accepts_tab.apply(this, arguments); }
            },
            "setBorderWindowSize": {
              "value": function () { return this.set_border_window_size.apply(this, arguments); }
            },
            "setBottomMargin": {
              "value": function () { return this.set_bottom_margin.apply(this, arguments); }
            },
            "setBuffer": {
              "value": function () { return this.set_buffer.apply(this, arguments); }
            },
            "setCursorVisible": {
              "value": function () { return this.set_cursor_visible.apply(this, arguments); }
            },
            "setEditable": {
              "value": function () { return this.set_editable.apply(this, arguments); }
            },
            "setIndent": {
              "value": function () { return this.set_indent.apply(this, arguments); }
            },
            "setInputHints": {
              "value": function () { return this.set_input_hints.apply(this, arguments); }
            },
            "setInputPurpose": {
              "value": function () { return this.set_input_purpose.apply(this, arguments); }
            },
            "setJustification": {
              "value": function () { return this.set_justification.apply(this, arguments); }
            },
            "setLeftMargin": {
              "value": function () { return this.set_left_margin.apply(this, arguments); }
            },
            "setMonospace": {
              "value": function () { return this.set_monospace.apply(this, arguments); }
            },
            "setOverwrite": {
              "value": function () { return this.set_overwrite.apply(this, arguments); }
            },
            "setPixelsAboveLines": {
              "value": function () { return this.set_pixels_above_lines.apply(this, arguments); }
            },
            "setPixelsBelowLines": {
              "value": function () { return this.set_pixels_below_lines.apply(this, arguments); }
            },
            "setPixelsInsideWrap": {
              "value": function () { return this.set_pixels_inside_wrap.apply(this, arguments); }
            },
            "setRightMargin": {
              "value": function () { return this.set_right_margin.apply(this, arguments); }
            },
            "setTabs": {
              "value": function () { return this.set_tabs.apply(this, arguments); }
            },
            "setTopMargin": {
              "value": function () { return this.set_top_margin.apply(this, arguments); }
            },
            "setWrapMode": {
              "value": function () { return this.set_wrap_mode.apply(this, arguments); }
            },
            "startsDisplayLine": {
              "value": function () { return this.starts_display_line.apply(this, arguments); }
            },
            "windowToBufferCoords": {
              "value": function () { return this.window_to_buffer_coords.apply(this, arguments); }
            },
            "acceptsTab": {
              "get": function () { return this.accepts_tab; },
              "set": function (value) { this.accepts_tab = value; }
            },
            "bottomMargin": {
              "get": function () { return this.bottom_margin; },
              "set": function (value) { this.bottom_margin = value; }
            },
            "cursorVisible": {
              "get": function () { return this.cursor_visible; },
              "set": function (value) { this.cursor_visible = value; }
            },
            "imModule": {
              "get": function () { return this.im_module; },
              "set": function (value) { this.im_module = value; }
            },
            "inputHints": {
              "get": function () { return this.input_hints; },
              "set": function (value) { this.input_hints = value; }
            },
            "inputPurpose": {
              "get": function () { return this.input_purpose; },
              "set": function (value) { this.input_purpose = value; }
            },
            "leftMargin": {
              "get": function () { return this.left_margin; },
              "set": function (value) { this.left_margin = value; }
            },
            "pixelsAboveLines": {
              "get": function () { return this.pixels_above_lines; },
              "set": function (value) { this.pixels_above_lines = value; }
            },
            "pixelsBelowLines": {
              "get": function () { return this.pixels_below_lines; },
              "set": function (value) { this.pixels_below_lines = value; }
            },
            "pixelsInsideWrap": {
              "get": function () { return this.pixels_inside_wrap; },
              "set": function (value) { this.pixels_inside_wrap = value; }
            },
            "populateAll": {
              "get": function () { return this.populate_all; },
              "set": function (value) { this.populate_all = value; }
            },
            "rightMargin": {
              "get": function () { return this.right_margin; },
              "set": function (value) { this.right_margin = value; }
            },
            "topMargin": {
              "get": function () { return this.top_margin; },
              "set": function (value) { this.top_margin = value; }
            },
            "wrapMode": {
              "get": function () { return this.wrap_mode; },
              "set": function (value) { this.wrap_mode = value; }
            }
          },
          "static": {}
        },
        "TextViewAccessible": {
          "prototype": {},
          "static": {}
        },
        "ThemingEngine": {
          "prototype": {
            "getBackgroundColor": {
              "value": function () { return this.get_background_color.apply(this, arguments); }
            },
            "getBorder": {
              "value": function () { return this.get_border.apply(this, arguments); }
            },
            "getBorderColor": {
              "value": function () { return this.get_border_color.apply(this, arguments); }
            },
            "getColor": {
              "value": function () { return this.get_color.apply(this, arguments); }
            },
            "getDirection": {
              "value": function () { return this.get_direction.apply(this, arguments); }
            },
            "getFont": {
              "value": function () { return this.get_font.apply(this, arguments); }
            },
            "getJunctionSides": {
              "value": function () { return this.get_junction_sides.apply(this, arguments); }
            },
            "getMargin": {
              "value": function () { return this.get_margin.apply(this, arguments); }
            },
            "getPadding": {
              "value": function () { return this.get_padding.apply(this, arguments); }
            },
            "getPath": {
              "value": function () { return this.get_path.apply(this, arguments); }
            },
            "getProperty": {
              "value": function () { return this.get_property.apply(this, arguments); }
            },
            "getScreen": {
              "value": function () { return this.get_screen.apply(this, arguments); }
            },
            "getState": {
              "value": function () { return this.get_state.apply(this, arguments); }
            },
            "getStyle": {
              "value": function () { return this.get_style.apply(this, arguments); }
            },
            "getStyleProperty": {
              "value": function () { return this.get_style_property.apply(this, arguments); }
            },
            "getStyleValist": {
              "value": function () { return this.get_style_valist.apply(this, arguments); }
            },
            "getValist": {
              "value": function () { return this.get_valist.apply(this, arguments); }
            },
            "hasClass": {
              "value": function () { return this.has_class.apply(this, arguments); }
            },
            "hasRegion": {
              "value": function () { return this.has_region.apply(this, arguments); }
            },
            "lookupColor": {
              "value": function () { return this.lookup_color.apply(this, arguments); }
            },
            "stateIsRunning": {
              "value": function () { return this.state_is_running.apply(this, arguments); }
            }
          },
          "static": {
            "registerProperty": {
              "value": function () { return this.register_property.apply(this, arguments); }
            }
          }
        },
        "ToggleAction": {
          "prototype": {
            "getActive": {
              "value": function () { return this.get_active.apply(this, arguments); }
            },
            "getDrawAsRadio": {
              "value": function () { return this.get_draw_as_radio.apply(this, arguments); }
            },
            "setActive": {
              "value": function () { return this.set_active.apply(this, arguments); }
            },
            "setDrawAsRadio": {
              "value": function () { return this.set_draw_as_radio.apply(this, arguments); }
            },
            "drawAsRadio": {
              "get": function () { return this.draw_as_radio; },
              "set": function (value) { this.draw_as_radio = value; }
            }
          },
          "static": {}
        },
        "ToggleButton": {
          "prototype": {
            "getActive": {
              "value": function () { return this.get_active.apply(this, arguments); }
            },
            "getInconsistent": {
              "value": function () { return this.get_inconsistent.apply(this, arguments); }
            },
            "getMode": {
              "value": function () { return this.get_mode.apply(this, arguments); }
            },
            "setActive": {
              "value": function () { return this.set_active.apply(this, arguments); }
            },
            "setInconsistent": {
              "value": function () { return this.set_inconsistent.apply(this, arguments); }
            },
            "setMode": {
              "value": function () { return this.set_mode.apply(this, arguments); }
            },
            "drawIndicator": {
              "get": function () { return this.draw_indicator; },
              "set": function (value) { this.draw_indicator = value; }
            }
          },
          "static": {}
        },
        "ToggleButtonAccessible": {
          "prototype": {},
          "static": {}
        },
        "ToggleToolButton": {
          "prototype": {
            "getActive": {
              "value": function () { return this.get_active.apply(this, arguments); }
            },
            "setActive": {
              "value": function () { return this.set_active.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "ToolButton": {
          "prototype": {
            "getIconName": {
              "value": function () { return this.get_icon_name.apply(this, arguments); }
            },
            "getIconWidget": {
              "value": function () { return this.get_icon_widget.apply(this, arguments); }
            },
            "getLabel": {
              "value": function () { return this.get_label.apply(this, arguments); }
            },
            "getLabelWidget": {
              "value": function () { return this.get_label_widget.apply(this, arguments); }
            },
            "getStockId": {
              "value": function () { return this.get_stock_id.apply(this, arguments); }
            },
            "getUseUnderline": {
              "value": function () { return this.get_use_underline.apply(this, arguments); }
            },
            "setIconName": {
              "value": function () { return this.set_icon_name.apply(this, arguments); }
            },
            "setIconWidget": {
              "value": function () { return this.set_icon_widget.apply(this, arguments); }
            },
            "setLabel": {
              "value": function () { return this.set_label.apply(this, arguments); }
            },
            "setLabelWidget": {
              "value": function () { return this.set_label_widget.apply(this, arguments); }
            },
            "setStockId": {
              "value": function () { return this.set_stock_id.apply(this, arguments); }
            },
            "setUseUnderline": {
              "value": function () { return this.set_use_underline.apply(this, arguments); }
            },
            "iconName": {
              "get": function () { return this.icon_name; },
              "set": function (value) { this.icon_name = value; }
            },
            "iconWidget": {
              "get": function () { return this.icon_widget; },
              "set": function (value) { this.icon_widget = value; }
            },
            "labelWidget": {
              "get": function () { return this.label_widget; },
              "set": function (value) { this.label_widget = value; }
            },
            "stockId": {
              "get": function () { return this.stock_id; },
              "set": function (value) { this.stock_id = value; }
            },
            "useUnderline": {
              "get": function () { return this.use_underline; },
              "set": function (value) { this.use_underline = value; }
            }
          },
          "static": {}
        },
        "ToolItem": {
          "prototype": {
            "getEllipsizeMode": {
              "value": function () { return this.get_ellipsize_mode.apply(this, arguments); }
            },
            "getExpand": {
              "value": function () { return this.get_expand.apply(this, arguments); }
            },
            "getHomogeneous": {
              "value": function () { return this.get_homogeneous.apply(this, arguments); }
            },
            "getIconSize": {
              "value": function () { return this.get_icon_size.apply(this, arguments); }
            },
            "getIsImportant": {
              "value": function () { return this.get_is_important.apply(this, arguments); }
            },
            "getOrientation": {
              "value": function () { return this.get_orientation.apply(this, arguments); }
            },
            "getProxyMenuItem": {
              "value": function () { return this.get_proxy_menu_item.apply(this, arguments); }
            },
            "getReliefStyle": {
              "value": function () { return this.get_relief_style.apply(this, arguments); }
            },
            "getTextAlignment": {
              "value": function () { return this.get_text_alignment.apply(this, arguments); }
            },
            "getTextOrientation": {
              "value": function () { return this.get_text_orientation.apply(this, arguments); }
            },
            "getTextSizeGroup": {
              "value": function () { return this.get_text_size_group.apply(this, arguments); }
            },
            "getToolbarStyle": {
              "value": function () { return this.get_toolbar_style.apply(this, arguments); }
            },
            "getUseDragWindow": {
              "value": function () { return this.get_use_drag_window.apply(this, arguments); }
            },
            "getVisibleHorizontal": {
              "value": function () { return this.get_visible_horizontal.apply(this, arguments); }
            },
            "getVisibleVertical": {
              "value": function () { return this.get_visible_vertical.apply(this, arguments); }
            },
            "rebuildMenu": {
              "value": function () { return this.rebuild_menu.apply(this, arguments); }
            },
            "retrieveProxyMenuItem": {
              "value": function () { return this.retrieve_proxy_menu_item.apply(this, arguments); }
            },
            "setExpand": {
              "value": function () { return this.set_expand.apply(this, arguments); }
            },
            "setHomogeneous": {
              "value": function () { return this.set_homogeneous.apply(this, arguments); }
            },
            "setIsImportant": {
              "value": function () { return this.set_is_important.apply(this, arguments); }
            },
            "setProxyMenuItem": {
              "value": function () { return this.set_proxy_menu_item.apply(this, arguments); }
            },
            "setTooltipMarkup": {
              "value": function () { return this.set_tooltip_markup.apply(this, arguments); }
            },
            "setTooltipText": {
              "value": function () { return this.set_tooltip_text.apply(this, arguments); }
            },
            "setUseDragWindow": {
              "value": function () { return this.set_use_drag_window.apply(this, arguments); }
            },
            "setVisibleHorizontal": {
              "value": function () { return this.set_visible_horizontal.apply(this, arguments); }
            },
            "setVisibleVertical": {
              "value": function () { return this.set_visible_vertical.apply(this, arguments); }
            },
            "toolbarReconfigured": {
              "value": function () { return this.toolbar_reconfigured.apply(this, arguments); }
            },
            "isImportant": {
              "get": function () { return this.is_important; },
              "set": function (value) { this.is_important = value; }
            },
            "visibleHorizontal": {
              "get": function () { return this.visible_horizontal; },
              "set": function (value) { this.visible_horizontal = value; }
            },
            "visibleVertical": {
              "get": function () { return this.visible_vertical; },
              "set": function (value) { this.visible_vertical = value; }
            }
          },
          "static": {}
        },
        "ToolItemGroup": {
          "prototype": {
            "getCollapsed": {
              "value": function () { return this.get_collapsed.apply(this, arguments); }
            },
            "getDropItem": {
              "value": function () { return this.get_drop_item.apply(this, arguments); }
            },
            "getEllipsize": {
              "value": function () { return this.get_ellipsize.apply(this, arguments); }
            },
            "getHeaderRelief": {
              "value": function () { return this.get_header_relief.apply(this, arguments); }
            },
            "getItemPosition": {
              "value": function () { return this.get_item_position.apply(this, arguments); }
            },
            "getLabel": {
              "value": function () { return this.get_label.apply(this, arguments); }
            },
            "getLabelWidget": {
              "value": function () { return this.get_label_widget.apply(this, arguments); }
            },
            "getNItems": {
              "value": function () { return this.get_n_items.apply(this, arguments); }
            },
            "getNthItem": {
              "value": function () { return this.get_nth_item.apply(this, arguments); }
            },
            "setCollapsed": {
              "value": function () { return this.set_collapsed.apply(this, arguments); }
            },
            "setEllipsize": {
              "value": function () { return this.set_ellipsize.apply(this, arguments); }
            },
            "setHeaderRelief": {
              "value": function () { return this.set_header_relief.apply(this, arguments); }
            },
            "setItemPosition": {
              "value": function () { return this.set_item_position.apply(this, arguments); }
            },
            "setLabel": {
              "value": function () { return this.set_label.apply(this, arguments); }
            },
            "setLabelWidget": {
              "value": function () { return this.set_label_widget.apply(this, arguments); }
            },
            "headerRelief": {
              "get": function () { return this.header_relief; },
              "set": function (value) { this.header_relief = value; }
            },
            "labelWidget": {
              "get": function () { return this.label_widget; },
              "set": function (value) { this.label_widget = value; }
            }
          },
          "static": {}
        },
        "ToolPalette": {
          "prototype": {
            "addDragDest": {
              "value": function () { return this.add_drag_dest.apply(this, arguments); }
            },
            "getDragItem": {
              "value": function () { return this.get_drag_item.apply(this, arguments); }
            },
            "getDropGroup": {
              "value": function () { return this.get_drop_group.apply(this, arguments); }
            },
            "getDropItem": {
              "value": function () { return this.get_drop_item.apply(this, arguments); }
            },
            "getExclusive": {
              "value": function () { return this.get_exclusive.apply(this, arguments); }
            },
            "getExpand": {
              "value": function () { return this.get_expand.apply(this, arguments); }
            },
            "getGroupPosition": {
              "value": function () { return this.get_group_position.apply(this, arguments); }
            },
            "getHadjustment": {
              "value": function () { return this.get_hadjustment.apply(this, arguments); }
            },
            "getIconSize": {
              "value": function () { return this.get_icon_size.apply(this, arguments); }
            },
            "getStyle": {
              "value": function () { return this.get_style.apply(this, arguments); }
            },
            "getVadjustment": {
              "value": function () { return this.get_vadjustment.apply(this, arguments); }
            },
            "setDragSource": {
              "value": function () { return this.set_drag_source.apply(this, arguments); }
            },
            "setExclusive": {
              "value": function () { return this.set_exclusive.apply(this, arguments); }
            },
            "setExpand": {
              "value": function () { return this.set_expand.apply(this, arguments); }
            },
            "setGroupPosition": {
              "value": function () { return this.set_group_position.apply(this, arguments); }
            },
            "setIconSize": {
              "value": function () { return this.set_icon_size.apply(this, arguments); }
            },
            "setStyle": {
              "value": function () { return this.set_style.apply(this, arguments); }
            },
            "unsetIconSize": {
              "value": function () { return this.unset_icon_size.apply(this, arguments); }
            },
            "unsetStyle": {
              "value": function () { return this.unset_style.apply(this, arguments); }
            },
            "iconSize": {
              "get": function () { return this.icon_size; },
              "set": function (value) { this.icon_size = value; }
            },
            "iconSizeSet": {
              "get": function () { return this.icon_size_set; },
              "set": function (value) { this.icon_size_set = value; }
            },
            "toolbarStyle": {
              "get": function () { return this.toolbar_style; },
              "set": function (value) { this.toolbar_style = value; }
            }
          },
          "static": {
            "getDragTargetGroup": {
              "value": function () { return this.get_drag_target_group.apply(this, arguments); }
            },
            "getDragTargetItem": {
              "value": function () { return this.get_drag_target_item.apply(this, arguments); }
            }
          }
        },
        "Toolbar": {
          "prototype": {
            "getDropIndex": {
              "value": function () { return this.get_drop_index.apply(this, arguments); }
            },
            "getIconSize": {
              "value": function () { return this.get_icon_size.apply(this, arguments); }
            },
            "getItemIndex": {
              "value": function () { return this.get_item_index.apply(this, arguments); }
            },
            "getNItems": {
              "value": function () { return this.get_n_items.apply(this, arguments); }
            },
            "getNthItem": {
              "value": function () { return this.get_nth_item.apply(this, arguments); }
            },
            "getReliefStyle": {
              "value": function () { return this.get_relief_style.apply(this, arguments); }
            },
            "getShowArrow": {
              "value": function () { return this.get_show_arrow.apply(this, arguments); }
            },
            "getStyle": {
              "value": function () { return this.get_style.apply(this, arguments); }
            },
            "setDropHighlightItem": {
              "value": function () { return this.set_drop_highlight_item.apply(this, arguments); }
            },
            "setIconSize": {
              "value": function () { return this.set_icon_size.apply(this, arguments); }
            },
            "setShowArrow": {
              "value": function () { return this.set_show_arrow.apply(this, arguments); }
            },
            "setStyle": {
              "value": function () { return this.set_style.apply(this, arguments); }
            },
            "unsetIconSize": {
              "value": function () { return this.unset_icon_size.apply(this, arguments); }
            },
            "unsetStyle": {
              "value": function () { return this.unset_style.apply(this, arguments); }
            },
            "iconSize": {
              "get": function () { return this.icon_size; },
              "set": function (value) { this.icon_size = value; }
            },
            "iconSizeSet": {
              "get": function () { return this.icon_size_set; },
              "set": function (value) { this.icon_size_set = value; }
            },
            "showArrow": {
              "get": function () { return this.show_arrow; },
              "set": function (value) { this.show_arrow = value; }
            },
            "toolbarStyle": {
              "get": function () { return this.toolbar_style; },
              "set": function (value) { this.toolbar_style = value; }
            }
          },
          "static": {}
        },
        "Tooltip": {
          "prototype": {
            "setCustom": {
              "value": function () { return this.set_custom.apply(this, arguments); }
            },
            "setIcon": {
              "value": function () { return this.set_icon.apply(this, arguments); }
            },
            "setIconFromGicon": {
              "value": function () { return this.set_icon_from_gicon.apply(this, arguments); }
            },
            "setIconFromIconName": {
              "value": function () { return this.set_icon_from_icon_name.apply(this, arguments); }
            },
            "setIconFromStock": {
              "value": function () { return this.set_icon_from_stock.apply(this, arguments); }
            },
            "setMarkup": {
              "value": function () { return this.set_markup.apply(this, arguments); }
            },
            "setText": {
              "value": function () { return this.set_text.apply(this, arguments); }
            },
            "setTipArea": {
              "value": function () { return this.set_tip_area.apply(this, arguments); }
            }
          },
          "static": {
            "triggerTooltipQuery": {
              "value": function () { return this.trigger_tooltip_query.apply(this, arguments); }
            }
          }
        },
        "ToplevelAccessible": {
          "prototype": {
            "getChildren": {
              "value": function () { return this.get_children.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "TreeModelFilter": {
          "prototype": {
            "clearCache": {
              "value": function () { return this.clear_cache.apply(this, arguments); }
            },
            "convertChildIterToIter": {
              "value": function () { return this.convert_child_iter_to_iter.apply(this, arguments); }
            },
            "convertChildPathToPath": {
              "value": function () { return this.convert_child_path_to_path.apply(this, arguments); }
            },
            "convertIterToChildIter": {
              "value": function () { return this.convert_iter_to_child_iter.apply(this, arguments); }
            },
            "convertPathToChildPath": {
              "value": function () { return this.convert_path_to_child_path.apply(this, arguments); }
            },
            "getModel": {
              "value": function () { return this.get_model.apply(this, arguments); }
            },
            "setModifyFunc": {
              "value": function () { return this.set_modify_func.apply(this, arguments); }
            },
            "setVisibleColumn": {
              "value": function () { return this.set_visible_column.apply(this, arguments); }
            },
            "setVisibleFunc": {
              "value": function () { return this.set_visible_func.apply(this, arguments); }
            },
            "childModel": {
              "get": function () { return this.child_model; },
              "set": function (value) { this.child_model = value; }
            },
            "virtualRoot": {
              "get": function () { return this.virtual_root; },
              "set": function (value) { this.virtual_root = value; }
            }
          },
          "static": {}
        },
        "TreeModelSort": {
          "prototype": {
            "clearCache": {
              "value": function () { return this.clear_cache.apply(this, arguments); }
            },
            "convertChildIterToIter": {
              "value": function () { return this.convert_child_iter_to_iter.apply(this, arguments); }
            },
            "convertChildPathToPath": {
              "value": function () { return this.convert_child_path_to_path.apply(this, arguments); }
            },
            "convertIterToChildIter": {
              "value": function () { return this.convert_iter_to_child_iter.apply(this, arguments); }
            },
            "convertPathToChildPath": {
              "value": function () { return this.convert_path_to_child_path.apply(this, arguments); }
            },
            "getModel": {
              "value": function () { return this.get_model.apply(this, arguments); }
            },
            "iterIsValid": {
              "value": function () { return this.iter_is_valid.apply(this, arguments); }
            },
            "resetDefaultSortFunc": {
              "value": function () { return this.reset_default_sort_func.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "TreeSelection": {
          "prototype": {
            "countSelectedRows": {
              "value": function () { return this.count_selected_rows.apply(this, arguments); }
            },
            "getMode": {
              "value": function () { return this.get_mode.apply(this, arguments); }
            },
            "getSelectFunction": {
              "value": function () { return this.get_select_function.apply(this, arguments); }
            },
            "getSelected": {
              "value": function () { return this.get_selected.apply(this, arguments); }
            },
            "getSelectedRows": {
              "value": function () { return this.get_selected_rows.apply(this, arguments); }
            },
            "getTreeView": {
              "value": function () { return this.get_tree_view.apply(this, arguments); }
            },
            "getUserData": {
              "value": function () { return this.get_user_data.apply(this, arguments); }
            },
            "iterIsSelected": {
              "value": function () { return this.iter_is_selected.apply(this, arguments); }
            },
            "pathIsSelected": {
              "value": function () { return this.path_is_selected.apply(this, arguments); }
            },
            "selectAll": {
              "value": function () { return this.select_all.apply(this, arguments); }
            },
            "selectIter": {
              "value": function () { return this.select_iter.apply(this, arguments); }
            },
            "selectPath": {
              "value": function () { return this.select_path.apply(this, arguments); }
            },
            "selectRange": {
              "value": function () { return this.select_range.apply(this, arguments); }
            },
            "selectedForeach": {
              "value": function () { return this.selected_foreach.apply(this, arguments); }
            },
            "setMode": {
              "value": function () { return this.set_mode.apply(this, arguments); }
            },
            "setSelectFunction": {
              "value": function () { return this.set_select_function.apply(this, arguments); }
            },
            "unselectAll": {
              "value": function () { return this.unselect_all.apply(this, arguments); }
            },
            "unselectIter": {
              "value": function () { return this.unselect_iter.apply(this, arguments); }
            },
            "unselectPath": {
              "value": function () { return this.unselect_path.apply(this, arguments); }
            },
            "unselectRange": {
              "value": function () { return this.unselect_range.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "TreeStore": {
          "prototype": {
            "insertAfter": {
              "value": function () { return this.insert_after.apply(this, arguments); }
            },
            "insertBefore": {
              "value": function () { return this.insert_before.apply(this, arguments); }
            },
            "insertWithValues": {
              "value": function () { return this.insert_with_values.apply(this, arguments); }
            },
            "insertWithValuesv": {
              "value": function () { return this.insert_with_valuesv.apply(this, arguments); }
            },
            "isAncestor": {
              "value": function () { return this.is_ancestor.apply(this, arguments); }
            },
            "iterDepth": {
              "value": function () { return this.iter_depth.apply(this, arguments); }
            },
            "iterIsValid": {
              "value": function () { return this.iter_is_valid.apply(this, arguments); }
            },
            "moveAfter": {
              "value": function () { return this.move_after.apply(this, arguments); }
            },
            "moveBefore": {
              "value": function () { return this.move_before.apply(this, arguments); }
            },
            "setColumnTypes": {
              "value": function () { return this.set_column_types.apply(this, arguments); }
            },
            "setValist": {
              "value": function () { return this.set_valist.apply(this, arguments); }
            },
            "setValue": {
              "value": function () { return this.set_value.apply(this, arguments); }
            },
            "setValuesv": {
              "value": function () { return this.set_valuesv.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "TreeView": {
          "prototype": {
            "appendColumn": {
              "value": function () { return this.append_column.apply(this, arguments); }
            },
            "collapseAll": {
              "value": function () { return this.collapse_all.apply(this, arguments); }
            },
            "collapseRow": {
              "value": function () { return this.collapse_row.apply(this, arguments); }
            },
            "columnsAutosize": {
              "value": function () { return this.columns_autosize.apply(this, arguments); }
            },
            "convertBinWindowToTreeCoords": {
              "value": function () { return this.convert_bin_window_to_tree_coords.apply(this, arguments); }
            },
            "convertBinWindowToWidgetCoords": {
              "value": function () { return this.convert_bin_window_to_widget_coords.apply(this, arguments); }
            },
            "convertTreeToBinWindowCoords": {
              "value": function () { return this.convert_tree_to_bin_window_coords.apply(this, arguments); }
            },
            "convertTreeToWidgetCoords": {
              "value": function () { return this.convert_tree_to_widget_coords.apply(this, arguments); }
            },
            "convertWidgetToBinWindowCoords": {
              "value": function () { return this.convert_widget_to_bin_window_coords.apply(this, arguments); }
            },
            "convertWidgetToTreeCoords": {
              "value": function () { return this.convert_widget_to_tree_coords.apply(this, arguments); }
            },
            "createRowDragIcon": {
              "value": function () { return this.create_row_drag_icon.apply(this, arguments); }
            },
            "enableModelDragDest": {
              "value": function () { return this.enable_model_drag_dest.apply(this, arguments); }
            },
            "enableModelDragSource": {
              "value": function () { return this.enable_model_drag_source.apply(this, arguments); }
            },
            "expandAll": {
              "value": function () { return this.expand_all.apply(this, arguments); }
            },
            "expandRow": {
              "value": function () { return this.expand_row.apply(this, arguments); }
            },
            "expandToPath": {
              "value": function () { return this.expand_to_path.apply(this, arguments); }
            },
            "getActivateOnSingleClick": {
              "value": function () { return this.get_activate_on_single_click.apply(this, arguments); }
            },
            "getBackgroundArea": {
              "value": function () { return this.get_background_area.apply(this, arguments); }
            },
            "getBinWindow": {
              "value": function () { return this.get_bin_window.apply(this, arguments); }
            },
            "getCellArea": {
              "value": function () { return this.get_cell_area.apply(this, arguments); }
            },
            "getColumn": {
              "value": function () { return this.get_column.apply(this, arguments); }
            },
            "getColumns": {
              "value": function () { return this.get_columns.apply(this, arguments); }
            },
            "getCursor": {
              "value": function () { return this.get_cursor.apply(this, arguments); }
            },
            "getDestRowAtPos": {
              "value": function () { return this.get_dest_row_at_pos.apply(this, arguments); }
            },
            "getDragDestRow": {
              "value": function () { return this.get_drag_dest_row.apply(this, arguments); }
            },
            "getEnableSearch": {
              "value": function () { return this.get_enable_search.apply(this, arguments); }
            },
            "getEnableTreeLines": {
              "value": function () { return this.get_enable_tree_lines.apply(this, arguments); }
            },
            "getExpanderColumn": {
              "value": function () { return this.get_expander_column.apply(this, arguments); }
            },
            "getFixedHeightMode": {
              "value": function () { return this.get_fixed_height_mode.apply(this, arguments); }
            },
            "getGridLines": {
              "value": function () { return this.get_grid_lines.apply(this, arguments); }
            },
            "getHadjustment": {
              "value": function () { return this.get_hadjustment.apply(this, arguments); }
            },
            "getHeadersClickable": {
              "value": function () { return this.get_headers_clickable.apply(this, arguments); }
            },
            "getHeadersVisible": {
              "value": function () { return this.get_headers_visible.apply(this, arguments); }
            },
            "getHoverExpand": {
              "value": function () { return this.get_hover_expand.apply(this, arguments); }
            },
            "getHoverSelection": {
              "value": function () { return this.get_hover_selection.apply(this, arguments); }
            },
            "getLevelIndentation": {
              "value": function () { return this.get_level_indentation.apply(this, arguments); }
            },
            "getModel": {
              "value": function () { return this.get_model.apply(this, arguments); }
            },
            "getNColumns": {
              "value": function () { return this.get_n_columns.apply(this, arguments); }
            },
            "getPathAtPos": {
              "value": function () { return this.get_path_at_pos.apply(this, arguments); }
            },
            "getReorderable": {
              "value": function () { return this.get_reorderable.apply(this, arguments); }
            },
            "getRowSeparatorFunc": {
              "value": function () { return this.get_row_separator_func.apply(this, arguments); }
            },
            "getRubberBanding": {
              "value": function () { return this.get_rubber_banding.apply(this, arguments); }
            },
            "getRulesHint": {
              "value": function () { return this.get_rules_hint.apply(this, arguments); }
            },
            "getSearchColumn": {
              "value": function () { return this.get_search_column.apply(this, arguments); }
            },
            "getSearchEntry": {
              "value": function () { return this.get_search_entry.apply(this, arguments); }
            },
            "getSearchEqualFunc": {
              "value": function () { return this.get_search_equal_func.apply(this, arguments); }
            },
            "getSearchPositionFunc": {
              "value": function () { return this.get_search_position_func.apply(this, arguments); }
            },
            "getSelection": {
              "value": function () { return this.get_selection.apply(this, arguments); }
            },
            "getShowExpanders": {
              "value": function () { return this.get_show_expanders.apply(this, arguments); }
            },
            "getTooltipColumn": {
              "value": function () { return this.get_tooltip_column.apply(this, arguments); }
            },
            "getTooltipContext": {
              "value": function () { return this.get_tooltip_context.apply(this, arguments); }
            },
            "getVadjustment": {
              "value": function () { return this.get_vadjustment.apply(this, arguments); }
            },
            "getVisibleRange": {
              "value": function () { return this.get_visible_range.apply(this, arguments); }
            },
            "getVisibleRect": {
              "value": function () { return this.get_visible_rect.apply(this, arguments); }
            },
            "insertColumn": {
              "value": function () { return this.insert_column.apply(this, arguments); }
            },
            "insertColumnWithAttributes": {
              "value": function () { return this.insert_column_with_attributes.apply(this, arguments); }
            },
            "insertColumnWithDataFunc": {
              "value": function () { return this.insert_column_with_data_func.apply(this, arguments); }
            },
            "isBlankAtPos": {
              "value": function () { return this.is_blank_at_pos.apply(this, arguments); }
            },
            "isRubberBandingActive": {
              "value": function () { return this.is_rubber_banding_active.apply(this, arguments); }
            },
            "mapExpandedRows": {
              "value": function () { return this.map_expanded_rows.apply(this, arguments); }
            },
            "moveColumnAfter": {
              "value": function () { return this.move_column_after.apply(this, arguments); }
            },
            "removeColumn": {
              "value": function () { return this.remove_column.apply(this, arguments); }
            },
            "rowActivated": {
              "value": function () { return this.row_activated.apply(this, arguments); }
            },
            "rowExpanded": {
              "value": function () { return this.row_expanded.apply(this, arguments); }
            },
            "scrollToCell": {
              "value": function () { return this.scroll_to_cell.apply(this, arguments); }
            },
            "scrollToPoint": {
              "value": function () { return this.scroll_to_point.apply(this, arguments); }
            },
            "setActivateOnSingleClick": {
              "value": function () { return this.set_activate_on_single_click.apply(this, arguments); }
            },
            "setColumnDragFunction": {
              "value": function () { return this.set_column_drag_function.apply(this, arguments); }
            },
            "setCursor": {
              "value": function () { return this.set_cursor.apply(this, arguments); }
            },
            "setCursorOnCell": {
              "value": function () { return this.set_cursor_on_cell.apply(this, arguments); }
            },
            "setDestroyCountFunc": {
              "value": function () { return this.set_destroy_count_func.apply(this, arguments); }
            },
            "setDragDestRow": {
              "value": function () { return this.set_drag_dest_row.apply(this, arguments); }
            },
            "setEnableSearch": {
              "value": function () { return this.set_enable_search.apply(this, arguments); }
            },
            "setEnableTreeLines": {
              "value": function () { return this.set_enable_tree_lines.apply(this, arguments); }
            },
            "setExpanderColumn": {
              "value": function () { return this.set_expander_column.apply(this, arguments); }
            },
            "setFixedHeightMode": {
              "value": function () { return this.set_fixed_height_mode.apply(this, arguments); }
            },
            "setGridLines": {
              "value": function () { return this.set_grid_lines.apply(this, arguments); }
            },
            "setHadjustment": {
              "value": function () { return this.set_hadjustment.apply(this, arguments); }
            },
            "setHeadersClickable": {
              "value": function () { return this.set_headers_clickable.apply(this, arguments); }
            },
            "setHeadersVisible": {
              "value": function () { return this.set_headers_visible.apply(this, arguments); }
            },
            "setHoverExpand": {
              "value": function () { return this.set_hover_expand.apply(this, arguments); }
            },
            "setHoverSelection": {
              "value": function () { return this.set_hover_selection.apply(this, arguments); }
            },
            "setLevelIndentation": {
              "value": function () { return this.set_level_indentation.apply(this, arguments); }
            },
            "setModel": {
              "value": function () { return this.set_model.apply(this, arguments); }
            },
            "setReorderable": {
              "value": function () { return this.set_reorderable.apply(this, arguments); }
            },
            "setRowSeparatorFunc": {
              "value": function () { return this.set_row_separator_func.apply(this, arguments); }
            },
            "setRubberBanding": {
              "value": function () { return this.set_rubber_banding.apply(this, arguments); }
            },
            "setRulesHint": {
              "value": function () { return this.set_rules_hint.apply(this, arguments); }
            },
            "setSearchColumn": {
              "value": function () { return this.set_search_column.apply(this, arguments); }
            },
            "setSearchEntry": {
              "value": function () { return this.set_search_entry.apply(this, arguments); }
            },
            "setSearchEqualFunc": {
              "value": function () { return this.set_search_equal_func.apply(this, arguments); }
            },
            "setSearchPositionFunc": {
              "value": function () { return this.set_search_position_func.apply(this, arguments); }
            },
            "setShowExpanders": {
              "value": function () { return this.set_show_expanders.apply(this, arguments); }
            },
            "setTooltipCell": {
              "value": function () { return this.set_tooltip_cell.apply(this, arguments); }
            },
            "setTooltipColumn": {
              "value": function () { return this.set_tooltip_column.apply(this, arguments); }
            },
            "setTooltipRow": {
              "value": function () { return this.set_tooltip_row.apply(this, arguments); }
            },
            "setVadjustment": {
              "value": function () { return this.set_vadjustment.apply(this, arguments); }
            },
            "unsetRowsDragDest": {
              "value": function () { return this.unset_rows_drag_dest.apply(this, arguments); }
            },
            "unsetRowsDragSource": {
              "value": function () { return this.unset_rows_drag_source.apply(this, arguments); }
            },
            "activateOnSingleClick": {
              "get": function () { return this.activate_on_single_click; },
              "set": function (value) { this.activate_on_single_click = value; }
            },
            "enableGridLines": {
              "get": function () { return this.enable_grid_lines; },
              "set": function (value) { this.enable_grid_lines = value; }
            },
            "enableSearch": {
              "get": function () { return this.enable_search; },
              "set": function (value) { this.enable_search = value; }
            },
            "enableTreeLines": {
              "get": function () { return this.enable_tree_lines; },
              "set": function (value) { this.enable_tree_lines = value; }
            },
            "expanderColumn": {
              "get": function () { return this.expander_column; },
              "set": function (value) { this.expander_column = value; }
            },
            "fixedHeightMode": {
              "get": function () { return this.fixed_height_mode; },
              "set": function (value) { this.fixed_height_mode = value; }
            },
            "headersClickable": {
              "get": function () { return this.headers_clickable; },
              "set": function (value) { this.headers_clickable = value; }
            },
            "headersVisible": {
              "get": function () { return this.headers_visible; },
              "set": function (value) { this.headers_visible = value; }
            },
            "hoverExpand": {
              "get": function () { return this.hover_expand; },
              "set": function (value) { this.hover_expand = value; }
            },
            "hoverSelection": {
              "get": function () { return this.hover_selection; },
              "set": function (value) { this.hover_selection = value; }
            },
            "levelIndentation": {
              "get": function () { return this.level_indentation; },
              "set": function (value) { this.level_indentation = value; }
            },
            "rubberBanding": {
              "get": function () { return this.rubber_banding; },
              "set": function (value) { this.rubber_banding = value; }
            },
            "rulesHint": {
              "get": function () { return this.rules_hint; },
              "set": function (value) { this.rules_hint = value; }
            },
            "searchColumn": {
              "get": function () { return this.search_column; },
              "set": function (value) { this.search_column = value; }
            },
            "showExpanders": {
              "get": function () { return this.show_expanders; },
              "set": function (value) { this.show_expanders = value; }
            },
            "tooltipColumn": {
              "get": function () { return this.tooltip_column; },
              "set": function (value) { this.tooltip_column = value; }
            }
          },
          "static": {}
        },
        "TreeViewAccessible": {
          "prototype": {},
          "static": {}
        },
        "TreeViewColumn": {
          "prototype": {
            "addAttribute": {
              "value": function () { return this.add_attribute.apply(this, arguments); }
            },
            "cellGetPosition": {
              "value": function () { return this.cell_get_position.apply(this, arguments); }
            },
            "cellGetSize": {
              "value": function () { return this.cell_get_size.apply(this, arguments); }
            },
            "cellIsVisible": {
              "value": function () { return this.cell_is_visible.apply(this, arguments); }
            },
            "cellSetCellData": {
              "value": function () { return this.cell_set_cell_data.apply(this, arguments); }
            },
            "clearAttributes": {
              "value": function () { return this.clear_attributes.apply(this, arguments); }
            },
            "focusCell": {
              "value": function () { return this.focus_cell.apply(this, arguments); }
            },
            "getAlignment": {
              "value": function () { return this.get_alignment.apply(this, arguments); }
            },
            "getButton": {
              "value": function () { return this.get_button.apply(this, arguments); }
            },
            "getClickable": {
              "value": function () { return this.get_clickable.apply(this, arguments); }
            },
            "getExpand": {
              "value": function () { return this.get_expand.apply(this, arguments); }
            },
            "getFixedWidth": {
              "value": function () { return this.get_fixed_width.apply(this, arguments); }
            },
            "getMaxWidth": {
              "value": function () { return this.get_max_width.apply(this, arguments); }
            },
            "getMinWidth": {
              "value": function () { return this.get_min_width.apply(this, arguments); }
            },
            "getReorderable": {
              "value": function () { return this.get_reorderable.apply(this, arguments); }
            },
            "getResizable": {
              "value": function () { return this.get_resizable.apply(this, arguments); }
            },
            "getSizing": {
              "value": function () { return this.get_sizing.apply(this, arguments); }
            },
            "getSortColumnId": {
              "value": function () { return this.get_sort_column_id.apply(this, arguments); }
            },
            "getSortIndicator": {
              "value": function () { return this.get_sort_indicator.apply(this, arguments); }
            },
            "getSortOrder": {
              "value": function () { return this.get_sort_order.apply(this, arguments); }
            },
            "getSpacing": {
              "value": function () { return this.get_spacing.apply(this, arguments); }
            },
            "getTitle": {
              "value": function () { return this.get_title.apply(this, arguments); }
            },
            "getTreeView": {
              "value": function () { return this.get_tree_view.apply(this, arguments); }
            },
            "getVisible": {
              "value": function () { return this.get_visible.apply(this, arguments); }
            },
            "getWidget": {
              "value": function () { return this.get_widget.apply(this, arguments); }
            },
            "getWidth": {
              "value": function () { return this.get_width.apply(this, arguments); }
            },
            "getXOffset": {
              "value": function () { return this.get_x_offset.apply(this, arguments); }
            },
            "packEnd": {
              "value": function () { return this.pack_end.apply(this, arguments); }
            },
            "packStart": {
              "value": function () { return this.pack_start.apply(this, arguments); }
            },
            "queueResize": {
              "value": function () { return this.queue_resize.apply(this, arguments); }
            },
            "setAlignment": {
              "value": function () { return this.set_alignment.apply(this, arguments); }
            },
            "setAttributes": {
              "value": function () { return this.set_attributes.apply(this, arguments); }
            },
            "setCellDataFunc": {
              "value": function () { return this.set_cell_data_func.apply(this, arguments); }
            },
            "setClickable": {
              "value": function () { return this.set_clickable.apply(this, arguments); }
            },
            "setExpand": {
              "value": function () { return this.set_expand.apply(this, arguments); }
            },
            "setFixedWidth": {
              "value": function () { return this.set_fixed_width.apply(this, arguments); }
            },
            "setMaxWidth": {
              "value": function () { return this.set_max_width.apply(this, arguments); }
            },
            "setMinWidth": {
              "value": function () { return this.set_min_width.apply(this, arguments); }
            },
            "setReorderable": {
              "value": function () { return this.set_reorderable.apply(this, arguments); }
            },
            "setResizable": {
              "value": function () { return this.set_resizable.apply(this, arguments); }
            },
            "setSizing": {
              "value": function () { return this.set_sizing.apply(this, arguments); }
            },
            "setSortColumnId": {
              "value": function () { return this.set_sort_column_id.apply(this, arguments); }
            },
            "setSortIndicator": {
              "value": function () { return this.set_sort_indicator.apply(this, arguments); }
            },
            "setSortOrder": {
              "value": function () { return this.set_sort_order.apply(this, arguments); }
            },
            "setSpacing": {
              "value": function () { return this.set_spacing.apply(this, arguments); }
            },
            "setTitle": {
              "value": function () { return this.set_title.apply(this, arguments); }
            },
            "setVisible": {
              "value": function () { return this.set_visible.apply(this, arguments); }
            },
            "setWidget": {
              "value": function () { return this.set_widget.apply(this, arguments); }
            },
            "cellArea": {
              "get": function () { return this.cell_area; },
              "set": function (value) { this.cell_area = value; }
            },
            "fixedWidth": {
              "get": function () { return this.fixed_width; },
              "set": function (value) { this.fixed_width = value; }
            },
            "maxWidth": {
              "get": function () { return this.max_width; },
              "set": function (value) { this.max_width = value; }
            },
            "minWidth": {
              "get": function () { return this.min_width; },
              "set": function (value) { this.min_width = value; }
            },
            "sortColumnId": {
              "get": function () { return this.sort_column_id; },
              "set": function (value) { this.sort_column_id = value; }
            },
            "sortIndicator": {
              "get": function () { return this.sort_indicator; },
              "set": function (value) { this.sort_indicator = value; }
            },
            "sortOrder": {
              "get": function () { return this.sort_order; },
              "set": function (value) { this.sort_order = value; }
            },
            "xOffset": {
              "get": function () { return this.x_offset; },
              "set": function (value) { this.x_offset = value; }
            }
          },
          "static": {}
        },
        "UIManager": {
          "prototype": {
            "addUi": {
              "value": function () { return this.add_ui.apply(this, arguments); }
            },
            "addUiFromFile": {
              "value": function () { return this.add_ui_from_file.apply(this, arguments); }
            },
            "addUiFromResource": {
              "value": function () { return this.add_ui_from_resource.apply(this, arguments); }
            },
            "addUiFromString": {
              "value": function () { return this.add_ui_from_string.apply(this, arguments); }
            },
            "ensureUpdate": {
              "value": function () { return this.ensure_update.apply(this, arguments); }
            },
            "getAccelGroup": {
              "value": function () { return this.get_accel_group.apply(this, arguments); }
            },
            "getAction": {
              "value": function () { return this.get_action.apply(this, arguments); }
            },
            "getActionGroups": {
              "value": function () { return this.get_action_groups.apply(this, arguments); }
            },
            "getAddTearoffs": {
              "value": function () { return this.get_add_tearoffs.apply(this, arguments); }
            },
            "getToplevels": {
              "value": function () { return this.get_toplevels.apply(this, arguments); }
            },
            "getUi": {
              "value": function () { return this.get_ui.apply(this, arguments); }
            },
            "getWidget": {
              "value": function () { return this.get_widget.apply(this, arguments); }
            },
            "insertActionGroup": {
              "value": function () { return this.insert_action_group.apply(this, arguments); }
            },
            "newMergeId": {
              "value": function () { return this.new_merge_id.apply(this, arguments); }
            },
            "removeActionGroup": {
              "value": function () { return this.remove_action_group.apply(this, arguments); }
            },
            "removeUi": {
              "value": function () { return this.remove_ui.apply(this, arguments); }
            },
            "setAddTearoffs": {
              "value": function () { return this.set_add_tearoffs.apply(this, arguments); }
            },
            "addTearoffs": {
              "get": function () { return this.add_tearoffs; },
              "set": function (value) { this.add_tearoffs = value; }
            }
          },
          "static": {}
        },
        "VBox": {
          "prototype": {},
          "static": {}
        },
        "VButtonBox": {
          "prototype": {},
          "static": {}
        },
        "VPaned": {
          "prototype": {},
          "static": {}
        },
        "VScale": {
          "prototype": {},
          "static": {}
        },
        "VScrollbar": {
          "prototype": {},
          "static": {}
        },
        "VSeparator": {
          "prototype": {},
          "static": {}
        },
        "Viewport": {
          "prototype": {
            "getBinWindow": {
              "value": function () { return this.get_bin_window.apply(this, arguments); }
            },
            "getHadjustment": {
              "value": function () { return this.get_hadjustment.apply(this, arguments); }
            },
            "getShadowType": {
              "value": function () { return this.get_shadow_type.apply(this, arguments); }
            },
            "getVadjustment": {
              "value": function () { return this.get_vadjustment.apply(this, arguments); }
            },
            "getViewWindow": {
              "value": function () { return this.get_view_window.apply(this, arguments); }
            },
            "setHadjustment": {
              "value": function () { return this.set_hadjustment.apply(this, arguments); }
            },
            "setShadowType": {
              "value": function () { return this.set_shadow_type.apply(this, arguments); }
            },
            "setVadjustment": {
              "value": function () { return this.set_vadjustment.apply(this, arguments); }
            },
            "shadowType": {
              "get": function () { return this.shadow_type; },
              "set": function (value) { this.shadow_type = value; }
            }
          },
          "static": {}
        },
        "VolumeButton": {
          "prototype": {
            "useSymbolic": {
              "get": function () { return this.use_symbolic; },
              "set": function (value) { this.use_symbolic = value; }
            }
          },
          "static": {}
        },
        "Widget": {
          "prototype": {
            "addAccelerator": {
              "value": function () { return this.add_accelerator.apply(this, arguments); }
            },
            "addDeviceEvents": {
              "value": function () { return this.add_device_events.apply(this, arguments); }
            },
            "addEvents": {
              "value": function () { return this.add_events.apply(this, arguments); }
            },
            "addMnemonicLabel": {
              "value": function () { return this.add_mnemonic_label.apply(this, arguments); }
            },
            "addTickCallback": {
              "value": function () { return this.add_tick_callback.apply(this, arguments); }
            },
            "canActivateAccel": {
              "value": function () { return this.can_activate_accel.apply(this, arguments); }
            },
            "childFocus": {
              "value": function () { return this.child_focus.apply(this, arguments); }
            },
            "childNotify": {
              "value": function () { return this.child_notify.apply(this, arguments); }
            },
            "classPath": {
              "value": function () { return this.class_path.apply(this, arguments); }
            },
            "computeExpand": {
              "value": function () { return this.compute_expand.apply(this, arguments); }
            },
            "createPangoContext": {
              "value": function () { return this.create_pango_context.apply(this, arguments); }
            },
            "createPangoLayout": {
              "value": function () { return this.create_pango_layout.apply(this, arguments); }
            },
            "deviceIsShadowed": {
              "value": function () { return this.device_is_shadowed.apply(this, arguments); }
            },
            "dragBegin": {
              "value": function () { return this.drag_begin.apply(this, arguments); }
            },
            "dragBeginWithCoordinates": {
              "value": function () { return this.drag_begin_with_coordinates.apply(this, arguments); }
            },
            "dragCheckThreshold": {
              "value": function () { return this.drag_check_threshold.apply(this, arguments); }
            },
            "dragDestAddImageTargets": {
              "value": function () { return this.drag_dest_add_image_targets.apply(this, arguments); }
            },
            "dragDestAddTextTargets": {
              "value": function () { return this.drag_dest_add_text_targets.apply(this, arguments); }
            },
            "dragDestAddUriTargets": {
              "value": function () { return this.drag_dest_add_uri_targets.apply(this, arguments); }
            },
            "dragDestFindTarget": {
              "value": function () { return this.drag_dest_find_target.apply(this, arguments); }
            },
            "dragDestGetTargetList": {
              "value": function () { return this.drag_dest_get_target_list.apply(this, arguments); }
            },
            "dragDestGetTrackMotion": {
              "value": function () { return this.drag_dest_get_track_motion.apply(this, arguments); }
            },
            "dragDestSet": {
              "value": function () { return this.drag_dest_set.apply(this, arguments); }
            },
            "dragDestSetProxy": {
              "value": function () { return this.drag_dest_set_proxy.apply(this, arguments); }
            },
            "dragDestSetTargetList": {
              "value": function () { return this.drag_dest_set_target_list.apply(this, arguments); }
            },
            "dragDestSetTrackMotion": {
              "value": function () { return this.drag_dest_set_track_motion.apply(this, arguments); }
            },
            "dragDestUnset": {
              "value": function () { return this.drag_dest_unset.apply(this, arguments); }
            },
            "dragGetData": {
              "value": function () { return this.drag_get_data.apply(this, arguments); }
            },
            "dragHighlight": {
              "value": function () { return this.drag_highlight.apply(this, arguments); }
            },
            "dragSourceAddImageTargets": {
              "value": function () { return this.drag_source_add_image_targets.apply(this, arguments); }
            },
            "dragSourceAddTextTargets": {
              "value": function () { return this.drag_source_add_text_targets.apply(this, arguments); }
            },
            "dragSourceAddUriTargets": {
              "value": function () { return this.drag_source_add_uri_targets.apply(this, arguments); }
            },
            "dragSourceGetTargetList": {
              "value": function () { return this.drag_source_get_target_list.apply(this, arguments); }
            },
            "dragSourceSet": {
              "value": function () { return this.drag_source_set.apply(this, arguments); }
            },
            "dragSourceSetIconGicon": {
              "value": function () { return this.drag_source_set_icon_gicon.apply(this, arguments); }
            },
            "dragSourceSetIconName": {
              "value": function () { return this.drag_source_set_icon_name.apply(this, arguments); }
            },
            "dragSourceSetIconPixbuf": {
              "value": function () { return this.drag_source_set_icon_pixbuf.apply(this, arguments); }
            },
            "dragSourceSetIconStock": {
              "value": function () { return this.drag_source_set_icon_stock.apply(this, arguments); }
            },
            "dragSourceSetTargetList": {
              "value": function () { return this.drag_source_set_target_list.apply(this, arguments); }
            },
            "dragSourceUnset": {
              "value": function () { return this.drag_source_unset.apply(this, arguments); }
            },
            "dragUnhighlight": {
              "value": function () { return this.drag_unhighlight.apply(this, arguments); }
            },
            "ensureStyle": {
              "value": function () { return this.ensure_style.apply(this, arguments); }
            },
            "errorBell": {
              "value": function () { return this.error_bell.apply(this, arguments); }
            },
            "freezeChildNotify": {
              "value": function () { return this.freeze_child_notify.apply(this, arguments); }
            },
            "getAccessible": {
              "value": function () { return this.get_accessible.apply(this, arguments); }
            },
            "getActionGroup": {
              "value": function () { return this.get_action_group.apply(this, arguments); }
            },
            "getAllocatedBaseline": {
              "value": function () { return this.get_allocated_baseline.apply(this, arguments); }
            },
            "getAllocatedHeight": {
              "value": function () { return this.get_allocated_height.apply(this, arguments); }
            },
            "getAllocatedWidth": {
              "value": function () { return this.get_allocated_width.apply(this, arguments); }
            },
            "getAllocation": {
              "value": function () { return this.get_allocation.apply(this, arguments); }
            },
            "getAncestor": {
              "value": function () { return this.get_ancestor.apply(this, arguments); }
            },
            "getAppPaintable": {
              "value": function () { return this.get_app_paintable.apply(this, arguments); }
            },
            "getCanDefault": {
              "value": function () { return this.get_can_default.apply(this, arguments); }
            },
            "getCanFocus": {
              "value": function () { return this.get_can_focus.apply(this, arguments); }
            },
            "getChildRequisition": {
              "value": function () { return this.get_child_requisition.apply(this, arguments); }
            },
            "getChildVisible": {
              "value": function () { return this.get_child_visible.apply(this, arguments); }
            },
            "getClip": {
              "value": function () { return this.get_clip.apply(this, arguments); }
            },
            "getClipboard": {
              "value": function () { return this.get_clipboard.apply(this, arguments); }
            },
            "getCompositeName": {
              "value": function () { return this.get_composite_name.apply(this, arguments); }
            },
            "getDeviceEnabled": {
              "value": function () { return this.get_device_enabled.apply(this, arguments); }
            },
            "getDeviceEvents": {
              "value": function () { return this.get_device_events.apply(this, arguments); }
            },
            "getDirection": {
              "value": function () { return this.get_direction.apply(this, arguments); }
            },
            "getDisplay": {
              "value": function () { return this.get_display.apply(this, arguments); }
            },
            "getDoubleBuffered": {
              "value": function () { return this.get_double_buffered.apply(this, arguments); }
            },
            "getEvents": {
              "value": function () { return this.get_events.apply(this, arguments); }
            },
            "getFontMap": {
              "value": function () { return this.get_font_map.apply(this, arguments); }
            },
            "getFontOptions": {
              "value": function () { return this.get_font_options.apply(this, arguments); }
            },
            "getFrameClock": {
              "value": function () { return this.get_frame_clock.apply(this, arguments); }
            },
            "getHalign": {
              "value": function () { return this.get_halign.apply(this, arguments); }
            },
            "getHasTooltip": {
              "value": function () { return this.get_has_tooltip.apply(this, arguments); }
            },
            "getHasWindow": {
              "value": function () { return this.get_has_window.apply(this, arguments); }
            },
            "getHexpand": {
              "value": function () { return this.get_hexpand.apply(this, arguments); }
            },
            "getHexpandSet": {
              "value": function () { return this.get_hexpand_set.apply(this, arguments); }
            },
            "getMapped": {
              "value": function () { return this.get_mapped.apply(this, arguments); }
            },
            "getMarginBottom": {
              "value": function () { return this.get_margin_bottom.apply(this, arguments); }
            },
            "getMarginEnd": {
              "value": function () { return this.get_margin_end.apply(this, arguments); }
            },
            "getMarginLeft": {
              "value": function () { return this.get_margin_left.apply(this, arguments); }
            },
            "getMarginRight": {
              "value": function () { return this.get_margin_right.apply(this, arguments); }
            },
            "getMarginStart": {
              "value": function () { return this.get_margin_start.apply(this, arguments); }
            },
            "getMarginTop": {
              "value": function () { return this.get_margin_top.apply(this, arguments); }
            },
            "getModifierMask": {
              "value": function () { return this.get_modifier_mask.apply(this, arguments); }
            },
            "getModifierStyle": {
              "value": function () { return this.get_modifier_style.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getNoShowAll": {
              "value": function () { return this.get_no_show_all.apply(this, arguments); }
            },
            "getOpacity": {
              "value": function () { return this.get_opacity.apply(this, arguments); }
            },
            "getPangoContext": {
              "value": function () { return this.get_pango_context.apply(this, arguments); }
            },
            "getParent": {
              "value": function () { return this.get_parent.apply(this, arguments); }
            },
            "getParentWindow": {
              "value": function () { return this.get_parent_window.apply(this, arguments); }
            },
            "getPath": {
              "value": function () { return this.get_path.apply(this, arguments); }
            },
            "getPointer": {
              "value": function () { return this.get_pointer.apply(this, arguments); }
            },
            "getPreferredHeight": {
              "value": function () { return this.get_preferred_height.apply(this, arguments); }
            },
            "getPreferredHeightAndBaselineForWidth": {
              "value": function () { return this.get_preferred_height_and_baseline_for_width.apply(this, arguments); }
            },
            "getPreferredHeightForWidth": {
              "value": function () { return this.get_preferred_height_for_width.apply(this, arguments); }
            },
            "getPreferredSize": {
              "value": function () { return this.get_preferred_size.apply(this, arguments); }
            },
            "getPreferredWidth": {
              "value": function () { return this.get_preferred_width.apply(this, arguments); }
            },
            "getPreferredWidthForHeight": {
              "value": function () { return this.get_preferred_width_for_height.apply(this, arguments); }
            },
            "getRealized": {
              "value": function () { return this.get_realized.apply(this, arguments); }
            },
            "getReceivesDefault": {
              "value": function () { return this.get_receives_default.apply(this, arguments); }
            },
            "getRequestMode": {
              "value": function () { return this.get_request_mode.apply(this, arguments); }
            },
            "getRequisition": {
              "value": function () { return this.get_requisition.apply(this, arguments); }
            },
            "getRootWindow": {
              "value": function () { return this.get_root_window.apply(this, arguments); }
            },
            "getScaleFactor": {
              "value": function () { return this.get_scale_factor.apply(this, arguments); }
            },
            "getScreen": {
              "value": function () { return this.get_screen.apply(this, arguments); }
            },
            "getSensitive": {
              "value": function () { return this.get_sensitive.apply(this, arguments); }
            },
            "getSettings": {
              "value": function () { return this.get_settings.apply(this, arguments); }
            },
            "getSizeRequest": {
              "value": function () { return this.get_size_request.apply(this, arguments); }
            },
            "getState": {
              "value": function () { return this.get_state.apply(this, arguments); }
            },
            "getStateFlags": {
              "value": function () { return this.get_state_flags.apply(this, arguments); }
            },
            "getStyle": {
              "value": function () { return this.get_style.apply(this, arguments); }
            },
            "getStyleContext": {
              "value": function () { return this.get_style_context.apply(this, arguments); }
            },
            "getSupportMultidevice": {
              "value": function () { return this.get_support_multidevice.apply(this, arguments); }
            },
            "getTemplateChild": {
              "value": function () { return this.get_template_child.apply(this, arguments); }
            },
            "getTooltipMarkup": {
              "value": function () { return this.get_tooltip_markup.apply(this, arguments); }
            },
            "getTooltipText": {
              "value": function () { return this.get_tooltip_text.apply(this, arguments); }
            },
            "getTooltipWindow": {
              "value": function () { return this.get_tooltip_window.apply(this, arguments); }
            },
            "getToplevel": {
              "value": function () { return this.get_toplevel.apply(this, arguments); }
            },
            "getValign": {
              "value": function () { return this.get_valign.apply(this, arguments); }
            },
            "getValignWithBaseline": {
              "value": function () { return this.get_valign_with_baseline.apply(this, arguments); }
            },
            "getVexpand": {
              "value": function () { return this.get_vexpand.apply(this, arguments); }
            },
            "getVexpandSet": {
              "value": function () { return this.get_vexpand_set.apply(this, arguments); }
            },
            "getVisible": {
              "value": function () { return this.get_visible.apply(this, arguments); }
            },
            "getVisual": {
              "value": function () { return this.get_visual.apply(this, arguments); }
            },
            "getWindow": {
              "value": function () { return this.get_window.apply(this, arguments); }
            },
            "grabAdd": {
              "value": function () { return this.grab_add.apply(this, arguments); }
            },
            "grabDefault": {
              "value": function () { return this.grab_default.apply(this, arguments); }
            },
            "grabFocus": {
              "value": function () { return this.grab_focus.apply(this, arguments); }
            },
            "grabRemove": {
              "value": function () { return this.grab_remove.apply(this, arguments); }
            },
            "hasDefault": {
              "get": function () { return this.has_default; },
              "set": function (value) { this.has_default = value; }
            },
            "hasFocus": {
              "get": function () { return this.has_focus; },
              "set": function (value) { this.has_focus = value; }
            },
            "hasGrab": {
              "value": function () { return this.has_grab.apply(this, arguments); }
            },
            "hasRcStyle": {
              "value": function () { return this.has_rc_style.apply(this, arguments); }
            },
            "hasScreen": {
              "value": function () { return this.has_screen.apply(this, arguments); }
            },
            "hasVisibleFocus": {
              "value": function () { return this.has_visible_focus.apply(this, arguments); }
            },
            "hideOnDelete": {
              "value": function () { return this.hide_on_delete.apply(this, arguments); }
            },
            "inDestruction": {
              "value": function () { return this.in_destruction.apply(this, arguments); }
            },
            "initTemplate": {
              "value": function () { return this.init_template.apply(this, arguments); }
            },
            "inputShapeCombineRegion": {
              "value": function () { return this.input_shape_combine_region.apply(this, arguments); }
            },
            "insertActionGroup": {
              "value": function () { return this.insert_action_group.apply(this, arguments); }
            },
            "isAncestor": {
              "value": function () { return this.is_ancestor.apply(this, arguments); }
            },
            "isComposited": {
              "value": function () { return this.is_composited.apply(this, arguments); }
            },
            "isDrawable": {
              "value": function () { return this.is_drawable.apply(this, arguments); }
            },
            "isFocus": {
              "get": function () { return this.is_focus; },
              "set": function (value) { this.is_focus = value; }
            },
            "isSensitive": {
              "value": function () { return this.is_sensitive.apply(this, arguments); }
            },
            "isToplevel": {
              "value": function () { return this.is_toplevel.apply(this, arguments); }
            },
            "isVisible": {
              "value": function () { return this.is_visible.apply(this, arguments); }
            },
            "keynavFailed": {
              "value": function () { return this.keynav_failed.apply(this, arguments); }
            },
            "listAccelClosures": {
              "value": function () { return this.list_accel_closures.apply(this, arguments); }
            },
            "listActionPrefixes": {
              "value": function () { return this.list_action_prefixes.apply(this, arguments); }
            },
            "listMnemonicLabels": {
              "value": function () { return this.list_mnemonic_labels.apply(this, arguments); }
            },
            "mnemonicActivate": {
              "value": function () { return this.mnemonic_activate.apply(this, arguments); }
            },
            "modifyBase": {
              "value": function () { return this.modify_base.apply(this, arguments); }
            },
            "modifyBg": {
              "value": function () { return this.modify_bg.apply(this, arguments); }
            },
            "modifyCursor": {
              "value": function () { return this.modify_cursor.apply(this, arguments); }
            },
            "modifyFg": {
              "value": function () { return this.modify_fg.apply(this, arguments); }
            },
            "modifyFont": {
              "value": function () { return this.modify_font.apply(this, arguments); }
            },
            "modifyStyle": {
              "value": function () { return this.modify_style.apply(this, arguments); }
            },
            "modifyText": {
              "value": function () { return this.modify_text.apply(this, arguments); }
            },
            "overrideBackgroundColor": {
              "value": function () { return this.override_background_color.apply(this, arguments); }
            },
            "overrideColor": {
              "value": function () { return this.override_color.apply(this, arguments); }
            },
            "overrideCursor": {
              "value": function () { return this.override_cursor.apply(this, arguments); }
            },
            "overrideFont": {
              "value": function () { return this.override_font.apply(this, arguments); }
            },
            "overrideSymbolicColor": {
              "value": function () { return this.override_symbolic_color.apply(this, arguments); }
            },
            "queueComputeExpand": {
              "value": function () { return this.queue_compute_expand.apply(this, arguments); }
            },
            "queueDraw": {
              "value": function () { return this.queue_draw.apply(this, arguments); }
            },
            "queueDrawArea": {
              "value": function () { return this.queue_draw_area.apply(this, arguments); }
            },
            "queueDrawRegion": {
              "value": function () { return this.queue_draw_region.apply(this, arguments); }
            },
            "queueResize": {
              "value": function () { return this.queue_resize.apply(this, arguments); }
            },
            "queueResizeNoRedraw": {
              "value": function () { return this.queue_resize_no_redraw.apply(this, arguments); }
            },
            "regionIntersect": {
              "value": function () { return this.region_intersect.apply(this, arguments); }
            },
            "registerWindow": {
              "value": function () { return this.register_window.apply(this, arguments); }
            },
            "removeAccelerator": {
              "value": function () { return this.remove_accelerator.apply(this, arguments); }
            },
            "removeMnemonicLabel": {
              "value": function () { return this.remove_mnemonic_label.apply(this, arguments); }
            },
            "removeTickCallback": {
              "value": function () { return this.remove_tick_callback.apply(this, arguments); }
            },
            "renderIcon": {
              "value": function () { return this.render_icon.apply(this, arguments); }
            },
            "renderIconPixbuf": {
              "value": function () { return this.render_icon_pixbuf.apply(this, arguments); }
            },
            "resetRcStyles": {
              "value": function () { return this.reset_rc_styles.apply(this, arguments); }
            },
            "resetStyle": {
              "value": function () { return this.reset_style.apply(this, arguments); }
            },
            "sendExpose": {
              "value": function () { return this.send_expose.apply(this, arguments); }
            },
            "sendFocusChange": {
              "value": function () { return this.send_focus_change.apply(this, arguments); }
            },
            "setAccelPath": {
              "value": function () { return this.set_accel_path.apply(this, arguments); }
            },
            "setAllocation": {
              "value": function () { return this.set_allocation.apply(this, arguments); }
            },
            "setAppPaintable": {
              "value": function () { return this.set_app_paintable.apply(this, arguments); }
            },
            "setCanDefault": {
              "value": function () { return this.set_can_default.apply(this, arguments); }
            },
            "setCanFocus": {
              "value": function () { return this.set_can_focus.apply(this, arguments); }
            },
            "setChildVisible": {
              "value": function () { return this.set_child_visible.apply(this, arguments); }
            },
            "setClip": {
              "value": function () { return this.set_clip.apply(this, arguments); }
            },
            "setCompositeName": {
              "value": function () { return this.set_composite_name.apply(this, arguments); }
            },
            "setDeviceEnabled": {
              "value": function () { return this.set_device_enabled.apply(this, arguments); }
            },
            "setDeviceEvents": {
              "value": function () { return this.set_device_events.apply(this, arguments); }
            },
            "setDirection": {
              "value": function () { return this.set_direction.apply(this, arguments); }
            },
            "setDoubleBuffered": {
              "value": function () { return this.set_double_buffered.apply(this, arguments); }
            },
            "setEvents": {
              "value": function () { return this.set_events.apply(this, arguments); }
            },
            "setFontMap": {
              "value": function () { return this.set_font_map.apply(this, arguments); }
            },
            "setFontOptions": {
              "value": function () { return this.set_font_options.apply(this, arguments); }
            },
            "setHalign": {
              "value": function () { return this.set_halign.apply(this, arguments); }
            },
            "setHasTooltip": {
              "value": function () { return this.set_has_tooltip.apply(this, arguments); }
            },
            "setHasWindow": {
              "value": function () { return this.set_has_window.apply(this, arguments); }
            },
            "setHexpand": {
              "value": function () { return this.set_hexpand.apply(this, arguments); }
            },
            "setHexpandSet": {
              "value": function () { return this.set_hexpand_set.apply(this, arguments); }
            },
            "setMapped": {
              "value": function () { return this.set_mapped.apply(this, arguments); }
            },
            "setMarginBottom": {
              "value": function () { return this.set_margin_bottom.apply(this, arguments); }
            },
            "setMarginEnd": {
              "value": function () { return this.set_margin_end.apply(this, arguments); }
            },
            "setMarginLeft": {
              "value": function () { return this.set_margin_left.apply(this, arguments); }
            },
            "setMarginRight": {
              "value": function () { return this.set_margin_right.apply(this, arguments); }
            },
            "setMarginStart": {
              "value": function () { return this.set_margin_start.apply(this, arguments); }
            },
            "setMarginTop": {
              "value": function () { return this.set_margin_top.apply(this, arguments); }
            },
            "setName": {
              "value": function () { return this.set_name.apply(this, arguments); }
            },
            "setNoShowAll": {
              "value": function () { return this.set_no_show_all.apply(this, arguments); }
            },
            "setOpacity": {
              "value": function () { return this.set_opacity.apply(this, arguments); }
            },
            "setParent": {
              "value": function () { return this.set_parent.apply(this, arguments); }
            },
            "setParentWindow": {
              "value": function () { return this.set_parent_window.apply(this, arguments); }
            },
            "setRealized": {
              "value": function () { return this.set_realized.apply(this, arguments); }
            },
            "setReceivesDefault": {
              "value": function () { return this.set_receives_default.apply(this, arguments); }
            },
            "setRedrawOnAllocate": {
              "value": function () { return this.set_redraw_on_allocate.apply(this, arguments); }
            },
            "setSensitive": {
              "value": function () { return this.set_sensitive.apply(this, arguments); }
            },
            "setSizeRequest": {
              "value": function () { return this.set_size_request.apply(this, arguments); }
            },
            "setState": {
              "value": function () { return this.set_state.apply(this, arguments); }
            },
            "setStateFlags": {
              "value": function () { return this.set_state_flags.apply(this, arguments); }
            },
            "setStyle": {
              "value": function () { return this.set_style.apply(this, arguments); }
            },
            "setSupportMultidevice": {
              "value": function () { return this.set_support_multidevice.apply(this, arguments); }
            },
            "setTooltipMarkup": {
              "value": function () { return this.set_tooltip_markup.apply(this, arguments); }
            },
            "setTooltipText": {
              "value": function () { return this.set_tooltip_text.apply(this, arguments); }
            },
            "setTooltipWindow": {
              "value": function () { return this.set_tooltip_window.apply(this, arguments); }
            },
            "setValign": {
              "value": function () { return this.set_valign.apply(this, arguments); }
            },
            "setVexpand": {
              "value": function () { return this.set_vexpand.apply(this, arguments); }
            },
            "setVexpandSet": {
              "value": function () { return this.set_vexpand_set.apply(this, arguments); }
            },
            "setVisible": {
              "value": function () { return this.set_visible.apply(this, arguments); }
            },
            "setVisual": {
              "value": function () { return this.set_visual.apply(this, arguments); }
            },
            "setWindow": {
              "value": function () { return this.set_window.apply(this, arguments); }
            },
            "shapeCombineRegion": {
              "value": function () { return this.shape_combine_region.apply(this, arguments); }
            },
            "showAll": {
              "value": function () { return this.show_all.apply(this, arguments); }
            },
            "showNow": {
              "value": function () { return this.show_now.apply(this, arguments); }
            },
            "sizeAllocate": {
              "value": function () { return this.size_allocate.apply(this, arguments); }
            },
            "sizeAllocateWithBaseline": {
              "value": function () { return this.size_allocate_with_baseline.apply(this, arguments); }
            },
            "sizeRequest": {
              "value": function () { return this.size_request.apply(this, arguments); }
            },
            "styleAttach": {
              "value": function () { return this.style_attach.apply(this, arguments); }
            },
            "styleGet": {
              "value": function () { return this.style_get.apply(this, arguments); }
            },
            "styleGetProperty": {
              "value": function () { return this.style_get_property.apply(this, arguments); }
            },
            "styleGetValist": {
              "value": function () { return this.style_get_valist.apply(this, arguments); }
            },
            "thawChildNotify": {
              "value": function () { return this.thaw_child_notify.apply(this, arguments); }
            },
            "translateCoordinates": {
              "value": function () { return this.translate_coordinates.apply(this, arguments); }
            },
            "triggerTooltipQuery": {
              "value": function () { return this.trigger_tooltip_query.apply(this, arguments); }
            },
            "unregisterWindow": {
              "value": function () { return this.unregister_window.apply(this, arguments); }
            },
            "unsetStateFlags": {
              "value": function () { return this.unset_state_flags.apply(this, arguments); }
            },
            "appPaintable": {
              "get": function () { return this.app_paintable; },
              "set": function (value) { this.app_paintable = value; }
            },
            "canDefault": {
              "get": function () { return this.can_default; },
              "set": function (value) { this.can_default = value; }
            },
            "canFocus": {
              "get": function () { return this.can_focus; },
              "set": function (value) { this.can_focus = value; }
            },
            "compositeChild": {
              "get": function () { return this.composite_child; },
              "set": function (value) { this.composite_child = value; }
            },
            "doubleBuffered": {
              "get": function () { return this.double_buffered; },
              "set": function (value) { this.double_buffered = value; }
            },
            "hasTooltip": {
              "get": function () { return this.has_tooltip; },
              "set": function (value) { this.has_tooltip = value; }
            },
            "heightRequest": {
              "get": function () { return this.height_request; },
              "set": function (value) { this.height_request = value; }
            },
            "hexpandSet": {
              "get": function () { return this.hexpand_set; },
              "set": function (value) { this.hexpand_set = value; }
            },
            "marginBottom": {
              "get": function () { return this.margin_bottom; },
              "set": function (value) { this.margin_bottom = value; }
            },
            "marginEnd": {
              "get": function () { return this.margin_end; },
              "set": function (value) { this.margin_end = value; }
            },
            "marginLeft": {
              "get": function () { return this.margin_left; },
              "set": function (value) { this.margin_left = value; }
            },
            "marginRight": {
              "get": function () { return this.margin_right; },
              "set": function (value) { this.margin_right = value; }
            },
            "marginStart": {
              "get": function () { return this.margin_start; },
              "set": function (value) { this.margin_start = value; }
            },
            "marginTop": {
              "get": function () { return this.margin_top; },
              "set": function (value) { this.margin_top = value; }
            },
            "noShowAll": {
              "get": function () { return this.no_show_all; },
              "set": function (value) { this.no_show_all = value; }
            },
            "receivesDefault": {
              "get": function () { return this.receives_default; },
              "set": function (value) { this.receives_default = value; }
            },
            "scaleFactor": {
              "get": function () { return this.scale_factor; },
              "set": function (value) { this.scale_factor = value; }
            },
            "tooltipMarkup": {
              "get": function () { return this.tooltip_markup; },
              "set": function (value) { this.tooltip_markup = value; }
            },
            "tooltipText": {
              "get": function () { return this.tooltip_text; },
              "set": function (value) { this.tooltip_text = value; }
            },
            "vexpandSet": {
              "get": function () { return this.vexpand_set; },
              "set": function (value) { this.vexpand_set = value; }
            },
            "widthRequest": {
              "get": function () { return this.width_request; },
              "set": function (value) { this.width_request = value; }
            }
          },
          "static": {
            "getDefaultDirection": {
              "value": function () { return this.get_default_direction.apply(this, arguments); }
            },
            "getDefaultStyle": {
              "value": function () { return this.get_default_style.apply(this, arguments); }
            },
            "popCompositeChild": {
              "value": function () { return this.pop_composite_child.apply(this, arguments); }
            },
            "pushCompositeChild": {
              "value": function () { return this.push_composite_child.apply(this, arguments); }
            },
            "setDefaultDirection": {
              "value": function () { return this.set_default_direction.apply(this, arguments); }
            }
          }
        },
        "WidgetAccessible": {
          "prototype": {},
          "static": {}
        },
        "Window": {
          "prototype": {
            "activateDefault": {
              "value": function () { return this.activate_default.apply(this, arguments); }
            },
            "activateFocus": {
              "value": function () { return this.activate_focus.apply(this, arguments); }
            },
            "activateKey": {
              "value": function () { return this.activate_key.apply(this, arguments); }
            },
            "addAccelGroup": {
              "value": function () { return this.add_accel_group.apply(this, arguments); }
            },
            "addMnemonic": {
              "value": function () { return this.add_mnemonic.apply(this, arguments); }
            },
            "beginMoveDrag": {
              "value": function () { return this.begin_move_drag.apply(this, arguments); }
            },
            "beginResizeDrag": {
              "value": function () { return this.begin_resize_drag.apply(this, arguments); }
            },
            "fullscreenOnMonitor": {
              "value": function () { return this.fullscreen_on_monitor.apply(this, arguments); }
            },
            "getAcceptFocus": {
              "value": function () { return this.get_accept_focus.apply(this, arguments); }
            },
            "getApplication": {
              "value": function () { return this.get_application.apply(this, arguments); }
            },
            "getAttachedTo": {
              "value": function () { return this.get_attached_to.apply(this, arguments); }
            },
            "getDecorated": {
              "value": function () { return this.get_decorated.apply(this, arguments); }
            },
            "getDefaultSize": {
              "value": function () { return this.get_default_size.apply(this, arguments); }
            },
            "getDefaultWidget": {
              "value": function () { return this.get_default_widget.apply(this, arguments); }
            },
            "getDeletable": {
              "value": function () { return this.get_deletable.apply(this, arguments); }
            },
            "getDestroyWithParent": {
              "value": function () { return this.get_destroy_with_parent.apply(this, arguments); }
            },
            "getFocus": {
              "value": function () { return this.get_focus.apply(this, arguments); }
            },
            "getFocusOnMap": {
              "value": function () { return this.get_focus_on_map.apply(this, arguments); }
            },
            "getFocusVisible": {
              "value": function () { return this.get_focus_visible.apply(this, arguments); }
            },
            "getGravity": {
              "value": function () { return this.get_gravity.apply(this, arguments); }
            },
            "getGroup": {
              "value": function () { return this.get_group.apply(this, arguments); }
            },
            "getHasResizeGrip": {
              "value": function () { return this.get_has_resize_grip.apply(this, arguments); }
            },
            "getHideTitlebarWhenMaximized": {
              "value": function () { return this.get_hide_titlebar_when_maximized.apply(this, arguments); }
            },
            "getIcon": {
              "value": function () { return this.get_icon.apply(this, arguments); }
            },
            "getIconList": {
              "value": function () { return this.get_icon_list.apply(this, arguments); }
            },
            "getIconName": {
              "value": function () { return this.get_icon_name.apply(this, arguments); }
            },
            "getMnemonicModifier": {
              "value": function () { return this.get_mnemonic_modifier.apply(this, arguments); }
            },
            "getMnemonicsVisible": {
              "value": function () { return this.get_mnemonics_visible.apply(this, arguments); }
            },
            "getModal": {
              "value": function () { return this.get_modal.apply(this, arguments); }
            },
            "getOpacity": {
              "value": function () { return this.get_opacity.apply(this, arguments); }
            },
            "getPosition": {
              "value": function () { return this.get_position.apply(this, arguments); }
            },
            "getResizable": {
              "value": function () { return this.get_resizable.apply(this, arguments); }
            },
            "getResizeGripArea": {
              "value": function () { return this.get_resize_grip_area.apply(this, arguments); }
            },
            "getRole": {
              "value": function () { return this.get_role.apply(this, arguments); }
            },
            "getScreen": {
              "value": function () { return this.get_screen.apply(this, arguments); }
            },
            "getSize": {
              "value": function () { return this.get_size.apply(this, arguments); }
            },
            "getSkipPagerHint": {
              "value": function () { return this.get_skip_pager_hint.apply(this, arguments); }
            },
            "getSkipTaskbarHint": {
              "value": function () { return this.get_skip_taskbar_hint.apply(this, arguments); }
            },
            "getTitle": {
              "value": function () { return this.get_title.apply(this, arguments); }
            },
            "getTitlebar": {
              "value": function () { return this.get_titlebar.apply(this, arguments); }
            },
            "getTransientFor": {
              "value": function () { return this.get_transient_for.apply(this, arguments); }
            },
            "getTypeHint": {
              "value": function () { return this.get_type_hint.apply(this, arguments); }
            },
            "getUrgencyHint": {
              "value": function () { return this.get_urgency_hint.apply(this, arguments); }
            },
            "getWindowType": {
              "value": function () { return this.get_window_type.apply(this, arguments); }
            },
            "hasGroup": {
              "value": function () { return this.has_group.apply(this, arguments); }
            },
            "hasToplevelFocus": {
              "get": function () { return this.has_toplevel_focus; },
              "set": function (value) { this.has_toplevel_focus = value; }
            },
            "isActive": {
              "get": function () { return this.is_active; },
              "set": function (value) { this.is_active = value; }
            },
            "isMaximized": {
              "get": function () { return this.is_maximized; },
              "set": function (value) { this.is_maximized = value; }
            },
            "mnemonicActivate": {
              "value": function () { return this.mnemonic_activate.apply(this, arguments); }
            },
            "parseGeometry": {
              "value": function () { return this.parse_geometry.apply(this, arguments); }
            },
            "presentWithTime": {
              "value": function () { return this.present_with_time.apply(this, arguments); }
            },
            "propagateKeyEvent": {
              "value": function () { return this.propagate_key_event.apply(this, arguments); }
            },
            "removeAccelGroup": {
              "value": function () { return this.remove_accel_group.apply(this, arguments); }
            },
            "removeMnemonic": {
              "value": function () { return this.remove_mnemonic.apply(this, arguments); }
            },
            "reshowWithInitialSize": {
              "value": function () { return this.reshow_with_initial_size.apply(this, arguments); }
            },
            "resizeGripIsVisible": {
              "value": function () { return this.resize_grip_is_visible.apply(this, arguments); }
            },
            "resizeToGeometry": {
              "value": function () { return this.resize_to_geometry.apply(this, arguments); }
            },
            "setAcceptFocus": {
              "value": function () { return this.set_accept_focus.apply(this, arguments); }
            },
            "setApplication": {
              "value": function () { return this.set_application.apply(this, arguments); }
            },
            "setAttachedTo": {
              "value": function () { return this.set_attached_to.apply(this, arguments); }
            },
            "setDecorated": {
              "value": function () { return this.set_decorated.apply(this, arguments); }
            },
            "setDefault": {
              "value": function () { return this.set_default.apply(this, arguments); }
            },
            "setDefaultGeometry": {
              "value": function () { return this.set_default_geometry.apply(this, arguments); }
            },
            "setDefaultSize": {
              "value": function () { return this.set_default_size.apply(this, arguments); }
            },
            "setDeletable": {
              "value": function () { return this.set_deletable.apply(this, arguments); }
            },
            "setDestroyWithParent": {
              "value": function () { return this.set_destroy_with_parent.apply(this, arguments); }
            },
            "setFocus": {
              "value": function () { return this.set_focus.apply(this, arguments); }
            },
            "setFocusOnMap": {
              "value": function () { return this.set_focus_on_map.apply(this, arguments); }
            },
            "setFocusVisible": {
              "value": function () { return this.set_focus_visible.apply(this, arguments); }
            },
            "setGeometryHints": {
              "value": function () { return this.set_geometry_hints.apply(this, arguments); }
            },
            "setGravity": {
              "value": function () { return this.set_gravity.apply(this, arguments); }
            },
            "setHasResizeGrip": {
              "value": function () { return this.set_has_resize_grip.apply(this, arguments); }
            },
            "setHasUserRefCount": {
              "value": function () { return this.set_has_user_ref_count.apply(this, arguments); }
            },
            "setHideTitlebarWhenMaximized": {
              "value": function () { return this.set_hide_titlebar_when_maximized.apply(this, arguments); }
            },
            "setIcon": {
              "value": function () { return this.set_icon.apply(this, arguments); }
            },
            "setIconFromFile": {
              "value": function () { return this.set_icon_from_file.apply(this, arguments); }
            },
            "setIconList": {
              "value": function () { return this.set_icon_list.apply(this, arguments); }
            },
            "setIconName": {
              "value": function () { return this.set_icon_name.apply(this, arguments); }
            },
            "setKeepAbove": {
              "value": function () { return this.set_keep_above.apply(this, arguments); }
            },
            "setKeepBelow": {
              "value": function () { return this.set_keep_below.apply(this, arguments); }
            },
            "setMnemonicModifier": {
              "value": function () { return this.set_mnemonic_modifier.apply(this, arguments); }
            },
            "setMnemonicsVisible": {
              "value": function () { return this.set_mnemonics_visible.apply(this, arguments); }
            },
            "setModal": {
              "value": function () { return this.set_modal.apply(this, arguments); }
            },
            "setOpacity": {
              "value": function () { return this.set_opacity.apply(this, arguments); }
            },
            "setPosition": {
              "value": function () { return this.set_position.apply(this, arguments); }
            },
            "setResizable": {
              "value": function () { return this.set_resizable.apply(this, arguments); }
            },
            "setRole": {
              "value": function () { return this.set_role.apply(this, arguments); }
            },
            "setScreen": {
              "value": function () { return this.set_screen.apply(this, arguments); }
            },
            "setSkipPagerHint": {
              "value": function () { return this.set_skip_pager_hint.apply(this, arguments); }
            },
            "setSkipTaskbarHint": {
              "value": function () { return this.set_skip_taskbar_hint.apply(this, arguments); }
            },
            "setStartupId": {
              "value": function () { return this.set_startup_id.apply(this, arguments); }
            },
            "setTitle": {
              "value": function () { return this.set_title.apply(this, arguments); }
            },
            "setTitlebar": {
              "value": function () { return this.set_titlebar.apply(this, arguments); }
            },
            "setTransientFor": {
              "value": function () { return this.set_transient_for.apply(this, arguments); }
            },
            "setTypeHint": {
              "value": function () { return this.set_type_hint.apply(this, arguments); }
            },
            "setUrgencyHint": {
              "value": function () { return this.set_urgency_hint.apply(this, arguments); }
            },
            "setWmclass": {
              "value": function () { return this.set_wmclass.apply(this, arguments); }
            },
            "acceptFocus": {
              "get": function () { return this.accept_focus; },
              "set": function (value) { this.accept_focus = value; }
            },
            "attachedTo": {
              "get": function () { return this.attached_to; },
              "set": function (value) { this.attached_to = value; }
            },
            "defaultHeight": {
              "get": function () { return this.default_height; },
              "set": function (value) { this.default_height = value; }
            },
            "defaultWidth": {
              "get": function () { return this.default_width; },
              "set": function (value) { this.default_width = value; }
            },
            "destroyWithParent": {
              "get": function () { return this.destroy_with_parent; },
              "set": function (value) { this.destroy_with_parent = value; }
            },
            "focusOnMap": {
              "get": function () { return this.focus_on_map; },
              "set": function (value) { this.focus_on_map = value; }
            },
            "focusVisible": {
              "get": function () { return this.focus_visible; },
              "set": function (value) { this.focus_visible = value; }
            },
            "hasResizeGrip": {
              "get": function () { return this.has_resize_grip; },
              "set": function (value) { this.has_resize_grip = value; }
            },
            "hideTitlebarWhenMaximized": {
              "get": function () { return this.hide_titlebar_when_maximized; },
              "set": function (value) { this.hide_titlebar_when_maximized = value; }
            },
            "iconName": {
              "get": function () { return this.icon_name; },
              "set": function (value) { this.icon_name = value; }
            },
            "mnemonicsVisible": {
              "get": function () { return this.mnemonics_visible; },
              "set": function (value) { this.mnemonics_visible = value; }
            },
            "resizeGripVisible": {
              "get": function () { return this.resize_grip_visible; },
              "set": function (value) { this.resize_grip_visible = value; }
            },
            "skipPagerHint": {
              "get": function () { return this.skip_pager_hint; },
              "set": function (value) { this.skip_pager_hint = value; }
            },
            "skipTaskbarHint": {
              "get": function () { return this.skip_taskbar_hint; },
              "set": function (value) { this.skip_taskbar_hint = value; }
            },
            "startupId": {
              "get": function () { return this.startup_id; },
              "set": function (value) { this.startup_id = value; }
            },
            "transientFor": {
              "get": function () { return this.transient_for; },
              "set": function (value) { this.transient_for = value; }
            },
            "typeHint": {
              "get": function () { return this.type_hint; },
              "set": function (value) { this.type_hint = value; }
            },
            "urgencyHint": {
              "get": function () { return this.urgency_hint; },
              "set": function (value) { this.urgency_hint = value; }
            },
            "windowPosition": {
              "get": function () { return this.window_position; },
              "set": function (value) { this.window_position = value; }
            }
          },
          "static": {
            "getDefaultIconList": {
              "value": function () { return this.get_default_icon_list.apply(this, arguments); }
            },
            "getDefaultIconName": {
              "value": function () { return this.get_default_icon_name.apply(this, arguments); }
            },
            "listToplevels": {
              "value": function () { return this.list_toplevels.apply(this, arguments); }
            },
            "setAutoStartupNotification": {
              "value": function () { return this.set_auto_startup_notification.apply(this, arguments); }
            },
            "setDefaultIcon": {
              "value": function () { return this.set_default_icon.apply(this, arguments); }
            },
            "setDefaultIconFromFile": {
              "value": function () { return this.set_default_icon_from_file.apply(this, arguments); }
            },
            "setDefaultIconList": {
              "value": function () { return this.set_default_icon_list.apply(this, arguments); }
            },
            "setDefaultIconName": {
              "value": function () { return this.set_default_icon_name.apply(this, arguments); }
            },
            "setInteractiveDebugging": {
              "value": function () { return this.set_interactive_debugging.apply(this, arguments); }
            }
          }
        },
        "WindowAccessible": {
          "prototype": {},
          "static": {}
        },
        "WindowGroup": {
          "prototype": {
            "addWindow": {
              "value": function () { return this.add_window.apply(this, arguments); }
            },
            "getCurrentDeviceGrab": {
              "value": function () { return this.get_current_device_grab.apply(this, arguments); }
            },
            "getCurrentGrab": {
              "value": function () { return this.get_current_grab.apply(this, arguments); }
            },
            "listWindows": {
              "value": function () { return this.list_windows.apply(this, arguments); }
            },
            "removeWindow": {
              "value": function () { return this.remove_window.apply(this, arguments); }
            }
          },
          "static": {}
        }
      },
      "static": {
        "accelGroupsActivate": {
          "value": function () { return this.accel_groups_activate.apply(this, arguments); }
        },
        "accelGroupsFromObject": {
          "value": function () { return this.accel_groups_from_object.apply(this, arguments); }
        },
        "acceleratorGetDefaultModMask": {
          "value": function () { return this.accelerator_get_default_mod_mask.apply(this, arguments); }
        },
        "acceleratorGetLabel": {
          "value": function () { return this.accelerator_get_label.apply(this, arguments); }
        },
        "acceleratorGetLabelWithKeycode": {
          "value": function () { return this.accelerator_get_label_with_keycode.apply(this, arguments); }
        },
        "acceleratorName": {
          "value": function () { return this.accelerator_name.apply(this, arguments); }
        },
        "acceleratorNameWithKeycode": {
          "value": function () { return this.accelerator_name_with_keycode.apply(this, arguments); }
        },
        "acceleratorParse": {
          "value": function () { return this.accelerator_parse.apply(this, arguments); }
        },
        "acceleratorParseWithKeycode": {
          "value": function () { return this.accelerator_parse_with_keycode.apply(this, arguments); }
        },
        "acceleratorSetDefaultModMask": {
          "value": function () { return this.accelerator_set_default_mod_mask.apply(this, arguments); }
        },
        "acceleratorValid": {
          "value": function () { return this.accelerator_valid.apply(this, arguments); }
        },
        "alternativeDialogButtonOrder": {
          "value": function () { return this.alternative_dialog_button_order.apply(this, arguments); }
        },
        "bindingEntryAddSignalFromString": {
          "value": function () { return this.binding_entry_add_signal_from_string.apply(this, arguments); }
        },
        "bindingEntryAddSignall": {
          "value": function () { return this.binding_entry_add_signall.apply(this, arguments); }
        },
        "bindingEntryRemove": {
          "value": function () { return this.binding_entry_remove.apply(this, arguments); }
        },
        "bindingEntrySkip": {
          "value": function () { return this.binding_entry_skip.apply(this, arguments); }
        },
        "bindingSetByClass": {
          "value": function () { return this.binding_set_by_class.apply(this, arguments); }
        },
        "bindingSetFind": {
          "value": function () { return this.binding_set_find.apply(this, arguments); }
        },
        "bindingSetNew": {
          "value": function () { return this.binding_set_new.apply(this, arguments); }
        },
        "bindingsActivate": {
          "value": function () { return this.bindings_activate.apply(this, arguments); }
        },
        "bindingsActivateEvent": {
          "value": function () { return this.bindings_activate_event.apply(this, arguments); }
        },
        "builderErrorQuark": {
          "value": function () { return this.builder_error_quark.apply(this, arguments); }
        },
        "cairoShouldDrawWindow": {
          "value": function () { return this.cairo_should_draw_window.apply(this, arguments); }
        },
        "cairoTransformToWindow": {
          "value": function () { return this.cairo_transform_to_window.apply(this, arguments); }
        },
        "checkVersion": {
          "value": function () { return this.check_version.apply(this, arguments); }
        },
        "cssProviderErrorQuark": {
          "value": function () { return this.css_provider_error_quark.apply(this, arguments); }
        },
        "deviceGrabAdd": {
          "value": function () { return this.device_grab_add.apply(this, arguments); }
        },
        "deviceGrabRemove": {
          "value": function () { return this.device_grab_remove.apply(this, arguments); }
        },
        "disableSetlocale": {
          "value": function () { return this.disable_setlocale.apply(this, arguments); }
        },
        "distributeNaturalAllocation": {
          "value": function () { return this.distribute_natural_allocation.apply(this, arguments); }
        },
        "dragCancel": {
          "value": function () { return this.drag_cancel.apply(this, arguments); }
        },
        "dragFinish": {
          "value": function () { return this.drag_finish.apply(this, arguments); }
        },
        "dragGetSourceWidget": {
          "value": function () { return this.drag_get_source_widget.apply(this, arguments); }
        },
        "dragSetIconDefault": {
          "value": function () { return this.drag_set_icon_default.apply(this, arguments); }
        },
        "dragSetIconGicon": {
          "value": function () { return this.drag_set_icon_gicon.apply(this, arguments); }
        },
        "dragSetIconName": {
          "value": function () { return this.drag_set_icon_name.apply(this, arguments); }
        },
        "dragSetIconPixbuf": {
          "value": function () { return this.drag_set_icon_pixbuf.apply(this, arguments); }
        },
        "dragSetIconStock": {
          "value": function () { return this.drag_set_icon_stock.apply(this, arguments); }
        },
        "dragSetIconSurface": {
          "value": function () { return this.drag_set_icon_surface.apply(this, arguments); }
        },
        "dragSetIconWidget": {
          "value": function () { return this.drag_set_icon_widget.apply(this, arguments); }
        },
        "drawInsertionCursor": {
          "value": function () { return this.draw_insertion_cursor.apply(this, arguments); }
        },
        "eventsPending": {
          "value": function () { return this.events_pending.apply(this, arguments); }
        },
        "fileChooserErrorQuark": {
          "value": function () { return this.file_chooser_error_quark.apply(this, arguments); }
        },
        "getBinaryAge": {
          "value": function () { return this.get_binary_age.apply(this, arguments); }
        },
        "getCurrentEvent": {
          "value": function () { return this.get_current_event.apply(this, arguments); }
        },
        "getCurrentEventDevice": {
          "value": function () { return this.get_current_event_device.apply(this, arguments); }
        },
        "getCurrentEventState": {
          "value": function () { return this.get_current_event_state.apply(this, arguments); }
        },
        "getCurrentEventTime": {
          "value": function () { return this.get_current_event_time.apply(this, arguments); }
        },
        "getDebugFlags": {
          "value": function () { return this.get_debug_flags.apply(this, arguments); }
        },
        "getDefaultLanguage": {
          "value": function () { return this.get_default_language.apply(this, arguments); }
        },
        "getEventWidget": {
          "value": function () { return this.get_event_widget.apply(this, arguments); }
        },
        "getInterfaceAge": {
          "value": function () { return this.get_interface_age.apply(this, arguments); }
        },
        "getLocaleDirection": {
          "value": function () { return this.get_locale_direction.apply(this, arguments); }
        },
        "getMajorVersion": {
          "value": function () { return this.get_major_version.apply(this, arguments); }
        },
        "getMicroVersion": {
          "value": function () { return this.get_micro_version.apply(this, arguments); }
        },
        "getMinorVersion": {
          "value": function () { return this.get_minor_version.apply(this, arguments); }
        },
        "getOptionGroup": {
          "value": function () { return this.get_option_group.apply(this, arguments); }
        },
        "grabGetCurrent": {
          "value": function () { return this.grab_get_current.apply(this, arguments); }
        },
        "iconSizeFromName": {
          "value": function () { return this.icon_size_from_name.apply(this, arguments); }
        },
        "iconSizeGetName": {
          "value": function () { return this.icon_size_get_name.apply(this, arguments); }
        },
        "iconSizeLookup": {
          "value": function () { return this.icon_size_lookup.apply(this, arguments); }
        },
        "iconSizeLookupForSettings": {
          "value": function () { return this.icon_size_lookup_for_settings.apply(this, arguments); }
        },
        "iconSizeRegister": {
          "value": function () { return this.icon_size_register.apply(this, arguments); }
        },
        "iconSizeRegisterAlias": {
          "value": function () { return this.icon_size_register_alias.apply(this, arguments); }
        },
        "iconThemeErrorQuark": {
          "value": function () { return this.icon_theme_error_quark.apply(this, arguments); }
        },
        "initCheck": {
          "value": function () { return this.init_check.apply(this, arguments); }
        },
        "initWithArgs": {
          "value": function () { return this.init_with_args.apply(this, arguments); }
        },
        "keySnooperInstall": {
          "value": function () { return this.key_snooper_install.apply(this, arguments); }
        },
        "keySnooperRemove": {
          "value": function () { return this.key_snooper_remove.apply(this, arguments); }
        },
        "mainDoEvent": {
          "value": function () { return this.main_do_event.apply(this, arguments); }
        },
        "mainIteration": {
          "value": function () { return this.main_iteration.apply(this, arguments); }
        },
        "mainIterationDo": {
          "value": function () { return this.main_iteration_do.apply(this, arguments); }
        },
        "mainLevel": {
          "value": function () { return this.main_level.apply(this, arguments); }
        },
        "mainQuit": {
          "value": function () { return this.main_quit.apply(this, arguments); }
        },
        "paintArrow": {
          "value": function () { return this.paint_arrow.apply(this, arguments); }
        },
        "paintBox": {
          "value": function () { return this.paint_box.apply(this, arguments); }
        },
        "paintBoxGap": {
          "value": function () { return this.paint_box_gap.apply(this, arguments); }
        },
        "paintCheck": {
          "value": function () { return this.paint_check.apply(this, arguments); }
        },
        "paintDiamond": {
          "value": function () { return this.paint_diamond.apply(this, arguments); }
        },
        "paintExpander": {
          "value": function () { return this.paint_expander.apply(this, arguments); }
        },
        "paintExtension": {
          "value": function () { return this.paint_extension.apply(this, arguments); }
        },
        "paintFlatBox": {
          "value": function () { return this.paint_flat_box.apply(this, arguments); }
        },
        "paintFocus": {
          "value": function () { return this.paint_focus.apply(this, arguments); }
        },
        "paintHandle": {
          "value": function () { return this.paint_handle.apply(this, arguments); }
        },
        "paintHline": {
          "value": function () { return this.paint_hline.apply(this, arguments); }
        },
        "paintLayout": {
          "value": function () { return this.paint_layout.apply(this, arguments); }
        },
        "paintOption": {
          "value": function () { return this.paint_option.apply(this, arguments); }
        },
        "paintResizeGrip": {
          "value": function () { return this.paint_resize_grip.apply(this, arguments); }
        },
        "paintShadow": {
          "value": function () { return this.paint_shadow.apply(this, arguments); }
        },
        "paintShadowGap": {
          "value": function () { return this.paint_shadow_gap.apply(this, arguments); }
        },
        "paintSlider": {
          "value": function () { return this.paint_slider.apply(this, arguments); }
        },
        "paintSpinner": {
          "value": function () { return this.paint_spinner.apply(this, arguments); }
        },
        "paintTab": {
          "value": function () { return this.paint_tab.apply(this, arguments); }
        },
        "paintVline": {
          "value": function () { return this.paint_vline.apply(this, arguments); }
        },
        "paperSizeGetDefault": {
          "value": function () { return this.paper_size_get_default.apply(this, arguments); }
        },
        "paperSizeGetPaperSizes": {
          "value": function () { return this.paper_size_get_paper_sizes.apply(this, arguments); }
        },
        "parseArgs": {
          "value": function () { return this.parse_args.apply(this, arguments); }
        },
        "printErrorQuark": {
          "value": function () { return this.print_error_quark.apply(this, arguments); }
        },
        "printRunPageSetupDialog": {
          "value": function () { return this.print_run_page_setup_dialog.apply(this, arguments); }
        },
        "printRunPageSetupDialogAsync": {
          "value": function () { return this.print_run_page_setup_dialog_async.apply(this, arguments); }
        },
        "propagateEvent": {
          "value": function () { return this.propagate_event.apply(this, arguments); }
        },
        "rcAddDefaultFile": {
          "value": function () { return this.rc_add_default_file.apply(this, arguments); }
        },
        "rcFindModuleInPath": {
          "value": function () { return this.rc_find_module_in_path.apply(this, arguments); }
        },
        "rcFindPixmapInPath": {
          "value": function () { return this.rc_find_pixmap_in_path.apply(this, arguments); }
        },
        "rcGetDefaultFiles": {
          "value": function () { return this.rc_get_default_files.apply(this, arguments); }
        },
        "rcGetImModuleFile": {
          "value": function () { return this.rc_get_im_module_file.apply(this, arguments); }
        },
        "rcGetImModulePath": {
          "value": function () { return this.rc_get_im_module_path.apply(this, arguments); }
        },
        "rcGetModuleDir": {
          "value": function () { return this.rc_get_module_dir.apply(this, arguments); }
        },
        "rcGetStyle": {
          "value": function () { return this.rc_get_style.apply(this, arguments); }
        },
        "rcGetStyleByPaths": {
          "value": function () { return this.rc_get_style_by_paths.apply(this, arguments); }
        },
        "rcGetThemeDir": {
          "value": function () { return this.rc_get_theme_dir.apply(this, arguments); }
        },
        "rcParse": {
          "value": function () { return this.rc_parse.apply(this, arguments); }
        },
        "rcParseColor": {
          "value": function () { return this.rc_parse_color.apply(this, arguments); }
        },
        "rcParseColorFull": {
          "value": function () { return this.rc_parse_color_full.apply(this, arguments); }
        },
        "rcParsePriority": {
          "value": function () { return this.rc_parse_priority.apply(this, arguments); }
        },
        "rcParseState": {
          "value": function () { return this.rc_parse_state.apply(this, arguments); }
        },
        "rcParseString": {
          "value": function () { return this.rc_parse_string.apply(this, arguments); }
        },
        "rcPropertyParseBorder": {
          "value": function () { return this.rc_property_parse_border.apply(this, arguments); }
        },
        "rcPropertyParseColor": {
          "value": function () { return this.rc_property_parse_color.apply(this, arguments); }
        },
        "rcPropertyParseEnum": {
          "value": function () { return this.rc_property_parse_enum.apply(this, arguments); }
        },
        "rcPropertyParseFlags": {
          "value": function () { return this.rc_property_parse_flags.apply(this, arguments); }
        },
        "rcPropertyParseRequisition": {
          "value": function () { return this.rc_property_parse_requisition.apply(this, arguments); }
        },
        "rcReparseAll": {
          "value": function () { return this.rc_reparse_all.apply(this, arguments); }
        },
        "rcReparseAllForSettings": {
          "value": function () { return this.rc_reparse_all_for_settings.apply(this, arguments); }
        },
        "rcResetStyles": {
          "value": function () { return this.rc_reset_styles.apply(this, arguments); }
        },
        "rcScannerNew": {
          "value": function () { return this.rc_scanner_new.apply(this, arguments); }
        },
        "rcSetDefaultFiles": {
          "value": function () { return this.rc_set_default_files.apply(this, arguments); }
        },
        "recentChooserErrorQuark": {
          "value": function () { return this.recent_chooser_error_quark.apply(this, arguments); }
        },
        "recentManagerErrorQuark": {
          "value": function () { return this.recent_manager_error_quark.apply(this, arguments); }
        },
        "renderActivity": {
          "value": function () { return this.render_activity.apply(this, arguments); }
        },
        "renderArrow": {
          "value": function () { return this.render_arrow.apply(this, arguments); }
        },
        "renderBackground": {
          "value": function () { return this.render_background.apply(this, arguments); }
        },
        "renderCheck": {
          "value": function () { return this.render_check.apply(this, arguments); }
        },
        "renderExpander": {
          "value": function () { return this.render_expander.apply(this, arguments); }
        },
        "renderExtension": {
          "value": function () { return this.render_extension.apply(this, arguments); }
        },
        "renderFocus": {
          "value": function () { return this.render_focus.apply(this, arguments); }
        },
        "renderFrame": {
          "value": function () { return this.render_frame.apply(this, arguments); }
        },
        "renderFrameGap": {
          "value": function () { return this.render_frame_gap.apply(this, arguments); }
        },
        "renderHandle": {
          "value": function () { return this.render_handle.apply(this, arguments); }
        },
        "renderIcon": {
          "value": function () { return this.render_icon.apply(this, arguments); }
        },
        "renderIconPixbuf": {
          "value": function () { return this.render_icon_pixbuf.apply(this, arguments); }
        },
        "renderIconSurface": {
          "value": function () { return this.render_icon_surface.apply(this, arguments); }
        },
        "renderInsertionCursor": {
          "value": function () { return this.render_insertion_cursor.apply(this, arguments); }
        },
        "renderLayout": {
          "value": function () { return this.render_layout.apply(this, arguments); }
        },
        "renderLine": {
          "value": function () { return this.render_line.apply(this, arguments); }
        },
        "renderOption": {
          "value": function () { return this.render_option.apply(this, arguments); }
        },
        "renderSlider": {
          "value": function () { return this.render_slider.apply(this, arguments); }
        },
        "rgbToHsv": {
          "value": function () { return this.rgb_to_hsv.apply(this, arguments); }
        },
        "selectionAddTarget": {
          "value": function () { return this.selection_add_target.apply(this, arguments); }
        },
        "selectionAddTargets": {
          "value": function () { return this.selection_add_targets.apply(this, arguments); }
        },
        "selectionClearTargets": {
          "value": function () { return this.selection_clear_targets.apply(this, arguments); }
        },
        "selectionConvert": {
          "value": function () { return this.selection_convert.apply(this, arguments); }
        },
        "selectionOwnerSet": {
          "value": function () { return this.selection_owner_set.apply(this, arguments); }
        },
        "selectionOwnerSetForDisplay": {
          "value": function () { return this.selection_owner_set_for_display.apply(this, arguments); }
        },
        "selectionRemoveAll": {
          "value": function () { return this.selection_remove_all.apply(this, arguments); }
        },
        "setDebugFlags": {
          "value": function () { return this.set_debug_flags.apply(this, arguments); }
        },
        "showAboutDialog": {
          "value": function () { return this.show_about_dialog.apply(this, arguments); }
        },
        "showUri": {
          "value": function () { return this.show_uri.apply(this, arguments); }
        },
        "stockAdd": {
          "value": function () { return this.stock_add.apply(this, arguments); }
        },
        "stockAddStatic": {
          "value": function () { return this.stock_add_static.apply(this, arguments); }
        },
        "stockListIds": {
          "value": function () { return this.stock_list_ids.apply(this, arguments); }
        },
        "stockLookup": {
          "value": function () { return this.stock_lookup.apply(this, arguments); }
        },
        "stockSetTranslateFunc": {
          "value": function () { return this.stock_set_translate_func.apply(this, arguments); }
        },
        "targetTableFree": {
          "value": function () { return this.target_table_free.apply(this, arguments); }
        },
        "targetTableNewFromList": {
          "value": function () { return this.target_table_new_from_list.apply(this, arguments); }
        },
        "targetsIncludeImage": {
          "value": function () { return this.targets_include_image.apply(this, arguments); }
        },
        "targetsIncludeRichText": {
          "value": function () { return this.targets_include_rich_text.apply(this, arguments); }
        },
        "targetsIncludeText": {
          "value": function () { return this.targets_include_text.apply(this, arguments); }
        },
        "targetsIncludeUri": {
          "value": function () { return this.targets_include_uri.apply(this, arguments); }
        },
        "testCreateSimpleWindow": {
          "value": function () { return this.test_create_simple_window.apply(this, arguments); }
        },
        "testCreateWidget": {
          "value": function () { return this.test_create_widget.apply(this, arguments); }
        },
        "testDisplayButtonWindow": {
          "value": function () { return this.test_display_button_window.apply(this, arguments); }
        },
        "testFindLabel": {
          "value": function () { return this.test_find_label.apply(this, arguments); }
        },
        "testFindSibling": {
          "value": function () { return this.test_find_sibling.apply(this, arguments); }
        },
        "testFindWidget": {
          "value": function () { return this.test_find_widget.apply(this, arguments); }
        },
        "testInit": {
          "value": function () { return this.test_init.apply(this, arguments); }
        },
        "testListAllTypes": {
          "value": function () { return this.test_list_all_types.apply(this, arguments); }
        },
        "testRegisterAllTypes": {
          "value": function () { return this.test_register_all_types.apply(this, arguments); }
        },
        "testSliderGetValue": {
          "value": function () { return this.test_slider_get_value.apply(this, arguments); }
        },
        "testSliderSetPerc": {
          "value": function () { return this.test_slider_set_perc.apply(this, arguments); }
        },
        "testSpinButtonClick": {
          "value": function () { return this.test_spin_button_click.apply(this, arguments); }
        },
        "testTextGet": {
          "value": function () { return this.test_text_get.apply(this, arguments); }
        },
        "testTextSet": {
          "value": function () { return this.test_text_set.apply(this, arguments); }
        },
        "testWidgetClick": {
          "value": function () { return this.test_widget_click.apply(this, arguments); }
        },
        "testWidgetSendKey": {
          "value": function () { return this.test_widget_send_key.apply(this, arguments); }
        },
        "testWidgetWaitForDraw": {
          "value": function () { return this.test_widget_wait_for_draw.apply(this, arguments); }
        },
        "treeGetRowDragData": {
          "value": function () { return this.tree_get_row_drag_data.apply(this, arguments); }
        },
        "treeRowReferenceDeleted": {
          "value": function () { return this.tree_row_reference_deleted.apply(this, arguments); }
        },
        "treeRowReferenceInserted": {
          "value": function () { return this.tree_row_reference_inserted.apply(this, arguments); }
        },
        "treeRowReferenceReordered": {
          "value": function () { return this.tree_row_reference_reordered.apply(this, arguments); }
        },
        "treeSetRowDragData": {
          "value": function () { return this.tree_set_row_drag_data.apply(this, arguments); }
        }
      }
    },
    "GtkChamplain": {
      "class": {
        "Embed": {
          "prototype": {
            "getView": {
              "value": function () { return this.get_view.apply(this, arguments); }
            },
            "champlainView": {
              "get": function () { return this.champlain_view; },
              "set": function (value) { this.champlain_view = value; }
            }
          },
          "static": {}
        }
      },
      "static": {}
    },
    "GtkClutter": {
      "class": {
        "Actor": {
          "prototype": {
            "getContents": {
              "value": function () { return this.get_contents.apply(this, arguments); }
            },
            "getWidget": {
              "value": function () { return this.get_widget.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Embed": {
          "prototype": {
            "getStage": {
              "value": function () { return this.get_stage.apply(this, arguments); }
            },
            "getUseLayoutSize": {
              "value": function () { return this.get_use_layout_size.apply(this, arguments); }
            },
            "setUseLayoutSize": {
              "value": function () { return this.set_use_layout_size.apply(this, arguments); }
            },
            "useLayoutSize": {
              "get": function () { return this.use_layout_size; },
              "set": function (value) { this.use_layout_size = value; }
            }
          },
          "static": {}
        },
        "Texture": {
          "prototype": {
            "setFromIconName": {
              "value": function () { return this.set_from_icon_name.apply(this, arguments); }
            },
            "setFromPixbuf": {
              "value": function () { return this.set_from_pixbuf.apply(this, arguments); }
            },
            "setFromStock": {
              "value": function () { return this.set_from_stock.apply(this, arguments); }
            }
          },
          "static": {
            "errorQuark": {
              "value": function () { return this.error_quark.apply(this, arguments); }
            }
          }
        },
        "Window": {
          "prototype": {
            "getStage": {
              "value": function () { return this.get_stage.apply(this, arguments); }
            }
          },
          "static": {}
        }
      },
      "static": {
        "getOptionGroup": {
          "value": function () { return this.get_option_group.apply(this, arguments); }
        },
        "initWithArgs": {
          "value": function () { return this.init_with_args.apply(this, arguments); }
        }
      }
    },
    "GtkSource": {
      "class": {
        "Buffer": {
          "prototype": {
            "backwardIterToSourceMark": {
              "value": function () { return this.backward_iter_to_source_mark.apply(this, arguments); }
            },
            "beginNotUndoableAction": {
              "value": function () { return this.begin_not_undoable_action.apply(this, arguments); }
            },
            "canRedo": {
              "get": function () { return this.can_redo; },
              "set": function (value) { this.can_redo = value; }
            },
            "canUndo": {
              "get": function () { return this.can_undo; },
              "set": function (value) { this.can_undo = value; }
            },
            "changeCase": {
              "value": function () { return this.change_case.apply(this, arguments); }
            },
            "createSourceMark": {
              "value": function () { return this.create_source_mark.apply(this, arguments); }
            },
            "endNotUndoableAction": {
              "value": function () { return this.end_not_undoable_action.apply(this, arguments); }
            },
            "ensureHighlight": {
              "value": function () { return this.ensure_highlight.apply(this, arguments); }
            },
            "forwardIterToSourceMark": {
              "value": function () { return this.forward_iter_to_source_mark.apply(this, arguments); }
            },
            "getContextClassesAtIter": {
              "value": function () { return this.get_context_classes_at_iter.apply(this, arguments); }
            },
            "getHighlightMatchingBrackets": {
              "value": function () { return this.get_highlight_matching_brackets.apply(this, arguments); }
            },
            "getHighlightSyntax": {
              "value": function () { return this.get_highlight_syntax.apply(this, arguments); }
            },
            "getImplicitTrailingNewline": {
              "value": function () { return this.get_implicit_trailing_newline.apply(this, arguments); }
            },
            "getLanguage": {
              "value": function () { return this.get_language.apply(this, arguments); }
            },
            "getMaxUndoLevels": {
              "value": function () { return this.get_max_undo_levels.apply(this, arguments); }
            },
            "getSourceMarksAtIter": {
              "value": function () { return this.get_source_marks_at_iter.apply(this, arguments); }
            },
            "getSourceMarksAtLine": {
              "value": function () { return this.get_source_marks_at_line.apply(this, arguments); }
            },
            "getStyleScheme": {
              "value": function () { return this.get_style_scheme.apply(this, arguments); }
            },
            "getUndoManager": {
              "value": function () { return this.get_undo_manager.apply(this, arguments); }
            },
            "iterBackwardToContextClassToggle": {
              "value": function () { return this.iter_backward_to_context_class_toggle.apply(this, arguments); }
            },
            "iterForwardToContextClassToggle": {
              "value": function () { return this.iter_forward_to_context_class_toggle.apply(this, arguments); }
            },
            "iterHasContextClass": {
              "value": function () { return this.iter_has_context_class.apply(this, arguments); }
            },
            "joinLines": {
              "value": function () { return this.join_lines.apply(this, arguments); }
            },
            "removeSourceMarks": {
              "value": function () { return this.remove_source_marks.apply(this, arguments); }
            },
            "setHighlightMatchingBrackets": {
              "value": function () { return this.set_highlight_matching_brackets.apply(this, arguments); }
            },
            "setHighlightSyntax": {
              "value": function () { return this.set_highlight_syntax.apply(this, arguments); }
            },
            "setImplicitTrailingNewline": {
              "value": function () { return this.set_implicit_trailing_newline.apply(this, arguments); }
            },
            "setLanguage": {
              "value": function () { return this.set_language.apply(this, arguments); }
            },
            "setMaxUndoLevels": {
              "value": function () { return this.set_max_undo_levels.apply(this, arguments); }
            },
            "setStyleScheme": {
              "value": function () { return this.set_style_scheme.apply(this, arguments); }
            },
            "setUndoManager": {
              "value": function () { return this.set_undo_manager.apply(this, arguments); }
            },
            "sortLines": {
              "value": function () { return this.sort_lines.apply(this, arguments); }
            },
            "highlightMatchingBrackets": {
              "get": function () { return this.highlight_matching_brackets; },
              "set": function (value) { this.highlight_matching_brackets = value; }
            },
            "highlightSyntax": {
              "get": function () { return this.highlight_syntax; },
              "set": function (value) { this.highlight_syntax = value; }
            },
            "implicitTrailingNewline": {
              "get": function () { return this.implicit_trailing_newline; },
              "set": function (value) { this.implicit_trailing_newline = value; }
            },
            "maxUndoLevels": {
              "get": function () { return this.max_undo_levels; },
              "set": function (value) { this.max_undo_levels = value; }
            },
            "styleScheme": {
              "get": function () { return this.style_scheme; },
              "set": function (value) { this.style_scheme = value; }
            },
            "undoManager": {
              "get": function () { return this.undo_manager; },
              "set": function (value) { this.undo_manager = value; }
            }
          },
          "static": {}
        },
        "Completion": {
          "prototype": {
            "addProvider": {
              "value": function () { return this.add_provider.apply(this, arguments); }
            },
            "blockInteractive": {
              "value": function () { return this.block_interactive.apply(this, arguments); }
            },
            "createContext": {
              "value": function () { return this.create_context.apply(this, arguments); }
            },
            "getInfoWindow": {
              "value": function () { return this.get_info_window.apply(this, arguments); }
            },
            "getProviders": {
              "value": function () { return this.get_providers.apply(this, arguments); }
            },
            "getView": {
              "value": function () { return this.get_view.apply(this, arguments); }
            },
            "moveWindow": {
              "value": function () { return this.move_window.apply(this, arguments); }
            },
            "removeProvider": {
              "value": function () { return this.remove_provider.apply(this, arguments); }
            },
            "unblockInteractive": {
              "value": function () { return this.unblock_interactive.apply(this, arguments); }
            },
            "autoCompleteDelay": {
              "get": function () { return this.auto_complete_delay; },
              "set": function (value) { this.auto_complete_delay = value; }
            },
            "proposalPageSize": {
              "get": function () { return this.proposal_page_size; },
              "set": function (value) { this.proposal_page_size = value; }
            },
            "providerPageSize": {
              "get": function () { return this.provider_page_size; },
              "set": function (value) { this.provider_page_size = value; }
            },
            "rememberInfoVisibility": {
              "get": function () { return this.remember_info_visibility; },
              "set": function (value) { this.remember_info_visibility = value; }
            },
            "selectOnShow": {
              "get": function () { return this.select_on_show; },
              "set": function (value) { this.select_on_show = value; }
            },
            "showHeaders": {
              "get": function () { return this.show_headers; },
              "set": function (value) { this.show_headers = value; }
            },
            "showIcons": {
              "get": function () { return this.show_icons; },
              "set": function (value) { this.show_icons = value; }
            }
          },
          "static": {}
        },
        "CompletionContext": {
          "prototype": {
            "addProposals": {
              "value": function () { return this.add_proposals.apply(this, arguments); }
            },
            "getActivation": {
              "value": function () { return this.get_activation.apply(this, arguments); }
            },
            "getIter": {
              "value": function () { return this.get_iter.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "CompletionInfo": {
          "prototype": {
            "getWidget": {
              "value": function () { return this.get_widget.apply(this, arguments); }
            },
            "moveToIter": {
              "value": function () { return this.move_to_iter.apply(this, arguments); }
            },
            "setWidget": {
              "value": function () { return this.set_widget.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "CompletionItem": {
          "prototype": {
            "iconName": {
              "get": function () { return this.icon_name; },
              "set": function (value) { this.icon_name = value; }
            }
          },
          "static": {}
        },
        "CompletionWords": {
          "prototype": {
            "interactiveDelay": {
              "get": function () { return this.interactive_delay; },
              "set": function (value) { this.interactive_delay = value; }
            },
            "minimumWordSize": {
              "get": function () { return this.minimum_word_size; },
              "set": function (value) { this.minimum_word_size = value; }
            },
            "proposalsBatchSize": {
              "get": function () { return this.proposals_batch_size; },
              "set": function (value) { this.proposals_batch_size = value; }
            },
            "scanBatchSize": {
              "get": function () { return this.scan_batch_size; },
              "set": function (value) { this.scan_batch_size = value; }
            }
          },
          "static": {}
        },
        "File": {
          "prototype": {
            "checkFileOnDisk": {
              "value": function () { return this.check_file_on_disk.apply(this, arguments); }
            },
            "getCompressionType": {
              "value": function () { return this.get_compression_type.apply(this, arguments); }
            },
            "getEncoding": {
              "value": function () { return this.get_encoding.apply(this, arguments); }
            },
            "getLocation": {
              "value": function () { return this.get_location.apply(this, arguments); }
            },
            "getNewlineType": {
              "value": function () { return this.get_newline_type.apply(this, arguments); }
            },
            "isDeleted": {
              "value": function () { return this.is_deleted.apply(this, arguments); }
            },
            "isExternallyModified": {
              "value": function () { return this.is_externally_modified.apply(this, arguments); }
            },
            "isLocal": {
              "value": function () { return this.is_local.apply(this, arguments); }
            },
            "isReadonly": {
              "value": function () { return this.is_readonly.apply(this, arguments); }
            },
            "setLocation": {
              "value": function () { return this.set_location.apply(this, arguments); }
            },
            "setMountOperationFactory": {
              "value": function () { return this.set_mount_operation_factory.apply(this, arguments); }
            },
            "compressionType": {
              "get": function () { return this.compression_type; },
              "set": function (value) { this.compression_type = value; }
            },
            "newlineType": {
              "get": function () { return this.newline_type; },
              "set": function (value) { this.newline_type = value; }
            },
            "readOnly": {
              "get": function () { return this.read_only; },
              "set": function (value) { this.read_only = value; }
            }
          },
          "static": {}
        },
        "FileLoader": {
          "prototype": {
            "getBuffer": {
              "value": function () { return this.get_buffer.apply(this, arguments); }
            },
            "getCompressionType": {
              "value": function () { return this.get_compression_type.apply(this, arguments); }
            },
            "getEncoding": {
              "value": function () { return this.get_encoding.apply(this, arguments); }
            },
            "getFile": {
              "value": function () { return this.get_file.apply(this, arguments); }
            },
            "getInputStream": {
              "value": function () { return this.get_input_stream.apply(this, arguments); }
            },
            "getLocation": {
              "value": function () { return this.get_location.apply(this, arguments); }
            },
            "getNewlineType": {
              "value": function () { return this.get_newline_type.apply(this, arguments); }
            },
            "loadAsync": {
              "value": function () { return this.load_async.apply(this, arguments); }
            },
            "loadFinish": {
              "value": function () { return this.load_finish.apply(this, arguments); }
            },
            "setCandidateEncodings": {
              "value": function () { return this.set_candidate_encodings.apply(this, arguments); }
            },
            "inputStream": {
              "get": function () { return this.input_stream; },
              "set": function (value) { this.input_stream = value; }
            }
          },
          "static": {}
        },
        "FileSaver": {
          "prototype": {
            "getBuffer": {
              "value": function () { return this.get_buffer.apply(this, arguments); }
            },
            "getCompressionType": {
              "value": function () { return this.get_compression_type.apply(this, arguments); }
            },
            "getEncoding": {
              "value": function () { return this.get_encoding.apply(this, arguments); }
            },
            "getFile": {
              "value": function () { return this.get_file.apply(this, arguments); }
            },
            "getFlags": {
              "value": function () { return this.get_flags.apply(this, arguments); }
            },
            "getLocation": {
              "value": function () { return this.get_location.apply(this, arguments); }
            },
            "getNewlineType": {
              "value": function () { return this.get_newline_type.apply(this, arguments); }
            },
            "saveAsync": {
              "value": function () { return this.save_async.apply(this, arguments); }
            },
            "saveFinish": {
              "value": function () { return this.save_finish.apply(this, arguments); }
            },
            "setCompressionType": {
              "value": function () { return this.set_compression_type.apply(this, arguments); }
            },
            "setEncoding": {
              "value": function () { return this.set_encoding.apply(this, arguments); }
            },
            "setFlags": {
              "value": function () { return this.set_flags.apply(this, arguments); }
            },
            "setNewlineType": {
              "value": function () { return this.set_newline_type.apply(this, arguments); }
            },
            "compressionType": {
              "get": function () { return this.compression_type; },
              "set": function (value) { this.compression_type = value; }
            },
            "newlineType": {
              "get": function () { return this.newline_type; },
              "set": function (value) { this.newline_type = value; }
            }
          },
          "static": {}
        },
        "Gutter": {
          "prototype": {
            "getPadding": {
              "value": function () { return this.get_padding.apply(this, arguments); }
            },
            "getRendererAtPos": {
              "value": function () { return this.get_renderer_at_pos.apply(this, arguments); }
            },
            "getWindow": {
              "value": function () { return this.get_window.apply(this, arguments); }
            },
            "queueDraw": {
              "value": function () { return this.queue_draw.apply(this, arguments); }
            },
            "setPadding": {
              "value": function () { return this.set_padding.apply(this, arguments); }
            },
            "windowType": {
              "get": function () { return this.window_type; },
              "set": function (value) { this.window_type = value; }
            }
          },
          "static": {}
        },
        "GutterRenderer": {
          "prototype": {
            "getAlignment": {
              "value": function () { return this.get_alignment.apply(this, arguments); }
            },
            "getAlignmentMode": {
              "value": function () { return this.get_alignment_mode.apply(this, arguments); }
            },
            "getBackground": {
              "value": function () { return this.get_background.apply(this, arguments); }
            },
            "getPadding": {
              "value": function () { return this.get_padding.apply(this, arguments); }
            },
            "getSize": {
              "value": function () { return this.get_size.apply(this, arguments); }
            },
            "getView": {
              "value": function () { return this.get_view.apply(this, arguments); }
            },
            "getVisible": {
              "value": function () { return this.get_visible.apply(this, arguments); }
            },
            "getWindowType": {
              "value": function () { return this.get_window_type.apply(this, arguments); }
            },
            "queryActivatable": {
              "value": function () { return this.query_activatable.apply(this, arguments); }
            },
            "queryData": {
              "value": function () { return this.query_data.apply(this, arguments); }
            },
            "queryTooltip": {
              "value": function () { return this.query_tooltip.apply(this, arguments); }
            },
            "queueDraw": {
              "value": function () { return this.queue_draw.apply(this, arguments); }
            },
            "setAlignment": {
              "value": function () { return this.set_alignment.apply(this, arguments); }
            },
            "setAlignmentMode": {
              "value": function () { return this.set_alignment_mode.apply(this, arguments); }
            },
            "setBackground": {
              "value": function () { return this.set_background.apply(this, arguments); }
            },
            "setPadding": {
              "value": function () { return this.set_padding.apply(this, arguments); }
            },
            "setSize": {
              "value": function () { return this.set_size.apply(this, arguments); }
            },
            "setVisible": {
              "value": function () { return this.set_visible.apply(this, arguments); }
            },
            "alignmentMode": {
              "get": function () { return this.alignment_mode; },
              "set": function (value) { this.alignment_mode = value; }
            },
            "backgroundRgba": {
              "get": function () { return this.background_rgba; },
              "set": function (value) { this.background_rgba = value; }
            },
            "backgroundSet": {
              "get": function () { return this.background_set; },
              "set": function (value) { this.background_set = value; }
            },
            "windowType": {
              "get": function () { return this.window_type; },
              "set": function (value) { this.window_type = value; }
            }
          },
          "static": {}
        },
        "GutterRendererPixbuf": {
          "prototype": {
            "getGicon": {
              "value": function () { return this.get_gicon.apply(this, arguments); }
            },
            "getIconName": {
              "value": function () { return this.get_icon_name.apply(this, arguments); }
            },
            "getPixbuf": {
              "value": function () { return this.get_pixbuf.apply(this, arguments); }
            },
            "getStockId": {
              "value": function () { return this.get_stock_id.apply(this, arguments); }
            },
            "setGicon": {
              "value": function () { return this.set_gicon.apply(this, arguments); }
            },
            "setIconName": {
              "value": function () { return this.set_icon_name.apply(this, arguments); }
            },
            "setPixbuf": {
              "value": function () { return this.set_pixbuf.apply(this, arguments); }
            },
            "setStockId": {
              "value": function () { return this.set_stock_id.apply(this, arguments); }
            },
            "iconName": {
              "get": function () { return this.icon_name; },
              "set": function (value) { this.icon_name = value; }
            },
            "stockId": {
              "get": function () { return this.stock_id; },
              "set": function (value) { this.stock_id = value; }
            }
          },
          "static": {}
        },
        "GutterRendererText": {
          "prototype": {
            "measureMarkup": {
              "value": function () { return this.measure_markup.apply(this, arguments); }
            },
            "setMarkup": {
              "value": function () { return this.set_markup.apply(this, arguments); }
            },
            "setText": {
              "value": function () { return this.set_text.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Language": {
          "prototype": {
            "getGlobs": {
              "value": function () { return this.get_globs.apply(this, arguments); }
            },
            "getHidden": {
              "value": function () { return this.get_hidden.apply(this, arguments); }
            },
            "getId": {
              "value": function () { return this.get_id.apply(this, arguments); }
            },
            "getMetadata": {
              "value": function () { return this.get_metadata.apply(this, arguments); }
            },
            "getMimeTypes": {
              "value": function () { return this.get_mime_types.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getSection": {
              "value": function () { return this.get_section.apply(this, arguments); }
            },
            "getStyleFallback": {
              "value": function () { return this.get_style_fallback.apply(this, arguments); }
            },
            "getStyleIds": {
              "value": function () { return this.get_style_ids.apply(this, arguments); }
            },
            "getStyleName": {
              "value": function () { return this.get_style_name.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "LanguageManager": {
          "prototype": {
            "getLanguage": {
              "value": function () { return this.get_language.apply(this, arguments); }
            },
            "getLanguageIds": {
              "value": function () { return this.get_language_ids.apply(this, arguments); }
            },
            "getSearchPath": {
              "value": function () { return this.get_search_path.apply(this, arguments); }
            },
            "guessLanguage": {
              "value": function () { return this.guess_language.apply(this, arguments); }
            },
            "setSearchPath": {
              "value": function () { return this.set_search_path.apply(this, arguments); }
            },
            "languageIds": {
              "get": function () { return this.language_ids; },
              "set": function (value) { this.language_ids = value; }
            },
            "searchPath": {
              "get": function () { return this.search_path; },
              "set": function (value) { this.search_path = value; }
            }
          },
          "static": {
            "getDefault": {
              "value": function () { return this.get_default.apply(this, arguments); }
            }
          }
        },
        "Map": {
          "prototype": {
            "getView": {
              "value": function () { return this.get_view.apply(this, arguments); }
            },
            "setView": {
              "value": function () { return this.set_view.apply(this, arguments); }
            },
            "fontDesc": {
              "get": function () { return this.font_desc; },
              "set": function (value) { this.font_desc = value; }
            }
          },
          "static": {}
        },
        "Mark": {
          "prototype": {
            "getCategory": {
              "value": function () { return this.get_category.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "MarkAttributes": {
          "prototype": {
            "getBackground": {
              "value": function () { return this.get_background.apply(this, arguments); }
            },
            "getGicon": {
              "value": function () { return this.get_gicon.apply(this, arguments); }
            },
            "getIconName": {
              "value": function () { return this.get_icon_name.apply(this, arguments); }
            },
            "getPixbuf": {
              "value": function () { return this.get_pixbuf.apply(this, arguments); }
            },
            "getStockId": {
              "value": function () { return this.get_stock_id.apply(this, arguments); }
            },
            "getTooltipMarkup": {
              "value": function () { return this.get_tooltip_markup.apply(this, arguments); }
            },
            "getTooltipText": {
              "value": function () { return this.get_tooltip_text.apply(this, arguments); }
            },
            "renderIcon": {
              "value": function () { return this.render_icon.apply(this, arguments); }
            },
            "setBackground": {
              "value": function () { return this.set_background.apply(this, arguments); }
            },
            "setGicon": {
              "value": function () { return this.set_gicon.apply(this, arguments); }
            },
            "setIconName": {
              "value": function () { return this.set_icon_name.apply(this, arguments); }
            },
            "setPixbuf": {
              "value": function () { return this.set_pixbuf.apply(this, arguments); }
            },
            "setStockId": {
              "value": function () { return this.set_stock_id.apply(this, arguments); }
            },
            "iconName": {
              "get": function () { return this.icon_name; },
              "set": function (value) { this.icon_name = value; }
            },
            "stockId": {
              "get": function () { return this.stock_id; },
              "set": function (value) { this.stock_id = value; }
            }
          },
          "static": {}
        },
        "PrintCompositor": {
          "prototype": {
            "drawPage": {
              "value": function () { return this.draw_page.apply(this, arguments); }
            },
            "getBodyFontName": {
              "value": function () { return this.get_body_font_name.apply(this, arguments); }
            },
            "getBottomMargin": {
              "value": function () { return this.get_bottom_margin.apply(this, arguments); }
            },
            "getBuffer": {
              "value": function () { return this.get_buffer.apply(this, arguments); }
            },
            "getFooterFontName": {
              "value": function () { return this.get_footer_font_name.apply(this, arguments); }
            },
            "getHeaderFontName": {
              "value": function () { return this.get_header_font_name.apply(this, arguments); }
            },
            "getHighlightSyntax": {
              "value": function () { return this.get_highlight_syntax.apply(this, arguments); }
            },
            "getLeftMargin": {
              "value": function () { return this.get_left_margin.apply(this, arguments); }
            },
            "getLineNumbersFontName": {
              "value": function () { return this.get_line_numbers_font_name.apply(this, arguments); }
            },
            "getNPages": {
              "value": function () { return this.get_n_pages.apply(this, arguments); }
            },
            "getPaginationProgress": {
              "value": function () { return this.get_pagination_progress.apply(this, arguments); }
            },
            "getPrintFooter": {
              "value": function () { return this.get_print_footer.apply(this, arguments); }
            },
            "getPrintHeader": {
              "value": function () { return this.get_print_header.apply(this, arguments); }
            },
            "getPrintLineNumbers": {
              "value": function () { return this.get_print_line_numbers.apply(this, arguments); }
            },
            "getRightMargin": {
              "value": function () { return this.get_right_margin.apply(this, arguments); }
            },
            "getTabWidth": {
              "value": function () { return this.get_tab_width.apply(this, arguments); }
            },
            "getTopMargin": {
              "value": function () { return this.get_top_margin.apply(this, arguments); }
            },
            "getWrapMode": {
              "value": function () { return this.get_wrap_mode.apply(this, arguments); }
            },
            "setBodyFontName": {
              "value": function () { return this.set_body_font_name.apply(this, arguments); }
            },
            "setBottomMargin": {
              "value": function () { return this.set_bottom_margin.apply(this, arguments); }
            },
            "setFooterFontName": {
              "value": function () { return this.set_footer_font_name.apply(this, arguments); }
            },
            "setFooterFormat": {
              "value": function () { return this.set_footer_format.apply(this, arguments); }
            },
            "setHeaderFontName": {
              "value": function () { return this.set_header_font_name.apply(this, arguments); }
            },
            "setHeaderFormat": {
              "value": function () { return this.set_header_format.apply(this, arguments); }
            },
            "setHighlightSyntax": {
              "value": function () { return this.set_highlight_syntax.apply(this, arguments); }
            },
            "setLeftMargin": {
              "value": function () { return this.set_left_margin.apply(this, arguments); }
            },
            "setLineNumbersFontName": {
              "value": function () { return this.set_line_numbers_font_name.apply(this, arguments); }
            },
            "setPrintFooter": {
              "value": function () { return this.set_print_footer.apply(this, arguments); }
            },
            "setPrintHeader": {
              "value": function () { return this.set_print_header.apply(this, arguments); }
            },
            "setPrintLineNumbers": {
              "value": function () { return this.set_print_line_numbers.apply(this, arguments); }
            },
            "setRightMargin": {
              "value": function () { return this.set_right_margin.apply(this, arguments); }
            },
            "setTabWidth": {
              "value": function () { return this.set_tab_width.apply(this, arguments); }
            },
            "setTopMargin": {
              "value": function () { return this.set_top_margin.apply(this, arguments); }
            },
            "setWrapMode": {
              "value": function () { return this.set_wrap_mode.apply(this, arguments); }
            },
            "bodyFontName": {
              "get": function () { return this.body_font_name; },
              "set": function (value) { this.body_font_name = value; }
            },
            "footerFontName": {
              "get": function () { return this.footer_font_name; },
              "set": function (value) { this.footer_font_name = value; }
            },
            "headerFontName": {
              "get": function () { return this.header_font_name; },
              "set": function (value) { this.header_font_name = value; }
            },
            "highlightSyntax": {
              "get": function () { return this.highlight_syntax; },
              "set": function (value) { this.highlight_syntax = value; }
            },
            "lineNumbersFontName": {
              "get": function () { return this.line_numbers_font_name; },
              "set": function (value) { this.line_numbers_font_name = value; }
            },
            "nPages": {
              "get": function () { return this.n_pages; },
              "set": function (value) { this.n_pages = value; }
            },
            "printFooter": {
              "get": function () { return this.print_footer; },
              "set": function (value) { this.print_footer = value; }
            },
            "printHeader": {
              "get": function () { return this.print_header; },
              "set": function (value) { this.print_header = value; }
            },
            "printLineNumbers": {
              "get": function () { return this.print_line_numbers; },
              "set": function (value) { this.print_line_numbers = value; }
            },
            "tabWidth": {
              "get": function () { return this.tab_width; },
              "set": function (value) { this.tab_width = value; }
            },
            "wrapMode": {
              "get": function () { return this.wrap_mode; },
              "set": function (value) { this.wrap_mode = value; }
            }
          },
          "static": {}
        },
        "SearchContext": {
          "prototype": {
            "backwardAsync": {
              "value": function () { return this.backward_async.apply(this, arguments); }
            },
            "backwardFinish": {
              "value": function () { return this.backward_finish.apply(this, arguments); }
            },
            "forwardAsync": {
              "value": function () { return this.forward_async.apply(this, arguments); }
            },
            "forwardFinish": {
              "value": function () { return this.forward_finish.apply(this, arguments); }
            },
            "getBuffer": {
              "value": function () { return this.get_buffer.apply(this, arguments); }
            },
            "getHighlight": {
              "value": function () { return this.get_highlight.apply(this, arguments); }
            },
            "getMatchStyle": {
              "value": function () { return this.get_match_style.apply(this, arguments); }
            },
            "getOccurrencePosition": {
              "value": function () { return this.get_occurrence_position.apply(this, arguments); }
            },
            "getOccurrencesCount": {
              "value": function () { return this.get_occurrences_count.apply(this, arguments); }
            },
            "getRegexError": {
              "value": function () { return this.get_regex_error.apply(this, arguments); }
            },
            "getSettings": {
              "value": function () { return this.get_settings.apply(this, arguments); }
            },
            "replaceAll": {
              "value": function () { return this.replace_all.apply(this, arguments); }
            },
            "setHighlight": {
              "value": function () { return this.set_highlight.apply(this, arguments); }
            },
            "setMatchStyle": {
              "value": function () { return this.set_match_style.apply(this, arguments); }
            },
            "setSettings": {
              "value": function () { return this.set_settings.apply(this, arguments); }
            },
            "matchStyle": {
              "get": function () { return this.match_style; },
              "set": function (value) { this.match_style = value; }
            },
            "occurrencesCount": {
              "get": function () { return this.occurrences_count; },
              "set": function (value) { this.occurrences_count = value; }
            },
            "regexError": {
              "get": function () { return this.regex_error; },
              "set": function (value) { this.regex_error = value; }
            }
          },
          "static": {}
        },
        "SearchSettings": {
          "prototype": {
            "getAtWordBoundaries": {
              "value": function () { return this.get_at_word_boundaries.apply(this, arguments); }
            },
            "getCaseSensitive": {
              "value": function () { return this.get_case_sensitive.apply(this, arguments); }
            },
            "getRegexEnabled": {
              "value": function () { return this.get_regex_enabled.apply(this, arguments); }
            },
            "getSearchText": {
              "value": function () { return this.get_search_text.apply(this, arguments); }
            },
            "getWrapAround": {
              "value": function () { return this.get_wrap_around.apply(this, arguments); }
            },
            "setAtWordBoundaries": {
              "value": function () { return this.set_at_word_boundaries.apply(this, arguments); }
            },
            "setCaseSensitive": {
              "value": function () { return this.set_case_sensitive.apply(this, arguments); }
            },
            "setRegexEnabled": {
              "value": function () { return this.set_regex_enabled.apply(this, arguments); }
            },
            "setSearchText": {
              "value": function () { return this.set_search_text.apply(this, arguments); }
            },
            "setWrapAround": {
              "value": function () { return this.set_wrap_around.apply(this, arguments); }
            },
            "atWordBoundaries": {
              "get": function () { return this.at_word_boundaries; },
              "set": function (value) { this.at_word_boundaries = value; }
            },
            "caseSensitive": {
              "get": function () { return this.case_sensitive; },
              "set": function (value) { this.case_sensitive = value; }
            },
            "regexEnabled": {
              "get": function () { return this.regex_enabled; },
              "set": function (value) { this.regex_enabled = value; }
            },
            "searchText": {
              "get": function () { return this.search_text; },
              "set": function (value) { this.search_text = value; }
            },
            "wrapAround": {
              "get": function () { return this.wrap_around; },
              "set": function (value) { this.wrap_around = value; }
            }
          },
          "static": {}
        },
        "Style": {
          "prototype": {
            "backgroundSet": {
              "get": function () { return this.background_set; },
              "set": function (value) { this.background_set = value; }
            },
            "boldSet": {
              "get": function () { return this.bold_set; },
              "set": function (value) { this.bold_set = value; }
            },
            "foregroundSet": {
              "get": function () { return this.foreground_set; },
              "set": function (value) { this.foreground_set = value; }
            },
            "italicSet": {
              "get": function () { return this.italic_set; },
              "set": function (value) { this.italic_set = value; }
            },
            "lineBackground": {
              "get": function () { return this.line_background; },
              "set": function (value) { this.line_background = value; }
            },
            "lineBackgroundSet": {
              "get": function () { return this.line_background_set; },
              "set": function (value) { this.line_background_set = value; }
            },
            "pangoUnderline": {
              "get": function () { return this.pango_underline; },
              "set": function (value) { this.pango_underline = value; }
            },
            "scaleSet": {
              "get": function () { return this.scale_set; },
              "set": function (value) { this.scale_set = value; }
            },
            "strikethroughSet": {
              "get": function () { return this.strikethrough_set; },
              "set": function (value) { this.strikethrough_set = value; }
            },
            "underlineColor": {
              "get": function () { return this.underline_color; },
              "set": function (value) { this.underline_color = value; }
            },
            "underlineColorSet": {
              "get": function () { return this.underline_color_set; },
              "set": function (value) { this.underline_color_set = value; }
            },
            "underlineSet": {
              "get": function () { return this.underline_set; },
              "set": function (value) { this.underline_set = value; }
            }
          },
          "static": {}
        },
        "StyleScheme": {
          "prototype": {
            "getAuthors": {
              "value": function () { return this.get_authors.apply(this, arguments); }
            },
            "getDescription": {
              "value": function () { return this.get_description.apply(this, arguments); }
            },
            "getFilename": {
              "value": function () { return this.get_filename.apply(this, arguments); }
            },
            "getId": {
              "value": function () { return this.get_id.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getStyle": {
              "value": function () { return this.get_style.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "StyleSchemeChooserButton": {
          "prototype": {},
          "static": {}
        },
        "StyleSchemeChooserWidget": {
          "prototype": {},
          "static": {}
        },
        "StyleSchemeManager": {
          "prototype": {
            "appendSearchPath": {
              "value": function () { return this.append_search_path.apply(this, arguments); }
            },
            "forceRescan": {
              "value": function () { return this.force_rescan.apply(this, arguments); }
            },
            "getScheme": {
              "value": function () { return this.get_scheme.apply(this, arguments); }
            },
            "getSchemeIds": {
              "value": function () { return this.get_scheme_ids.apply(this, arguments); }
            },
            "getSearchPath": {
              "value": function () { return this.get_search_path.apply(this, arguments); }
            },
            "prependSearchPath": {
              "value": function () { return this.prepend_search_path.apply(this, arguments); }
            },
            "setSearchPath": {
              "value": function () { return this.set_search_path.apply(this, arguments); }
            },
            "schemeIds": {
              "get": function () { return this.scheme_ids; },
              "set": function (value) { this.scheme_ids = value; }
            },
            "searchPath": {
              "get": function () { return this.search_path; },
              "set": function (value) { this.search_path = value; }
            }
          },
          "static": {
            "getDefault": {
              "value": function () { return this.get_default.apply(this, arguments); }
            }
          }
        },
        "View": {
          "prototype": {
            "getAutoIndent": {
              "value": function () { return this.get_auto_indent.apply(this, arguments); }
            },
            "getBackgroundPattern": {
              "value": function () { return this.get_background_pattern.apply(this, arguments); }
            },
            "getCompletion": {
              "value": function () { return this.get_completion.apply(this, arguments); }
            },
            "getDrawSpaces": {
              "value": function () { return this.get_draw_spaces.apply(this, arguments); }
            },
            "getGutter": {
              "value": function () { return this.get_gutter.apply(this, arguments); }
            },
            "getHighlightCurrentLine": {
              "value": function () { return this.get_highlight_current_line.apply(this, arguments); }
            },
            "getIndentOnTab": {
              "value": function () { return this.get_indent_on_tab.apply(this, arguments); }
            },
            "getIndentWidth": {
              "value": function () { return this.get_indent_width.apply(this, arguments); }
            },
            "getInsertSpacesInsteadOfTabs": {
              "value": function () { return this.get_insert_spaces_instead_of_tabs.apply(this, arguments); }
            },
            "getMarkAttributes": {
              "value": function () { return this.get_mark_attributes.apply(this, arguments); }
            },
            "getRightMarginPosition": {
              "value": function () { return this.get_right_margin_position.apply(this, arguments); }
            },
            "getShowLineMarks": {
              "value": function () { return this.get_show_line_marks.apply(this, arguments); }
            },
            "getShowLineNumbers": {
              "value": function () { return this.get_show_line_numbers.apply(this, arguments); }
            },
            "getShowRightMargin": {
              "value": function () { return this.get_show_right_margin.apply(this, arguments); }
            },
            "getSmartBackspace": {
              "value": function () { return this.get_smart_backspace.apply(this, arguments); }
            },
            "getSmartHomeEnd": {
              "value": function () { return this.get_smart_home_end.apply(this, arguments); }
            },
            "getTabWidth": {
              "value": function () { return this.get_tab_width.apply(this, arguments); }
            },
            "getVisualColumn": {
              "value": function () { return this.get_visual_column.apply(this, arguments); }
            },
            "indentLines": {
              "value": function () { return this.indent_lines.apply(this, arguments); }
            },
            "setAutoIndent": {
              "value": function () { return this.set_auto_indent.apply(this, arguments); }
            },
            "setBackgroundPattern": {
              "value": function () { return this.set_background_pattern.apply(this, arguments); }
            },
            "setDrawSpaces": {
              "value": function () { return this.set_draw_spaces.apply(this, arguments); }
            },
            "setHighlightCurrentLine": {
              "value": function () { return this.set_highlight_current_line.apply(this, arguments); }
            },
            "setIndentOnTab": {
              "value": function () { return this.set_indent_on_tab.apply(this, arguments); }
            },
            "setIndentWidth": {
              "value": function () { return this.set_indent_width.apply(this, arguments); }
            },
            "setInsertSpacesInsteadOfTabs": {
              "value": function () { return this.set_insert_spaces_instead_of_tabs.apply(this, arguments); }
            },
            "setMarkAttributes": {
              "value": function () { return this.set_mark_attributes.apply(this, arguments); }
            },
            "setRightMarginPosition": {
              "value": function () { return this.set_right_margin_position.apply(this, arguments); }
            },
            "setShowLineMarks": {
              "value": function () { return this.set_show_line_marks.apply(this, arguments); }
            },
            "setShowLineNumbers": {
              "value": function () { return this.set_show_line_numbers.apply(this, arguments); }
            },
            "setShowRightMargin": {
              "value": function () { return this.set_show_right_margin.apply(this, arguments); }
            },
            "setSmartBackspace": {
              "value": function () { return this.set_smart_backspace.apply(this, arguments); }
            },
            "setSmartHomeEnd": {
              "value": function () { return this.set_smart_home_end.apply(this, arguments); }
            },
            "setTabWidth": {
              "value": function () { return this.set_tab_width.apply(this, arguments); }
            },
            "unindentLines": {
              "value": function () { return this.unindent_lines.apply(this, arguments); }
            },
            "autoIndent": {
              "get": function () { return this.auto_indent; },
              "set": function (value) { this.auto_indent = value; }
            },
            "backgroundPattern": {
              "get": function () { return this.background_pattern; },
              "set": function (value) { this.background_pattern = value; }
            },
            "drawSpaces": {
              "get": function () { return this.draw_spaces; },
              "set": function (value) { this.draw_spaces = value; }
            },
            "highlightCurrentLine": {
              "get": function () { return this.highlight_current_line; },
              "set": function (value) { this.highlight_current_line = value; }
            },
            "indentOnTab": {
              "get": function () { return this.indent_on_tab; },
              "set": function (value) { this.indent_on_tab = value; }
            },
            "indentWidth": {
              "get": function () { return this.indent_width; },
              "set": function (value) { this.indent_width = value; }
            },
            "insertSpacesInsteadOfTabs": {
              "get": function () { return this.insert_spaces_instead_of_tabs; },
              "set": function (value) { this.insert_spaces_instead_of_tabs = value; }
            },
            "rightMarginPosition": {
              "get": function () { return this.right_margin_position; },
              "set": function (value) { this.right_margin_position = value; }
            },
            "showLineMarks": {
              "get": function () { return this.show_line_marks; },
              "set": function (value) { this.show_line_marks = value; }
            },
            "showLineNumbers": {
              "get": function () { return this.show_line_numbers; },
              "set": function (value) { this.show_line_numbers = value; }
            },
            "showRightMargin": {
              "get": function () { return this.show_right_margin; },
              "set": function (value) { this.show_right_margin = value; }
            },
            "smartBackspace": {
              "get": function () { return this.smart_backspace; },
              "set": function (value) { this.smart_backspace = value; }
            },
            "smartHomeEnd": {
              "get": function () { return this.smart_home_end; },
              "set": function (value) { this.smart_home_end = value; }
            },
            "tabWidth": {
              "get": function () { return this.tab_width; },
              "set": function (value) { this.tab_width = value; }
            }
          },
          "static": {}
        }
      },
      "static": {
        "completionErrorQuark": {
          "value": function () { return this.completion_error_quark.apply(this, arguments); }
        },
        "encodingGetAll": {
          "value": function () { return this.encoding_get_all.apply(this, arguments); }
        },
        "encodingGetCurrent": {
          "value": function () { return this.encoding_get_current.apply(this, arguments); }
        },
        "encodingGetDefaultCandidates": {
          "value": function () { return this.encoding_get_default_candidates.apply(this, arguments); }
        },
        "encodingGetFromCharset": {
          "value": function () { return this.encoding_get_from_charset.apply(this, arguments); }
        },
        "encodingGetUtf8": {
          "value": function () { return this.encoding_get_utf8.apply(this, arguments); }
        },
        "fileLoaderErrorQuark": {
          "value": function () { return this.file_loader_error_quark.apply(this, arguments); }
        },
        "fileSaverErrorQuark": {
          "value": function () { return this.file_saver_error_quark.apply(this, arguments); }
        },
        "utilsEscapeSearchText": {
          "value": function () { return this.utils_escape_search_text.apply(this, arguments); }
        },
        "utilsUnescapeSearchText": {
          "value": function () { return this.utils_unescape_search_text.apply(this, arguments); }
        }
      }
    },
    "GtkSpell": {
      "class": {
        "Checker": {
          "prototype": {
            "getLanguage": {
              "value": function () { return this.get_language.apply(this, arguments); }
            },
            "getSuggestionsMenu": {
              "value": function () { return this.get_suggestions_menu.apply(this, arguments); }
            },
            "recheckAll": {
              "value": function () { return this.recheck_all.apply(this, arguments); }
            },
            "setLanguage": {
              "value": function () { return this.set_language.apply(this, arguments); }
            },
            "decodeLanguageCodes": {
              "get": function () { return this.decode_language_codes; },
              "set": function (value) { this.decode_language_codes = value; }
            }
          },
          "static": {
            "decodeLanguageCode": {
              "value": function () { return this.decode_language_code.apply(this, arguments); }
            },
            "getFromTextView": {
              "value": function () { return this.get_from_text_view.apply(this, arguments); }
            },
            "getLanguageList": {
              "value": function () { return this.get_language_list.apply(this, arguments); }
            }
          }
        }
      },
      "static": {
        "errorQuark": {
          "value": function () { return this.error_quark.apply(this, arguments); }
        }
      }
    },
    "Gucharmap": {
      "class": {
        "BlockChaptersModel": {
          "prototype": {},
          "static": {}
        },
        "BlockCodepointList": {
          "prototype": {
            "firstCodepoint": {
              "get": function () { return this.first_codepoint; },
              "set": function (value) { this.first_codepoint = value; }
            },
            "lastCodepoint": {
              "get": function () { return this.last_codepoint; },
              "set": function (value) { this.last_codepoint = value; }
            }
          },
          "static": {}
        },
        "ChaptersModel": {
          "prototype": {
            "characterToIter": {
              "value": function () { return this.character_to_iter.apply(this, arguments); }
            },
            "getBookCodepointList": {
              "value": function () { return this.get_book_codepoint_list.apply(this, arguments); }
            },
            "getCodepointList": {
              "value": function () { return this.get_codepoint_list.apply(this, arguments); }
            },
            "getTitle": {
              "value": function () { return this.get_title.apply(this, arguments); }
            },
            "idToIter": {
              "value": function () { return this.id_to_iter.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "ChaptersView": {
          "prototype": {
            "getBookCodepointList": {
              "value": function () { return this.get_book_codepoint_list.apply(this, arguments); }
            },
            "getCodepointList": {
              "value": function () { return this.get_codepoint_list.apply(this, arguments); }
            },
            "getModel": {
              "value": function () { return this.get_model.apply(this, arguments); }
            },
            "getSelected": {
              "value": function () { return this.get_selected.apply(this, arguments); }
            },
            "selectCharacter": {
              "value": function () { return this.select_character.apply(this, arguments); }
            },
            "selectLocale": {
              "value": function () { return this.select_locale.apply(this, arguments); }
            },
            "setModel": {
              "value": function () { return this.set_model.apply(this, arguments); }
            },
            "setSelected": {
              "value": function () { return this.set_selected.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Charmap": {
          "prototype": {
            "getActiveChapter": {
              "value": function () { return this.get_active_chapter.apply(this, arguments); }
            },
            "getActiveCharacter": {
              "value": function () { return this.get_active_character.apply(this, arguments); }
            },
            "getActiveCodepointList": {
              "value": function () { return this.get_active_codepoint_list.apply(this, arguments); }
            },
            "getActivePage": {
              "value": function () { return this.get_active_page.apply(this, arguments); }
            },
            "getBookCodepointList": {
              "value": function () { return this.get_book_codepoint_list.apply(this, arguments); }
            },
            "getChaptersModel": {
              "value": function () { return this.get_chapters_model.apply(this, arguments); }
            },
            "getChaptersView": {
              "value": function () { return this.get_chapters_view.apply(this, arguments); }
            },
            "getChaptersVisible": {
              "value": function () { return this.get_chapters_visible.apply(this, arguments); }
            },
            "getChartable": {
              "value": function () { return this.get_chartable.apply(this, arguments); }
            },
            "getFontDesc": {
              "value": function () { return this.get_font_desc.apply(this, arguments); }
            },
            "getFontFallback": {
              "value": function () { return this.get_font_fallback.apply(this, arguments); }
            },
            "getPageVisible": {
              "value": function () { return this.get_page_visible.apply(this, arguments); }
            },
            "getSnapPow2": {
              "value": function () { return this.get_snap_pow2.apply(this, arguments); }
            },
            "nextChapter": {
              "value": function () { return this.next_chapter.apply(this, arguments); }
            },
            "previousChapter": {
              "value": function () { return this.previous_chapter.apply(this, arguments); }
            },
            "setActiveChapter": {
              "value": function () { return this.set_active_chapter.apply(this, arguments); }
            },
            "setActiveCharacter": {
              "value": function () { return this.set_active_character.apply(this, arguments); }
            },
            "setActivePage": {
              "value": function () { return this.set_active_page.apply(this, arguments); }
            },
            "setChaptersModel": {
              "value": function () { return this.set_chapters_model.apply(this, arguments); }
            },
            "setChaptersVisible": {
              "value": function () { return this.set_chapters_visible.apply(this, arguments); }
            },
            "setFontDesc": {
              "value": function () { return this.set_font_desc.apply(this, arguments); }
            },
            "setFontFallback": {
              "value": function () { return this.set_font_fallback.apply(this, arguments); }
            },
            "setPageVisible": {
              "value": function () { return this.set_page_visible.apply(this, arguments); }
            },
            "setSnapPow2": {
              "value": function () { return this.set_snap_pow2.apply(this, arguments); }
            },
            "activeChapter": {
              "get": function () { return this.active_chapter; },
              "set": function (value) { this.active_chapter = value; }
            },
            "activeCharacter": {
              "get": function () { return this.active_character; },
              "set": function (value) { this.active_character = value; }
            },
            "activeCodepointList": {
              "get": function () { return this.active_codepoint_list; },
              "set": function (value) { this.active_codepoint_list = value; }
            },
            "activePage": {
              "get": function () { return this.active_page; },
              "set": function (value) { this.active_page = value; }
            },
            "chaptersModel": {
              "get": function () { return this.chapters_model; },
              "set": function (value) { this.chapters_model = value; }
            },
            "fontDesc": {
              "get": function () { return this.font_desc; },
              "set": function (value) { this.font_desc = value; }
            },
            "fontFallback": {
              "get": function () { return this.font_fallback; },
              "set": function (value) { this.font_fallback = value; }
            },
            "snapPower2": {
              "get": function () { return this.snap_power_2; },
              "set": function (value) { this.snap_power_2 = value; }
            }
          },
          "static": {}
        },
        "Chartable": {
          "prototype": {
            "getActiveCharacter": {
              "value": function () { return this.get_active_character.apply(this, arguments); }
            },
            "getCodepointList": {
              "value": function () { return this.get_codepoint_list.apply(this, arguments); }
            },
            "getFontDesc": {
              "value": function () { return this.get_font_desc.apply(this, arguments); }
            },
            "getFontFallback": {
              "value": function () { return this.get_font_fallback.apply(this, arguments); }
            },
            "getSnapPow2": {
              "value": function () { return this.get_snap_pow2.apply(this, arguments); }
            },
            "getZoomEnabled": {
              "value": function () { return this.get_zoom_enabled.apply(this, arguments); }
            },
            "setActiveCharacter": {
              "value": function () { return this.set_active_character.apply(this, arguments); }
            },
            "setCodepointList": {
              "value": function () { return this.set_codepoint_list.apply(this, arguments); }
            },
            "setFontDesc": {
              "value": function () { return this.set_font_desc.apply(this, arguments); }
            },
            "setFontFallback": {
              "value": function () { return this.set_font_fallback.apply(this, arguments); }
            },
            "setSnapPow2": {
              "value": function () { return this.set_snap_pow2.apply(this, arguments); }
            },
            "setZoomEnabled": {
              "value": function () { return this.set_zoom_enabled.apply(this, arguments); }
            },
            "activeCharacter": {
              "get": function () { return this.active_character; },
              "set": function (value) { this.active_character = value; }
            },
            "codepointList": {
              "get": function () { return this.codepoint_list; },
              "set": function (value) { this.codepoint_list = value; }
            },
            "fontDesc": {
              "get": function () { return this.font_desc; },
              "set": function (value) { this.font_desc = value; }
            },
            "fontFallback": {
              "get": function () { return this.font_fallback; },
              "set": function (value) { this.font_fallback = value; }
            },
            "snapPower2": {
              "get": function () { return this.snap_power_2; },
              "set": function (value) { this.snap_power_2 = value; }
            },
            "zoomEnabled": {
              "get": function () { return this.zoom_enabled; },
              "set": function (value) { this.zoom_enabled = value; }
            },
            "zoomShowing": {
              "get": function () { return this.zoom_showing; },
              "set": function (value) { this.zoom_showing = value; }
            }
          },
          "static": {}
        },
        "ChartableAccessible": {
          "prototype": {},
          "static": {}
        },
        "ChartableCellAccessible": {
          "prototype": {
            "addState": {
              "value": function () { return this.add_state.apply(this, arguments); }
            },
            "removeState": {
              "value": function () { return this.remove_state.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "CodepointList": {
          "prototype": {
            "getChar": {
              "value": function () { return this.get_char.apply(this, arguments); }
            },
            "getIndex": {
              "value": function () { return this.get_index.apply(this, arguments); }
            },
            "getLastIndex": {
              "value": function () { return this.get_last_index.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "ScriptChaptersModel": {
          "prototype": {},
          "static": {}
        },
        "ScriptCodepointList": {
          "prototype": {
            "appendScript": {
              "value": function () { return this.append_script.apply(this, arguments); }
            },
            "setScript": {
              "value": function () { return this.set_script.apply(this, arguments); }
            },
            "setScripts": {
              "value": function () { return this.set_scripts.apply(this, arguments); }
            }
          },
          "static": {}
        }
      },
      "static": {
        "getNameslistColons": {
          "value": function () { return this.get_nameslist_colons.apply(this, arguments); }
        },
        "getNameslistEquals": {
          "value": function () { return this.get_nameslist_equals.apply(this, arguments); }
        },
        "getNameslistExes": {
          "value": function () { return this.get_nameslist_exes.apply(this, arguments); }
        },
        "getNameslistPounds": {
          "value": function () { return this.get_nameslist_pounds.apply(this, arguments); }
        },
        "getNameslistStars": {
          "value": function () { return this.get_nameslist_stars.apply(this, arguments); }
        },
        "getUnicodeCategoryName": {
          "value": function () { return this.get_unicode_category_name.apply(this, arguments); }
        },
        "getUnicodeDataName": {
          "value": function () { return this.get_unicode_data_name.apply(this, arguments); }
        },
        "getUnicodeDataNameCount": {
          "value": function () { return this.get_unicode_data_name_count.apply(this, arguments); }
        },
        "getUnicodeKCantonese": {
          "value": function () { return this.get_unicode_kCantonese.apply(this, arguments); }
        },
        "getUnicodeKDefinition": {
          "value": function () { return this.get_unicode_kDefinition.apply(this, arguments); }
        },
        "getUnicodeKJapaneseKun": {
          "value": function () { return this.get_unicode_kJapaneseKun.apply(this, arguments); }
        },
        "getUnicodeKJapaneseOn": {
          "value": function () { return this.get_unicode_kJapaneseOn.apply(this, arguments); }
        },
        "getUnicodeKKorean": {
          "value": function () { return this.get_unicode_kKorean.apply(this, arguments); }
        },
        "getUnicodeKMandarin": {
          "value": function () { return this.get_unicode_kMandarin.apply(this, arguments); }
        },
        "getUnicodeKTang": {
          "value": function () { return this.get_unicode_kTang.apply(this, arguments); }
        },
        "getUnicodeName": {
          "value": function () { return this.get_unicode_name.apply(this, arguments); }
        },
        "getUnicodeVersion": {
          "value": function () { return this.get_unicode_version.apply(this, arguments); }
        },
        "getUnihanCount": {
          "value": function () { return this.get_unihan_count.apply(this, arguments); }
        },
        "unicharIsdefined": {
          "value": function () { return this.unichar_isdefined.apply(this, arguments); }
        },
        "unicharIsgraph": {
          "value": function () { return this.unichar_isgraph.apply(this, arguments); }
        },
        "unicharToPrintableUtf8": {
          "value": function () { return this.unichar_to_printable_utf8.apply(this, arguments); }
        },
        "unicharType": {
          "value": function () { return this.unichar_type.apply(this, arguments); }
        },
        "unicharValidate": {
          "value": function () { return this.unichar_validate.apply(this, arguments); }
        },
        "unicodeGetLocaleCharacter": {
          "value": function () { return this.unicode_get_locale_character.apply(this, arguments); }
        },
        "unicodeGetScriptForChar": {
          "value": function () { return this.unicode_get_script_for_char.apply(this, arguments); }
        },
        "unicodeListScripts": {
          "value": function () { return this.unicode_list_scripts.apply(this, arguments); }
        },
        "unicodeVersionToString": {
          "value": function () { return this.unicode_version_to_string.apply(this, arguments); }
        }
      }
    },
    "HarfBuzz": {
      "class": {},
      "static": {
        "blobCreate": {
          "value": function () { return this.blob_create.apply(this, arguments); }
        },
        "blobCreateSubBlob": {
          "value": function () { return this.blob_create_sub_blob.apply(this, arguments); }
        },
        "blobDestroy": {
          "value": function () { return this.blob_destroy.apply(this, arguments); }
        },
        "blobGetData": {
          "value": function () { return this.blob_get_data.apply(this, arguments); }
        },
        "blobGetDataWritable": {
          "value": function () { return this.blob_get_data_writable.apply(this, arguments); }
        },
        "blobGetEmpty": {
          "value": function () { return this.blob_get_empty.apply(this, arguments); }
        },
        "blobGetLength": {
          "value": function () { return this.blob_get_length.apply(this, arguments); }
        },
        "blobGetUserData": {
          "value": function () { return this.blob_get_user_data.apply(this, arguments); }
        },
        "blobIsImmutable": {
          "value": function () { return this.blob_is_immutable.apply(this, arguments); }
        },
        "blobMakeImmutable": {
          "value": function () { return this.blob_make_immutable.apply(this, arguments); }
        },
        "blobReference": {
          "value": function () { return this.blob_reference.apply(this, arguments); }
        },
        "blobSetUserData": {
          "value": function () { return this.blob_set_user_data.apply(this, arguments); }
        },
        "bufferAdd": {
          "value": function () { return this.buffer_add.apply(this, arguments); }
        },
        "bufferAddCodepoints": {
          "value": function () { return this.buffer_add_codepoints.apply(this, arguments); }
        },
        "bufferAddLatin1": {
          "value": function () { return this.buffer_add_latin1.apply(this, arguments); }
        },
        "bufferAddUtf16": {
          "value": function () { return this.buffer_add_utf16.apply(this, arguments); }
        },
        "bufferAddUtf32": {
          "value": function () { return this.buffer_add_utf32.apply(this, arguments); }
        },
        "bufferAddUtf8": {
          "value": function () { return this.buffer_add_utf8.apply(this, arguments); }
        },
        "bufferAllocationSuccessful": {
          "value": function () { return this.buffer_allocation_successful.apply(this, arguments); }
        },
        "bufferClearContents": {
          "value": function () { return this.buffer_clear_contents.apply(this, arguments); }
        },
        "bufferCreate": {
          "value": function () { return this.buffer_create.apply(this, arguments); }
        },
        "bufferDeserializeGlyphs": {
          "value": function () { return this.buffer_deserialize_glyphs.apply(this, arguments); }
        },
        "bufferDestroy": {
          "value": function () { return this.buffer_destroy.apply(this, arguments); }
        },
        "bufferGetClusterLevel": {
          "value": function () { return this.buffer_get_cluster_level.apply(this, arguments); }
        },
        "bufferGetContentType": {
          "value": function () { return this.buffer_get_content_type.apply(this, arguments); }
        },
        "bufferGetDirection": {
          "value": function () { return this.buffer_get_direction.apply(this, arguments); }
        },
        "bufferGetEmpty": {
          "value": function () { return this.buffer_get_empty.apply(this, arguments); }
        },
        "bufferGetFlags": {
          "value": function () { return this.buffer_get_flags.apply(this, arguments); }
        },
        "bufferGetGlyphInfos": {
          "value": function () { return this.buffer_get_glyph_infos.apply(this, arguments); }
        },
        "bufferGetGlyphPositions": {
          "value": function () { return this.buffer_get_glyph_positions.apply(this, arguments); }
        },
        "bufferGetLanguage": {
          "value": function () { return this.buffer_get_language.apply(this, arguments); }
        },
        "bufferGetLength": {
          "value": function () { return this.buffer_get_length.apply(this, arguments); }
        },
        "bufferGetReplacementCodepoint": {
          "value": function () { return this.buffer_get_replacement_codepoint.apply(this, arguments); }
        },
        "bufferGetScript": {
          "value": function () { return this.buffer_get_script.apply(this, arguments); }
        },
        "bufferGetSegmentProperties": {
          "value": function () { return this.buffer_get_segment_properties.apply(this, arguments); }
        },
        "bufferGetUnicodeFuncs": {
          "value": function () { return this.buffer_get_unicode_funcs.apply(this, arguments); }
        },
        "bufferGetUserData": {
          "value": function () { return this.buffer_get_user_data.apply(this, arguments); }
        },
        "bufferGuessSegmentProperties": {
          "value": function () { return this.buffer_guess_segment_properties.apply(this, arguments); }
        },
        "bufferNormalizeGlyphs": {
          "value": function () { return this.buffer_normalize_glyphs.apply(this, arguments); }
        },
        "bufferPreAllocate": {
          "value": function () { return this.buffer_pre_allocate.apply(this, arguments); }
        },
        "bufferReference": {
          "value": function () { return this.buffer_reference.apply(this, arguments); }
        },
        "bufferReset": {
          "value": function () { return this.buffer_reset.apply(this, arguments); }
        },
        "bufferReverse": {
          "value": function () { return this.buffer_reverse.apply(this, arguments); }
        },
        "bufferReverseClusters": {
          "value": function () { return this.buffer_reverse_clusters.apply(this, arguments); }
        },
        "bufferReverseRange": {
          "value": function () { return this.buffer_reverse_range.apply(this, arguments); }
        },
        "bufferSerializeFormatFromString": {
          "value": function () { return this.buffer_serialize_format_from_string.apply(this, arguments); }
        },
        "bufferSerializeFormatToString": {
          "value": function () { return this.buffer_serialize_format_to_string.apply(this, arguments); }
        },
        "bufferSerializeGlyphs": {
          "value": function () { return this.buffer_serialize_glyphs.apply(this, arguments); }
        },
        "bufferSerializeListFormats": {
          "value": function () { return this.buffer_serialize_list_formats.apply(this, arguments); }
        },
        "bufferSetClusterLevel": {
          "value": function () { return this.buffer_set_cluster_level.apply(this, arguments); }
        },
        "bufferSetContentType": {
          "value": function () { return this.buffer_set_content_type.apply(this, arguments); }
        },
        "bufferSetDirection": {
          "value": function () { return this.buffer_set_direction.apply(this, arguments); }
        },
        "bufferSetFlags": {
          "value": function () { return this.buffer_set_flags.apply(this, arguments); }
        },
        "bufferSetLanguage": {
          "value": function () { return this.buffer_set_language.apply(this, arguments); }
        },
        "bufferSetLength": {
          "value": function () { return this.buffer_set_length.apply(this, arguments); }
        },
        "bufferSetMessageFunc": {
          "value": function () { return this.buffer_set_message_func.apply(this, arguments); }
        },
        "bufferSetReplacementCodepoint": {
          "value": function () { return this.buffer_set_replacement_codepoint.apply(this, arguments); }
        },
        "bufferSetScript": {
          "value": function () { return this.buffer_set_script.apply(this, arguments); }
        },
        "bufferSetSegmentProperties": {
          "value": function () { return this.buffer_set_segment_properties.apply(this, arguments); }
        },
        "bufferSetUnicodeFuncs": {
          "value": function () { return this.buffer_set_unicode_funcs.apply(this, arguments); }
        },
        "bufferSetUserData": {
          "value": function () { return this.buffer_set_user_data.apply(this, arguments); }
        },
        "directionFromString": {
          "value": function () { return this.direction_from_string.apply(this, arguments); }
        },
        "directionToString": {
          "value": function () { return this.direction_to_string.apply(this, arguments); }
        },
        "faceCreate": {
          "value": function () { return this.face_create.apply(this, arguments); }
        },
        "faceCreateForTables": {
          "value": function () { return this.face_create_for_tables.apply(this, arguments); }
        },
        "faceDestroy": {
          "value": function () { return this.face_destroy.apply(this, arguments); }
        },
        "faceGetEmpty": {
          "value": function () { return this.face_get_empty.apply(this, arguments); }
        },
        "faceGetGlyphCount": {
          "value": function () { return this.face_get_glyph_count.apply(this, arguments); }
        },
        "faceGetIndex": {
          "value": function () { return this.face_get_index.apply(this, arguments); }
        },
        "faceGetUpem": {
          "value": function () { return this.face_get_upem.apply(this, arguments); }
        },
        "faceGetUserData": {
          "value": function () { return this.face_get_user_data.apply(this, arguments); }
        },
        "faceIsImmutable": {
          "value": function () { return this.face_is_immutable.apply(this, arguments); }
        },
        "faceMakeImmutable": {
          "value": function () { return this.face_make_immutable.apply(this, arguments); }
        },
        "faceReference": {
          "value": function () { return this.face_reference.apply(this, arguments); }
        },
        "faceReferenceBlob": {
          "value": function () { return this.face_reference_blob.apply(this, arguments); }
        },
        "faceReferenceTable": {
          "value": function () { return this.face_reference_table.apply(this, arguments); }
        },
        "faceSetGlyphCount": {
          "value": function () { return this.face_set_glyph_count.apply(this, arguments); }
        },
        "faceSetIndex": {
          "value": function () { return this.face_set_index.apply(this, arguments); }
        },
        "faceSetUpem": {
          "value": function () { return this.face_set_upem.apply(this, arguments); }
        },
        "faceSetUserData": {
          "value": function () { return this.face_set_user_data.apply(this, arguments); }
        },
        "featureFromString": {
          "value": function () { return this.feature_from_string.apply(this, arguments); }
        },
        "featureToString": {
          "value": function () { return this.feature_to_string.apply(this, arguments); }
        },
        "fontAddGlyphOriginForDirection": {
          "value": function () { return this.font_add_glyph_origin_for_direction.apply(this, arguments); }
        },
        "fontCreate": {
          "value": function () { return this.font_create.apply(this, arguments); }
        },
        "fontCreateSubFont": {
          "value": function () { return this.font_create_sub_font.apply(this, arguments); }
        },
        "fontDestroy": {
          "value": function () { return this.font_destroy.apply(this, arguments); }
        },
        "fontFuncsCreate": {
          "value": function () { return this.font_funcs_create.apply(this, arguments); }
        },
        "fontFuncsDestroy": {
          "value": function () { return this.font_funcs_destroy.apply(this, arguments); }
        },
        "fontFuncsGetEmpty": {
          "value": function () { return this.font_funcs_get_empty.apply(this, arguments); }
        },
        "fontFuncsGetUserData": {
          "value": function () { return this.font_funcs_get_user_data.apply(this, arguments); }
        },
        "fontFuncsIsImmutable": {
          "value": function () { return this.font_funcs_is_immutable.apply(this, arguments); }
        },
        "fontFuncsMakeImmutable": {
          "value": function () { return this.font_funcs_make_immutable.apply(this, arguments); }
        },
        "fontFuncsReference": {
          "value": function () { return this.font_funcs_reference.apply(this, arguments); }
        },
        "fontFuncsSetFontHExtentsFunc": {
          "value": function () { return this.font_funcs_set_font_h_extents_func.apply(this, arguments); }
        },
        "fontFuncsSetFontVExtentsFunc": {
          "value": function () { return this.font_funcs_set_font_v_extents_func.apply(this, arguments); }
        },
        "fontFuncsSetGlyphContourPointFunc": {
          "value": function () { return this.font_funcs_set_glyph_contour_point_func.apply(this, arguments); }
        },
        "fontFuncsSetGlyphExtentsFunc": {
          "value": function () { return this.font_funcs_set_glyph_extents_func.apply(this, arguments); }
        },
        "fontFuncsSetGlyphFromNameFunc": {
          "value": function () { return this.font_funcs_set_glyph_from_name_func.apply(this, arguments); }
        },
        "fontFuncsSetGlyphFunc": {
          "value": function () { return this.font_funcs_set_glyph_func.apply(this, arguments); }
        },
        "fontFuncsSetGlyphHAdvanceFunc": {
          "value": function () { return this.font_funcs_set_glyph_h_advance_func.apply(this, arguments); }
        },
        "fontFuncsSetGlyphHKerningFunc": {
          "value": function () { return this.font_funcs_set_glyph_h_kerning_func.apply(this, arguments); }
        },
        "fontFuncsSetGlyphHOriginFunc": {
          "value": function () { return this.font_funcs_set_glyph_h_origin_func.apply(this, arguments); }
        },
        "fontFuncsSetGlyphNameFunc": {
          "value": function () { return this.font_funcs_set_glyph_name_func.apply(this, arguments); }
        },
        "fontFuncsSetGlyphVAdvanceFunc": {
          "value": function () { return this.font_funcs_set_glyph_v_advance_func.apply(this, arguments); }
        },
        "fontFuncsSetGlyphVKerningFunc": {
          "value": function () { return this.font_funcs_set_glyph_v_kerning_func.apply(this, arguments); }
        },
        "fontFuncsSetGlyphVOriginFunc": {
          "value": function () { return this.font_funcs_set_glyph_v_origin_func.apply(this, arguments); }
        },
        "fontFuncsSetNominalGlyphFunc": {
          "value": function () { return this.font_funcs_set_nominal_glyph_func.apply(this, arguments); }
        },
        "fontFuncsSetUserData": {
          "value": function () { return this.font_funcs_set_user_data.apply(this, arguments); }
        },
        "fontFuncsSetVariationGlyphFunc": {
          "value": function () { return this.font_funcs_set_variation_glyph_func.apply(this, arguments); }
        },
        "fontGetEmpty": {
          "value": function () { return this.font_get_empty.apply(this, arguments); }
        },
        "fontGetExtentsForDirection": {
          "value": function () { return this.font_get_extents_for_direction.apply(this, arguments); }
        },
        "fontGetFace": {
          "value": function () { return this.font_get_face.apply(this, arguments); }
        },
        "fontGetGlyph": {
          "value": function () { return this.font_get_glyph.apply(this, arguments); }
        },
        "fontGetGlyphAdvanceForDirection": {
          "value": function () { return this.font_get_glyph_advance_for_direction.apply(this, arguments); }
        },
        "fontGetGlyphContourPoint": {
          "value": function () { return this.font_get_glyph_contour_point.apply(this, arguments); }
        },
        "fontGetGlyphContourPointForOrigin": {
          "value": function () { return this.font_get_glyph_contour_point_for_origin.apply(this, arguments); }
        },
        "fontGetGlyphExtents": {
          "value": function () { return this.font_get_glyph_extents.apply(this, arguments); }
        },
        "fontGetGlyphExtentsForOrigin": {
          "value": function () { return this.font_get_glyph_extents_for_origin.apply(this, arguments); }
        },
        "fontGetGlyphFromName": {
          "value": function () { return this.font_get_glyph_from_name.apply(this, arguments); }
        },
        "fontGetGlyphHAdvance": {
          "value": function () { return this.font_get_glyph_h_advance.apply(this, arguments); }
        },
        "fontGetGlyphHKerning": {
          "value": function () { return this.font_get_glyph_h_kerning.apply(this, arguments); }
        },
        "fontGetGlyphHOrigin": {
          "value": function () { return this.font_get_glyph_h_origin.apply(this, arguments); }
        },
        "fontGetGlyphKerningForDirection": {
          "value": function () { return this.font_get_glyph_kerning_for_direction.apply(this, arguments); }
        },
        "fontGetGlyphName": {
          "value": function () { return this.font_get_glyph_name.apply(this, arguments); }
        },
        "fontGetGlyphOriginForDirection": {
          "value": function () { return this.font_get_glyph_origin_for_direction.apply(this, arguments); }
        },
        "fontGetGlyphVAdvance": {
          "value": function () { return this.font_get_glyph_v_advance.apply(this, arguments); }
        },
        "fontGetGlyphVKerning": {
          "value": function () { return this.font_get_glyph_v_kerning.apply(this, arguments); }
        },
        "fontGetGlyphVOrigin": {
          "value": function () { return this.font_get_glyph_v_origin.apply(this, arguments); }
        },
        "fontGetHExtents": {
          "value": function () { return this.font_get_h_extents.apply(this, arguments); }
        },
        "fontGetNominalGlyph": {
          "value": function () { return this.font_get_nominal_glyph.apply(this, arguments); }
        },
        "fontGetParent": {
          "value": function () { return this.font_get_parent.apply(this, arguments); }
        },
        "fontGetPpem": {
          "value": function () { return this.font_get_ppem.apply(this, arguments); }
        },
        "fontGetScale": {
          "value": function () { return this.font_get_scale.apply(this, arguments); }
        },
        "fontGetUserData": {
          "value": function () { return this.font_get_user_data.apply(this, arguments); }
        },
        "fontGetVExtents": {
          "value": function () { return this.font_get_v_extents.apply(this, arguments); }
        },
        "fontGetVariationGlyph": {
          "value": function () { return this.font_get_variation_glyph.apply(this, arguments); }
        },
        "fontGlyphFromString": {
          "value": function () { return this.font_glyph_from_string.apply(this, arguments); }
        },
        "fontGlyphToString": {
          "value": function () { return this.font_glyph_to_string.apply(this, arguments); }
        },
        "fontIsImmutable": {
          "value": function () { return this.font_is_immutable.apply(this, arguments); }
        },
        "fontMakeImmutable": {
          "value": function () { return this.font_make_immutable.apply(this, arguments); }
        },
        "fontReference": {
          "value": function () { return this.font_reference.apply(this, arguments); }
        },
        "fontSetFuncs": {
          "value": function () { return this.font_set_funcs.apply(this, arguments); }
        },
        "fontSetFuncsData": {
          "value": function () { return this.font_set_funcs_data.apply(this, arguments); }
        },
        "fontSetParent": {
          "value": function () { return this.font_set_parent.apply(this, arguments); }
        },
        "fontSetPpem": {
          "value": function () { return this.font_set_ppem.apply(this, arguments); }
        },
        "fontSetScale": {
          "value": function () { return this.font_set_scale.apply(this, arguments); }
        },
        "fontSetUserData": {
          "value": function () { return this.font_set_user_data.apply(this, arguments); }
        },
        "fontSubtractGlyphOriginForDirection": {
          "value": function () { return this.font_subtract_glyph_origin_for_direction.apply(this, arguments); }
        },
        "ftFaceCreate": {
          "value": function () { return this.ft_face_create.apply(this, arguments); }
        },
        "ftFaceCreateCached": {
          "value": function () { return this.ft_face_create_cached.apply(this, arguments); }
        },
        "ftFaceCreateReferenced": {
          "value": function () { return this.ft_face_create_referenced.apply(this, arguments); }
        },
        "ftFontCreate": {
          "value": function () { return this.ft_font_create.apply(this, arguments); }
        },
        "ftFontCreateReferenced": {
          "value": function () { return this.ft_font_create_referenced.apply(this, arguments); }
        },
        "ftFontGetFace": {
          "value": function () { return this.ft_font_get_face.apply(this, arguments); }
        },
        "ftFontGetLoadFlags": {
          "value": function () { return this.ft_font_get_load_flags.apply(this, arguments); }
        },
        "ftFontSetFuncs": {
          "value": function () { return this.ft_font_set_funcs.apply(this, arguments); }
        },
        "ftFontSetLoadFlags": {
          "value": function () { return this.ft_font_set_load_flags.apply(this, arguments); }
        },
        "glibBlobCreate": {
          "value": function () { return this.glib_blob_create.apply(this, arguments); }
        },
        "glibGetUnicodeFuncs": {
          "value": function () { return this.glib_get_unicode_funcs.apply(this, arguments); }
        },
        "glibScriptFromScript": {
          "value": function () { return this.glib_script_from_script.apply(this, arguments); }
        },
        "glibScriptToScript": {
          "value": function () { return this.glib_script_to_script.apply(this, arguments); }
        },
        "graphite2FaceGetGrFace": {
          "value": function () { return this.graphite2_face_get_gr_face.apply(this, arguments); }
        },
        "graphite2FontGetGrFont": {
          "value": function () { return this.graphite2_font_get_gr_font.apply(this, arguments); }
        },
        "languageFromString": {
          "value": function () { return this.language_from_string.apply(this, arguments); }
        },
        "languageGetDefault": {
          "value": function () { return this.language_get_default.apply(this, arguments); }
        },
        "languageToString": {
          "value": function () { return this.language_to_string.apply(this, arguments); }
        },
        "otFontSetFuncs": {
          "value": function () { return this.ot_font_set_funcs.apply(this, arguments); }
        },
        "otLayoutCollectLookups": {
          "value": function () { return this.ot_layout_collect_lookups.apply(this, arguments); }
        },
        "otLayoutFeatureGetLookups": {
          "value": function () { return this.ot_layout_feature_get_lookups.apply(this, arguments); }
        },
        "otLayoutGetAttachPoints": {
          "value": function () { return this.ot_layout_get_attach_points.apply(this, arguments); }
        },
        "otLayoutGetGlyphClass": {
          "value": function () { return this.ot_layout_get_glyph_class.apply(this, arguments); }
        },
        "otLayoutGetGlyphsInClass": {
          "value": function () { return this.ot_layout_get_glyphs_in_class.apply(this, arguments); }
        },
        "otLayoutGetLigatureCarets": {
          "value": function () { return this.ot_layout_get_ligature_carets.apply(this, arguments); }
        },
        "otLayoutGetSizeParams": {
          "value": function () { return this.ot_layout_get_size_params.apply(this, arguments); }
        },
        "otLayoutHasGlyphClasses": {
          "value": function () { return this.ot_layout_has_glyph_classes.apply(this, arguments); }
        },
        "otLayoutHasPositioning": {
          "value": function () { return this.ot_layout_has_positioning.apply(this, arguments); }
        },
        "otLayoutHasSubstitution": {
          "value": function () { return this.ot_layout_has_substitution.apply(this, arguments); }
        },
        "otLayoutLanguageFindFeature": {
          "value": function () { return this.ot_layout_language_find_feature.apply(this, arguments); }
        },
        "otLayoutLanguageGetFeatureIndexes": {
          "value": function () { return this.ot_layout_language_get_feature_indexes.apply(this, arguments); }
        },
        "otLayoutLanguageGetFeatureTags": {
          "value": function () { return this.ot_layout_language_get_feature_tags.apply(this, arguments); }
        },
        "otLayoutLanguageGetRequiredFeature": {
          "value": function () { return this.ot_layout_language_get_required_feature.apply(this, arguments); }
        },
        "otLayoutLanguageGetRequiredFeatureIndex": {
          "value": function () { return this.ot_layout_language_get_required_feature_index.apply(this, arguments); }
        },
        "otLayoutLookupCollectGlyphs": {
          "value": function () { return this.ot_layout_lookup_collect_glyphs.apply(this, arguments); }
        },
        "otLayoutLookupSubstituteClosure": {
          "value": function () { return this.ot_layout_lookup_substitute_closure.apply(this, arguments); }
        },
        "otLayoutLookupWouldSubstitute": {
          "value": function () { return this.ot_layout_lookup_would_substitute.apply(this, arguments); }
        },
        "otLayoutScriptFindLanguage": {
          "value": function () { return this.ot_layout_script_find_language.apply(this, arguments); }
        },
        "otLayoutScriptGetLanguageTags": {
          "value": function () { return this.ot_layout_script_get_language_tags.apply(this, arguments); }
        },
        "otLayoutTableChooseScript": {
          "value": function () { return this.ot_layout_table_choose_script.apply(this, arguments); }
        },
        "otLayoutTableFindScript": {
          "value": function () { return this.ot_layout_table_find_script.apply(this, arguments); }
        },
        "otLayoutTableGetFeatureTags": {
          "value": function () { return this.ot_layout_table_get_feature_tags.apply(this, arguments); }
        },
        "otLayoutTableGetLookupCount": {
          "value": function () { return this.ot_layout_table_get_lookup_count.apply(this, arguments); }
        },
        "otLayoutTableGetScriptTags": {
          "value": function () { return this.ot_layout_table_get_script_tags.apply(this, arguments); }
        },
        "otShapeGlyphsClosure": {
          "value": function () { return this.ot_shape_glyphs_closure.apply(this, arguments); }
        },
        "otShapePlanCollectLookups": {
          "value": function () { return this.ot_shape_plan_collect_lookups.apply(this, arguments); }
        },
        "otTagFromLanguage": {
          "value": function () { return this.ot_tag_from_language.apply(this, arguments); }
        },
        "otTagToLanguage": {
          "value": function () { return this.ot_tag_to_language.apply(this, arguments); }
        },
        "otTagToScript": {
          "value": function () { return this.ot_tag_to_script.apply(this, arguments); }
        },
        "otTagsFromScript": {
          "value": function () { return this.ot_tags_from_script.apply(this, arguments); }
        },
        "scriptFromIso15924Tag": {
          "value": function () { return this.script_from_iso15924_tag.apply(this, arguments); }
        },
        "scriptFromString": {
          "value": function () { return this.script_from_string.apply(this, arguments); }
        },
        "scriptGetHorizontalDirection": {
          "value": function () { return this.script_get_horizontal_direction.apply(this, arguments); }
        },
        "scriptToIso15924Tag": {
          "value": function () { return this.script_to_iso15924_tag.apply(this, arguments); }
        },
        "segmentPropertiesEqual": {
          "value": function () { return this.segment_properties_equal.apply(this, arguments); }
        },
        "segmentPropertiesHash": {
          "value": function () { return this.segment_properties_hash.apply(this, arguments); }
        },
        "setAdd": {
          "value": function () { return this.set_add.apply(this, arguments); }
        },
        "setAddRange": {
          "value": function () { return this.set_add_range.apply(this, arguments); }
        },
        "setAllocationSuccessful": {
          "value": function () { return this.set_allocation_successful.apply(this, arguments); }
        },
        "setClear": {
          "value": function () { return this.set_clear.apply(this, arguments); }
        },
        "setCreate": {
          "value": function () { return this.set_create.apply(this, arguments); }
        },
        "setDel": {
          "value": function () { return this.set_del.apply(this, arguments); }
        },
        "setDelRange": {
          "value": function () { return this.set_del_range.apply(this, arguments); }
        },
        "setDestroy": {
          "value": function () { return this.set_destroy.apply(this, arguments); }
        },
        "setGetEmpty": {
          "value": function () { return this.set_get_empty.apply(this, arguments); }
        },
        "setGetMax": {
          "value": function () { return this.set_get_max.apply(this, arguments); }
        },
        "setGetMin": {
          "value": function () { return this.set_get_min.apply(this, arguments); }
        },
        "setGetPopulation": {
          "value": function () { return this.set_get_population.apply(this, arguments); }
        },
        "setGetUserData": {
          "value": function () { return this.set_get_user_data.apply(this, arguments); }
        },
        "setHas": {
          "value": function () { return this.set_has.apply(this, arguments); }
        },
        "setIntersect": {
          "value": function () { return this.set_intersect.apply(this, arguments); }
        },
        "setInvert": {
          "value": function () { return this.set_invert.apply(this, arguments); }
        },
        "setIsEmpty": {
          "value": function () { return this.set_is_empty.apply(this, arguments); }
        },
        "setIsEqual": {
          "value": function () { return this.set_is_equal.apply(this, arguments); }
        },
        "setNext": {
          "value": function () { return this.set_next.apply(this, arguments); }
        },
        "setNextRange": {
          "value": function () { return this.set_next_range.apply(this, arguments); }
        },
        "setReference": {
          "value": function () { return this.set_reference.apply(this, arguments); }
        },
        "setSet": {
          "value": function () { return this.set_set.apply(this, arguments); }
        },
        "setSetUserData": {
          "value": function () { return this.set_set_user_data.apply(this, arguments); }
        },
        "setSubtract": {
          "value": function () { return this.set_subtract.apply(this, arguments); }
        },
        "setSymmetricDifference": {
          "value": function () { return this.set_symmetric_difference.apply(this, arguments); }
        },
        "setUnion": {
          "value": function () { return this.set_union.apply(this, arguments); }
        },
        "shapeFull": {
          "value": function () { return this.shape_full.apply(this, arguments); }
        },
        "shapeListShapers": {
          "value": function () { return this.shape_list_shapers.apply(this, arguments); }
        },
        "shapePlanCreate": {
          "value": function () { return this.shape_plan_create.apply(this, arguments); }
        },
        "shapePlanCreateCached": {
          "value": function () { return this.shape_plan_create_cached.apply(this, arguments); }
        },
        "shapePlanDestroy": {
          "value": function () { return this.shape_plan_destroy.apply(this, arguments); }
        },
        "shapePlanExecute": {
          "value": function () { return this.shape_plan_execute.apply(this, arguments); }
        },
        "shapePlanGetEmpty": {
          "value": function () { return this.shape_plan_get_empty.apply(this, arguments); }
        },
        "shapePlanGetShaper": {
          "value": function () { return this.shape_plan_get_shaper.apply(this, arguments); }
        },
        "shapePlanGetUserData": {
          "value": function () { return this.shape_plan_get_user_data.apply(this, arguments); }
        },
        "shapePlanReference": {
          "value": function () { return this.shape_plan_reference.apply(this, arguments); }
        },
        "shapePlanSetUserData": {
          "value": function () { return this.shape_plan_set_user_data.apply(this, arguments); }
        },
        "tagFromString": {
          "value": function () { return this.tag_from_string.apply(this, arguments); }
        },
        "tagToString": {
          "value": function () { return this.tag_to_string.apply(this, arguments); }
        },
        "unicodeCombiningClass": {
          "value": function () { return this.unicode_combining_class.apply(this, arguments); }
        },
        "unicodeCompose": {
          "value": function () { return this.unicode_compose.apply(this, arguments); }
        },
        "unicodeDecompose": {
          "value": function () { return this.unicode_decompose.apply(this, arguments); }
        },
        "unicodeDecomposeCompatibility": {
          "value": function () { return this.unicode_decompose_compatibility.apply(this, arguments); }
        },
        "unicodeEastasianWidth": {
          "value": function () { return this.unicode_eastasian_width.apply(this, arguments); }
        },
        "unicodeFuncsCreate": {
          "value": function () { return this.unicode_funcs_create.apply(this, arguments); }
        },
        "unicodeFuncsDestroy": {
          "value": function () { return this.unicode_funcs_destroy.apply(this, arguments); }
        },
        "unicodeFuncsGetDefault": {
          "value": function () { return this.unicode_funcs_get_default.apply(this, arguments); }
        },
        "unicodeFuncsGetEmpty": {
          "value": function () { return this.unicode_funcs_get_empty.apply(this, arguments); }
        },
        "unicodeFuncsGetParent": {
          "value": function () { return this.unicode_funcs_get_parent.apply(this, arguments); }
        },
        "unicodeFuncsGetUserData": {
          "value": function () { return this.unicode_funcs_get_user_data.apply(this, arguments); }
        },
        "unicodeFuncsIsImmutable": {
          "value": function () { return this.unicode_funcs_is_immutable.apply(this, arguments); }
        },
        "unicodeFuncsMakeImmutable": {
          "value": function () { return this.unicode_funcs_make_immutable.apply(this, arguments); }
        },
        "unicodeFuncsReference": {
          "value": function () { return this.unicode_funcs_reference.apply(this, arguments); }
        },
        "unicodeFuncsSetCombiningClassFunc": {
          "value": function () { return this.unicode_funcs_set_combining_class_func.apply(this, arguments); }
        },
        "unicodeFuncsSetComposeFunc": {
          "value": function () { return this.unicode_funcs_set_compose_func.apply(this, arguments); }
        },
        "unicodeFuncsSetDecomposeCompatibilityFunc": {
          "value": function () { return this.unicode_funcs_set_decompose_compatibility_func.apply(this, arguments); }
        },
        "unicodeFuncsSetDecomposeFunc": {
          "value": function () { return this.unicode_funcs_set_decompose_func.apply(this, arguments); }
        },
        "unicodeFuncsSetEastasianWidthFunc": {
          "value": function () { return this.unicode_funcs_set_eastasian_width_func.apply(this, arguments); }
        },
        "unicodeFuncsSetGeneralCategoryFunc": {
          "value": function () { return this.unicode_funcs_set_general_category_func.apply(this, arguments); }
        },
        "unicodeFuncsSetMirroringFunc": {
          "value": function () { return this.unicode_funcs_set_mirroring_func.apply(this, arguments); }
        },
        "unicodeFuncsSetScriptFunc": {
          "value": function () { return this.unicode_funcs_set_script_func.apply(this, arguments); }
        },
        "unicodeFuncsSetUserData": {
          "value": function () { return this.unicode_funcs_set_user_data.apply(this, arguments); }
        },
        "unicodeGeneralCategory": {
          "value": function () { return this.unicode_general_category.apply(this, arguments); }
        },
        "unicodeMirroring": {
          "value": function () { return this.unicode_mirroring.apply(this, arguments); }
        },
        "unicodeScript": {
          "value": function () { return this.unicode_script.apply(this, arguments); }
        },
        "versionAtleast": {
          "value": function () { return this.version_atleast.apply(this, arguments); }
        },
        "versionString": {
          "value": function () { return this.version_string.apply(this, arguments); }
        }
      }
    },
    "IBus": {
      "class": {
        "AttrList": {
          "prototype": {},
          "static": {}
        },
        "Attribute": {
          "prototype": {
            "getAttrType": {
              "value": function () { return this.get_attr_type.apply(this, arguments); }
            },
            "getEndIndex": {
              "value": function () { return this.get_end_index.apply(this, arguments); }
            },
            "getStartIndex": {
              "value": function () { return this.get_start_index.apply(this, arguments); }
            },
            "getValue": {
              "value": function () { return this.get_value.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Bus": {
          "prototype": {
            "addMatch": {
              "value": function () { return this.add_match.apply(this, arguments); }
            },
            "addMatchAsync": {
              "value": function () { return this.add_match_async.apply(this, arguments); }
            },
            "addMatchAsyncFinish": {
              "value": function () { return this.add_match_async_finish.apply(this, arguments); }
            },
            "createInputContext": {
              "value": function () { return this.create_input_context.apply(this, arguments); }
            },
            "createInputContextAsync": {
              "value": function () { return this.create_input_context_async.apply(this, arguments); }
            },
            "createInputContextAsyncFinish": {
              "value": function () { return this.create_input_context_async_finish.apply(this, arguments); }
            },
            "currentInputContext": {
              "value": function () { return this.current_input_context.apply(this, arguments); }
            },
            "currentInputContextAsync": {
              "value": function () { return this.current_input_context_async.apply(this, arguments); }
            },
            "currentInputContextAsyncFinish": {
              "value": function () { return this.current_input_context_async_finish.apply(this, arguments); }
            },
            "exitAsync": {
              "value": function () { return this.exit_async.apply(this, arguments); }
            },
            "exitAsyncFinish": {
              "value": function () { return this.exit_async_finish.apply(this, arguments); }
            },
            "getConfig": {
              "value": function () { return this.get_config.apply(this, arguments); }
            },
            "getConnection": {
              "value": function () { return this.get_connection.apply(this, arguments); }
            },
            "getEnginesByNames": {
              "value": function () { return this.get_engines_by_names.apply(this, arguments); }
            },
            "getGlobalEngine": {
              "value": function () { return this.get_global_engine.apply(this, arguments); }
            },
            "getGlobalEngineAsync": {
              "value": function () { return this.get_global_engine_async.apply(this, arguments); }
            },
            "getGlobalEngineAsyncFinish": {
              "value": function () { return this.get_global_engine_async_finish.apply(this, arguments); }
            },
            "getIbusProperty": {
              "value": function () { return this.get_ibus_property.apply(this, arguments); }
            },
            "getIbusPropertyAsync": {
              "value": function () { return this.get_ibus_property_async.apply(this, arguments); }
            },
            "getIbusPropertyAsyncFinish": {
              "value": function () { return this.get_ibus_property_async_finish.apply(this, arguments); }
            },
            "getNameOwner": {
              "value": function () { return this.get_name_owner.apply(this, arguments); }
            },
            "getNameOwnerAsync": {
              "value": function () { return this.get_name_owner_async.apply(this, arguments); }
            },
            "getNameOwnerAsyncFinish": {
              "value": function () { return this.get_name_owner_async_finish.apply(this, arguments); }
            },
            "getUseGlobalEngine": {
              "value": function () { return this.get_use_global_engine.apply(this, arguments); }
            },
            "getUseGlobalEngineAsync": {
              "value": function () { return this.get_use_global_engine_async.apply(this, arguments); }
            },
            "getUseGlobalEngineAsyncFinish": {
              "value": function () { return this.get_use_global_engine_async_finish.apply(this, arguments); }
            },
            "getUseSysLayout": {
              "value": function () { return this.get_use_sys_layout.apply(this, arguments); }
            },
            "getUseSysLayoutAsync": {
              "value": function () { return this.get_use_sys_layout_async.apply(this, arguments); }
            },
            "getUseSysLayoutAsyncFinish": {
              "value": function () { return this.get_use_sys_layout_async_finish.apply(this, arguments); }
            },
            "isConnected": {
              "value": function () { return this.is_connected.apply(this, arguments); }
            },
            "isGlobalEngineEnabled": {
              "value": function () { return this.is_global_engine_enabled.apply(this, arguments); }
            },
            "isGlobalEngineEnabledAsync": {
              "value": function () { return this.is_global_engine_enabled_async.apply(this, arguments); }
            },
            "isGlobalEngineEnabledAsyncFinish": {
              "value": function () { return this.is_global_engine_enabled_async_finish.apply(this, arguments); }
            },
            "listActiveEngines": {
              "value": function () { return this.list_active_engines.apply(this, arguments); }
            },
            "listActiveEnginesAsync": {
              "value": function () { return this.list_active_engines_async.apply(this, arguments); }
            },
            "listActiveEnginesAsyncFinish": {
              "value": function () { return this.list_active_engines_async_finish.apply(this, arguments); }
            },
            "listEngines": {
              "value": function () { return this.list_engines.apply(this, arguments); }
            },
            "listEnginesAsync": {
              "value": function () { return this.list_engines_async.apply(this, arguments); }
            },
            "listEnginesAsyncFinish": {
              "value": function () { return this.list_engines_async_finish.apply(this, arguments); }
            },
            "listNames": {
              "value": function () { return this.list_names.apply(this, arguments); }
            },
            "listQueuedOwners": {
              "value": function () { return this.list_queued_owners.apply(this, arguments); }
            },
            "nameHasOwner": {
              "value": function () { return this.name_has_owner.apply(this, arguments); }
            },
            "nameHasOwnerAsync": {
              "value": function () { return this.name_has_owner_async.apply(this, arguments); }
            },
            "nameHasOwnerAsyncFinish": {
              "value": function () { return this.name_has_owner_async_finish.apply(this, arguments); }
            },
            "preloadEngines": {
              "value": function () { return this.preload_engines.apply(this, arguments); }
            },
            "preloadEnginesAsync": {
              "value": function () { return this.preload_engines_async.apply(this, arguments); }
            },
            "preloadEnginesAsyncFinish": {
              "value": function () { return this.preload_engines_async_finish.apply(this, arguments); }
            },
            "registerComponent": {
              "value": function () { return this.register_component.apply(this, arguments); }
            },
            "registerComponentAsync": {
              "value": function () { return this.register_component_async.apply(this, arguments); }
            },
            "registerComponentAsyncFinish": {
              "value": function () { return this.register_component_async_finish.apply(this, arguments); }
            },
            "releaseName": {
              "value": function () { return this.release_name.apply(this, arguments); }
            },
            "releaseNameAsync": {
              "value": function () { return this.release_name_async.apply(this, arguments); }
            },
            "releaseNameAsyncFinish": {
              "value": function () { return this.release_name_async_finish.apply(this, arguments); }
            },
            "removeMatch": {
              "value": function () { return this.remove_match.apply(this, arguments); }
            },
            "removeMatchAsync": {
              "value": function () { return this.remove_match_async.apply(this, arguments); }
            },
            "removeMatchAsyncFinish": {
              "value": function () { return this.remove_match_async_finish.apply(this, arguments); }
            },
            "requestName": {
              "value": function () { return this.request_name.apply(this, arguments); }
            },
            "requestNameAsync": {
              "value": function () { return this.request_name_async.apply(this, arguments); }
            },
            "requestNameAsyncFinish": {
              "value": function () { return this.request_name_async_finish.apply(this, arguments); }
            },
            "setGlobalEngine": {
              "value": function () { return this.set_global_engine.apply(this, arguments); }
            },
            "setGlobalEngineAsync": {
              "value": function () { return this.set_global_engine_async.apply(this, arguments); }
            },
            "setGlobalEngineAsyncFinish": {
              "value": function () { return this.set_global_engine_async_finish.apply(this, arguments); }
            },
            "setIbusProperty": {
              "value": function () { return this.set_ibus_property.apply(this, arguments); }
            },
            "setIbusPropertyAsync": {
              "value": function () { return this.set_ibus_property_async.apply(this, arguments); }
            },
            "setIbusPropertyAsyncFinish": {
              "value": function () { return this.set_ibus_property_async_finish.apply(this, arguments); }
            },
            "setWatchDbusSignal": {
              "value": function () { return this.set_watch_dbus_signal.apply(this, arguments); }
            },
            "setWatchIbusSignal": {
              "value": function () { return this.set_watch_ibus_signal.apply(this, arguments); }
            },
            "connectAsync": {
              "get": function () { return this.connect_async; },
              "set": function (value) { this.connect_async = value; }
            }
          },
          "static": {}
        },
        "Component": {
          "prototype": {
            "addEngine": {
              "value": function () { return this.add_engine.apply(this, arguments); }
            },
            "addObservedPath": {
              "value": function () { return this.add_observed_path.apply(this, arguments); }
            },
            "checkModification": {
              "value": function () { return this.check_modification.apply(this, arguments); }
            },
            "getAuthor": {
              "value": function () { return this.get_author.apply(this, arguments); }
            },
            "getDescription": {
              "value": function () { return this.get_description.apply(this, arguments); }
            },
            "getEngines": {
              "value": function () { return this.get_engines.apply(this, arguments); }
            },
            "getExec": {
              "value": function () { return this.get_exec.apply(this, arguments); }
            },
            "getHomepage": {
              "value": function () { return this.get_homepage.apply(this, arguments); }
            },
            "getLicense": {
              "value": function () { return this.get_license.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getObservedPaths": {
              "value": function () { return this.get_observed_paths.apply(this, arguments); }
            },
            "getTextdomain": {
              "value": function () { return this.get_textdomain.apply(this, arguments); }
            },
            "getVersion": {
              "value": function () { return this.get_version.apply(this, arguments); }
            },
            "outputEngines": {
              "value": function () { return this.output_engines.apply(this, arguments); }
            },
            "commandLine": {
              "get": function () { return this.command_line; },
              "set": function (value) { this.command_line = value; }
            }
          },
          "static": {}
        },
        "Config": {
          "prototype": {
            "getValue": {
              "value": function () { return this.get_value.apply(this, arguments); }
            },
            "getValueAsync": {
              "value": function () { return this.get_value_async.apply(this, arguments); }
            },
            "getValueAsyncFinish": {
              "value": function () { return this.get_value_async_finish.apply(this, arguments); }
            },
            "getValues": {
              "value": function () { return this.get_values.apply(this, arguments); }
            },
            "getValuesAsync": {
              "value": function () { return this.get_values_async.apply(this, arguments); }
            },
            "getValuesAsyncFinish": {
              "value": function () { return this.get_values_async_finish.apply(this, arguments); }
            },
            "setValue": {
              "value": function () { return this.set_value.apply(this, arguments); }
            },
            "setValueAsync": {
              "value": function () { return this.set_value_async.apply(this, arguments); }
            },
            "setValueAsyncFinish": {
              "value": function () { return this.set_value_async_finish.apply(this, arguments); }
            }
          },
          "static": {
            "newAsync": {
              "value": function () { return this.new_async.apply(this, arguments); }
            }
          }
        },
        "ConfigService": {
          "prototype": {
            "valueChanged": {
              "value": function () { return this.value_changed.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Engine": {
          "prototype": {
            "commitText": {
              "value": function () { return this.commit_text.apply(this, arguments); }
            },
            "deleteSurroundingText": {
              "value": function () { return this.delete_surrounding_text.apply(this, arguments); }
            },
            "forwardKeyEvent": {
              "value": function () { return this.forward_key_event.apply(this, arguments); }
            },
            "getContentType": {
              "value": function () { return this.get_content_type.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getSurroundingText": {
              "value": function () { return this.get_surrounding_text.apply(this, arguments); }
            },
            "hideAuxiliaryText": {
              "value": function () { return this.hide_auxiliary_text.apply(this, arguments); }
            },
            "hideLookupTable": {
              "value": function () { return this.hide_lookup_table.apply(this, arguments); }
            },
            "hidePreeditText": {
              "value": function () { return this.hide_preedit_text.apply(this, arguments); }
            },
            "registerProperties": {
              "value": function () { return this.register_properties.apply(this, arguments); }
            },
            "showAuxiliaryText": {
              "value": function () { return this.show_auxiliary_text.apply(this, arguments); }
            },
            "showLookupTable": {
              "value": function () { return this.show_lookup_table.apply(this, arguments); }
            },
            "showPreeditText": {
              "value": function () { return this.show_preedit_text.apply(this, arguments); }
            },
            "updateAuxiliaryText": {
              "value": function () { return this.update_auxiliary_text.apply(this, arguments); }
            },
            "updateLookupTable": {
              "value": function () { return this.update_lookup_table.apply(this, arguments); }
            },
            "updateLookupTableFast": {
              "value": function () { return this.update_lookup_table_fast.apply(this, arguments); }
            },
            "updatePreeditText": {
              "value": function () { return this.update_preedit_text.apply(this, arguments); }
            },
            "updatePreeditTextWithMode": {
              "value": function () { return this.update_preedit_text_with_mode.apply(this, arguments); }
            },
            "updateProperty": {
              "value": function () { return this.update_property.apply(this, arguments); }
            },
            "engineName": {
              "get": function () { return this.engine_name; },
              "set": function (value) { this.engine_name = value; }
            }
          },
          "static": {}
        },
        "EngineDesc": {
          "prototype": {
            "getAuthor": {
              "value": function () { return this.get_author.apply(this, arguments); }
            },
            "getDescription": {
              "value": function () { return this.get_description.apply(this, arguments); }
            },
            "getHotkeys": {
              "value": function () { return this.get_hotkeys.apply(this, arguments); }
            },
            "getIcon": {
              "value": function () { return this.get_icon.apply(this, arguments); }
            },
            "getIconPropKey": {
              "value": function () { return this.get_icon_prop_key.apply(this, arguments); }
            },
            "getLanguage": {
              "value": function () { return this.get_language.apply(this, arguments); }
            },
            "getLayout": {
              "value": function () { return this.get_layout.apply(this, arguments); }
            },
            "getLayoutOption": {
              "value": function () { return this.get_layout_option.apply(this, arguments); }
            },
            "getLayoutVariant": {
              "value": function () { return this.get_layout_variant.apply(this, arguments); }
            },
            "getLicense": {
              "value": function () { return this.get_license.apply(this, arguments); }
            },
            "getLongname": {
              "value": function () { return this.get_longname.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getRank": {
              "value": function () { return this.get_rank.apply(this, arguments); }
            },
            "getSetup": {
              "value": function () { return this.get_setup.apply(this, arguments); }
            },
            "getSymbol": {
              "value": function () { return this.get_symbol.apply(this, arguments); }
            },
            "getTextdomain": {
              "value": function () { return this.get_textdomain.apply(this, arguments); }
            },
            "getVersion": {
              "value": function () { return this.get_version.apply(this, arguments); }
            },
            "iconPropKey": {
              "get": function () { return this.icon_prop_key; },
              "set": function (value) { this.icon_prop_key = value; }
            },
            "layoutOption": {
              "get": function () { return this.layout_option; },
              "set": function (value) { this.layout_option = value; }
            },
            "layoutVariant": {
              "get": function () { return this.layout_variant; },
              "set": function (value) { this.layout_variant = value; }
            }
          },
          "static": {}
        },
        "EngineSimple": {
          "prototype": {
            "addComposeFile": {
              "value": function () { return this.add_compose_file.apply(this, arguments); }
            },
            "addTable": {
              "value": function () { return this.add_table.apply(this, arguments); }
            },
            "addTableByLocale": {
              "value": function () { return this.add_table_by_locale.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Factory": {
          "prototype": {
            "addEngine": {
              "value": function () { return this.add_engine.apply(this, arguments); }
            },
            "createEngine": {
              "value": function () { return this.create_engine.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "HotkeyProfile": {
          "prototype": {
            "addHotkey": {
              "value": function () { return this.add_hotkey.apply(this, arguments); }
            },
            "addHotkeyFromString": {
              "value": function () { return this.add_hotkey_from_string.apply(this, arguments); }
            },
            "filterKeyEvent": {
              "value": function () { return this.filter_key_event.apply(this, arguments); }
            },
            "lookupHotkey": {
              "value": function () { return this.lookup_hotkey.apply(this, arguments); }
            },
            "removeHotkey": {
              "value": function () { return this.remove_hotkey.apply(this, arguments); }
            },
            "removeHotkeyByEvent": {
              "value": function () { return this.remove_hotkey_by_event.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "InputContext": {
          "prototype": {
            "cancelHandWriting": {
              "value": function () { return this.cancel_hand_writing.apply(this, arguments); }
            },
            "focusIn": {
              "value": function () { return this.focus_in.apply(this, arguments); }
            },
            "focusOut": {
              "value": function () { return this.focus_out.apply(this, arguments); }
            },
            "getEngine": {
              "value": function () { return this.get_engine.apply(this, arguments); }
            },
            "getEngineAsync": {
              "value": function () { return this.get_engine_async.apply(this, arguments); }
            },
            "getEngineAsyncFinish": {
              "value": function () { return this.get_engine_async_finish.apply(this, arguments); }
            },
            "needsSurroundingText": {
              "value": function () { return this.needs_surrounding_text.apply(this, arguments); }
            },
            "processHandWritingEvent": {
              "value": function () { return this.process_hand_writing_event.apply(this, arguments); }
            },
            "processKeyEvent": {
              "value": function () { return this.process_key_event.apply(this, arguments); }
            },
            "processKeyEventAsync": {
              "value": function () { return this.process_key_event_async.apply(this, arguments); }
            },
            "processKeyEventAsyncFinish": {
              "value": function () { return this.process_key_event_async_finish.apply(this, arguments); }
            },
            "propertyActivate": {
              "value": function () { return this.property_activate.apply(this, arguments); }
            },
            "setCapabilities": {
              "value": function () { return this.set_capabilities.apply(this, arguments); }
            },
            "setContentType": {
              "value": function () { return this.set_content_type.apply(this, arguments); }
            },
            "setCursorLocation": {
              "value": function () { return this.set_cursor_location.apply(this, arguments); }
            },
            "setCursorLocationRelative": {
              "value": function () { return this.set_cursor_location_relative.apply(this, arguments); }
            },
            "setEngine": {
              "value": function () { return this.set_engine.apply(this, arguments); }
            },
            "setSurroundingText": {
              "value": function () { return this.set_surrounding_text.apply(this, arguments); }
            }
          },
          "static": {
            "getInputContext": {
              "value": function () { return this.get_input_context.apply(this, arguments); }
            },
            "getInputContextAsync": {
              "value": function () { return this.get_input_context_async.apply(this, arguments); }
            },
            "getInputContextAsyncFinish": {
              "value": function () { return this.get_input_context_async_finish.apply(this, arguments); }
            },
            "newAsync": {
              "value": function () { return this.new_async.apply(this, arguments); }
            }
          }
        },
        "Keymap": {
          "prototype": {
            "lookupKeysym": {
              "value": function () { return this.lookup_keysym.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "LookupTable": {
          "prototype": {
            "appendCandidate": {
              "value": function () { return this.append_candidate.apply(this, arguments); }
            },
            "appendLabel": {
              "value": function () { return this.append_label.apply(this, arguments); }
            },
            "cursorDown": {
              "value": function () { return this.cursor_down.apply(this, arguments); }
            },
            "cursorUp": {
              "value": function () { return this.cursor_up.apply(this, arguments); }
            },
            "getCandidate": {
              "value": function () { return this.get_candidate.apply(this, arguments); }
            },
            "getCursorInPage": {
              "value": function () { return this.get_cursor_in_page.apply(this, arguments); }
            },
            "getCursorPos": {
              "value": function () { return this.get_cursor_pos.apply(this, arguments); }
            },
            "getLabel": {
              "value": function () { return this.get_label.apply(this, arguments); }
            },
            "getNumberOfCandidates": {
              "value": function () { return this.get_number_of_candidates.apply(this, arguments); }
            },
            "getOrientation": {
              "value": function () { return this.get_orientation.apply(this, arguments); }
            },
            "getPageSize": {
              "value": function () { return this.get_page_size.apply(this, arguments); }
            },
            "isCursorVisible": {
              "value": function () { return this.is_cursor_visible.apply(this, arguments); }
            },
            "isRound": {
              "value": function () { return this.is_round.apply(this, arguments); }
            },
            "pageDown": {
              "value": function () { return this.page_down.apply(this, arguments); }
            },
            "pageUp": {
              "value": function () { return this.page_up.apply(this, arguments); }
            },
            "setCursorPos": {
              "value": function () { return this.set_cursor_pos.apply(this, arguments); }
            },
            "setCursorVisible": {
              "value": function () { return this.set_cursor_visible.apply(this, arguments); }
            },
            "setLabel": {
              "value": function () { return this.set_label.apply(this, arguments); }
            },
            "setOrientation": {
              "value": function () { return this.set_orientation.apply(this, arguments); }
            },
            "setPageSize": {
              "value": function () { return this.set_page_size.apply(this, arguments); }
            },
            "setRound": {
              "value": function () { return this.set_round.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Object": {
          "prototype": {},
          "static": {}
        },
        "ObservedPath": {
          "prototype": {
            "checkModification": {
              "value": function () { return this.check_modification.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "PanelService": {
          "prototype": {
            "candidateClicked": {
              "value": function () { return this.candidate_clicked.apply(this, arguments); }
            },
            "cursorDown": {
              "value": function () { return this.cursor_down.apply(this, arguments); }
            },
            "cursorUp": {
              "value": function () { return this.cursor_up.apply(this, arguments); }
            },
            "pageDown": {
              "value": function () { return this.page_down.apply(this, arguments); }
            },
            "pageUp": {
              "value": function () { return this.page_up.apply(this, arguments); }
            },
            "propertyActivate": {
              "value": function () { return this.property_activate.apply(this, arguments); }
            },
            "propertyHide": {
              "value": function () { return this.property_hide.apply(this, arguments); }
            },
            "propertyShow": {
              "value": function () { return this.property_show.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "PropList": {
          "prototype": {
            "updateProperty": {
              "value": function () { return this.update_property.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Property": {
          "prototype": {
            "getIcon": {
              "value": function () { return this.get_icon.apply(this, arguments); }
            },
            "getKey": {
              "value": function () { return this.get_key.apply(this, arguments); }
            },
            "getLabel": {
              "value": function () { return this.get_label.apply(this, arguments); }
            },
            "getPropType": {
              "value": function () { return this.get_prop_type.apply(this, arguments); }
            },
            "getSensitive": {
              "value": function () { return this.get_sensitive.apply(this, arguments); }
            },
            "getState": {
              "value": function () { return this.get_state.apply(this, arguments); }
            },
            "getSubProps": {
              "value": function () { return this.get_sub_props.apply(this, arguments); }
            },
            "getSymbol": {
              "value": function () { return this.get_symbol.apply(this, arguments); }
            },
            "getTooltip": {
              "value": function () { return this.get_tooltip.apply(this, arguments); }
            },
            "getVisible": {
              "value": function () { return this.get_visible.apply(this, arguments); }
            },
            "setIcon": {
              "value": function () { return this.set_icon.apply(this, arguments); }
            },
            "setLabel": {
              "value": function () { return this.set_label.apply(this, arguments); }
            },
            "setSensitive": {
              "value": function () { return this.set_sensitive.apply(this, arguments); }
            },
            "setState": {
              "value": function () { return this.set_state.apply(this, arguments); }
            },
            "setSubProps": {
              "value": function () { return this.set_sub_props.apply(this, arguments); }
            },
            "setSymbol": {
              "value": function () { return this.set_symbol.apply(this, arguments); }
            },
            "setTooltip": {
              "value": function () { return this.set_tooltip.apply(this, arguments); }
            },
            "setVisible": {
              "value": function () { return this.set_visible.apply(this, arguments); }
            },
            "propType": {
              "get": function () { return this.prop_type; },
              "set": function (value) { this.prop_type = value; }
            },
            "subProps": {
              "get": function () { return this.sub_props; },
              "set": function (value) { this.sub_props = value; }
            }
          },
          "static": {}
        },
        "Proxy": {
          "prototype": {},
          "static": {}
        },
        "Registry": {
          "prototype": {
            "checkModification": {
              "value": function () { return this.check_modification.apply(this, arguments); }
            },
            "getComponents": {
              "value": function () { return this.get_components.apply(this, arguments); }
            },
            "getObservedPaths": {
              "value": function () { return this.get_observed_paths.apply(this, arguments); }
            },
            "loadCache": {
              "value": function () { return this.load_cache.apply(this, arguments); }
            },
            "loadCacheFile": {
              "value": function () { return this.load_cache_file.apply(this, arguments); }
            },
            "loadInDir": {
              "value": function () { return this.load_in_dir.apply(this, arguments); }
            },
            "saveCache": {
              "value": function () { return this.save_cache.apply(this, arguments); }
            },
            "saveCacheFile": {
              "value": function () { return this.save_cache_file.apply(this, arguments); }
            },
            "startMonitorChanges": {
              "value": function () { return this.start_monitor_changes.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Serializable": {
          "prototype": {
            "getQattachment": {
              "value": function () { return this.get_qattachment.apply(this, arguments); }
            },
            "removeQattachment": {
              "value": function () { return this.remove_qattachment.apply(this, arguments); }
            },
            "setQattachment": {
              "value": function () { return this.set_qattachment.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Service": {
          "prototype": {
            "emitSignal": {
              "value": function () { return this.emit_signal.apply(this, arguments); }
            },
            "getConnection": {
              "value": function () { return this.get_connection.apply(this, arguments); }
            },
            "getObjectPath": {
              "value": function () { return this.get_object_path.apply(this, arguments); }
            },
            "objectPath": {
              "get": function () { return this.object_path; },
              "set": function (value) { this.object_path = value; }
            }
          },
          "static": {}
        },
        "Text": {
          "prototype": {
            "appendAttribute": {
              "value": function () { return this.append_attribute.apply(this, arguments); }
            },
            "getAttributes": {
              "value": function () { return this.get_attributes.apply(this, arguments); }
            },
            "getIsStatic": {
              "value": function () { return this.get_is_static.apply(this, arguments); }
            },
            "getLength": {
              "value": function () { return this.get_length.apply(this, arguments); }
            },
            "getText": {
              "value": function () { return this.get_text.apply(this, arguments); }
            },
            "setAttributes": {
              "value": function () { return this.set_attributes.apply(this, arguments); }
            }
          },
          "static": {}
        }
      },
      "static": {
        "attrBackgroundNew": {
          "value": function () { return this.attr_background_new.apply(this, arguments); }
        },
        "attrForegroundNew": {
          "value": function () { return this.attr_foreground_new.apply(this, arguments); }
        },
        "attrUnderlineNew": {
          "value": function () { return this.attr_underline_new.apply(this, arguments); }
        },
        "errorQuark": {
          "value": function () { return this.error_quark.apply(this, arguments); }
        },
        "freeStrv": {
          "value": function () { return this.free_strv.apply(this, arguments); }
        },
        "getAddress": {
          "value": function () { return this.get_address.apply(this, arguments); }
        },
        "getDaemonUid": {
          "value": function () { return this.get_daemon_uid.apply(this, arguments); }
        },
        "getLanguageName": {
          "value": function () { return this.get_language_name.apply(this, arguments); }
        },
        "getLocalMachineId": {
          "value": function () { return this.get_local_machine_id.apply(this, arguments); }
        },
        "getSocketPath": {
          "value": function () { return this.get_socket_path.apply(this, arguments); }
        },
        "getTimeout": {
          "value": function () { return this.get_timeout.apply(this, arguments); }
        },
        "getUntranslatedLanguageName": {
          "value": function () { return this.get_untranslated_language_name.apply(this, arguments); }
        },
        "getUserName": {
          "value": function () { return this.get_user_name.apply(this, arguments); }
        },
        "keyEventFromString": {
          "value": function () { return this.key_event_from_string.apply(this, arguments); }
        },
        "keyEventToString": {
          "value": function () { return this.key_event_to_string.apply(this, arguments); }
        },
        "keyvalConvertCase": {
          "value": function () { return this.keyval_convert_case.apply(this, arguments); }
        },
        "keyvalFromName": {
          "value": function () { return this.keyval_from_name.apply(this, arguments); }
        },
        "keyvalName": {
          "value": function () { return this.keyval_name.apply(this, arguments); }
        },
        "keyvalToLower": {
          "value": function () { return this.keyval_to_lower.apply(this, arguments); }
        },
        "keyvalToUnicode": {
          "value": function () { return this.keyval_to_unicode.apply(this, arguments); }
        },
        "keyvalToUpper": {
          "value": function () { return this.keyval_to_upper.apply(this, arguments); }
        },
        "setDisplay": {
          "value": function () { return this.set_display.apply(this, arguments); }
        },
        "setLogHandler": {
          "value": function () { return this.set_log_handler.apply(this, arguments); }
        },
        "unicodeToKeyval": {
          "value": function () { return this.unicode_to_keyval.apply(this, arguments); }
        },
        "unsetLogHandler": {
          "value": function () { return this.unset_log_handler.apply(this, arguments); }
        },
        "writeAddress": {
          "value": function () { return this.write_address.apply(this, arguments); }
        },
        "xmlParseBuffer": {
          "value": function () { return this.xml_parse_buffer.apply(this, arguments); }
        },
        "xmlParseFile": {
          "value": function () { return this.xml_parse_file.apply(this, arguments); }
        }
      }
    },
    "JavaScriptCore": {
      "class": {},
      "static": {}
    },
    "Json": {
      "class": {
        "Builder": {
          "prototype": {
            "addBooleanValue": {
              "value": function () { return this.add_boolean_value.apply(this, arguments); }
            },
            "addDoubleValue": {
              "value": function () { return this.add_double_value.apply(this, arguments); }
            },
            "addIntValue": {
              "value": function () { return this.add_int_value.apply(this, arguments); }
            },
            "addNullValue": {
              "value": function () { return this.add_null_value.apply(this, arguments); }
            },
            "addStringValue": {
              "value": function () { return this.add_string_value.apply(this, arguments); }
            },
            "addValue": {
              "value": function () { return this.add_value.apply(this, arguments); }
            },
            "beginArray": {
              "value": function () { return this.begin_array.apply(this, arguments); }
            },
            "beginObject": {
              "value": function () { return this.begin_object.apply(this, arguments); }
            },
            "endArray": {
              "value": function () { return this.end_array.apply(this, arguments); }
            },
            "endObject": {
              "value": function () { return this.end_object.apply(this, arguments); }
            },
            "getRoot": {
              "value": function () { return this.get_root.apply(this, arguments); }
            },
            "setMemberName": {
              "value": function () { return this.set_member_name.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Generator": {
          "prototype": {
            "getIndent": {
              "value": function () { return this.get_indent.apply(this, arguments); }
            },
            "getIndentChar": {
              "value": function () { return this.get_indent_char.apply(this, arguments); }
            },
            "getPretty": {
              "value": function () { return this.get_pretty.apply(this, arguments); }
            },
            "getRoot": {
              "value": function () { return this.get_root.apply(this, arguments); }
            },
            "setIndent": {
              "value": function () { return this.set_indent.apply(this, arguments); }
            },
            "setIndentChar": {
              "value": function () { return this.set_indent_char.apply(this, arguments); }
            },
            "setPretty": {
              "value": function () { return this.set_pretty.apply(this, arguments); }
            },
            "setRoot": {
              "value": function () { return this.set_root.apply(this, arguments); }
            },
            "toData": {
              "value": function () { return this.to_data.apply(this, arguments); }
            },
            "toFile": {
              "value": function () { return this.to_file.apply(this, arguments); }
            },
            "toStream": {
              "value": function () { return this.to_stream.apply(this, arguments); }
            },
            "indentChar": {
              "get": function () { return this.indent_char; },
              "set": function (value) { this.indent_char = value; }
            }
          },
          "static": {}
        },
        "Parser": {
          "prototype": {
            "getCurrentLine": {
              "value": function () { return this.get_current_line.apply(this, arguments); }
            },
            "getCurrentPos": {
              "value": function () { return this.get_current_pos.apply(this, arguments); }
            },
            "getRoot": {
              "value": function () { return this.get_root.apply(this, arguments); }
            },
            "hasAssignment": {
              "value": function () { return this.has_assignment.apply(this, arguments); }
            },
            "loadFromData": {
              "value": function () { return this.load_from_data.apply(this, arguments); }
            },
            "loadFromFile": {
              "value": function () { return this.load_from_file.apply(this, arguments); }
            },
            "loadFromStream": {
              "value": function () { return this.load_from_stream.apply(this, arguments); }
            },
            "loadFromStreamAsync": {
              "value": function () { return this.load_from_stream_async.apply(this, arguments); }
            },
            "loadFromStreamFinish": {
              "value": function () { return this.load_from_stream_finish.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Path": {
          "prototype": {},
          "static": {}
        },
        "Reader": {
          "prototype": {
            "countElements": {
              "value": function () { return this.count_elements.apply(this, arguments); }
            },
            "countMembers": {
              "value": function () { return this.count_members.apply(this, arguments); }
            },
            "endElement": {
              "value": function () { return this.end_element.apply(this, arguments); }
            },
            "endMember": {
              "value": function () { return this.end_member.apply(this, arguments); }
            },
            "getBooleanValue": {
              "value": function () { return this.get_boolean_value.apply(this, arguments); }
            },
            "getDoubleValue": {
              "value": function () { return this.get_double_value.apply(this, arguments); }
            },
            "getError": {
              "value": function () { return this.get_error.apply(this, arguments); }
            },
            "getIntValue": {
              "value": function () { return this.get_int_value.apply(this, arguments); }
            },
            "getMemberName": {
              "value": function () { return this.get_member_name.apply(this, arguments); }
            },
            "getNullValue": {
              "value": function () { return this.get_null_value.apply(this, arguments); }
            },
            "getStringValue": {
              "value": function () { return this.get_string_value.apply(this, arguments); }
            },
            "getValue": {
              "value": function () { return this.get_value.apply(this, arguments); }
            },
            "isArray": {
              "value": function () { return this.is_array.apply(this, arguments); }
            },
            "isObject": {
              "value": function () { return this.is_object.apply(this, arguments); }
            },
            "isValue": {
              "value": function () { return this.is_value.apply(this, arguments); }
            },
            "listMembers": {
              "value": function () { return this.list_members.apply(this, arguments); }
            },
            "readElement": {
              "value": function () { return this.read_element.apply(this, arguments); }
            },
            "readMember": {
              "value": function () { return this.read_member.apply(this, arguments); }
            },
            "setRoot": {
              "value": function () { return this.set_root.apply(this, arguments); }
            }
          },
          "static": {}
        }
      },
      "static": {
        "boxedCanDeserialize": {
          "value": function () { return this.boxed_can_deserialize.apply(this, arguments); }
        },
        "boxedCanSerialize": {
          "value": function () { return this.boxed_can_serialize.apply(this, arguments); }
        },
        "boxedDeserialize": {
          "value": function () { return this.boxed_deserialize.apply(this, arguments); }
        },
        "boxedRegisterDeserializeFunc": {
          "value": function () { return this.boxed_register_deserialize_func.apply(this, arguments); }
        },
        "boxedRegisterSerializeFunc": {
          "value": function () { return this.boxed_register_serialize_func.apply(this, arguments); }
        },
        "boxedSerialize": {
          "value": function () { return this.boxed_serialize.apply(this, arguments); }
        },
        "constructGobject": {
          "value": function () { return this.construct_gobject.apply(this, arguments); }
        },
        "gobjectDeserialize": {
          "value": function () { return this.gobject_deserialize.apply(this, arguments); }
        },
        "gobjectFromData": {
          "value": function () { return this.gobject_from_data.apply(this, arguments); }
        },
        "gobjectSerialize": {
          "value": function () { return this.gobject_serialize.apply(this, arguments); }
        },
        "gobjectToData": {
          "value": function () { return this.gobject_to_data.apply(this, arguments); }
        },
        "gvariantDeserialize": {
          "value": function () { return this.gvariant_deserialize.apply(this, arguments); }
        },
        "gvariantDeserializeData": {
          "value": function () { return this.gvariant_deserialize_data.apply(this, arguments); }
        },
        "gvariantSerialize": {
          "value": function () { return this.gvariant_serialize.apply(this, arguments); }
        },
        "gvariantSerializeData": {
          "value": function () { return this.gvariant_serialize_data.apply(this, arguments); }
        },
        "parserErrorQuark": {
          "value": function () { return this.parser_error_quark.apply(this, arguments); }
        },
        "pathErrorQuark": {
          "value": function () { return this.path_error_quark.apply(this, arguments); }
        },
        "readerErrorQuark": {
          "value": function () { return this.reader_error_quark.apply(this, arguments); }
        },
        "serializeGobject": {
          "value": function () { return this.serialize_gobject.apply(this, arguments); }
        }
      }
    },
    "LangTag": {
      "class": {},
      "static": {
        "dbFinalize": {
          "value": function () { return this.db_finalize.apply(this, arguments); }
        },
        "dbGetDatadir": {
          "value": function () { return this.db_get_datadir.apply(this, arguments); }
        },
        "dbGetExtlang": {
          "value": function () { return this.db_get_extlang.apply(this, arguments); }
        },
        "dbGetGrandfathered": {
          "value": function () { return this.db_get_grandfathered.apply(this, arguments); }
        },
        "dbGetLang": {
          "value": function () { return this.db_get_lang.apply(this, arguments); }
        },
        "dbGetRedundant": {
          "value": function () { return this.db_get_redundant.apply(this, arguments); }
        },
        "dbGetRegion": {
          "value": function () { return this.db_get_region.apply(this, arguments); }
        },
        "dbGetScript": {
          "value": function () { return this.db_get_script.apply(this, arguments); }
        },
        "dbGetVariant": {
          "value": function () { return this.db_get_variant.apply(this, arguments); }
        },
        "dbInitialize": {
          "value": function () { return this.db_initialize.apply(this, arguments); }
        },
        "dbSetDatadir": {
          "value": function () { return this.db_set_datadir.apply(this, arguments); }
        },
        "extModulesLoad": {
          "value": function () { return this.ext_modules_load.apply(this, arguments); }
        },
        "extModulesUnload": {
          "value": function () { return this.ext_modules_unload.apply(this, arguments); }
        },
        "iterInit": {
          "value": function () { return this.iter_init.apply(this, arguments); }
        },
        "listFree": {
          "value": function () { return this.list_free.apply(this, arguments); }
        },
        "tagConvertFromLocale": {
          "value": function () { return this.tag_convert_from_locale.apply(this, arguments); }
        },
        "tagConvertFromLocaleString": {
          "value": function () { return this.tag_convert_from_locale_string.apply(this, arguments); }
        }
      }
    },
    "Libosinfo": {
      "class": {
        "AvatarFormat": {
          "prototype": {
            "getAlpha": {
              "value": function () { return this.get_alpha.apply(this, arguments); }
            },
            "getHeight": {
              "value": function () { return this.get_height.apply(this, arguments); }
            },
            "getMimeTypes": {
              "value": function () { return this.get_mime_types.apply(this, arguments); }
            },
            "getWidth": {
              "value": function () { return this.get_width.apply(this, arguments); }
            },
            "mimeTypes": {
              "get": function () { return this.mime_types; },
              "set": function (value) { this.mime_types = value; }
            }
          },
          "static": {}
        },
        "Datamap": {
          "prototype": {
            "reverseLookup": {
              "value": function () { return this.reverse_lookup.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DatamapList": {
          "prototype": {},
          "static": {}
        },
        "Db": {
          "prototype": {
            "addDatamap": {
              "value": function () { return this.add_datamap.apply(this, arguments); }
            },
            "addDeployment": {
              "value": function () { return this.add_deployment.apply(this, arguments); }
            },
            "addDevice": {
              "value": function () { return this.add_device.apply(this, arguments); }
            },
            "addInstallScript": {
              "value": function () { return this.add_install_script.apply(this, arguments); }
            },
            "addOs": {
              "value": function () { return this.add_os.apply(this, arguments); }
            },
            "addPlatform": {
              "value": function () { return this.add_platform.apply(this, arguments); }
            },
            "findDeployment": {
              "value": function () { return this.find_deployment.apply(this, arguments); }
            },
            "getDatamap": {
              "value": function () { return this.get_datamap.apply(this, arguments); }
            },
            "getDatamapList": {
              "value": function () { return this.get_datamap_list.apply(this, arguments); }
            },
            "getDeployment": {
              "value": function () { return this.get_deployment.apply(this, arguments); }
            },
            "getDeploymentList": {
              "value": function () { return this.get_deployment_list.apply(this, arguments); }
            },
            "getDevice": {
              "value": function () { return this.get_device.apply(this, arguments); }
            },
            "getDeviceList": {
              "value": function () { return this.get_device_list.apply(this, arguments); }
            },
            "getInstallScript": {
              "value": function () { return this.get_install_script.apply(this, arguments); }
            },
            "getInstallScriptList": {
              "value": function () { return this.get_install_script_list.apply(this, arguments); }
            },
            "getOs": {
              "value": function () { return this.get_os.apply(this, arguments); }
            },
            "getOsList": {
              "value": function () { return this.get_os_list.apply(this, arguments); }
            },
            "getPlatform": {
              "value": function () { return this.get_platform.apply(this, arguments); }
            },
            "getPlatformList": {
              "value": function () { return this.get_platform_list.apply(this, arguments); }
            },
            "guessOsFromMedia": {
              "value": function () { return this.guess_os_from_media.apply(this, arguments); }
            },
            "guessOsFromTree": {
              "value": function () { return this.guess_os_from_tree.apply(this, arguments); }
            },
            "identifyMedia": {
              "value": function () { return this.identify_media.apply(this, arguments); }
            },
            "uniqueValuesForOsRelationship": {
              "value": function () { return this.unique_values_for_os_relationship.apply(this, arguments); }
            },
            "uniqueValuesForPlatformRelationship": {
              "value": function () { return this.unique_values_for_platform_relationship.apply(this, arguments); }
            },
            "uniqueValuesForPropertyInDeployment": {
              "value": function () { return this.unique_values_for_property_in_deployment.apply(this, arguments); }
            },
            "uniqueValuesForPropertyInDevice": {
              "value": function () { return this.unique_values_for_property_in_device.apply(this, arguments); }
            },
            "uniqueValuesForPropertyInOs": {
              "value": function () { return this.unique_values_for_property_in_os.apply(this, arguments); }
            },
            "uniqueValuesForPropertyInPlatform": {
              "value": function () { return this.unique_values_for_property_in_platform.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Deployment": {
          "prototype": {
            "addDevice": {
              "value": function () { return this.add_device.apply(this, arguments); }
            },
            "getDeviceLinks": {
              "value": function () { return this.get_device_links.apply(this, arguments); }
            },
            "getDevices": {
              "value": function () { return this.get_devices.apply(this, arguments); }
            },
            "getOs": {
              "value": function () { return this.get_os.apply(this, arguments); }
            },
            "getPlatform": {
              "value": function () { return this.get_platform.apply(this, arguments); }
            },
            "getPreferredDevice": {
              "value": function () { return this.get_preferred_device.apply(this, arguments); }
            },
            "getPreferredDeviceLink": {
              "value": function () { return this.get_preferred_device_link.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DeploymentList": {
          "prototype": {
            "newCopy": {
              "value": function () { return this.new_copy.apply(this, arguments); }
            },
            "newFiltered": {
              "value": function () { return this.new_filtered.apply(this, arguments); }
            },
            "newIntersection": {
              "value": function () { return this.new_intersection.apply(this, arguments); }
            },
            "newUnion": {
              "value": function () { return this.new_union.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Device": {
          "prototype": {
            "getBusType": {
              "value": function () { return this.get_bus_type.apply(this, arguments); }
            },
            "getClass": {
              "value": function () { return this.get_class.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getProduct": {
              "value": function () { return this.get_product.apply(this, arguments); }
            },
            "getProductId": {
              "value": function () { return this.get_product_id.apply(this, arguments); }
            },
            "getSubsystem": {
              "value": function () { return this.get_subsystem.apply(this, arguments); }
            },
            "getVendor": {
              "value": function () { return this.get_vendor.apply(this, arguments); }
            },
            "getVendorId": {
              "value": function () { return this.get_vendor_id.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DeviceDriver": {
          "prototype": {
            "addDevice": {
              "value": function () { return this.add_device.apply(this, arguments); }
            },
            "getArchitecture": {
              "value": function () { return this.get_architecture.apply(this, arguments); }
            },
            "getDevices": {
              "value": function () { return this.get_devices.apply(this, arguments); }
            },
            "getFiles": {
              "value": function () { return this.get_files.apply(this, arguments); }
            },
            "getLocation": {
              "value": function () { return this.get_location.apply(this, arguments); }
            },
            "getPreInstallable": {
              "value": function () { return this.get_pre_installable.apply(this, arguments); }
            },
            "getSigned": {
              "value": function () { return this.get_signed.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DeviceDriverList": {
          "prototype": {},
          "static": {}
        },
        "DeviceLink": {
          "prototype": {
            "getDriver": {
              "value": function () { return this.get_driver.apply(this, arguments); }
            },
            "getTarget": {
              "value": function () { return this.get_target.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DeviceLinkFilter": {
          "prototype": {
            "getTargetFilter": {
              "value": function () { return this.get_target_filter.apply(this, arguments); }
            },
            "targetFilter": {
              "get": function () { return this.target_filter; },
              "set": function (value) { this.target_filter = value; }
            }
          },
          "static": {}
        },
        "DeviceLinkList": {
          "prototype": {
            "getDevices": {
              "value": function () { return this.get_devices.apply(this, arguments); }
            },
            "newCopy": {
              "value": function () { return this.new_copy.apply(this, arguments); }
            },
            "newFiltered": {
              "value": function () { return this.new_filtered.apply(this, arguments); }
            },
            "newIntersection": {
              "value": function () { return this.new_intersection.apply(this, arguments); }
            },
            "newUnion": {
              "value": function () { return this.new_union.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DeviceList": {
          "prototype": {
            "newCopy": {
              "value": function () { return this.new_copy.apply(this, arguments); }
            },
            "newFiltered": {
              "value": function () { return this.new_filtered.apply(this, arguments); }
            },
            "newIntersection": {
              "value": function () { return this.new_intersection.apply(this, arguments); }
            },
            "newUnion": {
              "value": function () { return this.new_union.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Entity": {
          "prototype": {
            "addParam": {
              "value": function () { return this.add_param.apply(this, arguments); }
            },
            "clearParam": {
              "value": function () { return this.clear_param.apply(this, arguments); }
            },
            "getId": {
              "value": function () { return this.get_id.apply(this, arguments); }
            },
            "getParamKeys": {
              "value": function () { return this.get_param_keys.apply(this, arguments); }
            },
            "getParamValue": {
              "value": function () { return this.get_param_value.apply(this, arguments); }
            },
            "getParamValueBoolean": {
              "value": function () { return this.get_param_value_boolean.apply(this, arguments); }
            },
            "getParamValueBooleanWithDefault": {
              "value": function () { return this.get_param_value_boolean_with_default.apply(this, arguments); }
            },
            "getParamValueEnum": {
              "value": function () { return this.get_param_value_enum.apply(this, arguments); }
            },
            "getParamValueInt64": {
              "value": function () { return this.get_param_value_int64.apply(this, arguments); }
            },
            "getParamValueInt64WithDefault": {
              "value": function () { return this.get_param_value_int64_with_default.apply(this, arguments); }
            },
            "getParamValueList": {
              "value": function () { return this.get_param_value_list.apply(this, arguments); }
            },
            "setParam": {
              "value": function () { return this.set_param.apply(this, arguments); }
            },
            "setParamBoolean": {
              "value": function () { return this.set_param_boolean.apply(this, arguments); }
            },
            "setParamEnum": {
              "value": function () { return this.set_param_enum.apply(this, arguments); }
            },
            "setParamInt64": {
              "value": function () { return this.set_param_int64.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Filter": {
          "prototype": {
            "addConstraint": {
              "value": function () { return this.add_constraint.apply(this, arguments); }
            },
            "clearConstraint": {
              "value": function () { return this.clear_constraint.apply(this, arguments); }
            },
            "clearConstraints": {
              "value": function () { return this.clear_constraints.apply(this, arguments); }
            },
            "getConstraintKeys": {
              "value": function () { return this.get_constraint_keys.apply(this, arguments); }
            },
            "getConstraintValues": {
              "value": function () { return this.get_constraint_values.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "InstallConfig": {
          "prototype": {
            "getAdminPassword": {
              "value": function () { return this.get_admin_password.apply(this, arguments); }
            },
            "getAvatarDisk": {
              "value": function () { return this.get_avatar_disk.apply(this, arguments); }
            },
            "getAvatarLocation": {
              "value": function () { return this.get_avatar_location.apply(this, arguments); }
            },
            "getDriverSigning": {
              "value": function () { return this.get_driver_signing.apply(this, arguments); }
            },
            "getHardwareArch": {
              "value": function () { return this.get_hardware_arch.apply(this, arguments); }
            },
            "getHostname": {
              "value": function () { return this.get_hostname.apply(this, arguments); }
            },
            "getL10nKeyboard": {
              "value": function () { return this.get_l10n_keyboard.apply(this, arguments); }
            },
            "getL10nLanguage": {
              "value": function () { return this.get_l10n_language.apply(this, arguments); }
            },
            "getL10nTimezone": {
              "value": function () { return this.get_l10n_timezone.apply(this, arguments); }
            },
            "getPostInstallDriversDisk": {
              "value": function () { return this.get_post_install_drivers_disk.apply(this, arguments); }
            },
            "getPostInstallDriversLocation": {
              "value": function () { return this.get_post_install_drivers_location.apply(this, arguments); }
            },
            "getPreInstallDriversDisk": {
              "value": function () { return this.get_pre_install_drivers_disk.apply(this, arguments); }
            },
            "getPreInstallDriversLocation": {
              "value": function () { return this.get_pre_install_drivers_location.apply(this, arguments); }
            },
            "getRegLogin": {
              "value": function () { return this.get_reg_login.apply(this, arguments); }
            },
            "getRegPassword": {
              "value": function () { return this.get_reg_password.apply(this, arguments); }
            },
            "getRegProductKey": {
              "value": function () { return this.get_reg_product_key.apply(this, arguments); }
            },
            "getScriptDisk": {
              "value": function () { return this.get_script_disk.apply(this, arguments); }
            },
            "getTargetDisk": {
              "value": function () { return this.get_target_disk.apply(this, arguments); }
            },
            "getUserAdministrator": {
              "value": function () { return this.get_user_administrator.apply(this, arguments); }
            },
            "getUserAutologin": {
              "value": function () { return this.get_user_autologin.apply(this, arguments); }
            },
            "getUserLogin": {
              "value": function () { return this.get_user_login.apply(this, arguments); }
            },
            "getUserPassword": {
              "value": function () { return this.get_user_password.apply(this, arguments); }
            },
            "getUserRealname": {
              "value": function () { return this.get_user_realname.apply(this, arguments); }
            },
            "setAdminPassword": {
              "value": function () { return this.set_admin_password.apply(this, arguments); }
            },
            "setAvatarDisk": {
              "value": function () { return this.set_avatar_disk.apply(this, arguments); }
            },
            "setAvatarLocation": {
              "value": function () { return this.set_avatar_location.apply(this, arguments); }
            },
            "setDriverSigning": {
              "value": function () { return this.set_driver_signing.apply(this, arguments); }
            },
            "setHardwareArch": {
              "value": function () { return this.set_hardware_arch.apply(this, arguments); }
            },
            "setHostname": {
              "value": function () { return this.set_hostname.apply(this, arguments); }
            },
            "setL10nKeyboard": {
              "value": function () { return this.set_l10n_keyboard.apply(this, arguments); }
            },
            "setL10nLanguage": {
              "value": function () { return this.set_l10n_language.apply(this, arguments); }
            },
            "setL10nTimezone": {
              "value": function () { return this.set_l10n_timezone.apply(this, arguments); }
            },
            "setPostInstallDriversDisk": {
              "value": function () { return this.set_post_install_drivers_disk.apply(this, arguments); }
            },
            "setPostInstallDriversLocation": {
              "value": function () { return this.set_post_install_drivers_location.apply(this, arguments); }
            },
            "setPreInstallDriversDisk": {
              "value": function () { return this.set_pre_install_drivers_disk.apply(this, arguments); }
            },
            "setPreInstallDriversLocation": {
              "value": function () { return this.set_pre_install_drivers_location.apply(this, arguments); }
            },
            "setRegLogin": {
              "value": function () { return this.set_reg_login.apply(this, arguments); }
            },
            "setRegPassword": {
              "value": function () { return this.set_reg_password.apply(this, arguments); }
            },
            "setRegProductKey": {
              "value": function () { return this.set_reg_product_key.apply(this, arguments); }
            },
            "setScriptDisk": {
              "value": function () { return this.set_script_disk.apply(this, arguments); }
            },
            "setTargetDisk": {
              "value": function () { return this.set_target_disk.apply(this, arguments); }
            },
            "setUserAdministrator": {
              "value": function () { return this.set_user_administrator.apply(this, arguments); }
            },
            "setUserAutologin": {
              "value": function () { return this.set_user_autologin.apply(this, arguments); }
            },
            "setUserLogin": {
              "value": function () { return this.set_user_login.apply(this, arguments); }
            },
            "setUserPassword": {
              "value": function () { return this.set_user_password.apply(this, arguments); }
            },
            "setUserRealname": {
              "value": function () { return this.set_user_realname.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "InstallConfigParam": {
          "prototype": {
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getPolicy": {
              "value": function () { return this.get_policy.apply(this, arguments); }
            },
            "getValueMap": {
              "value": function () { return this.get_value_map.apply(this, arguments); }
            },
            "isOptional": {
              "value": function () { return this.is_optional.apply(this, arguments); }
            },
            "isRequired": {
              "value": function () { return this.is_required.apply(this, arguments); }
            },
            "setValueMap": {
              "value": function () { return this.set_value_map.apply(this, arguments); }
            },
            "valueMap": {
              "get": function () { return this.value_map; },
              "set": function (value) { this.value_map = value; }
            }
          },
          "static": {}
        },
        "InstallConfigParamList": {
          "prototype": {},
          "static": {}
        },
        "InstallScript": {
          "prototype": {
            "addConfigParam": {
              "value": function () { return this.add_config_param.apply(this, arguments); }
            },
            "generateAsync": {
              "value": function () { return this.generate_async.apply(this, arguments); }
            },
            "generateCommandLine": {
              "value": function () { return this.generate_command_line.apply(this, arguments); }
            },
            "generateCommandLineForMedia": {
              "value": function () { return this.generate_command_line_for_media.apply(this, arguments); }
            },
            "generateFinish": {
              "value": function () { return this.generate_finish.apply(this, arguments); }
            },
            "generateForMedia": {
              "value": function () { return this.generate_for_media.apply(this, arguments); }
            },
            "generateForMediaAsync": {
              "value": function () { return this.generate_for_media_async.apply(this, arguments); }
            },
            "generateForMediaFinish": {
              "value": function () { return this.generate_for_media_finish.apply(this, arguments); }
            },
            "generateOutput": {
              "value": function () { return this.generate_output.apply(this, arguments); }
            },
            "generateOutputAsync": {
              "value": function () { return this.generate_output_async.apply(this, arguments); }
            },
            "generateOutputFinish": {
              "value": function () { return this.generate_output_finish.apply(this, arguments); }
            },
            "generateOutputForMedia": {
              "value": function () { return this.generate_output_for_media.apply(this, arguments); }
            },
            "generateOutputForMediaAsync": {
              "value": function () { return this.generate_output_for_media_async.apply(this, arguments); }
            },
            "generateOutputForMediaFinish": {
              "value": function () { return this.generate_output_for_media_finish.apply(this, arguments); }
            },
            "getAvatarFormat": {
              "value": function () { return this.get_avatar_format.apply(this, arguments); }
            },
            "getCanPostInstallDrivers": {
              "value": function () { return this.get_can_post_install_drivers.apply(this, arguments); }
            },
            "getCanPreInstallDrivers": {
              "value": function () { return this.get_can_pre_install_drivers.apply(this, arguments); }
            },
            "getConfigParam": {
              "value": function () { return this.get_config_param.apply(this, arguments); }
            },
            "getConfigParamList": {
              "value": function () { return this.get_config_param_list.apply(this, arguments); }
            },
            "getConfigParams": {
              "value": function () { return this.get_config_params.apply(this, arguments); }
            },
            "getExpectedFilename": {
              "value": function () { return this.get_expected_filename.apply(this, arguments); }
            },
            "getInjectionMethods": {
              "value": function () { return this.get_injection_methods.apply(this, arguments); }
            },
            "getNeedsInternet": {
              "value": function () { return this.get_needs_internet.apply(this, arguments); }
            },
            "getOutputFilename": {
              "value": function () { return this.get_output_filename.apply(this, arguments); }
            },
            "getOutputPrefix": {
              "value": function () { return this.get_output_prefix.apply(this, arguments); }
            },
            "getPathFormat": {
              "value": function () { return this.get_path_format.apply(this, arguments); }
            },
            "getPostInstallDriversSigningReq": {
              "value": function () { return this.get_post_install_drivers_signing_req.apply(this, arguments); }
            },
            "getPreInstallDriversSigningReq": {
              "value": function () { return this.get_pre_install_drivers_signing_req.apply(this, arguments); }
            },
            "getProductKeyFormat": {
              "value": function () { return this.get_product_key_format.apply(this, arguments); }
            },
            "getProfile": {
              "value": function () { return this.get_profile.apply(this, arguments); }
            },
            "getTemplateData": {
              "value": function () { return this.get_template_data.apply(this, arguments); }
            },
            "getTemplateUri": {
              "value": function () { return this.get_template_uri.apply(this, arguments); }
            },
            "hasConfigParam": {
              "value": function () { return this.has_config_param.apply(this, arguments); }
            },
            "hasConfigParamName": {
              "value": function () { return this.has_config_param_name.apply(this, arguments); }
            },
            "setAvatarFormat": {
              "value": function () { return this.set_avatar_format.apply(this, arguments); }
            },
            "setOutputPrefix": {
              "value": function () { return this.set_output_prefix.apply(this, arguments); }
            },
            "avatarFormat": {
              "get": function () { return this.avatar_format; },
              "set": function (value) { this.avatar_format = value; }
            },
            "pathFormat": {
              "get": function () { return this.path_format; },
              "set": function (value) { this.path_format = value; }
            },
            "productKeyFormat": {
              "get": function () { return this.product_key_format; },
              "set": function (value) { this.product_key_format = value; }
            },
            "templateData": {
              "get": function () { return this.template_data; },
              "set": function (value) { this.template_data = value; }
            },
            "templateUri": {
              "get": function () { return this.template_uri; },
              "set": function (value) { this.template_uri = value; }
            }
          },
          "static": {}
        },
        "InstallScriptList": {
          "prototype": {
            "newCopy": {
              "value": function () { return this.new_copy.apply(this, arguments); }
            },
            "newFiltered": {
              "value": function () { return this.new_filtered.apply(this, arguments); }
            },
            "newIntersection": {
              "value": function () { return this.new_intersection.apply(this, arguments); }
            },
            "newUnion": {
              "value": function () { return this.new_union.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "List": {
          "prototype": {
            "addAll": {
              "value": function () { return this.add_all.apply(this, arguments); }
            },
            "addFiltered": {
              "value": function () { return this.add_filtered.apply(this, arguments); }
            },
            "addIntersection": {
              "value": function () { return this.add_intersection.apply(this, arguments); }
            },
            "addUnion": {
              "value": function () { return this.add_union.apply(this, arguments); }
            },
            "findById": {
              "value": function () { return this.find_by_id.apply(this, arguments); }
            },
            "getElementType": {
              "value": function () { return this.get_element_type.apply(this, arguments); }
            },
            "getElements": {
              "value": function () { return this.get_elements.apply(this, arguments); }
            },
            "getLength": {
              "value": function () { return this.get_length.apply(this, arguments); }
            },
            "getNth": {
              "value": function () { return this.get_nth.apply(this, arguments); }
            },
            "newCopy": {
              "value": function () { return this.new_copy.apply(this, arguments); }
            },
            "newFiltered": {
              "value": function () { return this.new_filtered.apply(this, arguments); }
            },
            "newIntersection": {
              "value": function () { return this.new_intersection.apply(this, arguments); }
            },
            "newUnion": {
              "value": function () { return this.new_union.apply(this, arguments); }
            },
            "elementType": {
              "get": function () { return this.element_type; },
              "set": function (value) { this.element_type = value; }
            }
          },
          "static": {}
        },
        "Loader": {
          "prototype": {
            "getDb": {
              "value": function () { return this.get_db.apply(this, arguments); }
            },
            "processDefaultPath": {
              "value": function () { return this.process_default_path.apply(this, arguments); }
            },
            "processLocalPath": {
              "value": function () { return this.process_local_path.apply(this, arguments); }
            },
            "processPath": {
              "value": function () { return this.process_path.apply(this, arguments); }
            },
            "processSystemPath": {
              "value": function () { return this.process_system_path.apply(this, arguments); }
            },
            "processUri": {
              "value": function () { return this.process_uri.apply(this, arguments); }
            },
            "processUserPath": {
              "value": function () { return this.process_user_path.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Media": {
          "prototype": {
            "getApplicationId": {
              "value": function () { return this.get_application_id.apply(this, arguments); }
            },
            "getArchitecture": {
              "value": function () { return this.get_architecture.apply(this, arguments); }
            },
            "getInitrdPath": {
              "value": function () { return this.get_initrd_path.apply(this, arguments); }
            },
            "getInstaller": {
              "value": function () { return this.get_installer.apply(this, arguments); }
            },
            "getInstallerReboots": {
              "value": function () { return this.get_installer_reboots.apply(this, arguments); }
            },
            "getKernelPath": {
              "value": function () { return this.get_kernel_path.apply(this, arguments); }
            },
            "getLanguages": {
              "value": function () { return this.get_languages.apply(this, arguments); }
            },
            "getLive": {
              "value": function () { return this.get_live.apply(this, arguments); }
            },
            "getOs": {
              "value": function () { return this.get_os.apply(this, arguments); }
            },
            "getOsVariants": {
              "value": function () { return this.get_os_variants.apply(this, arguments); }
            },
            "getPublisherId": {
              "value": function () { return this.get_publisher_id.apply(this, arguments); }
            },
            "getSystemId": {
              "value": function () { return this.get_system_id.apply(this, arguments); }
            },
            "getUrl": {
              "value": function () { return this.get_url.apply(this, arguments); }
            },
            "getVolumeId": {
              "value": function () { return this.get_volume_id.apply(this, arguments); }
            },
            "getVolumeSize": {
              "value": function () { return this.get_volume_size.apply(this, arguments); }
            },
            "setLanguages": {
              "value": function () { return this.set_languages.apply(this, arguments); }
            },
            "setOs": {
              "value": function () { return this.set_os.apply(this, arguments); }
            },
            "applicationId": {
              "get": function () { return this.application_id; },
              "set": function (value) { this.application_id = value; }
            },
            "initrdPath": {
              "get": function () { return this.initrd_path; },
              "set": function (value) { this.initrd_path = value; }
            },
            "installerReboots": {
              "get": function () { return this.installer_reboots; },
              "set": function (value) { this.installer_reboots = value; }
            },
            "kernelPath": {
              "get": function () { return this.kernel_path; },
              "set": function (value) { this.kernel_path = value; }
            },
            "publisherId": {
              "get": function () { return this.publisher_id; },
              "set": function (value) { this.publisher_id = value; }
            },
            "systemId": {
              "get": function () { return this.system_id; },
              "set": function (value) { this.system_id = value; }
            },
            "volumeId": {
              "get": function () { return this.volume_id; },
              "set": function (value) { this.volume_id = value; }
            },
            "volumeSize": {
              "get": function () { return this.volume_size; },
              "set": function (value) { this.volume_size = value; }
            }
          },
          "static": {
            "createFromLocation": {
              "value": function () { return this.create_from_location.apply(this, arguments); }
            },
            "createFromLocationAsync": {
              "value": function () { return this.create_from_location_async.apply(this, arguments); }
            },
            "createFromLocationFinish": {
              "value": function () { return this.create_from_location_finish.apply(this, arguments); }
            }
          }
        },
        "MediaList": {
          "prototype": {
            "newCopy": {
              "value": function () { return this.new_copy.apply(this, arguments); }
            },
            "newFiltered": {
              "value": function () { return this.new_filtered.apply(this, arguments); }
            },
            "newIntersection": {
              "value": function () { return this.new_intersection.apply(this, arguments); }
            },
            "newUnion": {
              "value": function () { return this.new_union.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Os": {
          "prototype": {
            "addDevice": {
              "value": function () { return this.add_device.apply(this, arguments); }
            },
            "addDeviceDriver": {
              "value": function () { return this.add_device_driver.apply(this, arguments); }
            },
            "addInstallScript": {
              "value": function () { return this.add_install_script.apply(this, arguments); }
            },
            "addMedia": {
              "value": function () { return this.add_media.apply(this, arguments); }
            },
            "addMinimumResources": {
              "value": function () { return this.add_minimum_resources.apply(this, arguments); }
            },
            "addRecommendedResources": {
              "value": function () { return this.add_recommended_resources.apply(this, arguments); }
            },
            "addTree": {
              "value": function () { return this.add_tree.apply(this, arguments); }
            },
            "addVariant": {
              "value": function () { return this.add_variant.apply(this, arguments); }
            },
            "findInstallScript": {
              "value": function () { return this.find_install_script.apply(this, arguments); }
            },
            "getAllDevices": {
              "value": function () { return this.get_all_devices.apply(this, arguments); }
            },
            "getDeviceDrivers": {
              "value": function () { return this.get_device_drivers.apply(this, arguments); }
            },
            "getDeviceLinks": {
              "value": function () { return this.get_device_links.apply(this, arguments); }
            },
            "getDevices": {
              "value": function () { return this.get_devices.apply(this, arguments); }
            },
            "getDevicesByProperty": {
              "value": function () { return this.get_devices_by_property.apply(this, arguments); }
            },
            "getDistro": {
              "value": function () { return this.get_distro.apply(this, arguments); }
            },
            "getFamily": {
              "value": function () { return this.get_family.apply(this, arguments); }
            },
            "getInstallScriptList": {
              "value": function () { return this.get_install_script_list.apply(this, arguments); }
            },
            "getMediaList": {
              "value": function () { return this.get_media_list.apply(this, arguments); }
            },
            "getMinimumResources": {
              "value": function () { return this.get_minimum_resources.apply(this, arguments); }
            },
            "getRecommendedResources": {
              "value": function () { return this.get_recommended_resources.apply(this, arguments); }
            },
            "getReleaseStatus": {
              "value": function () { return this.get_release_status.apply(this, arguments); }
            },
            "getTreeList": {
              "value": function () { return this.get_tree_list.apply(this, arguments); }
            },
            "getVariantList": {
              "value": function () { return this.get_variant_list.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "OsList": {
          "prototype": {
            "newCopy": {
              "value": function () { return this.new_copy.apply(this, arguments); }
            },
            "newFiltered": {
              "value": function () { return this.new_filtered.apply(this, arguments); }
            },
            "newIntersection": {
              "value": function () { return this.new_intersection.apply(this, arguments); }
            },
            "newUnion": {
              "value": function () { return this.new_union.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "OsVariant": {
          "prototype": {
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "OsVariantList": {
          "prototype": {},
          "static": {}
        },
        "Platform": {
          "prototype": {
            "addDevice": {
              "value": function () { return this.add_device.apply(this, arguments); }
            },
            "getAllDevices": {
              "value": function () { return this.get_all_devices.apply(this, arguments); }
            },
            "getDeviceLinks": {
              "value": function () { return this.get_device_links.apply(this, arguments); }
            },
            "getDevices": {
              "value": function () { return this.get_devices.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "PlatformList": {
          "prototype": {
            "newCopy": {
              "value": function () { return this.new_copy.apply(this, arguments); }
            },
            "newFiltered": {
              "value": function () { return this.new_filtered.apply(this, arguments); }
            },
            "newIntersection": {
              "value": function () { return this.new_intersection.apply(this, arguments); }
            },
            "newUnion": {
              "value": function () { return this.new_union.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Product": {
          "prototype": {
            "addRelated": {
              "value": function () { return this.add_related.apply(this, arguments); }
            },
            "foreachRelated": {
              "value": function () { return this.foreach_related.apply(this, arguments); }
            },
            "getCodename": {
              "value": function () { return this.get_codename.apply(this, arguments); }
            },
            "getEolDate": {
              "value": function () { return this.get_eol_date.apply(this, arguments); }
            },
            "getEolDateString": {
              "value": function () { return this.get_eol_date_string.apply(this, arguments); }
            },
            "getLogo": {
              "value": function () { return this.get_logo.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getRelated": {
              "value": function () { return this.get_related.apply(this, arguments); }
            },
            "getReleaseDate": {
              "value": function () { return this.get_release_date.apply(this, arguments); }
            },
            "getReleaseDateString": {
              "value": function () { return this.get_release_date_string.apply(this, arguments); }
            },
            "getShortId": {
              "value": function () { return this.get_short_id.apply(this, arguments); }
            },
            "getVendor": {
              "value": function () { return this.get_vendor.apply(this, arguments); }
            },
            "getVersion": {
              "value": function () { return this.get_version.apply(this, arguments); }
            },
            "shortId": {
              "get": function () { return this.short_id; },
              "set": function (value) { this.short_id = value; }
            }
          },
          "static": {}
        },
        "ProductFilter": {
          "prototype": {
            "addProductConstraint": {
              "value": function () { return this.add_product_constraint.apply(this, arguments); }
            },
            "addSupportDateConstraint": {
              "value": function () { return this.add_support_date_constraint.apply(this, arguments); }
            },
            "clearProductConstraint": {
              "value": function () { return this.clear_product_constraint.apply(this, arguments); }
            },
            "clearProductConstraints": {
              "value": function () { return this.clear_product_constraints.apply(this, arguments); }
            },
            "getProductConstraintValues": {
              "value": function () { return this.get_product_constraint_values.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "ProductList": {
          "prototype": {
            "newCopy": {
              "value": function () { return this.new_copy.apply(this, arguments); }
            },
            "newFiltered": {
              "value": function () { return this.new_filtered.apply(this, arguments); }
            },
            "newIntersection": {
              "value": function () { return this.new_intersection.apply(this, arguments); }
            },
            "newUnion": {
              "value": function () { return this.new_union.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Resources": {
          "prototype": {
            "getArchitecture": {
              "value": function () { return this.get_architecture.apply(this, arguments); }
            },
            "getCpu": {
              "value": function () { return this.get_cpu.apply(this, arguments); }
            },
            "getNCpus": {
              "value": function () { return this.get_n_cpus.apply(this, arguments); }
            },
            "getRam": {
              "value": function () { return this.get_ram.apply(this, arguments); }
            },
            "getStorage": {
              "value": function () { return this.get_storage.apply(this, arguments); }
            },
            "setCpu": {
              "value": function () { return this.set_cpu.apply(this, arguments); }
            },
            "setNCpus": {
              "value": function () { return this.set_n_cpus.apply(this, arguments); }
            },
            "setRam": {
              "value": function () { return this.set_ram.apply(this, arguments); }
            },
            "setStorage": {
              "value": function () { return this.set_storage.apply(this, arguments); }
            },
            "nCpus": {
              "get": function () { return this.n_cpus; },
              "set": function (value) { this.n_cpus = value; }
            }
          },
          "static": {}
        },
        "ResourcesList": {
          "prototype": {
            "newCopy": {
              "value": function () { return this.new_copy.apply(this, arguments); }
            },
            "newFiltered": {
              "value": function () { return this.new_filtered.apply(this, arguments); }
            },
            "newIntersection": {
              "value": function () { return this.new_intersection.apply(this, arguments); }
            },
            "newUnion": {
              "value": function () { return this.new_union.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Tree": {
          "prototype": {
            "getArchitecture": {
              "value": function () { return this.get_architecture.apply(this, arguments); }
            },
            "getBootIsoPath": {
              "value": function () { return this.get_boot_iso_path.apply(this, arguments); }
            },
            "getInitrdPath": {
              "value": function () { return this.get_initrd_path.apply(this, arguments); }
            },
            "getKernelPath": {
              "value": function () { return this.get_kernel_path.apply(this, arguments); }
            },
            "getTreeinfoArch": {
              "value": function () { return this.get_treeinfo_arch.apply(this, arguments); }
            },
            "getTreeinfoFamily": {
              "value": function () { return this.get_treeinfo_family.apply(this, arguments); }
            },
            "getTreeinfoVariant": {
              "value": function () { return this.get_treeinfo_variant.apply(this, arguments); }
            },
            "getTreeinfoVersion": {
              "value": function () { return this.get_treeinfo_version.apply(this, arguments); }
            },
            "getUrl": {
              "value": function () { return this.get_url.apply(this, arguments); }
            },
            "applicationId": {
              "get": function () { return this.application_id; },
              "set": function (value) { this.application_id = value; }
            },
            "bootIsoPath": {
              "get": function () { return this.boot_iso_path; },
              "set": function (value) { this.boot_iso_path = value; }
            },
            "initrdPath": {
              "get": function () { return this.initrd_path; },
              "set": function (value) { this.initrd_path = value; }
            },
            "kernelPath": {
              "get": function () { return this.kernel_path; },
              "set": function (value) { this.kernel_path = value; }
            },
            "publisherId": {
              "get": function () { return this.publisher_id; },
              "set": function (value) { this.publisher_id = value; }
            },
            "systemId": {
              "get": function () { return this.system_id; },
              "set": function (value) { this.system_id = value; }
            },
            "volumeId": {
              "get": function () { return this.volume_id; },
              "set": function (value) { this.volume_id = value; }
            }
          },
          "static": {
            "createFromLocation": {
              "value": function () { return this.create_from_location.apply(this, arguments); }
            },
            "createFromLocationAsync": {
              "value": function () { return this.create_from_location_async.apply(this, arguments); }
            },
            "createFromLocationFinish": {
              "value": function () { return this.create_from_location_finish.apply(this, arguments); }
            },
            "errorQuark": {
              "value": function () { return this.error_quark.apply(this, arguments); }
            }
          }
        },
        "TreeList": {
          "prototype": {
            "newCopy": {
              "value": function () { return this.new_copy.apply(this, arguments); }
            },
            "newFiltered": {
              "value": function () { return this.new_filtered.apply(this, arguments); }
            },
            "newIntersection": {
              "value": function () { return this.new_intersection.apply(this, arguments); }
            },
            "newUnion": {
              "value": function () { return this.new_union.apply(this, arguments); }
            }
          },
          "static": {}
        }
      },
      "static": {
        "mediaErrorQuark": {
          "value": function () { return this.media_error_quark.apply(this, arguments); }
        }
      }
    },
    "MediaArt": {
      "class": {
        "Process": {
          "prototype": {
            "bufferAsync": {
              "value": function () { return this.buffer_async.apply(this, arguments); }
            },
            "bufferFinish": {
              "value": function () { return this.buffer_finish.apply(this, arguments); }
            },
            "fileAsync": {
              "value": function () { return this.file_async.apply(this, arguments); }
            },
            "fileFinish": {
              "value": function () { return this.file_finish.apply(this, arguments); }
            },
            "uriAsync": {
              "value": function () { return this.uri_async.apply(this, arguments); }
            },
            "uriFinish": {
              "value": function () { return this.uri_finish.apply(this, arguments); }
            }
          },
          "static": {}
        }
      },
      "static": {
        "bufferToJpeg": {
          "value": function () { return this.buffer_to_jpeg.apply(this, arguments); }
        },
        "errorQuark": {
          "value": function () { return this.error_quark.apply(this, arguments); }
        },
        "fileToJpeg": {
          "value": function () { return this.file_to_jpeg.apply(this, arguments); }
        },
        "getFile": {
          "value": function () { return this.get_file.apply(this, arguments); }
        },
        "getPath": {
          "value": function () { return this.get_path.apply(this, arguments); }
        },
        "pluginInit": {
          "value": function () { return this.plugin_init.apply(this, arguments); }
        },
        "pluginShutdown": {
          "value": function () { return this.plugin_shutdown.apply(this, arguments); }
        },
        "removeAsync": {
          "value": function () { return this.remove_async.apply(this, arguments); }
        },
        "removeFinish": {
          "value": function () { return this.remove_finish.apply(this, arguments); }
        },
        "stripInvalidEntities": {
          "value": function () { return this.strip_invalid_entities.apply(this, arguments); }
        }
      }
    },
    "ModemManager": {
      "class": {
        "Bearer": {
          "prototype": {
            "connectFinish": {
              "value": function () { return this.connect_finish.apply(this, arguments); }
            },
            "connectSync": {
              "value": function () { return this.connect_sync.apply(this, arguments); }
            },
            "disconnectFinish": {
              "value": function () { return this.disconnect_finish.apply(this, arguments); }
            },
            "disconnectSync": {
              "value": function () { return this.disconnect_sync.apply(this, arguments); }
            },
            "dupInterface": {
              "value": function () { return this.dup_interface.apply(this, arguments); }
            },
            "dupPath": {
              "value": function () { return this.dup_path.apply(this, arguments); }
            },
            "getConnected": {
              "value": function () { return this.get_connected.apply(this, arguments); }
            },
            "getInterface": {
              "value": function () { return this.get_interface.apply(this, arguments); }
            },
            "getIpTimeout": {
              "value": function () { return this.get_ip_timeout.apply(this, arguments); }
            },
            "getIpv4Config": {
              "value": function () { return this.get_ipv4_config.apply(this, arguments); }
            },
            "getIpv6Config": {
              "value": function () { return this.get_ipv6_config.apply(this, arguments); }
            },
            "getPath": {
              "value": function () { return this.get_path.apply(this, arguments); }
            },
            "getProperties": {
              "value": function () { return this.get_properties.apply(this, arguments); }
            },
            "getSuspended": {
              "value": function () { return this.get_suspended.apply(this, arguments); }
            },
            "peekIpv4Config": {
              "value": function () { return this.peek_ipv4_config.apply(this, arguments); }
            },
            "peekIpv6Config": {
              "value": function () { return this.peek_ipv6_config.apply(this, arguments); }
            },
            "peekProperties": {
              "value": function () { return this.peek_properties.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "BearerIpConfig": {
          "prototype": {
            "getAddress": {
              "value": function () { return this.get_address.apply(this, arguments); }
            },
            "getDictionary": {
              "value": function () { return this.get_dictionary.apply(this, arguments); }
            },
            "getDns": {
              "value": function () { return this.get_dns.apply(this, arguments); }
            },
            "getGateway": {
              "value": function () { return this.get_gateway.apply(this, arguments); }
            },
            "getMethod": {
              "value": function () { return this.get_method.apply(this, arguments); }
            },
            "getMtu": {
              "value": function () { return this.get_mtu.apply(this, arguments); }
            },
            "getPrefix": {
              "value": function () { return this.get_prefix.apply(this, arguments); }
            },
            "setAddress": {
              "value": function () { return this.set_address.apply(this, arguments); }
            },
            "setDns": {
              "value": function () { return this.set_dns.apply(this, arguments); }
            },
            "setGateway": {
              "value": function () { return this.set_gateway.apply(this, arguments); }
            },
            "setMethod": {
              "value": function () { return this.set_method.apply(this, arguments); }
            },
            "setMtu": {
              "value": function () { return this.set_mtu.apply(this, arguments); }
            },
            "setPrefix": {
              "value": function () { return this.set_prefix.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "BearerProperties": {
          "prototype": {
            "consumeString": {
              "value": function () { return this.consume_string.apply(this, arguments); }
            },
            "consumeVariant": {
              "value": function () { return this.consume_variant.apply(this, arguments); }
            },
            "getAllowRoaming": {
              "value": function () { return this.get_allow_roaming.apply(this, arguments); }
            },
            "getAllowedAuth": {
              "value": function () { return this.get_allowed_auth.apply(this, arguments); }
            },
            "getApn": {
              "value": function () { return this.get_apn.apply(this, arguments); }
            },
            "getDictionary": {
              "value": function () { return this.get_dictionary.apply(this, arguments); }
            },
            "getIpType": {
              "value": function () { return this.get_ip_type.apply(this, arguments); }
            },
            "getNumber": {
              "value": function () { return this.get_number.apply(this, arguments); }
            },
            "getPassword": {
              "value": function () { return this.get_password.apply(this, arguments); }
            },
            "getRmProtocol": {
              "value": function () { return this.get_rm_protocol.apply(this, arguments); }
            },
            "getUser": {
              "value": function () { return this.get_user.apply(this, arguments); }
            },
            "setAllowRoaming": {
              "value": function () { return this.set_allow_roaming.apply(this, arguments); }
            },
            "setAllowedAuth": {
              "value": function () { return this.set_allowed_auth.apply(this, arguments); }
            },
            "setApn": {
              "value": function () { return this.set_apn.apply(this, arguments); }
            },
            "setIpType": {
              "value": function () { return this.set_ip_type.apply(this, arguments); }
            },
            "setNumber": {
              "value": function () { return this.set_number.apply(this, arguments); }
            },
            "setPassword": {
              "value": function () { return this.set_password.apply(this, arguments); }
            },
            "setRmProtocol": {
              "value": function () { return this.set_rm_protocol.apply(this, arguments); }
            },
            "setUser": {
              "value": function () { return this.set_user.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "CdmaManualActivationProperties": {
          "prototype": {
            "getDictionary": {
              "value": function () { return this.get_dictionary.apply(this, arguments); }
            },
            "getMdn": {
              "value": function () { return this.get_mdn.apply(this, arguments); }
            },
            "getMin": {
              "value": function () { return this.get_min.apply(this, arguments); }
            },
            "getMnAaaKey": {
              "value": function () { return this.get_mn_aaa_key.apply(this, arguments); }
            },
            "getMnHaKey": {
              "value": function () { return this.get_mn_ha_key.apply(this, arguments); }
            },
            "getPrl": {
              "value": function () { return this.get_prl.apply(this, arguments); }
            },
            "getPrlBytearray": {
              "value": function () { return this.get_prl_bytearray.apply(this, arguments); }
            },
            "getSid": {
              "value": function () { return this.get_sid.apply(this, arguments); }
            },
            "getSpc": {
              "value": function () { return this.get_spc.apply(this, arguments); }
            },
            "peekPrlBytearray": {
              "value": function () { return this.peek_prl_bytearray.apply(this, arguments); }
            },
            "setMdn": {
              "value": function () { return this.set_mdn.apply(this, arguments); }
            },
            "setMin": {
              "value": function () { return this.set_min.apply(this, arguments); }
            },
            "setMnAaaKey": {
              "value": function () { return this.set_mn_aaa_key.apply(this, arguments); }
            },
            "setMnHaKey": {
              "value": function () { return this.set_mn_ha_key.apply(this, arguments); }
            },
            "setPrl": {
              "value": function () { return this.set_prl.apply(this, arguments); }
            },
            "setPrlBytearray": {
              "value": function () { return this.set_prl_bytearray.apply(this, arguments); }
            },
            "setSid": {
              "value": function () { return this.set_sid.apply(this, arguments); }
            },
            "setSpc": {
              "value": function () { return this.set_spc.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "FirmwareProperties": {
          "prototype": {
            "getDictionary": {
              "value": function () { return this.get_dictionary.apply(this, arguments); }
            },
            "getGobiBootVersion": {
              "value": function () { return this.get_gobi_boot_version.apply(this, arguments); }
            },
            "getGobiModemUniqueId": {
              "value": function () { return this.get_gobi_modem_unique_id.apply(this, arguments); }
            },
            "getGobiPriInfo": {
              "value": function () { return this.get_gobi_pri_info.apply(this, arguments); }
            },
            "getGobiPriUniqueId": {
              "value": function () { return this.get_gobi_pri_unique_id.apply(this, arguments); }
            },
            "getGobiPriVersion": {
              "value": function () { return this.get_gobi_pri_version.apply(this, arguments); }
            },
            "getImageType": {
              "value": function () { return this.get_image_type.apply(this, arguments); }
            },
            "getUniqueId": {
              "value": function () { return this.get_unique_id.apply(this, arguments); }
            },
            "setGobiBootVersion": {
              "value": function () { return this.set_gobi_boot_version.apply(this, arguments); }
            },
            "setGobiModemUniqueId": {
              "value": function () { return this.set_gobi_modem_unique_id.apply(this, arguments); }
            },
            "setGobiPriInfo": {
              "value": function () { return this.set_gobi_pri_info.apply(this, arguments); }
            },
            "setGobiPriUniqueId": {
              "value": function () { return this.set_gobi_pri_unique_id.apply(this, arguments); }
            },
            "setGobiPriVersion": {
              "value": function () { return this.set_gobi_pri_version.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "GdbusBearerProxy": {
          "prototype": {},
          "static": {
            "newForBus": {
              "value": function () { return this.new_for_bus.apply(this, arguments); }
            }
          }
        },
        "GdbusBearerSkeleton": {
          "prototype": {},
          "static": {}
        },
        "GdbusModem3gppProxy": {
          "prototype": {},
          "static": {
            "newForBus": {
              "value": function () { return this.new_for_bus.apply(this, arguments); }
            }
          }
        },
        "GdbusModem3gppSkeleton": {
          "prototype": {},
          "static": {}
        },
        "GdbusModem3gppUssdProxy": {
          "prototype": {},
          "static": {
            "newForBus": {
              "value": function () { return this.new_for_bus.apply(this, arguments); }
            }
          }
        },
        "GdbusModem3gppUssdSkeleton": {
          "prototype": {},
          "static": {}
        },
        "GdbusModemCdmaProxy": {
          "prototype": {},
          "static": {
            "newForBus": {
              "value": function () { return this.new_for_bus.apply(this, arguments); }
            }
          }
        },
        "GdbusModemCdmaSkeleton": {
          "prototype": {},
          "static": {}
        },
        "GdbusModemFirmwareProxy": {
          "prototype": {},
          "static": {
            "newForBus": {
              "value": function () { return this.new_for_bus.apply(this, arguments); }
            }
          }
        },
        "GdbusModemFirmwareSkeleton": {
          "prototype": {},
          "static": {}
        },
        "GdbusModemLocationProxy": {
          "prototype": {},
          "static": {
            "newForBus": {
              "value": function () { return this.new_for_bus.apply(this, arguments); }
            }
          }
        },
        "GdbusModemLocationSkeleton": {
          "prototype": {},
          "static": {}
        },
        "GdbusModemMessagingProxy": {
          "prototype": {},
          "static": {
            "newForBus": {
              "value": function () { return this.new_for_bus.apply(this, arguments); }
            }
          }
        },
        "GdbusModemMessagingSkeleton": {
          "prototype": {},
          "static": {}
        },
        "GdbusModemOmaProxy": {
          "prototype": {},
          "static": {
            "newForBus": {
              "value": function () { return this.new_for_bus.apply(this, arguments); }
            }
          }
        },
        "GdbusModemOmaSkeleton": {
          "prototype": {},
          "static": {}
        },
        "GdbusModemProxy": {
          "prototype": {},
          "static": {
            "newForBus": {
              "value": function () { return this.new_for_bus.apply(this, arguments); }
            }
          }
        },
        "GdbusModemSignalProxy": {
          "prototype": {},
          "static": {
            "newForBus": {
              "value": function () { return this.new_for_bus.apply(this, arguments); }
            }
          }
        },
        "GdbusModemSignalSkeleton": {
          "prototype": {},
          "static": {}
        },
        "GdbusModemSimpleProxy": {
          "prototype": {},
          "static": {
            "newForBus": {
              "value": function () { return this.new_for_bus.apply(this, arguments); }
            }
          }
        },
        "GdbusModemSimpleSkeleton": {
          "prototype": {},
          "static": {}
        },
        "GdbusModemSkeleton": {
          "prototype": {},
          "static": {}
        },
        "GdbusModemTimeProxy": {
          "prototype": {},
          "static": {
            "newForBus": {
              "value": function () { return this.new_for_bus.apply(this, arguments); }
            }
          }
        },
        "GdbusModemTimeSkeleton": {
          "prototype": {},
          "static": {}
        },
        "GdbusObjectManagerClient": {
          "prototype": {},
          "static": {
            "getProxyType": {
              "value": function () { return this.get_proxy_type.apply(this, arguments); }
            },
            "newForBus": {
              "value": function () { return this.new_for_bus.apply(this, arguments); }
            }
          }
        },
        "GdbusObjectProxy": {
          "prototype": {},
          "static": {}
        },
        "GdbusObjectSkeleton": {
          "prototype": {
            "setModem": {
              "value": function () { return this.set_modem.apply(this, arguments); }
            },
            "setModem3gpp": {
              "value": function () { return this.set_modem3gpp.apply(this, arguments); }
            },
            "setModem3gppUssd": {
              "value": function () { return this.set_modem3gpp_ussd.apply(this, arguments); }
            },
            "setModemCdma": {
              "value": function () { return this.set_modem_cdma.apply(this, arguments); }
            },
            "setModemFirmware": {
              "value": function () { return this.set_modem_firmware.apply(this, arguments); }
            },
            "setModemLocation": {
              "value": function () { return this.set_modem_location.apply(this, arguments); }
            },
            "setModemMessaging": {
              "value": function () { return this.set_modem_messaging.apply(this, arguments); }
            },
            "setModemOma": {
              "value": function () { return this.set_modem_oma.apply(this, arguments); }
            },
            "setModemSignal": {
              "value": function () { return this.set_modem_signal.apply(this, arguments); }
            },
            "setModemSimple": {
              "value": function () { return this.set_modem_simple.apply(this, arguments); }
            },
            "setModemTime": {
              "value": function () { return this.set_modem_time.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "GdbusOrgFreedesktopModemManager1Proxy": {
          "prototype": {},
          "static": {
            "newForBus": {
              "value": function () { return this.new_for_bus.apply(this, arguments); }
            }
          }
        },
        "GdbusOrgFreedesktopModemManager1Skeleton": {
          "prototype": {},
          "static": {}
        },
        "GdbusSimProxy": {
          "prototype": {},
          "static": {
            "newForBus": {
              "value": function () { return this.new_for_bus.apply(this, arguments); }
            }
          }
        },
        "GdbusSimSkeleton": {
          "prototype": {},
          "static": {}
        },
        "GdbusSmsProxy": {
          "prototype": {},
          "static": {
            "newForBus": {
              "value": function () { return this.new_for_bus.apply(this, arguments); }
            }
          }
        },
        "GdbusSmsSkeleton": {
          "prototype": {},
          "static": {}
        },
        "Location3gpp": {
          "prototype": {
            "getCellId": {
              "value": function () { return this.get_cell_id.apply(this, arguments); }
            },
            "getLocationAreaCode": {
              "value": function () { return this.get_location_area_code.apply(this, arguments); }
            },
            "getMobileCountryCode": {
              "value": function () { return this.get_mobile_country_code.apply(this, arguments); }
            },
            "getMobileNetworkCode": {
              "value": function () { return this.get_mobile_network_code.apply(this, arguments); }
            },
            "getStringVariant": {
              "value": function () { return this.get_string_variant.apply(this, arguments); }
            },
            "setCellId": {
              "value": function () { return this.set_cell_id.apply(this, arguments); }
            },
            "setLocationAreaCode": {
              "value": function () { return this.set_location_area_code.apply(this, arguments); }
            },
            "setMobileCountryCode": {
              "value": function () { return this.set_mobile_country_code.apply(this, arguments); }
            },
            "setMobileNetworkCode": {
              "value": function () { return this.set_mobile_network_code.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "LocationCdmaBs": {
          "prototype": {
            "getDictionary": {
              "value": function () { return this.get_dictionary.apply(this, arguments); }
            },
            "getLatitude": {
              "value": function () { return this.get_latitude.apply(this, arguments); }
            },
            "getLongitude": {
              "value": function () { return this.get_longitude.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "LocationGpsNmea": {
          "prototype": {
            "addTrace": {
              "value": function () { return this.add_trace.apply(this, arguments); }
            },
            "buildFull": {
              "value": function () { return this.build_full.apply(this, arguments); }
            },
            "getStringVariant": {
              "value": function () { return this.get_string_variant.apply(this, arguments); }
            },
            "getTrace": {
              "value": function () { return this.get_trace.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "LocationGpsRaw": {
          "prototype": {
            "addTrace": {
              "value": function () { return this.add_trace.apply(this, arguments); }
            },
            "getAltitude": {
              "value": function () { return this.get_altitude.apply(this, arguments); }
            },
            "getDictionary": {
              "value": function () { return this.get_dictionary.apply(this, arguments); }
            },
            "getLatitude": {
              "value": function () { return this.get_latitude.apply(this, arguments); }
            },
            "getLongitude": {
              "value": function () { return this.get_longitude.apply(this, arguments); }
            },
            "getUtcTime": {
              "value": function () { return this.get_utc_time.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Manager": {
          "prototype": {
            "getProxy": {
              "value": function () { return this.get_proxy.apply(this, arguments); }
            },
            "peekProxy": {
              "value": function () { return this.peek_proxy.apply(this, arguments); }
            },
            "scanDevices": {
              "value": function () { return this.scan_devices.apply(this, arguments); }
            },
            "scanDevicesFinish": {
              "value": function () { return this.scan_devices_finish.apply(this, arguments); }
            },
            "scanDevicesSync": {
              "value": function () { return this.scan_devices_sync.apply(this, arguments); }
            },
            "setLogging": {
              "value": function () { return this.set_logging.apply(this, arguments); }
            },
            "setLoggingFinish": {
              "value": function () { return this.set_logging_finish.apply(this, arguments); }
            },
            "setLoggingSync": {
              "value": function () { return this.set_logging_sync.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Modem": {
          "prototype": {
            "commandFinish": {
              "value": function () { return this.command_finish.apply(this, arguments); }
            },
            "commandSync": {
              "value": function () { return this.command_sync.apply(this, arguments); }
            },
            "createBearer": {
              "value": function () { return this.create_bearer.apply(this, arguments); }
            },
            "createBearerFinish": {
              "value": function () { return this.create_bearer_finish.apply(this, arguments); }
            },
            "createBearerSync": {
              "value": function () { return this.create_bearer_sync.apply(this, arguments); }
            },
            "deleteBearer": {
              "value": function () { return this.delete_bearer.apply(this, arguments); }
            },
            "deleteBearerFinish": {
              "value": function () { return this.delete_bearer_finish.apply(this, arguments); }
            },
            "deleteBearerSync": {
              "value": function () { return this.delete_bearer_sync.apply(this, arguments); }
            },
            "disableFinish": {
              "value": function () { return this.disable_finish.apply(this, arguments); }
            },
            "disableSync": {
              "value": function () { return this.disable_sync.apply(this, arguments); }
            },
            "dupBearerPaths": {
              "value": function () { return this.dup_bearer_paths.apply(this, arguments); }
            },
            "dupDevice": {
              "value": function () { return this.dup_device.apply(this, arguments); }
            },
            "dupDeviceIdentifier": {
              "value": function () { return this.dup_device_identifier.apply(this, arguments); }
            },
            "dupDrivers": {
              "value": function () { return this.dup_drivers.apply(this, arguments); }
            },
            "dupEquipmentIdentifier": {
              "value": function () { return this.dup_equipment_identifier.apply(this, arguments); }
            },
            "dupManufacturer": {
              "value": function () { return this.dup_manufacturer.apply(this, arguments); }
            },
            "dupModel": {
              "value": function () { return this.dup_model.apply(this, arguments); }
            },
            "dupOwnNumbers": {
              "value": function () { return this.dup_own_numbers.apply(this, arguments); }
            },
            "dupPath": {
              "value": function () { return this.dup_path.apply(this, arguments); }
            },
            "dupPlugin": {
              "value": function () { return this.dup_plugin.apply(this, arguments); }
            },
            "dupPrimaryPort": {
              "value": function () { return this.dup_primary_port.apply(this, arguments); }
            },
            "dupRevision": {
              "value": function () { return this.dup_revision.apply(this, arguments); }
            },
            "dupSimPath": {
              "value": function () { return this.dup_sim_path.apply(this, arguments); }
            },
            "enableFinish": {
              "value": function () { return this.enable_finish.apply(this, arguments); }
            },
            "enableSync": {
              "value": function () { return this.enable_sync.apply(this, arguments); }
            },
            "factoryReset": {
              "value": function () { return this.factory_reset.apply(this, arguments); }
            },
            "factoryResetFinish": {
              "value": function () { return this.factory_reset_finish.apply(this, arguments); }
            },
            "factoryResetSync": {
              "value": function () { return this.factory_reset_sync.apply(this, arguments); }
            },
            "getAccessTechnologies": {
              "value": function () { return this.get_access_technologies.apply(this, arguments); }
            },
            "getBearerPaths": {
              "value": function () { return this.get_bearer_paths.apply(this, arguments); }
            },
            "getCurrentBands": {
              "value": function () { return this.get_current_bands.apply(this, arguments); }
            },
            "getCurrentCapabilities": {
              "value": function () { return this.get_current_capabilities.apply(this, arguments); }
            },
            "getCurrentModes": {
              "value": function () { return this.get_current_modes.apply(this, arguments); }
            },
            "getDevice": {
              "value": function () { return this.get_device.apply(this, arguments); }
            },
            "getDeviceIdentifier": {
              "value": function () { return this.get_device_identifier.apply(this, arguments); }
            },
            "getDrivers": {
              "value": function () { return this.get_drivers.apply(this, arguments); }
            },
            "getEquipmentIdentifier": {
              "value": function () { return this.get_equipment_identifier.apply(this, arguments); }
            },
            "getManufacturer": {
              "value": function () { return this.get_manufacturer.apply(this, arguments); }
            },
            "getMaxActiveBearers": {
              "value": function () { return this.get_max_active_bearers.apply(this, arguments); }
            },
            "getMaxBearers": {
              "value": function () { return this.get_max_bearers.apply(this, arguments); }
            },
            "getModel": {
              "value": function () { return this.get_model.apply(this, arguments); }
            },
            "getOwnNumbers": {
              "value": function () { return this.get_own_numbers.apply(this, arguments); }
            },
            "getPath": {
              "value": function () { return this.get_path.apply(this, arguments); }
            },
            "getPlugin": {
              "value": function () { return this.get_plugin.apply(this, arguments); }
            },
            "getPorts": {
              "value": function () { return this.get_ports.apply(this, arguments); }
            },
            "getPowerState": {
              "value": function () { return this.get_power_state.apply(this, arguments); }
            },
            "getPrimaryPort": {
              "value": function () { return this.get_primary_port.apply(this, arguments); }
            },
            "getRevision": {
              "value": function () { return this.get_revision.apply(this, arguments); }
            },
            "getSignalQuality": {
              "value": function () { return this.get_signal_quality.apply(this, arguments); }
            },
            "getSim": {
              "value": function () { return this.get_sim.apply(this, arguments); }
            },
            "getSimFinish": {
              "value": function () { return this.get_sim_finish.apply(this, arguments); }
            },
            "getSimPath": {
              "value": function () { return this.get_sim_path.apply(this, arguments); }
            },
            "getSimSync": {
              "value": function () { return this.get_sim_sync.apply(this, arguments); }
            },
            "getState": {
              "value": function () { return this.get_state.apply(this, arguments); }
            },
            "getStateFailedReason": {
              "value": function () { return this.get_state_failed_reason.apply(this, arguments); }
            },
            "getSupportedBands": {
              "value": function () { return this.get_supported_bands.apply(this, arguments); }
            },
            "getSupportedCapabilities": {
              "value": function () { return this.get_supported_capabilities.apply(this, arguments); }
            },
            "getSupportedIpFamilies": {
              "value": function () { return this.get_supported_ip_families.apply(this, arguments); }
            },
            "getSupportedModes": {
              "value": function () { return this.get_supported_modes.apply(this, arguments); }
            },
            "getUnlockRequired": {
              "value": function () { return this.get_unlock_required.apply(this, arguments); }
            },
            "getUnlockRetries": {
              "value": function () { return this.get_unlock_retries.apply(this, arguments); }
            },
            "listBearers": {
              "value": function () { return this.list_bearers.apply(this, arguments); }
            },
            "listBearersFinish": {
              "value": function () { return this.list_bearers_finish.apply(this, arguments); }
            },
            "listBearersSync": {
              "value": function () { return this.list_bearers_sync.apply(this, arguments); }
            },
            "peekCurrentBands": {
              "value": function () { return this.peek_current_bands.apply(this, arguments); }
            },
            "peekPorts": {
              "value": function () { return this.peek_ports.apply(this, arguments); }
            },
            "peekSupportedBands": {
              "value": function () { return this.peek_supported_bands.apply(this, arguments); }
            },
            "peekSupportedCapabilities": {
              "value": function () { return this.peek_supported_capabilities.apply(this, arguments); }
            },
            "peekSupportedModes": {
              "value": function () { return this.peek_supported_modes.apply(this, arguments); }
            },
            "peekUnlockRetries": {
              "value": function () { return this.peek_unlock_retries.apply(this, arguments); }
            },
            "resetFinish": {
              "value": function () { return this.reset_finish.apply(this, arguments); }
            },
            "resetSync": {
              "value": function () { return this.reset_sync.apply(this, arguments); }
            },
            "setCurrentBands": {
              "value": function () { return this.set_current_bands.apply(this, arguments); }
            },
            "setCurrentBandsFinish": {
              "value": function () { return this.set_current_bands_finish.apply(this, arguments); }
            },
            "setCurrentBandsSync": {
              "value": function () { return this.set_current_bands_sync.apply(this, arguments); }
            },
            "setCurrentCapabilities": {
              "value": function () { return this.set_current_capabilities.apply(this, arguments); }
            },
            "setCurrentCapabilitiesFinish": {
              "value": function () { return this.set_current_capabilities_finish.apply(this, arguments); }
            },
            "setCurrentCapabilitiesSync": {
              "value": function () { return this.set_current_capabilities_sync.apply(this, arguments); }
            },
            "setCurrentModes": {
              "value": function () { return this.set_current_modes.apply(this, arguments); }
            },
            "setCurrentModesFinish": {
              "value": function () { return this.set_current_modes_finish.apply(this, arguments); }
            },
            "setCurrentModesSync": {
              "value": function () { return this.set_current_modes_sync.apply(this, arguments); }
            },
            "setPowerState": {
              "value": function () { return this.set_power_state.apply(this, arguments); }
            },
            "setPowerStateFinish": {
              "value": function () { return this.set_power_state_finish.apply(this, arguments); }
            },
            "setPowerStateSync": {
              "value": function () { return this.set_power_state_sync.apply(this, arguments); }
            }
          },
          "static": {
            "getPendingNetworkInitiatedSessions": {
              "value": function () { return this.get_pending_network_initiated_sessions.apply(this, arguments); }
            },
            "peekPendingNetworkInitiatedSessions": {
              "value": function () { return this.peek_pending_network_initiated_sessions.apply(this, arguments); }
            }
          }
        },
        "Modem3gpp": {
          "prototype": {
            "dupImei": {
              "value": function () { return this.dup_imei.apply(this, arguments); }
            },
            "dupOperatorCode": {
              "value": function () { return this.dup_operator_code.apply(this, arguments); }
            },
            "dupOperatorName": {
              "value": function () { return this.dup_operator_name.apply(this, arguments); }
            },
            "dupPath": {
              "value": function () { return this.dup_path.apply(this, arguments); }
            },
            "getEnabledFacilityLocks": {
              "value": function () { return this.get_enabled_facility_locks.apply(this, arguments); }
            },
            "getImei": {
              "value": function () { return this.get_imei.apply(this, arguments); }
            },
            "getOperatorCode": {
              "value": function () { return this.get_operator_code.apply(this, arguments); }
            },
            "getOperatorName": {
              "value": function () { return this.get_operator_name.apply(this, arguments); }
            },
            "getPath": {
              "value": function () { return this.get_path.apply(this, arguments); }
            },
            "getRegistrationState": {
              "value": function () { return this.get_registration_state.apply(this, arguments); }
            },
            "getSubscriptionState": {
              "value": function () { return this.get_subscription_state.apply(this, arguments); }
            },
            "registerFinish": {
              "value": function () { return this.register_finish.apply(this, arguments); }
            },
            "registerSync": {
              "value": function () { return this.register_sync.apply(this, arguments); }
            },
            "scanFinish": {
              "value": function () { return this.scan_finish.apply(this, arguments); }
            },
            "scanSync": {
              "value": function () { return this.scan_sync.apply(this, arguments); }
            }
          },
          "static": {
            "networkFree": {
              "value": function () { return this.network_free.apply(this, arguments); }
            },
            "networkGetAccessTechnology": {
              "value": function () { return this.network_get_access_technology.apply(this, arguments); }
            },
            "networkGetAvailability": {
              "value": function () { return this.network_get_availability.apply(this, arguments); }
            },
            "networkGetOperatorCode": {
              "value": function () { return this.network_get_operator_code.apply(this, arguments); }
            },
            "networkGetOperatorLong": {
              "value": function () { return this.network_get_operator_long.apply(this, arguments); }
            },
            "networkGetOperatorShort": {
              "value": function () { return this.network_get_operator_short.apply(this, arguments); }
            }
          }
        },
        "Modem3gppUssd": {
          "prototype": {
            "cancelFinish": {
              "value": function () { return this.cancel_finish.apply(this, arguments); }
            },
            "cancelSync": {
              "value": function () { return this.cancel_sync.apply(this, arguments); }
            },
            "dupNetworkNotification": {
              "value": function () { return this.dup_network_notification.apply(this, arguments); }
            },
            "dupNetworkRequest": {
              "value": function () { return this.dup_network_request.apply(this, arguments); }
            },
            "dupPath": {
              "value": function () { return this.dup_path.apply(this, arguments); }
            },
            "getNetworkNotification": {
              "value": function () { return this.get_network_notification.apply(this, arguments); }
            },
            "getNetworkRequest": {
              "value": function () { return this.get_network_request.apply(this, arguments); }
            },
            "getPath": {
              "value": function () { return this.get_path.apply(this, arguments); }
            },
            "getState": {
              "value": function () { return this.get_state.apply(this, arguments); }
            },
            "initiateFinish": {
              "value": function () { return this.initiate_finish.apply(this, arguments); }
            },
            "initiateSync": {
              "value": function () { return this.initiate_sync.apply(this, arguments); }
            },
            "respondFinish": {
              "value": function () { return this.respond_finish.apply(this, arguments); }
            },
            "respondSync": {
              "value": function () { return this.respond_sync.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "ModemCdma": {
          "prototype": {
            "activateFinish": {
              "value": function () { return this.activate_finish.apply(this, arguments); }
            },
            "activateManual": {
              "value": function () { return this.activate_manual.apply(this, arguments); }
            },
            "activateManualFinish": {
              "value": function () { return this.activate_manual_finish.apply(this, arguments); }
            },
            "activateManualSync": {
              "value": function () { return this.activate_manual_sync.apply(this, arguments); }
            },
            "activateSync": {
              "value": function () { return this.activate_sync.apply(this, arguments); }
            },
            "dupEsn": {
              "value": function () { return this.dup_esn.apply(this, arguments); }
            },
            "dupMeid": {
              "value": function () { return this.dup_meid.apply(this, arguments); }
            },
            "dupPath": {
              "value": function () { return this.dup_path.apply(this, arguments); }
            },
            "getActivationState": {
              "value": function () { return this.get_activation_state.apply(this, arguments); }
            },
            "getCdma1xRegistrationState": {
              "value": function () { return this.get_cdma1x_registration_state.apply(this, arguments); }
            },
            "getEsn": {
              "value": function () { return this.get_esn.apply(this, arguments); }
            },
            "getEvdoRegistrationState": {
              "value": function () { return this.get_evdo_registration_state.apply(this, arguments); }
            },
            "getMeid": {
              "value": function () { return this.get_meid.apply(this, arguments); }
            },
            "getNid": {
              "value": function () { return this.get_nid.apply(this, arguments); }
            },
            "getPath": {
              "value": function () { return this.get_path.apply(this, arguments); }
            },
            "getSid": {
              "value": function () { return this.get_sid.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "ModemFirmware": {
          "prototype": {
            "dupPath": {
              "value": function () { return this.dup_path.apply(this, arguments); }
            },
            "getPath": {
              "value": function () { return this.get_path.apply(this, arguments); }
            },
            "listFinish": {
              "value": function () { return this.list_finish.apply(this, arguments); }
            },
            "listSync": {
              "value": function () { return this.list_sync.apply(this, arguments); }
            },
            "selectFinish": {
              "value": function () { return this.select_finish.apply(this, arguments); }
            },
            "selectSync": {
              "value": function () { return this.select_sync.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "ModemLocation": {
          "prototype": {
            "dupPath": {
              "value": function () { return this.dup_path.apply(this, arguments); }
            },
            "get3gpp": {
              "value": function () { return this.get_3gpp.apply(this, arguments); }
            },
            "get3gppFinish": {
              "value": function () { return this.get_3gpp_finish.apply(this, arguments); }
            },
            "get3gppSync": {
              "value": function () { return this.get_3gpp_sync.apply(this, arguments); }
            },
            "getCapabilities": {
              "value": function () { return this.get_capabilities.apply(this, arguments); }
            },
            "getCdmaBs": {
              "value": function () { return this.get_cdma_bs.apply(this, arguments); }
            },
            "getCdmaBsFinish": {
              "value": function () { return this.get_cdma_bs_finish.apply(this, arguments); }
            },
            "getCdmaBsSync": {
              "value": function () { return this.get_cdma_bs_sync.apply(this, arguments); }
            },
            "getEnabled": {
              "value": function () { return this.get_enabled.apply(this, arguments); }
            },
            "getFull": {
              "value": function () { return this.get_full.apply(this, arguments); }
            },
            "getFullFinish": {
              "value": function () { return this.get_full_finish.apply(this, arguments); }
            },
            "getFullSync": {
              "value": function () { return this.get_full_sync.apply(this, arguments); }
            },
            "getGpsNmea": {
              "value": function () { return this.get_gps_nmea.apply(this, arguments); }
            },
            "getGpsNmeaFinish": {
              "value": function () { return this.get_gps_nmea_finish.apply(this, arguments); }
            },
            "getGpsNmeaSync": {
              "value": function () { return this.get_gps_nmea_sync.apply(this, arguments); }
            },
            "getGpsRaw": {
              "value": function () { return this.get_gps_raw.apply(this, arguments); }
            },
            "getGpsRawFinish": {
              "value": function () { return this.get_gps_raw_finish.apply(this, arguments); }
            },
            "getGpsRawSync": {
              "value": function () { return this.get_gps_raw_sync.apply(this, arguments); }
            },
            "getPath": {
              "value": function () { return this.get_path.apply(this, arguments); }
            },
            "setupFinish": {
              "value": function () { return this.setup_finish.apply(this, arguments); }
            },
            "setupSync": {
              "value": function () { return this.setup_sync.apply(this, arguments); }
            },
            "signalsLocation": {
              "value": function () { return this.signals_location.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "ModemMessaging": {
          "prototype": {
            "createFinish": {
              "value": function () { return this.create_finish.apply(this, arguments); }
            },
            "createSync": {
              "value": function () { return this.create_sync.apply(this, arguments); }
            },
            "deleteFinish": {
              "value": function () { return this.delete_finish.apply(this, arguments); }
            },
            "deleteSync": {
              "value": function () { return this.delete_sync.apply(this, arguments); }
            },
            "dupPath": {
              "value": function () { return this.dup_path.apply(this, arguments); }
            },
            "getDefaultStorage": {
              "value": function () { return this.get_default_storage.apply(this, arguments); }
            },
            "getPath": {
              "value": function () { return this.get_path.apply(this, arguments); }
            },
            "getSupportedStorages": {
              "value": function () { return this.get_supported_storages.apply(this, arguments); }
            },
            "listFinish": {
              "value": function () { return this.list_finish.apply(this, arguments); }
            },
            "listSync": {
              "value": function () { return this.list_sync.apply(this, arguments); }
            },
            "peekSupportedStorages": {
              "value": function () { return this.peek_supported_storages.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "ModemOma": {
          "prototype": {
            "acceptNetworkInitiatedSession": {
              "value": function () { return this.accept_network_initiated_session.apply(this, arguments); }
            },
            "acceptNetworkInitiatedSessionFinish": {
              "value": function () { return this.accept_network_initiated_session_finish.apply(this, arguments); }
            },
            "acceptNetworkInitiatedSessionSync": {
              "value": function () { return this.accept_network_initiated_session_sync.apply(this, arguments); }
            },
            "cancelSession": {
              "value": function () { return this.cancel_session.apply(this, arguments); }
            },
            "cancelSessionFinish": {
              "value": function () { return this.cancel_session_finish.apply(this, arguments); }
            },
            "cancelSessionSync": {
              "value": function () { return this.cancel_session_sync.apply(this, arguments); }
            },
            "dupPath": {
              "value": function () { return this.dup_path.apply(this, arguments); }
            },
            "getFeatures": {
              "value": function () { return this.get_features.apply(this, arguments); }
            },
            "getPath": {
              "value": function () { return this.get_path.apply(this, arguments); }
            },
            "getSessionState": {
              "value": function () { return this.get_session_state.apply(this, arguments); }
            },
            "getSessionType": {
              "value": function () { return this.get_session_type.apply(this, arguments); }
            },
            "setupFinish": {
              "value": function () { return this.setup_finish.apply(this, arguments); }
            },
            "setupSync": {
              "value": function () { return this.setup_sync.apply(this, arguments); }
            },
            "startClientInitiatedSession": {
              "value": function () { return this.start_client_initiated_session.apply(this, arguments); }
            },
            "startClientInitiatedSessionFinish": {
              "value": function () { return this.start_client_initiated_session_finish.apply(this, arguments); }
            },
            "startClientInitiatedSessionSync": {
              "value": function () { return this.start_client_initiated_session_sync.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "ModemSignal": {
          "prototype": {
            "dupPath": {
              "value": function () { return this.dup_path.apply(this, arguments); }
            },
            "getCdma": {
              "value": function () { return this.get_cdma.apply(this, arguments); }
            },
            "getEvdo": {
              "value": function () { return this.get_evdo.apply(this, arguments); }
            },
            "getGsm": {
              "value": function () { return this.get_gsm.apply(this, arguments); }
            },
            "getLte": {
              "value": function () { return this.get_lte.apply(this, arguments); }
            },
            "getPath": {
              "value": function () { return this.get_path.apply(this, arguments); }
            },
            "getRate": {
              "value": function () { return this.get_rate.apply(this, arguments); }
            },
            "getUmts": {
              "value": function () { return this.get_umts.apply(this, arguments); }
            },
            "peekCdma": {
              "value": function () { return this.peek_cdma.apply(this, arguments); }
            },
            "peekEvdo": {
              "value": function () { return this.peek_evdo.apply(this, arguments); }
            },
            "peekGsm": {
              "value": function () { return this.peek_gsm.apply(this, arguments); }
            },
            "peekLte": {
              "value": function () { return this.peek_lte.apply(this, arguments); }
            },
            "peekUmts": {
              "value": function () { return this.peek_umts.apply(this, arguments); }
            },
            "setupFinish": {
              "value": function () { return this.setup_finish.apply(this, arguments); }
            },
            "setupSync": {
              "value": function () { return this.setup_sync.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "ModemSimple": {
          "prototype": {
            "connectFinish": {
              "value": function () { return this.connect_finish.apply(this, arguments); }
            },
            "connectSync": {
              "value": function () { return this.connect_sync.apply(this, arguments); }
            },
            "disconnectFinish": {
              "value": function () { return this.disconnect_finish.apply(this, arguments); }
            },
            "disconnectSync": {
              "value": function () { return this.disconnect_sync.apply(this, arguments); }
            },
            "dupPath": {
              "value": function () { return this.dup_path.apply(this, arguments); }
            },
            "getPath": {
              "value": function () { return this.get_path.apply(this, arguments); }
            },
            "getStatus": {
              "value": function () { return this.get_status.apply(this, arguments); }
            },
            "getStatusFinish": {
              "value": function () { return this.get_status_finish.apply(this, arguments); }
            },
            "getStatusSync": {
              "value": function () { return this.get_status_sync.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "ModemTime": {
          "prototype": {
            "dupPath": {
              "value": function () { return this.dup_path.apply(this, arguments); }
            },
            "getNetworkTime": {
              "value": function () { return this.get_network_time.apply(this, arguments); }
            },
            "getNetworkTimeFinish": {
              "value": function () { return this.get_network_time_finish.apply(this, arguments); }
            },
            "getNetworkTimeSync": {
              "value": function () { return this.get_network_time_sync.apply(this, arguments); }
            },
            "getNetworkTimezone": {
              "value": function () { return this.get_network_timezone.apply(this, arguments); }
            },
            "getPath": {
              "value": function () { return this.get_path.apply(this, arguments); }
            },
            "peekNetworkTimezone": {
              "value": function () { return this.peek_network_timezone.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "NetworkTimezone": {
          "prototype": {
            "getDictionary": {
              "value": function () { return this.get_dictionary.apply(this, arguments); }
            },
            "getDstOffset": {
              "value": function () { return this.get_dst_offset.apply(this, arguments); }
            },
            "getLeapSeconds": {
              "value": function () { return this.get_leap_seconds.apply(this, arguments); }
            },
            "getOffset": {
              "value": function () { return this.get_offset.apply(this, arguments); }
            },
            "setDstOffset": {
              "value": function () { return this.set_dst_offset.apply(this, arguments); }
            },
            "setLeapSeconds": {
              "value": function () { return this.set_leap_seconds.apply(this, arguments); }
            },
            "setOffset": {
              "value": function () { return this.set_offset.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Object": {
          "prototype": {
            "dupPath": {
              "value": function () { return this.dup_path.apply(this, arguments); }
            },
            "getModem": {
              "value": function () { return this.get_modem.apply(this, arguments); }
            },
            "getModem3gpp": {
              "value": function () { return this.get_modem_3gpp.apply(this, arguments); }
            },
            "getModem3gppUssd": {
              "value": function () { return this.get_modem_3gpp_ussd.apply(this, arguments); }
            },
            "getModemCdma": {
              "value": function () { return this.get_modem_cdma.apply(this, arguments); }
            },
            "getModemFirmware": {
              "value": function () { return this.get_modem_firmware.apply(this, arguments); }
            },
            "getModemLocation": {
              "value": function () { return this.get_modem_location.apply(this, arguments); }
            },
            "getModemMessaging": {
              "value": function () { return this.get_modem_messaging.apply(this, arguments); }
            },
            "getModemOma": {
              "value": function () { return this.get_modem_oma.apply(this, arguments); }
            },
            "getModemSignal": {
              "value": function () { return this.get_modem_signal.apply(this, arguments); }
            },
            "getModemSimple": {
              "value": function () { return this.get_modem_simple.apply(this, arguments); }
            },
            "getModemTime": {
              "value": function () { return this.get_modem_time.apply(this, arguments); }
            },
            "getPath": {
              "value": function () { return this.get_path.apply(this, arguments); }
            },
            "peekModem": {
              "value": function () { return this.peek_modem.apply(this, arguments); }
            },
            "peekModem3gpp": {
              "value": function () { return this.peek_modem_3gpp.apply(this, arguments); }
            },
            "peekModem3gppUssd": {
              "value": function () { return this.peek_modem_3gpp_ussd.apply(this, arguments); }
            },
            "peekModemCdma": {
              "value": function () { return this.peek_modem_cdma.apply(this, arguments); }
            },
            "peekModemFirmware": {
              "value": function () { return this.peek_modem_firmware.apply(this, arguments); }
            },
            "peekModemLocation": {
              "value": function () { return this.peek_modem_location.apply(this, arguments); }
            },
            "peekModemMessaging": {
              "value": function () { return this.peek_modem_messaging.apply(this, arguments); }
            },
            "peekModemOma": {
              "value": function () { return this.peek_modem_oma.apply(this, arguments); }
            },
            "peekModemSignal": {
              "value": function () { return this.peek_modem_signal.apply(this, arguments); }
            },
            "peekModemSimple": {
              "value": function () { return this.peek_modem_simple.apply(this, arguments); }
            },
            "peekModemTime": {
              "value": function () { return this.peek_modem_time.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Signal": {
          "prototype": {
            "getDictionary": {
              "value": function () { return this.get_dictionary.apply(this, arguments); }
            },
            "getEcio": {
              "value": function () { return this.get_ecio.apply(this, arguments); }
            },
            "getIo": {
              "value": function () { return this.get_io.apply(this, arguments); }
            },
            "getRsrp": {
              "value": function () { return this.get_rsrp.apply(this, arguments); }
            },
            "getRsrq": {
              "value": function () { return this.get_rsrq.apply(this, arguments); }
            },
            "getRssi": {
              "value": function () { return this.get_rssi.apply(this, arguments); }
            },
            "getSinr": {
              "value": function () { return this.get_sinr.apply(this, arguments); }
            },
            "getSnr": {
              "value": function () { return this.get_snr.apply(this, arguments); }
            },
            "setEcio": {
              "value": function () { return this.set_ecio.apply(this, arguments); }
            },
            "setIo": {
              "value": function () { return this.set_io.apply(this, arguments); }
            },
            "setRsrp": {
              "value": function () { return this.set_rsrp.apply(this, arguments); }
            },
            "setRsrq": {
              "value": function () { return this.set_rsrq.apply(this, arguments); }
            },
            "setRssi": {
              "value": function () { return this.set_rssi.apply(this, arguments); }
            },
            "setSinr": {
              "value": function () { return this.set_sinr.apply(this, arguments); }
            },
            "setSnr": {
              "value": function () { return this.set_snr.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Sim": {
          "prototype": {
            "changePin": {
              "value": function () { return this.change_pin.apply(this, arguments); }
            },
            "changePinFinish": {
              "value": function () { return this.change_pin_finish.apply(this, arguments); }
            },
            "changePinSync": {
              "value": function () { return this.change_pin_sync.apply(this, arguments); }
            },
            "disablePin": {
              "value": function () { return this.disable_pin.apply(this, arguments); }
            },
            "disablePinFinish": {
              "value": function () { return this.disable_pin_finish.apply(this, arguments); }
            },
            "disablePinSync": {
              "value": function () { return this.disable_pin_sync.apply(this, arguments); }
            },
            "dupIdentifier": {
              "value": function () { return this.dup_identifier.apply(this, arguments); }
            },
            "dupImsi": {
              "value": function () { return this.dup_imsi.apply(this, arguments); }
            },
            "dupOperatorIdentifier": {
              "value": function () { return this.dup_operator_identifier.apply(this, arguments); }
            },
            "dupOperatorName": {
              "value": function () { return this.dup_operator_name.apply(this, arguments); }
            },
            "dupPath": {
              "value": function () { return this.dup_path.apply(this, arguments); }
            },
            "enablePin": {
              "value": function () { return this.enable_pin.apply(this, arguments); }
            },
            "enablePinFinish": {
              "value": function () { return this.enable_pin_finish.apply(this, arguments); }
            },
            "enablePinSync": {
              "value": function () { return this.enable_pin_sync.apply(this, arguments); }
            },
            "getIdentifier": {
              "value": function () { return this.get_identifier.apply(this, arguments); }
            },
            "getImsi": {
              "value": function () { return this.get_imsi.apply(this, arguments); }
            },
            "getOperatorIdentifier": {
              "value": function () { return this.get_operator_identifier.apply(this, arguments); }
            },
            "getOperatorName": {
              "value": function () { return this.get_operator_name.apply(this, arguments); }
            },
            "getPath": {
              "value": function () { return this.get_path.apply(this, arguments); }
            },
            "sendPin": {
              "value": function () { return this.send_pin.apply(this, arguments); }
            },
            "sendPinFinish": {
              "value": function () { return this.send_pin_finish.apply(this, arguments); }
            },
            "sendPinSync": {
              "value": function () { return this.send_pin_sync.apply(this, arguments); }
            },
            "sendPuk": {
              "value": function () { return this.send_puk.apply(this, arguments); }
            },
            "sendPukFinish": {
              "value": function () { return this.send_puk_finish.apply(this, arguments); }
            },
            "sendPukSync": {
              "value": function () { return this.send_puk_sync.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "SimpleConnectProperties": {
          "prototype": {
            "getAllowRoaming": {
              "value": function () { return this.get_allow_roaming.apply(this, arguments); }
            },
            "getAllowedAuth": {
              "value": function () { return this.get_allowed_auth.apply(this, arguments); }
            },
            "getApn": {
              "value": function () { return this.get_apn.apply(this, arguments); }
            },
            "getBearerProperties": {
              "value": function () { return this.get_bearer_properties.apply(this, arguments); }
            },
            "getDictionary": {
              "value": function () { return this.get_dictionary.apply(this, arguments); }
            },
            "getIpType": {
              "value": function () { return this.get_ip_type.apply(this, arguments); }
            },
            "getNumber": {
              "value": function () { return this.get_number.apply(this, arguments); }
            },
            "getOperatorId": {
              "value": function () { return this.get_operator_id.apply(this, arguments); }
            },
            "getPassword": {
              "value": function () { return this.get_password.apply(this, arguments); }
            },
            "getPin": {
              "value": function () { return this.get_pin.apply(this, arguments); }
            },
            "getUser": {
              "value": function () { return this.get_user.apply(this, arguments); }
            },
            "setAllowRoaming": {
              "value": function () { return this.set_allow_roaming.apply(this, arguments); }
            },
            "setAllowedAuth": {
              "value": function () { return this.set_allowed_auth.apply(this, arguments); }
            },
            "setApn": {
              "value": function () { return this.set_apn.apply(this, arguments); }
            },
            "setIpType": {
              "value": function () { return this.set_ip_type.apply(this, arguments); }
            },
            "setNumber": {
              "value": function () { return this.set_number.apply(this, arguments); }
            },
            "setOperatorId": {
              "value": function () { return this.set_operator_id.apply(this, arguments); }
            },
            "setPassword": {
              "value": function () { return this.set_password.apply(this, arguments); }
            },
            "setPin": {
              "value": function () { return this.set_pin.apply(this, arguments); }
            },
            "setUser": {
              "value": function () { return this.set_user.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "SimpleStatus": {
          "prototype": {
            "get3gppOperatorCode": {
              "value": function () { return this.get_3gpp_operator_code.apply(this, arguments); }
            },
            "get3gppOperatorName": {
              "value": function () { return this.get_3gpp_operator_name.apply(this, arguments); }
            },
            "get3gppRegistrationState": {
              "value": function () { return this.get_3gpp_registration_state.apply(this, arguments); }
            },
            "get3gppSubscriptionState": {
              "value": function () { return this.get_3gpp_subscription_state.apply(this, arguments); }
            },
            "getAccessTechnologies": {
              "value": function () { return this.get_access_technologies.apply(this, arguments); }
            },
            "getCdmaCdma1xRegistrationState": {
              "value": function () { return this.get_cdma_cdma1x_registration_state.apply(this, arguments); }
            },
            "getCdmaEvdoRegistrationState": {
              "value": function () { return this.get_cdma_evdo_registration_state.apply(this, arguments); }
            },
            "getCdmaNid": {
              "value": function () { return this.get_cdma_nid.apply(this, arguments); }
            },
            "getCdmaSid": {
              "value": function () { return this.get_cdma_sid.apply(this, arguments); }
            },
            "getCurrentBands": {
              "value": function () { return this.get_current_bands.apply(this, arguments); }
            },
            "getDictionary": {
              "value": function () { return this.get_dictionary.apply(this, arguments); }
            },
            "getSignalQuality": {
              "value": function () { return this.get_signal_quality.apply(this, arguments); }
            },
            "getState": {
              "value": function () { return this.get_state.apply(this, arguments); }
            },
            "accessTechnologies": {
              "get": function () { return this.access_technologies; },
              "set": function (value) { this.access_technologies = value; }
            },
            "cdmaCdma1xRegistrationState": {
              "get": function () { return this.cdma_cdma1x_registration_state; },
              "set": function (value) { this.cdma_cdma1x_registration_state = value; }
            },
            "cdmaEvdoRegistrationState": {
              "get": function () { return this.cdma_evdo_registration_state; },
              "set": function (value) { this.cdma_evdo_registration_state = value; }
            },
            "cdmaNid": {
              "get": function () { return this.cdma_nid; },
              "set": function (value) { this.cdma_nid = value; }
            },
            "cdmaSid": {
              "get": function () { return this.cdma_sid; },
              "set": function (value) { this.cdma_sid = value; }
            },
            "currentBands": {
              "get": function () { return this.current_bands; },
              "set": function (value) { this.current_bands = value; }
            },
            "m3gppOperatorCode": {
              "get": function () { return this.m3gpp_operator_code; },
              "set": function (value) { this.m3gpp_operator_code = value; }
            },
            "m3gppOperatorName": {
              "get": function () { return this.m3gpp_operator_name; },
              "set": function (value) { this.m3gpp_operator_name = value; }
            },
            "m3gppRegistrationState": {
              "get": function () { return this.m3gpp_registration_state; },
              "set": function (value) { this.m3gpp_registration_state = value; }
            },
            "m3gppSubscriptionState": {
              "get": function () { return this.m3gpp_subscription_state; },
              "set": function (value) { this.m3gpp_subscription_state = value; }
            },
            "signalQuality": {
              "get": function () { return this.signal_quality; },
              "set": function (value) { this.signal_quality = value; }
            }
          },
          "static": {}
        },
        "Sms": {
          "prototype": {
            "dupData": {
              "value": function () { return this.dup_data.apply(this, arguments); }
            },
            "dupDischargeTimestamp": {
              "value": function () { return this.dup_discharge_timestamp.apply(this, arguments); }
            },
            "dupNumber": {
              "value": function () { return this.dup_number.apply(this, arguments); }
            },
            "dupPath": {
              "value": function () { return this.dup_path.apply(this, arguments); }
            },
            "dupSmsc": {
              "value": function () { return this.dup_smsc.apply(this, arguments); }
            },
            "dupText": {
              "value": function () { return this.dup_text.apply(this, arguments); }
            },
            "dupTimestamp": {
              "value": function () { return this.dup_timestamp.apply(this, arguments); }
            },
            "getClass": {
              "value": function () { return this.get_class.apply(this, arguments); }
            },
            "getData": {
              "value": function () { return this.get_data.apply(this, arguments); }
            },
            "getDeliveryReportRequest": {
              "value": function () { return this.get_delivery_report_request.apply(this, arguments); }
            },
            "getDeliveryState": {
              "value": function () { return this.get_delivery_state.apply(this, arguments); }
            },
            "getDischargeTimestamp": {
              "value": function () { return this.get_discharge_timestamp.apply(this, arguments); }
            },
            "getMessageReference": {
              "value": function () { return this.get_message_reference.apply(this, arguments); }
            },
            "getNumber": {
              "value": function () { return this.get_number.apply(this, arguments); }
            },
            "getPath": {
              "value": function () { return this.get_path.apply(this, arguments); }
            },
            "getPduType": {
              "value": function () { return this.get_pdu_type.apply(this, arguments); }
            },
            "getServiceCategory": {
              "value": function () { return this.get_service_category.apply(this, arguments); }
            },
            "getSmsc": {
              "value": function () { return this.get_smsc.apply(this, arguments); }
            },
            "getState": {
              "value": function () { return this.get_state.apply(this, arguments); }
            },
            "getStorage": {
              "value": function () { return this.get_storage.apply(this, arguments); }
            },
            "getTeleserviceId": {
              "value": function () { return this.get_teleservice_id.apply(this, arguments); }
            },
            "getText": {
              "value": function () { return this.get_text.apply(this, arguments); }
            },
            "getTimestamp": {
              "value": function () { return this.get_timestamp.apply(this, arguments); }
            },
            "getValidityRelative": {
              "value": function () { return this.get_validity_relative.apply(this, arguments); }
            },
            "getValidityType": {
              "value": function () { return this.get_validity_type.apply(this, arguments); }
            },
            "sendFinish": {
              "value": function () { return this.send_finish.apply(this, arguments); }
            },
            "sendSync": {
              "value": function () { return this.send_sync.apply(this, arguments); }
            },
            "storeFinish": {
              "value": function () { return this.store_finish.apply(this, arguments); }
            },
            "storeSync": {
              "value": function () { return this.store_sync.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "SmsProperties": {
          "prototype": {
            "getClass": {
              "value": function () { return this.get_class.apply(this, arguments); }
            },
            "getData": {
              "value": function () { return this.get_data.apply(this, arguments); }
            },
            "getDataBytearray": {
              "value": function () { return this.get_data_bytearray.apply(this, arguments); }
            },
            "getDeliveryReportRequest": {
              "value": function () { return this.get_delivery_report_request.apply(this, arguments); }
            },
            "getDictionary": {
              "value": function () { return this.get_dictionary.apply(this, arguments); }
            },
            "getNumber": {
              "value": function () { return this.get_number.apply(this, arguments); }
            },
            "getServiceCategory": {
              "value": function () { return this.get_service_category.apply(this, arguments); }
            },
            "getSmsc": {
              "value": function () { return this.get_smsc.apply(this, arguments); }
            },
            "getTeleserviceId": {
              "value": function () { return this.get_teleservice_id.apply(this, arguments); }
            },
            "getText": {
              "value": function () { return this.get_text.apply(this, arguments); }
            },
            "getValidityRelative": {
              "value": function () { return this.get_validity_relative.apply(this, arguments); }
            },
            "getValidityType": {
              "value": function () { return this.get_validity_type.apply(this, arguments); }
            },
            "peekDataBytearray": {
              "value": function () { return this.peek_data_bytearray.apply(this, arguments); }
            },
            "setClass": {
              "value": function () { return this.set_class.apply(this, arguments); }
            },
            "setData": {
              "value": function () { return this.set_data.apply(this, arguments); }
            },
            "setDataBytearray": {
              "value": function () { return this.set_data_bytearray.apply(this, arguments); }
            },
            "setDeliveryReportRequest": {
              "value": function () { return this.set_delivery_report_request.apply(this, arguments); }
            },
            "setNumber": {
              "value": function () { return this.set_number.apply(this, arguments); }
            },
            "setServiceCategory": {
              "value": function () { return this.set_service_category.apply(this, arguments); }
            },
            "setSmsc": {
              "value": function () { return this.set_smsc.apply(this, arguments); }
            },
            "setTeleserviceId": {
              "value": function () { return this.set_teleservice_id.apply(this, arguments); }
            },
            "setText": {
              "value": function () { return this.set_text.apply(this, arguments); }
            },
            "setValidityRelative": {
              "value": function () { return this.set_validity_relative.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "UnlockRetries": {
          "prototype": {
            "buildString": {
              "value": function () { return this.build_string.apply(this, arguments); }
            },
            "getDictionary": {
              "value": function () { return this.get_dictionary.apply(this, arguments); }
            }
          },
          "static": {}
        }
      },
      "static": {
        "bearerAllowedAuthBuildStringFromMask": {
          "value": function () { return this.bearer_allowed_auth_build_string_from_mask.apply(this, arguments); }
        },
        "bearerIpFamilyBuildStringFromMask": {
          "value": function () { return this.bearer_ip_family_build_string_from_mask.apply(this, arguments); }
        },
        "bearerIpMethodGetString": {
          "value": function () { return this.bearer_ip_method_get_string.apply(this, arguments); }
        },
        "cdmaActivationErrorQuark": {
          "value": function () { return this.cdma_activation_error_quark.apply(this, arguments); }
        },
        "connectionErrorQuark": {
          "value": function () { return this.connection_error_quark.apply(this, arguments); }
        },
        "coreErrorQuark": {
          "value": function () { return this.core_error_quark.apply(this, arguments); }
        },
        "firmwareImageTypeGetString": {
          "value": function () { return this.firmware_image_type_get_string.apply(this, arguments); }
        },
        "gdbusBearerInterfaceInfo": {
          "value": function () { return this.gdbus_bearer_interface_info.apply(this, arguments); }
        },
        "gdbusBearerOverrideProperties": {
          "value": function () { return this.gdbus_bearer_override_properties.apply(this, arguments); }
        },
        "gdbusModem3gppInterfaceInfo": {
          "value": function () { return this.gdbus_modem3gpp_interface_info.apply(this, arguments); }
        },
        "gdbusModem3gppOverrideProperties": {
          "value": function () { return this.gdbus_modem3gpp_override_properties.apply(this, arguments); }
        },
        "gdbusModem3gppUssdInterfaceInfo": {
          "value": function () { return this.gdbus_modem3gpp_ussd_interface_info.apply(this, arguments); }
        },
        "gdbusModem3gppUssdOverrideProperties": {
          "value": function () { return this.gdbus_modem3gpp_ussd_override_properties.apply(this, arguments); }
        },
        "gdbusModemCdmaInterfaceInfo": {
          "value": function () { return this.gdbus_modem_cdma_interface_info.apply(this, arguments); }
        },
        "gdbusModemCdmaOverrideProperties": {
          "value": function () { return this.gdbus_modem_cdma_override_properties.apply(this, arguments); }
        },
        "gdbusModemFirmwareInterfaceInfo": {
          "value": function () { return this.gdbus_modem_firmware_interface_info.apply(this, arguments); }
        },
        "gdbusModemFirmwareOverrideProperties": {
          "value": function () { return this.gdbus_modem_firmware_override_properties.apply(this, arguments); }
        },
        "gdbusModemInterfaceInfo": {
          "value": function () { return this.gdbus_modem_interface_info.apply(this, arguments); }
        },
        "gdbusModemLocationInterfaceInfo": {
          "value": function () { return this.gdbus_modem_location_interface_info.apply(this, arguments); }
        },
        "gdbusModemLocationOverrideProperties": {
          "value": function () { return this.gdbus_modem_location_override_properties.apply(this, arguments); }
        },
        "gdbusModemMessagingInterfaceInfo": {
          "value": function () { return this.gdbus_modem_messaging_interface_info.apply(this, arguments); }
        },
        "gdbusModemMessagingOverrideProperties": {
          "value": function () { return this.gdbus_modem_messaging_override_properties.apply(this, arguments); }
        },
        "gdbusModemOmaInterfaceInfo": {
          "value": function () { return this.gdbus_modem_oma_interface_info.apply(this, arguments); }
        },
        "gdbusModemOmaOverrideProperties": {
          "value": function () { return this.gdbus_modem_oma_override_properties.apply(this, arguments); }
        },
        "gdbusModemOverrideProperties": {
          "value": function () { return this.gdbus_modem_override_properties.apply(this, arguments); }
        },
        "gdbusModemSignalInterfaceInfo": {
          "value": function () { return this.gdbus_modem_signal_interface_info.apply(this, arguments); }
        },
        "gdbusModemSignalOverrideProperties": {
          "value": function () { return this.gdbus_modem_signal_override_properties.apply(this, arguments); }
        },
        "gdbusModemSimpleInterfaceInfo": {
          "value": function () { return this.gdbus_modem_simple_interface_info.apply(this, arguments); }
        },
        "gdbusModemSimpleOverrideProperties": {
          "value": function () { return this.gdbus_modem_simple_override_properties.apply(this, arguments); }
        },
        "gdbusModemTimeInterfaceInfo": {
          "value": function () { return this.gdbus_modem_time_interface_info.apply(this, arguments); }
        },
        "gdbusModemTimeOverrideProperties": {
          "value": function () { return this.gdbus_modem_time_override_properties.apply(this, arguments); }
        },
        "gdbusOrgFreedesktopModemManager1InterfaceInfo": {
          "value": function () { return this.gdbus_org_freedesktop_modem_manager1_interface_info.apply(this, arguments); }
        },
        "gdbusOrgFreedesktopModemManager1OverrideProperties": {
          "value": function () { return this.gdbus_org_freedesktop_modem_manager1_override_properties.apply(this, arguments); }
        },
        "gdbusSimInterfaceInfo": {
          "value": function () { return this.gdbus_sim_interface_info.apply(this, arguments); }
        },
        "gdbusSimOverrideProperties": {
          "value": function () { return this.gdbus_sim_override_properties.apply(this, arguments); }
        },
        "gdbusSmsInterfaceInfo": {
          "value": function () { return this.gdbus_sms_interface_info.apply(this, arguments); }
        },
        "gdbusSmsOverrideProperties": {
          "value": function () { return this.gdbus_sms_override_properties.apply(this, arguments); }
        },
        "messageErrorQuark": {
          "value": function () { return this.message_error_quark.apply(this, arguments); }
        },
        "mobileEquipmentErrorQuark": {
          "value": function () { return this.mobile_equipment_error_quark.apply(this, arguments); }
        },
        "modem3gppFacilityBuildStringFromMask": {
          "value": function () { return this.modem_3gpp_facility_build_string_from_mask.apply(this, arguments); }
        },
        "modem3gppNetworkAvailabilityGetString": {
          "value": function () { return this.modem_3gpp_network_availability_get_string.apply(this, arguments); }
        },
        "modem3gppRegistrationStateGetString": {
          "value": function () { return this.modem_3gpp_registration_state_get_string.apply(this, arguments); }
        },
        "modem3gppSubscriptionStateGetString": {
          "value": function () { return this.modem_3gpp_subscription_state_get_string.apply(this, arguments); }
        },
        "modem3gppUssdSessionStateGetString": {
          "value": function () { return this.modem_3gpp_ussd_session_state_get_string.apply(this, arguments); }
        },
        "modemAccessTechnologyBuildStringFromMask": {
          "value": function () { return this.modem_access_technology_build_string_from_mask.apply(this, arguments); }
        },
        "modemBandGetString": {
          "value": function () { return this.modem_band_get_string.apply(this, arguments); }
        },
        "modemCapabilityBuildStringFromMask": {
          "value": function () { return this.modem_capability_build_string_from_mask.apply(this, arguments); }
        },
        "modemCdmaActivationStateGetString": {
          "value": function () { return this.modem_cdma_activation_state_get_string.apply(this, arguments); }
        },
        "modemCdmaRegistrationStateGetString": {
          "value": function () { return this.modem_cdma_registration_state_get_string.apply(this, arguments); }
        },
        "modemCdmaRmProtocolGetString": {
          "value": function () { return this.modem_cdma_rm_protocol_get_string.apply(this, arguments); }
        },
        "modemContactsStorageGetString": {
          "value": function () { return this.modem_contacts_storage_get_string.apply(this, arguments); }
        },
        "modemLocationSourceBuildStringFromMask": {
          "value": function () { return this.modem_location_source_build_string_from_mask.apply(this, arguments); }
        },
        "modemLockGetString": {
          "value": function () { return this.modem_lock_get_string.apply(this, arguments); }
        },
        "modemModeBuildStringFromMask": {
          "value": function () { return this.modem_mode_build_string_from_mask.apply(this, arguments); }
        },
        "modemPortTypeGetString": {
          "value": function () { return this.modem_port_type_get_string.apply(this, arguments); }
        },
        "modemPowerStateGetString": {
          "value": function () { return this.modem_power_state_get_string.apply(this, arguments); }
        },
        "modemStateChangeReasonGetString": {
          "value": function () { return this.modem_state_change_reason_get_string.apply(this, arguments); }
        },
        "modemStateFailedReasonGetString": {
          "value": function () { return this.modem_state_failed_reason_get_string.apply(this, arguments); }
        },
        "modemStateGetString": {
          "value": function () { return this.modem_state_get_string.apply(this, arguments); }
        },
        "omaFeatureBuildStringFromMask": {
          "value": function () { return this.oma_feature_build_string_from_mask.apply(this, arguments); }
        },
        "omaSessionStateFailedReasonGetString": {
          "value": function () { return this.oma_session_state_failed_reason_get_string.apply(this, arguments); }
        },
        "omaSessionStateGetString": {
          "value": function () { return this.oma_session_state_get_string.apply(this, arguments); }
        },
        "omaSessionTypeGetString": {
          "value": function () { return this.oma_session_type_get_string.apply(this, arguments); }
        },
        "serialErrorQuark": {
          "value": function () { return this.serial_error_quark.apply(this, arguments); }
        },
        "smsCdmaServiceCategoryGetString": {
          "value": function () { return this.sms_cdma_service_category_get_string.apply(this, arguments); }
        },
        "smsCdmaTeleserviceIdGetString": {
          "value": function () { return this.sms_cdma_teleservice_id_get_string.apply(this, arguments); }
        },
        "smsDeliveryStateGetString": {
          "value": function () { return this.sms_delivery_state_get_string.apply(this, arguments); }
        },
        "smsPduTypeGetString": {
          "value": function () { return this.sms_pdu_type_get_string.apply(this, arguments); }
        },
        "smsStateGetString": {
          "value": function () { return this.sms_state_get_string.apply(this, arguments); }
        },
        "smsStorageGetString": {
          "value": function () { return this.sms_storage_get_string.apply(this, arguments); }
        },
        "smsValidityTypeGetString": {
          "value": function () { return this.sms_validity_type_get_string.apply(this, arguments); }
        }
      }
    },
    "NM": {
      "class": {
        "AccessPoint": {
          "prototype": {
            "connectionValid": {
              "value": function () { return this.connection_valid.apply(this, arguments); }
            },
            "filterConnections": {
              "value": function () { return this.filter_connections.apply(this, arguments); }
            },
            "getBssid": {
              "value": function () { return this.get_bssid.apply(this, arguments); }
            },
            "getFlags": {
              "value": function () { return this.get_flags.apply(this, arguments); }
            },
            "getFrequency": {
              "value": function () { return this.get_frequency.apply(this, arguments); }
            },
            "getLastSeen": {
              "value": function () { return this.get_last_seen.apply(this, arguments); }
            },
            "getMaxBitrate": {
              "value": function () { return this.get_max_bitrate.apply(this, arguments); }
            },
            "getMode": {
              "value": function () { return this.get_mode.apply(this, arguments); }
            },
            "getRsnFlags": {
              "value": function () { return this.get_rsn_flags.apply(this, arguments); }
            },
            "getSsid": {
              "value": function () { return this.get_ssid.apply(this, arguments); }
            },
            "getStrength": {
              "value": function () { return this.get_strength.apply(this, arguments); }
            },
            "getWpaFlags": {
              "value": function () { return this.get_wpa_flags.apply(this, arguments); }
            },
            "hwAddress": {
              "get": function () { return this.hw_address; },
              "set": function (value) { this.hw_address = value; }
            },
            "lastSeen": {
              "get": function () { return this.last_seen; },
              "set": function (value) { this.last_seen = value; }
            },
            "maxBitrate": {
              "get": function () { return this.max_bitrate; },
              "set": function (value) { this.max_bitrate = value; }
            },
            "rsnFlags": {
              "get": function () { return this.rsn_flags; },
              "set": function (value) { this.rsn_flags = value; }
            },
            "wpaFlags": {
              "get": function () { return this.wpa_flags; },
              "set": function (value) { this.wpa_flags = value; }
            }
          },
          "static": {}
        },
        "ActiveConnection": {
          "prototype": {
            "getConnection": {
              "value": function () { return this.get_connection.apply(this, arguments); }
            },
            "getConnectionType": {
              "value": function () { return this.get_connection_type.apply(this, arguments); }
            },
            "getDefault": {
              "value": function () { return this.get_default.apply(this, arguments); }
            },
            "getDefault6": {
              "value": function () { return this.get_default6.apply(this, arguments); }
            },
            "getDevices": {
              "value": function () { return this.get_devices.apply(this, arguments); }
            },
            "getDhcp4Config": {
              "value": function () { return this.get_dhcp4_config.apply(this, arguments); }
            },
            "getDhcp6Config": {
              "value": function () { return this.get_dhcp6_config.apply(this, arguments); }
            },
            "getId": {
              "value": function () { return this.get_id.apply(this, arguments); }
            },
            "getIp4Config": {
              "value": function () { return this.get_ip4_config.apply(this, arguments); }
            },
            "getIp6Config": {
              "value": function () { return this.get_ip6_config.apply(this, arguments); }
            },
            "getMaster": {
              "value": function () { return this.get_master.apply(this, arguments); }
            },
            "getSpecificObjectPath": {
              "value": function () { return this.get_specific_object_path.apply(this, arguments); }
            },
            "getState": {
              "value": function () { return this.get_state.apply(this, arguments); }
            },
            "getUuid": {
              "value": function () { return this.get_uuid.apply(this, arguments); }
            },
            "getVpn": {
              "value": function () { return this.get_vpn.apply(this, arguments); }
            },
            "dhcp4Config": {
              "get": function () { return this.dhcp4_config; },
              "set": function (value) { this.dhcp4_config = value; }
            },
            "dhcp6Config": {
              "get": function () { return this.dhcp6_config; },
              "set": function (value) { this.dhcp6_config = value; }
            },
            "ip4Config": {
              "get": function () { return this.ip4_config; },
              "set": function (value) { this.ip4_config = value; }
            },
            "ip6Config": {
              "get": function () { return this.ip6_config; },
              "set": function (value) { this.ip6_config = value; }
            },
            "specificObjectPath": {
              "get": function () { return this.specific_object_path; },
              "set": function (value) { this.specific_object_path = value; }
            }
          },
          "static": {}
        },
        "Client": {
          "prototype": {
            "activateConnectionAsync": {
              "value": function () { return this.activate_connection_async.apply(this, arguments); }
            },
            "activateConnectionFinish": {
              "value": function () { return this.activate_connection_finish.apply(this, arguments); }
            },
            "addAndActivateConnectionAsync": {
              "value": function () { return this.add_and_activate_connection_async.apply(this, arguments); }
            },
            "addAndActivateConnectionFinish": {
              "value": function () { return this.add_and_activate_connection_finish.apply(this, arguments); }
            },
            "addConnectionAsync": {
              "value": function () { return this.add_connection_async.apply(this, arguments); }
            },
            "addConnectionFinish": {
              "value": function () { return this.add_connection_finish.apply(this, arguments); }
            },
            "checkConnectivity": {
              "value": function () { return this.check_connectivity.apply(this, arguments); }
            },
            "checkConnectivityAsync": {
              "value": function () { return this.check_connectivity_async.apply(this, arguments); }
            },
            "checkConnectivityFinish": {
              "value": function () { return this.check_connectivity_finish.apply(this, arguments); }
            },
            "deactivateConnection": {
              "value": function () { return this.deactivate_connection.apply(this, arguments); }
            },
            "deactivateConnectionAsync": {
              "value": function () { return this.deactivate_connection_async.apply(this, arguments); }
            },
            "deactivateConnectionFinish": {
              "value": function () { return this.deactivate_connection_finish.apply(this, arguments); }
            },
            "getActivatingConnection": {
              "value": function () { return this.get_activating_connection.apply(this, arguments); }
            },
            "getActiveConnections": {
              "value": function () { return this.get_active_connections.apply(this, arguments); }
            },
            "getConnectionById": {
              "value": function () { return this.get_connection_by_id.apply(this, arguments); }
            },
            "getConnectionByPath": {
              "value": function () { return this.get_connection_by_path.apply(this, arguments); }
            },
            "getConnectionByUuid": {
              "value": function () { return this.get_connection_by_uuid.apply(this, arguments); }
            },
            "getConnections": {
              "value": function () { return this.get_connections.apply(this, arguments); }
            },
            "getConnectivity": {
              "value": function () { return this.get_connectivity.apply(this, arguments); }
            },
            "getDeviceByIface": {
              "value": function () { return this.get_device_by_iface.apply(this, arguments); }
            },
            "getDeviceByPath": {
              "value": function () { return this.get_device_by_path.apply(this, arguments); }
            },
            "getDevices": {
              "value": function () { return this.get_devices.apply(this, arguments); }
            },
            "getLogging": {
              "value": function () { return this.get_logging.apply(this, arguments); }
            },
            "getNmRunning": {
              "value": function () { return this.get_nm_running.apply(this, arguments); }
            },
            "getPermissionResult": {
              "value": function () { return this.get_permission_result.apply(this, arguments); }
            },
            "getPrimaryConnection": {
              "value": function () { return this.get_primary_connection.apply(this, arguments); }
            },
            "getStartup": {
              "value": function () { return this.get_startup.apply(this, arguments); }
            },
            "getState": {
              "value": function () { return this.get_state.apply(this, arguments); }
            },
            "getVersion": {
              "value": function () { return this.get_version.apply(this, arguments); }
            },
            "loadConnections": {
              "value": function () { return this.load_connections.apply(this, arguments); }
            },
            "loadConnectionsAsync": {
              "value": function () { return this.load_connections_async.apply(this, arguments); }
            },
            "loadConnectionsFinish": {
              "value": function () { return this.load_connections_finish.apply(this, arguments); }
            },
            "networkingGetEnabled": {
              "value": function () { return this.networking_get_enabled.apply(this, arguments); }
            },
            "networkingSetEnabled": {
              "value": function () { return this.networking_set_enabled.apply(this, arguments); }
            },
            "reloadConnections": {
              "value": function () { return this.reload_connections.apply(this, arguments); }
            },
            "reloadConnectionsAsync": {
              "value": function () { return this.reload_connections_async.apply(this, arguments); }
            },
            "reloadConnectionsFinish": {
              "value": function () { return this.reload_connections_finish.apply(this, arguments); }
            },
            "saveHostname": {
              "value": function () { return this.save_hostname.apply(this, arguments); }
            },
            "saveHostnameAsync": {
              "value": function () { return this.save_hostname_async.apply(this, arguments); }
            },
            "saveHostnameFinish": {
              "value": function () { return this.save_hostname_finish.apply(this, arguments); }
            },
            "setLogging": {
              "value": function () { return this.set_logging.apply(this, arguments); }
            },
            "wimaxGetEnabled": {
              "value": function () { return this.wimax_get_enabled.apply(this, arguments); }
            },
            "wimaxHardwareGetEnabled": {
              "value": function () { return this.wimax_hardware_get_enabled.apply(this, arguments); }
            },
            "wimaxSetEnabled": {
              "value": function () { return this.wimax_set_enabled.apply(this, arguments); }
            },
            "wirelessGetEnabled": {
              "value": function () { return this.wireless_get_enabled.apply(this, arguments); }
            },
            "wirelessHardwareGetEnabled": {
              "value": function () { return this.wireless_hardware_get_enabled.apply(this, arguments); }
            },
            "wirelessSetEnabled": {
              "value": function () { return this.wireless_set_enabled.apply(this, arguments); }
            },
            "wwanGetEnabled": {
              "value": function () { return this.wwan_get_enabled.apply(this, arguments); }
            },
            "wwanHardwareGetEnabled": {
              "value": function () { return this.wwan_hardware_get_enabled.apply(this, arguments); }
            },
            "wwanSetEnabled": {
              "value": function () { return this.wwan_set_enabled.apply(this, arguments); }
            },
            "activatingConnection": {
              "get": function () { return this.activating_connection; },
              "set": function (value) { this.activating_connection = value; }
            },
            "activeConnections": {
              "get": function () { return this.active_connections; },
              "set": function (value) { this.active_connections = value; }
            },
            "canModify": {
              "get": function () { return this.can_modify; },
              "set": function (value) { this.can_modify = value; }
            },
            "networkingEnabled": {
              "get": function () { return this.networking_enabled; },
              "set": function (value) { this.networking_enabled = value; }
            },
            "nmRunning": {
              "get": function () { return this.nm_running; },
              "set": function (value) { this.nm_running = value; }
            },
            "primaryConnection": {
              "get": function () { return this.primary_connection; },
              "set": function (value) { this.primary_connection = value; }
            },
            "wimaxEnabled": {
              "get": function () { return this.wimax_enabled; },
              "set": function (value) { this.wimax_enabled = value; }
            },
            "wimaxHardwareEnabled": {
              "get": function () { return this.wimax_hardware_enabled; },
              "set": function (value) { this.wimax_hardware_enabled = value; }
            },
            "wirelessEnabled": {
              "get": function () { return this.wireless_enabled; },
              "set": function (value) { this.wireless_enabled = value; }
            },
            "wirelessHardwareEnabled": {
              "get": function () { return this.wireless_hardware_enabled; },
              "set": function (value) { this.wireless_hardware_enabled = value; }
            },
            "wwanEnabled": {
              "get": function () { return this.wwan_enabled; },
              "set": function (value) { this.wwan_enabled = value; }
            },
            "wwanHardwareEnabled": {
              "get": function () { return this.wwan_hardware_enabled; },
              "set": function (value) { this.wwan_hardware_enabled = value; }
            }
          },
          "static": {
            "newAsync": {
              "value": function () { return this.new_async.apply(this, arguments); }
            }
          }
        },
        "Device": {
          "prototype": {
            "connectionCompatible": {
              "value": function () { return this.connection_compatible.apply(this, arguments); }
            },
            "connectionValid": {
              "value": function () { return this.connection_valid.apply(this, arguments); }
            },
            "deleteAsync": {
              "value": function () { return this.delete_async.apply(this, arguments); }
            },
            "deleteFinish": {
              "value": function () { return this.delete_finish.apply(this, arguments); }
            },
            "disconnectAsync": {
              "value": function () { return this.disconnect_async.apply(this, arguments); }
            },
            "disconnectFinish": {
              "value": function () { return this.disconnect_finish.apply(this, arguments); }
            },
            "filterConnections": {
              "value": function () { return this.filter_connections.apply(this, arguments); }
            },
            "getActiveConnection": {
              "value": function () { return this.get_active_connection.apply(this, arguments); }
            },
            "getAutoconnect": {
              "value": function () { return this.get_autoconnect.apply(this, arguments); }
            },
            "getAvailableConnections": {
              "value": function () { return this.get_available_connections.apply(this, arguments); }
            },
            "getCapabilities": {
              "value": function () { return this.get_capabilities.apply(this, arguments); }
            },
            "getDescription": {
              "value": function () { return this.get_description.apply(this, arguments); }
            },
            "getDeviceType": {
              "value": function () { return this.get_device_type.apply(this, arguments); }
            },
            "getDhcp4Config": {
              "value": function () { return this.get_dhcp4_config.apply(this, arguments); }
            },
            "getDhcp6Config": {
              "value": function () { return this.get_dhcp6_config.apply(this, arguments); }
            },
            "getDriver": {
              "value": function () { return this.get_driver.apply(this, arguments); }
            },
            "getDriverVersion": {
              "value": function () { return this.get_driver_version.apply(this, arguments); }
            },
            "getFirmwareMissing": {
              "value": function () { return this.get_firmware_missing.apply(this, arguments); }
            },
            "getFirmwareVersion": {
              "value": function () { return this.get_firmware_version.apply(this, arguments); }
            },
            "getHwAddress": {
              "value": function () { return this.get_hw_address.apply(this, arguments); }
            },
            "getIface": {
              "value": function () { return this.get_iface.apply(this, arguments); }
            },
            "getIp4Config": {
              "value": function () { return this.get_ip4_config.apply(this, arguments); }
            },
            "getIp6Config": {
              "value": function () { return this.get_ip6_config.apply(this, arguments); }
            },
            "getIpIface": {
              "value": function () { return this.get_ip_iface.apply(this, arguments); }
            },
            "getManaged": {
              "value": function () { return this.get_managed.apply(this, arguments); }
            },
            "getMetered": {
              "value": function () { return this.get_metered.apply(this, arguments); }
            },
            "getMtu": {
              "value": function () { return this.get_mtu.apply(this, arguments); }
            },
            "getPhysicalPortId": {
              "value": function () { return this.get_physical_port_id.apply(this, arguments); }
            },
            "getProduct": {
              "value": function () { return this.get_product.apply(this, arguments); }
            },
            "getSettingType": {
              "value": function () { return this.get_setting_type.apply(this, arguments); }
            },
            "getState": {
              "value": function () { return this.get_state.apply(this, arguments); }
            },
            "getStateReason": {
              "value": function () { return this.get_state_reason.apply(this, arguments); }
            },
            "getTypeDescription": {
              "value": function () { return this.get_type_description.apply(this, arguments); }
            },
            "getUdi": {
              "value": function () { return this.get_udi.apply(this, arguments); }
            },
            "getVendor": {
              "value": function () { return this.get_vendor.apply(this, arguments); }
            },
            "isSoftware": {
              "value": function () { return this.is_software.apply(this, arguments); }
            },
            "setAutoconnect": {
              "value": function () { return this.set_autoconnect.apply(this, arguments); }
            },
            "activeConnection": {
              "get": function () { return this.active_connection; },
              "set": function (value) { this.active_connection = value; }
            },
            "availableConnections": {
              "get": function () { return this.available_connections; },
              "set": function (value) { this.available_connections = value; }
            },
            "deviceType": {
              "get": function () { return this.device_type; },
              "set": function (value) { this.device_type = value; }
            },
            "dhcp4Config": {
              "get": function () { return this.dhcp4_config; },
              "set": function (value) { this.dhcp4_config = value; }
            },
            "dhcp6Config": {
              "get": function () { return this.dhcp6_config; },
              "set": function (value) { this.dhcp6_config = value; }
            },
            "driverVersion": {
              "get": function () { return this.driver_version; },
              "set": function (value) { this.driver_version = value; }
            },
            "firmwareMissing": {
              "get": function () { return this.firmware_missing; },
              "set": function (value) { this.firmware_missing = value; }
            },
            "firmwareVersion": {
              "get": function () { return this.firmware_version; },
              "set": function (value) { this.firmware_version = value; }
            },
            "ipInterface": {
              "get": function () { return this.ip_interface; },
              "set": function (value) { this.ip_interface = value; }
            },
            "ip4Config": {
              "get": function () { return this.ip4_config; },
              "set": function (value) { this.ip4_config = value; }
            },
            "ip6Config": {
              "get": function () { return this.ip6_config; },
              "set": function (value) { this.ip6_config = value; }
            },
            "physicalPortId": {
              "get": function () { return this.physical_port_id; },
              "set": function (value) { this.physical_port_id = value; }
            },
            "stateReason": {
              "get": function () { return this.state_reason; },
              "set": function (value) { this.state_reason = value; }
            }
          },
          "static": {
            "disambiguateNames": {
              "value": function () { return this.disambiguate_names.apply(this, arguments); }
            }
          }
        },
        "DeviceAdsl": {
          "prototype": {
            "getCarrier": {
              "value": function () { return this.get_carrier.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DeviceBond": {
          "prototype": {
            "getCarrier": {
              "value": function () { return this.get_carrier.apply(this, arguments); }
            },
            "getHwAddress": {
              "value": function () { return this.get_hw_address.apply(this, arguments); }
            },
            "getSlaves": {
              "value": function () { return this.get_slaves.apply(this, arguments); }
            },
            "hwAddress": {
              "get": function () { return this.hw_address; },
              "set": function (value) { this.hw_address = value; }
            }
          },
          "static": {}
        },
        "DeviceBridge": {
          "prototype": {
            "getCarrier": {
              "value": function () { return this.get_carrier.apply(this, arguments); }
            },
            "getHwAddress": {
              "value": function () { return this.get_hw_address.apply(this, arguments); }
            },
            "getSlaves": {
              "value": function () { return this.get_slaves.apply(this, arguments); }
            },
            "hwAddress": {
              "get": function () { return this.hw_address; },
              "set": function (value) { this.hw_address = value; }
            }
          },
          "static": {}
        },
        "DeviceBt": {
          "prototype": {
            "getCapabilities": {
              "value": function () { return this.get_capabilities.apply(this, arguments); }
            },
            "getHwAddress": {
              "value": function () { return this.get_hw_address.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "btCapabilities": {
              "get": function () { return this.bt_capabilities; },
              "set": function (value) { this.bt_capabilities = value; }
            },
            "hwAddress": {
              "get": function () { return this.hw_address; },
              "set": function (value) { this.hw_address = value; }
            }
          },
          "static": {}
        },
        "DeviceEthernet": {
          "prototype": {
            "getCarrier": {
              "value": function () { return this.get_carrier.apply(this, arguments); }
            },
            "getHwAddress": {
              "value": function () { return this.get_hw_address.apply(this, arguments); }
            },
            "getPermanentHwAddress": {
              "value": function () { return this.get_permanent_hw_address.apply(this, arguments); }
            },
            "getSpeed": {
              "value": function () { return this.get_speed.apply(this, arguments); }
            },
            "hwAddress": {
              "get": function () { return this.hw_address; },
              "set": function (value) { this.hw_address = value; }
            },
            "permHwAddress": {
              "get": function () { return this.perm_hw_address; },
              "set": function (value) { this.perm_hw_address = value; }
            }
          },
          "static": {}
        },
        "DeviceGeneric": {
          "prototype": {
            "getHwAddress": {
              "value": function () { return this.get_hw_address.apply(this, arguments); }
            },
            "hwAddress": {
              "get": function () { return this.hw_address; },
              "set": function (value) { this.hw_address = value; }
            },
            "typeDescription": {
              "get": function () { return this.type_description; },
              "set": function (value) { this.type_description = value; }
            }
          },
          "static": {}
        },
        "DeviceInfiniband": {
          "prototype": {
            "getCarrier": {
              "value": function () { return this.get_carrier.apply(this, arguments); }
            },
            "getHwAddress": {
              "value": function () { return this.get_hw_address.apply(this, arguments); }
            },
            "hwAddress": {
              "get": function () { return this.hw_address; },
              "set": function (value) { this.hw_address = value; }
            }
          },
          "static": {}
        },
        "DeviceModem": {
          "prototype": {
            "getCurrentCapabilities": {
              "value": function () { return this.get_current_capabilities.apply(this, arguments); }
            },
            "getModemCapabilities": {
              "value": function () { return this.get_modem_capabilities.apply(this, arguments); }
            },
            "currentCapabilities": {
              "get": function () { return this.current_capabilities; },
              "set": function (value) { this.current_capabilities = value; }
            },
            "modemCapabilities": {
              "get": function () { return this.modem_capabilities; },
              "set": function (value) { this.modem_capabilities = value; }
            }
          },
          "static": {}
        },
        "DeviceOlpcMesh": {
          "prototype": {
            "getActiveChannel": {
              "value": function () { return this.get_active_channel.apply(this, arguments); }
            },
            "getCompanion": {
              "value": function () { return this.get_companion.apply(this, arguments); }
            },
            "getHwAddress": {
              "value": function () { return this.get_hw_address.apply(this, arguments); }
            },
            "activeChannel": {
              "get": function () { return this.active_channel; },
              "set": function (value) { this.active_channel = value; }
            },
            "hwAddress": {
              "get": function () { return this.hw_address; },
              "set": function (value) { this.hw_address = value; }
            }
          },
          "static": {}
        },
        "DeviceTeam": {
          "prototype": {
            "getCarrier": {
              "value": function () { return this.get_carrier.apply(this, arguments); }
            },
            "getHwAddress": {
              "value": function () { return this.get_hw_address.apply(this, arguments); }
            },
            "getSlaves": {
              "value": function () { return this.get_slaves.apply(this, arguments); }
            },
            "hwAddress": {
              "get": function () { return this.hw_address; },
              "set": function (value) { this.hw_address = value; }
            }
          },
          "static": {}
        },
        "DeviceVlan": {
          "prototype": {
            "getCarrier": {
              "value": function () { return this.get_carrier.apply(this, arguments); }
            },
            "getHwAddress": {
              "value": function () { return this.get_hw_address.apply(this, arguments); }
            },
            "getParent": {
              "value": function () { return this.get_parent.apply(this, arguments); }
            },
            "getVlanId": {
              "value": function () { return this.get_vlan_id.apply(this, arguments); }
            },
            "hwAddress": {
              "get": function () { return this.hw_address; },
              "set": function (value) { this.hw_address = value; }
            },
            "vlanId": {
              "get": function () { return this.vlan_id; },
              "set": function (value) { this.vlan_id = value; }
            }
          },
          "static": {}
        },
        "DeviceWifi": {
          "prototype": {
            "getAccessPointByPath": {
              "value": function () { return this.get_access_point_by_path.apply(this, arguments); }
            },
            "getAccessPoints": {
              "value": function () { return this.get_access_points.apply(this, arguments); }
            },
            "getActiveAccessPoint": {
              "value": function () { return this.get_active_access_point.apply(this, arguments); }
            },
            "getBitrate": {
              "value": function () { return this.get_bitrate.apply(this, arguments); }
            },
            "getCapabilities": {
              "value": function () { return this.get_capabilities.apply(this, arguments); }
            },
            "getHwAddress": {
              "value": function () { return this.get_hw_address.apply(this, arguments); }
            },
            "getMode": {
              "value": function () { return this.get_mode.apply(this, arguments); }
            },
            "getPermanentHwAddress": {
              "value": function () { return this.get_permanent_hw_address.apply(this, arguments); }
            },
            "requestScan": {
              "value": function () { return this.request_scan.apply(this, arguments); }
            },
            "requestScanAsync": {
              "value": function () { return this.request_scan_async.apply(this, arguments); }
            },
            "requestScanFinish": {
              "value": function () { return this.request_scan_finish.apply(this, arguments); }
            },
            "requestScanOptions": {
              "value": function () { return this.request_scan_options.apply(this, arguments); }
            },
            "requestScanOptionsAsync": {
              "value": function () { return this.request_scan_options_async.apply(this, arguments); }
            },
            "accessPoints": {
              "get": function () { return this.access_points; },
              "set": function (value) { this.access_points = value; }
            },
            "activeAccessPoint": {
              "get": function () { return this.active_access_point; },
              "set": function (value) { this.active_access_point = value; }
            },
            "hwAddress": {
              "get": function () { return this.hw_address; },
              "set": function (value) { this.hw_address = value; }
            },
            "permHwAddress": {
              "get": function () { return this.perm_hw_address; },
              "set": function (value) { this.perm_hw_address = value; }
            },
            "wirelessCapabilities": {
              "get": function () { return this.wireless_capabilities; },
              "set": function (value) { this.wireless_capabilities = value; }
            }
          },
          "static": {}
        },
        "DeviceWimax": {
          "prototype": {
            "getActiveNsp": {
              "value": function () { return this.get_active_nsp.apply(this, arguments); }
            },
            "getBsid": {
              "value": function () { return this.get_bsid.apply(this, arguments); }
            },
            "getCenterFrequency": {
              "value": function () { return this.get_center_frequency.apply(this, arguments); }
            },
            "getCinr": {
              "value": function () { return this.get_cinr.apply(this, arguments); }
            },
            "getHwAddress": {
              "value": function () { return this.get_hw_address.apply(this, arguments); }
            },
            "getNspByPath": {
              "value": function () { return this.get_nsp_by_path.apply(this, arguments); }
            },
            "getNsps": {
              "value": function () { return this.get_nsps.apply(this, arguments); }
            },
            "getRssi": {
              "value": function () { return this.get_rssi.apply(this, arguments); }
            },
            "getTxPower": {
              "value": function () { return this.get_tx_power.apply(this, arguments); }
            },
            "activeNsp": {
              "get": function () { return this.active_nsp; },
              "set": function (value) { this.active_nsp = value; }
            },
            "centerFrequency": {
              "get": function () { return this.center_frequency; },
              "set": function (value) { this.center_frequency = value; }
            },
            "hwAddress": {
              "get": function () { return this.hw_address; },
              "set": function (value) { this.hw_address = value; }
            },
            "txPower": {
              "get": function () { return this.tx_power; },
              "set": function (value) { this.tx_power = value; }
            }
          },
          "static": {}
        },
        "DhcpConfig": {
          "prototype": {
            "getFamily": {
              "value": function () { return this.get_family.apply(this, arguments); }
            },
            "getOneOption": {
              "value": function () { return this.get_one_option.apply(this, arguments); }
            },
            "getOptions": {
              "value": function () { return this.get_options.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "IPConfig": {
          "prototype": {
            "getAddresses": {
              "value": function () { return this.get_addresses.apply(this, arguments); }
            },
            "getDomains": {
              "value": function () { return this.get_domains.apply(this, arguments); }
            },
            "getFamily": {
              "value": function () { return this.get_family.apply(this, arguments); }
            },
            "getGateway": {
              "value": function () { return this.get_gateway.apply(this, arguments); }
            },
            "getNameservers": {
              "value": function () { return this.get_nameservers.apply(this, arguments); }
            },
            "getRoutes": {
              "value": function () { return this.get_routes.apply(this, arguments); }
            },
            "getSearches": {
              "value": function () { return this.get_searches.apply(this, arguments); }
            },
            "getWinsServers": {
              "value": function () { return this.get_wins_servers.apply(this, arguments); }
            },
            "winsServers": {
              "get": function () { return this.wins_servers; },
              "set": function (value) { this.wins_servers = value; }
            }
          },
          "static": {}
        },
        "Object": {
          "prototype": {
            "getPath": {
              "value": function () { return this.get_path.apply(this, arguments); }
            },
            "dbusConnection": {
              "get": function () { return this.dbus_connection; },
              "set": function (value) { this.dbus_connection = value; }
            },
            "nmRunningInternal": {
              "get": function () { return this.nm_running_internal; },
              "set": function (value) { this.nm_running_internal = value; }
            }
          },
          "static": {}
        },
        "RemoteConnection": {
          "prototype": {
            "commitChanges": {
              "value": function () { return this.commit_changes.apply(this, arguments); }
            },
            "commitChangesAsync": {
              "value": function () { return this.commit_changes_async.apply(this, arguments); }
            },
            "commitChangesFinish": {
              "value": function () { return this.commit_changes_finish.apply(this, arguments); }
            },
            "deleteAsync": {
              "value": function () { return this.delete_async.apply(this, arguments); }
            },
            "deleteFinish": {
              "value": function () { return this.delete_finish.apply(this, arguments); }
            },
            "getSecrets": {
              "value": function () { return this.get_secrets.apply(this, arguments); }
            },
            "getSecretsAsync": {
              "value": function () { return this.get_secrets_async.apply(this, arguments); }
            },
            "getSecretsFinish": {
              "value": function () { return this.get_secrets_finish.apply(this, arguments); }
            },
            "getUnsaved": {
              "value": function () { return this.get_unsaved.apply(this, arguments); }
            },
            "getVisible": {
              "value": function () { return this.get_visible.apply(this, arguments); }
            },
            "saveAsync": {
              "value": function () { return this.save_async.apply(this, arguments); }
            },
            "saveFinish": {
              "value": function () { return this.save_finish.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Setting": {
          "prototype": {
            "enumerateValues": {
              "value": function () { return this.enumerate_values.apply(this, arguments); }
            },
            "getDbusPropertyType": {
              "value": function () { return this.get_dbus_property_type.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getSecretFlags": {
              "value": function () { return this.get_secret_flags.apply(this, arguments); }
            },
            "setSecretFlags": {
              "value": function () { return this.set_secret_flags.apply(this, arguments); }
            },
            "toString": {
              "value": function () { return this.to_string.apply(this, arguments); }
            }
          },
          "static": {
            "lookupType": {
              "value": function () { return this.lookup_type.apply(this, arguments); }
            }
          }
        },
        "Setting8021x": {
          "prototype": {
            "addAltsubjectMatch": {
              "value": function () { return this.add_altsubject_match.apply(this, arguments); }
            },
            "addEapMethod": {
              "value": function () { return this.add_eap_method.apply(this, arguments); }
            },
            "addPhase2AltsubjectMatch": {
              "value": function () { return this.add_phase2_altsubject_match.apply(this, arguments); }
            },
            "clearAltsubjectMatches": {
              "value": function () { return this.clear_altsubject_matches.apply(this, arguments); }
            },
            "clearEapMethods": {
              "value": function () { return this.clear_eap_methods.apply(this, arguments); }
            },
            "clearPhase2AltsubjectMatches": {
              "value": function () { return this.clear_phase2_altsubject_matches.apply(this, arguments); }
            },
            "getAltsubjectMatch": {
              "value": function () { return this.get_altsubject_match.apply(this, arguments); }
            },
            "getAnonymousIdentity": {
              "value": function () { return this.get_anonymous_identity.apply(this, arguments); }
            },
            "getCaCertBlob": {
              "value": function () { return this.get_ca_cert_blob.apply(this, arguments); }
            },
            "getCaCertPath": {
              "value": function () { return this.get_ca_cert_path.apply(this, arguments); }
            },
            "getCaCertScheme": {
              "value": function () { return this.get_ca_cert_scheme.apply(this, arguments); }
            },
            "getCaPath": {
              "value": function () { return this.get_ca_path.apply(this, arguments); }
            },
            "getClientCertBlob": {
              "value": function () { return this.get_client_cert_blob.apply(this, arguments); }
            },
            "getClientCertPath": {
              "value": function () { return this.get_client_cert_path.apply(this, arguments); }
            },
            "getClientCertScheme": {
              "value": function () { return this.get_client_cert_scheme.apply(this, arguments); }
            },
            "getEapMethod": {
              "value": function () { return this.get_eap_method.apply(this, arguments); }
            },
            "getIdentity": {
              "value": function () { return this.get_identity.apply(this, arguments); }
            },
            "getNumAltsubjectMatches": {
              "value": function () { return this.get_num_altsubject_matches.apply(this, arguments); }
            },
            "getNumEapMethods": {
              "value": function () { return this.get_num_eap_methods.apply(this, arguments); }
            },
            "getNumPhase2AltsubjectMatches": {
              "value": function () { return this.get_num_phase2_altsubject_matches.apply(this, arguments); }
            },
            "getPacFile": {
              "value": function () { return this.get_pac_file.apply(this, arguments); }
            },
            "getPassword": {
              "value": function () { return this.get_password.apply(this, arguments); }
            },
            "getPasswordFlags": {
              "value": function () { return this.get_password_flags.apply(this, arguments); }
            },
            "getPasswordRaw": {
              "value": function () { return this.get_password_raw.apply(this, arguments); }
            },
            "getPasswordRawFlags": {
              "value": function () { return this.get_password_raw_flags.apply(this, arguments); }
            },
            "getPhase1FastProvisioning": {
              "value": function () { return this.get_phase1_fast_provisioning.apply(this, arguments); }
            },
            "getPhase1Peaplabel": {
              "value": function () { return this.get_phase1_peaplabel.apply(this, arguments); }
            },
            "getPhase1Peapver": {
              "value": function () { return this.get_phase1_peapver.apply(this, arguments); }
            },
            "getPhase2AltsubjectMatch": {
              "value": function () { return this.get_phase2_altsubject_match.apply(this, arguments); }
            },
            "getPhase2Auth": {
              "value": function () { return this.get_phase2_auth.apply(this, arguments); }
            },
            "getPhase2Autheap": {
              "value": function () { return this.get_phase2_autheap.apply(this, arguments); }
            },
            "getPhase2CaCertBlob": {
              "value": function () { return this.get_phase2_ca_cert_blob.apply(this, arguments); }
            },
            "getPhase2CaCertPath": {
              "value": function () { return this.get_phase2_ca_cert_path.apply(this, arguments); }
            },
            "getPhase2CaCertScheme": {
              "value": function () { return this.get_phase2_ca_cert_scheme.apply(this, arguments); }
            },
            "getPhase2CaPath": {
              "value": function () { return this.get_phase2_ca_path.apply(this, arguments); }
            },
            "getPhase2ClientCertBlob": {
              "value": function () { return this.get_phase2_client_cert_blob.apply(this, arguments); }
            },
            "getPhase2ClientCertPath": {
              "value": function () { return this.get_phase2_client_cert_path.apply(this, arguments); }
            },
            "getPhase2ClientCertScheme": {
              "value": function () { return this.get_phase2_client_cert_scheme.apply(this, arguments); }
            },
            "getPhase2PrivateKeyBlob": {
              "value": function () { return this.get_phase2_private_key_blob.apply(this, arguments); }
            },
            "getPhase2PrivateKeyFormat": {
              "value": function () { return this.get_phase2_private_key_format.apply(this, arguments); }
            },
            "getPhase2PrivateKeyPassword": {
              "value": function () { return this.get_phase2_private_key_password.apply(this, arguments); }
            },
            "getPhase2PrivateKeyPasswordFlags": {
              "value": function () { return this.get_phase2_private_key_password_flags.apply(this, arguments); }
            },
            "getPhase2PrivateKeyPath": {
              "value": function () { return this.get_phase2_private_key_path.apply(this, arguments); }
            },
            "getPhase2PrivateKeyScheme": {
              "value": function () { return this.get_phase2_private_key_scheme.apply(this, arguments); }
            },
            "getPhase2SubjectMatch": {
              "value": function () { return this.get_phase2_subject_match.apply(this, arguments); }
            },
            "getPin": {
              "value": function () { return this.get_pin.apply(this, arguments); }
            },
            "getPinFlags": {
              "value": function () { return this.get_pin_flags.apply(this, arguments); }
            },
            "getPrivateKeyBlob": {
              "value": function () { return this.get_private_key_blob.apply(this, arguments); }
            },
            "getPrivateKeyFormat": {
              "value": function () { return this.get_private_key_format.apply(this, arguments); }
            },
            "getPrivateKeyPassword": {
              "value": function () { return this.get_private_key_password.apply(this, arguments); }
            },
            "getPrivateKeyPasswordFlags": {
              "value": function () { return this.get_private_key_password_flags.apply(this, arguments); }
            },
            "getPrivateKeyPath": {
              "value": function () { return this.get_private_key_path.apply(this, arguments); }
            },
            "getPrivateKeyScheme": {
              "value": function () { return this.get_private_key_scheme.apply(this, arguments); }
            },
            "getSubjectMatch": {
              "value": function () { return this.get_subject_match.apply(this, arguments); }
            },
            "getSystemCaCerts": {
              "value": function () { return this.get_system_ca_certs.apply(this, arguments); }
            },
            "removeAltsubjectMatch": {
              "value": function () { return this.remove_altsubject_match.apply(this, arguments); }
            },
            "removeAltsubjectMatchByValue": {
              "value": function () { return this.remove_altsubject_match_by_value.apply(this, arguments); }
            },
            "removeEapMethod": {
              "value": function () { return this.remove_eap_method.apply(this, arguments); }
            },
            "removeEapMethodByValue": {
              "value": function () { return this.remove_eap_method_by_value.apply(this, arguments); }
            },
            "removePhase2AltsubjectMatch": {
              "value": function () { return this.remove_phase2_altsubject_match.apply(this, arguments); }
            },
            "removePhase2AltsubjectMatchByValue": {
              "value": function () { return this.remove_phase2_altsubject_match_by_value.apply(this, arguments); }
            },
            "setCaCert": {
              "value": function () { return this.set_ca_cert.apply(this, arguments); }
            },
            "setClientCert": {
              "value": function () { return this.set_client_cert.apply(this, arguments); }
            },
            "setPhase2CaCert": {
              "value": function () { return this.set_phase2_ca_cert.apply(this, arguments); }
            },
            "setPhase2ClientCert": {
              "value": function () { return this.set_phase2_client_cert.apply(this, arguments); }
            },
            "setPhase2PrivateKey": {
              "value": function () { return this.set_phase2_private_key.apply(this, arguments); }
            },
            "setPrivateKey": {
              "value": function () { return this.set_private_key.apply(this, arguments); }
            },
            "altsubjectMatches": {
              "get": function () { return this.altsubject_matches; },
              "set": function (value) { this.altsubject_matches = value; }
            },
            "anonymousIdentity": {
              "get": function () { return this.anonymous_identity; },
              "set": function (value) { this.anonymous_identity = value; }
            },
            "caCert": {
              "get": function () { return this.ca_cert; },
              "set": function (value) { this.ca_cert = value; }
            },
            "caPath": {
              "get": function () { return this.ca_path; },
              "set": function (value) { this.ca_path = value; }
            },
            "clientCert": {
              "get": function () { return this.client_cert; },
              "set": function (value) { this.client_cert = value; }
            },
            "pacFile": {
              "get": function () { return this.pac_file; },
              "set": function (value) { this.pac_file = value; }
            },
            "passwordFlags": {
              "get": function () { return this.password_flags; },
              "set": function (value) { this.password_flags = value; }
            },
            "passwordRaw": {
              "get": function () { return this.password_raw; },
              "set": function (value) { this.password_raw = value; }
            },
            "passwordRawFlags": {
              "get": function () { return this.password_raw_flags; },
              "set": function (value) { this.password_raw_flags = value; }
            },
            "phase1FastProvisioning": {
              "get": function () { return this.phase1_fast_provisioning; },
              "set": function (value) { this.phase1_fast_provisioning = value; }
            },
            "phase1Peaplabel": {
              "get": function () { return this.phase1_peaplabel; },
              "set": function (value) { this.phase1_peaplabel = value; }
            },
            "phase1Peapver": {
              "get": function () { return this.phase1_peapver; },
              "set": function (value) { this.phase1_peapver = value; }
            },
            "phase2AltsubjectMatches": {
              "get": function () { return this.phase2_altsubject_matches; },
              "set": function (value) { this.phase2_altsubject_matches = value; }
            },
            "phase2Auth": {
              "get": function () { return this.phase2_auth; },
              "set": function (value) { this.phase2_auth = value; }
            },
            "phase2Autheap": {
              "get": function () { return this.phase2_autheap; },
              "set": function (value) { this.phase2_autheap = value; }
            },
            "phase2CaCert": {
              "get": function () { return this.phase2_ca_cert; },
              "set": function (value) { this.phase2_ca_cert = value; }
            },
            "phase2CaPath": {
              "get": function () { return this.phase2_ca_path; },
              "set": function (value) { this.phase2_ca_path = value; }
            },
            "phase2ClientCert": {
              "get": function () { return this.phase2_client_cert; },
              "set": function (value) { this.phase2_client_cert = value; }
            },
            "phase2PrivateKey": {
              "get": function () { return this.phase2_private_key; },
              "set": function (value) { this.phase2_private_key = value; }
            },
            "phase2PrivateKeyPassword": {
              "get": function () { return this.phase2_private_key_password; },
              "set": function (value) { this.phase2_private_key_password = value; }
            },
            "phase2PrivateKeyPasswordFlags": {
              "get": function () { return this.phase2_private_key_password_flags; },
              "set": function (value) { this.phase2_private_key_password_flags = value; }
            },
            "phase2SubjectMatch": {
              "get": function () { return this.phase2_subject_match; },
              "set": function (value) { this.phase2_subject_match = value; }
            },
            "pinFlags": {
              "get": function () { return this.pin_flags; },
              "set": function (value) { this.pin_flags = value; }
            },
            "privateKey": {
              "get": function () { return this.private_key; },
              "set": function (value) { this.private_key = value; }
            },
            "privateKeyPassword": {
              "get": function () { return this.private_key_password; },
              "set": function (value) { this.private_key_password = value; }
            },
            "privateKeyPasswordFlags": {
              "get": function () { return this.private_key_password_flags; },
              "set": function (value) { this.private_key_password_flags = value; }
            },
            "subjectMatch": {
              "get": function () { return this.subject_match; },
              "set": function (value) { this.subject_match = value; }
            },
            "systemCaCerts": {
              "get": function () { return this.system_ca_certs; },
              "set": function (value) { this.system_ca_certs = value; }
            }
          },
          "static": {}
        },
        "SettingAdsl": {
          "prototype": {
            "getEncapsulation": {
              "value": function () { return this.get_encapsulation.apply(this, arguments); }
            },
            "getPassword": {
              "value": function () { return this.get_password.apply(this, arguments); }
            },
            "getPasswordFlags": {
              "value": function () { return this.get_password_flags.apply(this, arguments); }
            },
            "getProtocol": {
              "value": function () { return this.get_protocol.apply(this, arguments); }
            },
            "getUsername": {
              "value": function () { return this.get_username.apply(this, arguments); }
            },
            "getVci": {
              "value": function () { return this.get_vci.apply(this, arguments); }
            },
            "getVpi": {
              "value": function () { return this.get_vpi.apply(this, arguments); }
            },
            "passwordFlags": {
              "get": function () { return this.password_flags; },
              "set": function (value) { this.password_flags = value; }
            }
          },
          "static": {}
        },
        "SettingBluetooth": {
          "prototype": {
            "getBdaddr": {
              "value": function () { return this.get_bdaddr.apply(this, arguments); }
            },
            "getConnectionType": {
              "value": function () { return this.get_connection_type.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "SettingBond": {
          "prototype": {
            "addOption": {
              "value": function () { return this.add_option.apply(this, arguments); }
            },
            "getNumOptions": {
              "value": function () { return this.get_num_options.apply(this, arguments); }
            },
            "getOption": {
              "value": function () { return this.get_option.apply(this, arguments); }
            },
            "getOptionByName": {
              "value": function () { return this.get_option_by_name.apply(this, arguments); }
            },
            "getOptionDefault": {
              "value": function () { return this.get_option_default.apply(this, arguments); }
            },
            "getValidOptions": {
              "value": function () { return this.get_valid_options.apply(this, arguments); }
            },
            "removeOption": {
              "value": function () { return this.remove_option.apply(this, arguments); }
            }
          },
          "static": {
            "validateOption": {
              "value": function () { return this.validate_option.apply(this, arguments); }
            }
          }
        },
        "SettingBridge": {
          "prototype": {
            "getAgeingTime": {
              "value": function () { return this.get_ageing_time.apply(this, arguments); }
            },
            "getForwardDelay": {
              "value": function () { return this.get_forward_delay.apply(this, arguments); }
            },
            "getHelloTime": {
              "value": function () { return this.get_hello_time.apply(this, arguments); }
            },
            "getMacAddress": {
              "value": function () { return this.get_mac_address.apply(this, arguments); }
            },
            "getMaxAge": {
              "value": function () { return this.get_max_age.apply(this, arguments); }
            },
            "getPriority": {
              "value": function () { return this.get_priority.apply(this, arguments); }
            },
            "getStp": {
              "value": function () { return this.get_stp.apply(this, arguments); }
            },
            "ageingTime": {
              "get": function () { return this.ageing_time; },
              "set": function (value) { this.ageing_time = value; }
            },
            "forwardDelay": {
              "get": function () { return this.forward_delay; },
              "set": function (value) { this.forward_delay = value; }
            },
            "helloTime": {
              "get": function () { return this.hello_time; },
              "set": function (value) { this.hello_time = value; }
            },
            "macAddress": {
              "get": function () { return this.mac_address; },
              "set": function (value) { this.mac_address = value; }
            },
            "maxAge": {
              "get": function () { return this.max_age; },
              "set": function (value) { this.max_age = value; }
            }
          },
          "static": {}
        },
        "SettingBridgePort": {
          "prototype": {
            "getHairpinMode": {
              "value": function () { return this.get_hairpin_mode.apply(this, arguments); }
            },
            "getPathCost": {
              "value": function () { return this.get_path_cost.apply(this, arguments); }
            },
            "getPriority": {
              "value": function () { return this.get_priority.apply(this, arguments); }
            },
            "hairpinMode": {
              "get": function () { return this.hairpin_mode; },
              "set": function (value) { this.hairpin_mode = value; }
            },
            "pathCost": {
              "get": function () { return this.path_cost; },
              "set": function (value) { this.path_cost = value; }
            }
          },
          "static": {}
        },
        "SettingCdma": {
          "prototype": {
            "getNumber": {
              "value": function () { return this.get_number.apply(this, arguments); }
            },
            "getPassword": {
              "value": function () { return this.get_password.apply(this, arguments); }
            },
            "getPasswordFlags": {
              "value": function () { return this.get_password_flags.apply(this, arguments); }
            },
            "getUsername": {
              "value": function () { return this.get_username.apply(this, arguments); }
            },
            "passwordFlags": {
              "get": function () { return this.password_flags; },
              "set": function (value) { this.password_flags = value; }
            }
          },
          "static": {}
        },
        "SettingConnection": {
          "prototype": {
            "addPermission": {
              "value": function () { return this.add_permission.apply(this, arguments); }
            },
            "addSecondary": {
              "value": function () { return this.add_secondary.apply(this, arguments); }
            },
            "getAutoconnect": {
              "value": function () { return this.get_autoconnect.apply(this, arguments); }
            },
            "getAutoconnectPriority": {
              "value": function () { return this.get_autoconnect_priority.apply(this, arguments); }
            },
            "getAutoconnectSlaves": {
              "value": function () { return this.get_autoconnect_slaves.apply(this, arguments); }
            },
            "getConnectionType": {
              "value": function () { return this.get_connection_type.apply(this, arguments); }
            },
            "getGatewayPingTimeout": {
              "value": function () { return this.get_gateway_ping_timeout.apply(this, arguments); }
            },
            "getId": {
              "value": function () { return this.get_id.apply(this, arguments); }
            },
            "getInterfaceName": {
              "value": function () { return this.get_interface_name.apply(this, arguments); }
            },
            "getMaster": {
              "value": function () { return this.get_master.apply(this, arguments); }
            },
            "getMetered": {
              "value": function () { return this.get_metered.apply(this, arguments); }
            },
            "getNumPermissions": {
              "value": function () { return this.get_num_permissions.apply(this, arguments); }
            },
            "getNumSecondaries": {
              "value": function () { return this.get_num_secondaries.apply(this, arguments); }
            },
            "getPermission": {
              "value": function () { return this.get_permission.apply(this, arguments); }
            },
            "getReadOnly": {
              "value": function () { return this.get_read_only.apply(this, arguments); }
            },
            "getSecondary": {
              "value": function () { return this.get_secondary.apply(this, arguments); }
            },
            "getSlaveType": {
              "value": function () { return this.get_slave_type.apply(this, arguments); }
            },
            "getTimestamp": {
              "value": function () { return this.get_timestamp.apply(this, arguments); }
            },
            "getUuid": {
              "value": function () { return this.get_uuid.apply(this, arguments); }
            },
            "getZone": {
              "value": function () { return this.get_zone.apply(this, arguments); }
            },
            "isSlaveType": {
              "value": function () { return this.is_slave_type.apply(this, arguments); }
            },
            "permissionsUserAllowed": {
              "value": function () { return this.permissions_user_allowed.apply(this, arguments); }
            },
            "removePermission": {
              "value": function () { return this.remove_permission.apply(this, arguments); }
            },
            "removePermissionByValue": {
              "value": function () { return this.remove_permission_by_value.apply(this, arguments); }
            },
            "removeSecondary": {
              "value": function () { return this.remove_secondary.apply(this, arguments); }
            },
            "removeSecondaryByValue": {
              "value": function () { return this.remove_secondary_by_value.apply(this, arguments); }
            },
            "autoconnectPriority": {
              "get": function () { return this.autoconnect_priority; },
              "set": function (value) { this.autoconnect_priority = value; }
            },
            "autoconnectSlaves": {
              "get": function () { return this.autoconnect_slaves; },
              "set": function (value) { this.autoconnect_slaves = value; }
            },
            "gatewayPingTimeout": {
              "get": function () { return this.gateway_ping_timeout; },
              "set": function (value) { this.gateway_ping_timeout = value; }
            },
            "interfaceName": {
              "get": function () { return this.interface_name; },
              "set": function (value) { this.interface_name = value; }
            },
            "readOnly": {
              "get": function () { return this.read_only; },
              "set": function (value) { this.read_only = value; }
            },
            "slaveType": {
              "get": function () { return this.slave_type; },
              "set": function (value) { this.slave_type = value; }
            }
          },
          "static": {}
        },
        "SettingDcb": {
          "prototype": {
            "getAppFcoeFlags": {
              "value": function () { return this.get_app_fcoe_flags.apply(this, arguments); }
            },
            "getAppFcoeMode": {
              "value": function () { return this.get_app_fcoe_mode.apply(this, arguments); }
            },
            "getAppFcoePriority": {
              "value": function () { return this.get_app_fcoe_priority.apply(this, arguments); }
            },
            "getAppFipFlags": {
              "value": function () { return this.get_app_fip_flags.apply(this, arguments); }
            },
            "getAppFipPriority": {
              "value": function () { return this.get_app_fip_priority.apply(this, arguments); }
            },
            "getAppIscsiFlags": {
              "value": function () { return this.get_app_iscsi_flags.apply(this, arguments); }
            },
            "getAppIscsiPriority": {
              "value": function () { return this.get_app_iscsi_priority.apply(this, arguments); }
            },
            "getPriorityBandwidth": {
              "value": function () { return this.get_priority_bandwidth.apply(this, arguments); }
            },
            "getPriorityFlowControl": {
              "value": function () { return this.get_priority_flow_control.apply(this, arguments); }
            },
            "getPriorityFlowControlFlags": {
              "value": function () { return this.get_priority_flow_control_flags.apply(this, arguments); }
            },
            "getPriorityGroupBandwidth": {
              "value": function () { return this.get_priority_group_bandwidth.apply(this, arguments); }
            },
            "getPriorityGroupFlags": {
              "value": function () { return this.get_priority_group_flags.apply(this, arguments); }
            },
            "getPriorityGroupId": {
              "value": function () { return this.get_priority_group_id.apply(this, arguments); }
            },
            "getPriorityStrictBandwidth": {
              "value": function () { return this.get_priority_strict_bandwidth.apply(this, arguments); }
            },
            "getPriorityTrafficClass": {
              "value": function () { return this.get_priority_traffic_class.apply(this, arguments); }
            },
            "setPriorityBandwidth": {
              "value": function () { return this.set_priority_bandwidth.apply(this, arguments); }
            },
            "setPriorityFlowControl": {
              "value": function () { return this.set_priority_flow_control.apply(this, arguments); }
            },
            "setPriorityGroupBandwidth": {
              "value": function () { return this.set_priority_group_bandwidth.apply(this, arguments); }
            },
            "setPriorityGroupId": {
              "value": function () { return this.set_priority_group_id.apply(this, arguments); }
            },
            "setPriorityStrictBandwidth": {
              "value": function () { return this.set_priority_strict_bandwidth.apply(this, arguments); }
            },
            "setPriorityTrafficClass": {
              "value": function () { return this.set_priority_traffic_class.apply(this, arguments); }
            },
            "appFcoeFlags": {
              "get": function () { return this.app_fcoe_flags; },
              "set": function (value) { this.app_fcoe_flags = value; }
            },
            "appFcoeMode": {
              "get": function () { return this.app_fcoe_mode; },
              "set": function (value) { this.app_fcoe_mode = value; }
            },
            "appFcoePriority": {
              "get": function () { return this.app_fcoe_priority; },
              "set": function (value) { this.app_fcoe_priority = value; }
            },
            "appFipFlags": {
              "get": function () { return this.app_fip_flags; },
              "set": function (value) { this.app_fip_flags = value; }
            },
            "appFipPriority": {
              "get": function () { return this.app_fip_priority; },
              "set": function (value) { this.app_fip_priority = value; }
            },
            "appIscsiFlags": {
              "get": function () { return this.app_iscsi_flags; },
              "set": function (value) { this.app_iscsi_flags = value; }
            },
            "appIscsiPriority": {
              "get": function () { return this.app_iscsi_priority; },
              "set": function (value) { this.app_iscsi_priority = value; }
            },
            "priorityBandwidth": {
              "get": function () { return this.priority_bandwidth; },
              "set": function (value) { this.priority_bandwidth = value; }
            },
            "priorityFlowControl": {
              "get": function () { return this.priority_flow_control; },
              "set": function (value) { this.priority_flow_control = value; }
            },
            "priorityFlowControlFlags": {
              "get": function () { return this.priority_flow_control_flags; },
              "set": function (value) { this.priority_flow_control_flags = value; }
            },
            "priorityGroupBandwidth": {
              "get": function () { return this.priority_group_bandwidth; },
              "set": function (value) { this.priority_group_bandwidth = value; }
            },
            "priorityGroupFlags": {
              "get": function () { return this.priority_group_flags; },
              "set": function (value) { this.priority_group_flags = value; }
            },
            "priorityGroupId": {
              "get": function () { return this.priority_group_id; },
              "set": function (value) { this.priority_group_id = value; }
            },
            "priorityStrictBandwidth": {
              "get": function () { return this.priority_strict_bandwidth; },
              "set": function (value) { this.priority_strict_bandwidth = value; }
            },
            "priorityTrafficClass": {
              "get": function () { return this.priority_traffic_class; },
              "set": function (value) { this.priority_traffic_class = value; }
            }
          },
          "static": {}
        },
        "SettingGeneric": {
          "prototype": {},
          "static": {}
        },
        "SettingGsm": {
          "prototype": {
            "getApn": {
              "value": function () { return this.get_apn.apply(this, arguments); }
            },
            "getHomeOnly": {
              "value": function () { return this.get_home_only.apply(this, arguments); }
            },
            "getNetworkId": {
              "value": function () { return this.get_network_id.apply(this, arguments); }
            },
            "getNumber": {
              "value": function () { return this.get_number.apply(this, arguments); }
            },
            "getPassword": {
              "value": function () { return this.get_password.apply(this, arguments); }
            },
            "getPasswordFlags": {
              "value": function () { return this.get_password_flags.apply(this, arguments); }
            },
            "getPin": {
              "value": function () { return this.get_pin.apply(this, arguments); }
            },
            "getPinFlags": {
              "value": function () { return this.get_pin_flags.apply(this, arguments); }
            },
            "getUsername": {
              "value": function () { return this.get_username.apply(this, arguments); }
            },
            "homeOnly": {
              "get": function () { return this.home_only; },
              "set": function (value) { this.home_only = value; }
            },
            "networkId": {
              "get": function () { return this.network_id; },
              "set": function (value) { this.network_id = value; }
            },
            "passwordFlags": {
              "get": function () { return this.password_flags; },
              "set": function (value) { this.password_flags = value; }
            },
            "pinFlags": {
              "get": function () { return this.pin_flags; },
              "set": function (value) { this.pin_flags = value; }
            }
          },
          "static": {}
        },
        "SettingIP4Config": {
          "prototype": {
            "getDhcpClientId": {
              "value": function () { return this.get_dhcp_client_id.apply(this, arguments); }
            },
            "dhcpClientId": {
              "get": function () { return this.dhcp_client_id; },
              "set": function (value) { this.dhcp_client_id = value; }
            }
          },
          "static": {}
        },
        "SettingIP6Config": {
          "prototype": {
            "getIp6Privacy": {
              "value": function () { return this.get_ip6_privacy.apply(this, arguments); }
            },
            "ip6Privacy": {
              "get": function () { return this.ip6_privacy; },
              "set": function (value) { this.ip6_privacy = value; }
            }
          },
          "static": {}
        },
        "SettingIPConfig": {
          "prototype": {
            "addAddress": {
              "value": function () { return this.add_address.apply(this, arguments); }
            },
            "addDns": {
              "value": function () { return this.add_dns.apply(this, arguments); }
            },
            "addDnsSearch": {
              "value": function () { return this.add_dns_search.apply(this, arguments); }
            },
            "addRoute": {
              "value": function () { return this.add_route.apply(this, arguments); }
            },
            "clearAddresses": {
              "value": function () { return this.clear_addresses.apply(this, arguments); }
            },
            "clearDns": {
              "value": function () { return this.clear_dns.apply(this, arguments); }
            },
            "clearDnsSearches": {
              "value": function () { return this.clear_dns_searches.apply(this, arguments); }
            },
            "clearRoutes": {
              "value": function () { return this.clear_routes.apply(this, arguments); }
            },
            "getAddress": {
              "value": function () { return this.get_address.apply(this, arguments); }
            },
            "getDhcpHostname": {
              "value": function () { return this.get_dhcp_hostname.apply(this, arguments); }
            },
            "getDhcpSendHostname": {
              "value": function () { return this.get_dhcp_send_hostname.apply(this, arguments); }
            },
            "getDns": {
              "value": function () { return this.get_dns.apply(this, arguments); }
            },
            "getDnsSearch": {
              "value": function () { return this.get_dns_search.apply(this, arguments); }
            },
            "getGateway": {
              "value": function () { return this.get_gateway.apply(this, arguments); }
            },
            "getIgnoreAutoDns": {
              "value": function () { return this.get_ignore_auto_dns.apply(this, arguments); }
            },
            "getIgnoreAutoRoutes": {
              "value": function () { return this.get_ignore_auto_routes.apply(this, arguments); }
            },
            "getMayFail": {
              "value": function () { return this.get_may_fail.apply(this, arguments); }
            },
            "getMethod": {
              "value": function () { return this.get_method.apply(this, arguments); }
            },
            "getNeverDefault": {
              "value": function () { return this.get_never_default.apply(this, arguments); }
            },
            "getNumAddresses": {
              "value": function () { return this.get_num_addresses.apply(this, arguments); }
            },
            "getNumDns": {
              "value": function () { return this.get_num_dns.apply(this, arguments); }
            },
            "getNumDnsSearches": {
              "value": function () { return this.get_num_dns_searches.apply(this, arguments); }
            },
            "getNumRoutes": {
              "value": function () { return this.get_num_routes.apply(this, arguments); }
            },
            "getRoute": {
              "value": function () { return this.get_route.apply(this, arguments); }
            },
            "getRouteMetric": {
              "value": function () { return this.get_route_metric.apply(this, arguments); }
            },
            "removeAddress": {
              "value": function () { return this.remove_address.apply(this, arguments); }
            },
            "removeAddressByValue": {
              "value": function () { return this.remove_address_by_value.apply(this, arguments); }
            },
            "removeDns": {
              "value": function () { return this.remove_dns.apply(this, arguments); }
            },
            "removeDnsByValue": {
              "value": function () { return this.remove_dns_by_value.apply(this, arguments); }
            },
            "removeDnsSearch": {
              "value": function () { return this.remove_dns_search.apply(this, arguments); }
            },
            "removeDnsSearchByValue": {
              "value": function () { return this.remove_dns_search_by_value.apply(this, arguments); }
            },
            "removeRoute": {
              "value": function () { return this.remove_route.apply(this, arguments); }
            },
            "removeRouteByValue": {
              "value": function () { return this.remove_route_by_value.apply(this, arguments); }
            },
            "dhcpHostname": {
              "get": function () { return this.dhcp_hostname; },
              "set": function (value) { this.dhcp_hostname = value; }
            },
            "dhcpSendHostname": {
              "get": function () { return this.dhcp_send_hostname; },
              "set": function (value) { this.dhcp_send_hostname = value; }
            },
            "dnsSearch": {
              "get": function () { return this.dns_search; },
              "set": function (value) { this.dns_search = value; }
            },
            "ignoreAutoDns": {
              "get": function () { return this.ignore_auto_dns; },
              "set": function (value) { this.ignore_auto_dns = value; }
            },
            "ignoreAutoRoutes": {
              "get": function () { return this.ignore_auto_routes; },
              "set": function (value) { this.ignore_auto_routes = value; }
            },
            "mayFail": {
              "get": function () { return this.may_fail; },
              "set": function (value) { this.may_fail = value; }
            },
            "neverDefault": {
              "get": function () { return this.never_default; },
              "set": function (value) { this.never_default = value; }
            },
            "routeMetric": {
              "get": function () { return this.route_metric; },
              "set": function (value) { this.route_metric = value; }
            }
          },
          "static": {}
        },
        "SettingInfiniband": {
          "prototype": {
            "getMacAddress": {
              "value": function () { return this.get_mac_address.apply(this, arguments); }
            },
            "getMtu": {
              "value": function () { return this.get_mtu.apply(this, arguments); }
            },
            "getPKey": {
              "value": function () { return this.get_p_key.apply(this, arguments); }
            },
            "getParent": {
              "value": function () { return this.get_parent.apply(this, arguments); }
            },
            "getTransportMode": {
              "value": function () { return this.get_transport_mode.apply(this, arguments); }
            },
            "getVirtualInterfaceName": {
              "value": function () { return this.get_virtual_interface_name.apply(this, arguments); }
            },
            "macAddress": {
              "get": function () { return this.mac_address; },
              "set": function (value) { this.mac_address = value; }
            },
            "pKey": {
              "get": function () { return this.p_key; },
              "set": function (value) { this.p_key = value; }
            },
            "transportMode": {
              "get": function () { return this.transport_mode; },
              "set": function (value) { this.transport_mode = value; }
            }
          },
          "static": {}
        },
        "SettingOlpcMesh": {
          "prototype": {
            "getChannel": {
              "value": function () { return this.get_channel.apply(this, arguments); }
            },
            "getDhcpAnycastAddress": {
              "value": function () { return this.get_dhcp_anycast_address.apply(this, arguments); }
            },
            "getSsid": {
              "value": function () { return this.get_ssid.apply(this, arguments); }
            },
            "dhcpAnycastAddress": {
              "get": function () { return this.dhcp_anycast_address; },
              "set": function (value) { this.dhcp_anycast_address = value; }
            }
          },
          "static": {}
        },
        "SettingPpp": {
          "prototype": {
            "getBaud": {
              "value": function () { return this.get_baud.apply(this, arguments); }
            },
            "getCrtscts": {
              "value": function () { return this.get_crtscts.apply(this, arguments); }
            },
            "getLcpEchoFailure": {
              "value": function () { return this.get_lcp_echo_failure.apply(this, arguments); }
            },
            "getLcpEchoInterval": {
              "value": function () { return this.get_lcp_echo_interval.apply(this, arguments); }
            },
            "getMppeStateful": {
              "value": function () { return this.get_mppe_stateful.apply(this, arguments); }
            },
            "getMru": {
              "value": function () { return this.get_mru.apply(this, arguments); }
            },
            "getMtu": {
              "value": function () { return this.get_mtu.apply(this, arguments); }
            },
            "getNoVjComp": {
              "value": function () { return this.get_no_vj_comp.apply(this, arguments); }
            },
            "getNoauth": {
              "value": function () { return this.get_noauth.apply(this, arguments); }
            },
            "getNobsdcomp": {
              "value": function () { return this.get_nobsdcomp.apply(this, arguments); }
            },
            "getNodeflate": {
              "value": function () { return this.get_nodeflate.apply(this, arguments); }
            },
            "getRefuseChap": {
              "value": function () { return this.get_refuse_chap.apply(this, arguments); }
            },
            "getRefuseEap": {
              "value": function () { return this.get_refuse_eap.apply(this, arguments); }
            },
            "getRefuseMschap": {
              "value": function () { return this.get_refuse_mschap.apply(this, arguments); }
            },
            "getRefuseMschapv2": {
              "value": function () { return this.get_refuse_mschapv2.apply(this, arguments); }
            },
            "getRefusePap": {
              "value": function () { return this.get_refuse_pap.apply(this, arguments); }
            },
            "getRequireMppe": {
              "value": function () { return this.get_require_mppe.apply(this, arguments); }
            },
            "getRequireMppe128": {
              "value": function () { return this.get_require_mppe_128.apply(this, arguments); }
            },
            "lcpEchoFailure": {
              "get": function () { return this.lcp_echo_failure; },
              "set": function (value) { this.lcp_echo_failure = value; }
            },
            "lcpEchoInterval": {
              "get": function () { return this.lcp_echo_interval; },
              "set": function (value) { this.lcp_echo_interval = value; }
            },
            "mppeStateful": {
              "get": function () { return this.mppe_stateful; },
              "set": function (value) { this.mppe_stateful = value; }
            },
            "noVjComp": {
              "get": function () { return this.no_vj_comp; },
              "set": function (value) { this.no_vj_comp = value; }
            },
            "refuseChap": {
              "get": function () { return this.refuse_chap; },
              "set": function (value) { this.refuse_chap = value; }
            },
            "refuseEap": {
              "get": function () { return this.refuse_eap; },
              "set": function (value) { this.refuse_eap = value; }
            },
            "refuseMschap": {
              "get": function () { return this.refuse_mschap; },
              "set": function (value) { this.refuse_mschap = value; }
            },
            "refuseMschapv2": {
              "get": function () { return this.refuse_mschapv2; },
              "set": function (value) { this.refuse_mschapv2 = value; }
            },
            "refusePap": {
              "get": function () { return this.refuse_pap; },
              "set": function (value) { this.refuse_pap = value; }
            },
            "requireMppe": {
              "get": function () { return this.require_mppe; },
              "set": function (value) { this.require_mppe = value; }
            },
            "requireMppe128": {
              "get": function () { return this.require_mppe_128; },
              "set": function (value) { this.require_mppe_128 = value; }
            }
          },
          "static": {}
        },
        "SettingPppoe": {
          "prototype": {
            "getPassword": {
              "value": function () { return this.get_password.apply(this, arguments); }
            },
            "getPasswordFlags": {
              "value": function () { return this.get_password_flags.apply(this, arguments); }
            },
            "getService": {
              "value": function () { return this.get_service.apply(this, arguments); }
            },
            "getUsername": {
              "value": function () { return this.get_username.apply(this, arguments); }
            },
            "passwordFlags": {
              "get": function () { return this.password_flags; },
              "set": function (value) { this.password_flags = value; }
            }
          },
          "static": {}
        },
        "SettingSerial": {
          "prototype": {
            "getBaud": {
              "value": function () { return this.get_baud.apply(this, arguments); }
            },
            "getBits": {
              "value": function () { return this.get_bits.apply(this, arguments); }
            },
            "getParity": {
              "value": function () { return this.get_parity.apply(this, arguments); }
            },
            "getSendDelay": {
              "value": function () { return this.get_send_delay.apply(this, arguments); }
            },
            "getStopbits": {
              "value": function () { return this.get_stopbits.apply(this, arguments); }
            },
            "sendDelay": {
              "get": function () { return this.send_delay; },
              "set": function (value) { this.send_delay = value; }
            }
          },
          "static": {}
        },
        "SettingTeam": {
          "prototype": {
            "getConfig": {
              "value": function () { return this.get_config.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "SettingTeamPort": {
          "prototype": {
            "getConfig": {
              "value": function () { return this.get_config.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "SettingVlan": {
          "prototype": {
            "addPriority": {
              "value": function () { return this.add_priority.apply(this, arguments); }
            },
            "addPriorityStr": {
              "value": function () { return this.add_priority_str.apply(this, arguments); }
            },
            "clearPriorities": {
              "value": function () { return this.clear_priorities.apply(this, arguments); }
            },
            "getFlags": {
              "value": function () { return this.get_flags.apply(this, arguments); }
            },
            "getId": {
              "value": function () { return this.get_id.apply(this, arguments); }
            },
            "getNumPriorities": {
              "value": function () { return this.get_num_priorities.apply(this, arguments); }
            },
            "getParent": {
              "value": function () { return this.get_parent.apply(this, arguments); }
            },
            "getPriority": {
              "value": function () { return this.get_priority.apply(this, arguments); }
            },
            "removePriority": {
              "value": function () { return this.remove_priority.apply(this, arguments); }
            },
            "removePriorityByValue": {
              "value": function () { return this.remove_priority_by_value.apply(this, arguments); }
            },
            "removePriorityStrByValue": {
              "value": function () { return this.remove_priority_str_by_value.apply(this, arguments); }
            },
            "egressPriorityMap": {
              "get": function () { return this.egress_priority_map; },
              "set": function (value) { this.egress_priority_map = value; }
            },
            "ingressPriorityMap": {
              "get": function () { return this.ingress_priority_map; },
              "set": function (value) { this.ingress_priority_map = value; }
            }
          },
          "static": {}
        },
        "SettingVpn": {
          "prototype": {
            "addDataItem": {
              "value": function () { return this.add_data_item.apply(this, arguments); }
            },
            "addSecret": {
              "value": function () { return this.add_secret.apply(this, arguments); }
            },
            "foreachDataItem": {
              "value": function () { return this.foreach_data_item.apply(this, arguments); }
            },
            "foreachSecret": {
              "value": function () { return this.foreach_secret.apply(this, arguments); }
            },
            "getDataItem": {
              "value": function () { return this.get_data_item.apply(this, arguments); }
            },
            "getNumDataItems": {
              "value": function () { return this.get_num_data_items.apply(this, arguments); }
            },
            "getNumSecrets": {
              "value": function () { return this.get_num_secrets.apply(this, arguments); }
            },
            "getPersistent": {
              "value": function () { return this.get_persistent.apply(this, arguments); }
            },
            "getSecret": {
              "value": function () { return this.get_secret.apply(this, arguments); }
            },
            "getServiceType": {
              "value": function () { return this.get_service_type.apply(this, arguments); }
            },
            "getUserName": {
              "value": function () { return this.get_user_name.apply(this, arguments); }
            },
            "removeDataItem": {
              "value": function () { return this.remove_data_item.apply(this, arguments); }
            },
            "removeSecret": {
              "value": function () { return this.remove_secret.apply(this, arguments); }
            },
            "serviceType": {
              "get": function () { return this.service_type; },
              "set": function (value) { this.service_type = value; }
            },
            "userName": {
              "get": function () { return this.user_name; },
              "set": function (value) { this.user_name = value; }
            }
          },
          "static": {}
        },
        "SettingWimax": {
          "prototype": {
            "getMacAddress": {
              "value": function () { return this.get_mac_address.apply(this, arguments); }
            },
            "getNetworkName": {
              "value": function () { return this.get_network_name.apply(this, arguments); }
            },
            "macAddress": {
              "get": function () { return this.mac_address; },
              "set": function (value) { this.mac_address = value; }
            },
            "networkName": {
              "get": function () { return this.network_name; },
              "set": function (value) { this.network_name = value; }
            }
          },
          "static": {}
        },
        "SettingWired": {
          "prototype": {
            "addMacBlacklistItem": {
              "value": function () { return this.add_mac_blacklist_item.apply(this, arguments); }
            },
            "addS390Option": {
              "value": function () { return this.add_s390_option.apply(this, arguments); }
            },
            "clearMacBlacklistItems": {
              "value": function () { return this.clear_mac_blacklist_items.apply(this, arguments); }
            },
            "getAutoNegotiate": {
              "value": function () { return this.get_auto_negotiate.apply(this, arguments); }
            },
            "getClonedMacAddress": {
              "value": function () { return this.get_cloned_mac_address.apply(this, arguments); }
            },
            "getDuplex": {
              "value": function () { return this.get_duplex.apply(this, arguments); }
            },
            "getMacAddress": {
              "value": function () { return this.get_mac_address.apply(this, arguments); }
            },
            "getMacAddressBlacklist": {
              "value": function () { return this.get_mac_address_blacklist.apply(this, arguments); }
            },
            "getMacBlacklistItem": {
              "value": function () { return this.get_mac_blacklist_item.apply(this, arguments); }
            },
            "getMtu": {
              "value": function () { return this.get_mtu.apply(this, arguments); }
            },
            "getNumMacBlacklistItems": {
              "value": function () { return this.get_num_mac_blacklist_items.apply(this, arguments); }
            },
            "getNumS390Options": {
              "value": function () { return this.get_num_s390_options.apply(this, arguments); }
            },
            "getPort": {
              "value": function () { return this.get_port.apply(this, arguments); }
            },
            "getS390Nettype": {
              "value": function () { return this.get_s390_nettype.apply(this, arguments); }
            },
            "getS390Option": {
              "value": function () { return this.get_s390_option.apply(this, arguments); }
            },
            "getS390OptionByKey": {
              "value": function () { return this.get_s390_option_by_key.apply(this, arguments); }
            },
            "getS390Subchannels": {
              "value": function () { return this.get_s390_subchannels.apply(this, arguments); }
            },
            "getSpeed": {
              "value": function () { return this.get_speed.apply(this, arguments); }
            },
            "getValidS390Options": {
              "value": function () { return this.get_valid_s390_options.apply(this, arguments); }
            },
            "getWakeOnLan": {
              "value": function () { return this.get_wake_on_lan.apply(this, arguments); }
            },
            "getWakeOnLanPassword": {
              "value": function () { return this.get_wake_on_lan_password.apply(this, arguments); }
            },
            "removeMacBlacklistItem": {
              "value": function () { return this.remove_mac_blacklist_item.apply(this, arguments); }
            },
            "removeMacBlacklistItemByValue": {
              "value": function () { return this.remove_mac_blacklist_item_by_value.apply(this, arguments); }
            },
            "removeS390Option": {
              "value": function () { return this.remove_s390_option.apply(this, arguments); }
            },
            "autoNegotiate": {
              "get": function () { return this.auto_negotiate; },
              "set": function (value) { this.auto_negotiate = value; }
            },
            "clonedMacAddress": {
              "get": function () { return this.cloned_mac_address; },
              "set": function (value) { this.cloned_mac_address = value; }
            },
            "macAddress": {
              "get": function () { return this.mac_address; },
              "set": function (value) { this.mac_address = value; }
            },
            "macAddressBlacklist": {
              "get": function () { return this.mac_address_blacklist; },
              "set": function (value) { this.mac_address_blacklist = value; }
            },
            "s390Nettype": {
              "get": function () { return this.s390_nettype; },
              "set": function (value) { this.s390_nettype = value; }
            },
            "s390Options": {
              "get": function () { return this.s390_options; },
              "set": function (value) { this.s390_options = value; }
            },
            "s390Subchannels": {
              "get": function () { return this.s390_subchannels; },
              "set": function (value) { this.s390_subchannels = value; }
            },
            "wakeOnLan": {
              "get": function () { return this.wake_on_lan; },
              "set": function (value) { this.wake_on_lan = value; }
            },
            "wakeOnLanPassword": {
              "get": function () { return this.wake_on_lan_password; },
              "set": function (value) { this.wake_on_lan_password = value; }
            }
          },
          "static": {}
        },
        "SettingWireless": {
          "prototype": {
            "addMacBlacklistItem": {
              "value": function () { return this.add_mac_blacklist_item.apply(this, arguments); }
            },
            "addSeenBssid": {
              "value": function () { return this.add_seen_bssid.apply(this, arguments); }
            },
            "apSecurityCompatible": {
              "value": function () { return this.ap_security_compatible.apply(this, arguments); }
            },
            "clearMacBlacklistItems": {
              "value": function () { return this.clear_mac_blacklist_items.apply(this, arguments); }
            },
            "getBand": {
              "value": function () { return this.get_band.apply(this, arguments); }
            },
            "getBssid": {
              "value": function () { return this.get_bssid.apply(this, arguments); }
            },
            "getChannel": {
              "value": function () { return this.get_channel.apply(this, arguments); }
            },
            "getClonedMacAddress": {
              "value": function () { return this.get_cloned_mac_address.apply(this, arguments); }
            },
            "getHidden": {
              "value": function () { return this.get_hidden.apply(this, arguments); }
            },
            "getMacAddress": {
              "value": function () { return this.get_mac_address.apply(this, arguments); }
            },
            "getMacAddressBlacklist": {
              "value": function () { return this.get_mac_address_blacklist.apply(this, arguments); }
            },
            "getMacBlacklistItem": {
              "value": function () { return this.get_mac_blacklist_item.apply(this, arguments); }
            },
            "getMode": {
              "value": function () { return this.get_mode.apply(this, arguments); }
            },
            "getMtu": {
              "value": function () { return this.get_mtu.apply(this, arguments); }
            },
            "getNumMacBlacklistItems": {
              "value": function () { return this.get_num_mac_blacklist_items.apply(this, arguments); }
            },
            "getNumSeenBssids": {
              "value": function () { return this.get_num_seen_bssids.apply(this, arguments); }
            },
            "getRate": {
              "value": function () { return this.get_rate.apply(this, arguments); }
            },
            "getSeenBssid": {
              "value": function () { return this.get_seen_bssid.apply(this, arguments); }
            },
            "getSsid": {
              "value": function () { return this.get_ssid.apply(this, arguments); }
            },
            "getTxPower": {
              "value": function () { return this.get_tx_power.apply(this, arguments); }
            },
            "removeMacBlacklistItem": {
              "value": function () { return this.remove_mac_blacklist_item.apply(this, arguments); }
            },
            "removeMacBlacklistItemByValue": {
              "value": function () { return this.remove_mac_blacklist_item_by_value.apply(this, arguments); }
            },
            "clonedMacAddress": {
              "get": function () { return this.cloned_mac_address; },
              "set": function (value) { this.cloned_mac_address = value; }
            },
            "macAddress": {
              "get": function () { return this.mac_address; },
              "set": function (value) { this.mac_address = value; }
            },
            "macAddressBlacklist": {
              "get": function () { return this.mac_address_blacklist; },
              "set": function (value) { this.mac_address_blacklist = value; }
            },
            "seenBssids": {
              "get": function () { return this.seen_bssids; },
              "set": function (value) { this.seen_bssids = value; }
            },
            "txPower": {
              "get": function () { return this.tx_power; },
              "set": function (value) { this.tx_power = value; }
            }
          },
          "static": {}
        },
        "SettingWirelessSecurity": {
          "prototype": {
            "addGroup": {
              "value": function () { return this.add_group.apply(this, arguments); }
            },
            "addPairwise": {
              "value": function () { return this.add_pairwise.apply(this, arguments); }
            },
            "addProto": {
              "value": function () { return this.add_proto.apply(this, arguments); }
            },
            "clearGroups": {
              "value": function () { return this.clear_groups.apply(this, arguments); }
            },
            "clearPairwise": {
              "value": function () { return this.clear_pairwise.apply(this, arguments); }
            },
            "clearProtos": {
              "value": function () { return this.clear_protos.apply(this, arguments); }
            },
            "getAuthAlg": {
              "value": function () { return this.get_auth_alg.apply(this, arguments); }
            },
            "getGroup": {
              "value": function () { return this.get_group.apply(this, arguments); }
            },
            "getKeyMgmt": {
              "value": function () { return this.get_key_mgmt.apply(this, arguments); }
            },
            "getLeapPassword": {
              "value": function () { return this.get_leap_password.apply(this, arguments); }
            },
            "getLeapPasswordFlags": {
              "value": function () { return this.get_leap_password_flags.apply(this, arguments); }
            },
            "getLeapUsername": {
              "value": function () { return this.get_leap_username.apply(this, arguments); }
            },
            "getNumGroups": {
              "value": function () { return this.get_num_groups.apply(this, arguments); }
            },
            "getNumPairwise": {
              "value": function () { return this.get_num_pairwise.apply(this, arguments); }
            },
            "getNumProtos": {
              "value": function () { return this.get_num_protos.apply(this, arguments); }
            },
            "getPairwise": {
              "value": function () { return this.get_pairwise.apply(this, arguments); }
            },
            "getProto": {
              "value": function () { return this.get_proto.apply(this, arguments); }
            },
            "getPsk": {
              "value": function () { return this.get_psk.apply(this, arguments); }
            },
            "getPskFlags": {
              "value": function () { return this.get_psk_flags.apply(this, arguments); }
            },
            "getWepKey": {
              "value": function () { return this.get_wep_key.apply(this, arguments); }
            },
            "getWepKeyFlags": {
              "value": function () { return this.get_wep_key_flags.apply(this, arguments); }
            },
            "getWepKeyType": {
              "value": function () { return this.get_wep_key_type.apply(this, arguments); }
            },
            "getWepTxKeyidx": {
              "value": function () { return this.get_wep_tx_keyidx.apply(this, arguments); }
            },
            "removeGroup": {
              "value": function () { return this.remove_group.apply(this, arguments); }
            },
            "removeGroupByValue": {
              "value": function () { return this.remove_group_by_value.apply(this, arguments); }
            },
            "removePairwise": {
              "value": function () { return this.remove_pairwise.apply(this, arguments); }
            },
            "removePairwiseByValue": {
              "value": function () { return this.remove_pairwise_by_value.apply(this, arguments); }
            },
            "removeProto": {
              "value": function () { return this.remove_proto.apply(this, arguments); }
            },
            "removeProtoByValue": {
              "value": function () { return this.remove_proto_by_value.apply(this, arguments); }
            },
            "setWepKey": {
              "value": function () { return this.set_wep_key.apply(this, arguments); }
            },
            "authAlg": {
              "get": function () { return this.auth_alg; },
              "set": function (value) { this.auth_alg = value; }
            },
            "keyMgmt": {
              "get": function () { return this.key_mgmt; },
              "set": function (value) { this.key_mgmt = value; }
            },
            "leapPassword": {
              "get": function () { return this.leap_password; },
              "set": function (value) { this.leap_password = value; }
            },
            "leapPasswordFlags": {
              "get": function () { return this.leap_password_flags; },
              "set": function (value) { this.leap_password_flags = value; }
            },
            "leapUsername": {
              "get": function () { return this.leap_username; },
              "set": function (value) { this.leap_username = value; }
            },
            "pskFlags": {
              "get": function () { return this.psk_flags; },
              "set": function (value) { this.psk_flags = value; }
            },
            "wepKeyFlags": {
              "get": function () { return this.wep_key_flags; },
              "set": function (value) { this.wep_key_flags = value; }
            },
            "wepKeyType": {
              "get": function () { return this.wep_key_type; },
              "set": function (value) { this.wep_key_type = value; }
            },
            "wepKey0": {
              "get": function () { return this.wep_key0; },
              "set": function (value) { this.wep_key0 = value; }
            },
            "wepKey1": {
              "get": function () { return this.wep_key1; },
              "set": function (value) { this.wep_key1 = value; }
            },
            "wepKey2": {
              "get": function () { return this.wep_key2; },
              "set": function (value) { this.wep_key2 = value; }
            },
            "wepKey3": {
              "get": function () { return this.wep_key3; },
              "set": function (value) { this.wep_key3 = value; }
            },
            "wepTxKeyidx": {
              "get": function () { return this.wep_tx_keyidx; },
              "set": function (value) { this.wep_tx_keyidx = value; }
            }
          },
          "static": {}
        },
        "SimpleConnection": {
          "prototype": {},
          "static": {
            "newClone": {
              "value": function () { return this.new_clone.apply(this, arguments); }
            },
            "newFromDbus": {
              "value": function () { return this.new_from_dbus.apply(this, arguments); }
            }
          }
        },
        "VpnConnection": {
          "prototype": {
            "getBanner": {
              "value": function () { return this.get_banner.apply(this, arguments); }
            },
            "getVpnState": {
              "value": function () { return this.get_vpn_state.apply(this, arguments); }
            },
            "vpnState": {
              "get": function () { return this.vpn_state; },
              "set": function (value) { this.vpn_state = value; }
            }
          },
          "static": {}
        },
        "WimaxNsp": {
          "prototype": {
            "connectionValid": {
              "value": function () { return this.connection_valid.apply(this, arguments); }
            },
            "filterConnections": {
              "value": function () { return this.filter_connections.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getNetworkType": {
              "value": function () { return this.get_network_type.apply(this, arguments); }
            },
            "getSignalQuality": {
              "value": function () { return this.get_signal_quality.apply(this, arguments); }
            },
            "networkType": {
              "get": function () { return this.network_type; },
              "set": function (value) { this.network_type = value; }
            },
            "signalQuality": {
              "get": function () { return this.signal_quality; },
              "set": function (value) { this.signal_quality = value; }
            }
          },
          "static": {}
        }
      },
      "static": {
        "agentManagerErrorQuark": {
          "value": function () { return this.agent_manager_error_quark.apply(this, arguments); }
        },
        "clientErrorQuark": {
          "value": function () { return this.client_error_quark.apply(this, arguments); }
        },
        "connectionErrorQuark": {
          "value": function () { return this.connection_error_quark.apply(this, arguments); }
        },
        "cryptoErrorQuark": {
          "value": function () { return this.crypto_error_quark.apply(this, arguments); }
        },
        "deviceErrorQuark": {
          "value": function () { return this.device_error_quark.apply(this, arguments); }
        },
        "managerErrorQuark": {
          "value": function () { return this.manager_error_quark.apply(this, arguments); }
        },
        "secretAgentErrorQuark": {
          "value": function () { return this.secret_agent_error_quark.apply(this, arguments); }
        },
        "settingsErrorQuark": {
          "value": function () { return this.settings_error_quark.apply(this, arguments); }
        },
        "utilsApModeSecurityValid": {
          "value": function () { return this.utils_ap_mode_security_valid.apply(this, arguments); }
        },
        "utilsBin2hexstr": {
          "value": function () { return this.utils_bin2hexstr.apply(this, arguments); }
        },
        "utilsCheckVirtualDeviceCompatibility": {
          "value": function () { return this.utils_check_virtual_device_compatibility.apply(this, arguments); }
        },
        "utilsEnumFromStr": {
          "value": function () { return this.utils_enum_from_str.apply(this, arguments); }
        },
        "utilsEnumToStr": {
          "value": function () { return this.utils_enum_to_str.apply(this, arguments); }
        },
        "utilsEscapeSsid": {
          "value": function () { return this.utils_escape_ssid.apply(this, arguments); }
        },
        "utilsFileIsCertificate": {
          "value": function () { return this.utils_file_is_certificate.apply(this, arguments); }
        },
        "utilsFileIsPkcs12": {
          "value": function () { return this.utils_file_is_pkcs12.apply(this, arguments); }
        },
        "utilsFileIsPrivateKey": {
          "value": function () { return this.utils_file_is_private_key.apply(this, arguments); }
        },
        "utilsFileSearchInPaths": {
          "value": function () { return this.utils_file_search_in_paths.apply(this, arguments); }
        },
        "utilsHexstr2bin": {
          "value": function () { return this.utils_hexstr2bin.apply(this, arguments); }
        },
        "utilsHwaddrAtoba": {
          "value": function () { return this.utils_hwaddr_atoba.apply(this, arguments); }
        },
        "utilsHwaddrAton": {
          "value": function () { return this.utils_hwaddr_aton.apply(this, arguments); }
        },
        "utilsHwaddrCanonical": {
          "value": function () { return this.utils_hwaddr_canonical.apply(this, arguments); }
        },
        "utilsHwaddrLen": {
          "value": function () { return this.utils_hwaddr_len.apply(this, arguments); }
        },
        "utilsHwaddrMatches": {
          "value": function () { return this.utils_hwaddr_matches.apply(this, arguments); }
        },
        "utilsHwaddrNtoa": {
          "value": function () { return this.utils_hwaddr_ntoa.apply(this, arguments); }
        },
        "utilsHwaddrValid": {
          "value": function () { return this.utils_hwaddr_valid.apply(this, arguments); }
        },
        "utilsIfaceValidName": {
          "value": function () { return this.utils_iface_valid_name.apply(this, arguments); }
        },
        "utilsInet4Ntop": {
          "value": function () { return this.utils_inet4_ntop.apply(this, arguments); }
        },
        "utilsInet6Ntop": {
          "value": function () { return this.utils_inet6_ntop.apply(this, arguments); }
        },
        "utilsIp4AddressesFromVariant": {
          "value": function () { return this.utils_ip4_addresses_from_variant.apply(this, arguments); }
        },
        "utilsIp4AddressesToVariant": {
          "value": function () { return this.utils_ip4_addresses_to_variant.apply(this, arguments); }
        },
        "utilsIp4DnsFromVariant": {
          "value": function () { return this.utils_ip4_dns_from_variant.apply(this, arguments); }
        },
        "utilsIp4DnsToVariant": {
          "value": function () { return this.utils_ip4_dns_to_variant.apply(this, arguments); }
        },
        "utilsIp4GetDefaultPrefix": {
          "value": function () { return this.utils_ip4_get_default_prefix.apply(this, arguments); }
        },
        "utilsIp4NetmaskToPrefix": {
          "value": function () { return this.utils_ip4_netmask_to_prefix.apply(this, arguments); }
        },
        "utilsIp4PrefixToNetmask": {
          "value": function () { return this.utils_ip4_prefix_to_netmask.apply(this, arguments); }
        },
        "utilsIp4RoutesFromVariant": {
          "value": function () { return this.utils_ip4_routes_from_variant.apply(this, arguments); }
        },
        "utilsIp4RoutesToVariant": {
          "value": function () { return this.utils_ip4_routes_to_variant.apply(this, arguments); }
        },
        "utilsIp6AddressesFromVariant": {
          "value": function () { return this.utils_ip6_addresses_from_variant.apply(this, arguments); }
        },
        "utilsIp6AddressesToVariant": {
          "value": function () { return this.utils_ip6_addresses_to_variant.apply(this, arguments); }
        },
        "utilsIp6DnsFromVariant": {
          "value": function () { return this.utils_ip6_dns_from_variant.apply(this, arguments); }
        },
        "utilsIp6DnsToVariant": {
          "value": function () { return this.utils_ip6_dns_to_variant.apply(this, arguments); }
        },
        "utilsIp6RoutesFromVariant": {
          "value": function () { return this.utils_ip6_routes_from_variant.apply(this, arguments); }
        },
        "utilsIp6RoutesToVariant": {
          "value": function () { return this.utils_ip6_routes_to_variant.apply(this, arguments); }
        },
        "utilsIpAddressesFromVariant": {
          "value": function () { return this.utils_ip_addresses_from_variant.apply(this, arguments); }
        },
        "utilsIpAddressesToVariant": {
          "value": function () { return this.utils_ip_addresses_to_variant.apply(this, arguments); }
        },
        "utilsIpRoutesFromVariant": {
          "value": function () { return this.utils_ip_routes_from_variant.apply(this, arguments); }
        },
        "utilsIpRoutesToVariant": {
          "value": function () { return this.utils_ip_routes_to_variant.apply(this, arguments); }
        },
        "utilsIpaddrValid": {
          "value": function () { return this.utils_ipaddr_valid.apply(this, arguments); }
        },
        "utilsIsEmptySsid": {
          "value": function () { return this.utils_is_empty_ssid.apply(this, arguments); }
        },
        "utilsIsUuid": {
          "value": function () { return this.utils_is_uuid.apply(this, arguments); }
        },
        "utilsSameSsid": {
          "value": function () { return this.utils_same_ssid.apply(this, arguments); }
        },
        "utilsSecurityValid": {
          "value": function () { return this.utils_security_valid.apply(this, arguments); }
        },
        "utilsSsidToUtf8": {
          "value": function () { return this.utils_ssid_to_utf8.apply(this, arguments); }
        },
        "utilsUuidGenerate": {
          "value": function () { return this.utils_uuid_generate.apply(this, arguments); }
        },
        "utilsWepKeyValid": {
          "value": function () { return this.utils_wep_key_valid.apply(this, arguments); }
        },
        "utilsWifi2ghzFreqs": {
          "value": function () { return this.utils_wifi_2ghz_freqs.apply(this, arguments); }
        },
        "utilsWifi5ghzFreqs": {
          "value": function () { return this.utils_wifi_5ghz_freqs.apply(this, arguments); }
        },
        "utilsWifiChannelToFreq": {
          "value": function () { return this.utils_wifi_channel_to_freq.apply(this, arguments); }
        },
        "utilsWifiFindNextChannel": {
          "value": function () { return this.utils_wifi_find_next_channel.apply(this, arguments); }
        },
        "utilsWifiFreqToChannel": {
          "value": function () { return this.utils_wifi_freq_to_channel.apply(this, arguments); }
        },
        "utilsWifiIsChannelValid": {
          "value": function () { return this.utils_wifi_is_channel_valid.apply(this, arguments); }
        },
        "utilsWifiStrengthBars": {
          "value": function () { return this.utils_wifi_strength_bars.apply(this, arguments); }
        },
        "utilsWpaPskValid": {
          "value": function () { return this.utils_wpa_psk_valid.apply(this, arguments); }
        },
        "vpnPluginErrorQuark": {
          "value": function () { return this.vpn_plugin_error_quark.apply(this, arguments); }
        }
      }
    },
    "NMClient": {
      "class": {
        "AccessPoint": {
          "prototype": {
            "connectionValid": {
              "value": function () { return this.connection_valid.apply(this, arguments); }
            },
            "filterConnections": {
              "value": function () { return this.filter_connections.apply(this, arguments); }
            },
            "getBssid": {
              "value": function () { return this.get_bssid.apply(this, arguments); }
            },
            "getFlags": {
              "value": function () { return this.get_flags.apply(this, arguments); }
            },
            "getFrequency": {
              "value": function () { return this.get_frequency.apply(this, arguments); }
            },
            "getHwAddress": {
              "value": function () { return this.get_hw_address.apply(this, arguments); }
            },
            "getLastSeen": {
              "value": function () { return this.get_last_seen.apply(this, arguments); }
            },
            "getMaxBitrate": {
              "value": function () { return this.get_max_bitrate.apply(this, arguments); }
            },
            "getMode": {
              "value": function () { return this.get_mode.apply(this, arguments); }
            },
            "getRsnFlags": {
              "value": function () { return this.get_rsn_flags.apply(this, arguments); }
            },
            "getSsid": {
              "value": function () { return this.get_ssid.apply(this, arguments); }
            },
            "getStrength": {
              "value": function () { return this.get_strength.apply(this, arguments); }
            },
            "getWpaFlags": {
              "value": function () { return this.get_wpa_flags.apply(this, arguments); }
            },
            "hwAddress": {
              "get": function () { return this.hw_address; },
              "set": function (value) { this.hw_address = value; }
            },
            "lastSeen": {
              "get": function () { return this.last_seen; },
              "set": function (value) { this.last_seen = value; }
            },
            "maxBitrate": {
              "get": function () { return this.max_bitrate; },
              "set": function (value) { this.max_bitrate = value; }
            },
            "rsnFlags": {
              "get": function () { return this.rsn_flags; },
              "set": function (value) { this.rsn_flags = value; }
            },
            "wpaFlags": {
              "get": function () { return this.wpa_flags; },
              "set": function (value) { this.wpa_flags = value; }
            }
          },
          "static": {}
        },
        "ActiveConnection": {
          "prototype": {
            "getConnection": {
              "value": function () { return this.get_connection.apply(this, arguments); }
            },
            "getConnectionType": {
              "value": function () { return this.get_connection_type.apply(this, arguments); }
            },
            "getDefault": {
              "value": function () { return this.get_default.apply(this, arguments); }
            },
            "getDefault6": {
              "value": function () { return this.get_default6.apply(this, arguments); }
            },
            "getDevices": {
              "value": function () { return this.get_devices.apply(this, arguments); }
            },
            "getDhcp4Config": {
              "value": function () { return this.get_dhcp4_config.apply(this, arguments); }
            },
            "getDhcp6Config": {
              "value": function () { return this.get_dhcp6_config.apply(this, arguments); }
            },
            "getId": {
              "value": function () { return this.get_id.apply(this, arguments); }
            },
            "getIp4Config": {
              "value": function () { return this.get_ip4_config.apply(this, arguments); }
            },
            "getIp6Config": {
              "value": function () { return this.get_ip6_config.apply(this, arguments); }
            },
            "getMaster": {
              "value": function () { return this.get_master.apply(this, arguments); }
            },
            "getSpecificObject": {
              "value": function () { return this.get_specific_object.apply(this, arguments); }
            },
            "getState": {
              "value": function () { return this.get_state.apply(this, arguments); }
            },
            "getUuid": {
              "value": function () { return this.get_uuid.apply(this, arguments); }
            },
            "getVpn": {
              "value": function () { return this.get_vpn.apply(this, arguments); }
            },
            "dhcp4Config": {
              "get": function () { return this.dhcp4_config; },
              "set": function (value) { this.dhcp4_config = value; }
            },
            "dhcp6Config": {
              "get": function () { return this.dhcp6_config; },
              "set": function (value) { this.dhcp6_config = value; }
            },
            "ip4Config": {
              "get": function () { return this.ip4_config; },
              "set": function (value) { this.ip4_config = value; }
            },
            "ip6Config": {
              "get": function () { return this.ip6_config; },
              "set": function (value) { this.ip6_config = value; }
            },
            "specificObject": {
              "get": function () { return this.specific_object; },
              "set": function (value) { this.specific_object = value; }
            }
          },
          "static": {}
        },
        "Client": {
          "prototype": {
            "activateConnection": {
              "value": function () { return this.activate_connection.apply(this, arguments); }
            },
            "addAndActivateConnection": {
              "value": function () { return this.add_and_activate_connection.apply(this, arguments); }
            },
            "checkConnectivity": {
              "value": function () { return this.check_connectivity.apply(this, arguments); }
            },
            "checkConnectivityAsync": {
              "value": function () { return this.check_connectivity_async.apply(this, arguments); }
            },
            "checkConnectivityFinish": {
              "value": function () { return this.check_connectivity_finish.apply(this, arguments); }
            },
            "deactivateConnection": {
              "value": function () { return this.deactivate_connection.apply(this, arguments); }
            },
            "getActivatingConnection": {
              "value": function () { return this.get_activating_connection.apply(this, arguments); }
            },
            "getActiveConnections": {
              "value": function () { return this.get_active_connections.apply(this, arguments); }
            },
            "getConnectivity": {
              "value": function () { return this.get_connectivity.apply(this, arguments); }
            },
            "getDeviceByIface": {
              "value": function () { return this.get_device_by_iface.apply(this, arguments); }
            },
            "getDeviceByPath": {
              "value": function () { return this.get_device_by_path.apply(this, arguments); }
            },
            "getDevices": {
              "value": function () { return this.get_devices.apply(this, arguments); }
            },
            "getLogging": {
              "value": function () { return this.get_logging.apply(this, arguments); }
            },
            "getManagerRunning": {
              "value": function () { return this.get_manager_running.apply(this, arguments); }
            },
            "getPermissionResult": {
              "value": function () { return this.get_permission_result.apply(this, arguments); }
            },
            "getPrimaryConnection": {
              "value": function () { return this.get_primary_connection.apply(this, arguments); }
            },
            "getStartup": {
              "value": function () { return this.get_startup.apply(this, arguments); }
            },
            "getState": {
              "value": function () { return this.get_state.apply(this, arguments); }
            },
            "getVersion": {
              "value": function () { return this.get_version.apply(this, arguments); }
            },
            "networkingGetEnabled": {
              "value": function () { return this.networking_get_enabled.apply(this, arguments); }
            },
            "networkingSetEnabled": {
              "value": function () { return this.networking_set_enabled.apply(this, arguments); }
            },
            "setLogging": {
              "value": function () { return this.set_logging.apply(this, arguments); }
            },
            "wimaxGetEnabled": {
              "value": function () { return this.wimax_get_enabled.apply(this, arguments); }
            },
            "wimaxHardwareGetEnabled": {
              "value": function () { return this.wimax_hardware_get_enabled.apply(this, arguments); }
            },
            "wimaxSetEnabled": {
              "value": function () { return this.wimax_set_enabled.apply(this, arguments); }
            },
            "wirelessGetEnabled": {
              "value": function () { return this.wireless_get_enabled.apply(this, arguments); }
            },
            "wirelessHardwareGetEnabled": {
              "value": function () { return this.wireless_hardware_get_enabled.apply(this, arguments); }
            },
            "wirelessSetEnabled": {
              "value": function () { return this.wireless_set_enabled.apply(this, arguments); }
            },
            "wwanGetEnabled": {
              "value": function () { return this.wwan_get_enabled.apply(this, arguments); }
            },
            "wwanHardwareGetEnabled": {
              "value": function () { return this.wwan_hardware_get_enabled.apply(this, arguments); }
            },
            "wwanSetEnabled": {
              "value": function () { return this.wwan_set_enabled.apply(this, arguments); }
            },
            "activatingConnection": {
              "get": function () { return this.activating_connection; },
              "set": function (value) { this.activating_connection = value; }
            },
            "activeConnections": {
              "get": function () { return this.active_connections; },
              "set": function (value) { this.active_connections = value; }
            },
            "managerRunning": {
              "get": function () { return this.manager_running; },
              "set": function (value) { this.manager_running = value; }
            },
            "networkingEnabled": {
              "get": function () { return this.networking_enabled; },
              "set": function (value) { this.networking_enabled = value; }
            },
            "primaryConnection": {
              "get": function () { return this.primary_connection; },
              "set": function (value) { this.primary_connection = value; }
            },
            "wimaxEnabled": {
              "get": function () { return this.wimax_enabled; },
              "set": function (value) { this.wimax_enabled = value; }
            },
            "wimaxHardwareEnabled": {
              "get": function () { return this.wimax_hardware_enabled; },
              "set": function (value) { this.wimax_hardware_enabled = value; }
            },
            "wirelessEnabled": {
              "get": function () { return this.wireless_enabled; },
              "set": function (value) { this.wireless_enabled = value; }
            },
            "wirelessHardwareEnabled": {
              "get": function () { return this.wireless_hardware_enabled; },
              "set": function (value) { this.wireless_hardware_enabled = value; }
            },
            "wwanEnabled": {
              "get": function () { return this.wwan_enabled; },
              "set": function (value) { this.wwan_enabled = value; }
            },
            "wwanHardwareEnabled": {
              "get": function () { return this.wwan_hardware_enabled; },
              "set": function (value) { this.wwan_hardware_enabled = value; }
            }
          },
          "static": {
            "newAsync": {
              "value": function () { return this.new_async.apply(this, arguments); }
            }
          }
        },
        "DHCP4Config": {
          "prototype": {
            "getOneOption": {
              "value": function () { return this.get_one_option.apply(this, arguments); }
            },
            "getOptions": {
              "value": function () { return this.get_options.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DHCP6Config": {
          "prototype": {
            "getOneOption": {
              "value": function () { return this.get_one_option.apply(this, arguments); }
            },
            "getOptions": {
              "value": function () { return this.get_options.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Device": {
          "prototype": {
            "connectionCompatible": {
              "value": function () { return this.connection_compatible.apply(this, arguments); }
            },
            "connectionValid": {
              "value": function () { return this.connection_valid.apply(this, arguments); }
            },
            "filterConnections": {
              "value": function () { return this.filter_connections.apply(this, arguments); }
            },
            "getActiveConnection": {
              "value": function () { return this.get_active_connection.apply(this, arguments); }
            },
            "getAutoconnect": {
              "value": function () { return this.get_autoconnect.apply(this, arguments); }
            },
            "getAvailableConnections": {
              "value": function () { return this.get_available_connections.apply(this, arguments); }
            },
            "getCapabilities": {
              "value": function () { return this.get_capabilities.apply(this, arguments); }
            },
            "getDescription": {
              "value": function () { return this.get_description.apply(this, arguments); }
            },
            "getDeviceType": {
              "value": function () { return this.get_device_type.apply(this, arguments); }
            },
            "getDhcp4Config": {
              "value": function () { return this.get_dhcp4_config.apply(this, arguments); }
            },
            "getDhcp6Config": {
              "value": function () { return this.get_dhcp6_config.apply(this, arguments); }
            },
            "getDriver": {
              "value": function () { return this.get_driver.apply(this, arguments); }
            },
            "getDriverVersion": {
              "value": function () { return this.get_driver_version.apply(this, arguments); }
            },
            "getFirmwareMissing": {
              "value": function () { return this.get_firmware_missing.apply(this, arguments); }
            },
            "getFirmwareVersion": {
              "value": function () { return this.get_firmware_version.apply(this, arguments); }
            },
            "getHwAddress": {
              "value": function () { return this.get_hw_address.apply(this, arguments); }
            },
            "getIface": {
              "value": function () { return this.get_iface.apply(this, arguments); }
            },
            "getIp4Config": {
              "value": function () { return this.get_ip4_config.apply(this, arguments); }
            },
            "getIp6Config": {
              "value": function () { return this.get_ip6_config.apply(this, arguments); }
            },
            "getIpIface": {
              "value": function () { return this.get_ip_iface.apply(this, arguments); }
            },
            "getManaged": {
              "value": function () { return this.get_managed.apply(this, arguments); }
            },
            "getMtu": {
              "value": function () { return this.get_mtu.apply(this, arguments); }
            },
            "getPhysicalPortId": {
              "value": function () { return this.get_physical_port_id.apply(this, arguments); }
            },
            "getProduct": {
              "value": function () { return this.get_product.apply(this, arguments); }
            },
            "getSettingType": {
              "value": function () { return this.get_setting_type.apply(this, arguments); }
            },
            "getState": {
              "value": function () { return this.get_state.apply(this, arguments); }
            },
            "getStateReason": {
              "value": function () { return this.get_state_reason.apply(this, arguments); }
            },
            "getTypeDescription": {
              "value": function () { return this.get_type_description.apply(this, arguments); }
            },
            "getUdi": {
              "value": function () { return this.get_udi.apply(this, arguments); }
            },
            "getVendor": {
              "value": function () { return this.get_vendor.apply(this, arguments); }
            },
            "isSoftware": {
              "value": function () { return this.is_software.apply(this, arguments); }
            },
            "setAutoconnect": {
              "value": function () { return this.set_autoconnect.apply(this, arguments); }
            },
            "activeConnection": {
              "get": function () { return this.active_connection; },
              "set": function (value) { this.active_connection = value; }
            },
            "availableConnections": {
              "get": function () { return this.available_connections; },
              "set": function (value) { this.available_connections = value; }
            },
            "deviceType": {
              "get": function () { return this.device_type; },
              "set": function (value) { this.device_type = value; }
            },
            "dhcp4Config": {
              "get": function () { return this.dhcp4_config; },
              "set": function (value) { this.dhcp4_config = value; }
            },
            "dhcp6Config": {
              "get": function () { return this.dhcp6_config; },
              "set": function (value) { this.dhcp6_config = value; }
            },
            "driverVersion": {
              "get": function () { return this.driver_version; },
              "set": function (value) { this.driver_version = value; }
            },
            "firmwareMissing": {
              "get": function () { return this.firmware_missing; },
              "set": function (value) { this.firmware_missing = value; }
            },
            "firmwareVersion": {
              "get": function () { return this.firmware_version; },
              "set": function (value) { this.firmware_version = value; }
            },
            "ipInterface": {
              "get": function () { return this.ip_interface; },
              "set": function (value) { this.ip_interface = value; }
            },
            "ip4Config": {
              "get": function () { return this.ip4_config; },
              "set": function (value) { this.ip4_config = value; }
            },
            "ip6Config": {
              "get": function () { return this.ip6_config; },
              "set": function (value) { this.ip6_config = value; }
            },
            "physicalPortId": {
              "get": function () { return this.physical_port_id; },
              "set": function (value) { this.physical_port_id = value; }
            },
            "stateReason": {
              "get": function () { return this.state_reason; },
              "set": function (value) { this.state_reason = value; }
            }
          },
          "static": {
            "disambiguateNames": {
              "value": function () { return this.disambiguate_names.apply(this, arguments); }
            }
          }
        },
        "DeviceAdsl": {
          "prototype": {
            "getCarrier": {
              "value": function () { return this.get_carrier.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DeviceBond": {
          "prototype": {
            "getCarrier": {
              "value": function () { return this.get_carrier.apply(this, arguments); }
            },
            "getHwAddress": {
              "value": function () { return this.get_hw_address.apply(this, arguments); }
            },
            "getSlaves": {
              "value": function () { return this.get_slaves.apply(this, arguments); }
            },
            "hwAddress": {
              "get": function () { return this.hw_address; },
              "set": function (value) { this.hw_address = value; }
            }
          },
          "static": {}
        },
        "DeviceBridge": {
          "prototype": {
            "getCarrier": {
              "value": function () { return this.get_carrier.apply(this, arguments); }
            },
            "getHwAddress": {
              "value": function () { return this.get_hw_address.apply(this, arguments); }
            },
            "getSlaves": {
              "value": function () { return this.get_slaves.apply(this, arguments); }
            },
            "hwAddress": {
              "get": function () { return this.hw_address; },
              "set": function (value) { this.hw_address = value; }
            }
          },
          "static": {}
        },
        "DeviceBt": {
          "prototype": {
            "getCapabilities": {
              "value": function () { return this.get_capabilities.apply(this, arguments); }
            },
            "getHwAddress": {
              "value": function () { return this.get_hw_address.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "btCapabilities": {
              "get": function () { return this.bt_capabilities; },
              "set": function (value) { this.bt_capabilities = value; }
            },
            "hwAddress": {
              "get": function () { return this.hw_address; },
              "set": function (value) { this.hw_address = value; }
            }
          },
          "static": {}
        },
        "DeviceEthernet": {
          "prototype": {
            "getCarrier": {
              "value": function () { return this.get_carrier.apply(this, arguments); }
            },
            "getHwAddress": {
              "value": function () { return this.get_hw_address.apply(this, arguments); }
            },
            "getPermanentHwAddress": {
              "value": function () { return this.get_permanent_hw_address.apply(this, arguments); }
            },
            "getSpeed": {
              "value": function () { return this.get_speed.apply(this, arguments); }
            },
            "hwAddress": {
              "get": function () { return this.hw_address; },
              "set": function (value) { this.hw_address = value; }
            },
            "permHwAddress": {
              "get": function () { return this.perm_hw_address; },
              "set": function (value) { this.perm_hw_address = value; }
            }
          },
          "static": {}
        },
        "DeviceGeneric": {
          "prototype": {
            "getHwAddress": {
              "value": function () { return this.get_hw_address.apply(this, arguments); }
            },
            "hwAddress": {
              "get": function () { return this.hw_address; },
              "set": function (value) { this.hw_address = value; }
            },
            "typeDescription": {
              "get": function () { return this.type_description; },
              "set": function (value) { this.type_description = value; }
            }
          },
          "static": {}
        },
        "DeviceInfiniband": {
          "prototype": {
            "getCarrier": {
              "value": function () { return this.get_carrier.apply(this, arguments); }
            },
            "getHwAddress": {
              "value": function () { return this.get_hw_address.apply(this, arguments); }
            },
            "hwAddress": {
              "get": function () { return this.hw_address; },
              "set": function (value) { this.hw_address = value; }
            }
          },
          "static": {}
        },
        "DeviceModem": {
          "prototype": {
            "getCurrentCapabilities": {
              "value": function () { return this.get_current_capabilities.apply(this, arguments); }
            },
            "getModemCapabilities": {
              "value": function () { return this.get_modem_capabilities.apply(this, arguments); }
            },
            "currentCapabilities": {
              "get": function () { return this.current_capabilities; },
              "set": function (value) { this.current_capabilities = value; }
            },
            "modemCapabilities": {
              "get": function () { return this.modem_capabilities; },
              "set": function (value) { this.modem_capabilities = value; }
            }
          },
          "static": {}
        },
        "DeviceOlpcMesh": {
          "prototype": {
            "getActiveChannel": {
              "value": function () { return this.get_active_channel.apply(this, arguments); }
            },
            "getCompanion": {
              "value": function () { return this.get_companion.apply(this, arguments); }
            },
            "getHwAddress": {
              "value": function () { return this.get_hw_address.apply(this, arguments); }
            },
            "activeChannel": {
              "get": function () { return this.active_channel; },
              "set": function (value) { this.active_channel = value; }
            },
            "hwAddress": {
              "get": function () { return this.hw_address; },
              "set": function (value) { this.hw_address = value; }
            }
          },
          "static": {}
        },
        "DeviceTeam": {
          "prototype": {
            "getCarrier": {
              "value": function () { return this.get_carrier.apply(this, arguments); }
            },
            "getHwAddress": {
              "value": function () { return this.get_hw_address.apply(this, arguments); }
            },
            "getSlaves": {
              "value": function () { return this.get_slaves.apply(this, arguments); }
            },
            "hwAddress": {
              "get": function () { return this.hw_address; },
              "set": function (value) { this.hw_address = value; }
            }
          },
          "static": {}
        },
        "DeviceVlan": {
          "prototype": {
            "getCarrier": {
              "value": function () { return this.get_carrier.apply(this, arguments); }
            },
            "getHwAddress": {
              "value": function () { return this.get_hw_address.apply(this, arguments); }
            },
            "getParent": {
              "value": function () { return this.get_parent.apply(this, arguments); }
            },
            "getVlanId": {
              "value": function () { return this.get_vlan_id.apply(this, arguments); }
            },
            "hwAddress": {
              "get": function () { return this.hw_address; },
              "set": function (value) { this.hw_address = value; }
            },
            "vlanId": {
              "get": function () { return this.vlan_id; },
              "set": function (value) { this.vlan_id = value; }
            }
          },
          "static": {}
        },
        "DeviceWifi": {
          "prototype": {
            "getAccessPointByPath": {
              "value": function () { return this.get_access_point_by_path.apply(this, arguments); }
            },
            "getAccessPoints": {
              "value": function () { return this.get_access_points.apply(this, arguments); }
            },
            "getActiveAccessPoint": {
              "value": function () { return this.get_active_access_point.apply(this, arguments); }
            },
            "getBitrate": {
              "value": function () { return this.get_bitrate.apply(this, arguments); }
            },
            "getCapabilities": {
              "value": function () { return this.get_capabilities.apply(this, arguments); }
            },
            "getHwAddress": {
              "value": function () { return this.get_hw_address.apply(this, arguments); }
            },
            "getMode": {
              "value": function () { return this.get_mode.apply(this, arguments); }
            },
            "getPermanentHwAddress": {
              "value": function () { return this.get_permanent_hw_address.apply(this, arguments); }
            },
            "requestScanSimple": {
              "value": function () { return this.request_scan_simple.apply(this, arguments); }
            },
            "accessPoints": {
              "get": function () { return this.access_points; },
              "set": function (value) { this.access_points = value; }
            },
            "activeAccessPoint": {
              "get": function () { return this.active_access_point; },
              "set": function (value) { this.active_access_point = value; }
            },
            "hwAddress": {
              "get": function () { return this.hw_address; },
              "set": function (value) { this.hw_address = value; }
            },
            "permHwAddress": {
              "get": function () { return this.perm_hw_address; },
              "set": function (value) { this.perm_hw_address = value; }
            },
            "wirelessCapabilities": {
              "get": function () { return this.wireless_capabilities; },
              "set": function (value) { this.wireless_capabilities = value; }
            }
          },
          "static": {}
        },
        "DeviceWimax": {
          "prototype": {
            "getActiveNsp": {
              "value": function () { return this.get_active_nsp.apply(this, arguments); }
            },
            "getBsid": {
              "value": function () { return this.get_bsid.apply(this, arguments); }
            },
            "getCenterFrequency": {
              "value": function () { return this.get_center_frequency.apply(this, arguments); }
            },
            "getCinr": {
              "value": function () { return this.get_cinr.apply(this, arguments); }
            },
            "getHwAddress": {
              "value": function () { return this.get_hw_address.apply(this, arguments); }
            },
            "getNspByPath": {
              "value": function () { return this.get_nsp_by_path.apply(this, arguments); }
            },
            "getNsps": {
              "value": function () { return this.get_nsps.apply(this, arguments); }
            },
            "getRssi": {
              "value": function () { return this.get_rssi.apply(this, arguments); }
            },
            "getTxPower": {
              "value": function () { return this.get_tx_power.apply(this, arguments); }
            },
            "activeNsp": {
              "get": function () { return this.active_nsp; },
              "set": function (value) { this.active_nsp = value; }
            },
            "centerFrequency": {
              "get": function () { return this.center_frequency; },
              "set": function (value) { this.center_frequency = value; }
            },
            "hwAddress": {
              "get": function () { return this.hw_address; },
              "set": function (value) { this.hw_address = value; }
            },
            "txPower": {
              "get": function () { return this.tx_power; },
              "set": function (value) { this.tx_power = value; }
            }
          },
          "static": {}
        },
        "IP4Config": {
          "prototype": {
            "getAddresses": {
              "value": function () { return this.get_addresses.apply(this, arguments); }
            },
            "getDomains": {
              "value": function () { return this.get_domains.apply(this, arguments); }
            },
            "getGateway": {
              "value": function () { return this.get_gateway.apply(this, arguments); }
            },
            "getNameservers": {
              "value": function () { return this.get_nameservers.apply(this, arguments); }
            },
            "getRoutes": {
              "value": function () { return this.get_routes.apply(this, arguments); }
            },
            "getSearches": {
              "value": function () { return this.get_searches.apply(this, arguments); }
            },
            "getWinsServers": {
              "value": function () { return this.get_wins_servers.apply(this, arguments); }
            },
            "winsServers": {
              "get": function () { return this.wins_servers; },
              "set": function (value) { this.wins_servers = value; }
            }
          },
          "static": {}
        },
        "IP6Config": {
          "prototype": {
            "getAddresses": {
              "value": function () { return this.get_addresses.apply(this, arguments); }
            },
            "getDomains": {
              "value": function () { return this.get_domains.apply(this, arguments); }
            },
            "getGateway": {
              "value": function () { return this.get_gateway.apply(this, arguments); }
            },
            "getNameserver": {
              "value": function () { return this.get_nameserver.apply(this, arguments); }
            },
            "getNameservers": {
              "value": function () { return this.get_nameservers.apply(this, arguments); }
            },
            "getNumNameservers": {
              "value": function () { return this.get_num_nameservers.apply(this, arguments); }
            },
            "getRoutes": {
              "value": function () { return this.get_routes.apply(this, arguments); }
            },
            "getSearches": {
              "value": function () { return this.get_searches.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Object": {
          "prototype": {
            "getConnection": {
              "value": function () { return this.get_connection.apply(this, arguments); }
            },
            "getPath": {
              "value": function () { return this.get_path.apply(this, arguments); }
            },
            "dbusConnection": {
              "get": function () { return this.dbus_connection; },
              "set": function (value) { this.dbus_connection = value; }
            },
            "dbusPath": {
              "get": function () { return this.dbus_path; },
              "set": function (value) { this.dbus_path = value; }
            }
          },
          "static": {}
        },
        "RemoteConnection": {
          "prototype": {
            "commitChanges": {
              "value": function () { return this.commit_changes.apply(this, arguments); }
            },
            "commitChangesUnsaved": {
              "value": function () { return this.commit_changes_unsaved.apply(this, arguments); }
            },
            "getSecrets": {
              "value": function () { return this.get_secrets.apply(this, arguments); }
            },
            "getUnsaved": {
              "value": function () { return this.get_unsaved.apply(this, arguments); }
            },
            "dbusConnection": {
              "get": function () { return this.dbus_connection; },
              "set": function (value) { this.dbus_connection = value; }
            },
            "dbusPath": {
              "get": function () { return this.dbus_path; },
              "set": function (value) { this.dbus_path = value; }
            }
          },
          "static": {}
        },
        "RemoteSettings": {
          "prototype": {
            "addConnection": {
              "value": function () { return this.add_connection.apply(this, arguments); }
            },
            "addConnectionUnsaved": {
              "value": function () { return this.add_connection_unsaved.apply(this, arguments); }
            },
            "getConnectionById": {
              "value": function () { return this.get_connection_by_id.apply(this, arguments); }
            },
            "getConnectionByPath": {
              "value": function () { return this.get_connection_by_path.apply(this, arguments); }
            },
            "getConnectionByUuid": {
              "value": function () { return this.get_connection_by_uuid.apply(this, arguments); }
            },
            "listConnections": {
              "value": function () { return this.list_connections.apply(this, arguments); }
            },
            "loadConnections": {
              "value": function () { return this.load_connections.apply(this, arguments); }
            },
            "reloadConnections": {
              "value": function () { return this.reload_connections.apply(this, arguments); }
            },
            "saveHostname": {
              "value": function () { return this.save_hostname.apply(this, arguments); }
            },
            "canModify": {
              "get": function () { return this.can_modify; },
              "set": function (value) { this.can_modify = value; }
            },
            "serviceRunning": {
              "get": function () { return this.service_running; },
              "set": function (value) { this.service_running = value; }
            }
          },
          "static": {
            "newAsync": {
              "value": function () { return this.new_async.apply(this, arguments); }
            }
          }
        },
        "SecretAgent": {
          "prototype": {
            "deleteSecrets": {
              "value": function () { return this.delete_secrets.apply(this, arguments); }
            },
            "getRegistered": {
              "value": function () { return this.get_registered.apply(this, arguments); }
            },
            "getSecrets": {
              "value": function () { return this.get_secrets.apply(this, arguments); }
            },
            "saveSecrets": {
              "value": function () { return this.save_secrets.apply(this, arguments); }
            },
            "autoRegister": {
              "get": function () { return this.auto_register; },
              "set": function (value) { this.auto_register = value; }
            }
          },
          "static": {}
        },
        "VPNConnection": {
          "prototype": {
            "getBanner": {
              "value": function () { return this.get_banner.apply(this, arguments); }
            },
            "getVpnState": {
              "value": function () { return this.get_vpn_state.apply(this, arguments); }
            },
            "vpnState": {
              "get": function () { return this.vpn_state; },
              "set": function (value) { this.vpn_state = value; }
            }
          },
          "static": {}
        },
        "WimaxNsp": {
          "prototype": {
            "connectionValid": {
              "value": function () { return this.connection_valid.apply(this, arguments); }
            },
            "filterConnections": {
              "value": function () { return this.filter_connections.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getNetworkType": {
              "value": function () { return this.get_network_type.apply(this, arguments); }
            },
            "getSignalQuality": {
              "value": function () { return this.get_signal_quality.apply(this, arguments); }
            },
            "networkType": {
              "get": function () { return this.network_type; },
              "set": function (value) { this.network_type = value; }
            },
            "signalQuality": {
              "get": function () { return this.signal_quality; },
              "set": function (value) { this.signal_quality = value; }
            }
          },
          "static": {}
        }
      },
      "static": {
        "clientErrorQuark": {
          "value": function () { return this.client_error_quark.apply(this, arguments); }
        },
        "deviceAdslErrorQuark": {
          "value": function () { return this.device_adsl_error_quark.apply(this, arguments); }
        },
        "deviceBondErrorQuark": {
          "value": function () { return this.device_bond_error_quark.apply(this, arguments); }
        },
        "deviceBridgeErrorQuark": {
          "value": function () { return this.device_bridge_error_quark.apply(this, arguments); }
        },
        "deviceBtErrorQuark": {
          "value": function () { return this.device_bt_error_quark.apply(this, arguments); }
        },
        "deviceErrorQuark": {
          "value": function () { return this.device_error_quark.apply(this, arguments); }
        },
        "deviceEthernetErrorQuark": {
          "value": function () { return this.device_ethernet_error_quark.apply(this, arguments); }
        },
        "deviceGenericErrorQuark": {
          "value": function () { return this.device_generic_error_quark.apply(this, arguments); }
        },
        "deviceInfinibandErrorQuark": {
          "value": function () { return this.device_infiniband_error_quark.apply(this, arguments); }
        },
        "deviceModemErrorQuark": {
          "value": function () { return this.device_modem_error_quark.apply(this, arguments); }
        },
        "deviceOlpcMeshErrorQuark": {
          "value": function () { return this.device_olpc_mesh_error_quark.apply(this, arguments); }
        },
        "deviceTeamErrorQuark": {
          "value": function () { return this.device_team_error_quark.apply(this, arguments); }
        },
        "deviceVlanErrorQuark": {
          "value": function () { return this.device_vlan_error_quark.apply(this, arguments); }
        },
        "deviceWifiErrorQuark": {
          "value": function () { return this.device_wifi_error_quark.apply(this, arguments); }
        },
        "deviceWimaxErrorQuark": {
          "value": function () { return this.device_wimax_error_quark.apply(this, arguments); }
        },
        "objectErrorQuark": {
          "value": function () { return this.object_error_quark.apply(this, arguments); }
        },
        "remoteConnectionErrorQuark": {
          "value": function () { return this.remote_connection_error_quark.apply(this, arguments); }
        },
        "remoteSettingsErrorQuark": {
          "value": function () { return this.remote_settings_error_quark.apply(this, arguments); }
        },
        "secretAgentErrorQuark": {
          "value": function () { return this.secret_agent_error_quark.apply(this, arguments); }
        }
      }
    },
    "NMGtk": {
      "class": {
        "MobileProvidersDatabase": {
          "prototype": {
            "getCountries": {
              "value": function () { return this.get_countries.apply(this, arguments); }
            },
            "lookup3gppMccMnc": {
              "value": function () { return this.lookup_3gpp_mcc_mnc.apply(this, arguments); }
            },
            "lookupCdmaSid": {
              "value": function () { return this.lookup_cdma_sid.apply(this, arguments); }
            },
            "lookupCountry": {
              "value": function () { return this.lookup_country.apply(this, arguments); }
            },
            "countryCodes": {
              "get": function () { return this.country_codes; },
              "set": function (value) { this.country_codes = value; }
            },
            "serviceProviders": {
              "get": function () { return this.service_providers; },
              "set": function (value) { this.service_providers = value; }
            }
          },
          "static": {}
        },
        "VpnPasswordDialog": {
          "prototype": {
            "focusPassword": {
              "value": function () { return this.focus_password.apply(this, arguments); }
            },
            "focusPasswordSecondary": {
              "value": function () { return this.focus_password_secondary.apply(this, arguments); }
            },
            "focusPasswordTernary": {
              "value": function () { return this.focus_password_ternary.apply(this, arguments); }
            },
            "getPassword": {
              "value": function () { return this.get_password.apply(this, arguments); }
            },
            "getPasswordSecondary": {
              "value": function () { return this.get_password_secondary.apply(this, arguments); }
            },
            "getPasswordTernary": {
              "value": function () { return this.get_password_ternary.apply(this, arguments); }
            },
            "runAndBlock": {
              "value": function () { return this.run_and_block.apply(this, arguments); }
            },
            "setPassword": {
              "value": function () { return this.set_password.apply(this, arguments); }
            },
            "setPasswordLabel": {
              "value": function () { return this.set_password_label.apply(this, arguments); }
            },
            "setPasswordSecondary": {
              "value": function () { return this.set_password_secondary.apply(this, arguments); }
            },
            "setPasswordSecondaryLabel": {
              "value": function () { return this.set_password_secondary_label.apply(this, arguments); }
            },
            "setPasswordTernary": {
              "value": function () { return this.set_password_ternary.apply(this, arguments); }
            },
            "setPasswordTernaryLabel": {
              "value": function () { return this.set_password_ternary_label.apply(this, arguments); }
            },
            "setShowPassword": {
              "value": function () { return this.set_show_password.apply(this, arguments); }
            },
            "setShowPasswordSecondary": {
              "value": function () { return this.set_show_password_secondary.apply(this, arguments); }
            },
            "setShowPasswordTernary": {
              "value": function () { return this.set_show_password_ternary.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "WifiDialog": {
          "prototype": {
            "getConnection": {
              "value": function () { return this.get_connection.apply(this, arguments); }
            },
            "getNagIgnored": {
              "value": function () { return this.get_nag_ignored.apply(this, arguments); }
            },
            "nagUser": {
              "value": function () { return this.nag_user.apply(this, arguments); }
            },
            "setNagIgnored": {
              "value": function () { return this.set_nag_ignored.apply(this, arguments); }
            }
          },
          "static": {}
        }
      },
      "static": {
        "mobileProvidersSplit3gppMccMnc": {
          "value": function () { return this.mobile_providers_split_3gpp_mcc_mnc.apply(this, arguments); }
        },
        "mobileWizardNew": {
          "value": function () { return this.mobile_wizard_new.apply(this, arguments); }
        },
        "utilsDisambiguateDeviceNames": {
          "value": function () { return this.utils_disambiguate_device_names.apply(this, arguments); }
        },
        "utilsGetConnectionDeviceName": {
          "value": function () { return this.utils_get_connection_device_name.apply(this, arguments); }
        },
        "utilsGetDeviceDescription": {
          "value": function () { return this.utils_get_device_description.apply(this, arguments); }
        },
        "utilsGetDeviceGenericTypeName": {
          "value": function () { return this.utils_get_device_generic_type_name.apply(this, arguments); }
        },
        "utilsGetDeviceProduct": {
          "value": function () { return this.utils_get_device_product.apply(this, arguments); }
        },
        "utilsGetDeviceTypeName": {
          "value": function () { return this.utils_get_device_type_name.apply(this, arguments); }
        },
        "utilsGetDeviceVendor": {
          "value": function () { return this.utils_get_device_vendor.apply(this, arguments); }
        },
        "utilsMenuToSecretFlags": {
          "value": function () { return this.utils_menu_to_secret_flags.apply(this, arguments); }
        },
        "utilsSetupPasswordStorage": {
          "value": function () { return this.utils_setup_password_storage.apply(this, arguments); }
        },
        "utilsUpdatePasswordStorage": {
          "value": function () { return this.utils_update_password_storage.apply(this, arguments); }
        }
      }
    },
    "Nautilus": {
      "class": {
        "Column": {
          "prototype": {
            "attributeQ": {
              "get": function () { return this.attribute_q; },
              "set": function (value) { this.attribute_q = value; }
            },
            "defaultSortOrder": {
              "get": function () { return this.default_sort_order; },
              "set": function (value) { this.default_sort_order = value; }
            }
          },
          "static": {}
        },
        "Menu": {
          "prototype": {
            "appendItem": {
              "value": function () { return this.append_item.apply(this, arguments); }
            },
            "getItems": {
              "value": function () { return this.get_items.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "MenuItem": {
          "prototype": {
            "setSubmenu": {
              "value": function () { return this.set_submenu.apply(this, arguments); }
            }
          },
          "static": {
            "listFree": {
              "value": function () { return this.list_free.apply(this, arguments); }
            }
          }
        },
        "PropertyPage": {
          "prototype": {},
          "static": {}
        }
      },
      "static": {
        "fileInfoCreate": {
          "value": function () { return this.file_info_create.apply(this, arguments); }
        },
        "fileInfoCreateForUri": {
          "value": function () { return this.file_info_create_for_uri.apply(this, arguments); }
        },
        "fileInfoListCopy": {
          "value": function () { return this.file_info_list_copy.apply(this, arguments); }
        },
        "fileInfoListFree": {
          "value": function () { return this.file_info_list_free.apply(this, arguments); }
        },
        "fileInfoLookup": {
          "value": function () { return this.file_info_lookup.apply(this, arguments); }
        },
        "fileInfoLookupForUri": {
          "value": function () { return this.file_info_lookup_for_uri.apply(this, arguments); }
        },
        "infoProviderUpdateCompleteInvoke": {
          "value": function () { return this.info_provider_update_complete_invoke.apply(this, arguments); }
        },
        "moduleInitialize": {
          "value": function () { return this.module_initialize.apply(this, arguments); }
        },
        "moduleListTypes": {
          "value": function () { return this.module_list_types.apply(this, arguments); }
        },
        "moduleShutdown": {
          "value": function () { return this.module_shutdown.apply(this, arguments); }
        }
      }
    },
    "NetworkManager": {
      "class": {
        "Connection": {
          "prototype": {
            "addSetting": {
              "value": function () { return this.add_setting.apply(this, arguments); }
            },
            "clearSecrets": {
              "value": function () { return this.clear_secrets.apply(this, arguments); }
            },
            "clearSecretsWithFlags": {
              "value": function () { return this.clear_secrets_with_flags.apply(this, arguments); }
            },
            "forEachSettingValue": {
              "value": function () { return this.for_each_setting_value.apply(this, arguments); }
            },
            "getConnectionType": {
              "value": function () { return this.get_connection_type.apply(this, arguments); }
            },
            "getId": {
              "value": function () { return this.get_id.apply(this, arguments); }
            },
            "getInterfaceName": {
              "value": function () { return this.get_interface_name.apply(this, arguments); }
            },
            "getPath": {
              "value": function () { return this.get_path.apply(this, arguments); }
            },
            "getSetting": {
              "value": function () { return this.get_setting.apply(this, arguments); }
            },
            "getSetting8021x": {
              "value": function () { return this.get_setting_802_1x.apply(this, arguments); }
            },
            "getSettingAdsl": {
              "value": function () { return this.get_setting_adsl.apply(this, arguments); }
            },
            "getSettingBluetooth": {
              "value": function () { return this.get_setting_bluetooth.apply(this, arguments); }
            },
            "getSettingBond": {
              "value": function () { return this.get_setting_bond.apply(this, arguments); }
            },
            "getSettingBridge": {
              "value": function () { return this.get_setting_bridge.apply(this, arguments); }
            },
            "getSettingBridgePort": {
              "value": function () { return this.get_setting_bridge_port.apply(this, arguments); }
            },
            "getSettingByName": {
              "value": function () { return this.get_setting_by_name.apply(this, arguments); }
            },
            "getSettingCdma": {
              "value": function () { return this.get_setting_cdma.apply(this, arguments); }
            },
            "getSettingConnection": {
              "value": function () { return this.get_setting_connection.apply(this, arguments); }
            },
            "getSettingDcb": {
              "value": function () { return this.get_setting_dcb.apply(this, arguments); }
            },
            "getSettingGeneric": {
              "value": function () { return this.get_setting_generic.apply(this, arguments); }
            },
            "getSettingGsm": {
              "value": function () { return this.get_setting_gsm.apply(this, arguments); }
            },
            "getSettingInfiniband": {
              "value": function () { return this.get_setting_infiniband.apply(this, arguments); }
            },
            "getSettingIp4Config": {
              "value": function () { return this.get_setting_ip4_config.apply(this, arguments); }
            },
            "getSettingIp6Config": {
              "value": function () { return this.get_setting_ip6_config.apply(this, arguments); }
            },
            "getSettingOlpcMesh": {
              "value": function () { return this.get_setting_olpc_mesh.apply(this, arguments); }
            },
            "getSettingPpp": {
              "value": function () { return this.get_setting_ppp.apply(this, arguments); }
            },
            "getSettingPppoe": {
              "value": function () { return this.get_setting_pppoe.apply(this, arguments); }
            },
            "getSettingSerial": {
              "value": function () { return this.get_setting_serial.apply(this, arguments); }
            },
            "getSettingTeam": {
              "value": function () { return this.get_setting_team.apply(this, arguments); }
            },
            "getSettingTeamPort": {
              "value": function () { return this.get_setting_team_port.apply(this, arguments); }
            },
            "getSettingVlan": {
              "value": function () { return this.get_setting_vlan.apply(this, arguments); }
            },
            "getSettingVpn": {
              "value": function () { return this.get_setting_vpn.apply(this, arguments); }
            },
            "getSettingWimax": {
              "value": function () { return this.get_setting_wimax.apply(this, arguments); }
            },
            "getSettingWired": {
              "value": function () { return this.get_setting_wired.apply(this, arguments); }
            },
            "getSettingWireless": {
              "value": function () { return this.get_setting_wireless.apply(this, arguments); }
            },
            "getSettingWirelessSecurity": {
              "value": function () { return this.get_setting_wireless_security.apply(this, arguments); }
            },
            "getUuid": {
              "value": function () { return this.get_uuid.apply(this, arguments); }
            },
            "getVirtualDeviceDescription": {
              "value": function () { return this.get_virtual_device_description.apply(this, arguments); }
            },
            "getVirtualIfaceName": {
              "value": function () { return this.get_virtual_iface_name.apply(this, arguments); }
            },
            "isType": {
              "value": function () { return this.is_type.apply(this, arguments); }
            },
            "needSecrets": {
              "value": function () { return this.need_secrets.apply(this, arguments); }
            },
            "removeSetting": {
              "value": function () { return this.remove_setting.apply(this, arguments); }
            },
            "replaceSettings": {
              "value": function () { return this.replace_settings.apply(this, arguments); }
            },
            "replaceSettingsFromConnection": {
              "value": function () { return this.replace_settings_from_connection.apply(this, arguments); }
            },
            "setPath": {
              "value": function () { return this.set_path.apply(this, arguments); }
            },
            "toHash": {
              "value": function () { return this.to_hash.apply(this, arguments); }
            },
            "updateSecrets": {
              "value": function () { return this.update_secrets.apply(this, arguments); }
            }
          },
          "static": {
            "createSetting": {
              "value": function () { return this.create_setting.apply(this, arguments); }
            },
            "lookupSettingType": {
              "value": function () { return this.lookup_setting_type.apply(this, arguments); }
            },
            "lookupSettingTypeByQuark": {
              "value": function () { return this.lookup_setting_type_by_quark.apply(this, arguments); }
            }
          }
        },
        "Setting": {
          "prototype": {
            "clearSecrets": {
              "value": function () { return this.clear_secrets.apply(this, arguments); }
            },
            "clearSecretsWithFlags": {
              "value": function () { return this.clear_secrets_with_flags.apply(this, arguments); }
            },
            "enumerateValues": {
              "value": function () { return this.enumerate_values.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getSecretFlags": {
              "value": function () { return this.get_secret_flags.apply(this, arguments); }
            },
            "getVirtualIfaceName": {
              "value": function () { return this.get_virtual_iface_name.apply(this, arguments); }
            },
            "needSecrets": {
              "value": function () { return this.need_secrets.apply(this, arguments); }
            },
            "setSecretFlags": {
              "value": function () { return this.set_secret_flags.apply(this, arguments); }
            },
            "toHash": {
              "value": function () { return this.to_hash.apply(this, arguments); }
            },
            "toString": {
              "value": function () { return this.to_string.apply(this, arguments); }
            },
            "updateSecrets": {
              "value": function () { return this.update_secrets.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Setting8021x": {
          "prototype": {
            "addAltsubjectMatch": {
              "value": function () { return this.add_altsubject_match.apply(this, arguments); }
            },
            "addEapMethod": {
              "value": function () { return this.add_eap_method.apply(this, arguments); }
            },
            "addPhase2AltsubjectMatch": {
              "value": function () { return this.add_phase2_altsubject_match.apply(this, arguments); }
            },
            "clearAltsubjectMatches": {
              "value": function () { return this.clear_altsubject_matches.apply(this, arguments); }
            },
            "clearEapMethods": {
              "value": function () { return this.clear_eap_methods.apply(this, arguments); }
            },
            "clearPhase2AltsubjectMatches": {
              "value": function () { return this.clear_phase2_altsubject_matches.apply(this, arguments); }
            },
            "getAltsubjectMatch": {
              "value": function () { return this.get_altsubject_match.apply(this, arguments); }
            },
            "getAnonymousIdentity": {
              "value": function () { return this.get_anonymous_identity.apply(this, arguments); }
            },
            "getCaCertBlob": {
              "value": function () { return this.get_ca_cert_blob.apply(this, arguments); }
            },
            "getCaCertPath": {
              "value": function () { return this.get_ca_cert_path.apply(this, arguments); }
            },
            "getCaCertScheme": {
              "value": function () { return this.get_ca_cert_scheme.apply(this, arguments); }
            },
            "getCaPath": {
              "value": function () { return this.get_ca_path.apply(this, arguments); }
            },
            "getClientCertBlob": {
              "value": function () { return this.get_client_cert_blob.apply(this, arguments); }
            },
            "getClientCertPath": {
              "value": function () { return this.get_client_cert_path.apply(this, arguments); }
            },
            "getClientCertScheme": {
              "value": function () { return this.get_client_cert_scheme.apply(this, arguments); }
            },
            "getEapMethod": {
              "value": function () { return this.get_eap_method.apply(this, arguments); }
            },
            "getIdentity": {
              "value": function () { return this.get_identity.apply(this, arguments); }
            },
            "getNumAltsubjectMatches": {
              "value": function () { return this.get_num_altsubject_matches.apply(this, arguments); }
            },
            "getNumEapMethods": {
              "value": function () { return this.get_num_eap_methods.apply(this, arguments); }
            },
            "getNumPhase2AltsubjectMatches": {
              "value": function () { return this.get_num_phase2_altsubject_matches.apply(this, arguments); }
            },
            "getPacFile": {
              "value": function () { return this.get_pac_file.apply(this, arguments); }
            },
            "getPassword": {
              "value": function () { return this.get_password.apply(this, arguments); }
            },
            "getPasswordFlags": {
              "value": function () { return this.get_password_flags.apply(this, arguments); }
            },
            "getPasswordRaw": {
              "value": function () { return this.get_password_raw.apply(this, arguments); }
            },
            "getPasswordRawFlags": {
              "value": function () { return this.get_password_raw_flags.apply(this, arguments); }
            },
            "getPhase1FastProvisioning": {
              "value": function () { return this.get_phase1_fast_provisioning.apply(this, arguments); }
            },
            "getPhase1Peaplabel": {
              "value": function () { return this.get_phase1_peaplabel.apply(this, arguments); }
            },
            "getPhase1Peapver": {
              "value": function () { return this.get_phase1_peapver.apply(this, arguments); }
            },
            "getPhase2AltsubjectMatch": {
              "value": function () { return this.get_phase2_altsubject_match.apply(this, arguments); }
            },
            "getPhase2Auth": {
              "value": function () { return this.get_phase2_auth.apply(this, arguments); }
            },
            "getPhase2Autheap": {
              "value": function () { return this.get_phase2_autheap.apply(this, arguments); }
            },
            "getPhase2CaCertBlob": {
              "value": function () { return this.get_phase2_ca_cert_blob.apply(this, arguments); }
            },
            "getPhase2CaCertPath": {
              "value": function () { return this.get_phase2_ca_cert_path.apply(this, arguments); }
            },
            "getPhase2CaCertScheme": {
              "value": function () { return this.get_phase2_ca_cert_scheme.apply(this, arguments); }
            },
            "getPhase2CaPath": {
              "value": function () { return this.get_phase2_ca_path.apply(this, arguments); }
            },
            "getPhase2ClientCertBlob": {
              "value": function () { return this.get_phase2_client_cert_blob.apply(this, arguments); }
            },
            "getPhase2ClientCertPath": {
              "value": function () { return this.get_phase2_client_cert_path.apply(this, arguments); }
            },
            "getPhase2ClientCertScheme": {
              "value": function () { return this.get_phase2_client_cert_scheme.apply(this, arguments); }
            },
            "getPhase2PrivateKeyBlob": {
              "value": function () { return this.get_phase2_private_key_blob.apply(this, arguments); }
            },
            "getPhase2PrivateKeyFormat": {
              "value": function () { return this.get_phase2_private_key_format.apply(this, arguments); }
            },
            "getPhase2PrivateKeyPassword": {
              "value": function () { return this.get_phase2_private_key_password.apply(this, arguments); }
            },
            "getPhase2PrivateKeyPasswordFlags": {
              "value": function () { return this.get_phase2_private_key_password_flags.apply(this, arguments); }
            },
            "getPhase2PrivateKeyPath": {
              "value": function () { return this.get_phase2_private_key_path.apply(this, arguments); }
            },
            "getPhase2PrivateKeyScheme": {
              "value": function () { return this.get_phase2_private_key_scheme.apply(this, arguments); }
            },
            "getPhase2SubjectMatch": {
              "value": function () { return this.get_phase2_subject_match.apply(this, arguments); }
            },
            "getPin": {
              "value": function () { return this.get_pin.apply(this, arguments); }
            },
            "getPinFlags": {
              "value": function () { return this.get_pin_flags.apply(this, arguments); }
            },
            "getPrivateKeyBlob": {
              "value": function () { return this.get_private_key_blob.apply(this, arguments); }
            },
            "getPrivateKeyFormat": {
              "value": function () { return this.get_private_key_format.apply(this, arguments); }
            },
            "getPrivateKeyPassword": {
              "value": function () { return this.get_private_key_password.apply(this, arguments); }
            },
            "getPrivateKeyPasswordFlags": {
              "value": function () { return this.get_private_key_password_flags.apply(this, arguments); }
            },
            "getPrivateKeyPath": {
              "value": function () { return this.get_private_key_path.apply(this, arguments); }
            },
            "getPrivateKeyScheme": {
              "value": function () { return this.get_private_key_scheme.apply(this, arguments); }
            },
            "getSubjectMatch": {
              "value": function () { return this.get_subject_match.apply(this, arguments); }
            },
            "getSystemCaCerts": {
              "value": function () { return this.get_system_ca_certs.apply(this, arguments); }
            },
            "removeAltsubjectMatch": {
              "value": function () { return this.remove_altsubject_match.apply(this, arguments); }
            },
            "removeAltsubjectMatchByValue": {
              "value": function () { return this.remove_altsubject_match_by_value.apply(this, arguments); }
            },
            "removeEapMethod": {
              "value": function () { return this.remove_eap_method.apply(this, arguments); }
            },
            "removeEapMethodByValue": {
              "value": function () { return this.remove_eap_method_by_value.apply(this, arguments); }
            },
            "removePhase2AltsubjectMatch": {
              "value": function () { return this.remove_phase2_altsubject_match.apply(this, arguments); }
            },
            "removePhase2AltsubjectMatchByValue": {
              "value": function () { return this.remove_phase2_altsubject_match_by_value.apply(this, arguments); }
            },
            "setCaCert": {
              "value": function () { return this.set_ca_cert.apply(this, arguments); }
            },
            "setClientCert": {
              "value": function () { return this.set_client_cert.apply(this, arguments); }
            },
            "setPhase2CaCert": {
              "value": function () { return this.set_phase2_ca_cert.apply(this, arguments); }
            },
            "setPhase2ClientCert": {
              "value": function () { return this.set_phase2_client_cert.apply(this, arguments); }
            },
            "setPhase2PrivateKey": {
              "value": function () { return this.set_phase2_private_key.apply(this, arguments); }
            },
            "setPrivateKey": {
              "value": function () { return this.set_private_key.apply(this, arguments); }
            },
            "altsubjectMatches": {
              "get": function () { return this.altsubject_matches; },
              "set": function (value) { this.altsubject_matches = value; }
            },
            "anonymousIdentity": {
              "get": function () { return this.anonymous_identity; },
              "set": function (value) { this.anonymous_identity = value; }
            },
            "caCert": {
              "get": function () { return this.ca_cert; },
              "set": function (value) { this.ca_cert = value; }
            },
            "caPath": {
              "get": function () { return this.ca_path; },
              "set": function (value) { this.ca_path = value; }
            },
            "clientCert": {
              "get": function () { return this.client_cert; },
              "set": function (value) { this.client_cert = value; }
            },
            "pacFile": {
              "get": function () { return this.pac_file; },
              "set": function (value) { this.pac_file = value; }
            },
            "passwordFlags": {
              "get": function () { return this.password_flags; },
              "set": function (value) { this.password_flags = value; }
            },
            "passwordRaw": {
              "get": function () { return this.password_raw; },
              "set": function (value) { this.password_raw = value; }
            },
            "passwordRawFlags": {
              "get": function () { return this.password_raw_flags; },
              "set": function (value) { this.password_raw_flags = value; }
            },
            "phase1FastProvisioning": {
              "get": function () { return this.phase1_fast_provisioning; },
              "set": function (value) { this.phase1_fast_provisioning = value; }
            },
            "phase1Peaplabel": {
              "get": function () { return this.phase1_peaplabel; },
              "set": function (value) { this.phase1_peaplabel = value; }
            },
            "phase1Peapver": {
              "get": function () { return this.phase1_peapver; },
              "set": function (value) { this.phase1_peapver = value; }
            },
            "phase2AltsubjectMatches": {
              "get": function () { return this.phase2_altsubject_matches; },
              "set": function (value) { this.phase2_altsubject_matches = value; }
            },
            "phase2Auth": {
              "get": function () { return this.phase2_auth; },
              "set": function (value) { this.phase2_auth = value; }
            },
            "phase2Autheap": {
              "get": function () { return this.phase2_autheap; },
              "set": function (value) { this.phase2_autheap = value; }
            },
            "phase2CaCert": {
              "get": function () { return this.phase2_ca_cert; },
              "set": function (value) { this.phase2_ca_cert = value; }
            },
            "phase2CaPath": {
              "get": function () { return this.phase2_ca_path; },
              "set": function (value) { this.phase2_ca_path = value; }
            },
            "phase2ClientCert": {
              "get": function () { return this.phase2_client_cert; },
              "set": function (value) { this.phase2_client_cert = value; }
            },
            "phase2PrivateKey": {
              "get": function () { return this.phase2_private_key; },
              "set": function (value) { this.phase2_private_key = value; }
            },
            "phase2PrivateKeyPassword": {
              "get": function () { return this.phase2_private_key_password; },
              "set": function (value) { this.phase2_private_key_password = value; }
            },
            "phase2PrivateKeyPasswordFlags": {
              "get": function () { return this.phase2_private_key_password_flags; },
              "set": function (value) { this.phase2_private_key_password_flags = value; }
            },
            "phase2SubjectMatch": {
              "get": function () { return this.phase2_subject_match; },
              "set": function (value) { this.phase2_subject_match = value; }
            },
            "pinFlags": {
              "get": function () { return this.pin_flags; },
              "set": function (value) { this.pin_flags = value; }
            },
            "privateKey": {
              "get": function () { return this.private_key; },
              "set": function (value) { this.private_key = value; }
            },
            "privateKeyPassword": {
              "get": function () { return this.private_key_password; },
              "set": function (value) { this.private_key_password = value; }
            },
            "privateKeyPasswordFlags": {
              "get": function () { return this.private_key_password_flags; },
              "set": function (value) { this.private_key_password_flags = value; }
            },
            "subjectMatch": {
              "get": function () { return this.subject_match; },
              "set": function (value) { this.subject_match = value; }
            },
            "systemCaCerts": {
              "get": function () { return this.system_ca_certs; },
              "set": function (value) { this.system_ca_certs = value; }
            }
          },
          "static": {}
        },
        "SettingAdsl": {
          "prototype": {
            "getEncapsulation": {
              "value": function () { return this.get_encapsulation.apply(this, arguments); }
            },
            "getPassword": {
              "value": function () { return this.get_password.apply(this, arguments); }
            },
            "getPasswordFlags": {
              "value": function () { return this.get_password_flags.apply(this, arguments); }
            },
            "getProtocol": {
              "value": function () { return this.get_protocol.apply(this, arguments); }
            },
            "getUsername": {
              "value": function () { return this.get_username.apply(this, arguments); }
            },
            "getVci": {
              "value": function () { return this.get_vci.apply(this, arguments); }
            },
            "getVpi": {
              "value": function () { return this.get_vpi.apply(this, arguments); }
            },
            "passwordFlags": {
              "get": function () { return this.password_flags; },
              "set": function (value) { this.password_flags = value; }
            }
          },
          "static": {}
        },
        "SettingBluetooth": {
          "prototype": {
            "getBdaddr": {
              "value": function () { return this.get_bdaddr.apply(this, arguments); }
            },
            "getConnectionType": {
              "value": function () { return this.get_connection_type.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "SettingBond": {
          "prototype": {
            "addOption": {
              "value": function () { return this.add_option.apply(this, arguments); }
            },
            "getInterfaceName": {
              "value": function () { return this.get_interface_name.apply(this, arguments); }
            },
            "getNumOptions": {
              "value": function () { return this.get_num_options.apply(this, arguments); }
            },
            "getOption": {
              "value": function () { return this.get_option.apply(this, arguments); }
            },
            "getOptionByName": {
              "value": function () { return this.get_option_by_name.apply(this, arguments); }
            },
            "getOptionDefault": {
              "value": function () { return this.get_option_default.apply(this, arguments); }
            },
            "getValidOptions": {
              "value": function () { return this.get_valid_options.apply(this, arguments); }
            },
            "removeOption": {
              "value": function () { return this.remove_option.apply(this, arguments); }
            },
            "interfaceName": {
              "get": function () { return this.interface_name; },
              "set": function (value) { this.interface_name = value; }
            }
          },
          "static": {
            "validateOption": {
              "value": function () { return this.validate_option.apply(this, arguments); }
            }
          }
        },
        "SettingBridge": {
          "prototype": {
            "getAgeingTime": {
              "value": function () { return this.get_ageing_time.apply(this, arguments); }
            },
            "getForwardDelay": {
              "value": function () { return this.get_forward_delay.apply(this, arguments); }
            },
            "getHelloTime": {
              "value": function () { return this.get_hello_time.apply(this, arguments); }
            },
            "getInterfaceName": {
              "value": function () { return this.get_interface_name.apply(this, arguments); }
            },
            "getMacAddress": {
              "value": function () { return this.get_mac_address.apply(this, arguments); }
            },
            "getMaxAge": {
              "value": function () { return this.get_max_age.apply(this, arguments); }
            },
            "getPriority": {
              "value": function () { return this.get_priority.apply(this, arguments); }
            },
            "getStp": {
              "value": function () { return this.get_stp.apply(this, arguments); }
            },
            "ageingTime": {
              "get": function () { return this.ageing_time; },
              "set": function (value) { this.ageing_time = value; }
            },
            "forwardDelay": {
              "get": function () { return this.forward_delay; },
              "set": function (value) { this.forward_delay = value; }
            },
            "helloTime": {
              "get": function () { return this.hello_time; },
              "set": function (value) { this.hello_time = value; }
            },
            "interfaceName": {
              "get": function () { return this.interface_name; },
              "set": function (value) { this.interface_name = value; }
            },
            "macAddress": {
              "get": function () { return this.mac_address; },
              "set": function (value) { this.mac_address = value; }
            },
            "maxAge": {
              "get": function () { return this.max_age; },
              "set": function (value) { this.max_age = value; }
            }
          },
          "static": {}
        },
        "SettingBridgePort": {
          "prototype": {
            "getHairpinMode": {
              "value": function () { return this.get_hairpin_mode.apply(this, arguments); }
            },
            "getPathCost": {
              "value": function () { return this.get_path_cost.apply(this, arguments); }
            },
            "getPriority": {
              "value": function () { return this.get_priority.apply(this, arguments); }
            },
            "hairpinMode": {
              "get": function () { return this.hairpin_mode; },
              "set": function (value) { this.hairpin_mode = value; }
            },
            "pathCost": {
              "get": function () { return this.path_cost; },
              "set": function (value) { this.path_cost = value; }
            }
          },
          "static": {}
        },
        "SettingCdma": {
          "prototype": {
            "getNumber": {
              "value": function () { return this.get_number.apply(this, arguments); }
            },
            "getPassword": {
              "value": function () { return this.get_password.apply(this, arguments); }
            },
            "getPasswordFlags": {
              "value": function () { return this.get_password_flags.apply(this, arguments); }
            },
            "getUsername": {
              "value": function () { return this.get_username.apply(this, arguments); }
            },
            "passwordFlags": {
              "get": function () { return this.password_flags; },
              "set": function (value) { this.password_flags = value; }
            }
          },
          "static": {}
        },
        "SettingConnection": {
          "prototype": {
            "addPermission": {
              "value": function () { return this.add_permission.apply(this, arguments); }
            },
            "addSecondary": {
              "value": function () { return this.add_secondary.apply(this, arguments); }
            },
            "getAutoconnect": {
              "value": function () { return this.get_autoconnect.apply(this, arguments); }
            },
            "getConnectionType": {
              "value": function () { return this.get_connection_type.apply(this, arguments); }
            },
            "getGatewayPingTimeout": {
              "value": function () { return this.get_gateway_ping_timeout.apply(this, arguments); }
            },
            "getId": {
              "value": function () { return this.get_id.apply(this, arguments); }
            },
            "getInterfaceName": {
              "value": function () { return this.get_interface_name.apply(this, arguments); }
            },
            "getMaster": {
              "value": function () { return this.get_master.apply(this, arguments); }
            },
            "getNumPermissions": {
              "value": function () { return this.get_num_permissions.apply(this, arguments); }
            },
            "getNumSecondaries": {
              "value": function () { return this.get_num_secondaries.apply(this, arguments); }
            },
            "getPermission": {
              "value": function () { return this.get_permission.apply(this, arguments); }
            },
            "getReadOnly": {
              "value": function () { return this.get_read_only.apply(this, arguments); }
            },
            "getSecondary": {
              "value": function () { return this.get_secondary.apply(this, arguments); }
            },
            "getSlaveType": {
              "value": function () { return this.get_slave_type.apply(this, arguments); }
            },
            "getTimestamp": {
              "value": function () { return this.get_timestamp.apply(this, arguments); }
            },
            "getUuid": {
              "value": function () { return this.get_uuid.apply(this, arguments); }
            },
            "getZone": {
              "value": function () { return this.get_zone.apply(this, arguments); }
            },
            "isSlaveType": {
              "value": function () { return this.is_slave_type.apply(this, arguments); }
            },
            "permissionsUserAllowed": {
              "value": function () { return this.permissions_user_allowed.apply(this, arguments); }
            },
            "removePermission": {
              "value": function () { return this.remove_permission.apply(this, arguments); }
            },
            "removePermissionByValue": {
              "value": function () { return this.remove_permission_by_value.apply(this, arguments); }
            },
            "removeSecondary": {
              "value": function () { return this.remove_secondary.apply(this, arguments); }
            },
            "removeSecondaryByValue": {
              "value": function () { return this.remove_secondary_by_value.apply(this, arguments); }
            },
            "gatewayPingTimeout": {
              "get": function () { return this.gateway_ping_timeout; },
              "set": function (value) { this.gateway_ping_timeout = value; }
            },
            "interfaceName": {
              "get": function () { return this.interface_name; },
              "set": function (value) { this.interface_name = value; }
            },
            "readOnly": {
              "get": function () { return this.read_only; },
              "set": function (value) { this.read_only = value; }
            },
            "slaveType": {
              "get": function () { return this.slave_type; },
              "set": function (value) { this.slave_type = value; }
            }
          },
          "static": {}
        },
        "SettingDcb": {
          "prototype": {
            "getAppFcoeFlags": {
              "value": function () { return this.get_app_fcoe_flags.apply(this, arguments); }
            },
            "getAppFcoeMode": {
              "value": function () { return this.get_app_fcoe_mode.apply(this, arguments); }
            },
            "getAppFcoePriority": {
              "value": function () { return this.get_app_fcoe_priority.apply(this, arguments); }
            },
            "getAppFipFlags": {
              "value": function () { return this.get_app_fip_flags.apply(this, arguments); }
            },
            "getAppFipPriority": {
              "value": function () { return this.get_app_fip_priority.apply(this, arguments); }
            },
            "getAppIscsiFlags": {
              "value": function () { return this.get_app_iscsi_flags.apply(this, arguments); }
            },
            "getAppIscsiPriority": {
              "value": function () { return this.get_app_iscsi_priority.apply(this, arguments); }
            },
            "getPriorityBandwidth": {
              "value": function () { return this.get_priority_bandwidth.apply(this, arguments); }
            },
            "getPriorityFlowControl": {
              "value": function () { return this.get_priority_flow_control.apply(this, arguments); }
            },
            "getPriorityFlowControlFlags": {
              "value": function () { return this.get_priority_flow_control_flags.apply(this, arguments); }
            },
            "getPriorityGroupBandwidth": {
              "value": function () { return this.get_priority_group_bandwidth.apply(this, arguments); }
            },
            "getPriorityGroupFlags": {
              "value": function () { return this.get_priority_group_flags.apply(this, arguments); }
            },
            "getPriorityGroupId": {
              "value": function () { return this.get_priority_group_id.apply(this, arguments); }
            },
            "getPriorityStrictBandwidth": {
              "value": function () { return this.get_priority_strict_bandwidth.apply(this, arguments); }
            },
            "getPriorityTrafficClass": {
              "value": function () { return this.get_priority_traffic_class.apply(this, arguments); }
            },
            "setPriorityBandwidth": {
              "value": function () { return this.set_priority_bandwidth.apply(this, arguments); }
            },
            "setPriorityFlowControl": {
              "value": function () { return this.set_priority_flow_control.apply(this, arguments); }
            },
            "setPriorityGroupBandwidth": {
              "value": function () { return this.set_priority_group_bandwidth.apply(this, arguments); }
            },
            "setPriorityGroupId": {
              "value": function () { return this.set_priority_group_id.apply(this, arguments); }
            },
            "setPriorityStrictBandwidth": {
              "value": function () { return this.set_priority_strict_bandwidth.apply(this, arguments); }
            },
            "setPriorityTrafficClass": {
              "value": function () { return this.set_priority_traffic_class.apply(this, arguments); }
            },
            "appFcoeFlags": {
              "get": function () { return this.app_fcoe_flags; },
              "set": function (value) { this.app_fcoe_flags = value; }
            },
            "appFcoeMode": {
              "get": function () { return this.app_fcoe_mode; },
              "set": function (value) { this.app_fcoe_mode = value; }
            },
            "appFcoePriority": {
              "get": function () { return this.app_fcoe_priority; },
              "set": function (value) { this.app_fcoe_priority = value; }
            },
            "appFipFlags": {
              "get": function () { return this.app_fip_flags; },
              "set": function (value) { this.app_fip_flags = value; }
            },
            "appFipPriority": {
              "get": function () { return this.app_fip_priority; },
              "set": function (value) { this.app_fip_priority = value; }
            },
            "appIscsiFlags": {
              "get": function () { return this.app_iscsi_flags; },
              "set": function (value) { this.app_iscsi_flags = value; }
            },
            "appIscsiPriority": {
              "get": function () { return this.app_iscsi_priority; },
              "set": function (value) { this.app_iscsi_priority = value; }
            },
            "priorityBandwidth": {
              "get": function () { return this.priority_bandwidth; },
              "set": function (value) { this.priority_bandwidth = value; }
            },
            "priorityFlowControl": {
              "get": function () { return this.priority_flow_control; },
              "set": function (value) { this.priority_flow_control = value; }
            },
            "priorityFlowControlFlags": {
              "get": function () { return this.priority_flow_control_flags; },
              "set": function (value) { this.priority_flow_control_flags = value; }
            },
            "priorityGroupBandwidth": {
              "get": function () { return this.priority_group_bandwidth; },
              "set": function (value) { this.priority_group_bandwidth = value; }
            },
            "priorityGroupFlags": {
              "get": function () { return this.priority_group_flags; },
              "set": function (value) { this.priority_group_flags = value; }
            },
            "priorityGroupId": {
              "get": function () { return this.priority_group_id; },
              "set": function (value) { this.priority_group_id = value; }
            },
            "priorityStrictBandwidth": {
              "get": function () { return this.priority_strict_bandwidth; },
              "set": function (value) { this.priority_strict_bandwidth = value; }
            },
            "priorityTrafficClass": {
              "get": function () { return this.priority_traffic_class; },
              "set": function (value) { this.priority_traffic_class = value; }
            }
          },
          "static": {}
        },
        "SettingGeneric": {
          "prototype": {},
          "static": {}
        },
        "SettingGsm": {
          "prototype": {
            "getAllowedBands": {
              "value": function () { return this.get_allowed_bands.apply(this, arguments); }
            },
            "getApn": {
              "value": function () { return this.get_apn.apply(this, arguments); }
            },
            "getHomeOnly": {
              "value": function () { return this.get_home_only.apply(this, arguments); }
            },
            "getNetworkId": {
              "value": function () { return this.get_network_id.apply(this, arguments); }
            },
            "getNetworkType": {
              "value": function () { return this.get_network_type.apply(this, arguments); }
            },
            "getNumber": {
              "value": function () { return this.get_number.apply(this, arguments); }
            },
            "getPassword": {
              "value": function () { return this.get_password.apply(this, arguments); }
            },
            "getPasswordFlags": {
              "value": function () { return this.get_password_flags.apply(this, arguments); }
            },
            "getPin": {
              "value": function () { return this.get_pin.apply(this, arguments); }
            },
            "getPinFlags": {
              "value": function () { return this.get_pin_flags.apply(this, arguments); }
            },
            "getUsername": {
              "value": function () { return this.get_username.apply(this, arguments); }
            },
            "allowedBands": {
              "get": function () { return this.allowed_bands; },
              "set": function (value) { this.allowed_bands = value; }
            },
            "homeOnly": {
              "get": function () { return this.home_only; },
              "set": function (value) { this.home_only = value; }
            },
            "networkId": {
              "get": function () { return this.network_id; },
              "set": function (value) { this.network_id = value; }
            },
            "networkType": {
              "get": function () { return this.network_type; },
              "set": function (value) { this.network_type = value; }
            },
            "passwordFlags": {
              "get": function () { return this.password_flags; },
              "set": function (value) { this.password_flags = value; }
            },
            "pinFlags": {
              "get": function () { return this.pin_flags; },
              "set": function (value) { this.pin_flags = value; }
            }
          },
          "static": {}
        },
        "SettingIP4Config": {
          "prototype": {
            "addAddress": {
              "value": function () { return this.add_address.apply(this, arguments); }
            },
            "addDns": {
              "value": function () { return this.add_dns.apply(this, arguments); }
            },
            "addDnsSearch": {
              "value": function () { return this.add_dns_search.apply(this, arguments); }
            },
            "addRoute": {
              "value": function () { return this.add_route.apply(this, arguments); }
            },
            "clearAddresses": {
              "value": function () { return this.clear_addresses.apply(this, arguments); }
            },
            "clearDns": {
              "value": function () { return this.clear_dns.apply(this, arguments); }
            },
            "clearDnsSearches": {
              "value": function () { return this.clear_dns_searches.apply(this, arguments); }
            },
            "clearRoutes": {
              "value": function () { return this.clear_routes.apply(this, arguments); }
            },
            "getAddress": {
              "value": function () { return this.get_address.apply(this, arguments); }
            },
            "getDhcpClientId": {
              "value": function () { return this.get_dhcp_client_id.apply(this, arguments); }
            },
            "getDhcpHostname": {
              "value": function () { return this.get_dhcp_hostname.apply(this, arguments); }
            },
            "getDhcpSendHostname": {
              "value": function () { return this.get_dhcp_send_hostname.apply(this, arguments); }
            },
            "getDns": {
              "value": function () { return this.get_dns.apply(this, arguments); }
            },
            "getDnsSearch": {
              "value": function () { return this.get_dns_search.apply(this, arguments); }
            },
            "getIgnoreAutoDns": {
              "value": function () { return this.get_ignore_auto_dns.apply(this, arguments); }
            },
            "getIgnoreAutoRoutes": {
              "value": function () { return this.get_ignore_auto_routes.apply(this, arguments); }
            },
            "getMayFail": {
              "value": function () { return this.get_may_fail.apply(this, arguments); }
            },
            "getMethod": {
              "value": function () { return this.get_method.apply(this, arguments); }
            },
            "getNeverDefault": {
              "value": function () { return this.get_never_default.apply(this, arguments); }
            },
            "getNumAddresses": {
              "value": function () { return this.get_num_addresses.apply(this, arguments); }
            },
            "getNumDns": {
              "value": function () { return this.get_num_dns.apply(this, arguments); }
            },
            "getNumDnsSearches": {
              "value": function () { return this.get_num_dns_searches.apply(this, arguments); }
            },
            "getNumRoutes": {
              "value": function () { return this.get_num_routes.apply(this, arguments); }
            },
            "getRoute": {
              "value": function () { return this.get_route.apply(this, arguments); }
            },
            "getRouteMetric": {
              "value": function () { return this.get_route_metric.apply(this, arguments); }
            },
            "removeAddress": {
              "value": function () { return this.remove_address.apply(this, arguments); }
            },
            "removeAddressByValue": {
              "value": function () { return this.remove_address_by_value.apply(this, arguments); }
            },
            "removeDns": {
              "value": function () { return this.remove_dns.apply(this, arguments); }
            },
            "removeDnsByValue": {
              "value": function () { return this.remove_dns_by_value.apply(this, arguments); }
            },
            "removeDnsSearch": {
              "value": function () { return this.remove_dns_search.apply(this, arguments); }
            },
            "removeDnsSearchByValue": {
              "value": function () { return this.remove_dns_search_by_value.apply(this, arguments); }
            },
            "removeRoute": {
              "value": function () { return this.remove_route.apply(this, arguments); }
            },
            "removeRouteByValue": {
              "value": function () { return this.remove_route_by_value.apply(this, arguments); }
            },
            "dhcpClientId": {
              "get": function () { return this.dhcp_client_id; },
              "set": function (value) { this.dhcp_client_id = value; }
            },
            "dhcpHostname": {
              "get": function () { return this.dhcp_hostname; },
              "set": function (value) { this.dhcp_hostname = value; }
            },
            "dhcpSendHostname": {
              "get": function () { return this.dhcp_send_hostname; },
              "set": function (value) { this.dhcp_send_hostname = value; }
            },
            "dnsSearch": {
              "get": function () { return this.dns_search; },
              "set": function (value) { this.dns_search = value; }
            },
            "ignoreAutoDns": {
              "get": function () { return this.ignore_auto_dns; },
              "set": function (value) { this.ignore_auto_dns = value; }
            },
            "ignoreAutoRoutes": {
              "get": function () { return this.ignore_auto_routes; },
              "set": function (value) { this.ignore_auto_routes = value; }
            },
            "mayFail": {
              "get": function () { return this.may_fail; },
              "set": function (value) { this.may_fail = value; }
            },
            "neverDefault": {
              "get": function () { return this.never_default; },
              "set": function (value) { this.never_default = value; }
            },
            "routeMetric": {
              "get": function () { return this.route_metric; },
              "set": function (value) { this.route_metric = value; }
            }
          },
          "static": {}
        },
        "SettingIP6Config": {
          "prototype": {
            "addAddress": {
              "value": function () { return this.add_address.apply(this, arguments); }
            },
            "addDns": {
              "value": function () { return this.add_dns.apply(this, arguments); }
            },
            "addDnsSearch": {
              "value": function () { return this.add_dns_search.apply(this, arguments); }
            },
            "addRoute": {
              "value": function () { return this.add_route.apply(this, arguments); }
            },
            "clearAddresses": {
              "value": function () { return this.clear_addresses.apply(this, arguments); }
            },
            "clearDns": {
              "value": function () { return this.clear_dns.apply(this, arguments); }
            },
            "clearDnsSearches": {
              "value": function () { return this.clear_dns_searches.apply(this, arguments); }
            },
            "clearRoutes": {
              "value": function () { return this.clear_routes.apply(this, arguments); }
            },
            "getAddress": {
              "value": function () { return this.get_address.apply(this, arguments); }
            },
            "getDhcpHostname": {
              "value": function () { return this.get_dhcp_hostname.apply(this, arguments); }
            },
            "getDns": {
              "value": function () { return this.get_dns.apply(this, arguments); }
            },
            "getDnsSearch": {
              "value": function () { return this.get_dns_search.apply(this, arguments); }
            },
            "getIgnoreAutoDns": {
              "value": function () { return this.get_ignore_auto_dns.apply(this, arguments); }
            },
            "getIgnoreAutoRoutes": {
              "value": function () { return this.get_ignore_auto_routes.apply(this, arguments); }
            },
            "getIp6Privacy": {
              "value": function () { return this.get_ip6_privacy.apply(this, arguments); }
            },
            "getMayFail": {
              "value": function () { return this.get_may_fail.apply(this, arguments); }
            },
            "getMethod": {
              "value": function () { return this.get_method.apply(this, arguments); }
            },
            "getNeverDefault": {
              "value": function () { return this.get_never_default.apply(this, arguments); }
            },
            "getNumAddresses": {
              "value": function () { return this.get_num_addresses.apply(this, arguments); }
            },
            "getNumDns": {
              "value": function () { return this.get_num_dns.apply(this, arguments); }
            },
            "getNumDnsSearches": {
              "value": function () { return this.get_num_dns_searches.apply(this, arguments); }
            },
            "getNumRoutes": {
              "value": function () { return this.get_num_routes.apply(this, arguments); }
            },
            "getRoute": {
              "value": function () { return this.get_route.apply(this, arguments); }
            },
            "getRouteMetric": {
              "value": function () { return this.get_route_metric.apply(this, arguments); }
            },
            "removeAddress": {
              "value": function () { return this.remove_address.apply(this, arguments); }
            },
            "removeAddressByValue": {
              "value": function () { return this.remove_address_by_value.apply(this, arguments); }
            },
            "removeDns": {
              "value": function () { return this.remove_dns.apply(this, arguments); }
            },
            "removeDnsByValue": {
              "value": function () { return this.remove_dns_by_value.apply(this, arguments); }
            },
            "removeDnsSearch": {
              "value": function () { return this.remove_dns_search.apply(this, arguments); }
            },
            "removeDnsSearchByValue": {
              "value": function () { return this.remove_dns_search_by_value.apply(this, arguments); }
            },
            "removeRoute": {
              "value": function () { return this.remove_route.apply(this, arguments); }
            },
            "removeRouteByValue": {
              "value": function () { return this.remove_route_by_value.apply(this, arguments); }
            },
            "dhcpHostname": {
              "get": function () { return this.dhcp_hostname; },
              "set": function (value) { this.dhcp_hostname = value; }
            },
            "dnsSearch": {
              "get": function () { return this.dns_search; },
              "set": function (value) { this.dns_search = value; }
            },
            "ignoreAutoDns": {
              "get": function () { return this.ignore_auto_dns; },
              "set": function (value) { this.ignore_auto_dns = value; }
            },
            "ignoreAutoRoutes": {
              "get": function () { return this.ignore_auto_routes; },
              "set": function (value) { this.ignore_auto_routes = value; }
            },
            "ip6Privacy": {
              "get": function () { return this.ip6_privacy; },
              "set": function (value) { this.ip6_privacy = value; }
            },
            "mayFail": {
              "get": function () { return this.may_fail; },
              "set": function (value) { this.may_fail = value; }
            },
            "neverDefault": {
              "get": function () { return this.never_default; },
              "set": function (value) { this.never_default = value; }
            },
            "routeMetric": {
              "get": function () { return this.route_metric; },
              "set": function (value) { this.route_metric = value; }
            }
          },
          "static": {}
        },
        "SettingInfiniband": {
          "prototype": {
            "getMacAddress": {
              "value": function () { return this.get_mac_address.apply(this, arguments); }
            },
            "getMtu": {
              "value": function () { return this.get_mtu.apply(this, arguments); }
            },
            "getPKey": {
              "value": function () { return this.get_p_key.apply(this, arguments); }
            },
            "getParent": {
              "value": function () { return this.get_parent.apply(this, arguments); }
            },
            "getTransportMode": {
              "value": function () { return this.get_transport_mode.apply(this, arguments); }
            },
            "macAddress": {
              "get": function () { return this.mac_address; },
              "set": function (value) { this.mac_address = value; }
            },
            "pKey": {
              "get": function () { return this.p_key; },
              "set": function (value) { this.p_key = value; }
            },
            "transportMode": {
              "get": function () { return this.transport_mode; },
              "set": function (value) { this.transport_mode = value; }
            }
          },
          "static": {}
        },
        "SettingOlpcMesh": {
          "prototype": {
            "getChannel": {
              "value": function () { return this.get_channel.apply(this, arguments); }
            },
            "getDhcpAnycastAddress": {
              "value": function () { return this.get_dhcp_anycast_address.apply(this, arguments); }
            },
            "getSsid": {
              "value": function () { return this.get_ssid.apply(this, arguments); }
            },
            "dhcpAnycastAddress": {
              "get": function () { return this.dhcp_anycast_address; },
              "set": function (value) { this.dhcp_anycast_address = value; }
            }
          },
          "static": {}
        },
        "SettingPPP": {
          "prototype": {
            "getBaud": {
              "value": function () { return this.get_baud.apply(this, arguments); }
            },
            "getCrtscts": {
              "value": function () { return this.get_crtscts.apply(this, arguments); }
            },
            "getLcpEchoFailure": {
              "value": function () { return this.get_lcp_echo_failure.apply(this, arguments); }
            },
            "getLcpEchoInterval": {
              "value": function () { return this.get_lcp_echo_interval.apply(this, arguments); }
            },
            "getMppeStateful": {
              "value": function () { return this.get_mppe_stateful.apply(this, arguments); }
            },
            "getMru": {
              "value": function () { return this.get_mru.apply(this, arguments); }
            },
            "getMtu": {
              "value": function () { return this.get_mtu.apply(this, arguments); }
            },
            "getNoVjComp": {
              "value": function () { return this.get_no_vj_comp.apply(this, arguments); }
            },
            "getNoauth": {
              "value": function () { return this.get_noauth.apply(this, arguments); }
            },
            "getNobsdcomp": {
              "value": function () { return this.get_nobsdcomp.apply(this, arguments); }
            },
            "getNodeflate": {
              "value": function () { return this.get_nodeflate.apply(this, arguments); }
            },
            "getRefuseChap": {
              "value": function () { return this.get_refuse_chap.apply(this, arguments); }
            },
            "getRefuseEap": {
              "value": function () { return this.get_refuse_eap.apply(this, arguments); }
            },
            "getRefuseMschap": {
              "value": function () { return this.get_refuse_mschap.apply(this, arguments); }
            },
            "getRefuseMschapv2": {
              "value": function () { return this.get_refuse_mschapv2.apply(this, arguments); }
            },
            "getRefusePap": {
              "value": function () { return this.get_refuse_pap.apply(this, arguments); }
            },
            "getRequireMppe": {
              "value": function () { return this.get_require_mppe.apply(this, arguments); }
            },
            "getRequireMppe128": {
              "value": function () { return this.get_require_mppe_128.apply(this, arguments); }
            },
            "lcpEchoFailure": {
              "get": function () { return this.lcp_echo_failure; },
              "set": function (value) { this.lcp_echo_failure = value; }
            },
            "lcpEchoInterval": {
              "get": function () { return this.lcp_echo_interval; },
              "set": function (value) { this.lcp_echo_interval = value; }
            },
            "mppeStateful": {
              "get": function () { return this.mppe_stateful; },
              "set": function (value) { this.mppe_stateful = value; }
            },
            "noVjComp": {
              "get": function () { return this.no_vj_comp; },
              "set": function (value) { this.no_vj_comp = value; }
            },
            "refuseChap": {
              "get": function () { return this.refuse_chap; },
              "set": function (value) { this.refuse_chap = value; }
            },
            "refuseEap": {
              "get": function () { return this.refuse_eap; },
              "set": function (value) { this.refuse_eap = value; }
            },
            "refuseMschap": {
              "get": function () { return this.refuse_mschap; },
              "set": function (value) { this.refuse_mschap = value; }
            },
            "refuseMschapv2": {
              "get": function () { return this.refuse_mschapv2; },
              "set": function (value) { this.refuse_mschapv2 = value; }
            },
            "refusePap": {
              "get": function () { return this.refuse_pap; },
              "set": function (value) { this.refuse_pap = value; }
            },
            "requireMppe": {
              "get": function () { return this.require_mppe; },
              "set": function (value) { this.require_mppe = value; }
            },
            "requireMppe128": {
              "get": function () { return this.require_mppe_128; },
              "set": function (value) { this.require_mppe_128 = value; }
            }
          },
          "static": {}
        },
        "SettingPPPOE": {
          "prototype": {
            "getPassword": {
              "value": function () { return this.get_password.apply(this, arguments); }
            },
            "getPasswordFlags": {
              "value": function () { return this.get_password_flags.apply(this, arguments); }
            },
            "getService": {
              "value": function () { return this.get_service.apply(this, arguments); }
            },
            "getUsername": {
              "value": function () { return this.get_username.apply(this, arguments); }
            },
            "passwordFlags": {
              "get": function () { return this.password_flags; },
              "set": function (value) { this.password_flags = value; }
            }
          },
          "static": {}
        },
        "SettingSerial": {
          "prototype": {
            "getBaud": {
              "value": function () { return this.get_baud.apply(this, arguments); }
            },
            "getBits": {
              "value": function () { return this.get_bits.apply(this, arguments); }
            },
            "getParity": {
              "value": function () { return this.get_parity.apply(this, arguments); }
            },
            "getSendDelay": {
              "value": function () { return this.get_send_delay.apply(this, arguments); }
            },
            "getStopbits": {
              "value": function () { return this.get_stopbits.apply(this, arguments); }
            },
            "sendDelay": {
              "get": function () { return this.send_delay; },
              "set": function (value) { this.send_delay = value; }
            }
          },
          "static": {}
        },
        "SettingTeam": {
          "prototype": {
            "getConfig": {
              "value": function () { return this.get_config.apply(this, arguments); }
            },
            "getInterfaceName": {
              "value": function () { return this.get_interface_name.apply(this, arguments); }
            },
            "interfaceName": {
              "get": function () { return this.interface_name; },
              "set": function (value) { this.interface_name = value; }
            }
          },
          "static": {}
        },
        "SettingTeamPort": {
          "prototype": {
            "getConfig": {
              "value": function () { return this.get_config.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "SettingVPN": {
          "prototype": {
            "addDataItem": {
              "value": function () { return this.add_data_item.apply(this, arguments); }
            },
            "addSecret": {
              "value": function () { return this.add_secret.apply(this, arguments); }
            },
            "foreachDataItem": {
              "value": function () { return this.foreach_data_item.apply(this, arguments); }
            },
            "foreachSecret": {
              "value": function () { return this.foreach_secret.apply(this, arguments); }
            },
            "getDataItem": {
              "value": function () { return this.get_data_item.apply(this, arguments); }
            },
            "getNumDataItems": {
              "value": function () { return this.get_num_data_items.apply(this, arguments); }
            },
            "getNumSecrets": {
              "value": function () { return this.get_num_secrets.apply(this, arguments); }
            },
            "getPersistent": {
              "value": function () { return this.get_persistent.apply(this, arguments); }
            },
            "getSecret": {
              "value": function () { return this.get_secret.apply(this, arguments); }
            },
            "getServiceType": {
              "value": function () { return this.get_service_type.apply(this, arguments); }
            },
            "getUserName": {
              "value": function () { return this.get_user_name.apply(this, arguments); }
            },
            "removeDataItem": {
              "value": function () { return this.remove_data_item.apply(this, arguments); }
            },
            "removeSecret": {
              "value": function () { return this.remove_secret.apply(this, arguments); }
            },
            "serviceType": {
              "get": function () { return this.service_type; },
              "set": function (value) { this.service_type = value; }
            },
            "userName": {
              "get": function () { return this.user_name; },
              "set": function (value) { this.user_name = value; }
            }
          },
          "static": {}
        },
        "SettingVlan": {
          "prototype": {
            "addPriority": {
              "value": function () { return this.add_priority.apply(this, arguments); }
            },
            "addPriorityStr": {
              "value": function () { return this.add_priority_str.apply(this, arguments); }
            },
            "clearPriorities": {
              "value": function () { return this.clear_priorities.apply(this, arguments); }
            },
            "getFlags": {
              "value": function () { return this.get_flags.apply(this, arguments); }
            },
            "getId": {
              "value": function () { return this.get_id.apply(this, arguments); }
            },
            "getInterfaceName": {
              "value": function () { return this.get_interface_name.apply(this, arguments); }
            },
            "getNumPriorities": {
              "value": function () { return this.get_num_priorities.apply(this, arguments); }
            },
            "getParent": {
              "value": function () { return this.get_parent.apply(this, arguments); }
            },
            "getPriority": {
              "value": function () { return this.get_priority.apply(this, arguments); }
            },
            "removePriority": {
              "value": function () { return this.remove_priority.apply(this, arguments); }
            },
            "removePriorityByValue": {
              "value": function () { return this.remove_priority_by_value.apply(this, arguments); }
            },
            "removePriorityStrByValue": {
              "value": function () { return this.remove_priority_str_by_value.apply(this, arguments); }
            },
            "egressPriorityMap": {
              "get": function () { return this.egress_priority_map; },
              "set": function (value) { this.egress_priority_map = value; }
            },
            "ingressPriorityMap": {
              "get": function () { return this.ingress_priority_map; },
              "set": function (value) { this.ingress_priority_map = value; }
            },
            "interfaceName": {
              "get": function () { return this.interface_name; },
              "set": function (value) { this.interface_name = value; }
            }
          },
          "static": {}
        },
        "SettingWimax": {
          "prototype": {
            "getMacAddress": {
              "value": function () { return this.get_mac_address.apply(this, arguments); }
            },
            "getNetworkName": {
              "value": function () { return this.get_network_name.apply(this, arguments); }
            },
            "macAddress": {
              "get": function () { return this.mac_address; },
              "set": function (value) { this.mac_address = value; }
            },
            "networkName": {
              "get": function () { return this.network_name; },
              "set": function (value) { this.network_name = value; }
            }
          },
          "static": {}
        },
        "SettingWired": {
          "prototype": {
            "addMacBlacklistItem": {
              "value": function () { return this.add_mac_blacklist_item.apply(this, arguments); }
            },
            "addS390Option": {
              "value": function () { return this.add_s390_option.apply(this, arguments); }
            },
            "clearMacBlacklistItems": {
              "value": function () { return this.clear_mac_blacklist_items.apply(this, arguments); }
            },
            "getAutoNegotiate": {
              "value": function () { return this.get_auto_negotiate.apply(this, arguments); }
            },
            "getClonedMacAddress": {
              "value": function () { return this.get_cloned_mac_address.apply(this, arguments); }
            },
            "getDuplex": {
              "value": function () { return this.get_duplex.apply(this, arguments); }
            },
            "getMacAddress": {
              "value": function () { return this.get_mac_address.apply(this, arguments); }
            },
            "getMacAddressBlacklist": {
              "value": function () { return this.get_mac_address_blacklist.apply(this, arguments); }
            },
            "getMacBlacklistItem": {
              "value": function () { return this.get_mac_blacklist_item.apply(this, arguments); }
            },
            "getMtu": {
              "value": function () { return this.get_mtu.apply(this, arguments); }
            },
            "getNumMacBlacklistItems": {
              "value": function () { return this.get_num_mac_blacklist_items.apply(this, arguments); }
            },
            "getNumS390Options": {
              "value": function () { return this.get_num_s390_options.apply(this, arguments); }
            },
            "getPort": {
              "value": function () { return this.get_port.apply(this, arguments); }
            },
            "getS390Nettype": {
              "value": function () { return this.get_s390_nettype.apply(this, arguments); }
            },
            "getS390Option": {
              "value": function () { return this.get_s390_option.apply(this, arguments); }
            },
            "getS390OptionByKey": {
              "value": function () { return this.get_s390_option_by_key.apply(this, arguments); }
            },
            "getS390Subchannels": {
              "value": function () { return this.get_s390_subchannels.apply(this, arguments); }
            },
            "getSpeed": {
              "value": function () { return this.get_speed.apply(this, arguments); }
            },
            "getValidS390Options": {
              "value": function () { return this.get_valid_s390_options.apply(this, arguments); }
            },
            "removeMacBlacklistItem": {
              "value": function () { return this.remove_mac_blacklist_item.apply(this, arguments); }
            },
            "removeMacBlacklistItemByValue": {
              "value": function () { return this.remove_mac_blacklist_item_by_value.apply(this, arguments); }
            },
            "removeS390Option": {
              "value": function () { return this.remove_s390_option.apply(this, arguments); }
            },
            "autoNegotiate": {
              "get": function () { return this.auto_negotiate; },
              "set": function (value) { this.auto_negotiate = value; }
            },
            "clonedMacAddress": {
              "get": function () { return this.cloned_mac_address; },
              "set": function (value) { this.cloned_mac_address = value; }
            },
            "macAddress": {
              "get": function () { return this.mac_address; },
              "set": function (value) { this.mac_address = value; }
            },
            "macAddressBlacklist": {
              "get": function () { return this.mac_address_blacklist; },
              "set": function (value) { this.mac_address_blacklist = value; }
            },
            "s390Nettype": {
              "get": function () { return this.s390_nettype; },
              "set": function (value) { this.s390_nettype = value; }
            },
            "s390Options": {
              "get": function () { return this.s390_options; },
              "set": function (value) { this.s390_options = value; }
            },
            "s390Subchannels": {
              "get": function () { return this.s390_subchannels; },
              "set": function (value) { this.s390_subchannels = value; }
            }
          },
          "static": {}
        },
        "SettingWireless": {
          "prototype": {
            "addMacBlacklistItem": {
              "value": function () { return this.add_mac_blacklist_item.apply(this, arguments); }
            },
            "addSeenBssid": {
              "value": function () { return this.add_seen_bssid.apply(this, arguments); }
            },
            "apSecurityCompatible": {
              "value": function () { return this.ap_security_compatible.apply(this, arguments); }
            },
            "clearMacBlacklistItems": {
              "value": function () { return this.clear_mac_blacklist_items.apply(this, arguments); }
            },
            "getBand": {
              "value": function () { return this.get_band.apply(this, arguments); }
            },
            "getBssid": {
              "value": function () { return this.get_bssid.apply(this, arguments); }
            },
            "getChannel": {
              "value": function () { return this.get_channel.apply(this, arguments); }
            },
            "getClonedMacAddress": {
              "value": function () { return this.get_cloned_mac_address.apply(this, arguments); }
            },
            "getHidden": {
              "value": function () { return this.get_hidden.apply(this, arguments); }
            },
            "getMacAddress": {
              "value": function () { return this.get_mac_address.apply(this, arguments); }
            },
            "getMacAddressBlacklist": {
              "value": function () { return this.get_mac_address_blacklist.apply(this, arguments); }
            },
            "getMacBlacklistItem": {
              "value": function () { return this.get_mac_blacklist_item.apply(this, arguments); }
            },
            "getMode": {
              "value": function () { return this.get_mode.apply(this, arguments); }
            },
            "getMtu": {
              "value": function () { return this.get_mtu.apply(this, arguments); }
            },
            "getNumMacBlacklistItems": {
              "value": function () { return this.get_num_mac_blacklist_items.apply(this, arguments); }
            },
            "getNumSeenBssids": {
              "value": function () { return this.get_num_seen_bssids.apply(this, arguments); }
            },
            "getRate": {
              "value": function () { return this.get_rate.apply(this, arguments); }
            },
            "getSecurity": {
              "value": function () { return this.get_security.apply(this, arguments); }
            },
            "getSeenBssid": {
              "value": function () { return this.get_seen_bssid.apply(this, arguments); }
            },
            "getSsid": {
              "value": function () { return this.get_ssid.apply(this, arguments); }
            },
            "getTxPower": {
              "value": function () { return this.get_tx_power.apply(this, arguments); }
            },
            "removeMacBlacklistItem": {
              "value": function () { return this.remove_mac_blacklist_item.apply(this, arguments); }
            },
            "removeMacBlacklistItemByValue": {
              "value": function () { return this.remove_mac_blacklist_item_by_value.apply(this, arguments); }
            },
            "clonedMacAddress": {
              "get": function () { return this.cloned_mac_address; },
              "set": function (value) { this.cloned_mac_address = value; }
            },
            "macAddress": {
              "get": function () { return this.mac_address; },
              "set": function (value) { this.mac_address = value; }
            },
            "macAddressBlacklist": {
              "get": function () { return this.mac_address_blacklist; },
              "set": function (value) { this.mac_address_blacklist = value; }
            },
            "seenBssids": {
              "get": function () { return this.seen_bssids; },
              "set": function (value) { this.seen_bssids = value; }
            },
            "txPower": {
              "get": function () { return this.tx_power; },
              "set": function (value) { this.tx_power = value; }
            }
          },
          "static": {}
        },
        "SettingWirelessSecurity": {
          "prototype": {
            "addGroup": {
              "value": function () { return this.add_group.apply(this, arguments); }
            },
            "addPairwise": {
              "value": function () { return this.add_pairwise.apply(this, arguments); }
            },
            "addProto": {
              "value": function () { return this.add_proto.apply(this, arguments); }
            },
            "clearGroups": {
              "value": function () { return this.clear_groups.apply(this, arguments); }
            },
            "clearPairwise": {
              "value": function () { return this.clear_pairwise.apply(this, arguments); }
            },
            "clearProtos": {
              "value": function () { return this.clear_protos.apply(this, arguments); }
            },
            "getAuthAlg": {
              "value": function () { return this.get_auth_alg.apply(this, arguments); }
            },
            "getGroup": {
              "value": function () { return this.get_group.apply(this, arguments); }
            },
            "getKeyMgmt": {
              "value": function () { return this.get_key_mgmt.apply(this, arguments); }
            },
            "getLeapPassword": {
              "value": function () { return this.get_leap_password.apply(this, arguments); }
            },
            "getLeapPasswordFlags": {
              "value": function () { return this.get_leap_password_flags.apply(this, arguments); }
            },
            "getLeapUsername": {
              "value": function () { return this.get_leap_username.apply(this, arguments); }
            },
            "getNumGroups": {
              "value": function () { return this.get_num_groups.apply(this, arguments); }
            },
            "getNumPairwise": {
              "value": function () { return this.get_num_pairwise.apply(this, arguments); }
            },
            "getNumProtos": {
              "value": function () { return this.get_num_protos.apply(this, arguments); }
            },
            "getPairwise": {
              "value": function () { return this.get_pairwise.apply(this, arguments); }
            },
            "getProto": {
              "value": function () { return this.get_proto.apply(this, arguments); }
            },
            "getPsk": {
              "value": function () { return this.get_psk.apply(this, arguments); }
            },
            "getPskFlags": {
              "value": function () { return this.get_psk_flags.apply(this, arguments); }
            },
            "getWepKey": {
              "value": function () { return this.get_wep_key.apply(this, arguments); }
            },
            "getWepKeyFlags": {
              "value": function () { return this.get_wep_key_flags.apply(this, arguments); }
            },
            "getWepKeyType": {
              "value": function () { return this.get_wep_key_type.apply(this, arguments); }
            },
            "getWepTxKeyidx": {
              "value": function () { return this.get_wep_tx_keyidx.apply(this, arguments); }
            },
            "removeGroup": {
              "value": function () { return this.remove_group.apply(this, arguments); }
            },
            "removeGroupByValue": {
              "value": function () { return this.remove_group_by_value.apply(this, arguments); }
            },
            "removePairwise": {
              "value": function () { return this.remove_pairwise.apply(this, arguments); }
            },
            "removePairwiseByValue": {
              "value": function () { return this.remove_pairwise_by_value.apply(this, arguments); }
            },
            "removeProto": {
              "value": function () { return this.remove_proto.apply(this, arguments); }
            },
            "removeProtoByValue": {
              "value": function () { return this.remove_proto_by_value.apply(this, arguments); }
            },
            "setWepKey": {
              "value": function () { return this.set_wep_key.apply(this, arguments); }
            },
            "authAlg": {
              "get": function () { return this.auth_alg; },
              "set": function (value) { this.auth_alg = value; }
            },
            "keyMgmt": {
              "get": function () { return this.key_mgmt; },
              "set": function (value) { this.key_mgmt = value; }
            },
            "leapPassword": {
              "get": function () { return this.leap_password; },
              "set": function (value) { this.leap_password = value; }
            },
            "leapPasswordFlags": {
              "get": function () { return this.leap_password_flags; },
              "set": function (value) { this.leap_password_flags = value; }
            },
            "leapUsername": {
              "get": function () { return this.leap_username; },
              "set": function (value) { this.leap_username = value; }
            },
            "pskFlags": {
              "get": function () { return this.psk_flags; },
              "set": function (value) { this.psk_flags = value; }
            },
            "wepKeyFlags": {
              "get": function () { return this.wep_key_flags; },
              "set": function (value) { this.wep_key_flags = value; }
            },
            "wepKeyType": {
              "get": function () { return this.wep_key_type; },
              "set": function (value) { this.wep_key_type = value; }
            },
            "wepKey0": {
              "get": function () { return this.wep_key0; },
              "set": function (value) { this.wep_key0 = value; }
            },
            "wepKey1": {
              "get": function () { return this.wep_key1; },
              "set": function (value) { this.wep_key1 = value; }
            },
            "wepKey2": {
              "get": function () { return this.wep_key2; },
              "set": function (value) { this.wep_key2 = value; }
            },
            "wepKey3": {
              "get": function () { return this.wep_key3; },
              "set": function (value) { this.wep_key3 = value; }
            },
            "wepTxKeyidx": {
              "get": function () { return this.wep_tx_keyidx; },
              "set": function (value) { this.wep_tx_keyidx = value; }
            }
          },
          "static": {}
        }
      },
      "static": {
        "connectionErrorQuark": {
          "value": function () { return this.connection_error_quark.apply(this, arguments); }
        },
        "setting8021xErrorQuark": {
          "value": function () { return this.setting_802_1x_error_quark.apply(this, arguments); }
        },
        "settingAdslErrorQuark": {
          "value": function () { return this.setting_adsl_error_quark.apply(this, arguments); }
        },
        "settingBluetoothErrorQuark": {
          "value": function () { return this.setting_bluetooth_error_quark.apply(this, arguments); }
        },
        "settingBondErrorQuark": {
          "value": function () { return this.setting_bond_error_quark.apply(this, arguments); }
        },
        "settingBridgeErrorQuark": {
          "value": function () { return this.setting_bridge_error_quark.apply(this, arguments); }
        },
        "settingBridgePortErrorQuark": {
          "value": function () { return this.setting_bridge_port_error_quark.apply(this, arguments); }
        },
        "settingCdmaErrorQuark": {
          "value": function () { return this.setting_cdma_error_quark.apply(this, arguments); }
        },
        "settingConnectionErrorQuark": {
          "value": function () { return this.setting_connection_error_quark.apply(this, arguments); }
        },
        "settingDcbErrorQuark": {
          "value": function () { return this.setting_dcb_error_quark.apply(this, arguments); }
        },
        "settingErrorQuark": {
          "value": function () { return this.setting_error_quark.apply(this, arguments); }
        },
        "settingGenericErrorQuark": {
          "value": function () { return this.setting_generic_error_quark.apply(this, arguments); }
        },
        "settingGsmErrorQuark": {
          "value": function () { return this.setting_gsm_error_quark.apply(this, arguments); }
        },
        "settingInfinibandErrorQuark": {
          "value": function () { return this.setting_infiniband_error_quark.apply(this, arguments); }
        },
        "settingIp4ConfigErrorQuark": {
          "value": function () { return this.setting_ip4_config_error_quark.apply(this, arguments); }
        },
        "settingIp6ConfigErrorQuark": {
          "value": function () { return this.setting_ip6_config_error_quark.apply(this, arguments); }
        },
        "settingOlpcMeshErrorQuark": {
          "value": function () { return this.setting_olpc_mesh_error_quark.apply(this, arguments); }
        },
        "settingPppErrorQuark": {
          "value": function () { return this.setting_ppp_error_quark.apply(this, arguments); }
        },
        "settingPppoeErrorQuark": {
          "value": function () { return this.setting_pppoe_error_quark.apply(this, arguments); }
        },
        "settingSerialErrorQuark": {
          "value": function () { return this.setting_serial_error_quark.apply(this, arguments); }
        },
        "settingTeamErrorQuark": {
          "value": function () { return this.setting_team_error_quark.apply(this, arguments); }
        },
        "settingTeamPortErrorQuark": {
          "value": function () { return this.setting_team_port_error_quark.apply(this, arguments); }
        },
        "settingVlanErrorQuark": {
          "value": function () { return this.setting_vlan_error_quark.apply(this, arguments); }
        },
        "settingVpnErrorQuark": {
          "value": function () { return this.setting_vpn_error_quark.apply(this, arguments); }
        },
        "settingWimaxErrorQuark": {
          "value": function () { return this.setting_wimax_error_quark.apply(this, arguments); }
        },
        "settingWiredErrorQuark": {
          "value": function () { return this.setting_wired_error_quark.apply(this, arguments); }
        },
        "settingWirelessErrorQuark": {
          "value": function () { return this.setting_wireless_error_quark.apply(this, arguments); }
        },
        "settingWirelessSecurityErrorQuark": {
          "value": function () { return this.setting_wireless_security_error_quark.apply(this, arguments); }
        },
        "utilsApModeSecurityValid": {
          "value": function () { return this.utils_ap_mode_security_valid.apply(this, arguments); }
        },
        "utilsBin2hexstr": {
          "value": function () { return this.utils_bin2hexstr.apply(this, arguments); }
        },
        "utilsCheckVirtualDeviceCompatibility": {
          "value": function () { return this.utils_check_virtual_device_compatibility.apply(this, arguments); }
        },
        "utilsDeinit": {
          "value": function () { return this.utils_deinit.apply(this, arguments); }
        },
        "utilsEscapeSsid": {
          "value": function () { return this.utils_escape_ssid.apply(this, arguments); }
        },
        "utilsFileIsPkcs12": {
          "value": function () { return this.utils_file_is_pkcs12.apply(this, arguments); }
        },
        "utilsFileSearchInPaths": {
          "value": function () { return this.utils_file_search_in_paths.apply(this, arguments); }
        },
        "utilsGvalueHashDup": {
          "value": function () { return this.utils_gvalue_hash_dup.apply(this, arguments); }
        },
        "utilsHex2byte": {
          "value": function () { return this.utils_hex2byte.apply(this, arguments); }
        },
        "utilsHexstr2bin": {
          "value": function () { return this.utils_hexstr2bin.apply(this, arguments); }
        },
        "utilsHwaddrAtoba": {
          "value": function () { return this.utils_hwaddr_atoba.apply(this, arguments); }
        },
        "utilsHwaddrAton": {
          "value": function () { return this.utils_hwaddr_aton.apply(this, arguments); }
        },
        "utilsHwaddrAtonLen": {
          "value": function () { return this.utils_hwaddr_aton_len.apply(this, arguments); }
        },
        "utilsHwaddrLen": {
          "value": function () { return this.utils_hwaddr_len.apply(this, arguments); }
        },
        "utilsHwaddrNtoa": {
          "value": function () { return this.utils_hwaddr_ntoa.apply(this, arguments); }
        },
        "utilsHwaddrNtoaLen": {
          "value": function () { return this.utils_hwaddr_ntoa_len.apply(this, arguments); }
        },
        "utilsHwaddrType": {
          "value": function () { return this.utils_hwaddr_type.apply(this, arguments); }
        },
        "utilsHwaddrValid": {
          "value": function () { return this.utils_hwaddr_valid.apply(this, arguments); }
        },
        "utilsIfaceValidName": {
          "value": function () { return this.utils_iface_valid_name.apply(this, arguments); }
        },
        "utilsInet4Ntop": {
          "value": function () { return this.utils_inet4_ntop.apply(this, arguments); }
        },
        "utilsInet6Ntop": {
          "value": function () { return this.utils_inet6_ntop.apply(this, arguments); }
        },
        "utilsInit": {
          "value": function () { return this.utils_init.apply(this, arguments); }
        },
        "utilsIp4AddressesFromGvalue": {
          "value": function () { return this.utils_ip4_addresses_from_gvalue.apply(this, arguments); }
        },
        "utilsIp4AddressesToGvalue": {
          "value": function () { return this.utils_ip4_addresses_to_gvalue.apply(this, arguments); }
        },
        "utilsIp4GetDefaultPrefix": {
          "value": function () { return this.utils_ip4_get_default_prefix.apply(this, arguments); }
        },
        "utilsIp4NetmaskToPrefix": {
          "value": function () { return this.utils_ip4_netmask_to_prefix.apply(this, arguments); }
        },
        "utilsIp4PrefixToNetmask": {
          "value": function () { return this.utils_ip4_prefix_to_netmask.apply(this, arguments); }
        },
        "utilsIp4RoutesFromGvalue": {
          "value": function () { return this.utils_ip4_routes_from_gvalue.apply(this, arguments); }
        },
        "utilsIp4RoutesToGvalue": {
          "value": function () { return this.utils_ip4_routes_to_gvalue.apply(this, arguments); }
        },
        "utilsIp6AddressesFromGvalue": {
          "value": function () { return this.utils_ip6_addresses_from_gvalue.apply(this, arguments); }
        },
        "utilsIp6AddressesToGvalue": {
          "value": function () { return this.utils_ip6_addresses_to_gvalue.apply(this, arguments); }
        },
        "utilsIp6DnsFromGvalue": {
          "value": function () { return this.utils_ip6_dns_from_gvalue.apply(this, arguments); }
        },
        "utilsIp6DnsToGvalue": {
          "value": function () { return this.utils_ip6_dns_to_gvalue.apply(this, arguments); }
        },
        "utilsIp6RoutesFromGvalue": {
          "value": function () { return this.utils_ip6_routes_from_gvalue.apply(this, arguments); }
        },
        "utilsIp6RoutesToGvalue": {
          "value": function () { return this.utils_ip6_routes_to_gvalue.apply(this, arguments); }
        },
        "utilsIsEmptySsid": {
          "value": function () { return this.utils_is_empty_ssid.apply(this, arguments); }
        },
        "utilsIsUuid": {
          "value": function () { return this.utils_is_uuid.apply(this, arguments); }
        },
        "utilsRsaKeyEncrypt": {
          "value": function () { return this.utils_rsa_key_encrypt.apply(this, arguments); }
        },
        "utilsRsaKeyEncryptAes": {
          "value": function () { return this.utils_rsa_key_encrypt_aes.apply(this, arguments); }
        },
        "utilsSameSsid": {
          "value": function () { return this.utils_same_ssid.apply(this, arguments); }
        },
        "utilsSecurityValid": {
          "value": function () { return this.utils_security_valid.apply(this, arguments); }
        },
        "utilsSlistFree": {
          "value": function () { return this.utils_slist_free.apply(this, arguments); }
        },
        "utilsSsidToUtf8": {
          "value": function () { return this.utils_ssid_to_utf8.apply(this, arguments); }
        },
        "utilsUuidGenerate": {
          "value": function () { return this.utils_uuid_generate.apply(this, arguments); }
        },
        "utilsUuidGenerateFromString": {
          "value": function () { return this.utils_uuid_generate_from_string.apply(this, arguments); }
        },
        "utilsWepKeyValid": {
          "value": function () { return this.utils_wep_key_valid.apply(this, arguments); }
        },
        "utilsWifiChannelToFreq": {
          "value": function () { return this.utils_wifi_channel_to_freq.apply(this, arguments); }
        },
        "utilsWifiFindNextChannel": {
          "value": function () { return this.utils_wifi_find_next_channel.apply(this, arguments); }
        },
        "utilsWifiFreqToChannel": {
          "value": function () { return this.utils_wifi_freq_to_channel.apply(this, arguments); }
        },
        "utilsWifiIsChannelValid": {
          "value": function () { return this.utils_wifi_is_channel_valid.apply(this, arguments); }
        },
        "utilsWpaPskValid": {
          "value": function () { return this.utils_wpa_psk_valid.apply(this, arguments); }
        }
      }
    },
    "Notify": {
      "class": {
        "Notification": {
          "prototype": {
            "addAction": {
              "value": function () { return this.add_action.apply(this, arguments); }
            },
            "clearActions": {
              "value": function () { return this.clear_actions.apply(this, arguments); }
            },
            "clearHints": {
              "value": function () { return this.clear_hints.apply(this, arguments); }
            },
            "getClosedReason": {
              "value": function () { return this.get_closed_reason.apply(this, arguments); }
            },
            "setAppName": {
              "value": function () { return this.set_app_name.apply(this, arguments); }
            },
            "setCategory": {
              "value": function () { return this.set_category.apply(this, arguments); }
            },
            "setHint": {
              "value": function () { return this.set_hint.apply(this, arguments); }
            },
            "setHintByte": {
              "value": function () { return this.set_hint_byte.apply(this, arguments); }
            },
            "setHintByteArray": {
              "value": function () { return this.set_hint_byte_array.apply(this, arguments); }
            },
            "setHintDouble": {
              "value": function () { return this.set_hint_double.apply(this, arguments); }
            },
            "setHintInt32": {
              "value": function () { return this.set_hint_int32.apply(this, arguments); }
            },
            "setHintString": {
              "value": function () { return this.set_hint_string.apply(this, arguments); }
            },
            "setHintUint32": {
              "value": function () { return this.set_hint_uint32.apply(this, arguments); }
            },
            "setIconFromPixbuf": {
              "value": function () { return this.set_icon_from_pixbuf.apply(this, arguments); }
            },
            "setImageFromPixbuf": {
              "value": function () { return this.set_image_from_pixbuf.apply(this, arguments); }
            },
            "setTimeout": {
              "value": function () { return this.set_timeout.apply(this, arguments); }
            },
            "setUrgency": {
              "value": function () { return this.set_urgency.apply(this, arguments); }
            },
            "appName": {
              "get": function () { return this.app_name; },
              "set": function (value) { this.app_name = value; }
            },
            "closedReason": {
              "get": function () { return this.closed_reason; },
              "set": function (value) { this.closed_reason = value; }
            },
            "iconName": {
              "get": function () { return this.icon_name; },
              "set": function (value) { this.icon_name = value; }
            }
          },
          "static": {}
        }
      },
      "static": {
        "getAppName": {
          "value": function () { return this.get_app_name.apply(this, arguments); }
        },
        "getServerCaps": {
          "value": function () { return this.get_server_caps.apply(this, arguments); }
        },
        "getServerInfo": {
          "value": function () { return this.get_server_info.apply(this, arguments); }
        },
        "isInitted": {
          "value": function () { return this.is_initted.apply(this, arguments); }
        },
        "setAppName": {
          "value": function () { return this.set_app_name.apply(this, arguments); }
        }
      }
    },
    "PackageKitGlib": {
      "class": {
        "Category": {
          "prototype": {
            "getIcon": {
              "value": function () { return this.get_icon.apply(this, arguments); }
            },
            "getId": {
              "value": function () { return this.get_id.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getParentId": {
              "value": function () { return this.get_parent_id.apply(this, arguments); }
            },
            "getSummary": {
              "value": function () { return this.get_summary.apply(this, arguments); }
            },
            "setIcon": {
              "value": function () { return this.set_icon.apply(this, arguments); }
            },
            "setId": {
              "value": function () { return this.set_id.apply(this, arguments); }
            },
            "setName": {
              "value": function () { return this.set_name.apply(this, arguments); }
            },
            "setParentId": {
              "value": function () { return this.set_parent_id.apply(this, arguments); }
            },
            "setSummary": {
              "value": function () { return this.set_summary.apply(this, arguments); }
            },
            "catId": {
              "get": function () { return this.cat_id; },
              "set": function (value) { this.cat_id = value; }
            },
            "parentId": {
              "get": function () { return this.parent_id; },
              "set": function (value) { this.parent_id = value; }
            }
          },
          "static": {}
        },
        "Client": {
          "prototype": {
            "acceptEula": {
              "value": function () { return this.accept_eula.apply(this, arguments); }
            },
            "acceptEulaAsync": {
              "value": function () { return this.accept_eula_async.apply(this, arguments); }
            },
            "adoptAsync": {
              "value": function () { return this.adopt_async.apply(this, arguments); }
            },
            "dependsOn": {
              "value": function () { return this.depends_on.apply(this, arguments); }
            },
            "dependsOnAsync": {
              "value": function () { return this.depends_on_async.apply(this, arguments); }
            },
            "downloadPackages": {
              "value": function () { return this.download_packages.apply(this, arguments); }
            },
            "downloadPackagesAsync": {
              "value": function () { return this.download_packages_async.apply(this, arguments); }
            },
            "genericFinish": {
              "value": function () { return this.generic_finish.apply(this, arguments); }
            },
            "getBackground": {
              "value": function () { return this.get_background.apply(this, arguments); }
            },
            "getCacheAge": {
              "value": function () { return this.get_cache_age.apply(this, arguments); }
            },
            "getCategories": {
              "value": function () { return this.get_categories.apply(this, arguments); }
            },
            "getCategoriesAsync": {
              "value": function () { return this.get_categories_async.apply(this, arguments); }
            },
            "getDetails": {
              "value": function () { return this.get_details.apply(this, arguments); }
            },
            "getDetailsAsync": {
              "value": function () { return this.get_details_async.apply(this, arguments); }
            },
            "getDetailsLocal": {
              "value": function () { return this.get_details_local.apply(this, arguments); }
            },
            "getDetailsLocalAsync": {
              "value": function () { return this.get_details_local_async.apply(this, arguments); }
            },
            "getDistroUpgrades": {
              "value": function () { return this.get_distro_upgrades.apply(this, arguments); }
            },
            "getDistroUpgradesAsync": {
              "value": function () { return this.get_distro_upgrades_async.apply(this, arguments); }
            },
            "getFiles": {
              "value": function () { return this.get_files.apply(this, arguments); }
            },
            "getFilesAsync": {
              "value": function () { return this.get_files_async.apply(this, arguments); }
            },
            "getFilesLocal": {
              "value": function () { return this.get_files_local.apply(this, arguments); }
            },
            "getFilesLocalAsync": {
              "value": function () { return this.get_files_local_async.apply(this, arguments); }
            },
            "getIdle": {
              "value": function () { return this.get_idle.apply(this, arguments); }
            },
            "getInteractive": {
              "value": function () { return this.get_interactive.apply(this, arguments); }
            },
            "getLocale": {
              "value": function () { return this.get_locale.apply(this, arguments); }
            },
            "getOldTransactions": {
              "value": function () { return this.get_old_transactions.apply(this, arguments); }
            },
            "getOldTransactionsAsync": {
              "value": function () { return this.get_old_transactions_async.apply(this, arguments); }
            },
            "getPackages": {
              "value": function () { return this.get_packages.apply(this, arguments); }
            },
            "getPackagesAsync": {
              "value": function () { return this.get_packages_async.apply(this, arguments); }
            },
            "getProgress": {
              "value": function () { return this.get_progress.apply(this, arguments); }
            },
            "getProgressAsync": {
              "value": function () { return this.get_progress_async.apply(this, arguments); }
            },
            "getProgressFinish": {
              "value": function () { return this.get_progress_finish.apply(this, arguments); }
            },
            "getRepoList": {
              "value": function () { return this.get_repo_list.apply(this, arguments); }
            },
            "getRepoListAsync": {
              "value": function () { return this.get_repo_list_async.apply(this, arguments); }
            },
            "getUpdateDetail": {
              "value": function () { return this.get_update_detail.apply(this, arguments); }
            },
            "getUpdateDetailAsync": {
              "value": function () { return this.get_update_detail_async.apply(this, arguments); }
            },
            "getUpdates": {
              "value": function () { return this.get_updates.apply(this, arguments); }
            },
            "getUpdatesAsync": {
              "value": function () { return this.get_updates_async.apply(this, arguments); }
            },
            "installFiles": {
              "value": function () { return this.install_files.apply(this, arguments); }
            },
            "installFilesAsync": {
              "value": function () { return this.install_files_async.apply(this, arguments); }
            },
            "installPackages": {
              "value": function () { return this.install_packages.apply(this, arguments); }
            },
            "installPackagesAsync": {
              "value": function () { return this.install_packages_async.apply(this, arguments); }
            },
            "installSignature": {
              "value": function () { return this.install_signature.apply(this, arguments); }
            },
            "installSignatureAsync": {
              "value": function () { return this.install_signature_async.apply(this, arguments); }
            },
            "refreshCache": {
              "value": function () { return this.refresh_cache.apply(this, arguments); }
            },
            "refreshCacheAsync": {
              "value": function () { return this.refresh_cache_async.apply(this, arguments); }
            },
            "removePackages": {
              "value": function () { return this.remove_packages.apply(this, arguments); }
            },
            "removePackagesAsync": {
              "value": function () { return this.remove_packages_async.apply(this, arguments); }
            },
            "repairSystem": {
              "value": function () { return this.repair_system.apply(this, arguments); }
            },
            "repairSystemAsync": {
              "value": function () { return this.repair_system_async.apply(this, arguments); }
            },
            "repoEnable": {
              "value": function () { return this.repo_enable.apply(this, arguments); }
            },
            "repoEnableAsync": {
              "value": function () { return this.repo_enable_async.apply(this, arguments); }
            },
            "repoRemove": {
              "value": function () { return this.repo_remove.apply(this, arguments); }
            },
            "repoRemoveAsync": {
              "value": function () { return this.repo_remove_async.apply(this, arguments); }
            },
            "repoSetData": {
              "value": function () { return this.repo_set_data.apply(this, arguments); }
            },
            "repoSetDataAsync": {
              "value": function () { return this.repo_set_data_async.apply(this, arguments); }
            },
            "requiredBy": {
              "value": function () { return this.required_by.apply(this, arguments); }
            },
            "requiredByAsync": {
              "value": function () { return this.required_by_async.apply(this, arguments); }
            },
            "resolveAsync": {
              "value": function () { return this.resolve_async.apply(this, arguments); }
            },
            "searchDetails": {
              "value": function () { return this.search_details.apply(this, arguments); }
            },
            "searchDetailsAsync": {
              "value": function () { return this.search_details_async.apply(this, arguments); }
            },
            "searchFiles": {
              "value": function () { return this.search_files.apply(this, arguments); }
            },
            "searchFilesAsync": {
              "value": function () { return this.search_files_async.apply(this, arguments); }
            },
            "searchGroups": {
              "value": function () { return this.search_groups.apply(this, arguments); }
            },
            "searchGroupsAsync": {
              "value": function () { return this.search_groups_async.apply(this, arguments); }
            },
            "searchNames": {
              "value": function () { return this.search_names.apply(this, arguments); }
            },
            "searchNamesAsync": {
              "value": function () { return this.search_names_async.apply(this, arguments); }
            },
            "setBackground": {
              "value": function () { return this.set_background.apply(this, arguments); }
            },
            "setCacheAge": {
              "value": function () { return this.set_cache_age.apply(this, arguments); }
            },
            "setInteractive": {
              "value": function () { return this.set_interactive.apply(this, arguments); }
            },
            "setLocale": {
              "value": function () { return this.set_locale.apply(this, arguments); }
            },
            "updatePackages": {
              "value": function () { return this.update_packages.apply(this, arguments); }
            },
            "updatePackagesAsync": {
              "value": function () { return this.update_packages_async.apply(this, arguments); }
            },
            "upgradeSystem": {
              "value": function () { return this.upgrade_system.apply(this, arguments); }
            },
            "upgradeSystemAsync": {
              "value": function () { return this.upgrade_system_async.apply(this, arguments); }
            },
            "whatProvides": {
              "value": function () { return this.what_provides.apply(this, arguments); }
            },
            "whatProvidesAsync": {
              "value": function () { return this.what_provides_async.apply(this, arguments); }
            },
            "cacheAge": {
              "get": function () { return this.cache_age; },
              "set": function (value) { this.cache_age = value; }
            }
          },
          "static": {}
        },
        "ClientHelper": {
          "prototype": {},
          "static": {}
        },
        "Control": {
          "prototype": {
            "canAuthorizeAsync": {
              "value": function () { return this.can_authorize_async.apply(this, arguments); }
            },
            "canAuthorizeFinish": {
              "value": function () { return this.can_authorize_finish.apply(this, arguments); }
            },
            "getDaemonStateAsync": {
              "value": function () { return this.get_daemon_state_async.apply(this, arguments); }
            },
            "getDaemonStateFinish": {
              "value": function () { return this.get_daemon_state_finish.apply(this, arguments); }
            },
            "getProperties": {
              "value": function () { return this.get_properties.apply(this, arguments); }
            },
            "getPropertiesAsync": {
              "value": function () { return this.get_properties_async.apply(this, arguments); }
            },
            "getPropertiesFinish": {
              "value": function () { return this.get_properties_finish.apply(this, arguments); }
            },
            "getTidAsync": {
              "value": function () { return this.get_tid_async.apply(this, arguments); }
            },
            "getTidFinish": {
              "value": function () { return this.get_tid_finish.apply(this, arguments); }
            },
            "getTimeSinceActionAsync": {
              "value": function () { return this.get_time_since_action_async.apply(this, arguments); }
            },
            "getTimeSinceActionFinish": {
              "value": function () { return this.get_time_since_action_finish.apply(this, arguments); }
            },
            "getTransactionList": {
              "value": function () { return this.get_transaction_list.apply(this, arguments); }
            },
            "getTransactionListAsync": {
              "value": function () { return this.get_transaction_list_async.apply(this, arguments); }
            },
            "getTransactionListFinish": {
              "value": function () { return this.get_transaction_list_finish.apply(this, arguments); }
            },
            "setProxy": {
              "value": function () { return this.set_proxy.apply(this, arguments); }
            },
            "setProxy2": {
              "value": function () { return this.set_proxy2.apply(this, arguments); }
            },
            "setProxy2Async": {
              "value": function () { return this.set_proxy2_async.apply(this, arguments); }
            },
            "setProxyAsync": {
              "value": function () { return this.set_proxy_async.apply(this, arguments); }
            },
            "setProxyFinish": {
              "value": function () { return this.set_proxy_finish.apply(this, arguments); }
            },
            "suggestDaemonQuit": {
              "value": function () { return this.suggest_daemon_quit.apply(this, arguments); }
            },
            "suggestDaemonQuitAsync": {
              "value": function () { return this.suggest_daemon_quit_async.apply(this, arguments); }
            },
            "suggestDaemonQuitFinish": {
              "value": function () { return this.suggest_daemon_quit_finish.apply(this, arguments); }
            },
            "backendAuthor": {
              "get": function () { return this.backend_author; },
              "set": function (value) { this.backend_author = value; }
            },
            "backendDescription": {
              "get": function () { return this.backend_description; },
              "set": function (value) { this.backend_description = value; }
            },
            "backendName": {
              "get": function () { return this.backend_name; },
              "set": function (value) { this.backend_name = value; }
            },
            "distroId": {
              "get": function () { return this.distro_id; },
              "set": function (value) { this.distro_id = value; }
            },
            "mimeTypes": {
              "get": function () { return this.mime_types; },
              "set": function (value) { this.mime_types = value; }
            },
            "networkState": {
              "get": function () { return this.network_state; },
              "set": function (value) { this.network_state = value; }
            },
            "versionMajor": {
              "get": function () { return this.version_major; },
              "set": function (value) { this.version_major = value; }
            },
            "versionMicro": {
              "get": function () { return this.version_micro; },
              "set": function (value) { this.version_micro = value; }
            },
            "versionMinor": {
              "get": function () { return this.version_minor; },
              "set": function (value) { this.version_minor = value; }
            }
          },
          "static": {}
        },
        "Desktop": {
          "prototype": {
            "getFilesForPackage": {
              "value": function () { return this.get_files_for_package.apply(this, arguments); }
            },
            "getPackageForFile": {
              "value": function () { return this.get_package_for_file.apply(this, arguments); }
            },
            "getShownForPackage": {
              "value": function () { return this.get_shown_for_package.apply(this, arguments); }
            },
            "openDatabase": {
              "value": function () { return this.open_database.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Details": {
          "prototype": {
            "getDescription": {
              "value": function () { return this.get_description.apply(this, arguments); }
            },
            "getGroup": {
              "value": function () { return this.get_group.apply(this, arguments); }
            },
            "getLicense": {
              "value": function () { return this.get_license.apply(this, arguments); }
            },
            "getPackageId": {
              "value": function () { return this.get_package_id.apply(this, arguments); }
            },
            "getSize": {
              "value": function () { return this.get_size.apply(this, arguments); }
            },
            "getSummary": {
              "value": function () { return this.get_summary.apply(this, arguments); }
            },
            "getUrl": {
              "value": function () { return this.get_url.apply(this, arguments); }
            },
            "packageId": {
              "get": function () { return this.package_id; },
              "set": function (value) { this.package_id = value; }
            }
          },
          "static": {}
        },
        "DistroUpgrade": {
          "prototype": {
            "getId": {
              "value": function () { return this.get_id.apply(this, arguments); }
            },
            "getState": {
              "value": function () { return this.get_state.apply(this, arguments); }
            },
            "getSummary": {
              "value": function () { return this.get_summary.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Error": {
          "prototype": {
            "getCode": {
              "value": function () { return this.get_code.apply(this, arguments); }
            },
            "getDetails": {
              "value": function () { return this.get_details.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "EulaRequired": {
          "prototype": {
            "eulaId": {
              "get": function () { return this.eula_id; },
              "set": function (value) { this.eula_id = value; }
            },
            "licenseAgreement": {
              "get": function () { return this.license_agreement; },
              "set": function (value) { this.license_agreement = value; }
            },
            "packageId": {
              "get": function () { return this.package_id; },
              "set": function (value) { this.package_id = value; }
            },
            "vendorName": {
              "get": function () { return this.vendor_name; },
              "set": function (value) { this.vendor_name = value; }
            }
          },
          "static": {}
        },
        "Files": {
          "prototype": {
            "getFiles": {
              "value": function () { return this.get_files.apply(this, arguments); }
            },
            "getPackageId": {
              "value": function () { return this.get_package_id.apply(this, arguments); }
            },
            "packageId": {
              "get": function () { return this.package_id; },
              "set": function (value) { this.package_id = value; }
            }
          },
          "static": {}
        },
        "ItemProgress": {
          "prototype": {
            "getPackageId": {
              "value": function () { return this.get_package_id.apply(this, arguments); }
            },
            "getPercentage": {
              "value": function () { return this.get_percentage.apply(this, arguments); }
            },
            "getStatus": {
              "value": function () { return this.get_status.apply(this, arguments); }
            },
            "packageId": {
              "get": function () { return this.package_id; },
              "set": function (value) { this.package_id = value; }
            }
          },
          "static": {}
        },
        "MediaChangeRequired": {
          "prototype": {
            "mediaId": {
              "get": function () { return this.media_id; },
              "set": function (value) { this.media_id = value; }
            },
            "mediaText": {
              "get": function () { return this.media_text; },
              "set": function (value) { this.media_text = value; }
            },
            "mediaType": {
              "get": function () { return this.media_type; },
              "set": function (value) { this.media_type = value; }
            }
          },
          "static": {}
        },
        "Package": {
          "prototype": {
            "equalId": {
              "value": function () { return this.equal_id.apply(this, arguments); }
            },
            "getArch": {
              "value": function () { return this.get_arch.apply(this, arguments); }
            },
            "getData": {
              "value": function () { return this.get_data.apply(this, arguments); }
            },
            "getId": {
              "value": function () { return this.get_id.apply(this, arguments); }
            },
            "getInfo": {
              "value": function () { return this.get_info.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getSummary": {
              "value": function () { return this.get_summary.apply(this, arguments); }
            },
            "getVersion": {
              "value": function () { return this.get_version.apply(this, arguments); }
            },
            "setId": {
              "value": function () { return this.set_id.apply(this, arguments); }
            },
            "setInfo": {
              "value": function () { return this.set_info.apply(this, arguments); }
            },
            "setSummary": {
              "value": function () { return this.set_summary.apply(this, arguments); }
            },
            "packageId": {
              "get": function () { return this.package_id; },
              "set": function (value) { this.package_id = value; }
            },
            "updateBugzillaUrls": {
              "get": function () { return this.update_bugzilla_urls; },
              "set": function (value) { this.update_bugzilla_urls = value; }
            },
            "updateChangelog": {
              "get": function () { return this.update_changelog; },
              "set": function (value) { this.update_changelog = value; }
            },
            "updateCveUrls": {
              "get": function () { return this.update_cve_urls; },
              "set": function (value) { this.update_cve_urls = value; }
            },
            "updateIssued": {
              "get": function () { return this.update_issued; },
              "set": function (value) { this.update_issued = value; }
            },
            "updateObsoletes": {
              "get": function () { return this.update_obsoletes; },
              "set": function (value) { this.update_obsoletes = value; }
            },
            "updateRestart": {
              "get": function () { return this.update_restart; },
              "set": function (value) { this.update_restart = value; }
            },
            "updateState": {
              "get": function () { return this.update_state; },
              "set": function (value) { this.update_state = value; }
            },
            "updateText": {
              "get": function () { return this.update_text; },
              "set": function (value) { this.update_text = value; }
            },
            "updateUpdated": {
              "get": function () { return this.update_updated; },
              "set": function (value) { this.update_updated = value; }
            },
            "updateUpdates": {
              "get": function () { return this.update_updates; },
              "set": function (value) { this.update_updates = value; }
            },
            "updateVendorUrls": {
              "get": function () { return this.update_vendor_urls; },
              "set": function (value) { this.update_vendor_urls = value; }
            }
          },
          "static": {
            "idBuild": {
              "value": function () { return this.id_build.apply(this, arguments); }
            },
            "idCheck": {
              "value": function () { return this.id_check.apply(this, arguments); }
            },
            "idEqualFuzzyArch": {
              "value": function () { return this.id_equal_fuzzy_arch.apply(this, arguments); }
            },
            "idSplit": {
              "value": function () { return this.id_split.apply(this, arguments); }
            },
            "idTest": {
              "value": function () { return this.id_test.apply(this, arguments); }
            },
            "idToPrintable": {
              "value": function () { return this.id_to_printable.apply(this, arguments); }
            },
            "idsAddId": {
              "value": function () { return this.ids_add_id.apply(this, arguments); }
            },
            "idsAddIds": {
              "value": function () { return this.ids_add_ids.apply(this, arguments); }
            },
            "idsCheck": {
              "value": function () { return this.ids_check.apply(this, arguments); }
            },
            "idsFromId": {
              "value": function () { return this.ids_from_id.apply(this, arguments); }
            },
            "idsFromString": {
              "value": function () { return this.ids_from_string.apply(this, arguments); }
            },
            "idsPresentId": {
              "value": function () { return this.ids_present_id.apply(this, arguments); }
            },
            "idsRemoveId": {
              "value": function () { return this.ids_remove_id.apply(this, arguments); }
            },
            "idsTest": {
              "value": function () { return this.ids_test.apply(this, arguments); }
            },
            "idsToString": {
              "value": function () { return this.ids_to_string.apply(this, arguments); }
            }
          }
        },
        "PackageSack": {
          "prototype": {
            "addPackage": {
              "value": function () { return this.add_package.apply(this, arguments); }
            },
            "addPackageById": {
              "value": function () { return this.add_package_by_id.apply(this, arguments); }
            },
            "addPackagesFromFile": {
              "value": function () { return this.add_packages_from_file.apply(this, arguments); }
            },
            "filterByInfo": {
              "value": function () { return this.filter_by_info.apply(this, arguments); }
            },
            "findById": {
              "value": function () { return this.find_by_id.apply(this, arguments); }
            },
            "findByIdNameArch": {
              "value": function () { return this.find_by_id_name_arch.apply(this, arguments); }
            },
            "getArray": {
              "value": function () { return this.get_array.apply(this, arguments); }
            },
            "getDetails": {
              "value": function () { return this.get_details.apply(this, arguments); }
            },
            "getDetailsAsync": {
              "value": function () { return this.get_details_async.apply(this, arguments); }
            },
            "getIds": {
              "value": function () { return this.get_ids.apply(this, arguments); }
            },
            "getSize": {
              "value": function () { return this.get_size.apply(this, arguments); }
            },
            "getTotalBytes": {
              "value": function () { return this.get_total_bytes.apply(this, arguments); }
            },
            "getUpdateDetail": {
              "value": function () { return this.get_update_detail.apply(this, arguments); }
            },
            "getUpdateDetailAsync": {
              "value": function () { return this.get_update_detail_async.apply(this, arguments); }
            },
            "mergeGenericFinish": {
              "value": function () { return this.merge_generic_finish.apply(this, arguments); }
            },
            "removeByFilter": {
              "value": function () { return this.remove_by_filter.apply(this, arguments); }
            },
            "removePackage": {
              "value": function () { return this.remove_package.apply(this, arguments); }
            },
            "removePackageById": {
              "value": function () { return this.remove_package_by_id.apply(this, arguments); }
            },
            "resolveAsync": {
              "value": function () { return this.resolve_async.apply(this, arguments); }
            },
            "toFile": {
              "value": function () { return this.to_file.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Progress": {
          "prototype": {
            "getAllowCancel": {
              "value": function () { return this.get_allow_cancel.apply(this, arguments); }
            },
            "getCallerActive": {
              "value": function () { return this.get_caller_active.apply(this, arguments); }
            },
            "getDownloadSizeRemaining": {
              "value": function () { return this.get_download_size_remaining.apply(this, arguments); }
            },
            "getElapsedTime": {
              "value": function () { return this.get_elapsed_time.apply(this, arguments); }
            },
            "getItemProgress": {
              "value": function () { return this.get_item_progress.apply(this, arguments); }
            },
            "getPackage": {
              "value": function () { return this.get_package.apply(this, arguments); }
            },
            "getPackageId": {
              "value": function () { return this.get_package_id.apply(this, arguments); }
            },
            "getPercentage": {
              "value": function () { return this.get_percentage.apply(this, arguments); }
            },
            "getRemainingTime": {
              "value": function () { return this.get_remaining_time.apply(this, arguments); }
            },
            "getRole": {
              "value": function () { return this.get_role.apply(this, arguments); }
            },
            "getSpeed": {
              "value": function () { return this.get_speed.apply(this, arguments); }
            },
            "getStatus": {
              "value": function () { return this.get_status.apply(this, arguments); }
            },
            "getTransactionFlags": {
              "value": function () { return this.get_transaction_flags.apply(this, arguments); }
            },
            "getTransactionId": {
              "value": function () { return this.get_transaction_id.apply(this, arguments); }
            },
            "getUid": {
              "value": function () { return this.get_uid.apply(this, arguments); }
            },
            "setAllowCancel": {
              "value": function () { return this.set_allow_cancel.apply(this, arguments); }
            },
            "setCallerActive": {
              "value": function () { return this.set_caller_active.apply(this, arguments); }
            },
            "setDownloadSizeRemaining": {
              "value": function () { return this.set_download_size_remaining.apply(this, arguments); }
            },
            "setElapsedTime": {
              "value": function () { return this.set_elapsed_time.apply(this, arguments); }
            },
            "setItemProgress": {
              "value": function () { return this.set_item_progress.apply(this, arguments); }
            },
            "setPackage": {
              "value": function () { return this.set_package.apply(this, arguments); }
            },
            "setPackageId": {
              "value": function () { return this.set_package_id.apply(this, arguments); }
            },
            "setPercentage": {
              "value": function () { return this.set_percentage.apply(this, arguments); }
            },
            "setRemainingTime": {
              "value": function () { return this.set_remaining_time.apply(this, arguments); }
            },
            "setRole": {
              "value": function () { return this.set_role.apply(this, arguments); }
            },
            "setSpeed": {
              "value": function () { return this.set_speed.apply(this, arguments); }
            },
            "setStatus": {
              "value": function () { return this.set_status.apply(this, arguments); }
            },
            "setTransactionFlags": {
              "value": function () { return this.set_transaction_flags.apply(this, arguments); }
            },
            "setTransactionId": {
              "value": function () { return this.set_transaction_id.apply(this, arguments); }
            },
            "setUid": {
              "value": function () { return this.set_uid.apply(this, arguments); }
            },
            "allowCancel": {
              "get": function () { return this.allow_cancel; },
              "set": function (value) { this.allow_cancel = value; }
            },
            "callerActive": {
              "get": function () { return this.caller_active; },
              "set": function (value) { this.caller_active = value; }
            },
            "downloadSizeRemaining": {
              "get": function () { return this.download_size_remaining; },
              "set": function (value) { this.download_size_remaining = value; }
            },
            "elapsedTime": {
              "get": function () { return this.elapsed_time; },
              "set": function (value) { this.elapsed_time = value; }
            },
            "itemProgress": {
              "get": function () { return this.item_progress; },
              "set": function (value) { this.item_progress = value; }
            },
            "packageId": {
              "get": function () { return this.package_id; },
              "set": function (value) { this.package_id = value; }
            },
            "remainingTime": {
              "get": function () { return this.remaining_time; },
              "set": function (value) { this.remaining_time = value; }
            },
            "transactionFlags": {
              "get": function () { return this.transaction_flags; },
              "set": function (value) { this.transaction_flags = value; }
            },
            "transactionId": {
              "get": function () { return this.transaction_id; },
              "set": function (value) { this.transaction_id = value; }
            }
          },
          "static": {}
        },
        "RepoDetail": {
          "prototype": {
            "getDescription": {
              "value": function () { return this.get_description.apply(this, arguments); }
            },
            "getEnabled": {
              "value": function () { return this.get_enabled.apply(this, arguments); }
            },
            "getId": {
              "value": function () { return this.get_id.apply(this, arguments); }
            },
            "repoId": {
              "get": function () { return this.repo_id; },
              "set": function (value) { this.repo_id = value; }
            }
          },
          "static": {}
        },
        "RepoSignatureRequired": {
          "prototype": {
            "keyFingerprint": {
              "get": function () { return this.key_fingerprint; },
              "set": function (value) { this.key_fingerprint = value; }
            },
            "keyId": {
              "get": function () { return this.key_id; },
              "set": function (value) { this.key_id = value; }
            },
            "keyTimestamp": {
              "get": function () { return this.key_timestamp; },
              "set": function (value) { this.key_timestamp = value; }
            },
            "keyUrl": {
              "get": function () { return this.key_url; },
              "set": function (value) { this.key_url = value; }
            },
            "keyUserid": {
              "get": function () { return this.key_userid; },
              "set": function (value) { this.key_userid = value; }
            },
            "packageId": {
              "get": function () { return this.package_id; },
              "set": function (value) { this.package_id = value; }
            },
            "repositoryName": {
              "get": function () { return this.repository_name; },
              "set": function (value) { this.repository_name = value; }
            }
          },
          "static": {}
        },
        "RequireRestart": {
          "prototype": {
            "packageId": {
              "get": function () { return this.package_id; },
              "set": function (value) { this.package_id = value; }
            }
          },
          "static": {}
        },
        "Results": {
          "prototype": {
            "addCategory": {
              "value": function () { return this.add_category.apply(this, arguments); }
            },
            "addDetails": {
              "value": function () { return this.add_details.apply(this, arguments); }
            },
            "addDistroUpgrade": {
              "value": function () { return this.add_distro_upgrade.apply(this, arguments); }
            },
            "addEulaRequired": {
              "value": function () { return this.add_eula_required.apply(this, arguments); }
            },
            "addFiles": {
              "value": function () { return this.add_files.apply(this, arguments); }
            },
            "addMediaChangeRequired": {
              "value": function () { return this.add_media_change_required.apply(this, arguments); }
            },
            "addPackage": {
              "value": function () { return this.add_package.apply(this, arguments); }
            },
            "addRepoDetail": {
              "value": function () { return this.add_repo_detail.apply(this, arguments); }
            },
            "addRepoSignatureRequired": {
              "value": function () { return this.add_repo_signature_required.apply(this, arguments); }
            },
            "addRequireRestart": {
              "value": function () { return this.add_require_restart.apply(this, arguments); }
            },
            "addTransaction": {
              "value": function () { return this.add_transaction.apply(this, arguments); }
            },
            "addUpdateDetail": {
              "value": function () { return this.add_update_detail.apply(this, arguments); }
            },
            "getCategoryArray": {
              "value": function () { return this.get_category_array.apply(this, arguments); }
            },
            "getDetailsArray": {
              "value": function () { return this.get_details_array.apply(this, arguments); }
            },
            "getDistroUpgradeArray": {
              "value": function () { return this.get_distro_upgrade_array.apply(this, arguments); }
            },
            "getErrorCode": {
              "value": function () { return this.get_error_code.apply(this, arguments); }
            },
            "getEulaRequiredArray": {
              "value": function () { return this.get_eula_required_array.apply(this, arguments); }
            },
            "getExitCode": {
              "value": function () { return this.get_exit_code.apply(this, arguments); }
            },
            "getFilesArray": {
              "value": function () { return this.get_files_array.apply(this, arguments); }
            },
            "getMediaChangeRequiredArray": {
              "value": function () { return this.get_media_change_required_array.apply(this, arguments); }
            },
            "getPackageArray": {
              "value": function () { return this.get_package_array.apply(this, arguments); }
            },
            "getPackageSack": {
              "value": function () { return this.get_package_sack.apply(this, arguments); }
            },
            "getRepoDetailArray": {
              "value": function () { return this.get_repo_detail_array.apply(this, arguments); }
            },
            "getRepoSignatureRequiredArray": {
              "value": function () { return this.get_repo_signature_required_array.apply(this, arguments); }
            },
            "getRequireRestartArray": {
              "value": function () { return this.get_require_restart_array.apply(this, arguments); }
            },
            "getRequireRestartWorst": {
              "value": function () { return this.get_require_restart_worst.apply(this, arguments); }
            },
            "getRole": {
              "value": function () { return this.get_role.apply(this, arguments); }
            },
            "getTransactionArray": {
              "value": function () { return this.get_transaction_array.apply(this, arguments); }
            },
            "getTransactionFlags": {
              "value": function () { return this.get_transaction_flags.apply(this, arguments); }
            },
            "getUpdateDetailArray": {
              "value": function () { return this.get_update_detail_array.apply(this, arguments); }
            },
            "setErrorCode": {
              "value": function () { return this.set_error_code.apply(this, arguments); }
            },
            "setExitCode": {
              "value": function () { return this.set_exit_code.apply(this, arguments); }
            },
            "transactionFlags": {
              "get": function () { return this.transaction_flags; },
              "set": function (value) { this.transaction_flags = value; }
            }
          },
          "static": {}
        },
        "Source": {
          "prototype": {
            "transactionId": {
              "get": function () { return this.transaction_id; },
              "set": function (value) { this.transaction_id = value; }
            }
          },
          "static": {}
        },
        "Task": {
          "prototype": {
            "dependsOnAsync": {
              "value": function () { return this.depends_on_async.apply(this, arguments); }
            },
            "dependsOnSync": {
              "value": function () { return this.depends_on_sync.apply(this, arguments); }
            },
            "downloadPackagesAsync": {
              "value": function () { return this.download_packages_async.apply(this, arguments); }
            },
            "downloadPackagesSync": {
              "value": function () { return this.download_packages_sync.apply(this, arguments); }
            },
            "genericFinish": {
              "value": function () { return this.generic_finish.apply(this, arguments); }
            },
            "getAllowDowngrade": {
              "value": function () { return this.get_allow_downgrade.apply(this, arguments); }
            },
            "getAllowReinstall": {
              "value": function () { return this.get_allow_reinstall.apply(this, arguments); }
            },
            "getCategoriesAsync": {
              "value": function () { return this.get_categories_async.apply(this, arguments); }
            },
            "getCategoriesSync": {
              "value": function () { return this.get_categories_sync.apply(this, arguments); }
            },
            "getDetailsAsync": {
              "value": function () { return this.get_details_async.apply(this, arguments); }
            },
            "getDetailsSync": {
              "value": function () { return this.get_details_sync.apply(this, arguments); }
            },
            "getFilesAsync": {
              "value": function () { return this.get_files_async.apply(this, arguments); }
            },
            "getFilesSync": {
              "value": function () { return this.get_files_sync.apply(this, arguments); }
            },
            "getInteractive": {
              "value": function () { return this.get_interactive.apply(this, arguments); }
            },
            "getOnlyDownload": {
              "value": function () { return this.get_only_download.apply(this, arguments); }
            },
            "getOnlyTrusted": {
              "value": function () { return this.get_only_trusted.apply(this, arguments); }
            },
            "getPackagesAsync": {
              "value": function () { return this.get_packages_async.apply(this, arguments); }
            },
            "getPackagesSync": {
              "value": function () { return this.get_packages_sync.apply(this, arguments); }
            },
            "getRepoListAsync": {
              "value": function () { return this.get_repo_list_async.apply(this, arguments); }
            },
            "getRepoListSync": {
              "value": function () { return this.get_repo_list_sync.apply(this, arguments); }
            },
            "getSimulate": {
              "value": function () { return this.get_simulate.apply(this, arguments); }
            },
            "getUpdateDetailAsync": {
              "value": function () { return this.get_update_detail_async.apply(this, arguments); }
            },
            "getUpdateDetailSync": {
              "value": function () { return this.get_update_detail_sync.apply(this, arguments); }
            },
            "getUpdatesAsync": {
              "value": function () { return this.get_updates_async.apply(this, arguments); }
            },
            "getUpdatesSync": {
              "value": function () { return this.get_updates_sync.apply(this, arguments); }
            },
            "installFilesAsync": {
              "value": function () { return this.install_files_async.apply(this, arguments); }
            },
            "installFilesSync": {
              "value": function () { return this.install_files_sync.apply(this, arguments); }
            },
            "installPackagesAsync": {
              "value": function () { return this.install_packages_async.apply(this, arguments); }
            },
            "installPackagesSync": {
              "value": function () { return this.install_packages_sync.apply(this, arguments); }
            },
            "refreshCacheAsync": {
              "value": function () { return this.refresh_cache_async.apply(this, arguments); }
            },
            "refreshCacheSync": {
              "value": function () { return this.refresh_cache_sync.apply(this, arguments); }
            },
            "removePackagesAsync": {
              "value": function () { return this.remove_packages_async.apply(this, arguments); }
            },
            "removePackagesSync": {
              "value": function () { return this.remove_packages_sync.apply(this, arguments); }
            },
            "repairSystemAsync": {
              "value": function () { return this.repair_system_async.apply(this, arguments); }
            },
            "repairSystemSync": {
              "value": function () { return this.repair_system_sync.apply(this, arguments); }
            },
            "repoEnableAsync": {
              "value": function () { return this.repo_enable_async.apply(this, arguments); }
            },
            "repoEnableSync": {
              "value": function () { return this.repo_enable_sync.apply(this, arguments); }
            },
            "requiredByAsync": {
              "value": function () { return this.required_by_async.apply(this, arguments); }
            },
            "requiredBySync": {
              "value": function () { return this.required_by_sync.apply(this, arguments); }
            },
            "resolveAsync": {
              "value": function () { return this.resolve_async.apply(this, arguments); }
            },
            "resolveSync": {
              "value": function () { return this.resolve_sync.apply(this, arguments); }
            },
            "searchDetailsAsync": {
              "value": function () { return this.search_details_async.apply(this, arguments); }
            },
            "searchDetailsSync": {
              "value": function () { return this.search_details_sync.apply(this, arguments); }
            },
            "searchFilesAsync": {
              "value": function () { return this.search_files_async.apply(this, arguments); }
            },
            "searchFilesSync": {
              "value": function () { return this.search_files_sync.apply(this, arguments); }
            },
            "searchGroupsAsync": {
              "value": function () { return this.search_groups_async.apply(this, arguments); }
            },
            "searchGroupsSync": {
              "value": function () { return this.search_groups_sync.apply(this, arguments); }
            },
            "searchNamesAsync": {
              "value": function () { return this.search_names_async.apply(this, arguments); }
            },
            "searchNamesSync": {
              "value": function () { return this.search_names_sync.apply(this, arguments); }
            },
            "setAllowDowngrade": {
              "value": function () { return this.set_allow_downgrade.apply(this, arguments); }
            },
            "setAllowReinstall": {
              "value": function () { return this.set_allow_reinstall.apply(this, arguments); }
            },
            "setInteractive": {
              "value": function () { return this.set_interactive.apply(this, arguments); }
            },
            "setOnlyDownload": {
              "value": function () { return this.set_only_download.apply(this, arguments); }
            },
            "setOnlyTrusted": {
              "value": function () { return this.set_only_trusted.apply(this, arguments); }
            },
            "setSimulate": {
              "value": function () { return this.set_simulate.apply(this, arguments); }
            },
            "updatePackagesAsync": {
              "value": function () { return this.update_packages_async.apply(this, arguments); }
            },
            "updatePackagesSync": {
              "value": function () { return this.update_packages_sync.apply(this, arguments); }
            },
            "upgradeSystemAsync": {
              "value": function () { return this.upgrade_system_async.apply(this, arguments); }
            },
            "upgradeSystemSync": {
              "value": function () { return this.upgrade_system_sync.apply(this, arguments); }
            },
            "userAccepted": {
              "value": function () { return this.user_accepted.apply(this, arguments); }
            },
            "userDeclined": {
              "value": function () { return this.user_declined.apply(this, arguments); }
            },
            "whatProvidesAsync": {
              "value": function () { return this.what_provides_async.apply(this, arguments); }
            },
            "whatProvidesSync": {
              "value": function () { return this.what_provides_sync.apply(this, arguments); }
            },
            "allowDowngrade": {
              "get": function () { return this.allow_downgrade; },
              "set": function (value) { this.allow_downgrade = value; }
            },
            "allowReinstall": {
              "get": function () { return this.allow_reinstall; },
              "set": function (value) { this.allow_reinstall = value; }
            },
            "onlyDownload": {
              "get": function () { return this.only_download; },
              "set": function (value) { this.only_download = value; }
            },
            "onlyTrusted": {
              "get": function () { return this.only_trusted; },
              "set": function (value) { this.only_trusted = value; }
            }
          },
          "static": {}
        },
        "TransactionList": {
          "prototype": {
            "getIds": {
              "value": function () { return this.get_ids.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "TransactionPast": {
          "prototype": {
            "getCmdline": {
              "value": function () { return this.get_cmdline.apply(this, arguments); }
            },
            "getData": {
              "value": function () { return this.get_data.apply(this, arguments); }
            },
            "getDatetime": {
              "value": function () { return this.get_datetime.apply(this, arguments); }
            },
            "getDuration": {
              "value": function () { return this.get_duration.apply(this, arguments); }
            },
            "getId": {
              "value": function () { return this.get_id.apply(this, arguments); }
            },
            "getRole": {
              "value": function () { return this.get_role.apply(this, arguments); }
            },
            "getSucceeded": {
              "value": function () { return this.get_succeeded.apply(this, arguments); }
            },
            "getTimespec": {
              "value": function () { return this.get_timespec.apply(this, arguments); }
            },
            "getTimestamp": {
              "value": function () { return this.get_timestamp.apply(this, arguments); }
            },
            "getUid": {
              "value": function () { return this.get_uid.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "UpdateDetail": {
          "prototype": {
            "getBugzillaUrls": {
              "value": function () { return this.get_bugzilla_urls.apply(this, arguments); }
            },
            "getChangelog": {
              "value": function () { return this.get_changelog.apply(this, arguments); }
            },
            "getCveUrls": {
              "value": function () { return this.get_cve_urls.apply(this, arguments); }
            },
            "getIssued": {
              "value": function () { return this.get_issued.apply(this, arguments); }
            },
            "getObsoletes": {
              "value": function () { return this.get_obsoletes.apply(this, arguments); }
            },
            "getPackageId": {
              "value": function () { return this.get_package_id.apply(this, arguments); }
            },
            "getRestart": {
              "value": function () { return this.get_restart.apply(this, arguments); }
            },
            "getState": {
              "value": function () { return this.get_state.apply(this, arguments); }
            },
            "getUpdateText": {
              "value": function () { return this.get_update_text.apply(this, arguments); }
            },
            "getUpdated": {
              "value": function () { return this.get_updated.apply(this, arguments); }
            },
            "getUpdates": {
              "value": function () { return this.get_updates.apply(this, arguments); }
            },
            "getVendorUrls": {
              "value": function () { return this.get_vendor_urls.apply(this, arguments); }
            },
            "bugzillaUrls": {
              "get": function () { return this.bugzilla_urls; },
              "set": function (value) { this.bugzilla_urls = value; }
            },
            "cveUrls": {
              "get": function () { return this.cve_urls; },
              "set": function (value) { this.cve_urls = value; }
            },
            "packageId": {
              "get": function () { return this.package_id; },
              "set": function (value) { this.package_id = value; }
            },
            "updateText": {
              "get": function () { return this.update_text; },
              "set": function (value) { this.update_text = value; }
            },
            "vendorUrls": {
              "get": function () { return this.vendor_urls; },
              "set": function (value) { this.vendor_urls = value; }
            }
          },
          "static": {}
        }
      },
      "static": {
        "authorizeTypeEnumFromString": {
          "value": function () { return this.authorize_type_enum_from_string.apply(this, arguments); }
        },
        "authorizeTypeEnumToString": {
          "value": function () { return this.authorize_type_enum_to_string.apply(this, arguments); }
        },
        "bitfieldContainPriority": {
          "value": function () { return this.bitfield_contain_priority.apply(this, arguments); }
        },
        "bitfieldFromEnums": {
          "value": function () { return this.bitfield_from_enums.apply(this, arguments); }
        },
        "bitfieldTest": {
          "value": function () { return this.bitfield_test.apply(this, arguments); }
        },
        "clientErrorQuark": {
          "value": function () { return this.client_error_quark.apply(this, arguments); }
        },
        "commonTest": {
          "value": function () { return this.common_test.apply(this, arguments); }
        },
        "controlErrorQuark": {
          "value": function () { return this.control_error_quark.apply(this, arguments); }
        },
        "debugAddLogDomain": {
          "value": function () { return this.debug_add_log_domain.apply(this, arguments); }
        },
        "debugGetOptionGroup": {
          "value": function () { return this.debug_get_option_group.apply(this, arguments); }
        },
        "debugIsVerbose": {
          "value": function () { return this.debug_is_verbose.apply(this, arguments); }
        },
        "debugSetVerbose": {
          "value": function () { return this.debug_set_verbose.apply(this, arguments); }
        },
        "distroUpgradeEnumFromString": {
          "value": function () { return this.distro_upgrade_enum_from_string.apply(this, arguments); }
        },
        "distroUpgradeEnumToString": {
          "value": function () { return this.distro_upgrade_enum_to_string.apply(this, arguments); }
        },
        "enumFindString": {
          "value": function () { return this.enum_find_string.apply(this, arguments); }
        },
        "enumFindValue": {
          "value": function () { return this.enum_find_value.apply(this, arguments); }
        },
        "enumTest": {
          "value": function () { return this.enum_test.apply(this, arguments); }
        },
        "errorEnumFromString": {
          "value": function () { return this.error_enum_from_string.apply(this, arguments); }
        },
        "errorEnumToString": {
          "value": function () { return this.error_enum_to_string.apply(this, arguments); }
        },
        "exitEnumFromString": {
          "value": function () { return this.exit_enum_from_string.apply(this, arguments); }
        },
        "exitEnumToString": {
          "value": function () { return this.exit_enum_to_string.apply(this, arguments); }
        },
        "filterBitfieldFromString": {
          "value": function () { return this.filter_bitfield_from_string.apply(this, arguments); }
        },
        "filterBitfieldToString": {
          "value": function () { return this.filter_bitfield_to_string.apply(this, arguments); }
        },
        "filterEnumFromString": {
          "value": function () { return this.filter_enum_from_string.apply(this, arguments); }
        },
        "filterEnumToString": {
          "value": function () { return this.filter_enum_to_string.apply(this, arguments); }
        },
        "getDistroId": {
          "value": function () { return this.get_distro_id.apply(this, arguments); }
        },
        "groupBitfieldFromString": {
          "value": function () { return this.group_bitfield_from_string.apply(this, arguments); }
        },
        "groupBitfieldToString": {
          "value": function () { return this.group_bitfield_to_string.apply(this, arguments); }
        },
        "groupEnumFromString": {
          "value": function () { return this.group_enum_from_string.apply(this, arguments); }
        },
        "groupEnumToString": {
          "value": function () { return this.group_enum_to_string.apply(this, arguments); }
        },
        "infoEnumFromString": {
          "value": function () { return this.info_enum_from_string.apply(this, arguments); }
        },
        "infoEnumToLocalisedPast": {
          "value": function () { return this.info_enum_to_localised_past.apply(this, arguments); }
        },
        "infoEnumToLocalisedPresent": {
          "value": function () { return this.info_enum_to_localised_present.apply(this, arguments); }
        },
        "infoEnumToString": {
          "value": function () { return this.info_enum_to_string.apply(this, arguments); }
        },
        "iso8601FromDate": {
          "value": function () { return this.iso8601_from_date.apply(this, arguments); }
        },
        "iso8601Present": {
          "value": function () { return this.iso8601_present.apply(this, arguments); }
        },
        "iso8601ToDate": {
          "value": function () { return this.iso8601_to_date.apply(this, arguments); }
        },
        "iso8601ToDatetime": {
          "value": function () { return this.iso8601_to_datetime.apply(this, arguments); }
        },
        "mediaTypeEnumFromString": {
          "value": function () { return this.media_type_enum_from_string.apply(this, arguments); }
        },
        "mediaTypeEnumToString": {
          "value": function () { return this.media_type_enum_to_string.apply(this, arguments); }
        },
        "networkEnumFromString": {
          "value": function () { return this.network_enum_from_string.apply(this, arguments); }
        },
        "networkEnumToString": {
          "value": function () { return this.network_enum_to_string.apply(this, arguments); }
        },
        "offlineActionFromString": {
          "value": function () { return this.offline_action_from_string.apply(this, arguments); }
        },
        "offlineActionToString": {
          "value": function () { return this.offline_action_to_string.apply(this, arguments); }
        },
        "offlineAuthCancel": {
          "value": function () { return this.offline_auth_cancel.apply(this, arguments); }
        },
        "offlineAuthClearResults": {
          "value": function () { return this.offline_auth_clear_results.apply(this, arguments); }
        },
        "offlineAuthInvalidate": {
          "value": function () { return this.offline_auth_invalidate.apply(this, arguments); }
        },
        "offlineAuthSetAction": {
          "value": function () { return this.offline_auth_set_action.apply(this, arguments); }
        },
        "offlineAuthSetPreparedIds": {
          "value": function () { return this.offline_auth_set_prepared_ids.apply(this, arguments); }
        },
        "offlineAuthSetPreparedUpgradeVersion": {
          "value": function () { return this.offline_auth_set_prepared_upgrade_version.apply(this, arguments); }
        },
        "offlineAuthSetResults": {
          "value": function () { return this.offline_auth_set_results.apply(this, arguments); }
        },
        "offlineAuthTrigger": {
          "value": function () { return this.offline_auth_trigger.apply(this, arguments); }
        },
        "offlineAuthTriggerUpgrade": {
          "value": function () { return this.offline_auth_trigger_upgrade.apply(this, arguments); }
        },
        "offlineCancel": {
          "value": function () { return this.offline_cancel.apply(this, arguments); }
        },
        "offlineClearResults": {
          "value": function () { return this.offline_clear_results.apply(this, arguments); }
        },
        "offlineErrorQuark": {
          "value": function () { return this.offline_error_quark.apply(this, arguments); }
        },
        "offlineGetAction": {
          "value": function () { return this.offline_get_action.apply(this, arguments); }
        },
        "offlineGetActionMonitor": {
          "value": function () { return this.offline_get_action_monitor.apply(this, arguments); }
        },
        "offlineGetPreparedIds": {
          "value": function () { return this.offline_get_prepared_ids.apply(this, arguments); }
        },
        "offlineGetPreparedMonitor": {
          "value": function () { return this.offline_get_prepared_monitor.apply(this, arguments); }
        },
        "offlineGetPreparedSack": {
          "value": function () { return this.offline_get_prepared_sack.apply(this, arguments); }
        },
        "offlineGetPreparedUpgradeMonitor": {
          "value": function () { return this.offline_get_prepared_upgrade_monitor.apply(this, arguments); }
        },
        "offlineGetPreparedUpgradeVersion": {
          "value": function () { return this.offline_get_prepared_upgrade_version.apply(this, arguments); }
        },
        "offlineGetResults": {
          "value": function () { return this.offline_get_results.apply(this, arguments); }
        },
        "offlineGetResultsMtime": {
          "value": function () { return this.offline_get_results_mtime.apply(this, arguments); }
        },
        "offlineTrigger": {
          "value": function () { return this.offline_trigger.apply(this, arguments); }
        },
        "offlineTriggerUpgrade": {
          "value": function () { return this.offline_trigger_upgrade.apply(this, arguments); }
        },
        "polkitAgentClose": {
          "value": function () { return this.polkit_agent_close.apply(this, arguments); }
        },
        "polkitAgentOpen": {
          "value": function () { return this.polkit_agent_open.apply(this, arguments); }
        },
        "ptrArrayToStrv": {
          "value": function () { return this.ptr_array_to_strv.apply(this, arguments); }
        },
        "restartEnumFromString": {
          "value": function () { return this.restart_enum_from_string.apply(this, arguments); }
        },
        "restartEnumToString": {
          "value": function () { return this.restart_enum_to_string.apply(this, arguments); }
        },
        "roleBitfieldFromString": {
          "value": function () { return this.role_bitfield_from_string.apply(this, arguments); }
        },
        "roleBitfieldToString": {
          "value": function () { return this.role_bitfield_to_string.apply(this, arguments); }
        },
        "roleEnumFromString": {
          "value": function () { return this.role_enum_from_string.apply(this, arguments); }
        },
        "roleEnumToLocalisedPresent": {
          "value": function () { return this.role_enum_to_localised_present.apply(this, arguments); }
        },
        "roleEnumToString": {
          "value": function () { return this.role_enum_to_string.apply(this, arguments); }
        },
        "sigTypeEnumFromString": {
          "value": function () { return this.sig_type_enum_from_string.apply(this, arguments); }
        },
        "sigTypeEnumToString": {
          "value": function () { return this.sig_type_enum_to_string.apply(this, arguments); }
        },
        "statusEnumFromString": {
          "value": function () { return this.status_enum_from_string.apply(this, arguments); }
        },
        "statusEnumToLocalisedText": {
          "value": function () { return this.status_enum_to_localised_text.apply(this, arguments); }
        },
        "statusEnumToString": {
          "value": function () { return this.status_enum_to_string.apply(this, arguments); }
        },
        "transactionFlagBitfieldFromString": {
          "value": function () { return this.transaction_flag_bitfield_from_string.apply(this, arguments); }
        },
        "transactionFlagBitfieldToString": {
          "value": function () { return this.transaction_flag_bitfield_to_string.apply(this, arguments); }
        },
        "transactionFlagEnumFromString": {
          "value": function () { return this.transaction_flag_enum_from_string.apply(this, arguments); }
        },
        "transactionFlagEnumToString": {
          "value": function () { return this.transaction_flag_enum_to_string.apply(this, arguments); }
        },
        "updateStateEnumFromString": {
          "value": function () { return this.update_state_enum_from_string.apply(this, arguments); }
        },
        "updateStateEnumToString": {
          "value": function () { return this.update_state_enum_to_string.apply(this, arguments); }
        },
        "upgradeKindEnumFromString": {
          "value": function () { return this.upgrade_kind_enum_from_string.apply(this, arguments); }
        },
        "upgradeKindEnumToString": {
          "value": function () { return this.upgrade_kind_enum_to_string.apply(this, arguments); }
        }
      }
    },
    "Pango": {
      "class": {
        "Context": {
          "prototype": {
            "getBaseDir": {
              "value": function () { return this.get_base_dir.apply(this, arguments); }
            },
            "getBaseGravity": {
              "value": function () { return this.get_base_gravity.apply(this, arguments); }
            },
            "getFontDescription": {
              "value": function () { return this.get_font_description.apply(this, arguments); }
            },
            "getFontMap": {
              "value": function () { return this.get_font_map.apply(this, arguments); }
            },
            "getGravity": {
              "value": function () { return this.get_gravity.apply(this, arguments); }
            },
            "getGravityHint": {
              "value": function () { return this.get_gravity_hint.apply(this, arguments); }
            },
            "getLanguage": {
              "value": function () { return this.get_language.apply(this, arguments); }
            },
            "getMatrix": {
              "value": function () { return this.get_matrix.apply(this, arguments); }
            },
            "getMetrics": {
              "value": function () { return this.get_metrics.apply(this, arguments); }
            },
            "getSerial": {
              "value": function () { return this.get_serial.apply(this, arguments); }
            },
            "listFamilies": {
              "value": function () { return this.list_families.apply(this, arguments); }
            },
            "loadFont": {
              "value": function () { return this.load_font.apply(this, arguments); }
            },
            "loadFontset": {
              "value": function () { return this.load_fontset.apply(this, arguments); }
            },
            "setBaseDir": {
              "value": function () { return this.set_base_dir.apply(this, arguments); }
            },
            "setBaseGravity": {
              "value": function () { return this.set_base_gravity.apply(this, arguments); }
            },
            "setFontDescription": {
              "value": function () { return this.set_font_description.apply(this, arguments); }
            },
            "setFontMap": {
              "value": function () { return this.set_font_map.apply(this, arguments); }
            },
            "setGravityHint": {
              "value": function () { return this.set_gravity_hint.apply(this, arguments); }
            },
            "setLanguage": {
              "value": function () { return this.set_language.apply(this, arguments); }
            },
            "setMatrix": {
              "value": function () { return this.set_matrix.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Engine": {
          "prototype": {},
          "static": {}
        },
        "EngineLang": {
          "prototype": {},
          "static": {}
        },
        "EngineShape": {
          "prototype": {},
          "static": {}
        },
        "Font": {
          "prototype": {
            "describeWithAbsoluteSize": {
              "value": function () { return this.describe_with_absolute_size.apply(this, arguments); }
            },
            "findShaper": {
              "value": function () { return this.find_shaper.apply(this, arguments); }
            },
            "getCoverage": {
              "value": function () { return this.get_coverage.apply(this, arguments); }
            },
            "getFontMap": {
              "value": function () { return this.get_font_map.apply(this, arguments); }
            },
            "getGlyphExtents": {
              "value": function () { return this.get_glyph_extents.apply(this, arguments); }
            },
            "getMetrics": {
              "value": function () { return this.get_metrics.apply(this, arguments); }
            }
          },
          "static": {
            "descriptionsFree": {
              "value": function () { return this.descriptions_free.apply(this, arguments); }
            }
          }
        },
        "FontFace": {
          "prototype": {
            "getFaceName": {
              "value": function () { return this.get_face_name.apply(this, arguments); }
            },
            "isSynthesized": {
              "value": function () { return this.is_synthesized.apply(this, arguments); }
            },
            "listSizes": {
              "value": function () { return this.list_sizes.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "FontFamily": {
          "prototype": {
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "isMonospace": {
              "value": function () { return this.is_monospace.apply(this, arguments); }
            },
            "listFaces": {
              "value": function () { return this.list_faces.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "FontMap": {
          "prototype": {
            "createContext": {
              "value": function () { return this.create_context.apply(this, arguments); }
            },
            "getSerial": {
              "value": function () { return this.get_serial.apply(this, arguments); }
            },
            "getShapeEngineType": {
              "value": function () { return this.get_shape_engine_type.apply(this, arguments); }
            },
            "listFamilies": {
              "value": function () { return this.list_families.apply(this, arguments); }
            },
            "loadFont": {
              "value": function () { return this.load_font.apply(this, arguments); }
            },
            "loadFontset": {
              "value": function () { return this.load_fontset.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Fontset": {
          "prototype": {
            "getFont": {
              "value": function () { return this.get_font.apply(this, arguments); }
            },
            "getMetrics": {
              "value": function () { return this.get_metrics.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "FontsetSimple": {
          "prototype": {},
          "static": {}
        },
        "Layout": {
          "prototype": {
            "contextChanged": {
              "value": function () { return this.context_changed.apply(this, arguments); }
            },
            "getAlignment": {
              "value": function () { return this.get_alignment.apply(this, arguments); }
            },
            "getAttributes": {
              "value": function () { return this.get_attributes.apply(this, arguments); }
            },
            "getAutoDir": {
              "value": function () { return this.get_auto_dir.apply(this, arguments); }
            },
            "getBaseline": {
              "value": function () { return this.get_baseline.apply(this, arguments); }
            },
            "getCharacterCount": {
              "value": function () { return this.get_character_count.apply(this, arguments); }
            },
            "getContext": {
              "value": function () { return this.get_context.apply(this, arguments); }
            },
            "getCursorPos": {
              "value": function () { return this.get_cursor_pos.apply(this, arguments); }
            },
            "getEllipsize": {
              "value": function () { return this.get_ellipsize.apply(this, arguments); }
            },
            "getExtents": {
              "value": function () { return this.get_extents.apply(this, arguments); }
            },
            "getFontDescription": {
              "value": function () { return this.get_font_description.apply(this, arguments); }
            },
            "getHeight": {
              "value": function () { return this.get_height.apply(this, arguments); }
            },
            "getIndent": {
              "value": function () { return this.get_indent.apply(this, arguments); }
            },
            "getIter": {
              "value": function () { return this.get_iter.apply(this, arguments); }
            },
            "getJustify": {
              "value": function () { return this.get_justify.apply(this, arguments); }
            },
            "getLine": {
              "value": function () { return this.get_line.apply(this, arguments); }
            },
            "getLineCount": {
              "value": function () { return this.get_line_count.apply(this, arguments); }
            },
            "getLineReadonly": {
              "value": function () { return this.get_line_readonly.apply(this, arguments); }
            },
            "getLines": {
              "value": function () { return this.get_lines.apply(this, arguments); }
            },
            "getLinesReadonly": {
              "value": function () { return this.get_lines_readonly.apply(this, arguments); }
            },
            "getLogAttrs": {
              "value": function () { return this.get_log_attrs.apply(this, arguments); }
            },
            "getLogAttrsReadonly": {
              "value": function () { return this.get_log_attrs_readonly.apply(this, arguments); }
            },
            "getPixelExtents": {
              "value": function () { return this.get_pixel_extents.apply(this, arguments); }
            },
            "getPixelSize": {
              "value": function () { return this.get_pixel_size.apply(this, arguments); }
            },
            "getSerial": {
              "value": function () { return this.get_serial.apply(this, arguments); }
            },
            "getSingleParagraphMode": {
              "value": function () { return this.get_single_paragraph_mode.apply(this, arguments); }
            },
            "getSize": {
              "value": function () { return this.get_size.apply(this, arguments); }
            },
            "getSpacing": {
              "value": function () { return this.get_spacing.apply(this, arguments); }
            },
            "getTabs": {
              "value": function () { return this.get_tabs.apply(this, arguments); }
            },
            "getText": {
              "value": function () { return this.get_text.apply(this, arguments); }
            },
            "getUnknownGlyphsCount": {
              "value": function () { return this.get_unknown_glyphs_count.apply(this, arguments); }
            },
            "getWidth": {
              "value": function () { return this.get_width.apply(this, arguments); }
            },
            "getWrap": {
              "value": function () { return this.get_wrap.apply(this, arguments); }
            },
            "indexToLineX": {
              "value": function () { return this.index_to_line_x.apply(this, arguments); }
            },
            "indexToPos": {
              "value": function () { return this.index_to_pos.apply(this, arguments); }
            },
            "isEllipsized": {
              "value": function () { return this.is_ellipsized.apply(this, arguments); }
            },
            "isWrapped": {
              "value": function () { return this.is_wrapped.apply(this, arguments); }
            },
            "moveCursorVisually": {
              "value": function () { return this.move_cursor_visually.apply(this, arguments); }
            },
            "setAlignment": {
              "value": function () { return this.set_alignment.apply(this, arguments); }
            },
            "setAttributes": {
              "value": function () { return this.set_attributes.apply(this, arguments); }
            },
            "setAutoDir": {
              "value": function () { return this.set_auto_dir.apply(this, arguments); }
            },
            "setEllipsize": {
              "value": function () { return this.set_ellipsize.apply(this, arguments); }
            },
            "setFontDescription": {
              "value": function () { return this.set_font_description.apply(this, arguments); }
            },
            "setHeight": {
              "value": function () { return this.set_height.apply(this, arguments); }
            },
            "setIndent": {
              "value": function () { return this.set_indent.apply(this, arguments); }
            },
            "setJustify": {
              "value": function () { return this.set_justify.apply(this, arguments); }
            },
            "setMarkup": {
              "value": function () { return this.set_markup.apply(this, arguments); }
            },
            "setMarkupWithAccel": {
              "value": function () { return this.set_markup_with_accel.apply(this, arguments); }
            },
            "setSingleParagraphMode": {
              "value": function () { return this.set_single_paragraph_mode.apply(this, arguments); }
            },
            "setSpacing": {
              "value": function () { return this.set_spacing.apply(this, arguments); }
            },
            "setTabs": {
              "value": function () { return this.set_tabs.apply(this, arguments); }
            },
            "setText": {
              "value": function () { return this.set_text.apply(this, arguments); }
            },
            "setWidth": {
              "value": function () { return this.set_width.apply(this, arguments); }
            },
            "setWrap": {
              "value": function () { return this.set_wrap.apply(this, arguments); }
            },
            "xyToIndex": {
              "value": function () { return this.xy_to_index.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Renderer": {
          "prototype": {
            "drawErrorUnderline": {
              "value": function () { return this.draw_error_underline.apply(this, arguments); }
            },
            "drawGlyph": {
              "value": function () { return this.draw_glyph.apply(this, arguments); }
            },
            "drawGlyphItem": {
              "value": function () { return this.draw_glyph_item.apply(this, arguments); }
            },
            "drawGlyphs": {
              "value": function () { return this.draw_glyphs.apply(this, arguments); }
            },
            "drawLayout": {
              "value": function () { return this.draw_layout.apply(this, arguments); }
            },
            "drawLayoutLine": {
              "value": function () { return this.draw_layout_line.apply(this, arguments); }
            },
            "drawRectangle": {
              "value": function () { return this.draw_rectangle.apply(this, arguments); }
            },
            "drawTrapezoid": {
              "value": function () { return this.draw_trapezoid.apply(this, arguments); }
            },
            "getAlpha": {
              "value": function () { return this.get_alpha.apply(this, arguments); }
            },
            "getColor": {
              "value": function () { return this.get_color.apply(this, arguments); }
            },
            "getLayout": {
              "value": function () { return this.get_layout.apply(this, arguments); }
            },
            "getLayoutLine": {
              "value": function () { return this.get_layout_line.apply(this, arguments); }
            },
            "getMatrix": {
              "value": function () { return this.get_matrix.apply(this, arguments); }
            },
            "partChanged": {
              "value": function () { return this.part_changed.apply(this, arguments); }
            },
            "setAlpha": {
              "value": function () { return this.set_alpha.apply(this, arguments); }
            },
            "setColor": {
              "value": function () { return this.set_color.apply(this, arguments); }
            },
            "setMatrix": {
              "value": function () { return this.set_matrix.apply(this, arguments); }
            }
          },
          "static": {}
        }
      },
      "static": {
        "attrBackgroundAlphaNew": {
          "value": function () { return this.attr_background_alpha_new.apply(this, arguments); }
        },
        "attrBackgroundNew": {
          "value": function () { return this.attr_background_new.apply(this, arguments); }
        },
        "attrFallbackNew": {
          "value": function () { return this.attr_fallback_new.apply(this, arguments); }
        },
        "attrFamilyNew": {
          "value": function () { return this.attr_family_new.apply(this, arguments); }
        },
        "attrForegroundAlphaNew": {
          "value": function () { return this.attr_foreground_alpha_new.apply(this, arguments); }
        },
        "attrForegroundNew": {
          "value": function () { return this.attr_foreground_new.apply(this, arguments); }
        },
        "attrGravityHintNew": {
          "value": function () { return this.attr_gravity_hint_new.apply(this, arguments); }
        },
        "attrGravityNew": {
          "value": function () { return this.attr_gravity_new.apply(this, arguments); }
        },
        "attrLetterSpacingNew": {
          "value": function () { return this.attr_letter_spacing_new.apply(this, arguments); }
        },
        "attrRiseNew": {
          "value": function () { return this.attr_rise_new.apply(this, arguments); }
        },
        "attrScaleNew": {
          "value": function () { return this.attr_scale_new.apply(this, arguments); }
        },
        "attrStretchNew": {
          "value": function () { return this.attr_stretch_new.apply(this, arguments); }
        },
        "attrStrikethroughColorNew": {
          "value": function () { return this.attr_strikethrough_color_new.apply(this, arguments); }
        },
        "attrStrikethroughNew": {
          "value": function () { return this.attr_strikethrough_new.apply(this, arguments); }
        },
        "attrStyleNew": {
          "value": function () { return this.attr_style_new.apply(this, arguments); }
        },
        "attrTypeGetName": {
          "value": function () { return this.attr_type_get_name.apply(this, arguments); }
        },
        "attrTypeRegister": {
          "value": function () { return this.attr_type_register.apply(this, arguments); }
        },
        "attrUnderlineColorNew": {
          "value": function () { return this.attr_underline_color_new.apply(this, arguments); }
        },
        "attrUnderlineNew": {
          "value": function () { return this.attr_underline_new.apply(this, arguments); }
        },
        "attrVariantNew": {
          "value": function () { return this.attr_variant_new.apply(this, arguments); }
        },
        "attrWeightNew": {
          "value": function () { return this.attr_weight_new.apply(this, arguments); }
        },
        "bidiTypeForUnichar": {
          "value": function () { return this.bidi_type_for_unichar.apply(this, arguments); }
        },
        "configKeyGet": {
          "value": function () { return this.config_key_get.apply(this, arguments); }
        },
        "configKeyGetSystem": {
          "value": function () { return this.config_key_get_system.apply(this, arguments); }
        },
        "defaultBreak": {
          "value": function () { return this.default_break.apply(this, arguments); }
        },
        "extentsToPixels": {
          "value": function () { return this.extents_to_pixels.apply(this, arguments); }
        },
        "findBaseDir": {
          "value": function () { return this.find_base_dir.apply(this, arguments); }
        },
        "findMap": {
          "value": function () { return this.find_map.apply(this, arguments); }
        },
        "findParagraphBoundary": {
          "value": function () { return this.find_paragraph_boundary.apply(this, arguments); }
        },
        "fontDescriptionFromString": {
          "value": function () { return this.font_description_from_string.apply(this, arguments); }
        },
        "getLibSubdirectory": {
          "value": function () { return this.get_lib_subdirectory.apply(this, arguments); }
        },
        "getLogAttrs": {
          "value": function () { return this.get_log_attrs.apply(this, arguments); }
        },
        "getMirrorChar": {
          "value": function () { return this.get_mirror_char.apply(this, arguments); }
        },
        "getSysconfSubdirectory": {
          "value": function () { return this.get_sysconf_subdirectory.apply(this, arguments); }
        },
        "gravityGetForMatrix": {
          "value": function () { return this.gravity_get_for_matrix.apply(this, arguments); }
        },
        "gravityGetForScript": {
          "value": function () { return this.gravity_get_for_script.apply(this, arguments); }
        },
        "gravityGetForScriptAndWidth": {
          "value": function () { return this.gravity_get_for_script_and_width.apply(this, arguments); }
        },
        "gravityToRotation": {
          "value": function () { return this.gravity_to_rotation.apply(this, arguments); }
        },
        "isZeroWidth": {
          "value": function () { return this.is_zero_width.apply(this, arguments); }
        },
        "itemizeWithBaseDir": {
          "value": function () { return this.itemize_with_base_dir.apply(this, arguments); }
        },
        "languageFromString": {
          "value": function () { return this.language_from_string.apply(this, arguments); }
        },
        "languageGetDefault": {
          "value": function () { return this.language_get_default.apply(this, arguments); }
        },
        "log2visGetEmbeddingLevels": {
          "value": function () { return this.log2vis_get_embedding_levels.apply(this, arguments); }
        },
        "lookupAliases": {
          "value": function () { return this.lookup_aliases.apply(this, arguments); }
        },
        "markupParserFinish": {
          "value": function () { return this.markup_parser_finish.apply(this, arguments); }
        },
        "markupParserNew": {
          "value": function () { return this.markup_parser_new.apply(this, arguments); }
        },
        "moduleRegister": {
          "value": function () { return this.module_register.apply(this, arguments); }
        },
        "parseEnum": {
          "value": function () { return this.parse_enum.apply(this, arguments); }
        },
        "parseMarkup": {
          "value": function () { return this.parse_markup.apply(this, arguments); }
        },
        "parseStretch": {
          "value": function () { return this.parse_stretch.apply(this, arguments); }
        },
        "parseStyle": {
          "value": function () { return this.parse_style.apply(this, arguments); }
        },
        "parseVariant": {
          "value": function () { return this.parse_variant.apply(this, arguments); }
        },
        "parseWeight": {
          "value": function () { return this.parse_weight.apply(this, arguments); }
        },
        "quantizeLineGeometry": {
          "value": function () { return this.quantize_line_geometry.apply(this, arguments); }
        },
        "readLine": {
          "value": function () { return this.read_line.apply(this, arguments); }
        },
        "reorderItems": {
          "value": function () { return this.reorder_items.apply(this, arguments); }
        },
        "scanInt": {
          "value": function () { return this.scan_int.apply(this, arguments); }
        },
        "scanString": {
          "value": function () { return this.scan_string.apply(this, arguments); }
        },
        "scanWord": {
          "value": function () { return this.scan_word.apply(this, arguments); }
        },
        "scriptForUnichar": {
          "value": function () { return this.script_for_unichar.apply(this, arguments); }
        },
        "scriptGetSampleLanguage": {
          "value": function () { return this.script_get_sample_language.apply(this, arguments); }
        },
        "shapeFull": {
          "value": function () { return this.shape_full.apply(this, arguments); }
        },
        "skipSpace": {
          "value": function () { return this.skip_space.apply(this, arguments); }
        },
        "splitFileList": {
          "value": function () { return this.split_file_list.apply(this, arguments); }
        },
        "trimString": {
          "value": function () { return this.trim_string.apply(this, arguments); }
        },
        "unicharDirection": {
          "value": function () { return this.unichar_direction.apply(this, arguments); }
        },
        "unitsFromDouble": {
          "value": function () { return this.units_from_double.apply(this, arguments); }
        },
        "unitsToDouble": {
          "value": function () { return this.units_to_double.apply(this, arguments); }
        },
        "versionCheck": {
          "value": function () { return this.version_check.apply(this, arguments); }
        },
        "versionString": {
          "value": function () { return this.version_string.apply(this, arguments); }
        }
      }
    },
    "PangoCairo": {
      "class": {
        "FcFontMap": {
          "prototype": {},
          "static": {}
        }
      },
      "static": {
        "contextGetFontOptions": {
          "value": function () { return this.context_get_font_options.apply(this, arguments); }
        },
        "contextGetResolution": {
          "value": function () { return this.context_get_resolution.apply(this, arguments); }
        },
        "contextGetShapeRenderer": {
          "value": function () { return this.context_get_shape_renderer.apply(this, arguments); }
        },
        "contextSetFontOptions": {
          "value": function () { return this.context_set_font_options.apply(this, arguments); }
        },
        "contextSetResolution": {
          "value": function () { return this.context_set_resolution.apply(this, arguments); }
        },
        "contextSetShapeRenderer": {
          "value": function () { return this.context_set_shape_renderer.apply(this, arguments); }
        },
        "createContext": {
          "value": function () { return this.create_context.apply(this, arguments); }
        },
        "createLayout": {
          "value": function () { return this.create_layout.apply(this, arguments); }
        },
        "errorUnderlinePath": {
          "value": function () { return this.error_underline_path.apply(this, arguments); }
        },
        "fontMapGetDefault": {
          "value": function () { return this.font_map_get_default.apply(this, arguments); }
        },
        "fontMapNew": {
          "value": function () { return this.font_map_new.apply(this, arguments); }
        },
        "fontMapNewForFontType": {
          "value": function () { return this.font_map_new_for_font_type.apply(this, arguments); }
        },
        "glyphStringPath": {
          "value": function () { return this.glyph_string_path.apply(this, arguments); }
        },
        "layoutLinePath": {
          "value": function () { return this.layout_line_path.apply(this, arguments); }
        },
        "layoutPath": {
          "value": function () { return this.layout_path.apply(this, arguments); }
        },
        "showErrorUnderline": {
          "value": function () { return this.show_error_underline.apply(this, arguments); }
        },
        "showGlyphItem": {
          "value": function () { return this.show_glyph_item.apply(this, arguments); }
        },
        "showGlyphString": {
          "value": function () { return this.show_glyph_string.apply(this, arguments); }
        },
        "showLayout": {
          "value": function () { return this.show_layout.apply(this, arguments); }
        },
        "showLayoutLine": {
          "value": function () { return this.show_layout_line.apply(this, arguments); }
        },
        "updateContext": {
          "value": function () { return this.update_context.apply(this, arguments); }
        },
        "updateLayout": {
          "value": function () { return this.update_layout.apply(this, arguments); }
        }
      }
    },
    "PangoFT2": {
      "class": {
        "FontMap": {
          "prototype": {
            "createContext": {
              "value": function () { return this.create_context.apply(this, arguments); }
            },
            "setDefaultSubstitute": {
              "value": function () { return this.set_default_substitute.apply(this, arguments); }
            },
            "setResolution": {
              "value": function () { return this.set_resolution.apply(this, arguments); }
            },
            "substituteChanged": {
              "value": function () { return this.substitute_changed.apply(this, arguments); }
            }
          },
          "static": {
            "forDisplay": {
              "value": function () { return this.for_display.apply(this, arguments); }
            }
          }
        }
      },
      "static": {
        "fontGetCoverage": {
          "value": function () { return this.font_get_coverage.apply(this, arguments); }
        },
        "fontGetFace": {
          "value": function () { return this.font_get_face.apply(this, arguments); }
        },
        "fontGetKerning": {
          "value": function () { return this.font_get_kerning.apply(this, arguments); }
        },
        "getContext": {
          "value": function () { return this.get_context.apply(this, arguments); }
        },
        "getUnknownGlyph": {
          "value": function () { return this.get_unknown_glyph.apply(this, arguments); }
        },
        "renderLayout": {
          "value": function () { return this.render_layout.apply(this, arguments); }
        },
        "renderLayoutLine": {
          "value": function () { return this.render_layout_line.apply(this, arguments); }
        },
        "renderLayoutLineSubpixel": {
          "value": function () { return this.render_layout_line_subpixel.apply(this, arguments); }
        },
        "renderLayoutSubpixel": {
          "value": function () { return this.render_layout_subpixel.apply(this, arguments); }
        },
        "renderTransformed": {
          "value": function () { return this.render_transformed.apply(this, arguments); }
        },
        "shutdownDisplay": {
          "value": function () { return this.shutdown_display.apply(this, arguments); }
        }
      }
    },
    "PangoXft": {
      "class": {
        "Font": {
          "prototype": {},
          "static": {
            "getDisplay": {
              "value": function () { return this.get_display.apply(this, arguments); }
            },
            "getFont": {
              "value": function () { return this.get_font.apply(this, arguments); }
            },
            "getGlyph": {
              "value": function () { return this.get_glyph.apply(this, arguments); }
            },
            "getUnknownGlyph": {
              "value": function () { return this.get_unknown_glyph.apply(this, arguments); }
            },
            "hasChar": {
              "value": function () { return this.has_char.apply(this, arguments); }
            },
            "lockFace": {
              "value": function () { return this.lock_face.apply(this, arguments); }
            },
            "unlockFace": {
              "value": function () { return this.unlock_face.apply(this, arguments); }
            }
          }
        },
        "FontMap": {
          "prototype": {},
          "static": {}
        },
        "Renderer": {
          "prototype": {
            "setDefaultColor": {
              "value": function () { return this.set_default_color.apply(this, arguments); }
            },
            "setDraw": {
              "value": function () { return this.set_draw.apply(this, arguments); }
            }
          },
          "static": {}
        }
      },
      "static": {
        "getContext": {
          "value": function () { return this.get_context.apply(this, arguments); }
        },
        "getFontMap": {
          "value": function () { return this.get_font_map.apply(this, arguments); }
        },
        "pictureRender": {
          "value": function () { return this.picture_render.apply(this, arguments); }
        },
        "renderLayout": {
          "value": function () { return this.render_layout.apply(this, arguments); }
        },
        "renderLayoutLine": {
          "value": function () { return this.render_layout_line.apply(this, arguments); }
        },
        "renderTransformed": {
          "value": function () { return this.render_transformed.apply(this, arguments); }
        },
        "setDefaultSubstitute": {
          "value": function () { return this.set_default_substitute.apply(this, arguments); }
        },
        "shutdownDisplay": {
          "value": function () { return this.shutdown_display.apply(this, arguments); }
        },
        "substituteChanged": {
          "value": function () { return this.substitute_changed.apply(this, arguments); }
        }
      }
    },
    "Peas": {
      "class": {
        "Engine": {
          "prototype": {
            "addSearchPath": {
              "value": function () { return this.add_search_path.apply(this, arguments); }
            },
            "createExtension": {
              "value": function () { return this.create_extension.apply(this, arguments); }
            },
            "createExtensionValist": {
              "value": function () { return this.create_extension_valist.apply(this, arguments); }
            },
            "createExtensionv": {
              "value": function () { return this.create_extensionv.apply(this, arguments); }
            },
            "enableLoader": {
              "value": function () { return this.enable_loader.apply(this, arguments); }
            },
            "garbageCollect": {
              "value": function () { return this.garbage_collect.apply(this, arguments); }
            },
            "getLoadedPlugins": {
              "value": function () { return this.get_loaded_plugins.apply(this, arguments); }
            },
            "getPluginInfo": {
              "value": function () { return this.get_plugin_info.apply(this, arguments); }
            },
            "getPluginList": {
              "value": function () { return this.get_plugin_list.apply(this, arguments); }
            },
            "loadPlugin": {
              "value": function () { return this.load_plugin.apply(this, arguments); }
            },
            "prependSearchPath": {
              "value": function () { return this.prepend_search_path.apply(this, arguments); }
            },
            "providesExtension": {
              "value": function () { return this.provides_extension.apply(this, arguments); }
            },
            "rescanPlugins": {
              "value": function () { return this.rescan_plugins.apply(this, arguments); }
            },
            "setLoadedPlugins": {
              "value": function () { return this.set_loaded_plugins.apply(this, arguments); }
            },
            "unloadPlugin": {
              "value": function () { return this.unload_plugin.apply(this, arguments); }
            },
            "loadedPlugins": {
              "get": function () { return this.loaded_plugins; },
              "set": function (value) { this.loaded_plugins = value; }
            },
            "nonglobalLoaders": {
              "get": function () { return this.nonglobal_loaders; },
              "set": function (value) { this.nonglobal_loaders = value; }
            },
            "pluginList": {
              "get": function () { return this.plugin_list; },
              "set": function (value) { this.plugin_list = value; }
            }
          },
          "static": {
            "getDefault": {
              "value": function () { return this.get_default.apply(this, arguments); }
            }
          }
        },
        "ExtensionBase": {
          "prototype": {
            "getDataDir": {
              "value": function () { return this.get_data_dir.apply(this, arguments); }
            },
            "getPluginInfo": {
              "value": function () { return this.get_plugin_info.apply(this, arguments); }
            },
            "dataDir": {
              "get": function () { return this.data_dir; },
              "set": function (value) { this.data_dir = value; }
            },
            "pluginInfo": {
              "get": function () { return this.plugin_info; },
              "set": function (value) { this.plugin_info = value; }
            }
          },
          "static": {}
        },
        "ExtensionSet": {
          "prototype": {
            "getExtension": {
              "value": function () { return this.get_extension.apply(this, arguments); }
            },
            "constructProperties": {
              "get": function () { return this.construct_properties; },
              "set": function (value) { this.construct_properties = value; }
            },
            "extensionType": {
              "get": function () { return this.extension_type; },
              "set": function (value) { this.extension_type = value; }
            }
          },
          "static": {}
        },
        "ObjectModule": {
          "prototype": {
            "createObject": {
              "value": function () { return this.create_object.apply(this, arguments); }
            },
            "getLibrary": {
              "value": function () { return this.get_library.apply(this, arguments); }
            },
            "getModuleName": {
              "value": function () { return this.get_module_name.apply(this, arguments); }
            },
            "getPath": {
              "value": function () { return this.get_path.apply(this, arguments); }
            },
            "providesObject": {
              "value": function () { return this.provides_object.apply(this, arguments); }
            },
            "registerExtensionFactory": {
              "value": function () { return this.register_extension_factory.apply(this, arguments); }
            },
            "registerExtensionType": {
              "value": function () { return this.register_extension_type.apply(this, arguments); }
            },
            "localLinkage": {
              "get": function () { return this.local_linkage; },
              "set": function (value) { this.local_linkage = value; }
            },
            "moduleName": {
              "get": function () { return this.module_name; },
              "set": function (value) { this.module_name = value; }
            }
          },
          "static": {}
        }
      },
      "static": {
        "pluginInfoErrorQuark": {
          "value": function () { return this.plugin_info_error_quark.apply(this, arguments); }
        }
      }
    },
    "PeasGtk": {
      "class": {
        "PluginManager": {
          "prototype": {
            "getView": {
              "value": function () { return this.get_view.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "PluginManagerView": {
          "prototype": {
            "getSelectedPlugin": {
              "value": function () { return this.get_selected_plugin.apply(this, arguments); }
            },
            "getShowBuiltin": {
              "value": function () { return this.get_show_builtin.apply(this, arguments); }
            },
            "setSelectedPlugin": {
              "value": function () { return this.set_selected_plugin.apply(this, arguments); }
            },
            "setShowBuiltin": {
              "value": function () { return this.set_show_builtin.apply(this, arguments); }
            },
            "showBuiltin": {
              "get": function () { return this.show_builtin; },
              "set": function (value) { this.show_builtin = value; }
            }
          },
          "static": {}
        }
      },
      "static": {}
    },
    "Polkit": {
      "class": {
        "ActionDescription": {
          "prototype": {
            "getActionId": {
              "value": function () { return this.get_action_id.apply(this, arguments); }
            },
            "getAnnotation": {
              "value": function () { return this.get_annotation.apply(this, arguments); }
            },
            "getAnnotationKeys": {
              "value": function () { return this.get_annotation_keys.apply(this, arguments); }
            },
            "getDescription": {
              "value": function () { return this.get_description.apply(this, arguments); }
            },
            "getIconName": {
              "value": function () { return this.get_icon_name.apply(this, arguments); }
            },
            "getImplicitActive": {
              "value": function () { return this.get_implicit_active.apply(this, arguments); }
            },
            "getImplicitAny": {
              "value": function () { return this.get_implicit_any.apply(this, arguments); }
            },
            "getImplicitInactive": {
              "value": function () { return this.get_implicit_inactive.apply(this, arguments); }
            },
            "getMessage": {
              "value": function () { return this.get_message.apply(this, arguments); }
            },
            "getVendorName": {
              "value": function () { return this.get_vendor_name.apply(this, arguments); }
            },
            "getVendorUrl": {
              "value": function () { return this.get_vendor_url.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Authority": {
          "prototype": {
            "authenticationAgentResponse": {
              "value": function () { return this.authentication_agent_response.apply(this, arguments); }
            },
            "authenticationAgentResponseFinish": {
              "value": function () { return this.authentication_agent_response_finish.apply(this, arguments); }
            },
            "authenticationAgentResponseSync": {
              "value": function () { return this.authentication_agent_response_sync.apply(this, arguments); }
            },
            "checkAuthorization": {
              "value": function () { return this.check_authorization.apply(this, arguments); }
            },
            "checkAuthorizationFinish": {
              "value": function () { return this.check_authorization_finish.apply(this, arguments); }
            },
            "checkAuthorizationSync": {
              "value": function () { return this.check_authorization_sync.apply(this, arguments); }
            },
            "enumerateActions": {
              "value": function () { return this.enumerate_actions.apply(this, arguments); }
            },
            "enumerateActionsFinish": {
              "value": function () { return this.enumerate_actions_finish.apply(this, arguments); }
            },
            "enumerateActionsSync": {
              "value": function () { return this.enumerate_actions_sync.apply(this, arguments); }
            },
            "enumerateTemporaryAuthorizations": {
              "value": function () { return this.enumerate_temporary_authorizations.apply(this, arguments); }
            },
            "enumerateTemporaryAuthorizationsFinish": {
              "value": function () { return this.enumerate_temporary_authorizations_finish.apply(this, arguments); }
            },
            "enumerateTemporaryAuthorizationsSync": {
              "value": function () { return this.enumerate_temporary_authorizations_sync.apply(this, arguments); }
            },
            "getBackendFeatures": {
              "value": function () { return this.get_backend_features.apply(this, arguments); }
            },
            "getBackendName": {
              "value": function () { return this.get_backend_name.apply(this, arguments); }
            },
            "getBackendVersion": {
              "value": function () { return this.get_backend_version.apply(this, arguments); }
            },
            "getOwner": {
              "value": function () { return this.get_owner.apply(this, arguments); }
            },
            "registerAuthenticationAgent": {
              "value": function () { return this.register_authentication_agent.apply(this, arguments); }
            },
            "registerAuthenticationAgentFinish": {
              "value": function () { return this.register_authentication_agent_finish.apply(this, arguments); }
            },
            "registerAuthenticationAgentSync": {
              "value": function () { return this.register_authentication_agent_sync.apply(this, arguments); }
            },
            "registerAuthenticationAgentWithOptions": {
              "value": function () { return this.register_authentication_agent_with_options.apply(this, arguments); }
            },
            "registerAuthenticationAgentWithOptionsFinish": {
              "value": function () { return this.register_authentication_agent_with_options_finish.apply(this, arguments); }
            },
            "registerAuthenticationAgentWithOptionsSync": {
              "value": function () { return this.register_authentication_agent_with_options_sync.apply(this, arguments); }
            },
            "revokeTemporaryAuthorizationById": {
              "value": function () { return this.revoke_temporary_authorization_by_id.apply(this, arguments); }
            },
            "revokeTemporaryAuthorizationByIdFinish": {
              "value": function () { return this.revoke_temporary_authorization_by_id_finish.apply(this, arguments); }
            },
            "revokeTemporaryAuthorizationByIdSync": {
              "value": function () { return this.revoke_temporary_authorization_by_id_sync.apply(this, arguments); }
            },
            "revokeTemporaryAuthorizations": {
              "value": function () { return this.revoke_temporary_authorizations.apply(this, arguments); }
            },
            "revokeTemporaryAuthorizationsFinish": {
              "value": function () { return this.revoke_temporary_authorizations_finish.apply(this, arguments); }
            },
            "revokeTemporaryAuthorizationsSync": {
              "value": function () { return this.revoke_temporary_authorizations_sync.apply(this, arguments); }
            },
            "unregisterAuthenticationAgent": {
              "value": function () { return this.unregister_authentication_agent.apply(this, arguments); }
            },
            "unregisterAuthenticationAgentFinish": {
              "value": function () { return this.unregister_authentication_agent_finish.apply(this, arguments); }
            },
            "unregisterAuthenticationAgentSync": {
              "value": function () { return this.unregister_authentication_agent_sync.apply(this, arguments); }
            },
            "backendFeatures": {
              "get": function () { return this.backend_features; },
              "set": function (value) { this.backend_features = value; }
            },
            "backendName": {
              "get": function () { return this.backend_name; },
              "set": function (value) { this.backend_name = value; }
            },
            "backendVersion": {
              "get": function () { return this.backend_version; },
              "set": function (value) { this.backend_version = value; }
            }
          },
          "static": {
            "getAsync": {
              "value": function () { return this.get_async.apply(this, arguments); }
            },
            "getFinish": {
              "value": function () { return this.get_finish.apply(this, arguments); }
            },
            "getSync": {
              "value": function () { return this.get_sync.apply(this, arguments); }
            }
          }
        },
        "AuthorizationResult": {
          "prototype": {
            "getDetails": {
              "value": function () { return this.get_details.apply(this, arguments); }
            },
            "getDismissed": {
              "value": function () { return this.get_dismissed.apply(this, arguments); }
            },
            "getIsAuthorized": {
              "value": function () { return this.get_is_authorized.apply(this, arguments); }
            },
            "getIsChallenge": {
              "value": function () { return this.get_is_challenge.apply(this, arguments); }
            },
            "getRetainsAuthorization": {
              "value": function () { return this.get_retains_authorization.apply(this, arguments); }
            },
            "getTemporaryAuthorizationId": {
              "value": function () { return this.get_temporary_authorization_id.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Details": {
          "prototype": {
            "getKeys": {
              "value": function () { return this.get_keys.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Permission": {
          "prototype": {
            "getActionId": {
              "value": function () { return this.get_action_id.apply(this, arguments); }
            },
            "getSubject": {
              "value": function () { return this.get_subject.apply(this, arguments); }
            },
            "actionId": {
              "get": function () { return this.action_id; },
              "set": function (value) { this.action_id = value; }
            }
          },
          "static": {}
        },
        "SystemBusName": {
          "prototype": {
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getProcessSync": {
              "value": function () { return this.get_process_sync.apply(this, arguments); }
            },
            "getUserSync": {
              "value": function () { return this.get_user_sync.apply(this, arguments); }
            },
            "setName": {
              "value": function () { return this.set_name.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "TemporaryAuthorization": {
          "prototype": {
            "getActionId": {
              "value": function () { return this.get_action_id.apply(this, arguments); }
            },
            "getId": {
              "value": function () { return this.get_id.apply(this, arguments); }
            },
            "getSubject": {
              "value": function () { return this.get_subject.apply(this, arguments); }
            },
            "getTimeExpires": {
              "value": function () { return this.get_time_expires.apply(this, arguments); }
            },
            "getTimeObtained": {
              "value": function () { return this.get_time_obtained.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "UnixGroup": {
          "prototype": {
            "getGid": {
              "value": function () { return this.get_gid.apply(this, arguments); }
            },
            "setGid": {
              "value": function () { return this.set_gid.apply(this, arguments); }
            }
          },
          "static": {
            "newForName": {
              "value": function () { return this.new_for_name.apply(this, arguments); }
            }
          }
        },
        "UnixNetgroup": {
          "prototype": {
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "setName": {
              "value": function () { return this.set_name.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "UnixProcess": {
          "prototype": {
            "getOwner": {
              "value": function () { return this.get_owner.apply(this, arguments); }
            },
            "getPid": {
              "value": function () { return this.get_pid.apply(this, arguments); }
            },
            "getStartTime": {
              "value": function () { return this.get_start_time.apply(this, arguments); }
            },
            "getUid": {
              "value": function () { return this.get_uid.apply(this, arguments); }
            },
            "setPid": {
              "value": function () { return this.set_pid.apply(this, arguments); }
            },
            "setStartTime": {
              "value": function () { return this.set_start_time.apply(this, arguments); }
            },
            "setUid": {
              "value": function () { return this.set_uid.apply(this, arguments); }
            },
            "startTime": {
              "get": function () { return this.start_time; },
              "set": function (value) { this.start_time = value; }
            }
          },
          "static": {
            "newForOwner": {
              "value": function () { return this.new_for_owner.apply(this, arguments); }
            },
            "newFull": {
              "value": function () { return this.new_full.apply(this, arguments); }
            }
          }
        },
        "UnixSession": {
          "prototype": {
            "getSessionId": {
              "value": function () { return this.get_session_id.apply(this, arguments); }
            },
            "setSessionId": {
              "value": function () { return this.set_session_id.apply(this, arguments); }
            },
            "sessionId": {
              "get": function () { return this.session_id; },
              "set": function (value) { this.session_id = value; }
            }
          },
          "static": {
            "newForProcess": {
              "value": function () { return this.new_for_process.apply(this, arguments); }
            },
            "newForProcessFinish": {
              "value": function () { return this.new_for_process_finish.apply(this, arguments); }
            },
            "newForProcessSync": {
              "value": function () { return this.new_for_process_sync.apply(this, arguments); }
            }
          }
        },
        "UnixUser": {
          "prototype": {
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getUid": {
              "value": function () { return this.get_uid.apply(this, arguments); }
            },
            "setUid": {
              "value": function () { return this.set_uid.apply(this, arguments); }
            }
          },
          "static": {
            "newForName": {
              "value": function () { return this.new_for_name.apply(this, arguments); }
            }
          }
        }
      },
      "static": {
        "errorQuark": {
          "value": function () { return this.error_quark.apply(this, arguments); }
        },
        "identityFromString": {
          "value": function () { return this.identity_from_string.apply(this, arguments); }
        },
        "implicitAuthorizationFromString": {
          "value": function () { return this.implicit_authorization_from_string.apply(this, arguments); }
        },
        "implicitAuthorizationToString": {
          "value": function () { return this.implicit_authorization_to_string.apply(this, arguments); }
        },
        "subjectFromString": {
          "value": function () { return this.subject_from_string.apply(this, arguments); }
        }
      }
    },
    "PolkitAgent": {
      "class": {
        "Listener": {
          "prototype": {
            "initiateAuthentication": {
              "value": function () { return this.initiate_authentication.apply(this, arguments); }
            },
            "initiateAuthenticationFinish": {
              "value": function () { return this.initiate_authentication_finish.apply(this, arguments); }
            },
            "registerWithOptions": {
              "value": function () { return this.register_with_options.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Session": {
          "prototype": {},
          "static": {}
        },
        "TextListener": {
          "prototype": {},
          "static": {}
        }
      },
      "static": {
        "registerListener": {
          "value": function () { return this.register_listener.apply(this, arguments); }
        }
      }
    },
    "Poppler": {
      "class": {
        "Annot": {
          "prototype": {
            "getAnnotType": {
              "value": function () { return this.get_annot_type.apply(this, arguments); }
            },
            "getColor": {
              "value": function () { return this.get_color.apply(this, arguments); }
            },
            "getContents": {
              "value": function () { return this.get_contents.apply(this, arguments); }
            },
            "getFlags": {
              "value": function () { return this.get_flags.apply(this, arguments); }
            },
            "getModified": {
              "value": function () { return this.get_modified.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getPageIndex": {
              "value": function () { return this.get_page_index.apply(this, arguments); }
            },
            "getRectangle": {
              "value": function () { return this.get_rectangle.apply(this, arguments); }
            },
            "setColor": {
              "value": function () { return this.set_color.apply(this, arguments); }
            },
            "setContents": {
              "value": function () { return this.set_contents.apply(this, arguments); }
            },
            "setFlags": {
              "value": function () { return this.set_flags.apply(this, arguments); }
            },
            "setRectangle": {
              "value": function () { return this.set_rectangle.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "AnnotCircle": {
          "prototype": {
            "getInteriorColor": {
              "value": function () { return this.get_interior_color.apply(this, arguments); }
            },
            "setInteriorColor": {
              "value": function () { return this.set_interior_color.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "AnnotFileAttachment": {
          "prototype": {
            "getAttachment": {
              "value": function () { return this.get_attachment.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "AnnotFreeText": {
          "prototype": {
            "getCalloutLine": {
              "value": function () { return this.get_callout_line.apply(this, arguments); }
            },
            "getQuadding": {
              "value": function () { return this.get_quadding.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "AnnotLine": {
          "prototype": {
            "setVertices": {
              "value": function () { return this.set_vertices.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "AnnotMarkup": {
          "prototype": {
            "getDate": {
              "value": function () { return this.get_date.apply(this, arguments); }
            },
            "getExternalData": {
              "value": function () { return this.get_external_data.apply(this, arguments); }
            },
            "getLabel": {
              "value": function () { return this.get_label.apply(this, arguments); }
            },
            "getOpacity": {
              "value": function () { return this.get_opacity.apply(this, arguments); }
            },
            "getPopupIsOpen": {
              "value": function () { return this.get_popup_is_open.apply(this, arguments); }
            },
            "getPopupRectangle": {
              "value": function () { return this.get_popup_rectangle.apply(this, arguments); }
            },
            "getReplyTo": {
              "value": function () { return this.get_reply_to.apply(this, arguments); }
            },
            "getSubject": {
              "value": function () { return this.get_subject.apply(this, arguments); }
            },
            "hasPopup": {
              "value": function () { return this.has_popup.apply(this, arguments); }
            },
            "setLabel": {
              "value": function () { return this.set_label.apply(this, arguments); }
            },
            "setOpacity": {
              "value": function () { return this.set_opacity.apply(this, arguments); }
            },
            "setPopup": {
              "value": function () { return this.set_popup.apply(this, arguments); }
            },
            "setPopupIsOpen": {
              "value": function () { return this.set_popup_is_open.apply(this, arguments); }
            },
            "setPopupRectangle": {
              "value": function () { return this.set_popup_rectangle.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "AnnotMovie": {
          "prototype": {
            "getMovie": {
              "value": function () { return this.get_movie.apply(this, arguments); }
            },
            "getTitle": {
              "value": function () { return this.get_title.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "AnnotScreen": {
          "prototype": {
            "getAction": {
              "value": function () { return this.get_action.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "AnnotSquare": {
          "prototype": {
            "getInteriorColor": {
              "value": function () { return this.get_interior_color.apply(this, arguments); }
            },
            "setInteriorColor": {
              "value": function () { return this.set_interior_color.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "AnnotText": {
          "prototype": {
            "getIcon": {
              "value": function () { return this.get_icon.apply(this, arguments); }
            },
            "getIsOpen": {
              "value": function () { return this.get_is_open.apply(this, arguments); }
            },
            "getState": {
              "value": function () { return this.get_state.apply(this, arguments); }
            },
            "setIcon": {
              "value": function () { return this.set_icon.apply(this, arguments); }
            },
            "setIsOpen": {
              "value": function () { return this.set_is_open.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "AnnotTextMarkup": {
          "prototype": {
            "getQuadrilaterals": {
              "value": function () { return this.get_quadrilaterals.apply(this, arguments); }
            },
            "setQuadrilaterals": {
              "value": function () { return this.set_quadrilaterals.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Attachment": {
          "prototype": {
            "saveToCallback": {
              "value": function () { return this.save_to_callback.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Document": {
          "prototype": {
            "findDest": {
              "value": function () { return this.find_dest.apply(this, arguments); }
            },
            "getAttachments": {
              "value": function () { return this.get_attachments.apply(this, arguments); }
            },
            "getAuthor": {
              "value": function () { return this.get_author.apply(this, arguments); }
            },
            "getCreationDate": {
              "value": function () { return this.get_creation_date.apply(this, arguments); }
            },
            "getCreator": {
              "value": function () { return this.get_creator.apply(this, arguments); }
            },
            "getFormField": {
              "value": function () { return this.get_form_field.apply(this, arguments); }
            },
            "getId": {
              "value": function () { return this.get_id.apply(this, arguments); }
            },
            "getKeywords": {
              "value": function () { return this.get_keywords.apply(this, arguments); }
            },
            "getMetadata": {
              "value": function () { return this.get_metadata.apply(this, arguments); }
            },
            "getModificationDate": {
              "value": function () { return this.get_modification_date.apply(this, arguments); }
            },
            "getNAttachments": {
              "value": function () { return this.get_n_attachments.apply(this, arguments); }
            },
            "getNPages": {
              "value": function () { return this.get_n_pages.apply(this, arguments); }
            },
            "getPage": {
              "value": function () { return this.get_page.apply(this, arguments); }
            },
            "getPageByLabel": {
              "value": function () { return this.get_page_by_label.apply(this, arguments); }
            },
            "getPageLayout": {
              "value": function () { return this.get_page_layout.apply(this, arguments); }
            },
            "getPageMode": {
              "value": function () { return this.get_page_mode.apply(this, arguments); }
            },
            "getPdfVersion": {
              "value": function () { return this.get_pdf_version.apply(this, arguments); }
            },
            "getPdfVersionString": {
              "value": function () { return this.get_pdf_version_string.apply(this, arguments); }
            },
            "getPermissions": {
              "value": function () { return this.get_permissions.apply(this, arguments); }
            },
            "getProducer": {
              "value": function () { return this.get_producer.apply(this, arguments); }
            },
            "getSubject": {
              "value": function () { return this.get_subject.apply(this, arguments); }
            },
            "getTitle": {
              "value": function () { return this.get_title.apply(this, arguments); }
            },
            "hasAttachments": {
              "value": function () { return this.has_attachments.apply(this, arguments); }
            },
            "isLinearized": {
              "value": function () { return this.is_linearized.apply(this, arguments); }
            },
            "saveACopy": {
              "value": function () { return this.save_a_copy.apply(this, arguments); }
            },
            "creationDate": {
              "get": function () { return this.creation_date; },
              "set": function (value) { this.creation_date = value; }
            },
            "formatMajor": {
              "get": function () { return this.format_major; },
              "set": function (value) { this.format_major = value; }
            },
            "formatMinor": {
              "get": function () { return this.format_minor; },
              "set": function (value) { this.format_minor = value; }
            },
            "modDate": {
              "get": function () { return this.mod_date; },
              "set": function (value) { this.mod_date = value; }
            },
            "pageLayout": {
              "get": function () { return this.page_layout; },
              "set": function (value) { this.page_layout = value; }
            },
            "pageMode": {
              "get": function () { return this.page_mode; },
              "set": function (value) { this.page_mode = value; }
            },
            "viewerPreferences": {
              "get": function () { return this.viewer_preferences; },
              "set": function (value) { this.viewer_preferences = value; }
            }
          },
          "static": {}
        },
        "FontInfo": {
          "prototype": {},
          "static": {}
        },
        "FormField": {
          "prototype": {
            "buttonGetButtonType": {
              "value": function () { return this.button_get_button_type.apply(this, arguments); }
            },
            "buttonGetState": {
              "value": function () { return this.button_get_state.apply(this, arguments); }
            },
            "buttonSetState": {
              "value": function () { return this.button_set_state.apply(this, arguments); }
            },
            "choiceCanSelectMultiple": {
              "value": function () { return this.choice_can_select_multiple.apply(this, arguments); }
            },
            "choiceCommitOnChange": {
              "value": function () { return this.choice_commit_on_change.apply(this, arguments); }
            },
            "choiceDoSpellCheck": {
              "value": function () { return this.choice_do_spell_check.apply(this, arguments); }
            },
            "choiceGetChoiceType": {
              "value": function () { return this.choice_get_choice_type.apply(this, arguments); }
            },
            "choiceGetItem": {
              "value": function () { return this.choice_get_item.apply(this, arguments); }
            },
            "choiceGetNItems": {
              "value": function () { return this.choice_get_n_items.apply(this, arguments); }
            },
            "choiceGetText": {
              "value": function () { return this.choice_get_text.apply(this, arguments); }
            },
            "choiceIsEditable": {
              "value": function () { return this.choice_is_editable.apply(this, arguments); }
            },
            "choiceIsItemSelected": {
              "value": function () { return this.choice_is_item_selected.apply(this, arguments); }
            },
            "choiceSelectItem": {
              "value": function () { return this.choice_select_item.apply(this, arguments); }
            },
            "choiceSetText": {
              "value": function () { return this.choice_set_text.apply(this, arguments); }
            },
            "choiceToggleItem": {
              "value": function () { return this.choice_toggle_item.apply(this, arguments); }
            },
            "choiceUnselectAll": {
              "value": function () { return this.choice_unselect_all.apply(this, arguments); }
            },
            "getAction": {
              "value": function () { return this.get_action.apply(this, arguments); }
            },
            "getFieldType": {
              "value": function () { return this.get_field_type.apply(this, arguments); }
            },
            "getFontSize": {
              "value": function () { return this.get_font_size.apply(this, arguments); }
            },
            "getId": {
              "value": function () { return this.get_id.apply(this, arguments); }
            },
            "getMappingName": {
              "value": function () { return this.get_mapping_name.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getPartialName": {
              "value": function () { return this.get_partial_name.apply(this, arguments); }
            },
            "isReadOnly": {
              "value": function () { return this.is_read_only.apply(this, arguments); }
            },
            "textDoScroll": {
              "value": function () { return this.text_do_scroll.apply(this, arguments); }
            },
            "textDoSpellCheck": {
              "value": function () { return this.text_do_spell_check.apply(this, arguments); }
            },
            "textGetMaxLen": {
              "value": function () { return this.text_get_max_len.apply(this, arguments); }
            },
            "textGetText": {
              "value": function () { return this.text_get_text.apply(this, arguments); }
            },
            "textGetTextType": {
              "value": function () { return this.text_get_text_type.apply(this, arguments); }
            },
            "textIsPassword": {
              "value": function () { return this.text_is_password.apply(this, arguments); }
            },
            "textIsRichText": {
              "value": function () { return this.text_is_rich_text.apply(this, arguments); }
            },
            "textSetText": {
              "value": function () { return this.text_set_text.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Layer": {
          "prototype": {
            "getRadioButtonGroupId": {
              "value": function () { return this.get_radio_button_group_id.apply(this, arguments); }
            },
            "getTitle": {
              "value": function () { return this.get_title.apply(this, arguments); }
            },
            "isParent": {
              "value": function () { return this.is_parent.apply(this, arguments); }
            },
            "isVisible": {
              "value": function () { return this.is_visible.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Media": {
          "prototype": {
            "getFilename": {
              "value": function () { return this.get_filename.apply(this, arguments); }
            },
            "getMimeType": {
              "value": function () { return this.get_mime_type.apply(this, arguments); }
            },
            "isEmbedded": {
              "value": function () { return this.is_embedded.apply(this, arguments); }
            },
            "saveToCallback": {
              "value": function () { return this.save_to_callback.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Movie": {
          "prototype": {
            "getFilename": {
              "value": function () { return this.get_filename.apply(this, arguments); }
            },
            "needPoster": {
              "value": function () { return this.need_poster.apply(this, arguments); }
            },
            "showControls": {
              "value": function () { return this.show_controls.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "PSFile": {
          "prototype": {
            "setDuplex": {
              "value": function () { return this.set_duplex.apply(this, arguments); }
            },
            "setPaperSize": {
              "value": function () { return this.set_paper_size.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Page": {
          "prototype": {
            "addAnnot": {
              "value": function () { return this.add_annot.apply(this, arguments); }
            },
            "findText": {
              "value": function () { return this.find_text.apply(this, arguments); }
            },
            "findTextWithOptions": {
              "value": function () { return this.find_text_with_options.apply(this, arguments); }
            },
            "getAnnotMapping": {
              "value": function () { return this.get_annot_mapping.apply(this, arguments); }
            },
            "getCropBox": {
              "value": function () { return this.get_crop_box.apply(this, arguments); }
            },
            "getDuration": {
              "value": function () { return this.get_duration.apply(this, arguments); }
            },
            "getFormFieldMapping": {
              "value": function () { return this.get_form_field_mapping.apply(this, arguments); }
            },
            "getImage": {
              "value": function () { return this.get_image.apply(this, arguments); }
            },
            "getImageMapping": {
              "value": function () { return this.get_image_mapping.apply(this, arguments); }
            },
            "getIndex": {
              "value": function () { return this.get_index.apply(this, arguments); }
            },
            "getLabel": {
              "value": function () { return this.get_label.apply(this, arguments); }
            },
            "getLinkMapping": {
              "value": function () { return this.get_link_mapping.apply(this, arguments); }
            },
            "getSelectedRegion": {
              "value": function () { return this.get_selected_region.apply(this, arguments); }
            },
            "getSelectedText": {
              "value": function () { return this.get_selected_text.apply(this, arguments); }
            },
            "getSelectionRegion": {
              "value": function () { return this.get_selection_region.apply(this, arguments); }
            },
            "getSize": {
              "value": function () { return this.get_size.apply(this, arguments); }
            },
            "getText": {
              "value": function () { return this.get_text.apply(this, arguments); }
            },
            "getTextAttributes": {
              "value": function () { return this.get_text_attributes.apply(this, arguments); }
            },
            "getTextAttributesForArea": {
              "value": function () { return this.get_text_attributes_for_area.apply(this, arguments); }
            },
            "getTextForArea": {
              "value": function () { return this.get_text_for_area.apply(this, arguments); }
            },
            "getTextLayout": {
              "value": function () { return this.get_text_layout.apply(this, arguments); }
            },
            "getTextLayoutForArea": {
              "value": function () { return this.get_text_layout_for_area.apply(this, arguments); }
            },
            "getThumbnail": {
              "value": function () { return this.get_thumbnail.apply(this, arguments); }
            },
            "getThumbnailSize": {
              "value": function () { return this.get_thumbnail_size.apply(this, arguments); }
            },
            "getTransition": {
              "value": function () { return this.get_transition.apply(this, arguments); }
            },
            "removeAnnot": {
              "value": function () { return this.remove_annot.apply(this, arguments); }
            },
            "renderForPrinting": {
              "value": function () { return this.render_for_printing.apply(this, arguments); }
            },
            "renderForPrintingWithOptions": {
              "value": function () { return this.render_for_printing_with_options.apply(this, arguments); }
            },
            "renderSelection": {
              "value": function () { return this.render_selection.apply(this, arguments); }
            },
            "renderToPs": {
              "value": function () { return this.render_to_ps.apply(this, arguments); }
            }
          },
          "static": {
            "freeAnnotMapping": {
              "value": function () { return this.free_annot_mapping.apply(this, arguments); }
            },
            "freeFormFieldMapping": {
              "value": function () { return this.free_form_field_mapping.apply(this, arguments); }
            },
            "freeImageMapping": {
              "value": function () { return this.free_image_mapping.apply(this, arguments); }
            },
            "freeLinkMapping": {
              "value": function () { return this.free_link_mapping.apply(this, arguments); }
            },
            "freeTextAttributes": {
              "value": function () { return this.free_text_attributes.apply(this, arguments); }
            },
            "selectionRegionFree": {
              "value": function () { return this.selection_region_free.apply(this, arguments); }
            }
          }
        },
        "StructureElement": {
          "prototype": {
            "getAbbreviation": {
              "value": function () { return this.get_abbreviation.apply(this, arguments); }
            },
            "getActualText": {
              "value": function () { return this.get_actual_text.apply(this, arguments); }
            },
            "getAltText": {
              "value": function () { return this.get_alt_text.apply(this, arguments); }
            },
            "getBackgroundColor": {
              "value": function () { return this.get_background_color.apply(this, arguments); }
            },
            "getBaselineShift": {
              "value": function () { return this.get_baseline_shift.apply(this, arguments); }
            },
            "getBlockAlign": {
              "value": function () { return this.get_block_align.apply(this, arguments); }
            },
            "getBorderColor": {
              "value": function () { return this.get_border_color.apply(this, arguments); }
            },
            "getBorderStyle": {
              "value": function () { return this.get_border_style.apply(this, arguments); }
            },
            "getBorderThickness": {
              "value": function () { return this.get_border_thickness.apply(this, arguments); }
            },
            "getBoundingBox": {
              "value": function () { return this.get_bounding_box.apply(this, arguments); }
            },
            "getColor": {
              "value": function () { return this.get_color.apply(this, arguments); }
            },
            "getColumnCount": {
              "value": function () { return this.get_column_count.apply(this, arguments); }
            },
            "getColumnGaps": {
              "value": function () { return this.get_column_gaps.apply(this, arguments); }
            },
            "getColumnWidths": {
              "value": function () { return this.get_column_widths.apply(this, arguments); }
            },
            "getEndIndent": {
              "value": function () { return this.get_end_indent.apply(this, arguments); }
            },
            "getFormDescription": {
              "value": function () { return this.get_form_description.apply(this, arguments); }
            },
            "getFormRole": {
              "value": function () { return this.get_form_role.apply(this, arguments); }
            },
            "getFormState": {
              "value": function () { return this.get_form_state.apply(this, arguments); }
            },
            "getGlyphOrientation": {
              "value": function () { return this.get_glyph_orientation.apply(this, arguments); }
            },
            "getHeight": {
              "value": function () { return this.get_height.apply(this, arguments); }
            },
            "getId": {
              "value": function () { return this.get_id.apply(this, arguments); }
            },
            "getInlineAlign": {
              "value": function () { return this.get_inline_align.apply(this, arguments); }
            },
            "getKind": {
              "value": function () { return this.get_kind.apply(this, arguments); }
            },
            "getLanguage": {
              "value": function () { return this.get_language.apply(this, arguments); }
            },
            "getLineHeight": {
              "value": function () { return this.get_line_height.apply(this, arguments); }
            },
            "getListNumbering": {
              "value": function () { return this.get_list_numbering.apply(this, arguments); }
            },
            "getPadding": {
              "value": function () { return this.get_padding.apply(this, arguments); }
            },
            "getPage": {
              "value": function () { return this.get_page.apply(this, arguments); }
            },
            "getPlacement": {
              "value": function () { return this.get_placement.apply(this, arguments); }
            },
            "getRubyAlign": {
              "value": function () { return this.get_ruby_align.apply(this, arguments); }
            },
            "getRubyPosition": {
              "value": function () { return this.get_ruby_position.apply(this, arguments); }
            },
            "getSpaceAfter": {
              "value": function () { return this.get_space_after.apply(this, arguments); }
            },
            "getSpaceBefore": {
              "value": function () { return this.get_space_before.apply(this, arguments); }
            },
            "getStartIndent": {
              "value": function () { return this.get_start_indent.apply(this, arguments); }
            },
            "getTableBorderStyle": {
              "value": function () { return this.get_table_border_style.apply(this, arguments); }
            },
            "getTableColumnSpan": {
              "value": function () { return this.get_table_column_span.apply(this, arguments); }
            },
            "getTableHeaders": {
              "value": function () { return this.get_table_headers.apply(this, arguments); }
            },
            "getTablePadding": {
              "value": function () { return this.get_table_padding.apply(this, arguments); }
            },
            "getTableRowSpan": {
              "value": function () { return this.get_table_row_span.apply(this, arguments); }
            },
            "getTableScope": {
              "value": function () { return this.get_table_scope.apply(this, arguments); }
            },
            "getTableSummary": {
              "value": function () { return this.get_table_summary.apply(this, arguments); }
            },
            "getText": {
              "value": function () { return this.get_text.apply(this, arguments); }
            },
            "getTextAlign": {
              "value": function () { return this.get_text_align.apply(this, arguments); }
            },
            "getTextDecorationColor": {
              "value": function () { return this.get_text_decoration_color.apply(this, arguments); }
            },
            "getTextDecorationThickness": {
              "value": function () { return this.get_text_decoration_thickness.apply(this, arguments); }
            },
            "getTextDecorationType": {
              "value": function () { return this.get_text_decoration_type.apply(this, arguments); }
            },
            "getTextIndent": {
              "value": function () { return this.get_text_indent.apply(this, arguments); }
            },
            "getTextSpans": {
              "value": function () { return this.get_text_spans.apply(this, arguments); }
            },
            "getTitle": {
              "value": function () { return this.get_title.apply(this, arguments); }
            },
            "getWidth": {
              "value": function () { return this.get_width.apply(this, arguments); }
            },
            "getWritingMode": {
              "value": function () { return this.get_writing_mode.apply(this, arguments); }
            },
            "isBlock": {
              "value": function () { return this.is_block.apply(this, arguments); }
            },
            "isContent": {
              "value": function () { return this.is_content.apply(this, arguments); }
            },
            "isGrouping": {
              "value": function () { return this.is_grouping.apply(this, arguments); }
            },
            "isInline": {
              "value": function () { return this.is_inline.apply(this, arguments); }
            }
          },
          "static": {}
        }
      },
      "static": {
        "dateParse": {
          "value": function () { return this.date_parse.apply(this, arguments); }
        },
        "errorQuark": {
          "value": function () { return this.error_quark.apply(this, arguments); }
        },
        "getBackend": {
          "value": function () { return this.get_backend.apply(this, arguments); }
        },
        "getVersion": {
          "value": function () { return this.get_version.apply(this, arguments); }
        }
      }
    },
    "Rest": {
      "class": {
        "OAuth2Proxy": {
          "prototype": {
            "buildLoginUrl": {
              "value": function () { return this.build_login_url.apply(this, arguments); }
            },
            "buildLoginUrlFull": {
              "value": function () { return this.build_login_url_full.apply(this, arguments); }
            },
            "getAccessToken": {
              "value": function () { return this.get_access_token.apply(this, arguments); }
            },
            "setAccessToken": {
              "value": function () { return this.set_access_token.apply(this, arguments); }
            },
            "accessToken": {
              "get": function () { return this.access_token; },
              "set": function (value) { this.access_token = value; }
            },
            "authEndpoint": {
              "get": function () { return this.auth_endpoint; },
              "set": function (value) { this.auth_endpoint = value; }
            },
            "clientId": {
              "get": function () { return this.client_id; },
              "set": function (value) { this.client_id = value; }
            }
          },
          "static": {
            "extractAccessToken": {
              "value": function () { return this.extract_access_token.apply(this, arguments); }
            }
          }
        },
        "OAuth2ProxyCall": {
          "prototype": {},
          "static": {}
        },
        "OAuthProxy": {
          "prototype": {
            "accessToken": {
              "value": function () { return this.access_token.apply(this, arguments); }
            },
            "accessTokenAsync": {
              "value": function () { return this.access_token_async.apply(this, arguments); }
            },
            "authStep": {
              "value": function () { return this.auth_step.apply(this, arguments); }
            },
            "authStepAsync": {
              "value": function () { return this.auth_step_async.apply(this, arguments); }
            },
            "getSignatureHost": {
              "value": function () { return this.get_signature_host.apply(this, arguments); }
            },
            "getToken": {
              "value": function () { return this.get_token.apply(this, arguments); }
            },
            "getTokenSecret": {
              "value": function () { return this.get_token_secret.apply(this, arguments); }
            },
            "isOauth10a": {
              "value": function () { return this.is_oauth10a.apply(this, arguments); }
            },
            "newEchoProxy": {
              "value": function () { return this.new_echo_proxy.apply(this, arguments); }
            },
            "requestToken": {
              "value": function () { return this.request_token.apply(this, arguments); }
            },
            "requestTokenAsync": {
              "value": function () { return this.request_token_async.apply(this, arguments); }
            },
            "setSignatureHost": {
              "value": function () { return this.set_signature_host.apply(this, arguments); }
            },
            "setToken": {
              "value": function () { return this.set_token.apply(this, arguments); }
            },
            "setTokenSecret": {
              "value": function () { return this.set_token_secret.apply(this, arguments); }
            },
            "consumerKey": {
              "get": function () { return this.consumer_key; },
              "set": function (value) { this.consumer_key = value; }
            },
            "consumerSecret": {
              "get": function () { return this.consumer_secret; },
              "set": function (value) { this.consumer_secret = value; }
            },
            "signatureHost": {
              "get": function () { return this.signature_host; },
              "set": function (value) { this.signature_host = value; }
            },
            "signatureMethod": {
              "get": function () { return this.signature_method; },
              "set": function (value) { this.signature_method = value; }
            },
            "tokenSecret": {
              "get": function () { return this.token_secret; },
              "set": function (value) { this.token_secret = value; }
            }
          },
          "static": {}
        },
        "OAuthProxyCall": {
          "prototype": {
            "parseTokenReponse": {
              "value": function () { return this.parse_token_reponse.apply(this, arguments); }
            },
            "parseTokenResponse": {
              "value": function () { return this.parse_token_response.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Proxy": {
          "prototype": {
            "addSoupFeature": {
              "value": function () { return this.add_soup_feature.apply(this, arguments); }
            },
            "bindValist": {
              "value": function () { return this.bind_valist.apply(this, arguments); }
            },
            "getUserAgent": {
              "value": function () { return this.get_user_agent.apply(this, arguments); }
            },
            "newCall": {
              "value": function () { return this.new_call.apply(this, arguments); }
            },
            "setUserAgent": {
              "value": function () { return this.set_user_agent.apply(this, arguments); }
            },
            "simpleRun": {
              "value": function () { return this.simple_run.apply(this, arguments); }
            },
            "simpleRunValist": {
              "value": function () { return this.simple_run_valist.apply(this, arguments); }
            },
            "bindingRequired": {
              "get": function () { return this.binding_required; },
              "set": function (value) { this.binding_required = value; }
            },
            "disableCookies": {
              "get": function () { return this.disable_cookies; },
              "set": function (value) { this.disable_cookies = value; }
            },
            "sslCaFile": {
              "get": function () { return this.ssl_ca_file; },
              "set": function (value) { this.ssl_ca_file = value; }
            },
            "sslStrict": {
              "get": function () { return this.ssl_strict; },
              "set": function (value) { this.ssl_strict = value; }
            },
            "urlFormat": {
              "get": function () { return this.url_format; },
              "set": function (value) { this.url_format = value; }
            },
            "userAgent": {
              "get": function () { return this.user_agent; },
              "set": function (value) { this.user_agent = value; }
            }
          },
          "static": {}
        },
        "ProxyAuth": {
          "prototype": {},
          "static": {}
        },
        "ProxyCall": {
          "prototype": {
            "addHeader": {
              "value": function () { return this.add_header.apply(this, arguments); }
            },
            "addHeaders": {
              "value": function () { return this.add_headers.apply(this, arguments); }
            },
            "addHeadersFromValist": {
              "value": function () { return this.add_headers_from_valist.apply(this, arguments); }
            },
            "addParam": {
              "value": function () { return this.add_param.apply(this, arguments); }
            },
            "addParamFull": {
              "value": function () { return this.add_param_full.apply(this, arguments); }
            },
            "addParams": {
              "value": function () { return this.add_params.apply(this, arguments); }
            },
            "addParamsFromValist": {
              "value": function () { return this.add_params_from_valist.apply(this, arguments); }
            },
            "getFunction": {
              "value": function () { return this.get_function.apply(this, arguments); }
            },
            "getMethod": {
              "value": function () { return this.get_method.apply(this, arguments); }
            },
            "getParams": {
              "value": function () { return this.get_params.apply(this, arguments); }
            },
            "getPayload": {
              "value": function () { return this.get_payload.apply(this, arguments); }
            },
            "getPayloadLength": {
              "value": function () { return this.get_payload_length.apply(this, arguments); }
            },
            "getResponseHeaders": {
              "value": function () { return this.get_response_headers.apply(this, arguments); }
            },
            "getStatusCode": {
              "value": function () { return this.get_status_code.apply(this, arguments); }
            },
            "getStatusMessage": {
              "value": function () { return this.get_status_message.apply(this, arguments); }
            },
            "invokeAsync": {
              "value": function () { return this.invoke_async.apply(this, arguments); }
            },
            "invokeFinish": {
              "value": function () { return this.invoke_finish.apply(this, arguments); }
            },
            "lookupHeader": {
              "value": function () { return this.lookup_header.apply(this, arguments); }
            },
            "lookupParam": {
              "value": function () { return this.lookup_param.apply(this, arguments); }
            },
            "lookupResponseHeader": {
              "value": function () { return this.lookup_response_header.apply(this, arguments); }
            },
            "removeHeader": {
              "value": function () { return this.remove_header.apply(this, arguments); }
            },
            "removeParam": {
              "value": function () { return this.remove_param.apply(this, arguments); }
            },
            "serializeParams": {
              "value": function () { return this.serialize_params.apply(this, arguments); }
            },
            "setFunction": {
              "value": function () { return this.set_function.apply(this, arguments); }
            },
            "setMethod": {
              "value": function () { return this.set_method.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "XmlParser": {
          "prototype": {
            "parseFromData": {
              "value": function () { return this.parse_from_data.apply(this, arguments); }
            }
          },
          "static": {}
        }
      },
      "static": {
        "hmacSha1": {
          "value": function () { return this.hmac_sha1.apply(this, arguments); }
        },
        "proxyCallErrorQuark": {
          "value": function () { return this.proxy_call_error_quark.apply(this, arguments); }
        },
        "proxyErrorQuark": {
          "value": function () { return this.proxy_error_quark.apply(this, arguments); }
        }
      }
    },
    "RestExtras": {
      "class": {
        "FlickrProxy": {
          "prototype": {
            "buildLoginUrl": {
              "value": function () { return this.build_login_url.apply(this, arguments); }
            },
            "getApiKey": {
              "value": function () { return this.get_api_key.apply(this, arguments); }
            },
            "getSharedSecret": {
              "value": function () { return this.get_shared_secret.apply(this, arguments); }
            },
            "getToken": {
              "value": function () { return this.get_token.apply(this, arguments); }
            },
            "newUpload": {
              "value": function () { return this.new_upload.apply(this, arguments); }
            },
            "newUploadForFile": {
              "value": function () { return this.new_upload_for_file.apply(this, arguments); }
            },
            "setToken": {
              "value": function () { return this.set_token.apply(this, arguments); }
            },
            "apiKey": {
              "get": function () { return this.api_key; },
              "set": function (value) { this.api_key = value; }
            },
            "sharedSecret": {
              "get": function () { return this.shared_secret; },
              "set": function (value) { this.shared_secret = value; }
            }
          },
          "static": {
            "isSuccessful": {
              "value": function () { return this.is_successful.apply(this, arguments); }
            }
          }
        },
        "FlickrProxyCall": {
          "prototype": {},
          "static": {}
        },
        "LastfmProxy": {
          "prototype": {
            "buildLoginUrl": {
              "value": function () { return this.build_login_url.apply(this, arguments); }
            },
            "getApiKey": {
              "value": function () { return this.get_api_key.apply(this, arguments); }
            },
            "getSecret": {
              "value": function () { return this.get_secret.apply(this, arguments); }
            },
            "getSessionKey": {
              "value": function () { return this.get_session_key.apply(this, arguments); }
            },
            "setSessionKey": {
              "value": function () { return this.set_session_key.apply(this, arguments); }
            },
            "apiKey": {
              "get": function () { return this.api_key; },
              "set": function (value) { this.api_key = value; }
            },
            "sessionKey": {
              "get": function () { return this.session_key; },
              "set": function (value) { this.session_key = value; }
            }
          },
          "static": {
            "isSuccessful": {
              "value": function () { return this.is_successful.apply(this, arguments); }
            }
          }
        },
        "LastfmProxyCall": {
          "prototype": {},
          "static": {}
        },
        "YoutubeProxy": {
          "prototype": {
            "setUserAuth": {
              "value": function () { return this.set_user_auth.apply(this, arguments); }
            },
            "uploadAsync": {
              "value": function () { return this.upload_async.apply(this, arguments); }
            },
            "developerKey": {
              "get": function () { return this.developer_key; },
              "set": function (value) { this.developer_key = value; }
            },
            "userAuth": {
              "get": function () { return this.user_auth; },
              "set": function (value) { this.user_auth = value; }
            }
          },
          "static": {}
        }
      },
      "static": {}
    },
    "Rsvg": {
      "class": {
        "Handle": {
          "prototype": {
            "getBaseUri": {
              "value": function () { return this.get_base_uri.apply(this, arguments); }
            },
            "getDimensions": {
              "value": function () { return this.get_dimensions.apply(this, arguments); }
            },
            "getDimensionsSub": {
              "value": function () { return this.get_dimensions_sub.apply(this, arguments); }
            },
            "getPixbuf": {
              "value": function () { return this.get_pixbuf.apply(this, arguments); }
            },
            "getPixbufSub": {
              "value": function () { return this.get_pixbuf_sub.apply(this, arguments); }
            },
            "getPositionSub": {
              "value": function () { return this.get_position_sub.apply(this, arguments); }
            },
            "hasSub": {
              "value": function () { return this.has_sub.apply(this, arguments); }
            },
            "readStreamSync": {
              "value": function () { return this.read_stream_sync.apply(this, arguments); }
            },
            "renderCairo": {
              "value": function () { return this.render_cairo.apply(this, arguments); }
            },
            "renderCairoSub": {
              "value": function () { return this.render_cairo_sub.apply(this, arguments); }
            },
            "setBaseGfile": {
              "value": function () { return this.set_base_gfile.apply(this, arguments); }
            },
            "setBaseUri": {
              "value": function () { return this.set_base_uri.apply(this, arguments); }
            },
            "setDpi": {
              "value": function () { return this.set_dpi.apply(this, arguments); }
            },
            "setDpiXY": {
              "value": function () { return this.set_dpi_x_y.apply(this, arguments); }
            },
            "baseUri": {
              "get": function () { return this.base_uri; },
              "set": function (value) { this.base_uri = value; }
            },
            "dpiX": {
              "get": function () { return this.dpi_x; },
              "set": function (value) { this.dpi_x = value; }
            },
            "dpiY": {
              "get": function () { return this.dpi_y; },
              "set": function (value) { this.dpi_y = value; }
            }
          },
          "static": {}
        }
      },
      "static": {
        "errorQuark": {
          "value": function () { return this.error_quark.apply(this, arguments); }
        },
        "setDefaultDpi": {
          "value": function () { return this.set_default_dpi.apply(this, arguments); }
        },
        "setDefaultDpiXY": {
          "value": function () { return this.set_default_dpi_x_y.apply(this, arguments); }
        }
      }
    },
    "Secret": {
      "class": {
        "Collection": {
          "prototype": {
            "deleteFinish": {
              "value": function () { return this.delete_finish.apply(this, arguments); }
            },
            "deleteSync": {
              "value": function () { return this.delete_sync.apply(this, arguments); }
            },
            "getCreated": {
              "value": function () { return this.get_created.apply(this, arguments); }
            },
            "getFlags": {
              "value": function () { return this.get_flags.apply(this, arguments); }
            },
            "getItems": {
              "value": function () { return this.get_items.apply(this, arguments); }
            },
            "getLabel": {
              "value": function () { return this.get_label.apply(this, arguments); }
            },
            "getLocked": {
              "value": function () { return this.get_locked.apply(this, arguments); }
            },
            "getModified": {
              "value": function () { return this.get_modified.apply(this, arguments); }
            },
            "getService": {
              "value": function () { return this.get_service.apply(this, arguments); }
            },
            "loadItems": {
              "value": function () { return this.load_items.apply(this, arguments); }
            },
            "loadItemsFinish": {
              "value": function () { return this.load_items_finish.apply(this, arguments); }
            },
            "loadItemsSync": {
              "value": function () { return this.load_items_sync.apply(this, arguments); }
            },
            "searchFinish": {
              "value": function () { return this.search_finish.apply(this, arguments); }
            },
            "searchForDbusPaths": {
              "value": function () { return this.search_for_dbus_paths.apply(this, arguments); }
            },
            "searchForDbusPathsFinish": {
              "value": function () { return this.search_for_dbus_paths_finish.apply(this, arguments); }
            },
            "searchForDbusPathsSync": {
              "value": function () { return this.search_for_dbus_paths_sync.apply(this, arguments); }
            },
            "searchSync": {
              "value": function () { return this.search_sync.apply(this, arguments); }
            },
            "setLabel": {
              "value": function () { return this.set_label.apply(this, arguments); }
            },
            "setLabelFinish": {
              "value": function () { return this.set_label_finish.apply(this, arguments); }
            },
            "setLabelSync": {
              "value": function () { return this.set_label_sync.apply(this, arguments); }
            }
          },
          "static": {
            "createFinish": {
              "value": function () { return this.create_finish.apply(this, arguments); }
            },
            "createSync": {
              "value": function () { return this.create_sync.apply(this, arguments); }
            },
            "forAlias": {
              "value": function () { return this.for_alias.apply(this, arguments); }
            },
            "forAliasFinish": {
              "value": function () { return this.for_alias_finish.apply(this, arguments); }
            },
            "forAliasSync": {
              "value": function () { return this.for_alias_sync.apply(this, arguments); }
            },
            "newForDbusPath": {
              "value": function () { return this.new_for_dbus_path.apply(this, arguments); }
            }
          }
        },
        "Item": {
          "prototype": {
            "deleteFinish": {
              "value": function () { return this.delete_finish.apply(this, arguments); }
            },
            "deleteSync": {
              "value": function () { return this.delete_sync.apply(this, arguments); }
            },
            "getAttributes": {
              "value": function () { return this.get_attributes.apply(this, arguments); }
            },
            "getCreated": {
              "value": function () { return this.get_created.apply(this, arguments); }
            },
            "getFlags": {
              "value": function () { return this.get_flags.apply(this, arguments); }
            },
            "getLabel": {
              "value": function () { return this.get_label.apply(this, arguments); }
            },
            "getLocked": {
              "value": function () { return this.get_locked.apply(this, arguments); }
            },
            "getModified": {
              "value": function () { return this.get_modified.apply(this, arguments); }
            },
            "getSchemaName": {
              "value": function () { return this.get_schema_name.apply(this, arguments); }
            },
            "getSecret": {
              "value": function () { return this.get_secret.apply(this, arguments); }
            },
            "getService": {
              "value": function () { return this.get_service.apply(this, arguments); }
            },
            "loadSecret": {
              "value": function () { return this.load_secret.apply(this, arguments); }
            },
            "loadSecretFinish": {
              "value": function () { return this.load_secret_finish.apply(this, arguments); }
            },
            "loadSecretSync": {
              "value": function () { return this.load_secret_sync.apply(this, arguments); }
            },
            "setAttributes": {
              "value": function () { return this.set_attributes.apply(this, arguments); }
            },
            "setAttributesFinish": {
              "value": function () { return this.set_attributes_finish.apply(this, arguments); }
            },
            "setAttributesSync": {
              "value": function () { return this.set_attributes_sync.apply(this, arguments); }
            },
            "setLabel": {
              "value": function () { return this.set_label.apply(this, arguments); }
            },
            "setLabelFinish": {
              "value": function () { return this.set_label_finish.apply(this, arguments); }
            },
            "setLabelSync": {
              "value": function () { return this.set_label_sync.apply(this, arguments); }
            },
            "setSecret": {
              "value": function () { return this.set_secret.apply(this, arguments); }
            },
            "setSecretFinish": {
              "value": function () { return this.set_secret_finish.apply(this, arguments); }
            },
            "setSecretSync": {
              "value": function () { return this.set_secret_sync.apply(this, arguments); }
            }
          },
          "static": {
            "createFinish": {
              "value": function () { return this.create_finish.apply(this, arguments); }
            },
            "createSync": {
              "value": function () { return this.create_sync.apply(this, arguments); }
            },
            "loadSecrets": {
              "value": function () { return this.load_secrets.apply(this, arguments); }
            },
            "loadSecretsFinish": {
              "value": function () { return this.load_secrets_finish.apply(this, arguments); }
            },
            "loadSecretsSync": {
              "value": function () { return this.load_secrets_sync.apply(this, arguments); }
            },
            "newForDbusPath": {
              "value": function () { return this.new_for_dbus_path.apply(this, arguments); }
            }
          }
        },
        "Prompt": {
          "prototype": {
            "performFinish": {
              "value": function () { return this.perform_finish.apply(this, arguments); }
            },
            "performSync": {
              "value": function () { return this.perform_sync.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Service": {
          "prototype": {
            "clearFinish": {
              "value": function () { return this.clear_finish.apply(this, arguments); }
            },
            "clearSync": {
              "value": function () { return this.clear_sync.apply(this, arguments); }
            },
            "createCollectionDbusPath": {
              "value": function () { return this.create_collection_dbus_path.apply(this, arguments); }
            },
            "createCollectionDbusPathFinish": {
              "value": function () { return this.create_collection_dbus_path_finish.apply(this, arguments); }
            },
            "createCollectionDbusPathSync": {
              "value": function () { return this.create_collection_dbus_path_sync.apply(this, arguments); }
            },
            "createItemDbusPath": {
              "value": function () { return this.create_item_dbus_path.apply(this, arguments); }
            },
            "createItemDbusPathFinish": {
              "value": function () { return this.create_item_dbus_path_finish.apply(this, arguments); }
            },
            "createItemDbusPathSync": {
              "value": function () { return this.create_item_dbus_path_sync.apply(this, arguments); }
            },
            "decodeDbusSecret": {
              "value": function () { return this.decode_dbus_secret.apply(this, arguments); }
            },
            "deleteItemDbusPath": {
              "value": function () { return this.delete_item_dbus_path.apply(this, arguments); }
            },
            "deleteItemDbusPathFinish": {
              "value": function () { return this.delete_item_dbus_path_finish.apply(this, arguments); }
            },
            "deleteItemDbusPathSync": {
              "value": function () { return this.delete_item_dbus_path_sync.apply(this, arguments); }
            },
            "encodeDbusSecret": {
              "value": function () { return this.encode_dbus_secret.apply(this, arguments); }
            },
            "ensureSession": {
              "value": function () { return this.ensure_session.apply(this, arguments); }
            },
            "ensureSessionFinish": {
              "value": function () { return this.ensure_session_finish.apply(this, arguments); }
            },
            "ensureSessionSync": {
              "value": function () { return this.ensure_session_sync.apply(this, arguments); }
            },
            "getCollectionGtype": {
              "value": function () { return this.get_collection_gtype.apply(this, arguments); }
            },
            "getCollections": {
              "value": function () { return this.get_collections.apply(this, arguments); }
            },
            "getFlags": {
              "value": function () { return this.get_flags.apply(this, arguments); }
            },
            "getItemGtype": {
              "value": function () { return this.get_item_gtype.apply(this, arguments); }
            },
            "getSecretForDbusPath": {
              "value": function () { return this.get_secret_for_dbus_path.apply(this, arguments); }
            },
            "getSecretForDbusPathFinish": {
              "value": function () { return this.get_secret_for_dbus_path_finish.apply(this, arguments); }
            },
            "getSecretForDbusPathSync": {
              "value": function () { return this.get_secret_for_dbus_path_sync.apply(this, arguments); }
            },
            "getSecretsForDbusPaths": {
              "value": function () { return this.get_secrets_for_dbus_paths.apply(this, arguments); }
            },
            "getSecretsForDbusPathsFinish": {
              "value": function () { return this.get_secrets_for_dbus_paths_finish.apply(this, arguments); }
            },
            "getSecretsForDbusPathsSync": {
              "value": function () { return this.get_secrets_for_dbus_paths_sync.apply(this, arguments); }
            },
            "getSessionAlgorithms": {
              "value": function () { return this.get_session_algorithms.apply(this, arguments); }
            },
            "getSessionDbusPath": {
              "value": function () { return this.get_session_dbus_path.apply(this, arguments); }
            },
            "loadCollections": {
              "value": function () { return this.load_collections.apply(this, arguments); }
            },
            "loadCollectionsFinish": {
              "value": function () { return this.load_collections_finish.apply(this, arguments); }
            },
            "loadCollectionsSync": {
              "value": function () { return this.load_collections_sync.apply(this, arguments); }
            },
            "lockDbusPaths": {
              "value": function () { return this.lock_dbus_paths.apply(this, arguments); }
            },
            "lockDbusPathsFinish": {
              "value": function () { return this.lock_dbus_paths_finish.apply(this, arguments); }
            },
            "lockDbusPathsSync": {
              "value": function () { return this.lock_dbus_paths_sync.apply(this, arguments); }
            },
            "lockFinish": {
              "value": function () { return this.lock_finish.apply(this, arguments); }
            },
            "lockSync": {
              "value": function () { return this.lock_sync.apply(this, arguments); }
            },
            "lookupFinish": {
              "value": function () { return this.lookup_finish.apply(this, arguments); }
            },
            "lookupSync": {
              "value": function () { return this.lookup_sync.apply(this, arguments); }
            },
            "promptAtDbusPath": {
              "value": function () { return this.prompt_at_dbus_path.apply(this, arguments); }
            },
            "promptAtDbusPathFinish": {
              "value": function () { return this.prompt_at_dbus_path_finish.apply(this, arguments); }
            },
            "promptAtDbusPathSync": {
              "value": function () { return this.prompt_at_dbus_path_sync.apply(this, arguments); }
            },
            "promptFinish": {
              "value": function () { return this.prompt_finish.apply(this, arguments); }
            },
            "promptSync": {
              "value": function () { return this.prompt_sync.apply(this, arguments); }
            },
            "readAliasDbusPath": {
              "value": function () { return this.read_alias_dbus_path.apply(this, arguments); }
            },
            "readAliasDbusPathFinish": {
              "value": function () { return this.read_alias_dbus_path_finish.apply(this, arguments); }
            },
            "readAliasDbusPathSync": {
              "value": function () { return this.read_alias_dbus_path_sync.apply(this, arguments); }
            },
            "searchFinish": {
              "value": function () { return this.search_finish.apply(this, arguments); }
            },
            "searchForDbusPaths": {
              "value": function () { return this.search_for_dbus_paths.apply(this, arguments); }
            },
            "searchForDbusPathsFinish": {
              "value": function () { return this.search_for_dbus_paths_finish.apply(this, arguments); }
            },
            "searchForDbusPathsSync": {
              "value": function () { return this.search_for_dbus_paths_sync.apply(this, arguments); }
            },
            "searchSync": {
              "value": function () { return this.search_sync.apply(this, arguments); }
            },
            "setAlias": {
              "value": function () { return this.set_alias.apply(this, arguments); }
            },
            "setAliasFinish": {
              "value": function () { return this.set_alias_finish.apply(this, arguments); }
            },
            "setAliasSync": {
              "value": function () { return this.set_alias_sync.apply(this, arguments); }
            },
            "setAliasToDbusPath": {
              "value": function () { return this.set_alias_to_dbus_path.apply(this, arguments); }
            },
            "setAliasToDbusPathFinish": {
              "value": function () { return this.set_alias_to_dbus_path_finish.apply(this, arguments); }
            },
            "setAliasToDbusPathSync": {
              "value": function () { return this.set_alias_to_dbus_path_sync.apply(this, arguments); }
            },
            "storeFinish": {
              "value": function () { return this.store_finish.apply(this, arguments); }
            },
            "storeSync": {
              "value": function () { return this.store_sync.apply(this, arguments); }
            },
            "unlockDbusPaths": {
              "value": function () { return this.unlock_dbus_paths.apply(this, arguments); }
            },
            "unlockDbusPathsFinish": {
              "value": function () { return this.unlock_dbus_paths_finish.apply(this, arguments); }
            },
            "unlockDbusPathsSync": {
              "value": function () { return this.unlock_dbus_paths_sync.apply(this, arguments); }
            },
            "unlockFinish": {
              "value": function () { return this.unlock_finish.apply(this, arguments); }
            },
            "unlockSync": {
              "value": function () { return this.unlock_sync.apply(this, arguments); }
            }
          },
          "static": {
            "getFinish": {
              "value": function () { return this.get_finish.apply(this, arguments); }
            },
            "getSync": {
              "value": function () { return this.get_sync.apply(this, arguments); }
            },
            "openFinish": {
              "value": function () { return this.open_finish.apply(this, arguments); }
            },
            "openSync": {
              "value": function () { return this.open_sync.apply(this, arguments); }
            }
          }
        }
      },
      "static": {
        "attributesBuild": {
          "value": function () { return this.attributes_build.apply(this, arguments); }
        },
        "attributesBuildv": {
          "value": function () { return this.attributes_buildv.apply(this, arguments); }
        },
        "errorGetQuark": {
          "value": function () { return this.error_get_quark.apply(this, arguments); }
        },
        "passwordClear": {
          "value": function () { return this.password_clear.apply(this, arguments); }
        },
        "passwordClearFinish": {
          "value": function () { return this.password_clear_finish.apply(this, arguments); }
        },
        "passwordClearSync": {
          "value": function () { return this.password_clear_sync.apply(this, arguments); }
        },
        "passwordClearv": {
          "value": function () { return this.password_clearv.apply(this, arguments); }
        },
        "passwordClearvSync": {
          "value": function () { return this.password_clearv_sync.apply(this, arguments); }
        },
        "passwordFree": {
          "value": function () { return this.password_free.apply(this, arguments); }
        },
        "passwordLookup": {
          "value": function () { return this.password_lookup.apply(this, arguments); }
        },
        "passwordLookupFinish": {
          "value": function () { return this.password_lookup_finish.apply(this, arguments); }
        },
        "passwordLookupNonpageableFinish": {
          "value": function () { return this.password_lookup_nonpageable_finish.apply(this, arguments); }
        },
        "passwordLookupNonpageableSync": {
          "value": function () { return this.password_lookup_nonpageable_sync.apply(this, arguments); }
        },
        "passwordLookupSync": {
          "value": function () { return this.password_lookup_sync.apply(this, arguments); }
        },
        "passwordLookupv": {
          "value": function () { return this.password_lookupv.apply(this, arguments); }
        },
        "passwordLookupvNonpageableSync": {
          "value": function () { return this.password_lookupv_nonpageable_sync.apply(this, arguments); }
        },
        "passwordLookupvSync": {
          "value": function () { return this.password_lookupv_sync.apply(this, arguments); }
        },
        "passwordStore": {
          "value": function () { return this.password_store.apply(this, arguments); }
        },
        "passwordStoreFinish": {
          "value": function () { return this.password_store_finish.apply(this, arguments); }
        },
        "passwordStoreSync": {
          "value": function () { return this.password_store_sync.apply(this, arguments); }
        },
        "passwordStorev": {
          "value": function () { return this.password_storev.apply(this, arguments); }
        },
        "passwordStorevSync": {
          "value": function () { return this.password_storev_sync.apply(this, arguments); }
        },
        "passwordWipe": {
          "value": function () { return this.password_wipe.apply(this, arguments); }
        }
      }
    },
    "Soup": {
      "class": {
        "Address": {
          "prototype": {
            "equalByIp": {
              "value": function () { return this.equal_by_ip.apply(this, arguments); }
            },
            "equalByName": {
              "value": function () { return this.equal_by_name.apply(this, arguments); }
            },
            "getGsockaddr": {
              "value": function () { return this.get_gsockaddr.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getPhysical": {
              "value": function () { return this.get_physical.apply(this, arguments); }
            },
            "getPort": {
              "value": function () { return this.get_port.apply(this, arguments); }
            },
            "getSockaddr": {
              "value": function () { return this.get_sockaddr.apply(this, arguments); }
            },
            "hashByIp": {
              "value": function () { return this.hash_by_ip.apply(this, arguments); }
            },
            "hashByName": {
              "value": function () { return this.hash_by_name.apply(this, arguments); }
            },
            "isResolved": {
              "value": function () { return this.is_resolved.apply(this, arguments); }
            },
            "resolveAsync": {
              "value": function () { return this.resolve_async.apply(this, arguments); }
            },
            "resolveSync": {
              "value": function () { return this.resolve_sync.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Auth": {
          "prototype": {
            "freeProtectionSpace": {
              "value": function () { return this.free_protection_space.apply(this, arguments); }
            },
            "getAuthorization": {
              "value": function () { return this.get_authorization.apply(this, arguments); }
            },
            "getHost": {
              "value": function () { return this.get_host.apply(this, arguments); }
            },
            "getInfo": {
              "value": function () { return this.get_info.apply(this, arguments); }
            },
            "getProtectionSpace": {
              "value": function () { return this.get_protection_space.apply(this, arguments); }
            },
            "getRealm": {
              "value": function () { return this.get_realm.apply(this, arguments); }
            },
            "getSavedPassword": {
              "value": function () { return this.get_saved_password.apply(this, arguments); }
            },
            "getSavedUsers": {
              "value": function () { return this.get_saved_users.apply(this, arguments); }
            },
            "getSchemeName": {
              "value": function () { return this.get_scheme_name.apply(this, arguments); }
            },
            "hasSavedPassword": {
              "value": function () { return this.has_saved_password.apply(this, arguments); }
            },
            "isAuthenticated": {
              "get": function () { return this.is_authenticated; },
              "set": function (value) { this.is_authenticated = value; }
            },
            "isForProxy": {
              "get": function () { return this.is_for_proxy; },
              "set": function (value) { this.is_for_proxy = value; }
            },
            "isReady": {
              "value": function () { return this.is_ready.apply(this, arguments); }
            },
            "savePassword": {
              "value": function () { return this.save_password.apply(this, arguments); }
            },
            "schemeName": {
              "get": function () { return this.scheme_name; },
              "set": function (value) { this.scheme_name = value; }
            }
          },
          "static": {}
        },
        "AuthBasic": {
          "prototype": {},
          "static": {}
        },
        "AuthDigest": {
          "prototype": {},
          "static": {}
        },
        "AuthDomain": {
          "prototype": {
            "addPath": {
              "get": function () { return this.add_path; },
              "set": function (value) { this.add_path = value; }
            },
            "basicSetAuthCallback": {
              "value": function () { return this.basic_set_auth_callback.apply(this, arguments); }
            },
            "checkPassword": {
              "value": function () { return this.check_password.apply(this, arguments); }
            },
            "digestSetAuthCallback": {
              "value": function () { return this.digest_set_auth_callback.apply(this, arguments); }
            },
            "getRealm": {
              "value": function () { return this.get_realm.apply(this, arguments); }
            },
            "removePath": {
              "get": function () { return this.remove_path; },
              "set": function (value) { this.remove_path = value; }
            },
            "setFilter": {
              "value": function () { return this.set_filter.apply(this, arguments); }
            },
            "setGenericAuthCallback": {
              "value": function () { return this.set_generic_auth_callback.apply(this, arguments); }
            },
            "tryGenericAuthCallback": {
              "value": function () { return this.try_generic_auth_callback.apply(this, arguments); }
            },
            "filterData": {
              "get": function () { return this.filter_data; },
              "set": function (value) { this.filter_data = value; }
            },
            "genericAuthCallback": {
              "get": function () { return this.generic_auth_callback; },
              "set": function (value) { this.generic_auth_callback = value; }
            },
            "genericAuthData": {
              "get": function () { return this.generic_auth_data; },
              "set": function (value) { this.generic_auth_data = value; }
            }
          },
          "static": {}
        },
        "AuthDomainBasic": {
          "prototype": {
            "authCallback": {
              "get": function () { return this.auth_callback; },
              "set": function (value) { this.auth_callback = value; }
            },
            "authData": {
              "get": function () { return this.auth_data; },
              "set": function (value) { this.auth_data = value; }
            }
          },
          "static": {}
        },
        "AuthDomainDigest": {
          "prototype": {
            "authCallback": {
              "get": function () { return this.auth_callback; },
              "set": function (value) { this.auth_callback = value; }
            },
            "authData": {
              "get": function () { return this.auth_data; },
              "set": function (value) { this.auth_data = value; }
            }
          },
          "static": {
            "encodePassword": {
              "value": function () { return this.encode_password.apply(this, arguments); }
            }
          }
        },
        "AuthManager": {
          "prototype": {
            "useAuth": {
              "value": function () { return this.use_auth.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "AuthNTLM": {
          "prototype": {},
          "static": {}
        },
        "Cache": {
          "prototype": {
            "getMaxSize": {
              "value": function () { return this.get_max_size.apply(this, arguments); }
            },
            "setMaxSize": {
              "value": function () { return this.set_max_size.apply(this, arguments); }
            },
            "cacheDir": {
              "get": function () { return this.cache_dir; },
              "set": function (value) { this.cache_dir = value; }
            },
            "cacheType": {
              "get": function () { return this.cache_type; },
              "set": function (value) { this.cache_type = value; }
            }
          },
          "static": {}
        },
        "ContentDecoder": {
          "prototype": {},
          "static": {}
        },
        "ContentSniffer": {
          "prototype": {
            "getBufferSize": {
              "value": function () { return this.get_buffer_size.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "CookieJar": {
          "prototype": {
            "addCookie": {
              "value": function () { return this.add_cookie.apply(this, arguments); }
            },
            "addCookieWithFirstParty": {
              "value": function () { return this.add_cookie_with_first_party.apply(this, arguments); }
            },
            "allCookies": {
              "value": function () { return this.all_cookies.apply(this, arguments); }
            },
            "deleteCookie": {
              "value": function () { return this.delete_cookie.apply(this, arguments); }
            },
            "getAcceptPolicy": {
              "value": function () { return this.get_accept_policy.apply(this, arguments); }
            },
            "getCookieList": {
              "value": function () { return this.get_cookie_list.apply(this, arguments); }
            },
            "getCookies": {
              "value": function () { return this.get_cookies.apply(this, arguments); }
            },
            "isPersistent": {
              "value": function () { return this.is_persistent.apply(this, arguments); }
            },
            "setAcceptPolicy": {
              "value": function () { return this.set_accept_policy.apply(this, arguments); }
            },
            "setCookie": {
              "value": function () { return this.set_cookie.apply(this, arguments); }
            },
            "setCookieWithFirstParty": {
              "value": function () { return this.set_cookie_with_first_party.apply(this, arguments); }
            },
            "acceptPolicy": {
              "get": function () { return this.accept_policy; },
              "set": function (value) { this.accept_policy = value; }
            },
            "readOnly": {
              "get": function () { return this.read_only; },
              "set": function (value) { this.read_only = value; }
            }
          },
          "static": {}
        },
        "CookieJarDB": {
          "prototype": {},
          "static": {}
        },
        "CookieJarText": {
          "prototype": {},
          "static": {}
        },
        "Logger": {
          "prototype": {
            "setPrinter": {
              "value": function () { return this.set_printer.apply(this, arguments); }
            },
            "setRequestFilter": {
              "value": function () { return this.set_request_filter.apply(this, arguments); }
            },
            "setResponseFilter": {
              "value": function () { return this.set_response_filter.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Message": {
          "prototype": {
            "addHeaderHandler": {
              "value": function () { return this.add_header_handler.apply(this, arguments); }
            },
            "addStatusCodeHandler": {
              "value": function () { return this.add_status_code_handler.apply(this, arguments); }
            },
            "contentSniffed": {
              "value": function () { return this.content_sniffed.apply(this, arguments); }
            },
            "disableFeature": {
              "value": function () { return this.disable_feature.apply(this, arguments); }
            },
            "getAddress": {
              "value": function () { return this.get_address.apply(this, arguments); }
            },
            "getFirstParty": {
              "value": function () { return this.get_first_party.apply(this, arguments); }
            },
            "getFlags": {
              "value": function () { return this.get_flags.apply(this, arguments); }
            },
            "getHttpVersion": {
              "value": function () { return this.get_http_version.apply(this, arguments); }
            },
            "getHttpsStatus": {
              "value": function () { return this.get_https_status.apply(this, arguments); }
            },
            "getPriority": {
              "value": function () { return this.get_priority.apply(this, arguments); }
            },
            "getSoupRequest": {
              "value": function () { return this.get_soup_request.apply(this, arguments); }
            },
            "getUri": {
              "value": function () { return this.get_uri.apply(this, arguments); }
            },
            "gotBody": {
              "value": function () { return this.got_body.apply(this, arguments); }
            },
            "gotChunk": {
              "value": function () { return this.got_chunk.apply(this, arguments); }
            },
            "gotHeaders": {
              "value": function () { return this.got_headers.apply(this, arguments); }
            },
            "gotInformational": {
              "value": function () { return this.got_informational.apply(this, arguments); }
            },
            "isKeepalive": {
              "value": function () { return this.is_keepalive.apply(this, arguments); }
            },
            "setChunkAllocator": {
              "value": function () { return this.set_chunk_allocator.apply(this, arguments); }
            },
            "setFirstParty": {
              "value": function () { return this.set_first_party.apply(this, arguments); }
            },
            "setFlags": {
              "value": function () { return this.set_flags.apply(this, arguments); }
            },
            "setHttpVersion": {
              "value": function () { return this.set_http_version.apply(this, arguments); }
            },
            "setPriority": {
              "value": function () { return this.set_priority.apply(this, arguments); }
            },
            "setRedirect": {
              "value": function () { return this.set_redirect.apply(this, arguments); }
            },
            "setRequest": {
              "value": function () { return this.set_request.apply(this, arguments); }
            },
            "setResponse": {
              "value": function () { return this.set_response.apply(this, arguments); }
            },
            "setStatus": {
              "value": function () { return this.set_status.apply(this, arguments); }
            },
            "setStatusFull": {
              "value": function () { return this.set_status_full.apply(this, arguments); }
            },
            "setUri": {
              "value": function () { return this.set_uri.apply(this, arguments); }
            },
            "wroteBody": {
              "value": function () { return this.wrote_body.apply(this, arguments); }
            },
            "wroteBodyData": {
              "value": function () { return this.wrote_body_data.apply(this, arguments); }
            },
            "wroteChunk": {
              "value": function () { return this.wrote_chunk.apply(this, arguments); }
            },
            "wroteHeaders": {
              "value": function () { return this.wrote_headers.apply(this, arguments); }
            },
            "wroteInformational": {
              "value": function () { return this.wrote_informational.apply(this, arguments); }
            },
            "firstParty": {
              "get": function () { return this.first_party; },
              "set": function (value) { this.first_party = value; }
            },
            "httpVersion": {
              "get": function () { return this.http_version; },
              "set": function (value) { this.http_version = value; }
            },
            "reasonPhrase": {
              "get": function () { return this.reason_phrase; },
              "set": function (value) { this.reason_phrase = value; }
            },
            "requestBody": {
              "get": function () { return this.request_body; },
              "set": function (value) { this.request_body = value; }
            },
            "requestBodyData": {
              "get": function () { return this.request_body_data; },
              "set": function (value) { this.request_body_data = value; }
            },
            "requestHeaders": {
              "get": function () { return this.request_headers; },
              "set": function (value) { this.request_headers = value; }
            },
            "responseBody": {
              "get": function () { return this.response_body; },
              "set": function (value) { this.response_body = value; }
            },
            "responseBodyData": {
              "get": function () { return this.response_body_data; },
              "set": function (value) { this.response_body_data = value; }
            },
            "responseHeaders": {
              "get": function () { return this.response_headers; },
              "set": function (value) { this.response_headers = value; }
            },
            "serverSide": {
              "get": function () { return this.server_side; },
              "set": function (value) { this.server_side = value; }
            },
            "statusCode": {
              "get": function () { return this.status_code; },
              "set": function (value) { this.status_code = value; }
            },
            "tlsCertificate": {
              "get": function () { return this.tls_certificate; },
              "set": function (value) { this.tls_certificate = value; }
            },
            "tlsErrors": {
              "get": function () { return this.tls_errors; },
              "set": function (value) { this.tls_errors = value; }
            }
          },
          "static": {}
        },
        "MultipartInputStream": {
          "prototype": {
            "getHeaders": {
              "value": function () { return this.get_headers.apply(this, arguments); }
            },
            "nextPart": {
              "value": function () { return this.next_part.apply(this, arguments); }
            },
            "nextPartAsync": {
              "value": function () { return this.next_part_async.apply(this, arguments); }
            },
            "nextPartFinish": {
              "value": function () { return this.next_part_finish.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "ProxyResolverDefault": {
          "prototype": {
            "gproxyResolver": {
              "get": function () { return this.gproxy_resolver; },
              "set": function (value) { this.gproxy_resolver = value; }
            }
          },
          "static": {}
        },
        "Request": {
          "prototype": {
            "getContentLength": {
              "value": function () { return this.get_content_length.apply(this, arguments); }
            },
            "getContentType": {
              "value": function () { return this.get_content_type.apply(this, arguments); }
            },
            "getSession": {
              "value": function () { return this.get_session.apply(this, arguments); }
            },
            "getUri": {
              "value": function () { return this.get_uri.apply(this, arguments); }
            },
            "sendAsync": {
              "value": function () { return this.send_async.apply(this, arguments); }
            },
            "sendFinish": {
              "value": function () { return this.send_finish.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "RequestData": {
          "prototype": {},
          "static": {}
        },
        "RequestFile": {
          "prototype": {
            "getFile": {
              "value": function () { return this.get_file.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "RequestHTTP": {
          "prototype": {
            "getMessage": {
              "value": function () { return this.get_message.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Requester": {
          "prototype": {
            "requestUri": {
              "value": function () { return this.request_uri.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Server": {
          "prototype": {
            "acceptIostream": {
              "value": function () { return this.accept_iostream.apply(this, arguments); }
            },
            "addAuthDomain": {
              "value": function () { return this.add_auth_domain.apply(this, arguments); }
            },
            "addEarlyHandler": {
              "value": function () { return this.add_early_handler.apply(this, arguments); }
            },
            "addHandler": {
              "value": function () { return this.add_handler.apply(this, arguments); }
            },
            "addWebsocketHandler": {
              "value": function () { return this.add_websocket_handler.apply(this, arguments); }
            },
            "getAsyncContext": {
              "value": function () { return this.get_async_context.apply(this, arguments); }
            },
            "getListener": {
              "value": function () { return this.get_listener.apply(this, arguments); }
            },
            "getListeners": {
              "value": function () { return this.get_listeners.apply(this, arguments); }
            },
            "getPort": {
              "value": function () { return this.get_port.apply(this, arguments); }
            },
            "getUris": {
              "value": function () { return this.get_uris.apply(this, arguments); }
            },
            "isHttps": {
              "value": function () { return this.is_https.apply(this, arguments); }
            },
            "listenAll": {
              "value": function () { return this.listen_all.apply(this, arguments); }
            },
            "listenFd": {
              "value": function () { return this.listen_fd.apply(this, arguments); }
            },
            "listenLocal": {
              "value": function () { return this.listen_local.apply(this, arguments); }
            },
            "listenSocket": {
              "value": function () { return this.listen_socket.apply(this, arguments); }
            },
            "pauseMessage": {
              "value": function () { return this.pause_message.apply(this, arguments); }
            },
            "removeAuthDomain": {
              "value": function () { return this.remove_auth_domain.apply(this, arguments); }
            },
            "removeHandler": {
              "value": function () { return this.remove_handler.apply(this, arguments); }
            },
            "runAsync": {
              "value": function () { return this.run_async.apply(this, arguments); }
            },
            "setSslCertFile": {
              "value": function () { return this.set_ssl_cert_file.apply(this, arguments); }
            },
            "unpauseMessage": {
              "value": function () { return this.unpause_message.apply(this, arguments); }
            },
            "asyncContext": {
              "get": function () { return this.async_context; },
              "set": function (value) { this.async_context = value; }
            },
            "httpAliases": {
              "get": function () { return this.http_aliases; },
              "set": function (value) { this.http_aliases = value; }
            },
            "httpsAliases": {
              "get": function () { return this.https_aliases; },
              "set": function (value) { this.https_aliases = value; }
            },
            "rawPaths": {
              "get": function () { return this.raw_paths; },
              "set": function (value) { this.raw_paths = value; }
            },
            "serverHeader": {
              "get": function () { return this.server_header; },
              "set": function (value) { this.server_header = value; }
            },
            "sslCertFile": {
              "get": function () { return this.ssl_cert_file; },
              "set": function (value) { this.ssl_cert_file = value; }
            },
            "sslKeyFile": {
              "get": function () { return this.ssl_key_file; },
              "set": function (value) { this.ssl_key_file = value; }
            },
            "tlsCertificate": {
              "get": function () { return this.tls_certificate; },
              "set": function (value) { this.tls_certificate = value; }
            }
          },
          "static": {}
        },
        "Session": {
          "prototype": {
            "addFeature": {
              "get": function () { return this.add_feature; },
              "set": function (value) { this.add_feature = value; }
            },
            "addFeatureByType": {
              "get": function () { return this.add_feature_by_type; },
              "set": function (value) { this.add_feature_by_type = value; }
            },
            "cancelMessage": {
              "value": function () { return this.cancel_message.apply(this, arguments); }
            },
            "getAsyncContext": {
              "value": function () { return this.get_async_context.apply(this, arguments); }
            },
            "getFeature": {
              "value": function () { return this.get_feature.apply(this, arguments); }
            },
            "getFeatureForMessage": {
              "value": function () { return this.get_feature_for_message.apply(this, arguments); }
            },
            "getFeatures": {
              "value": function () { return this.get_features.apply(this, arguments); }
            },
            "hasFeature": {
              "value": function () { return this.has_feature.apply(this, arguments); }
            },
            "pauseMessage": {
              "value": function () { return this.pause_message.apply(this, arguments); }
            },
            "prefetchDns": {
              "value": function () { return this.prefetch_dns.apply(this, arguments); }
            },
            "prepareForUri": {
              "value": function () { return this.prepare_for_uri.apply(this, arguments); }
            },
            "queueMessage": {
              "value": function () { return this.queue_message.apply(this, arguments); }
            },
            "redirectMessage": {
              "value": function () { return this.redirect_message.apply(this, arguments); }
            },
            "removeFeature": {
              "value": function () { return this.remove_feature.apply(this, arguments); }
            },
            "removeFeatureByType": {
              "get": function () { return this.remove_feature_by_type; },
              "set": function (value) { this.remove_feature_by_type = value; }
            },
            "requestHttp": {
              "value": function () { return this.request_http.apply(this, arguments); }
            },
            "requestHttpUri": {
              "value": function () { return this.request_http_uri.apply(this, arguments); }
            },
            "requestUri": {
              "value": function () { return this.request_uri.apply(this, arguments); }
            },
            "requeueMessage": {
              "value": function () { return this.requeue_message.apply(this, arguments); }
            },
            "sendAsync": {
              "value": function () { return this.send_async.apply(this, arguments); }
            },
            "sendFinish": {
              "value": function () { return this.send_finish.apply(this, arguments); }
            },
            "sendMessage": {
              "value": function () { return this.send_message.apply(this, arguments); }
            },
            "stealConnection": {
              "value": function () { return this.steal_connection.apply(this, arguments); }
            },
            "unpauseMessage": {
              "value": function () { return this.unpause_message.apply(this, arguments); }
            },
            "websocketConnectAsync": {
              "value": function () { return this.websocket_connect_async.apply(this, arguments); }
            },
            "websocketConnectFinish": {
              "value": function () { return this.websocket_connect_finish.apply(this, arguments); }
            },
            "wouldRedirect": {
              "value": function () { return this.would_redirect.apply(this, arguments); }
            },
            "acceptLanguage": {
              "get": function () { return this.accept_language; },
              "set": function (value) { this.accept_language = value; }
            },
            "acceptLanguageAuto": {
              "get": function () { return this.accept_language_auto; },
              "set": function (value) { this.accept_language_auto = value; }
            },
            "asyncContext": {
              "get": function () { return this.async_context; },
              "set": function (value) { this.async_context = value; }
            },
            "httpAliases": {
              "get": function () { return this.http_aliases; },
              "set": function (value) { this.http_aliases = value; }
            },
            "httpsAliases": {
              "get": function () { return this.https_aliases; },
              "set": function (value) { this.https_aliases = value; }
            },
            "idleTimeout": {
              "get": function () { return this.idle_timeout; },
              "set": function (value) { this.idle_timeout = value; }
            },
            "localAddress": {
              "get": function () { return this.local_address; },
              "set": function (value) { this.local_address = value; }
            },
            "maxConns": {
              "get": function () { return this.max_conns; },
              "set": function (value) { this.max_conns = value; }
            },
            "maxConnsPerHost": {
              "get": function () { return this.max_conns_per_host; },
              "set": function (value) { this.max_conns_per_host = value; }
            },
            "proxyResolver": {
              "get": function () { return this.proxy_resolver; },
              "set": function (value) { this.proxy_resolver = value; }
            },
            "proxyUri": {
              "get": function () { return this.proxy_uri; },
              "set": function (value) { this.proxy_uri = value; }
            },
            "sslCaFile": {
              "get": function () { return this.ssl_ca_file; },
              "set": function (value) { this.ssl_ca_file = value; }
            },
            "sslStrict": {
              "get": function () { return this.ssl_strict; },
              "set": function (value) { this.ssl_strict = value; }
            },
            "sslUseSystemCaFile": {
              "get": function () { return this.ssl_use_system_ca_file; },
              "set": function (value) { this.ssl_use_system_ca_file = value; }
            },
            "tlsDatabase": {
              "get": function () { return this.tls_database; },
              "set": function (value) { this.tls_database = value; }
            },
            "tlsInteraction": {
              "get": function () { return this.tls_interaction; },
              "set": function (value) { this.tls_interaction = value; }
            },
            "useNtlm": {
              "get": function () { return this.use_ntlm; },
              "set": function (value) { this.use_ntlm = value; }
            },
            "useThreadContext": {
              "get": function () { return this.use_thread_context; },
              "set": function (value) { this.use_thread_context = value; }
            },
            "userAgent": {
              "get": function () { return this.user_agent; },
              "set": function (value) { this.user_agent = value; }
            }
          },
          "static": {}
        },
        "SessionAsync": {
          "prototype": {},
          "static": {}
        },
        "SessionSync": {
          "prototype": {},
          "static": {}
        },
        "Socket": {
          "prototype": {
            "connectAsync": {
              "value": function () { return this.connect_async.apply(this, arguments); }
            },
            "connectSync": {
              "value": function () { return this.connect_sync.apply(this, arguments); }
            },
            "getFd": {
              "value": function () { return this.get_fd.apply(this, arguments); }
            },
            "getLocalAddress": {
              "value": function () { return this.get_local_address.apply(this, arguments); }
            },
            "getRemoteAddress": {
              "value": function () { return this.get_remote_address.apply(this, arguments); }
            },
            "isConnected": {
              "value": function () { return this.is_connected.apply(this, arguments); }
            },
            "isSsl": {
              "value": function () { return this.is_ssl.apply(this, arguments); }
            },
            "readUntil": {
              "value": function () { return this.read_until.apply(this, arguments); }
            },
            "startProxySsl": {
              "value": function () { return this.start_proxy_ssl.apply(this, arguments); }
            },
            "startSsl": {
              "value": function () { return this.start_ssl.apply(this, arguments); }
            },
            "asyncContext": {
              "get": function () { return this.async_context; },
              "set": function (value) { this.async_context = value; }
            },
            "ipv6Only": {
              "get": function () { return this.ipv6_only; },
              "set": function (value) { this.ipv6_only = value; }
            },
            "isServer": {
              "get": function () { return this.is_server; },
              "set": function (value) { this.is_server = value; }
            },
            "localAddress": {
              "get": function () { return this.local_address; },
              "set": function (value) { this.local_address = value; }
            },
            "nonBlocking": {
              "get": function () { return this.non_blocking; },
              "set": function (value) { this.non_blocking = value; }
            },
            "remoteAddress": {
              "get": function () { return this.remote_address; },
              "set": function (value) { this.remote_address = value; }
            },
            "socketProperties": {
              "get": function () { return this.socket_properties; },
              "set": function (value) { this.socket_properties = value; }
            },
            "sslCreds": {
              "get": function () { return this.ssl_creds; },
              "set": function (value) { this.ssl_creds = value; }
            },
            "sslFallback": {
              "get": function () { return this.ssl_fallback; },
              "set": function (value) { this.ssl_fallback = value; }
            },
            "sslStrict": {
              "get": function () { return this.ssl_strict; },
              "set": function (value) { this.ssl_strict = value; }
            },
            "tlsCertificate": {
              "get": function () { return this.tls_certificate; },
              "set": function (value) { this.tls_certificate = value; }
            },
            "tlsErrors": {
              "get": function () { return this.tls_errors; },
              "set": function (value) { this.tls_errors = value; }
            },
            "trustedCertificate": {
              "get": function () { return this.trusted_certificate; },
              "set": function (value) { this.trusted_certificate = value; }
            },
            "useThreadContext": {
              "get": function () { return this.use_thread_context; },
              "set": function (value) { this.use_thread_context = value; }
            }
          },
          "static": {}
        },
        "WebsocketConnection": {
          "prototype": {
            "getCloseCode": {
              "value": function () { return this.get_close_code.apply(this, arguments); }
            },
            "getCloseData": {
              "value": function () { return this.get_close_data.apply(this, arguments); }
            },
            "getConnectionType": {
              "value": function () { return this.get_connection_type.apply(this, arguments); }
            },
            "getIoStream": {
              "value": function () { return this.get_io_stream.apply(this, arguments); }
            },
            "getOrigin": {
              "value": function () { return this.get_origin.apply(this, arguments); }
            },
            "getProtocol": {
              "value": function () { return this.get_protocol.apply(this, arguments); }
            },
            "getState": {
              "value": function () { return this.get_state.apply(this, arguments); }
            },
            "getUri": {
              "value": function () { return this.get_uri.apply(this, arguments); }
            },
            "sendBinary": {
              "value": function () { return this.send_binary.apply(this, arguments); }
            },
            "sendText": {
              "value": function () { return this.send_text.apply(this, arguments); }
            },
            "connectionType": {
              "get": function () { return this.connection_type; },
              "set": function (value) { this.connection_type = value; }
            },
            "ioStream": {
              "get": function () { return this.io_stream; },
              "set": function (value) { this.io_stream = value; }
            }
          },
          "static": {}
        }
      },
      "static": {
        "addCompletion": {
          "value": function () { return this.add_completion.apply(this, arguments); }
        },
        "addIdle": {
          "value": function () { return this.add_idle.apply(this, arguments); }
        },
        "addIoWatch": {
          "value": function () { return this.add_io_watch.apply(this, arguments); }
        },
        "addTimeout": {
          "value": function () { return this.add_timeout.apply(this, arguments); }
        },
        "cookieParse": {
          "value": function () { return this.cookie_parse.apply(this, arguments); }
        },
        "cookiesFree": {
          "value": function () { return this.cookies_free.apply(this, arguments); }
        },
        "cookiesFromRequest": {
          "value": function () { return this.cookies_from_request.apply(this, arguments); }
        },
        "cookiesFromResponse": {
          "value": function () { return this.cookies_from_response.apply(this, arguments); }
        },
        "cookiesToCookieHeader": {
          "value": function () { return this.cookies_to_cookie_header.apply(this, arguments); }
        },
        "cookiesToRequest": {
          "value": function () { return this.cookies_to_request.apply(this, arguments); }
        },
        "cookiesToResponse": {
          "value": function () { return this.cookies_to_response.apply(this, arguments); }
        },
        "formDecode": {
          "value": function () { return this.form_decode.apply(this, arguments); }
        },
        "formDecodeMultipart": {
          "value": function () { return this.form_decode_multipart.apply(this, arguments); }
        },
        "formEncode": {
          "value": function () { return this.form_encode.apply(this, arguments); }
        },
        "formEncodeDatalist": {
          "value": function () { return this.form_encode_datalist.apply(this, arguments); }
        },
        "formEncodeHash": {
          "value": function () { return this.form_encode_hash.apply(this, arguments); }
        },
        "formEncodeValist": {
          "value": function () { return this.form_encode_valist.apply(this, arguments); }
        },
        "formRequestNew": {
          "value": function () { return this.form_request_new.apply(this, arguments); }
        },
        "formRequestNewFromDatalist": {
          "value": function () { return this.form_request_new_from_datalist.apply(this, arguments); }
        },
        "formRequestNewFromHash": {
          "value": function () { return this.form_request_new_from_hash.apply(this, arguments); }
        },
        "formRequestNewFromMultipart": {
          "value": function () { return this.form_request_new_from_multipart.apply(this, arguments); }
        },
        "headerContains": {
          "value": function () { return this.header_contains.apply(this, arguments); }
        },
        "headerFreeList": {
          "value": function () { return this.header_free_list.apply(this, arguments); }
        },
        "headerFreeParamList": {
          "value": function () { return this.header_free_param_list.apply(this, arguments); }
        },
        "headerGStringAppendParam": {
          "value": function () { return this.header_g_string_append_param.apply(this, arguments); }
        },
        "headerGStringAppendParamQuoted": {
          "value": function () { return this.header_g_string_append_param_quoted.apply(this, arguments); }
        },
        "headerParseList": {
          "value": function () { return this.header_parse_list.apply(this, arguments); }
        },
        "headerParseParamList": {
          "value": function () { return this.header_parse_param_list.apply(this, arguments); }
        },
        "headerParseQualityList": {
          "value": function () { return this.header_parse_quality_list.apply(this, arguments); }
        },
        "headerParseSemiParamList": {
          "value": function () { return this.header_parse_semi_param_list.apply(this, arguments); }
        },
        "headersParse": {
          "value": function () { return this.headers_parse.apply(this, arguments); }
        },
        "headersParseRequest": {
          "value": function () { return this.headers_parse_request.apply(this, arguments); }
        },
        "headersParseResponse": {
          "value": function () { return this.headers_parse_response.apply(this, arguments); }
        },
        "headersParseStatusLine": {
          "value": function () { return this.headers_parse_status_line.apply(this, arguments); }
        },
        "httpErrorQuark": {
          "value": function () { return this.http_error_quark.apply(this, arguments); }
        },
        "messageHeadersIterInit": {
          "value": function () { return this.message_headers_iter_init.apply(this, arguments); }
        },
        "requestErrorQuark": {
          "value": function () { return this.request_error_quark.apply(this, arguments); }
        },
        "requesterErrorQuark": {
          "value": function () { return this.requester_error_quark.apply(this, arguments); }
        },
        "statusGetPhrase": {
          "value": function () { return this.status_get_phrase.apply(this, arguments); }
        },
        "statusProxify": {
          "value": function () { return this.status_proxify.apply(this, arguments); }
        },
        "strCaseEqual": {
          "value": function () { return this.str_case_equal.apply(this, arguments); }
        },
        "strCaseHash": {
          "value": function () { return this.str_case_hash.apply(this, arguments); }
        },
        "tldDomainIsPublicSuffix": {
          "value": function () { return this.tld_domain_is_public_suffix.apply(this, arguments); }
        },
        "tldErrorQuark": {
          "value": function () { return this.tld_error_quark.apply(this, arguments); }
        },
        "tldGetBaseDomain": {
          "value": function () { return this.tld_get_base_domain.apply(this, arguments); }
        },
        "uriDecode": {
          "value": function () { return this.uri_decode.apply(this, arguments); }
        },
        "uriEncode": {
          "value": function () { return this.uri_encode.apply(this, arguments); }
        },
        "uriNormalize": {
          "value": function () { return this.uri_normalize.apply(this, arguments); }
        },
        "valueArrayAppend": {
          "value": function () { return this.value_array_append.apply(this, arguments); }
        },
        "valueArrayAppendVals": {
          "value": function () { return this.value_array_append_vals.apply(this, arguments); }
        },
        "valueArrayFromArgs": {
          "value": function () { return this.value_array_from_args.apply(this, arguments); }
        },
        "valueArrayGetNth": {
          "value": function () { return this.value_array_get_nth.apply(this, arguments); }
        },
        "valueArrayInsert": {
          "value": function () { return this.value_array_insert.apply(this, arguments); }
        },
        "valueArrayNew": {
          "value": function () { return this.value_array_new.apply(this, arguments); }
        },
        "valueArrayNewWithVals": {
          "value": function () { return this.value_array_new_with_vals.apply(this, arguments); }
        },
        "valueArrayToArgs": {
          "value": function () { return this.value_array_to_args.apply(this, arguments); }
        },
        "valueHashInsert": {
          "value": function () { return this.value_hash_insert.apply(this, arguments); }
        },
        "valueHashInsertVals": {
          "value": function () { return this.value_hash_insert_vals.apply(this, arguments); }
        },
        "valueHashInsertValue": {
          "value": function () { return this.value_hash_insert_value.apply(this, arguments); }
        },
        "valueHashLookup": {
          "value": function () { return this.value_hash_lookup.apply(this, arguments); }
        },
        "valueHashLookupVals": {
          "value": function () { return this.value_hash_lookup_vals.apply(this, arguments); }
        },
        "valueHashNew": {
          "value": function () { return this.value_hash_new.apply(this, arguments); }
        },
        "valueHashNewWithVals": {
          "value": function () { return this.value_hash_new_with_vals.apply(this, arguments); }
        },
        "websocketClientPrepareHandshake": {
          "value": function () { return this.websocket_client_prepare_handshake.apply(this, arguments); }
        },
        "websocketClientVerifyHandshake": {
          "value": function () { return this.websocket_client_verify_handshake.apply(this, arguments); }
        },
        "websocketErrorGetQuark": {
          "value": function () { return this.websocket_error_get_quark.apply(this, arguments); }
        },
        "websocketServerCheckHandshake": {
          "value": function () { return this.websocket_server_check_handshake.apply(this, arguments); }
        },
        "websocketServerProcessHandshake": {
          "value": function () { return this.websocket_server_process_handshake.apply(this, arguments); }
        },
        "xmlrpcBuildFault": {
          "value": function () { return this.xmlrpc_build_fault.apply(this, arguments); }
        },
        "xmlrpcBuildMethodCall": {
          "value": function () { return this.xmlrpc_build_method_call.apply(this, arguments); }
        },
        "xmlrpcBuildMethodResponse": {
          "value": function () { return this.xmlrpc_build_method_response.apply(this, arguments); }
        },
        "xmlrpcBuildRequest": {
          "value": function () { return this.xmlrpc_build_request.apply(this, arguments); }
        },
        "xmlrpcBuildResponse": {
          "value": function () { return this.xmlrpc_build_response.apply(this, arguments); }
        },
        "xmlrpcErrorQuark": {
          "value": function () { return this.xmlrpc_error_quark.apply(this, arguments); }
        },
        "xmlrpcExtractMethodCall": {
          "value": function () { return this.xmlrpc_extract_method_call.apply(this, arguments); }
        },
        "xmlrpcExtractMethodResponse": {
          "value": function () { return this.xmlrpc_extract_method_response.apply(this, arguments); }
        },
        "xmlrpcFaultQuark": {
          "value": function () { return this.xmlrpc_fault_quark.apply(this, arguments); }
        },
        "xmlrpcMessageNew": {
          "value": function () { return this.xmlrpc_message_new.apply(this, arguments); }
        },
        "xmlrpcMessageSetFault": {
          "value": function () { return this.xmlrpc_message_set_fault.apply(this, arguments); }
        },
        "xmlrpcMessageSetResponse": {
          "value": function () { return this.xmlrpc_message_set_response.apply(this, arguments); }
        },
        "xmlrpcParseMethodCall": {
          "value": function () { return this.xmlrpc_parse_method_call.apply(this, arguments); }
        },
        "xmlrpcParseMethodResponse": {
          "value": function () { return this.xmlrpc_parse_method_response.apply(this, arguments); }
        },
        "xmlrpcParseRequest": {
          "value": function () { return this.xmlrpc_parse_request.apply(this, arguments); }
        },
        "xmlrpcParseResponse": {
          "value": function () { return this.xmlrpc_parse_response.apply(this, arguments); }
        },
        "xmlrpcRequestNew": {
          "value": function () { return this.xmlrpc_request_new.apply(this, arguments); }
        },
        "xmlrpcSetFault": {
          "value": function () { return this.xmlrpc_set_fault.apply(this, arguments); }
        },
        "xmlrpcSetResponse": {
          "value": function () { return this.xmlrpc_set_response.apply(this, arguments); }
        },
        "xmlrpcVariantGetDatetime": {
          "value": function () { return this.xmlrpc_variant_get_datetime.apply(this, arguments); }
        },
        "xmlrpcVariantNewDatetime": {
          "value": function () { return this.xmlrpc_variant_new_datetime.apply(this, arguments); }
        }
      }
    },
    "SoupGNOME": {
      "class": {
        "CookieJarSqlite": {
          "prototype": {},
          "static": {}
        },
        "PasswordManagerGNOME": {
          "prototype": {},
          "static": {}
        },
        "ProxyResolverGNOME": {
          "prototype": {},
          "static": {}
        }
      },
      "static": {
        "gnomeFeatures226GetType": {
          "value": function () { return this.gnome_features_2_26_get_type.apply(this, arguments); }
        }
      }
    },
    "TelepathyFarstream": {
      "class": {
        "Channel": {
          "prototype": {
            "busMessage": {
              "value": function () { return this.bus_message.apply(this, arguments); }
            },
            "fsConferences": {
              "get": function () { return this.fs_conferences; },
              "set": function (value) { this.fs_conferences = value; }
            },
            "objectPath": {
              "get": function () { return this.object_path; },
              "set": function (value) { this.object_path = value; }
            }
          },
          "static": {
            "newAsync": {
              "value": function () { return this.new_async.apply(this, arguments); }
            }
          }
        },
        "Content": {
          "prototype": {
            "errorLiteral": {
              "value": function () { return this.error_literal.apply(this, arguments); }
            },
            "iterateSrcPads": {
              "value": function () { return this.iterate_src_pads.apply(this, arguments); }
            },
            "receivingFailed": {
              "value": function () { return this.receiving_failed.apply(this, arguments); }
            },
            "receivingFailedLiteral": {
              "value": function () { return this.receiving_failed_literal.apply(this, arguments); }
            },
            "sendingFailed": {
              "value": function () { return this.sending_failed.apply(this, arguments); }
            },
            "sendingFailedLiteral": {
              "value": function () { return this.sending_failed_literal.apply(this, arguments); }
            },
            "fsConference": {
              "get": function () { return this.fs_conference; },
              "set": function (value) { this.fs_conference = value; }
            },
            "fsSession": {
              "get": function () { return this.fs_session; },
              "set": function (value) { this.fs_session = value; }
            },
            "mediaType": {
              "get": function () { return this.media_type; },
              "set": function (value) { this.media_type = value; }
            },
            "objectPath": {
              "get": function () { return this.object_path; },
              "set": function (value) { this.object_path = value; }
            },
            "sinkPad": {
              "get": function () { return this.sink_pad; },
              "set": function (value) { this.sink_pad = value; }
            },
            "tfChannel": {
              "get": function () { return this.tf_channel; },
              "set": function (value) { this.tf_channel = value; }
            }
          },
          "static": {}
        }
      },
      "static": {}
    },
    "TelepathyGLib": {
      "class": {
        "Account": {
          "prototype": {
            "associatedWithUriScheme": {
              "value": function () { return this.associated_with_uri_scheme.apply(this, arguments); }
            },
            "bindConnectionStatusToProperty": {
              "value": function () { return this.bind_connection_status_to_property.apply(this, arguments); }
            },
            "dupDetailedErrorVardict": {
              "value": function () { return this.dup_detailed_error_vardict.apply(this, arguments); }
            },
            "dupParametersVardict": {
              "value": function () { return this.dup_parameters_vardict.apply(this, arguments); }
            },
            "dupStorageIdentifierVariant": {
              "value": function () { return this.dup_storage_identifier_variant.apply(this, arguments); }
            },
            "dupStorageSpecificInformationVardictAsync": {
              "value": function () { return this.dup_storage_specific_information_vardict_async.apply(this, arguments); }
            },
            "dupStorageSpecificInformationVardictFinish": {
              "value": function () { return this.dup_storage_specific_information_vardict_finish.apply(this, arguments); }
            },
            "ensureConnection": {
              "value": function () { return this.ensure_connection.apply(this, arguments); }
            },
            "getAutomaticPresence": {
              "value": function () { return this.get_automatic_presence.apply(this, arguments); }
            },
            "getAvatarAsync": {
              "value": function () { return this.get_avatar_async.apply(this, arguments); }
            },
            "getAvatarFinish": {
              "value": function () { return this.get_avatar_finish.apply(this, arguments); }
            },
            "getChangingPresence": {
              "value": function () { return this.get_changing_presence.apply(this, arguments); }
            },
            "getCmName": {
              "value": function () { return this.get_cm_name.apply(this, arguments); }
            },
            "getConnectAutomatically": {
              "value": function () { return this.get_connect_automatically.apply(this, arguments); }
            },
            "getConnection": {
              "value": function () { return this.get_connection.apply(this, arguments); }
            },
            "getConnectionManager": {
              "value": function () { return this.get_connection_manager.apply(this, arguments); }
            },
            "getConnectionStatus": {
              "value": function () { return this.get_connection_status.apply(this, arguments); }
            },
            "getCurrentPresence": {
              "value": function () { return this.get_current_presence.apply(this, arguments); }
            },
            "getDetailedError": {
              "value": function () { return this.get_detailed_error.apply(this, arguments); }
            },
            "getDisplayName": {
              "value": function () { return this.get_display_name.apply(this, arguments); }
            },
            "getHasBeenOnline": {
              "value": function () { return this.get_has_been_online.apply(this, arguments); }
            },
            "getIconName": {
              "value": function () { return this.get_icon_name.apply(this, arguments); }
            },
            "getNickname": {
              "value": function () { return this.get_nickname.apply(this, arguments); }
            },
            "getNormalizedName": {
              "value": function () { return this.get_normalized_name.apply(this, arguments); }
            },
            "getParameters": {
              "value": function () { return this.get_parameters.apply(this, arguments); }
            },
            "getPathSuffix": {
              "value": function () { return this.get_path_suffix.apply(this, arguments); }
            },
            "getProtocol": {
              "value": function () { return this.get_protocol.apply(this, arguments); }
            },
            "getProtocolName": {
              "value": function () { return this.get_protocol_name.apply(this, arguments); }
            },
            "getRequestedPresence": {
              "value": function () { return this.get_requested_presence.apply(this, arguments); }
            },
            "getService": {
              "value": function () { return this.get_service.apply(this, arguments); }
            },
            "getStorageIdentifier": {
              "value": function () { return this.get_storage_identifier.apply(this, arguments); }
            },
            "getStorageProvider": {
              "value": function () { return this.get_storage_provider.apply(this, arguments); }
            },
            "getStorageRestrictions": {
              "value": function () { return this.get_storage_restrictions.apply(this, arguments); }
            },
            "getStorageSpecificInformationAsync": {
              "value": function () { return this.get_storage_specific_information_async.apply(this, arguments); }
            },
            "getStorageSpecificInformationFinish": {
              "value": function () { return this.get_storage_specific_information_finish.apply(this, arguments); }
            },
            "getSupersedes": {
              "value": function () { return this.get_supersedes.apply(this, arguments); }
            },
            "getUriSchemes": {
              "value": function () { return this.get_uri_schemes.apply(this, arguments); }
            },
            "isEnabled": {
              "value": function () { return this.is_enabled.apply(this, arguments); }
            },
            "isPrepared": {
              "value": function () { return this.is_prepared.apply(this, arguments); }
            },
            "isValid": {
              "value": function () { return this.is_valid.apply(this, arguments); }
            },
            "prepareAsync": {
              "value": function () { return this.prepare_async.apply(this, arguments); }
            },
            "prepareFinish": {
              "value": function () { return this.prepare_finish.apply(this, arguments); }
            },
            "reconnectAsync": {
              "value": function () { return this.reconnect_async.apply(this, arguments); }
            },
            "reconnectFinish": {
              "value": function () { return this.reconnect_finish.apply(this, arguments); }
            },
            "removeAsync": {
              "value": function () { return this.remove_async.apply(this, arguments); }
            },
            "removeFinish": {
              "value": function () { return this.remove_finish.apply(this, arguments); }
            },
            "requestPresenceAsync": {
              "value": function () { return this.request_presence_async.apply(this, arguments); }
            },
            "requestPresenceFinish": {
              "value": function () { return this.request_presence_finish.apply(this, arguments); }
            },
            "setAutomaticPresenceAsync": {
              "value": function () { return this.set_automatic_presence_async.apply(this, arguments); }
            },
            "setAutomaticPresenceFinish": {
              "value": function () { return this.set_automatic_presence_finish.apply(this, arguments); }
            },
            "setAvatarAsync": {
              "value": function () { return this.set_avatar_async.apply(this, arguments); }
            },
            "setAvatarFinish": {
              "value": function () { return this.set_avatar_finish.apply(this, arguments); }
            },
            "setConnectAutomaticallyAsync": {
              "value": function () { return this.set_connect_automatically_async.apply(this, arguments); }
            },
            "setConnectAutomaticallyFinish": {
              "value": function () { return this.set_connect_automatically_finish.apply(this, arguments); }
            },
            "setDisplayNameAsync": {
              "value": function () { return this.set_display_name_async.apply(this, arguments); }
            },
            "setDisplayNameFinish": {
              "value": function () { return this.set_display_name_finish.apply(this, arguments); }
            },
            "setEnabledAsync": {
              "value": function () { return this.set_enabled_async.apply(this, arguments); }
            },
            "setEnabledFinish": {
              "value": function () { return this.set_enabled_finish.apply(this, arguments); }
            },
            "setIconNameAsync": {
              "value": function () { return this.set_icon_name_async.apply(this, arguments); }
            },
            "setIconNameFinish": {
              "value": function () { return this.set_icon_name_finish.apply(this, arguments); }
            },
            "setNicknameAsync": {
              "value": function () { return this.set_nickname_async.apply(this, arguments); }
            },
            "setNicknameFinish": {
              "value": function () { return this.set_nickname_finish.apply(this, arguments); }
            },
            "setServiceAsync": {
              "value": function () { return this.set_service_async.apply(this, arguments); }
            },
            "setServiceFinish": {
              "value": function () { return this.set_service_finish.apply(this, arguments); }
            },
            "setUriSchemeAssociationAsync": {
              "value": function () { return this.set_uri_scheme_association_async.apply(this, arguments); }
            },
            "setUriSchemeAssociationFinish": {
              "value": function () { return this.set_uri_scheme_association_finish.apply(this, arguments); }
            },
            "updateParametersAsync": {
              "value": function () { return this.update_parameters_async.apply(this, arguments); }
            },
            "updateParametersFinish": {
              "value": function () { return this.update_parameters_finish.apply(this, arguments); }
            },
            "updateParametersVardictAsync": {
              "value": function () { return this.update_parameters_vardict_async.apply(this, arguments); }
            },
            "updateParametersVardictFinish": {
              "value": function () { return this.update_parameters_vardict_finish.apply(this, arguments); }
            },
            "automaticPresenceType": {
              "get": function () { return this.automatic_presence_type; },
              "set": function (value) { this.automatic_presence_type = value; }
            },
            "automaticStatus": {
              "get": function () { return this.automatic_status; },
              "set": function (value) { this.automatic_status = value; }
            },
            "automaticStatusMessage": {
              "get": function () { return this.automatic_status_message; },
              "set": function (value) { this.automatic_status_message = value; }
            },
            "changingPresence": {
              "get": function () { return this.changing_presence; },
              "set": function (value) { this.changing_presence = value; }
            },
            "cmName": {
              "get": function () { return this.cm_name; },
              "set": function (value) { this.cm_name = value; }
            },
            "connectAutomatically": {
              "get": function () { return this.connect_automatically; },
              "set": function (value) { this.connect_automatically = value; }
            },
            "connectionError": {
              "get": function () { return this.connection_error; },
              "set": function (value) { this.connection_error = value; }
            },
            "connectionErrorDetails": {
              "get": function () { return this.connection_error_details; },
              "set": function (value) { this.connection_error_details = value; }
            },
            "connectionManager": {
              "get": function () { return this.connection_manager; },
              "set": function (value) { this.connection_manager = value; }
            },
            "connectionStatus": {
              "get": function () { return this.connection_status; },
              "set": function (value) { this.connection_status = value; }
            },
            "connectionStatusReason": {
              "get": function () { return this.connection_status_reason; },
              "set": function (value) { this.connection_status_reason = value; }
            },
            "currentPresenceType": {
              "get": function () { return this.current_presence_type; },
              "set": function (value) { this.current_presence_type = value; }
            },
            "currentStatus": {
              "get": function () { return this.current_status; },
              "set": function (value) { this.current_status = value; }
            },
            "currentStatusMessage": {
              "get": function () { return this.current_status_message; },
              "set": function (value) { this.current_status_message = value; }
            },
            "displayName": {
              "get": function () { return this.display_name; },
              "set": function (value) { this.display_name = value; }
            },
            "hasBeenOnline": {
              "get": function () { return this.has_been_online; },
              "set": function (value) { this.has_been_online = value; }
            },
            "iconName": {
              "get": function () { return this.icon_name; },
              "set": function (value) { this.icon_name = value; }
            },
            "normalizedName": {
              "get": function () { return this.normalized_name; },
              "set": function (value) { this.normalized_name = value; }
            },
            "protocolName": {
              "get": function () { return this.protocol_name; },
              "set": function (value) { this.protocol_name = value; }
            },
            "requestedPresenceType": {
              "get": function () { return this.requested_presence_type; },
              "set": function (value) { this.requested_presence_type = value; }
            },
            "requestedStatus": {
              "get": function () { return this.requested_status; },
              "set": function (value) { this.requested_status = value; }
            },
            "requestedStatusMessage": {
              "get": function () { return this.requested_status_message; },
              "set": function (value) { this.requested_status_message = value; }
            },
            "storageIdentifier": {
              "get": function () { return this.storage_identifier; },
              "set": function (value) { this.storage_identifier = value; }
            },
            "storageIdentifierVariant": {
              "get": function () { return this.storage_identifier_variant; },
              "set": function (value) { this.storage_identifier_variant = value; }
            },
            "storageProvider": {
              "get": function () { return this.storage_provider; },
              "set": function (value) { this.storage_provider = value; }
            },
            "storageRestrictions": {
              "get": function () { return this.storage_restrictions; },
              "set": function (value) { this.storage_restrictions = value; }
            },
            "uriSchemes": {
              "get": function () { return this.uri_schemes; },
              "set": function (value) { this.uri_schemes = value; }
            }
          },
          "static": {
            "getFeatureQuarkAddressing": {
              "value": function () { return this.get_feature_quark_addressing.apply(this, arguments); }
            },
            "getFeatureQuarkConnection": {
              "value": function () { return this.get_feature_quark_connection.apply(this, arguments); }
            },
            "getFeatureQuarkCore": {
              "value": function () { return this.get_feature_quark_core.apply(this, arguments); }
            },
            "getFeatureQuarkStorage": {
              "value": function () { return this.get_feature_quark_storage.apply(this, arguments); }
            },
            "initKnownInterfaces": {
              "value": function () { return this.init_known_interfaces.apply(this, arguments); }
            },
            "parseObjectPath": {
              "value": function () { return this.parse_object_path.apply(this, arguments); }
            }
          }
        },
        "AccountChannelRequest": {
          "prototype": {
            "createAndHandleChannelAsync": {
              "value": function () { return this.create_and_handle_channel_async.apply(this, arguments); }
            },
            "createAndHandleChannelFinish": {
              "value": function () { return this.create_and_handle_channel_finish.apply(this, arguments); }
            },
            "createAndObserveChannelAsync": {
              "value": function () { return this.create_and_observe_channel_async.apply(this, arguments); }
            },
            "createAndObserveChannelFinish": {
              "value": function () { return this.create_and_observe_channel_finish.apply(this, arguments); }
            },
            "createChannelAsync": {
              "value": function () { return this.create_channel_async.apply(this, arguments); }
            },
            "createChannelFinish": {
              "value": function () { return this.create_channel_finish.apply(this, arguments); }
            },
            "dupRequest": {
              "value": function () { return this.dup_request.apply(this, arguments); }
            },
            "ensureAndHandleChannelAsync": {
              "value": function () { return this.ensure_and_handle_channel_async.apply(this, arguments); }
            },
            "ensureAndHandleChannelFinish": {
              "value": function () { return this.ensure_and_handle_channel_finish.apply(this, arguments); }
            },
            "ensureAndObserveChannelAsync": {
              "value": function () { return this.ensure_and_observe_channel_async.apply(this, arguments); }
            },
            "ensureAndObserveChannelFinish": {
              "value": function () { return this.ensure_and_observe_channel_finish.apply(this, arguments); }
            },
            "ensureChannelAsync": {
              "value": function () { return this.ensure_channel_async.apply(this, arguments); }
            },
            "ensureChannelFinish": {
              "value": function () { return this.ensure_channel_finish.apply(this, arguments); }
            },
            "getAccount": {
              "value": function () { return this.get_account.apply(this, arguments); }
            },
            "getChannelRequest": {
              "value": function () { return this.get_channel_request.apply(this, arguments); }
            },
            "getRequest": {
              "value": function () { return this.get_request.apply(this, arguments); }
            },
            "getUserActionTime": {
              "value": function () { return this.get_user_action_time.apply(this, arguments); }
            },
            "setChannelFactory": {
              "value": function () { return this.set_channel_factory.apply(this, arguments); }
            },
            "setConferenceInitialChannels": {
              "value": function () { return this.set_conference_initial_channels.apply(this, arguments); }
            },
            "setDelegateToPreferredHandler": {
              "value": function () { return this.set_delegate_to_preferred_handler.apply(this, arguments); }
            },
            "setDelegatedChannelCallback": {
              "value": function () { return this.set_delegated_channel_callback.apply(this, arguments); }
            },
            "setFileTransferDescription": {
              "value": function () { return this.set_file_transfer_description.apply(this, arguments); }
            },
            "setFileTransferHash": {
              "value": function () { return this.set_file_transfer_hash.apply(this, arguments); }
            },
            "setFileTransferInitialOffset": {
              "value": function () { return this.set_file_transfer_initial_offset.apply(this, arguments); }
            },
            "setFileTransferTimestamp": {
              "value": function () { return this.set_file_transfer_timestamp.apply(this, arguments); }
            },
            "setFileTransferUri": {
              "value": function () { return this.set_file_transfer_uri.apply(this, arguments); }
            },
            "setHint": {
              "value": function () { return this.set_hint.apply(this, arguments); }
            },
            "setHints": {
              "value": function () { return this.set_hints.apply(this, arguments); }
            },
            "setInitialInviteeIds": {
              "value": function () { return this.set_initial_invitee_ids.apply(this, arguments); }
            },
            "setInitialInvitees": {
              "value": function () { return this.set_initial_invitees.apply(this, arguments); }
            },
            "setRequestProperty": {
              "value": function () { return this.set_request_property.apply(this, arguments); }
            },
            "setSmsChannel": {
              "value": function () { return this.set_sms_channel.apply(this, arguments); }
            },
            "setTargetContact": {
              "value": function () { return this.set_target_contact.apply(this, arguments); }
            },
            "setTargetId": {
              "value": function () { return this.set_target_id.apply(this, arguments); }
            },
            "channelRequest": {
              "get": function () { return this.channel_request; },
              "set": function (value) { this.channel_request = value; }
            },
            "requestVardict": {
              "get": function () { return this.request_vardict; },
              "set": function (value) { this.request_vardict = value; }
            },
            "userActionTime": {
              "get": function () { return this.user_action_time; },
              "set": function (value) { this.user_action_time = value; }
            }
          },
          "static": {}
        },
        "AccountManager": {
          "prototype": {
            "createAccountAsync": {
              "value": function () { return this.create_account_async.apply(this, arguments); }
            },
            "createAccountFinish": {
              "value": function () { return this.create_account_finish.apply(this, arguments); }
            },
            "dupValidAccounts": {
              "value": function () { return this.dup_valid_accounts.apply(this, arguments); }
            },
            "enableRestart": {
              "value": function () { return this.enable_restart.apply(this, arguments); }
            },
            "ensureAccount": {
              "value": function () { return this.ensure_account.apply(this, arguments); }
            },
            "getMostAvailablePresence": {
              "value": function () { return this.get_most_available_presence.apply(this, arguments); }
            },
            "getValidAccounts": {
              "value": function () { return this.get_valid_accounts.apply(this, arguments); }
            },
            "isPrepared": {
              "value": function () { return this.is_prepared.apply(this, arguments); }
            },
            "prepareAsync": {
              "value": function () { return this.prepare_async.apply(this, arguments); }
            },
            "prepareFinish": {
              "value": function () { return this.prepare_finish.apply(this, arguments); }
            },
            "setAllRequestedPresences": {
              "value": function () { return this.set_all_requested_presences.apply(this, arguments); }
            },
            "setDefault": {
              "value": function () { return this.set_default.apply(this, arguments); }
            }
          },
          "static": {
            "canSetDefault": {
              "value": function () { return this.can_set_default.apply(this, arguments); }
            },
            "getFeatureQuarkCore": {
              "value": function () { return this.get_feature_quark_core.apply(this, arguments); }
            },
            "initKnownInterfaces": {
              "value": function () { return this.init_known_interfaces.apply(this, arguments); }
            }
          }
        },
        "AccountRequest": {
          "prototype": {
            "addSupersedes": {
              "value": function () { return this.add_supersedes.apply(this, arguments); }
            },
            "createAccountAsync": {
              "value": function () { return this.create_account_async.apply(this, arguments); }
            },
            "createAccountFinish": {
              "value": function () { return this.create_account_finish.apply(this, arguments); }
            },
            "setAutomaticPresence": {
              "value": function () { return this.set_automatic_presence.apply(this, arguments); }
            },
            "setAvatar": {
              "value": function () { return this.set_avatar.apply(this, arguments); }
            },
            "setConnectAutomatically": {
              "value": function () { return this.set_connect_automatically.apply(this, arguments); }
            },
            "setDisplayName": {
              "value": function () { return this.set_display_name.apply(this, arguments); }
            },
            "setEnabled": {
              "value": function () { return this.set_enabled.apply(this, arguments); }
            },
            "setIconName": {
              "value": function () { return this.set_icon_name.apply(this, arguments); }
            },
            "setNickname": {
              "value": function () { return this.set_nickname.apply(this, arguments); }
            },
            "setParameter": {
              "value": function () { return this.set_parameter.apply(this, arguments); }
            },
            "setParameterString": {
              "value": function () { return this.set_parameter_string.apply(this, arguments); }
            },
            "setRequestedPresence": {
              "value": function () { return this.set_requested_presence.apply(this, arguments); }
            },
            "setService": {
              "value": function () { return this.set_service.apply(this, arguments); }
            },
            "setStorageProvider": {
              "value": function () { return this.set_storage_provider.apply(this, arguments); }
            },
            "unsetParameter": {
              "value": function () { return this.unset_parameter.apply(this, arguments); }
            },
            "accountManager": {
              "get": function () { return this.account_manager; },
              "set": function (value) { this.account_manager = value; }
            },
            "automaticPresenceType": {
              "get": function () { return this.automatic_presence_type; },
              "set": function (value) { this.automatic_presence_type = value; }
            },
            "automaticStatus": {
              "get": function () { return this.automatic_status; },
              "set": function (value) { this.automatic_status = value; }
            },
            "automaticStatusMessage": {
              "get": function () { return this.automatic_status_message; },
              "set": function (value) { this.automatic_status_message = value; }
            },
            "avatarMimeType": {
              "get": function () { return this.avatar_mime_type; },
              "set": function (value) { this.avatar_mime_type = value; }
            },
            "connectAutomatically": {
              "get": function () { return this.connect_automatically; },
              "set": function (value) { this.connect_automatically = value; }
            },
            "connectionManager": {
              "get": function () { return this.connection_manager; },
              "set": function (value) { this.connection_manager = value; }
            },
            "displayName": {
              "get": function () { return this.display_name; },
              "set": function (value) { this.display_name = value; }
            },
            "iconName": {
              "get": function () { return this.icon_name; },
              "set": function (value) { this.icon_name = value; }
            },
            "requestedPresenceType": {
              "get": function () { return this.requested_presence_type; },
              "set": function (value) { this.requested_presence_type = value; }
            },
            "requestedStatus": {
              "get": function () { return this.requested_status; },
              "set": function (value) { this.requested_status = value; }
            },
            "requestedStatusMessage": {
              "get": function () { return this.requested_status_message; },
              "set": function (value) { this.requested_status_message = value; }
            },
            "storageProvider": {
              "get": function () { return this.storage_provider; },
              "set": function (value) { this.storage_provider = value; }
            }
          },
          "static": {}
        },
        "AddDispatchOperationContext": {
          "prototype": {
            "dbusContext": {
              "get": function () { return this.dbus_context; },
              "set": function (value) { this.dbus_context = value; }
            },
            "dispatchOperation": {
              "get": function () { return this.dispatch_operation; },
              "set": function (value) { this.dispatch_operation = value; }
            }
          },
          "static": {}
        },
        "AutomaticClientFactory": {
          "prototype": {},
          "static": {}
        },
        "AutomaticProxyFactory": {
          "prototype": {},
          "static": {}
        },
        "BaseClient": {
          "prototype": {
            "addAccountFeatures": {
              "value": function () { return this.add_account_features.apply(this, arguments); }
            },
            "addAccountFeaturesVarargs": {
              "value": function () { return this.add_account_features_varargs.apply(this, arguments); }
            },
            "addApproverFilter": {
              "value": function () { return this.add_approver_filter.apply(this, arguments); }
            },
            "addApproverFilterVardict": {
              "value": function () { return this.add_approver_filter_vardict.apply(this, arguments); }
            },
            "addChannelFeatures": {
              "value": function () { return this.add_channel_features.apply(this, arguments); }
            },
            "addChannelFeaturesVarargs": {
              "value": function () { return this.add_channel_features_varargs.apply(this, arguments); }
            },
            "addConnectionFeatures": {
              "value": function () { return this.add_connection_features.apply(this, arguments); }
            },
            "addConnectionFeaturesVarargs": {
              "value": function () { return this.add_connection_features_varargs.apply(this, arguments); }
            },
            "addHandlerCapabilities": {
              "value": function () { return this.add_handler_capabilities.apply(this, arguments); }
            },
            "addHandlerCapabilitiesVarargs": {
              "value": function () { return this.add_handler_capabilities_varargs.apply(this, arguments); }
            },
            "addHandlerCapability": {
              "value": function () { return this.add_handler_capability.apply(this, arguments); }
            },
            "addHandlerFilter": {
              "value": function () { return this.add_handler_filter.apply(this, arguments); }
            },
            "addHandlerFilterVardict": {
              "value": function () { return this.add_handler_filter_vardict.apply(this, arguments); }
            },
            "addObserverFilter": {
              "value": function () { return this.add_observer_filter.apply(this, arguments); }
            },
            "addObserverFilterVardict": {
              "value": function () { return this.add_observer_filter_vardict.apply(this, arguments); }
            },
            "beAHandler": {
              "value": function () { return this.be_a_handler.apply(this, arguments); }
            },
            "delegateChannelsAsync": {
              "value": function () { return this.delegate_channels_async.apply(this, arguments); }
            },
            "delegateChannelsFinish": {
              "value": function () { return this.delegate_channels_finish.apply(this, arguments); }
            },
            "dupHandledChannels": {
              "value": function () { return this.dup_handled_channels.apply(this, arguments); }
            },
            "dupPendingRequests": {
              "value": function () { return this.dup_pending_requests.apply(this, arguments); }
            },
            "getAccountManager": {
              "value": function () { return this.get_account_manager.apply(this, arguments); }
            },
            "getBusName": {
              "value": function () { return this.get_bus_name.apply(this, arguments); }
            },
            "getChannelFactory": {
              "value": function () { return this.get_channel_factory.apply(this, arguments); }
            },
            "getDbusDaemon": {
              "value": function () { return this.get_dbus_daemon.apply(this, arguments); }
            },
            "getHandledChannels": {
              "value": function () { return this.get_handled_channels.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getObjectPath": {
              "value": function () { return this.get_object_path.apply(this, arguments); }
            },
            "getPendingRequests": {
              "value": function () { return this.get_pending_requests.apply(this, arguments); }
            },
            "getUniquifyName": {
              "value": function () { return this.get_uniquify_name.apply(this, arguments); }
            },
            "isHandlingChannel": {
              "value": function () { return this.is_handling_channel.apply(this, arguments); }
            },
            "setChannelFactory": {
              "value": function () { return this.set_channel_factory.apply(this, arguments); }
            },
            "setDelegatedChannelsCallback": {
              "value": function () { return this.set_delegated_channels_callback.apply(this, arguments); }
            },
            "setHandlerBypassApproval": {
              "value": function () { return this.set_handler_bypass_approval.apply(this, arguments); }
            },
            "setHandlerRequestNotification": {
              "value": function () { return this.set_handler_request_notification.apply(this, arguments); }
            },
            "setObserverDelayApprovers": {
              "value": function () { return this.set_observer_delay_approvers.apply(this, arguments); }
            },
            "setObserverRecover": {
              "value": function () { return this.set_observer_recover.apply(this, arguments); }
            },
            "takeApproverFilter": {
              "value": function () { return this.take_approver_filter.apply(this, arguments); }
            },
            "takeHandlerFilter": {
              "value": function () { return this.take_handler_filter.apply(this, arguments); }
            },
            "takeObserverFilter": {
              "value": function () { return this.take_observer_filter.apply(this, arguments); }
            },
            "accountManager": {
              "get": function () { return this.account_manager; },
              "set": function (value) { this.account_manager = value; }
            },
            "channelFactory": {
              "get": function () { return this.channel_factory; },
              "set": function (value) { this.channel_factory = value; }
            },
            "dbusDaemon": {
              "get": function () { return this.dbus_daemon; },
              "set": function (value) { this.dbus_daemon = value; }
            },
            "uniquifyName": {
              "get": function () { return this.uniquify_name; },
              "set": function (value) { this.uniquify_name = value; }
            }
          },
          "static": {
            "implementAddDispatchOperation": {
              "value": function () { return this.implement_add_dispatch_operation.apply(this, arguments); }
            },
            "implementHandleChannels": {
              "value": function () { return this.implement_handle_channels.apply(this, arguments); }
            },
            "implementObserveChannels": {
              "value": function () { return this.implement_observe_channels.apply(this, arguments); }
            }
          }
        },
        "BaseConnection": {
          "prototype": {
            "addClientInterest": {
              "value": function () { return this.add_client_interest.apply(this, arguments); }
            },
            "addInterfaces": {
              "value": function () { return this.add_interfaces.apply(this, arguments); }
            },
            "addPossibleClientInterest": {
              "value": function () { return this.add_possible_client_interest.apply(this, arguments); }
            },
            "changeStatus": {
              "value": function () { return this.change_status.apply(this, arguments); }
            },
            "checkConnected": {
              "value": function () { return this.check_connected.apply(this, arguments); }
            },
            "disconnectWithDbusError": {
              "value": function () { return this.disconnect_with_dbus_error.apply(this, arguments); }
            },
            "disconnectWithDbusErrorVardict": {
              "value": function () { return this.disconnect_with_dbus_error_vardict.apply(this, arguments); }
            },
            "finishShutdown": {
              "value": function () { return this.finish_shutdown.apply(this, arguments); }
            },
            "getAccountPathSuffix": {
              "value": function () { return this.get_account_path_suffix.apply(this, arguments); }
            },
            "getBusName": {
              "value": function () { return this.get_bus_name.apply(this, arguments); }
            },
            "getDbusDaemon": {
              "value": function () { return this.get_dbus_daemon.apply(this, arguments); }
            },
            "getHandles": {
              "value": function () { return this.get_handles.apply(this, arguments); }
            },
            "getObjectPath": {
              "value": function () { return this.get_object_path.apply(this, arguments); }
            },
            "getSelfHandle": {
              "value": function () { return this.get_self_handle.apply(this, arguments); }
            },
            "getStatus": {
              "value": function () { return this.get_status.apply(this, arguments); }
            },
            "isDestroyed": {
              "value": function () { return this.is_destroyed.apply(this, arguments); }
            },
            "registerWithContactsMixin": {
              "value": function () { return this.register_with_contacts_mixin.apply(this, arguments); }
            },
            "setSelfHandle": {
              "value": function () { return this.set_self_handle.apply(this, arguments); }
            },
            "accountPathSuffix": {
              "get": function () { return this.account_path_suffix; },
              "set": function (value) { this.account_path_suffix = value; }
            },
            "dbusDaemon": {
              "get": function () { return this.dbus_daemon; },
              "set": function (value) { this.dbus_daemon = value; }
            },
            "dbusStatus": {
              "get": function () { return this.dbus_status; },
              "set": function (value) { this.dbus_status = value; }
            },
            "hasImmortalHandles": {
              "get": function () { return this.has_immortal_handles; },
              "set": function (value) { this.has_immortal_handles = value; }
            },
            "selfHandle": {
              "get": function () { return this.self_handle; },
              "set": function (value) { this.self_handle = value; }
            },
            "selfId": {
              "get": function () { return this.self_id; },
              "set": function (value) { this.self_id = value; }
            }
          },
          "static": {
            "channelManagerIterInit": {
              "value": function () { return this.channel_manager_iter_init.apply(this, arguments); }
            },
            "channelManagerIterNext": {
              "value": function () { return this.channel_manager_iter_next.apply(this, arguments); }
            },
            "dbusRequestHandles": {
              "value": function () { return this.dbus_request_handles.apply(this, arguments); }
            }
          }
        },
        "BasicProxyFactory": {
          "prototype": {},
          "static": {}
        },
        "CallChannel": {
          "prototype": {
            "acceptAsync": {
              "value": function () { return this.accept_async.apply(this, arguments); }
            },
            "acceptFinish": {
              "value": function () { return this.accept_finish.apply(this, arguments); }
            },
            "addContentAsync": {
              "value": function () { return this.add_content_async.apply(this, arguments); }
            },
            "addContentFinish": {
              "value": function () { return this.add_content_finish.apply(this, arguments); }
            },
            "getContents": {
              "value": function () { return this.get_contents.apply(this, arguments); }
            },
            "getMembers": {
              "value": function () { return this.get_members.apply(this, arguments); }
            },
            "getState": {
              "value": function () { return this.get_state.apply(this, arguments); }
            },
            "hangupAsync": {
              "value": function () { return this.hangup_async.apply(this, arguments); }
            },
            "hangupFinish": {
              "value": function () { return this.hangup_finish.apply(this, arguments); }
            },
            "hasDtmf": {
              "value": function () { return this.has_dtmf.apply(this, arguments); }
            },
            "hasHardwareStreaming": {
              "value": function () { return this.has_hardware_streaming.apply(this, arguments); }
            },
            "hasHold": {
              "value": function () { return this.has_hold.apply(this, arguments); }
            },
            "hasInitialAudio": {
              "value": function () { return this.has_initial_audio.apply(this, arguments); }
            },
            "hasInitialVideo": {
              "value": function () { return this.has_initial_video.apply(this, arguments); }
            },
            "hasMutableContents": {
              "value": function () { return this.has_mutable_contents.apply(this, arguments); }
            },
            "requestHoldAsync": {
              "value": function () { return this.request_hold_async.apply(this, arguments); }
            },
            "requestHoldFinish": {
              "value": function () { return this.request_hold_finish.apply(this, arguments); }
            },
            "sendTonesAsync": {
              "value": function () { return this.send_tones_async.apply(this, arguments); }
            },
            "sendTonesFinish": {
              "value": function () { return this.send_tones_finish.apply(this, arguments); }
            },
            "setQueuedAsync": {
              "value": function () { return this.set_queued_async.apply(this, arguments); }
            },
            "setQueuedFinish": {
              "value": function () { return this.set_queued_finish.apply(this, arguments); }
            },
            "setRingingAsync": {
              "value": function () { return this.set_ringing_async.apply(this, arguments); }
            },
            "setRingingFinish": {
              "value": function () { return this.set_ringing_finish.apply(this, arguments); }
            },
            "hardwareStreaming": {
              "get": function () { return this.hardware_streaming; },
              "set": function (value) { this.hardware_streaming = value; }
            },
            "holdState": {
              "get": function () { return this.hold_state; },
              "set": function (value) { this.hold_state = value; }
            },
            "holdStateReason": {
              "get": function () { return this.hold_state_reason; },
              "set": function (value) { this.hold_state_reason = value; }
            },
            "initialAudio": {
              "get": function () { return this.initial_audio; },
              "set": function (value) { this.initial_audio = value; }
            },
            "initialAudioName": {
              "get": function () { return this.initial_audio_name; },
              "set": function (value) { this.initial_audio_name = value; }
            },
            "initialVideo": {
              "get": function () { return this.initial_video; },
              "set": function (value) { this.initial_video = value; }
            },
            "initialVideoName": {
              "get": function () { return this.initial_video_name; },
              "set": function (value) { this.initial_video_name = value; }
            },
            "mutableContents": {
              "get": function () { return this.mutable_contents; },
              "set": function (value) { this.mutable_contents = value; }
            },
            "stateDetails": {
              "get": function () { return this.state_details; },
              "set": function (value) { this.state_details = value; }
            },
            "stateReason": {
              "get": function () { return this.state_reason; },
              "set": function (value) { this.state_reason = value; }
            }
          },
          "static": {
            "getFeatureQuarkCore": {
              "value": function () { return this.get_feature_quark_core.apply(this, arguments); }
            }
          }
        },
        "CallContent": {
          "prototype": {
            "getDisposition": {
              "value": function () { return this.get_disposition.apply(this, arguments); }
            },
            "getMediaType": {
              "value": function () { return this.get_media_type.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getStreams": {
              "value": function () { return this.get_streams.apply(this, arguments); }
            },
            "removeAsync": {
              "value": function () { return this.remove_async.apply(this, arguments); }
            },
            "removeFinish": {
              "value": function () { return this.remove_finish.apply(this, arguments); }
            },
            "sendTonesAsync": {
              "value": function () { return this.send_tones_async.apply(this, arguments); }
            },
            "sendTonesFinish": {
              "value": function () { return this.send_tones_finish.apply(this, arguments); }
            },
            "mediaType": {
              "get": function () { return this.media_type; },
              "set": function (value) { this.media_type = value; }
            }
          },
          "static": {
            "getFeatureQuarkCore": {
              "value": function () { return this.get_feature_quark_core.apply(this, arguments); }
            },
            "initKnownInterfaces": {
              "value": function () { return this.init_known_interfaces.apply(this, arguments); }
            }
          }
        },
        "CallStream": {
          "prototype": {
            "canRequestReceiving": {
              "get": function () { return this.can_request_receiving; },
              "set": function (value) { this.can_request_receiving = value; }
            },
            "getLocalSendingState": {
              "value": function () { return this.get_local_sending_state.apply(this, arguments); }
            },
            "getRemoteMembers": {
              "value": function () { return this.get_remote_members.apply(this, arguments); }
            },
            "requestReceivingAsync": {
              "value": function () { return this.request_receiving_async.apply(this, arguments); }
            },
            "requestReceivingFinish": {
              "value": function () { return this.request_receiving_finish.apply(this, arguments); }
            },
            "setSendingAsync": {
              "value": function () { return this.set_sending_async.apply(this, arguments); }
            },
            "setSendingFinish": {
              "value": function () { return this.set_sending_finish.apply(this, arguments); }
            },
            "localSendingState": {
              "get": function () { return this.local_sending_state; },
              "set": function (value) { this.local_sending_state = value; }
            }
          },
          "static": {
            "getFeatureQuarkCore": {
              "value": function () { return this.get_feature_quark_core.apply(this, arguments); }
            },
            "initKnownInterfaces": {
              "value": function () { return this.init_known_interfaces.apply(this, arguments); }
            }
          }
        },
        "Capabilities": {
          "prototype": {
            "dupChannelClassesVariant": {
              "value": function () { return this.dup_channel_classes_variant.apply(this, arguments); }
            },
            "getChannelClasses": {
              "value": function () { return this.get_channel_classes.apply(this, arguments); }
            },
            "isSpecificToContact": {
              "value": function () { return this.is_specific_to_contact.apply(this, arguments); }
            },
            "supportsAudioCall": {
              "value": function () { return this.supports_audio_call.apply(this, arguments); }
            },
            "supportsAudioVideoCall": {
              "value": function () { return this.supports_audio_video_call.apply(this, arguments); }
            },
            "supportsContactSearch": {
              "value": function () { return this.supports_contact_search.apply(this, arguments); }
            },
            "supportsDbusTubes": {
              "value": function () { return this.supports_dbus_tubes.apply(this, arguments); }
            },
            "supportsFileTransfer": {
              "value": function () { return this.supports_file_transfer.apply(this, arguments); }
            },
            "supportsFileTransferDescription": {
              "value": function () { return this.supports_file_transfer_description.apply(this, arguments); }
            },
            "supportsFileTransferInitialOffset": {
              "value": function () { return this.supports_file_transfer_initial_offset.apply(this, arguments); }
            },
            "supportsFileTransferTimestamp": {
              "value": function () { return this.supports_file_transfer_timestamp.apply(this, arguments); }
            },
            "supportsFileTransferUri": {
              "value": function () { return this.supports_file_transfer_uri.apply(this, arguments); }
            },
            "supportsRoomList": {
              "value": function () { return this.supports_room_list.apply(this, arguments); }
            },
            "supportsSms": {
              "value": function () { return this.supports_sms.apply(this, arguments); }
            },
            "supportsStreamTubes": {
              "value": function () { return this.supports_stream_tubes.apply(this, arguments); }
            },
            "supportsTextChatrooms": {
              "value": function () { return this.supports_text_chatrooms.apply(this, arguments); }
            },
            "supportsTextChats": {
              "value": function () { return this.supports_text_chats.apply(this, arguments); }
            },
            "channelClasses": {
              "get": function () { return this.channel_classes; },
              "set": function (value) { this.channel_classes = value; }
            },
            "channelClassesVariant": {
              "get": function () { return this.channel_classes_variant; },
              "set": function (value) { this.channel_classes_variant = value; }
            },
            "contactSpecific": {
              "get": function () { return this.contact_specific; },
              "set": function (value) { this.contact_specific = value; }
            }
          },
          "static": {}
        },
        "Channel": {
          "prototype": {
            "borrowConnection": {
              "value": function () { return this.borrow_connection.apply(this, arguments); }
            },
            "borrowImmutableProperties": {
              "value": function () { return this.borrow_immutable_properties.apply(this, arguments); }
            },
            "callWhenReady": {
              "value": function () { return this.call_when_ready.apply(this, arguments); }
            },
            "closeAsync": {
              "value": function () { return this.close_async.apply(this, arguments); }
            },
            "closeFinish": {
              "value": function () { return this.close_finish.apply(this, arguments); }
            },
            "destroyAsync": {
              "value": function () { return this.destroy_async.apply(this, arguments); }
            },
            "destroyFinish": {
              "value": function () { return this.destroy_finish.apply(this, arguments); }
            },
            "dupImmutableProperties": {
              "value": function () { return this.dup_immutable_properties.apply(this, arguments); }
            },
            "getChannelType": {
              "value": function () { return this.get_channel_type.apply(this, arguments); }
            },
            "getChannelTypeId": {
              "value": function () { return this.get_channel_type_id.apply(this, arguments); }
            },
            "getChatState": {
              "value": function () { return this.get_chat_state.apply(this, arguments); }
            },
            "getConnection": {
              "value": function () { return this.get_connection.apply(this, arguments); }
            },
            "getHandle": {
              "value": function () { return this.get_handle.apply(this, arguments); }
            },
            "getIdentifier": {
              "value": function () { return this.get_identifier.apply(this, arguments); }
            },
            "getInitiatorContact": {
              "value": function () { return this.get_initiator_contact.apply(this, arguments); }
            },
            "getInitiatorHandle": {
              "value": function () { return this.get_initiator_handle.apply(this, arguments); }
            },
            "getInitiatorIdentifier": {
              "value": function () { return this.get_initiator_identifier.apply(this, arguments); }
            },
            "getRequested": {
              "value": function () { return this.get_requested.apply(this, arguments); }
            },
            "getTargetContact": {
              "value": function () { return this.get_target_contact.apply(this, arguments); }
            },
            "groupDupLocalPendingContacts": {
              "value": function () { return this.group_dup_local_pending_contacts.apply(this, arguments); }
            },
            "groupDupMembersContacts": {
              "value": function () { return this.group_dup_members_contacts.apply(this, arguments); }
            },
            "groupDupRemotePendingContacts": {
              "value": function () { return this.group_dup_remote_pending_contacts.apply(this, arguments); }
            },
            "groupGetContactOwner": {
              "value": function () { return this.group_get_contact_owner.apply(this, arguments); }
            },
            "groupGetFlags": {
              "value": function () { return this.group_get_flags.apply(this, arguments); }
            },
            "groupGetHandleOwner": {
              "value": function () { return this.group_get_handle_owner.apply(this, arguments); }
            },
            "groupGetLocalPending": {
              "value": function () { return this.group_get_local_pending.apply(this, arguments); }
            },
            "groupGetLocalPendingContactInfo": {
              "value": function () { return this.group_get_local_pending_contact_info.apply(this, arguments); }
            },
            "groupGetLocalPendingInfo": {
              "value": function () { return this.group_get_local_pending_info.apply(this, arguments); }
            },
            "groupGetMembers": {
              "value": function () { return this.group_get_members.apply(this, arguments); }
            },
            "groupGetRemotePending": {
              "value": function () { return this.group_get_remote_pending.apply(this, arguments); }
            },
            "groupGetSelfContact": {
              "value": function () { return this.group_get_self_contact.apply(this, arguments); }
            },
            "groupGetSelfHandle": {
              "value": function () { return this.group_get_self_handle.apply(this, arguments); }
            },
            "isReady": {
              "value": function () { return this.is_ready.apply(this, arguments); }
            },
            "joinAsync": {
              "value": function () { return this.join_async.apply(this, arguments); }
            },
            "joinFinish": {
              "value": function () { return this.join_finish.apply(this, arguments); }
            },
            "leaveAsync": {
              "value": function () { return this.leave_async.apply(this, arguments); }
            },
            "leaveFinish": {
              "value": function () { return this.leave_finish.apply(this, arguments); }
            },
            "passwordNeeded": {
              "get": function () { return this.password_needed; },
              "set": function (value) { this.password_needed = value; }
            },
            "providePasswordAsync": {
              "value": function () { return this.provide_password_async.apply(this, arguments); }
            },
            "providePasswordFinish": {
              "value": function () { return this.provide_password_finish.apply(this, arguments); }
            },
            "runUntilReady": {
              "value": function () { return this.run_until_ready.apply(this, arguments); }
            },
            "channelProperties": {
              "get": function () { return this.channel_properties; },
              "set": function (value) { this.channel_properties = value; }
            },
            "channelReady": {
              "get": function () { return this.channel_ready; },
              "set": function (value) { this.channel_ready = value; }
            },
            "groupFlags": {
              "get": function () { return this.group_flags; },
              "set": function (value) { this.group_flags = value; }
            },
            "groupSelfContact": {
              "get": function () { return this.group_self_contact; },
              "set": function (value) { this.group_self_contact = value; }
            },
            "groupSelfHandle": {
              "get": function () { return this.group_self_handle; },
              "set": function (value) { this.group_self_handle = value; }
            },
            "initiatorContact": {
              "get": function () { return this.initiator_contact; },
              "set": function (value) { this.initiator_contact = value; }
            },
            "initiatorHandle": {
              "get": function () { return this.initiator_handle; },
              "set": function (value) { this.initiator_handle = value; }
            },
            "initiatorIdentifier": {
              "get": function () { return this.initiator_identifier; },
              "set": function (value) { this.initiator_identifier = value; }
            },
            "targetContact": {
              "get": function () { return this.target_contact; },
              "set": function (value) { this.target_contact = value; }
            }
          },
          "static": {
            "getFeatureQuarkChatStates": {
              "value": function () { return this.get_feature_quark_chat_states.apply(this, arguments); }
            },
            "getFeatureQuarkContacts": {
              "value": function () { return this.get_feature_quark_contacts.apply(this, arguments); }
            },
            "getFeatureQuarkCore": {
              "value": function () { return this.get_feature_quark_core.apply(this, arguments); }
            },
            "getFeatureQuarkGroup": {
              "value": function () { return this.get_feature_quark_group.apply(this, arguments); }
            },
            "getFeatureQuarkPassword": {
              "value": function () { return this.get_feature_quark_password.apply(this, arguments); }
            },
            "initKnownInterfaces": {
              "value": function () { return this.init_known_interfaces.apply(this, arguments); }
            }
          }
        },
        "ChannelDispatchOperation": {
          "prototype": {
            "borrowAccount": {
              "value": function () { return this.borrow_account.apply(this, arguments); }
            },
            "borrowChannels": {
              "value": function () { return this.borrow_channels.apply(this, arguments); }
            },
            "borrowConnection": {
              "value": function () { return this.borrow_connection.apply(this, arguments); }
            },
            "borrowImmutableProperties": {
              "value": function () { return this.borrow_immutable_properties.apply(this, arguments); }
            },
            "borrowPossibleHandlers": {
              "value": function () { return this.borrow_possible_handlers.apply(this, arguments); }
            },
            "claimAsync": {
              "value": function () { return this.claim_async.apply(this, arguments); }
            },
            "claimFinish": {
              "value": function () { return this.claim_finish.apply(this, arguments); }
            },
            "claimWithAsync": {
              "value": function () { return this.claim_with_async.apply(this, arguments); }
            },
            "claimWithFinish": {
              "value": function () { return this.claim_with_finish.apply(this, arguments); }
            },
            "closeChannelsAsync": {
              "value": function () { return this.close_channels_async.apply(this, arguments); }
            },
            "closeChannelsFinish": {
              "value": function () { return this.close_channels_finish.apply(this, arguments); }
            },
            "destroyChannelsAsync": {
              "value": function () { return this.destroy_channels_async.apply(this, arguments); }
            },
            "destroyChannelsFinish": {
              "value": function () { return this.destroy_channels_finish.apply(this, arguments); }
            },
            "getAccount": {
              "value": function () { return this.get_account.apply(this, arguments); }
            },
            "getChannels": {
              "value": function () { return this.get_channels.apply(this, arguments); }
            },
            "getConnection": {
              "value": function () { return this.get_connection.apply(this, arguments); }
            },
            "getPossibleHandlers": {
              "value": function () { return this.get_possible_handlers.apply(this, arguments); }
            },
            "handleWithAsync": {
              "value": function () { return this.handle_with_async.apply(this, arguments); }
            },
            "handleWithFinish": {
              "value": function () { return this.handle_with_finish.apply(this, arguments); }
            },
            "handleWithTimeAsync": {
              "value": function () { return this.handle_with_time_async.apply(this, arguments); }
            },
            "handleWithTimeFinish": {
              "value": function () { return this.handle_with_time_finish.apply(this, arguments); }
            },
            "leaveChannelsAsync": {
              "value": function () { return this.leave_channels_async.apply(this, arguments); }
            },
            "leaveChannelsFinish": {
              "value": function () { return this.leave_channels_finish.apply(this, arguments); }
            },
            "cdoProperties": {
              "get": function () { return this.cdo_properties; },
              "set": function (value) { this.cdo_properties = value; }
            },
            "possibleHandlers": {
              "get": function () { return this.possible_handlers; },
              "set": function (value) { this.possible_handlers = value; }
            }
          },
          "static": {
            "getFeatureQuarkCore": {
              "value": function () { return this.get_feature_quark_core.apply(this, arguments); }
            },
            "initKnownInterfaces": {
              "value": function () { return this.init_known_interfaces.apply(this, arguments); }
            }
          }
        },
        "ChannelDispatcher": {
          "prototype": {
            "presentChannelAsync": {
              "value": function () { return this.present_channel_async.apply(this, arguments); }
            },
            "presentChannelFinish": {
              "value": function () { return this.present_channel_finish.apply(this, arguments); }
            }
          },
          "static": {
            "initKnownInterfaces": {
              "value": function () { return this.init_known_interfaces.apply(this, arguments); }
            }
          }
        },
        "ChannelRequest": {
          "prototype": {
            "dupHints": {
              "value": function () { return this.dup_hints.apply(this, arguments); }
            },
            "dupImmutableProperties": {
              "value": function () { return this.dup_immutable_properties.apply(this, arguments); }
            },
            "getAccount": {
              "value": function () { return this.get_account.apply(this, arguments); }
            },
            "getHints": {
              "value": function () { return this.get_hints.apply(this, arguments); }
            },
            "getImmutableProperties": {
              "value": function () { return this.get_immutable_properties.apply(this, arguments); }
            },
            "getPreferredHandler": {
              "value": function () { return this.get_preferred_handler.apply(this, arguments); }
            },
            "getUserActionTime": {
              "value": function () { return this.get_user_action_time.apply(this, arguments); }
            },
            "setChannelFactory": {
              "value": function () { return this.set_channel_factory.apply(this, arguments); }
            },
            "channelFactory": {
              "get": function () { return this.channel_factory; },
              "set": function (value) { this.channel_factory = value; }
            },
            "hintsVardict": {
              "get": function () { return this.hints_vardict; },
              "set": function (value) { this.hints_vardict = value; }
            },
            "immutableProperties": {
              "get": function () { return this.immutable_properties; },
              "set": function (value) { this.immutable_properties = value; }
            },
            "immutablePropertiesVardict": {
              "get": function () { return this.immutable_properties_vardict; },
              "set": function (value) { this.immutable_properties_vardict = value; }
            },
            "preferredHandler": {
              "get": function () { return this.preferred_handler; },
              "set": function (value) { this.preferred_handler = value; }
            },
            "userActionTime": {
              "get": function () { return this.user_action_time; },
              "set": function (value) { this.user_action_time = value; }
            }
          },
          "static": {
            "initKnownInterfaces": {
              "value": function () { return this.init_known_interfaces.apply(this, arguments); }
            }
          }
        },
        "ClientMessage": {
          "prototype": {},
          "static": {}
        },
        "Connection": {
          "prototype": {
            "addClientInterest": {
              "value": function () { return this.add_client_interest.apply(this, arguments); }
            },
            "addClientInterestById": {
              "value": function () { return this.add_client_interest_by_id.apply(this, arguments); }
            },
            "addToGroupAsync": {
              "value": function () { return this.add_to_group_async.apply(this, arguments); }
            },
            "addToGroupFinish": {
              "value": function () { return this.add_to_group_finish.apply(this, arguments); }
            },
            "authorizePublicationAsync": {
              "value": function () { return this.authorize_publication_async.apply(this, arguments); }
            },
            "authorizePublicationFinish": {
              "value": function () { return this.authorize_publication_finish.apply(this, arguments); }
            },
            "bindConnectionStatusToProperty": {
              "value": function () { return this.bind_connection_status_to_property.apply(this, arguments); }
            },
            "blockContactsAsync": {
              "value": function () { return this.block_contacts_async.apply(this, arguments); }
            },
            "blockContactsFinish": {
              "value": function () { return this.block_contacts_finish.apply(this, arguments); }
            },
            "callWhenReady": {
              "value": function () { return this.call_when_ready.apply(this, arguments); }
            },
            "canReportAbusive": {
              "get": function () { return this.can_report_abusive; },
              "set": function (value) { this.can_report_abusive = value; }
            },
            "canSetContactAlias": {
              "value": function () { return this.can_set_contact_alias.apply(this, arguments); }
            },
            "disconnectAsync": {
              "value": function () { return this.disconnect_async.apply(this, arguments); }
            },
            "disconnectFinish": {
              "value": function () { return this.disconnect_finish.apply(this, arguments); }
            },
            "dupContactByIdAsync": {
              "value": function () { return this.dup_contact_by_id_async.apply(this, arguments); }
            },
            "dupContactByIdFinish": {
              "value": function () { return this.dup_contact_by_id_finish.apply(this, arguments); }
            },
            "dupContactIfPossible": {
              "value": function () { return this.dup_contact_if_possible.apply(this, arguments); }
            },
            "dupContactInfoSupportedFields": {
              "value": function () { return this.dup_contact_info_supported_fields.apply(this, arguments); }
            },
            "dupContactList": {
              "value": function () { return this.dup_contact_list.apply(this, arguments); }
            },
            "dupDetailedErrorVardict": {
              "value": function () { return this.dup_detailed_error_vardict.apply(this, arguments); }
            },
            "getAccount": {
              "value": function () { return this.get_account.apply(this, arguments); }
            },
            "getAvatarRequirements": {
              "value": function () { return this.get_avatar_requirements.apply(this, arguments); }
            },
            "getBalance": {
              "value": function () { return this.get_balance.apply(this, arguments); }
            },
            "getBalanceUri": {
              "value": function () { return this.get_balance_uri.apply(this, arguments); }
            },
            "getBlockedContacts": {
              "value": function () { return this.get_blocked_contacts.apply(this, arguments); }
            },
            "getCanChangeContactList": {
              "value": function () { return this.get_can_change_contact_list.apply(this, arguments); }
            },
            "getCapabilities": {
              "value": function () { return this.get_capabilities.apply(this, arguments); }
            },
            "getCmName": {
              "value": function () { return this.get_cm_name.apply(this, arguments); }
            },
            "getConnectionManagerName": {
              "value": function () { return this.get_connection_manager_name.apply(this, arguments); }
            },
            "getContactAttributes": {
              "value": function () { return this.get_contact_attributes.apply(this, arguments); }
            },
            "getContactGroups": {
              "value": function () { return this.get_contact_groups.apply(this, arguments); }
            },
            "getContactInfoFlags": {
              "value": function () { return this.get_contact_info_flags.apply(this, arguments); }
            },
            "getContactInfoSupportedFields": {
              "value": function () { return this.get_contact_info_supported_fields.apply(this, arguments); }
            },
            "getContactListAttributes": {
              "value": function () { return this.get_contact_list_attributes.apply(this, arguments); }
            },
            "getContactListPersists": {
              "value": function () { return this.get_contact_list_persists.apply(this, arguments); }
            },
            "getContactListState": {
              "value": function () { return this.get_contact_list_state.apply(this, arguments); }
            },
            "getContactsByHandle": {
              "value": function () { return this.get_contacts_by_handle.apply(this, arguments); }
            },
            "getContactsById": {
              "value": function () { return this.get_contacts_by_id.apply(this, arguments); }
            },
            "getDetailedError": {
              "value": function () { return this.get_detailed_error.apply(this, arguments); }
            },
            "getDisjointGroups": {
              "value": function () { return this.get_disjoint_groups.apply(this, arguments); }
            },
            "getGroupStorage": {
              "value": function () { return this.get_group_storage.apply(this, arguments); }
            },
            "getProtocolName": {
              "value": function () { return this.get_protocol_name.apply(this, arguments); }
            },
            "getRequestUsesMessage": {
              "value": function () { return this.get_request_uses_message.apply(this, arguments); }
            },
            "getSelfContact": {
              "value": function () { return this.get_self_contact.apply(this, arguments); }
            },
            "getSelfHandle": {
              "value": function () { return this.get_self_handle.apply(this, arguments); }
            },
            "getStatus": {
              "value": function () { return this.get_status.apply(this, arguments); }
            },
            "hasImmortalHandles": {
              "value": function () { return this.has_immortal_handles.apply(this, arguments); }
            },
            "holdHandles": {
              "value": function () { return this.hold_handles.apply(this, arguments); }
            },
            "isReady": {
              "value": function () { return this.is_ready.apply(this, arguments); }
            },
            "parseObjectPath": {
              "value": function () { return this.parse_object_path.apply(this, arguments); }
            },
            "refreshContactInfo": {
              "value": function () { return this.refresh_contact_info.apply(this, arguments); }
            },
            "removeContactsAsync": {
              "value": function () { return this.remove_contacts_async.apply(this, arguments); }
            },
            "removeContactsFinish": {
              "value": function () { return this.remove_contacts_finish.apply(this, arguments); }
            },
            "removeFromGroupAsync": {
              "value": function () { return this.remove_from_group_async.apply(this, arguments); }
            },
            "removeFromGroupFinish": {
              "value": function () { return this.remove_from_group_finish.apply(this, arguments); }
            },
            "removeGroupAsync": {
              "value": function () { return this.remove_group_async.apply(this, arguments); }
            },
            "removeGroupFinish": {
              "value": function () { return this.remove_group_finish.apply(this, arguments); }
            },
            "renameGroupAsync": {
              "value": function () { return this.rename_group_async.apply(this, arguments); }
            },
            "renameGroupFinish": {
              "value": function () { return this.rename_group_finish.apply(this, arguments); }
            },
            "requestHandles": {
              "value": function () { return this.request_handles.apply(this, arguments); }
            },
            "requestSubscriptionAsync": {
              "value": function () { return this.request_subscription_async.apply(this, arguments); }
            },
            "requestSubscriptionFinish": {
              "value": function () { return this.request_subscription_finish.apply(this, arguments); }
            },
            "runUntilReady": {
              "value": function () { return this.run_until_ready.apply(this, arguments); }
            },
            "setContactInfoAsync": {
              "value": function () { return this.set_contact_info_async.apply(this, arguments); }
            },
            "setContactInfoFinish": {
              "value": function () { return this.set_contact_info_finish.apply(this, arguments); }
            },
            "setGroupMembersAsync": {
              "value": function () { return this.set_group_members_async.apply(this, arguments); }
            },
            "setGroupMembersFinish": {
              "value": function () { return this.set_group_members_finish.apply(this, arguments); }
            },
            "unblockContactsAsync": {
              "value": function () { return this.unblock_contacts_async.apply(this, arguments); }
            },
            "unblockContactsFinish": {
              "value": function () { return this.unblock_contacts_finish.apply(this, arguments); }
            },
            "unpublishAsync": {
              "value": function () { return this.unpublish_async.apply(this, arguments); }
            },
            "unpublishFinish": {
              "value": function () { return this.unpublish_finish.apply(this, arguments); }
            },
            "unrefHandles": {
              "value": function () { return this.unref_handles.apply(this, arguments); }
            },
            "unsubscribeAsync": {
              "value": function () { return this.unsubscribe_async.apply(this, arguments); }
            },
            "unsubscribeFinish": {
              "value": function () { return this.unsubscribe_finish.apply(this, arguments); }
            },
            "upgradeContacts": {
              "value": function () { return this.upgrade_contacts.apply(this, arguments); }
            },
            "upgradeContactsAsync": {
              "value": function () { return this.upgrade_contacts_async.apply(this, arguments); }
            },
            "upgradeContactsFinish": {
              "value": function () { return this.upgrade_contacts_finish.apply(this, arguments); }
            },
            "balanceCurrency": {
              "get": function () { return this.balance_currency; },
              "set": function (value) { this.balance_currency = value; }
            },
            "balanceScale": {
              "get": function () { return this.balance_scale; },
              "set": function (value) { this.balance_scale = value; }
            },
            "balanceUri": {
              "get": function () { return this.balance_uri; },
              "set": function (value) { this.balance_uri = value; }
            },
            "blockedContacts": {
              "get": function () { return this.blocked_contacts; },
              "set": function (value) { this.blocked_contacts = value; }
            },
            "canChangeContactList": {
              "get": function () { return this.can_change_contact_list; },
              "set": function (value) { this.can_change_contact_list = value; }
            },
            "cmName": {
              "get": function () { return this.cm_name; },
              "set": function (value) { this.cm_name = value; }
            },
            "connectionManagerName": {
              "get": function () { return this.connection_manager_name; },
              "set": function (value) { this.connection_manager_name = value; }
            },
            "connectionReady": {
              "get": function () { return this.connection_ready; },
              "set": function (value) { this.connection_ready = value; }
            },
            "contactGroups": {
              "get": function () { return this.contact_groups; },
              "set": function (value) { this.contact_groups = value; }
            },
            "contactListPersists": {
              "get": function () { return this.contact_list_persists; },
              "set": function (value) { this.contact_list_persists = value; }
            },
            "contactListState": {
              "get": function () { return this.contact_list_state; },
              "set": function (value) { this.contact_list_state = value; }
            },
            "disjointGroups": {
              "get": function () { return this.disjoint_groups; },
              "set": function (value) { this.disjoint_groups = value; }
            },
            "groupStorage": {
              "get": function () { return this.group_storage; },
              "set": function (value) { this.group_storage = value; }
            },
            "protocolName": {
              "get": function () { return this.protocol_name; },
              "set": function (value) { this.protocol_name = value; }
            },
            "requestUsesMessage": {
              "get": function () { return this.request_uses_message; },
              "set": function (value) { this.request_uses_message = value; }
            },
            "selfContact": {
              "get": function () { return this.self_contact; },
              "set": function (value) { this.self_contact = value; }
            },
            "selfHandle": {
              "get": function () { return this.self_handle; },
              "set": function (value) { this.self_handle = value; }
            },
            "statusReason": {
              "get": function () { return this.status_reason; },
              "set": function (value) { this.status_reason = value; }
            }
          },
          "static": {
            "getFeatureQuarkAliasing": {
              "value": function () { return this.get_feature_quark_aliasing.apply(this, arguments); }
            },
            "getFeatureQuarkAvatarRequirements": {
              "value": function () { return this.get_feature_quark_avatar_requirements.apply(this, arguments); }
            },
            "getFeatureQuarkBalance": {
              "value": function () { return this.get_feature_quark_balance.apply(this, arguments); }
            },
            "getFeatureQuarkCapabilities": {
              "value": function () { return this.get_feature_quark_capabilities.apply(this, arguments); }
            },
            "getFeatureQuarkConnected": {
              "value": function () { return this.get_feature_quark_connected.apply(this, arguments); }
            },
            "getFeatureQuarkContactBlocking": {
              "value": function () { return this.get_feature_quark_contact_blocking.apply(this, arguments); }
            },
            "getFeatureQuarkContactGroups": {
              "value": function () { return this.get_feature_quark_contact_groups.apply(this, arguments); }
            },
            "getFeatureQuarkContactInfo": {
              "value": function () { return this.get_feature_quark_contact_info.apply(this, arguments); }
            },
            "getFeatureQuarkContactList": {
              "value": function () { return this.get_feature_quark_contact_list.apply(this, arguments); }
            },
            "getFeatureQuarkContactListProperties": {
              "value": function () { return this.get_feature_quark_contact_list_properties.apply(this, arguments); }
            },
            "getFeatureQuarkCore": {
              "value": function () { return this.get_feature_quark_core.apply(this, arguments); }
            },
            "initKnownInterfaces": {
              "value": function () { return this.init_known_interfaces.apply(this, arguments); }
            },
            "presenceTypeCmpAvailability": {
              "value": function () { return this.presence_type_cmp_availability.apply(this, arguments); }
            }
          }
        },
        "ConnectionManager": {
          "prototype": {
            "callWhenReady": {
              "value": function () { return this.call_when_ready.apply(this, arguments); }
            },
            "dupProtocolNames": {
              "value": function () { return this.dup_protocol_names.apply(this, arguments); }
            },
            "dupProtocols": {
              "value": function () { return this.dup_protocols.apply(this, arguments); }
            },
            "getInfoSource": {
              "value": function () { return this.get_info_source.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getProtocol": {
              "value": function () { return this.get_protocol.apply(this, arguments); }
            },
            "getProtocolObject": {
              "value": function () { return this.get_protocol_object.apply(this, arguments); }
            },
            "hasProtocol": {
              "value": function () { return this.has_protocol.apply(this, arguments); }
            },
            "isReady": {
              "value": function () { return this.is_ready.apply(this, arguments); }
            },
            "isRunning": {
              "value": function () { return this.is_running.apply(this, arguments); }
            },
            "alwaysIntrospect": {
              "get": function () { return this.always_introspect; },
              "set": function (value) { this.always_introspect = value; }
            },
            "cmName": {
              "get": function () { return this.cm_name; },
              "set": function (value) { this.cm_name = value; }
            },
            "connectionManager": {
              "get": function () { return this.connection_manager; },
              "set": function (value) { this.connection_manager = value; }
            },
            "infoSource": {
              "get": function () { return this.info_source; },
              "set": function (value) { this.info_source = value; }
            },
            "managerFile": {
              "get": function () { return this.manager_file; },
              "set": function (value) { this.manager_file = value; }
            }
          },
          "static": {
            "checkValidName": {
              "value": function () { return this.check_valid_name.apply(this, arguments); }
            },
            "checkValidProtocolName": {
              "value": function () { return this.check_valid_protocol_name.apply(this, arguments); }
            },
            "getFeatureQuarkCore": {
              "value": function () { return this.get_feature_quark_core.apply(this, arguments); }
            },
            "initKnownInterfaces": {
              "value": function () { return this.init_known_interfaces.apply(this, arguments); }
            }
          }
        },
        "Contact": {
          "prototype": {
            "addToGroupAsync": {
              "value": function () { return this.add_to_group_async.apply(this, arguments); }
            },
            "addToGroupFinish": {
              "value": function () { return this.add_to_group_finish.apply(this, arguments); }
            },
            "authorizePublicationAsync": {
              "value": function () { return this.authorize_publication_async.apply(this, arguments); }
            },
            "authorizePublicationFinish": {
              "value": function () { return this.authorize_publication_finish.apply(this, arguments); }
            },
            "blockAsync": {
              "value": function () { return this.block_async.apply(this, arguments); }
            },
            "blockFinish": {
              "value": function () { return this.block_finish.apply(this, arguments); }
            },
            "dupContactInfo": {
              "value": function () { return this.dup_contact_info.apply(this, arguments); }
            },
            "dupLocation": {
              "value": function () { return this.dup_location.apply(this, arguments); }
            },
            "getAccount": {
              "value": function () { return this.get_account.apply(this, arguments); }
            },
            "getAlias": {
              "value": function () { return this.get_alias.apply(this, arguments); }
            },
            "getAvatarFile": {
              "value": function () { return this.get_avatar_file.apply(this, arguments); }
            },
            "getAvatarMimeType": {
              "value": function () { return this.get_avatar_mime_type.apply(this, arguments); }
            },
            "getAvatarToken": {
              "value": function () { return this.get_avatar_token.apply(this, arguments); }
            },
            "getCapabilities": {
              "value": function () { return this.get_capabilities.apply(this, arguments); }
            },
            "getClientTypes": {
              "value": function () { return this.get_client_types.apply(this, arguments); }
            },
            "getConnection": {
              "value": function () { return this.get_connection.apply(this, arguments); }
            },
            "getContactGroups": {
              "value": function () { return this.get_contact_groups.apply(this, arguments); }
            },
            "getContactInfo": {
              "value": function () { return this.get_contact_info.apply(this, arguments); }
            },
            "getHandle": {
              "value": function () { return this.get_handle.apply(this, arguments); }
            },
            "getIdentifier": {
              "value": function () { return this.get_identifier.apply(this, arguments); }
            },
            "getLocation": {
              "value": function () { return this.get_location.apply(this, arguments); }
            },
            "getPresenceMessage": {
              "value": function () { return this.get_presence_message.apply(this, arguments); }
            },
            "getPresenceStatus": {
              "value": function () { return this.get_presence_status.apply(this, arguments); }
            },
            "getPresenceType": {
              "value": function () { return this.get_presence_type.apply(this, arguments); }
            },
            "getPublishRequest": {
              "value": function () { return this.get_publish_request.apply(this, arguments); }
            },
            "getPublishState": {
              "value": function () { return this.get_publish_state.apply(this, arguments); }
            },
            "getSubscribeState": {
              "value": function () { return this.get_subscribe_state.apply(this, arguments); }
            },
            "hasFeature": {
              "value": function () { return this.has_feature.apply(this, arguments); }
            },
            "isBlocked": {
              "get": function () { return this.is_blocked; },
              "set": function (value) { this.is_blocked = value; }
            },
            "removeAsync": {
              "value": function () { return this.remove_async.apply(this, arguments); }
            },
            "removeFinish": {
              "value": function () { return this.remove_finish.apply(this, arguments); }
            },
            "removeFromGroupAsync": {
              "value": function () { return this.remove_from_group_async.apply(this, arguments); }
            },
            "removeFromGroupFinish": {
              "value": function () { return this.remove_from_group_finish.apply(this, arguments); }
            },
            "requestContactInfoAsync": {
              "value": function () { return this.request_contact_info_async.apply(this, arguments); }
            },
            "requestContactInfoFinish": {
              "value": function () { return this.request_contact_info_finish.apply(this, arguments); }
            },
            "requestSubscriptionAsync": {
              "value": function () { return this.request_subscription_async.apply(this, arguments); }
            },
            "requestSubscriptionFinish": {
              "value": function () { return this.request_subscription_finish.apply(this, arguments); }
            },
            "setContactGroupsAsync": {
              "value": function () { return this.set_contact_groups_async.apply(this, arguments); }
            },
            "setContactGroupsFinish": {
              "value": function () { return this.set_contact_groups_finish.apply(this, arguments); }
            },
            "unblockAsync": {
              "value": function () { return this.unblock_async.apply(this, arguments); }
            },
            "unblockFinish": {
              "value": function () { return this.unblock_finish.apply(this, arguments); }
            },
            "unpublishAsync": {
              "value": function () { return this.unpublish_async.apply(this, arguments); }
            },
            "unpublishFinish": {
              "value": function () { return this.unpublish_finish.apply(this, arguments); }
            },
            "unsubscribeAsync": {
              "value": function () { return this.unsubscribe_async.apply(this, arguments); }
            },
            "unsubscribeFinish": {
              "value": function () { return this.unsubscribe_finish.apply(this, arguments); }
            },
            "avatarFile": {
              "get": function () { return this.avatar_file; },
              "set": function (value) { this.avatar_file = value; }
            },
            "avatarMimeType": {
              "get": function () { return this.avatar_mime_type; },
              "set": function (value) { this.avatar_mime_type = value; }
            },
            "avatarToken": {
              "get": function () { return this.avatar_token; },
              "set": function (value) { this.avatar_token = value; }
            },
            "clientTypes": {
              "get": function () { return this.client_types; },
              "set": function (value) { this.client_types = value; }
            },
            "contactGroups": {
              "get": function () { return this.contact_groups; },
              "set": function (value) { this.contact_groups = value; }
            },
            "contactInfo": {
              "get": function () { return this.contact_info; },
              "set": function (value) { this.contact_info = value; }
            },
            "locationVardict": {
              "get": function () { return this.location_vardict; },
              "set": function (value) { this.location_vardict = value; }
            },
            "presenceMessage": {
              "get": function () { return this.presence_message; },
              "set": function (value) { this.presence_message = value; }
            },
            "presenceStatus": {
              "get": function () { return this.presence_status; },
              "set": function (value) { this.presence_status = value; }
            },
            "presenceType": {
              "get": function () { return this.presence_type; },
              "set": function (value) { this.presence_type = value; }
            },
            "publishRequest": {
              "get": function () { return this.publish_request; },
              "set": function (value) { this.publish_request = value; }
            },
            "publishState": {
              "get": function () { return this.publish_state; },
              "set": function (value) { this.publish_state = value; }
            },
            "subscribeState": {
              "get": function () { return this.subscribe_state; },
              "set": function (value) { this.subscribe_state = value; }
            }
          },
          "static": {}
        },
        "ContactSearch": {
          "prototype": {
            "getAccount": {
              "value": function () { return this.get_account.apply(this, arguments); }
            },
            "getLimit": {
              "value": function () { return this.get_limit.apply(this, arguments); }
            },
            "getSearchKeys": {
              "value": function () { return this.get_search_keys.apply(this, arguments); }
            },
            "getServer": {
              "value": function () { return this.get_server.apply(this, arguments); }
            },
            "resetAsync": {
              "value": function () { return this.reset_async.apply(this, arguments); }
            },
            "resetFinish": {
              "value": function () { return this.reset_finish.apply(this, arguments); }
            }
          },
          "static": {
            "newAsync": {
              "value": function () { return this.new_async.apply(this, arguments); }
            }
          }
        },
        "ContactSearchResult": {
          "prototype": {
            "dupFields": {
              "value": function () { return this.dup_fields.apply(this, arguments); }
            },
            "getField": {
              "value": function () { return this.get_field.apply(this, arguments); }
            },
            "getFields": {
              "value": function () { return this.get_fields.apply(this, arguments); }
            },
            "getIdentifier": {
              "value": function () { return this.get_identifier.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DBusDaemon": {
          "prototype": {
            "cancelNameOwnerWatch": {
              "value": function () { return this.cancel_name_owner_watch.apply(this, arguments); }
            },
            "getUniqueName": {
              "value": function () { return this.get_unique_name.apply(this, arguments); }
            },
            "listActivatableNames": {
              "value": function () { return this.list_activatable_names.apply(this, arguments); }
            },
            "listNames": {
              "value": function () { return this.list_names.apply(this, arguments); }
            },
            "registerObject": {
              "value": function () { return this.register_object.apply(this, arguments); }
            },
            "releaseName": {
              "value": function () { return this.release_name.apply(this, arguments); }
            },
            "requestName": {
              "value": function () { return this.request_name.apply(this, arguments); }
            },
            "unregisterObject": {
              "value": function () { return this.unregister_object.apply(this, arguments); }
            },
            "watchNameOwner": {
              "value": function () { return this.watch_name_owner.apply(this, arguments); }
            }
          },
          "static": {
            "initKnownInterfaces": {
              "value": function () { return this.init_known_interfaces.apply(this, arguments); }
            }
          }
        },
        "DBusTubeChannel": {
          "prototype": {
            "acceptAsync": {
              "value": function () { return this.accept_async.apply(this, arguments); }
            },
            "acceptFinish": {
              "value": function () { return this.accept_finish.apply(this, arguments); }
            },
            "dupParametersVardict": {
              "value": function () { return this.dup_parameters_vardict.apply(this, arguments); }
            },
            "getParameters": {
              "value": function () { return this.get_parameters.apply(this, arguments); }
            },
            "getServiceName": {
              "value": function () { return this.get_service_name.apply(this, arguments); }
            },
            "offerAsync": {
              "value": function () { return this.offer_async.apply(this, arguments); }
            },
            "offerFinish": {
              "value": function () { return this.offer_finish.apply(this, arguments); }
            },
            "parametersVardict": {
              "get": function () { return this.parameters_vardict; },
              "set": function (value) { this.parameters_vardict = value; }
            },
            "serviceName": {
              "get": function () { return this.service_name; },
              "set": function (value) { this.service_name = value; }
            }
          },
          "static": {
            "featureQuarkCore": {
              "value": function () { return this.feature_quark_core.apply(this, arguments); }
            }
          }
        },
        "DebugClient": {
          "prototype": {
            "getMessagesAsync": {
              "value": function () { return this.get_messages_async.apply(this, arguments); }
            },
            "getMessagesFinish": {
              "value": function () { return this.get_messages_finish.apply(this, arguments); }
            },
            "isEnabled": {
              "value": function () { return this.is_enabled.apply(this, arguments); }
            },
            "setEnabledAsync": {
              "value": function () { return this.set_enabled_async.apply(this, arguments); }
            },
            "setEnabledFinish": {
              "value": function () { return this.set_enabled_finish.apply(this, arguments); }
            }
          },
          "static": {
            "getFeatureQuarkCore": {
              "value": function () { return this.get_feature_quark_core.apply(this, arguments); }
            },
            "initKnownInterfaces": {
              "value": function () { return this.init_known_interfaces.apply(this, arguments); }
            }
          }
        },
        "DebugMessage": {
          "prototype": {
            "getCategory": {
              "value": function () { return this.get_category.apply(this, arguments); }
            },
            "getDomain": {
              "value": function () { return this.get_domain.apply(this, arguments); }
            },
            "getLevel": {
              "value": function () { return this.get_level.apply(this, arguments); }
            },
            "getMessage": {
              "value": function () { return this.get_message.apply(this, arguments); }
            },
            "getTime": {
              "value": function () { return this.get_time.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "FileTransferChannel": {
          "prototype": {
            "acceptFileAsync": {
              "value": function () { return this.accept_file_async.apply(this, arguments); }
            },
            "acceptFileFinish": {
              "value": function () { return this.accept_file_finish.apply(this, arguments); }
            },
            "getDate": {
              "value": function () { return this.get_date.apply(this, arguments); }
            },
            "getDescription": {
              "value": function () { return this.get_description.apply(this, arguments); }
            },
            "getFilename": {
              "value": function () { return this.get_filename.apply(this, arguments); }
            },
            "getMetadata": {
              "value": function () { return this.get_metadata.apply(this, arguments); }
            },
            "getMimeType": {
              "value": function () { return this.get_mime_type.apply(this, arguments); }
            },
            "getServiceName": {
              "value": function () { return this.get_service_name.apply(this, arguments); }
            },
            "getSize": {
              "value": function () { return this.get_size.apply(this, arguments); }
            },
            "getState": {
              "value": function () { return this.get_state.apply(this, arguments); }
            },
            "getTransferredBytes": {
              "value": function () { return this.get_transferred_bytes.apply(this, arguments); }
            },
            "provideFileAsync": {
              "value": function () { return this.provide_file_async.apply(this, arguments); }
            },
            "provideFileFinish": {
              "value": function () { return this.provide_file_finish.apply(this, arguments); }
            },
            "initialOffset": {
              "get": function () { return this.initial_offset; },
              "set": function (value) { this.initial_offset = value; }
            },
            "mimeType": {
              "get": function () { return this.mime_type; },
              "set": function (value) { this.mime_type = value; }
            },
            "serviceName": {
              "get": function () { return this.service_name; },
              "set": function (value) { this.service_name = value; }
            },
            "transferredBytes": {
              "get": function () { return this.transferred_bytes; },
              "set": function (value) { this.transferred_bytes = value; }
            }
          },
          "static": {
            "getFeatureQuarkCore": {
              "value": function () { return this.get_feature_quark_core.apply(this, arguments); }
            }
          }
        },
        "HandleChannelsContext": {
          "prototype": {
            "getHandlerInfo": {
              "value": function () { return this.get_handler_info.apply(this, arguments); }
            },
            "getRequests": {
              "value": function () { return this.get_requests.apply(this, arguments); }
            },
            "dbusContext": {
              "get": function () { return this.dbus_context; },
              "set": function (value) { this.dbus_context = value; }
            },
            "handlerInfo": {
              "get": function () { return this.handler_info; },
              "set": function (value) { this.handler_info = value; }
            },
            "requestsSatisfied": {
              "get": function () { return this.requests_satisfied; },
              "set": function (value) { this.requests_satisfied = value; }
            },
            "userActionTime": {
              "get": function () { return this.user_action_time; },
              "set": function (value) { this.user_action_time = value; }
            }
          },
          "static": {}
        },
        "Message": {
          "prototype": {
            "appendPart": {
              "value": function () { return this.append_part.apply(this, arguments); }
            },
            "countParts": {
              "value": function () { return this.count_parts.apply(this, arguments); }
            },
            "deleteKey": {
              "value": function () { return this.delete_key.apply(this, arguments); }
            },
            "deletePart": {
              "value": function () { return this.delete_part.apply(this, arguments); }
            },
            "dupPart": {
              "value": function () { return this.dup_part.apply(this, arguments); }
            },
            "getMessageType": {
              "value": function () { return this.get_message_type.apply(this, arguments); }
            },
            "getPendingMessageId": {
              "value": function () { return this.get_pending_message_id.apply(this, arguments); }
            },
            "getReceivedTimestamp": {
              "value": function () { return this.get_received_timestamp.apply(this, arguments); }
            },
            "getSentTimestamp": {
              "value": function () { return this.get_sent_timestamp.apply(this, arguments); }
            },
            "getSpecificToInterface": {
              "value": function () { return this.get_specific_to_interface.apply(this, arguments); }
            },
            "getSupersedes": {
              "value": function () { return this.get_supersedes.apply(this, arguments); }
            },
            "getToken": {
              "value": function () { return this.get_token.apply(this, arguments); }
            },
            "isDeliveryReport": {
              "value": function () { return this.is_delivery_report.apply(this, arguments); }
            },
            "isMutable": {
              "value": function () { return this.is_mutable.apply(this, arguments); }
            },
            "isRescued": {
              "value": function () { return this.is_rescued.apply(this, arguments); }
            },
            "isScrollback": {
              "value": function () { return this.is_scrollback.apply(this, arguments); }
            },
            "refHandle": {
              "value": function () { return this.ref_handle.apply(this, arguments); }
            },
            "setBoolean": {
              "value": function () { return this.set_boolean.apply(this, arguments); }
            },
            "setBytes": {
              "value": function () { return this.set_bytes.apply(this, arguments); }
            },
            "setHandle": {
              "value": function () { return this.set_handle.apply(this, arguments); }
            },
            "setInt32": {
              "value": function () { return this.set_int32.apply(this, arguments); }
            },
            "setInt64": {
              "value": function () { return this.set_int64.apply(this, arguments); }
            },
            "setString": {
              "value": function () { return this.set_string.apply(this, arguments); }
            },
            "setStringPrintf": {
              "value": function () { return this.set_string_printf.apply(this, arguments); }
            },
            "setUint32": {
              "value": function () { return this.set_uint32.apply(this, arguments); }
            },
            "setUint64": {
              "value": function () { return this.set_uint64.apply(this, arguments); }
            },
            "setVariant": {
              "value": function () { return this.set_variant.apply(this, arguments); }
            },
            "takeMessage": {
              "value": function () { return this.take_message.apply(this, arguments); }
            },
            "toText": {
              "value": function () { return this.to_text.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "ObserveChannelsContext": {
          "prototype": {
            "getRequests": {
              "value": function () { return this.get_requests.apply(this, arguments); }
            },
            "isRecovering": {
              "value": function () { return this.is_recovering.apply(this, arguments); }
            },
            "dbusContext": {
              "get": function () { return this.dbus_context; },
              "set": function (value) { this.dbus_context = value; }
            },
            "dispatchOperation": {
              "get": function () { return this.dispatch_operation; },
              "set": function (value) { this.dispatch_operation = value; }
            },
            "observerInfo": {
              "get": function () { return this.observer_info; },
              "set": function (value) { this.observer_info = value; }
            }
          },
          "static": {}
        },
        "Protocol": {
          "prototype": {
            "borrowParams": {
              "value": function () { return this.borrow_params.apply(this, arguments); }
            },
            "canRegister": {
              "value": function () { return this.can_register.apply(this, arguments); }
            },
            "dupImmutableProperties": {
              "value": function () { return this.dup_immutable_properties.apply(this, arguments); }
            },
            "dupParam": {
              "value": function () { return this.dup_param.apply(this, arguments); }
            },
            "dupParamNames": {
              "value": function () { return this.dup_param_names.apply(this, arguments); }
            },
            "dupParams": {
              "value": function () { return this.dup_params.apply(this, arguments); }
            },
            "dupPresenceStatuses": {
              "value": function () { return this.dup_presence_statuses.apply(this, arguments); }
            },
            "getAddressableUriSchemes": {
              "value": function () { return this.get_addressable_uri_schemes.apply(this, arguments); }
            },
            "getAddressableVcardFields": {
              "value": function () { return this.get_addressable_vcard_fields.apply(this, arguments); }
            },
            "getAuthenticationTypes": {
              "value": function () { return this.get_authentication_types.apply(this, arguments); }
            },
            "getAvatarRequirements": {
              "value": function () { return this.get_avatar_requirements.apply(this, arguments); }
            },
            "getCapabilities": {
              "value": function () { return this.get_capabilities.apply(this, arguments); }
            },
            "getCmName": {
              "value": function () { return this.get_cm_name.apply(this, arguments); }
            },
            "getEnglishName": {
              "value": function () { return this.get_english_name.apply(this, arguments); }
            },
            "getIconName": {
              "value": function () { return this.get_icon_name.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getParam": {
              "value": function () { return this.get_param.apply(this, arguments); }
            },
            "getVcardField": {
              "value": function () { return this.get_vcard_field.apply(this, arguments); }
            },
            "hasParam": {
              "value": function () { return this.has_param.apply(this, arguments); }
            },
            "identifyAccountAsync": {
              "value": function () { return this.identify_account_async.apply(this, arguments); }
            },
            "identifyAccountFinish": {
              "value": function () { return this.identify_account_finish.apply(this, arguments); }
            },
            "normalizeContactAsync": {
              "value": function () { return this.normalize_contact_async.apply(this, arguments); }
            },
            "normalizeContactFinish": {
              "value": function () { return this.normalize_contact_finish.apply(this, arguments); }
            },
            "normalizeContactUriAsync": {
              "value": function () { return this.normalize_contact_uri_async.apply(this, arguments); }
            },
            "normalizeContactUriFinish": {
              "value": function () { return this.normalize_contact_uri_finish.apply(this, arguments); }
            },
            "normalizeVcardAddressAsync": {
              "value": function () { return this.normalize_vcard_address_async.apply(this, arguments); }
            },
            "normalizeVcardAddressFinish": {
              "value": function () { return this.normalize_vcard_address_finish.apply(this, arguments); }
            },
            "addressableUriSchemes": {
              "get": function () { return this.addressable_uri_schemes; },
              "set": function (value) { this.addressable_uri_schemes = value; }
            },
            "addressableVcardFields": {
              "get": function () { return this.addressable_vcard_fields; },
              "set": function (value) { this.addressable_vcard_fields = value; }
            },
            "authenticationTypes": {
              "get": function () { return this.authentication_types; },
              "set": function (value) { this.authentication_types = value; }
            },
            "avatarRequirements": {
              "get": function () { return this.avatar_requirements; },
              "set": function (value) { this.avatar_requirements = value; }
            },
            "cmName": {
              "get": function () { return this.cm_name; },
              "set": function (value) { this.cm_name = value; }
            },
            "englishName": {
              "get": function () { return this.english_name; },
              "set": function (value) { this.english_name = value; }
            },
            "iconName": {
              "get": function () { return this.icon_name; },
              "set": function (value) { this.icon_name = value; }
            },
            "paramNames": {
              "get": function () { return this.param_names; },
              "set": function (value) { this.param_names = value; }
            },
            "protocolName": {
              "get": function () { return this.protocol_name; },
              "set": function (value) { this.protocol_name = value; }
            },
            "protocolProperties": {
              "get": function () { return this.protocol_properties; },
              "set": function (value) { this.protocol_properties = value; }
            },
            "protocolPropertiesVardict": {
              "get": function () { return this.protocol_properties_vardict; },
              "set": function (value) { this.protocol_properties_vardict = value; }
            },
            "vcardField": {
              "get": function () { return this.vcard_field; },
              "set": function (value) { this.vcard_field = value; }
            }
          },
          "static": {
            "getFeatureQuarkCore": {
              "value": function () { return this.get_feature_quark_core.apply(this, arguments); }
            },
            "getFeatureQuarkParameters": {
              "value": function () { return this.get_feature_quark_parameters.apply(this, arguments); }
            },
            "initKnownInterfaces": {
              "value": function () { return this.init_known_interfaces.apply(this, arguments); }
            }
          }
        },
        "Proxy": {
          "prototype": {
            "dbusErrorToGerror": {
              "value": function () { return this.dbus_error_to_gerror.apply(this, arguments); }
            },
            "getBusName": {
              "value": function () { return this.get_bus_name.apply(this, arguments); }
            },
            "getDbusConnection": {
              "value": function () { return this.get_dbus_connection.apply(this, arguments); }
            },
            "getDbusDaemon": {
              "value": function () { return this.get_dbus_daemon.apply(this, arguments); }
            },
            "getFactory": {
              "value": function () { return this.get_factory.apply(this, arguments); }
            },
            "getInvalidated": {
              "value": function () { return this.get_invalidated.apply(this, arguments); }
            },
            "getObjectPath": {
              "value": function () { return this.get_object_path.apply(this, arguments); }
            },
            "hasInterface": {
              "value": function () { return this.has_interface.apply(this, arguments); }
            },
            "hasInterfaceById": {
              "value": function () { return this.has_interface_by_id.apply(this, arguments); }
            },
            "isPrepared": {
              "value": function () { return this.is_prepared.apply(this, arguments); }
            },
            "prepareAsync": {
              "value": function () { return this.prepare_async.apply(this, arguments); }
            },
            "prepareFinish": {
              "value": function () { return this.prepare_finish.apply(this, arguments); }
            },
            "busName": {
              "get": function () { return this.bus_name; },
              "set": function (value) { this.bus_name = value; }
            },
            "dbusConnection": {
              "get": function () { return this.dbus_connection; },
              "set": function (value) { this.dbus_connection = value; }
            },
            "dbusDaemon": {
              "get": function () { return this.dbus_daemon; },
              "set": function (value) { this.dbus_daemon = value; }
            },
            "objectPath": {
              "get": function () { return this.object_path; },
              "set": function (value) { this.object_path = value; }
            }
          },
          "static": {}
        },
        "RoomInfo": {
          "prototype": {
            "getChannelType": {
              "value": function () { return this.get_channel_type.apply(this, arguments); }
            },
            "getDescription": {
              "value": function () { return this.get_description.apply(this, arguments); }
            },
            "getHandle": {
              "value": function () { return this.get_handle.apply(this, arguments); }
            },
            "getHandleName": {
              "value": function () { return this.get_handle_name.apply(this, arguments); }
            },
            "getInviteOnly": {
              "value": function () { return this.get_invite_only.apply(this, arguments); }
            },
            "getMembersCount": {
              "value": function () { return this.get_members_count.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getRequiresPassword": {
              "value": function () { return this.get_requires_password.apply(this, arguments); }
            },
            "getRoomId": {
              "value": function () { return this.get_room_id.apply(this, arguments); }
            },
            "getServer": {
              "value": function () { return this.get_server.apply(this, arguments); }
            },
            "getSubject": {
              "value": function () { return this.get_subject.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "RoomList": {
          "prototype": {
            "getAccount": {
              "value": function () { return this.get_account.apply(this, arguments); }
            },
            "getServer": {
              "value": function () { return this.get_server.apply(this, arguments); }
            },
            "isListing": {
              "value": function () { return this.is_listing.apply(this, arguments); }
            }
          },
          "static": {
            "newAsync": {
              "value": function () { return this.new_async.apply(this, arguments); }
            }
          }
        },
        "SignalledMessage": {
          "prototype": {},
          "static": {
            "getSender": {
              "value": function () { return this.get_sender.apply(this, arguments); }
            }
          }
        },
        "SimpleApprover": {
          "prototype": {
            "userData": {
              "get": function () { return this.user_data; },
              "set": function (value) { this.user_data = value; }
            }
          },
          "static": {}
        },
        "SimpleClientFactory": {
          "prototype": {
            "addAccountFeatures": {
              "value": function () { return this.add_account_features.apply(this, arguments); }
            },
            "addAccountFeaturesVarargs": {
              "value": function () { return this.add_account_features_varargs.apply(this, arguments); }
            },
            "addChannelFeatures": {
              "value": function () { return this.add_channel_features.apply(this, arguments); }
            },
            "addChannelFeaturesVarargs": {
              "value": function () { return this.add_channel_features_varargs.apply(this, arguments); }
            },
            "addConnectionFeatures": {
              "value": function () { return this.add_connection_features.apply(this, arguments); }
            },
            "addConnectionFeaturesVarargs": {
              "value": function () { return this.add_connection_features_varargs.apply(this, arguments); }
            },
            "addContactFeatures": {
              "value": function () { return this.add_contact_features.apply(this, arguments); }
            },
            "addContactFeaturesVarargs": {
              "value": function () { return this.add_contact_features_varargs.apply(this, arguments); }
            },
            "dupAccountFeatures": {
              "value": function () { return this.dup_account_features.apply(this, arguments); }
            },
            "dupChannelFeatures": {
              "value": function () { return this.dup_channel_features.apply(this, arguments); }
            },
            "dupConnectionFeatures": {
              "value": function () { return this.dup_connection_features.apply(this, arguments); }
            },
            "dupContactFeatures": {
              "value": function () { return this.dup_contact_features.apply(this, arguments); }
            },
            "ensureAccount": {
              "value": function () { return this.ensure_account.apply(this, arguments); }
            },
            "ensureChannel": {
              "value": function () { return this.ensure_channel.apply(this, arguments); }
            },
            "ensureConnection": {
              "value": function () { return this.ensure_connection.apply(this, arguments); }
            },
            "ensureContact": {
              "value": function () { return this.ensure_contact.apply(this, arguments); }
            },
            "ensureContactByIdAsync": {
              "value": function () { return this.ensure_contact_by_id_async.apply(this, arguments); }
            },
            "ensureContactByIdFinish": {
              "value": function () { return this.ensure_contact_by_id_finish.apply(this, arguments); }
            },
            "getDbusDaemon": {
              "value": function () { return this.get_dbus_daemon.apply(this, arguments); }
            },
            "upgradeContactsAsync": {
              "value": function () { return this.upgrade_contacts_async.apply(this, arguments); }
            },
            "upgradeContactsFinish": {
              "value": function () { return this.upgrade_contacts_finish.apply(this, arguments); }
            },
            "dbusDaemon": {
              "get": function () { return this.dbus_daemon; },
              "set": function (value) { this.dbus_daemon = value; }
            }
          },
          "static": {}
        },
        "SimpleHandler": {
          "prototype": {
            "bypassApproval": {
              "get": function () { return this.bypass_approval; },
              "set": function (value) { this.bypass_approval = value; }
            },
            "userData": {
              "get": function () { return this.user_data; },
              "set": function (value) { this.user_data = value; }
            }
          },
          "static": {}
        },
        "SimpleObserver": {
          "prototype": {
            "userData": {
              "get": function () { return this.user_data; },
              "set": function (value) { this.user_data = value; }
            }
          },
          "static": {}
        },
        "StreamTubeChannel": {
          "prototype": {
            "acceptAsync": {
              "value": function () { return this.accept_async.apply(this, arguments); }
            },
            "acceptFinish": {
              "value": function () { return this.accept_finish.apply(this, arguments); }
            },
            "dupParametersVardict": {
              "value": function () { return this.dup_parameters_vardict.apply(this, arguments); }
            },
            "getParameters": {
              "value": function () { return this.get_parameters.apply(this, arguments); }
            },
            "getService": {
              "value": function () { return this.get_service.apply(this, arguments); }
            },
            "offerAsync": {
              "value": function () { return this.offer_async.apply(this, arguments); }
            },
            "offerFinish": {
              "value": function () { return this.offer_finish.apply(this, arguments); }
            },
            "parametersVardict": {
              "get": function () { return this.parameters_vardict; },
              "set": function (value) { this.parameters_vardict = value; }
            }
          },
          "static": {}
        },
        "StreamTubeConnection": {
          "prototype": {
            "getChannel": {
              "value": function () { return this.get_channel.apply(this, arguments); }
            },
            "getContact": {
              "value": function () { return this.get_contact.apply(this, arguments); }
            },
            "getSocketConnection": {
              "value": function () { return this.get_socket_connection.apply(this, arguments); }
            },
            "socketConnection": {
              "get": function () { return this.socket_connection; },
              "set": function (value) { this.socket_connection = value; }
            }
          },
          "static": {}
        },
        "TLSCertificate": {
          "prototype": {
            "acceptAsync": {
              "value": function () { return this.accept_async.apply(this, arguments); }
            },
            "acceptFinish": {
              "value": function () { return this.accept_finish.apply(this, arguments); }
            },
            "addRejection": {
              "value": function () { return this.add_rejection.apply(this, arguments); }
            },
            "getCertData": {
              "value": function () { return this.get_cert_data.apply(this, arguments); }
            },
            "getCertType": {
              "value": function () { return this.get_cert_type.apply(this, arguments); }
            },
            "getNthRejection": {
              "value": function () { return this.get_nth_rejection.apply(this, arguments); }
            },
            "getRejection": {
              "value": function () { return this.get_rejection.apply(this, arguments); }
            },
            "getState": {
              "value": function () { return this.get_state.apply(this, arguments); }
            },
            "rejectAsync": {
              "value": function () { return this.reject_async.apply(this, arguments); }
            },
            "rejectFinish": {
              "value": function () { return this.reject_finish.apply(this, arguments); }
            },
            "certData": {
              "get": function () { return this.cert_data; },
              "set": function (value) { this.cert_data = value; }
            },
            "certType": {
              "get": function () { return this.cert_type; },
              "set": function (value) { this.cert_type = value; }
            }
          },
          "static": {
            "getFeatureQuarkCore": {
              "value": function () { return this.get_feature_quark_core.apply(this, arguments); }
            },
            "initKnownInterfaces": {
              "value": function () { return this.init_known_interfaces.apply(this, arguments); }
            }
          }
        },
        "TLSCertificateRejection": {
          "prototype": {
            "getDbusError": {
              "value": function () { return this.get_dbus_error.apply(this, arguments); }
            },
            "getDetails": {
              "value": function () { return this.get_details.apply(this, arguments); }
            },
            "getError": {
              "value": function () { return this.get_error.apply(this, arguments); }
            },
            "getReason": {
              "value": function () { return this.get_reason.apply(this, arguments); }
            },
            "raiseError": {
              "value": function () { return this.raise_error.apply(this, arguments); }
            },
            "dbusError": {
              "get": function () { return this.dbus_error; },
              "set": function (value) { this.dbus_error = value; }
            }
          },
          "static": {}
        },
        "TextChannel": {
          "prototype": {
            "ackAllPendingMessagesAsync": {
              "value": function () { return this.ack_all_pending_messages_async.apply(this, arguments); }
            },
            "ackAllPendingMessagesFinish": {
              "value": function () { return this.ack_all_pending_messages_finish.apply(this, arguments); }
            },
            "ackMessageAsync": {
              "value": function () { return this.ack_message_async.apply(this, arguments); }
            },
            "ackMessageFinish": {
              "value": function () { return this.ack_message_finish.apply(this, arguments); }
            },
            "ackMessagesAsync": {
              "value": function () { return this.ack_messages_async.apply(this, arguments); }
            },
            "ackMessagesFinish": {
              "value": function () { return this.ack_messages_finish.apply(this, arguments); }
            },
            "dupPendingMessages": {
              "value": function () { return this.dup_pending_messages.apply(this, arguments); }
            },
            "getChatState": {
              "value": function () { return this.get_chat_state.apply(this, arguments); }
            },
            "getDeliveryReportingSupport": {
              "value": function () { return this.get_delivery_reporting_support.apply(this, arguments); }
            },
            "getMessagePartSupportFlags": {
              "value": function () { return this.get_message_part_support_flags.apply(this, arguments); }
            },
            "getMessageTypes": {
              "value": function () { return this.get_message_types.apply(this, arguments); }
            },
            "getPendingMessages": {
              "value": function () { return this.get_pending_messages.apply(this, arguments); }
            },
            "getSmsFlash": {
              "value": function () { return this.get_sms_flash.apply(this, arguments); }
            },
            "getSmsLengthAsync": {
              "value": function () { return this.get_sms_length_async.apply(this, arguments); }
            },
            "getSmsLengthFinish": {
              "value": function () { return this.get_sms_length_finish.apply(this, arguments); }
            },
            "getSupportedContentTypes": {
              "value": function () { return this.get_supported_content_types.apply(this, arguments); }
            },
            "isSmsChannel": {
              "get": function () { return this.is_sms_channel; },
              "set": function (value) { this.is_sms_channel = value; }
            },
            "sendMessageAsync": {
              "value": function () { return this.send_message_async.apply(this, arguments); }
            },
            "sendMessageFinish": {
              "value": function () { return this.send_message_finish.apply(this, arguments); }
            },
            "setChatStateAsync": {
              "value": function () { return this.set_chat_state_async.apply(this, arguments); }
            },
            "setChatStateFinish": {
              "value": function () { return this.set_chat_state_finish.apply(this, arguments); }
            },
            "supportsMessageType": {
              "value": function () { return this.supports_message_type.apply(this, arguments); }
            },
            "deliveryReportingSupport": {
              "get": function () { return this.delivery_reporting_support; },
              "set": function (value) { this.delivery_reporting_support = value; }
            },
            "messagePartSupportFlags": {
              "get": function () { return this.message_part_support_flags; },
              "set": function (value) { this.message_part_support_flags = value; }
            },
            "messageTypes": {
              "get": function () { return this.message_types; },
              "set": function (value) { this.message_types = value; }
            },
            "smsFlash": {
              "get": function () { return this.sms_flash; },
              "set": function (value) { this.sms_flash = value; }
            },
            "supportedContentTypes": {
              "get": function () { return this.supported_content_types; },
              "set": function (value) { this.supported_content_types = value; }
            }
          },
          "static": {
            "getFeatureQuarkChatStates": {
              "value": function () { return this.get_feature_quark_chat_states.apply(this, arguments); }
            },
            "getFeatureQuarkIncomingMessages": {
              "value": function () { return this.get_feature_quark_incoming_messages.apply(this, arguments); }
            },
            "getFeatureQuarkSms": {
              "value": function () { return this.get_feature_quark_sms.apply(this, arguments); }
            }
          }
        }
      },
      "static": {
        "asvDump": {
          "value": function () { return this.asv_dump.apply(this, arguments); }
        },
        "asvGetBoolean": {
          "value": function () { return this.asv_get_boolean.apply(this, arguments); }
        },
        "asvGetBoxed": {
          "value": function () { return this.asv_get_boxed.apply(this, arguments); }
        },
        "asvGetBytes": {
          "value": function () { return this.asv_get_bytes.apply(this, arguments); }
        },
        "asvGetDouble": {
          "value": function () { return this.asv_get_double.apply(this, arguments); }
        },
        "asvGetInt32": {
          "value": function () { return this.asv_get_int32.apply(this, arguments); }
        },
        "asvGetInt64": {
          "value": function () { return this.asv_get_int64.apply(this, arguments); }
        },
        "asvGetObjectPath": {
          "value": function () { return this.asv_get_object_path.apply(this, arguments); }
        },
        "asvGetString": {
          "value": function () { return this.asv_get_string.apply(this, arguments); }
        },
        "asvGetStrv": {
          "value": function () { return this.asv_get_strv.apply(this, arguments); }
        },
        "asvGetUint32": {
          "value": function () { return this.asv_get_uint32.apply(this, arguments); }
        },
        "asvGetUint64": {
          "value": function () { return this.asv_get_uint64.apply(this, arguments); }
        },
        "asvLookup": {
          "value": function () { return this.asv_lookup.apply(this, arguments); }
        },
        "asvNew": {
          "value": function () { return this.asv_new.apply(this, arguments); }
        },
        "asvSetBoolean": {
          "value": function () { return this.asv_set_boolean.apply(this, arguments); }
        },
        "asvSetBoxed": {
          "value": function () { return this.asv_set_boxed.apply(this, arguments); }
        },
        "asvSetBytes": {
          "value": function () { return this.asv_set_bytes.apply(this, arguments); }
        },
        "asvSetDouble": {
          "value": function () { return this.asv_set_double.apply(this, arguments); }
        },
        "asvSetInt32": {
          "value": function () { return this.asv_set_int32.apply(this, arguments); }
        },
        "asvSetInt64": {
          "value": function () { return this.asv_set_int64.apply(this, arguments); }
        },
        "asvSetObjectPath": {
          "value": function () { return this.asv_set_object_path.apply(this, arguments); }
        },
        "asvSetStaticBoxed": {
          "value": function () { return this.asv_set_static_boxed.apply(this, arguments); }
        },
        "asvSetStaticObjectPath": {
          "value": function () { return this.asv_set_static_object_path.apply(this, arguments); }
        },
        "asvSetStaticString": {
          "value": function () { return this.asv_set_static_string.apply(this, arguments); }
        },
        "asvSetString": {
          "value": function () { return this.asv_set_string.apply(this, arguments); }
        },
        "asvSetStrv": {
          "value": function () { return this.asv_set_strv.apply(this, arguments); }
        },
        "asvSetUint32": {
          "value": function () { return this.asv_set_uint32.apply(this, arguments); }
        },
        "asvSetUint64": {
          "value": function () { return this.asv_set_uint64.apply(this, arguments); }
        },
        "asvTakeBoxed": {
          "value": function () { return this.asv_take_boxed.apply(this, arguments); }
        },
        "asvTakeBytes": {
          "value": function () { return this.asv_take_bytes.apply(this, arguments); }
        },
        "asvTakeObjectPath": {
          "value": function () { return this.asv_take_object_path.apply(this, arguments); }
        },
        "asvTakeString": {
          "value": function () { return this.asv_take_string.apply(this, arguments); }
        },
        "contactInfoListCopy": {
          "value": function () { return this.contact_info_list_copy.apply(this, arguments); }
        },
        "contactInfoListFree": {
          "value": function () { return this.contact_info_list_free.apply(this, arguments); }
        },
        "contactInfoSpecListCopy": {
          "value": function () { return this.contact_info_spec_list_copy.apply(this, arguments); }
        },
        "contactInfoSpecListFree": {
          "value": function () { return this.contact_info_spec_list_free.apply(this, arguments); }
        },
        "contactsMixinAddContactAttributesIface": {
          "value": function () { return this.contacts_mixin_add_contact_attributes_iface.apply(this, arguments); }
        },
        "contactsMixinClassGetOffsetQuark": {
          "value": function () { return this.contacts_mixin_class_get_offset_quark.apply(this, arguments); }
        },
        "contactsMixinClassInit": {
          "value": function () { return this.contacts_mixin_class_init.apply(this, arguments); }
        },
        "contactsMixinFinalize": {
          "value": function () { return this.contacts_mixin_finalize.apply(this, arguments); }
        },
        "contactsMixinGetContactAttributes": {
          "value": function () { return this.contacts_mixin_get_contact_attributes.apply(this, arguments); }
        },
        "contactsMixinGetOffsetQuark": {
          "value": function () { return this.contacts_mixin_get_offset_quark.apply(this, arguments); }
        },
        "contactsMixinIfaceInit": {
          "value": function () { return this.contacts_mixin_iface_init.apply(this, arguments); }
        },
        "contactsMixinInit": {
          "value": function () { return this.contacts_mixin_init.apply(this, arguments); }
        },
        "contactsMixinSetContactAttribute": {
          "value": function () { return this.contacts_mixin_set_contact_attribute.apply(this, arguments); }
        },
        "dbusCheckValidBusName": {
          "value": function () { return this.dbus_check_valid_bus_name.apply(this, arguments); }
        },
        "dbusCheckValidInterfaceName": {
          "value": function () { return this.dbus_check_valid_interface_name.apply(this, arguments); }
        },
        "dbusCheckValidMemberName": {
          "value": function () { return this.dbus_check_valid_member_name.apply(this, arguments); }
        },
        "dbusCheckValidObjectPath": {
          "value": function () { return this.dbus_check_valid_object_path.apply(this, arguments); }
        },
        "dbusErrorsQuark": {
          "value": function () { return this.dbus_errors_quark.apply(this, arguments); }
        },
        "dbusGMethodReturnNotImplemented": {
          "value": function () { return this.dbus_g_method_return_not_implemented.apply(this, arguments); }
        },
        "dbusPropertiesMixinClassInit": {
          "value": function () { return this.dbus_properties_mixin_class_init.apply(this, arguments); }
        },
        "dbusPropertiesMixinDupAll": {
          "value": function () { return this.dbus_properties_mixin_dup_all.apply(this, arguments); }
        },
        "dbusPropertiesMixinEmitPropertiesChanged": {
          "value": function () { return this.dbus_properties_mixin_emit_properties_changed.apply(this, arguments); }
        },
        "dbusPropertiesMixinEmitPropertiesChangedVarargs": {
          "value": function () { return this.dbus_properties_mixin_emit_properties_changed_varargs.apply(this, arguments); }
        },
        "dbusPropertiesMixinFillPropertiesHash": {
          "value": function () { return this.dbus_properties_mixin_fill_properties_hash.apply(this, arguments); }
        },
        "dbusPropertiesMixinGet": {
          "value": function () { return this.dbus_properties_mixin_get.apply(this, arguments); }
        },
        "dbusPropertiesMixinGetterGobjectProperties": {
          "value": function () { return this.dbus_properties_mixin_getter_gobject_properties.apply(this, arguments); }
        },
        "dbusPropertiesMixinIfaceInit": {
          "value": function () { return this.dbus_properties_mixin_iface_init.apply(this, arguments); }
        },
        "dbusPropertiesMixinImplementInterface": {
          "value": function () { return this.dbus_properties_mixin_implement_interface.apply(this, arguments); }
        },
        "dbusPropertiesMixinMakePropertiesHash": {
          "value": function () { return this.dbus_properties_mixin_make_properties_hash.apply(this, arguments); }
        },
        "dbusPropertiesMixinSet": {
          "value": function () { return this.dbus_properties_mixin_set.apply(this, arguments); }
        },
        "dbusPropertiesMixinSetterGobjectProperties": {
          "value": function () { return this.dbus_properties_mixin_setter_gobject_properties.apply(this, arguments); }
        },
        "debugDivertMessages": {
          "value": function () { return this.debug_divert_messages.apply(this, arguments); }
        },
        "debugSetAllFlags": {
          "value": function () { return this.debug_set_all_flags.apply(this, arguments); }
        },
        "debugSetFlags": {
          "value": function () { return this.debug_set_flags.apply(this, arguments); }
        },
        "debugSetFlagsFromEnv": {
          "value": function () { return this.debug_set_flags_from_env.apply(this, arguments); }
        },
        "debugSetFlagsFromString": {
          "value": function () { return this.debug_set_flags_from_string.apply(this, arguments); }
        },
        "debugSetPersistent": {
          "value": function () { return this.debug_set_persistent.apply(this, arguments); }
        },
        "debugTimestampedLogHandler": {
          "value": function () { return this.debug_timestamped_log_handler.apply(this, arguments); }
        },
        "errorGetDbusName": {
          "value": function () { return this.error_get_dbus_name.apply(this, arguments); }
        },
        "errorQuark": {
          "value": function () { return this.error_quark.apply(this, arguments); }
        },
        "errorsDisconnectedQuark": {
          "value": function () { return this.errors_disconnected_quark.apply(this, arguments); }
        },
        "errorsQuark": {
          "value": function () { return this.errors_quark.apply(this, arguments); }
        },
        "errorsRemovedFromGroupQuark": {
          "value": function () { return this.errors_removed_from_group_quark.apply(this, arguments); }
        },
        "escapeAsIdentifier": {
          "value": function () { return this.escape_as_identifier.apply(this, arguments); }
        },
        "externalGroupMixinFinalize": {
          "value": function () { return this.external_group_mixin_finalize.apply(this, arguments); }
        },
        "externalGroupMixinGetDbusProperty": {
          "value": function () { return this.external_group_mixin_get_dbus_property.apply(this, arguments); }
        },
        "externalGroupMixinIfaceInit": {
          "value": function () { return this.external_group_mixin_iface_init.apply(this, arguments); }
        },
        "externalGroupMixinInit": {
          "value": function () { return this.external_group_mixin_init.apply(this, arguments); }
        },
        "externalGroupMixinInitDbusProperties": {
          "value": function () { return this.external_group_mixin_init_dbus_properties.apply(this, arguments); }
        },
        "gHashTableUpdate": {
          "value": function () { return this.g_hash_table_update.apply(this, arguments); }
        },
        "gKeyFileGetInt64": {
          "value": function () { return this.g_key_file_get_int64.apply(this, arguments); }
        },
        "gKeyFileGetUint64": {
          "value": function () { return this.g_key_file_get_uint64.apply(this, arguments); }
        },
        "gPtrArrayContains": {
          "value": function () { return this.g_ptr_array_contains.apply(this, arguments); }
        },
        "gPtrArrayExtend": {
          "value": function () { return this.g_ptr_array_extend.apply(this, arguments); }
        },
        "gSetErrorInvalidHandleType": {
          "value": function () { return this.g_set_error_invalid_handle_type.apply(this, arguments); }
        },
        "gSetErrorUnsupportedHandleType": {
          "value": function () { return this.g_set_error_unsupported_handle_type.apply(this, arguments); }
        },
        "gSignalConnectObject": {
          "value": function () { return this.g_signal_connect_object.apply(this, arguments); }
        },
        "gValueSliceDup": {
          "value": function () { return this.g_value_slice_dup.apply(this, arguments); }
        },
        "gValueSliceFree": {
          "value": function () { return this.g_value_slice_free.apply(this, arguments); }
        },
        "getBus": {
          "value": function () { return this.get_bus.apply(this, arguments); }
        },
        "getBusProxy": {
          "value": function () { return this.get_bus_proxy.apply(this, arguments); }
        },
        "groupMixinAddHandleOwner": {
          "value": function () { return this.group_mixin_add_handle_owner.apply(this, arguments); }
        },
        "groupMixinAddHandleOwners": {
          "value": function () { return this.group_mixin_add_handle_owners.apply(this, arguments); }
        },
        "groupMixinAddMembers": {
          "value": function () { return this.group_mixin_add_members.apply(this, arguments); }
        },
        "groupMixinChangeFlags": {
          "value": function () { return this.group_mixin_change_flags.apply(this, arguments); }
        },
        "groupMixinChangeMembers": {
          "value": function () { return this.group_mixin_change_members.apply(this, arguments); }
        },
        "groupMixinChangeMembersDetailed": {
          "value": function () { return this.group_mixin_change_members_detailed.apply(this, arguments); }
        },
        "groupMixinChangeSelfHandle": {
          "value": function () { return this.group_mixin_change_self_handle.apply(this, arguments); }
        },
        "groupMixinClassAllowSelfRemoval": {
          "value": function () { return this.group_mixin_class_allow_self_removal.apply(this, arguments); }
        },
        "groupMixinClassGetOffsetQuark": {
          "value": function () { return this.group_mixin_class_get_offset_quark.apply(this, arguments); }
        },
        "groupMixinClassInit": {
          "value": function () { return this.group_mixin_class_init.apply(this, arguments); }
        },
        "groupMixinClassSetRemoveWithReasonFunc": {
          "value": function () { return this.group_mixin_class_set_remove_with_reason_func.apply(this, arguments); }
        },
        "groupMixinFinalize": {
          "value": function () { return this.group_mixin_finalize.apply(this, arguments); }
        },
        "groupMixinGetAllMembers": {
          "value": function () { return this.group_mixin_get_all_members.apply(this, arguments); }
        },
        "groupMixinGetDbusProperty": {
          "value": function () { return this.group_mixin_get_dbus_property.apply(this, arguments); }
        },
        "groupMixinGetGroupFlags": {
          "value": function () { return this.group_mixin_get_group_flags.apply(this, arguments); }
        },
        "groupMixinGetHandleOwners": {
          "value": function () { return this.group_mixin_get_handle_owners.apply(this, arguments); }
        },
        "groupMixinGetLocalPendingMembers": {
          "value": function () { return this.group_mixin_get_local_pending_members.apply(this, arguments); }
        },
        "groupMixinGetLocalPendingMembersWithInfo": {
          "value": function () { return this.group_mixin_get_local_pending_members_with_info.apply(this, arguments); }
        },
        "groupMixinGetMembers": {
          "value": function () { return this.group_mixin_get_members.apply(this, arguments); }
        },
        "groupMixinGetOffsetQuark": {
          "value": function () { return this.group_mixin_get_offset_quark.apply(this, arguments); }
        },
        "groupMixinGetRemotePendingMembers": {
          "value": function () { return this.group_mixin_get_remote_pending_members.apply(this, arguments); }
        },
        "groupMixinGetSelfHandle": {
          "value": function () { return this.group_mixin_get_self_handle.apply(this, arguments); }
        },
        "groupMixinIfaceInit": {
          "value": function () { return this.group_mixin_iface_init.apply(this, arguments); }
        },
        "groupMixinInit": {
          "value": function () { return this.group_mixin_init.apply(this, arguments); }
        },
        "groupMixinInitDbusProperties": {
          "value": function () { return this.group_mixin_init_dbus_properties.apply(this, arguments); }
        },
        "groupMixinRemoveMembers": {
          "value": function () { return this.group_mixin_remove_members.apply(this, arguments); }
        },
        "groupMixinRemoveMembersWithReason": {
          "value": function () { return this.group_mixin_remove_members_with_reason.apply(this, arguments); }
        },
        "handleClientHold": {
          "value": function () { return this.handle_client_hold.apply(this, arguments); }
        },
        "handleClientRelease": {
          "value": function () { return this.handle_client_release.apply(this, arguments); }
        },
        "handleEnsure": {
          "value": function () { return this.handle_ensure.apply(this, arguments); }
        },
        "handleEnsureAsync": {
          "value": function () { return this.handle_ensure_async.apply(this, arguments); }
        },
        "handleEnsureFinish": {
          "value": function () { return this.handle_ensure_finish.apply(this, arguments); }
        },
        "handleGetQdata": {
          "value": function () { return this.handle_get_qdata.apply(this, arguments); }
        },
        "handleInspect": {
          "value": function () { return this.handle_inspect.apply(this, arguments); }
        },
        "handleIsValid": {
          "value": function () { return this.handle_is_valid.apply(this, arguments); }
        },
        "handleLookup": {
          "value": function () { return this.handle_lookup.apply(this, arguments); }
        },
        "handleRef": {
          "value": function () { return this.handle_ref.apply(this, arguments); }
        },
        "handleSetQdata": {
          "value": function () { return this.handle_set_qdata.apply(this, arguments); }
        },
        "handleTypeIsValid": {
          "value": function () { return this.handle_type_is_valid.apply(this, arguments); }
        },
        "handleTypeToString": {
          "value": function () { return this.handle_type_to_string.apply(this, arguments); }
        },
        "handleUnref": {
          "value": function () { return this.handle_unref.apply(this, arguments); }
        },
        "handlesAreValid": {
          "value": function () { return this.handles_are_valid.apply(this, arguments); }
        },
        "handlesClientHold": {
          "value": function () { return this.handles_client_hold.apply(this, arguments); }
        },
        "handlesClientRelease": {
          "value": function () { return this.handles_client_release.apply(this, arguments); }
        },
        "handlesRef": {
          "value": function () { return this.handles_ref.apply(this, arguments); }
        },
        "handlesSupportedAndValid": {
          "value": function () { return this.handles_supported_and_valid.apply(this, arguments); }
        },
        "handlesUnref": {
          "value": function () { return this.handles_unref.apply(this, arguments); }
        },
        "ifaceQuarkAccount": {
          "value": function () { return this.iface_quark_account.apply(this, arguments); }
        },
        "ifaceQuarkAccountInterfaceAddressing": {
          "value": function () { return this.iface_quark_account_interface_addressing.apply(this, arguments); }
        },
        "ifaceQuarkAccountInterfaceAvatar": {
          "value": function () { return this.iface_quark_account_interface_avatar.apply(this, arguments); }
        },
        "ifaceQuarkAccountInterfaceStorage": {
          "value": function () { return this.iface_quark_account_interface_storage.apply(this, arguments); }
        },
        "ifaceQuarkAccountManager": {
          "value": function () { return this.iface_quark_account_manager.apply(this, arguments); }
        },
        "ifaceQuarkAuthenticationTlsCertificate": {
          "value": function () { return this.iface_quark_authentication_tls_certificate.apply(this, arguments); }
        },
        "ifaceQuarkCallContent": {
          "value": function () { return this.iface_quark_call_content.apply(this, arguments); }
        },
        "ifaceQuarkCallContentInterfaceAudioControl": {
          "value": function () { return this.iface_quark_call_content_interface_audio_control.apply(this, arguments); }
        },
        "ifaceQuarkCallContentInterfaceDtmf": {
          "value": function () { return this.iface_quark_call_content_interface_dtmf.apply(this, arguments); }
        },
        "ifaceQuarkCallContentInterfaceMedia": {
          "value": function () { return this.iface_quark_call_content_interface_media.apply(this, arguments); }
        },
        "ifaceQuarkCallContentInterfaceVideoControl": {
          "value": function () { return this.iface_quark_call_content_interface_video_control.apply(this, arguments); }
        },
        "ifaceQuarkCallContentMediaDescription": {
          "value": function () { return this.iface_quark_call_content_media_description.apply(this, arguments); }
        },
        "ifaceQuarkCallContentMediaDescriptionInterfaceRtcpExtendedReports": {
          "value": function () { return this.iface_quark_call_content_media_description_interface_rtcp_extended_reports.apply(this, arguments); }
        },
        "ifaceQuarkCallContentMediaDescriptionInterfaceRtcpFeedback": {
          "value": function () { return this.iface_quark_call_content_media_description_interface_rtcp_feedback.apply(this, arguments); }
        },
        "ifaceQuarkCallContentMediaDescriptionInterfaceRtpHeaderExtensions": {
          "value": function () { return this.iface_quark_call_content_media_description_interface_rtp_header_extensions.apply(this, arguments); }
        },
        "ifaceQuarkCallStream": {
          "value": function () { return this.iface_quark_call_stream.apply(this, arguments); }
        },
        "ifaceQuarkCallStreamEndpoint": {
          "value": function () { return this.iface_quark_call_stream_endpoint.apply(this, arguments); }
        },
        "ifaceQuarkCallStreamInterfaceMedia": {
          "value": function () { return this.iface_quark_call_stream_interface_media.apply(this, arguments); }
        },
        "ifaceQuarkChannel": {
          "value": function () { return this.iface_quark_channel.apply(this, arguments); }
        },
        "ifaceQuarkChannelDispatchOperation": {
          "value": function () { return this.iface_quark_channel_dispatch_operation.apply(this, arguments); }
        },
        "ifaceQuarkChannelDispatcher": {
          "value": function () { return this.iface_quark_channel_dispatcher.apply(this, arguments); }
        },
        "ifaceQuarkChannelDispatcherInterfaceMessages1": {
          "value": function () { return this.iface_quark_channel_dispatcher_interface_messages1.apply(this, arguments); }
        },
        "ifaceQuarkChannelDispatcherInterfaceOperationList": {
          "value": function () { return this.iface_quark_channel_dispatcher_interface_operation_list.apply(this, arguments); }
        },
        "ifaceQuarkChannelInterfaceAnonymity": {
          "value": function () { return this.iface_quark_channel_interface_anonymity.apply(this, arguments); }
        },
        "ifaceQuarkChannelInterfaceCallState": {
          "value": function () { return this.iface_quark_channel_interface_call_state.apply(this, arguments); }
        },
        "ifaceQuarkChannelInterfaceCaptchaAuthentication": {
          "value": function () { return this.iface_quark_channel_interface_captcha_authentication.apply(this, arguments); }
        },
        "ifaceQuarkChannelInterfaceChatState": {
          "value": function () { return this.iface_quark_channel_interface_chat_state.apply(this, arguments); }
        },
        "ifaceQuarkChannelInterfaceConference": {
          "value": function () { return this.iface_quark_channel_interface_conference.apply(this, arguments); }
        },
        "ifaceQuarkChannelInterfaceDestroyable": {
          "value": function () { return this.iface_quark_channel_interface_destroyable.apply(this, arguments); }
        },
        "ifaceQuarkChannelInterfaceDtmf": {
          "value": function () { return this.iface_quark_channel_interface_dtmf.apply(this, arguments); }
        },
        "ifaceQuarkChannelInterfaceFileTransferMetadata": {
          "value": function () { return this.iface_quark_channel_interface_file_transfer_metadata.apply(this, arguments); }
        },
        "ifaceQuarkChannelInterfaceGroup": {
          "value": function () { return this.iface_quark_channel_interface_group.apply(this, arguments); }
        },
        "ifaceQuarkChannelInterfaceHold": {
          "value": function () { return this.iface_quark_channel_interface_hold.apply(this, arguments); }
        },
        "ifaceQuarkChannelInterfaceMediaSignalling": {
          "value": function () { return this.iface_quark_channel_interface_media_signalling.apply(this, arguments); }
        },
        "ifaceQuarkChannelInterfaceMessages": {
          "value": function () { return this.iface_quark_channel_interface_messages.apply(this, arguments); }
        },
        "ifaceQuarkChannelInterfacePassword": {
          "value": function () { return this.iface_quark_channel_interface_password.apply(this, arguments); }
        },
        "ifaceQuarkChannelInterfaceRoom": {
          "value": function () { return this.iface_quark_channel_interface_room.apply(this, arguments); }
        },
        "ifaceQuarkChannelInterfaceRoomConfig": {
          "value": function () { return this.iface_quark_channel_interface_room_config.apply(this, arguments); }
        },
        "ifaceQuarkChannelInterfaceSaslAuthentication": {
          "value": function () { return this.iface_quark_channel_interface_sasl_authentication.apply(this, arguments); }
        },
        "ifaceQuarkChannelInterfaceSecurable": {
          "value": function () { return this.iface_quark_channel_interface_securable.apply(this, arguments); }
        },
        "ifaceQuarkChannelInterfaceServicePoint": {
          "value": function () { return this.iface_quark_channel_interface_service_point.apply(this, arguments); }
        },
        "ifaceQuarkChannelInterfaceSms": {
          "value": function () { return this.iface_quark_channel_interface_sms.apply(this, arguments); }
        },
        "ifaceQuarkChannelInterfaceSubject": {
          "value": function () { return this.iface_quark_channel_interface_subject.apply(this, arguments); }
        },
        "ifaceQuarkChannelInterfaceTube": {
          "value": function () { return this.iface_quark_channel_interface_tube.apply(this, arguments); }
        },
        "ifaceQuarkChannelRequest": {
          "value": function () { return this.iface_quark_channel_request.apply(this, arguments); }
        },
        "ifaceQuarkChannelTypeCall": {
          "value": function () { return this.iface_quark_channel_type_call.apply(this, arguments); }
        },
        "ifaceQuarkChannelTypeContactList": {
          "value": function () { return this.iface_quark_channel_type_contact_list.apply(this, arguments); }
        },
        "ifaceQuarkChannelTypeContactSearch": {
          "value": function () { return this.iface_quark_channel_type_contact_search.apply(this, arguments); }
        },
        "ifaceQuarkChannelTypeDbusTube": {
          "value": function () { return this.iface_quark_channel_type_dbus_tube.apply(this, arguments); }
        },
        "ifaceQuarkChannelTypeFileTransfer": {
          "value": function () { return this.iface_quark_channel_type_file_transfer.apply(this, arguments); }
        },
        "ifaceQuarkChannelTypeRoomList": {
          "value": function () { return this.iface_quark_channel_type_room_list.apply(this, arguments); }
        },
        "ifaceQuarkChannelTypeServerAuthentication": {
          "value": function () { return this.iface_quark_channel_type_server_authentication.apply(this, arguments); }
        },
        "ifaceQuarkChannelTypeServerTlsConnection": {
          "value": function () { return this.iface_quark_channel_type_server_tls_connection.apply(this, arguments); }
        },
        "ifaceQuarkChannelTypeStreamTube": {
          "value": function () { return this.iface_quark_channel_type_stream_tube.apply(this, arguments); }
        },
        "ifaceQuarkChannelTypeStreamedMedia": {
          "value": function () { return this.iface_quark_channel_type_streamed_media.apply(this, arguments); }
        },
        "ifaceQuarkChannelTypeText": {
          "value": function () { return this.iface_quark_channel_type_text.apply(this, arguments); }
        },
        "ifaceQuarkChannelTypeTubes": {
          "value": function () { return this.iface_quark_channel_type_tubes.apply(this, arguments); }
        },
        "ifaceQuarkClient": {
          "value": function () { return this.iface_quark_client.apply(this, arguments); }
        },
        "ifaceQuarkClientApprover": {
          "value": function () { return this.iface_quark_client_approver.apply(this, arguments); }
        },
        "ifaceQuarkClientHandler": {
          "value": function () { return this.iface_quark_client_handler.apply(this, arguments); }
        },
        "ifaceQuarkClientInterfaceRequests": {
          "value": function () { return this.iface_quark_client_interface_requests.apply(this, arguments); }
        },
        "ifaceQuarkClientObserver": {
          "value": function () { return this.iface_quark_client_observer.apply(this, arguments); }
        },
        "ifaceQuarkConnection": {
          "value": function () { return this.iface_quark_connection.apply(this, arguments); }
        },
        "ifaceQuarkConnectionInterfaceAddressing": {
          "value": function () { return this.iface_quark_connection_interface_addressing.apply(this, arguments); }
        },
        "ifaceQuarkConnectionInterfaceAliasing": {
          "value": function () { return this.iface_quark_connection_interface_aliasing.apply(this, arguments); }
        },
        "ifaceQuarkConnectionInterfaceAnonymity": {
          "value": function () { return this.iface_quark_connection_interface_anonymity.apply(this, arguments); }
        },
        "ifaceQuarkConnectionInterfaceAvatars": {
          "value": function () { return this.iface_quark_connection_interface_avatars.apply(this, arguments); }
        },
        "ifaceQuarkConnectionInterfaceBalance": {
          "value": function () { return this.iface_quark_connection_interface_balance.apply(this, arguments); }
        },
        "ifaceQuarkConnectionInterfaceCapabilities": {
          "value": function () { return this.iface_quark_connection_interface_capabilities.apply(this, arguments); }
        },
        "ifaceQuarkConnectionInterfaceCellular": {
          "value": function () { return this.iface_quark_connection_interface_cellular.apply(this, arguments); }
        },
        "ifaceQuarkConnectionInterfaceClientTypes": {
          "value": function () { return this.iface_quark_connection_interface_client_types.apply(this, arguments); }
        },
        "ifaceQuarkConnectionInterfaceContactBlocking": {
          "value": function () { return this.iface_quark_connection_interface_contact_blocking.apply(this, arguments); }
        },
        "ifaceQuarkConnectionInterfaceContactCapabilities": {
          "value": function () { return this.iface_quark_connection_interface_contact_capabilities.apply(this, arguments); }
        },
        "ifaceQuarkConnectionInterfaceContactGroups": {
          "value": function () { return this.iface_quark_connection_interface_contact_groups.apply(this, arguments); }
        },
        "ifaceQuarkConnectionInterfaceContactInfo": {
          "value": function () { return this.iface_quark_connection_interface_contact_info.apply(this, arguments); }
        },
        "ifaceQuarkConnectionInterfaceContactList": {
          "value": function () { return this.iface_quark_connection_interface_contact_list.apply(this, arguments); }
        },
        "ifaceQuarkConnectionInterfaceContacts": {
          "value": function () { return this.iface_quark_connection_interface_contacts.apply(this, arguments); }
        },
        "ifaceQuarkConnectionInterfaceLocation": {
          "value": function () { return this.iface_quark_connection_interface_location.apply(this, arguments); }
        },
        "ifaceQuarkConnectionInterfaceMailNotification": {
          "value": function () { return this.iface_quark_connection_interface_mail_notification.apply(this, arguments); }
        },
        "ifaceQuarkConnectionInterfacePowerSaving": {
          "value": function () { return this.iface_quark_connection_interface_power_saving.apply(this, arguments); }
        },
        "ifaceQuarkConnectionInterfacePresence": {
          "value": function () { return this.iface_quark_connection_interface_presence.apply(this, arguments); }
        },
        "ifaceQuarkConnectionInterfaceRenaming": {
          "value": function () { return this.iface_quark_connection_interface_renaming.apply(this, arguments); }
        },
        "ifaceQuarkConnectionInterfaceRequests": {
          "value": function () { return this.iface_quark_connection_interface_requests.apply(this, arguments); }
        },
        "ifaceQuarkConnectionInterfaceServicePoint": {
          "value": function () { return this.iface_quark_connection_interface_service_point.apply(this, arguments); }
        },
        "ifaceQuarkConnectionInterfaceSidecars1": {
          "value": function () { return this.iface_quark_connection_interface_sidecars1.apply(this, arguments); }
        },
        "ifaceQuarkConnectionInterfaceSimplePresence": {
          "value": function () { return this.iface_quark_connection_interface_simple_presence.apply(this, arguments); }
        },
        "ifaceQuarkConnectionManager": {
          "value": function () { return this.iface_quark_connection_manager.apply(this, arguments); }
        },
        "ifaceQuarkDbusDaemon": {
          "value": function () { return this.iface_quark_dbus_daemon.apply(this, arguments); }
        },
        "ifaceQuarkDbusIntrospectable": {
          "value": function () { return this.iface_quark_dbus_introspectable.apply(this, arguments); }
        },
        "ifaceQuarkDbusPeer": {
          "value": function () { return this.iface_quark_dbus_peer.apply(this, arguments); }
        },
        "ifaceQuarkDbusProperties": {
          "value": function () { return this.iface_quark_dbus_properties.apply(this, arguments); }
        },
        "ifaceQuarkDebug": {
          "value": function () { return this.iface_quark_debug.apply(this, arguments); }
        },
        "ifaceQuarkMediaSessionHandler": {
          "value": function () { return this.iface_quark_media_session_handler.apply(this, arguments); }
        },
        "ifaceQuarkMediaStreamHandler": {
          "value": function () { return this.iface_quark_media_stream_handler.apply(this, arguments); }
        },
        "ifaceQuarkPropertiesInterface": {
          "value": function () { return this.iface_quark_properties_interface.apply(this, arguments); }
        },
        "ifaceQuarkProtocol": {
          "value": function () { return this.iface_quark_protocol.apply(this, arguments); }
        },
        "ifaceQuarkProtocolInterfaceAddressing": {
          "value": function () { return this.iface_quark_protocol_interface_addressing.apply(this, arguments); }
        },
        "ifaceQuarkProtocolInterfaceAvatars": {
          "value": function () { return this.iface_quark_protocol_interface_avatars.apply(this, arguments); }
        },
        "ifaceQuarkProtocolInterfacePresence": {
          "value": function () { return this.iface_quark_protocol_interface_presence.apply(this, arguments); }
        },
        "intsetFromArray": {
          "value": function () { return this.intset_from_array.apply(this, arguments); }
        },
        "listConnectionManagers": {
          "value": function () { return this.list_connection_managers.apply(this, arguments); }
        },
        "listConnectionManagersAsync": {
          "value": function () { return this.list_connection_managers_async.apply(this, arguments); }
        },
        "listConnectionManagersFinish": {
          "value": function () { return this.list_connection_managers_finish.apply(this, arguments); }
        },
        "listConnectionNames": {
          "value": function () { return this.list_connection_names.apply(this, arguments); }
        },
        "mixinClassGetOffset": {
          "value": function () { return this.mixin_class_get_offset.apply(this, arguments); }
        },
        "mixinInstanceGetOffset": {
          "value": function () { return this.mixin_instance_get_offset.apply(this, arguments); }
        },
        "mixinOffsetCast": {
          "value": function () { return this.mixin_offset_cast.apply(this, arguments); }
        },
        "presenceMixinClassGetOffsetQuark": {
          "value": function () { return this.presence_mixin_class_get_offset_quark.apply(this, arguments); }
        },
        "presenceMixinClassInit": {
          "value": function () { return this.presence_mixin_class_init.apply(this, arguments); }
        },
        "presenceMixinEmitOnePresenceUpdate": {
          "value": function () { return this.presence_mixin_emit_one_presence_update.apply(this, arguments); }
        },
        "presenceMixinEmitPresenceUpdate": {
          "value": function () { return this.presence_mixin_emit_presence_update.apply(this, arguments); }
        },
        "presenceMixinFinalize": {
          "value": function () { return this.presence_mixin_finalize.apply(this, arguments); }
        },
        "presenceMixinGetOffsetQuark": {
          "value": function () { return this.presence_mixin_get_offset_quark.apply(this, arguments); }
        },
        "presenceMixinIfaceInit": {
          "value": function () { return this.presence_mixin_iface_init.apply(this, arguments); }
        },
        "presenceMixinInit": {
          "value": function () { return this.presence_mixin_init.apply(this, arguments); }
        },
        "presenceMixinSimplePresenceIfaceInit": {
          "value": function () { return this.presence_mixin_simple_presence_iface_init.apply(this, arguments); }
        },
        "presenceMixinSimplePresenceInitDbusProperties": {
          "value": function () { return this.presence_mixin_simple_presence_init_dbus_properties.apply(this, arguments); }
        },
        "presenceMixinSimplePresenceRegisterWithContactsMixin": {
          "value": function () { return this.presence_mixin_simple_presence_register_with_contacts_mixin.apply(this, arguments); }
        },
        "presenceStatusNew": {
          "value": function () { return this.presence_status_new.apply(this, arguments); }
        },
        "simpleAsyncReportSuccessInIdle": {
          "value": function () { return this.simple_async_report_success_in_idle.apply(this, arguments); }
        },
        "strvContains": {
          "value": function () { return this.strv_contains.apply(this, arguments); }
        },
        "svcInterfaceGetDbusPropertiesInfo": {
          "value": function () { return this.svc_interface_get_dbus_properties_info.apply(this, arguments); }
        },
        "svcInterfaceSetDbusPropertiesInfo": {
          "value": function () { return this.svc_interface_set_dbus_properties_info.apply(this, arguments); }
        },
        "userActionTimeFromX11": {
          "value": function () { return this.user_action_time_from_x11.apply(this, arguments); }
        },
        "userActionTimeShouldPresent": {
          "value": function () { return this.user_action_time_should_present.apply(this, arguments); }
        },
        "utf8MakeValid": {
          "value": function () { return this.utf8_make_valid.apply(this, arguments); }
        },
        "valueArrayBuild": {
          "value": function () { return this.value_array_build.apply(this, arguments); }
        },
        "valueArrayFree": {
          "value": function () { return this.value_array_free.apply(this, arguments); }
        },
        "valueArrayUnpack": {
          "value": function () { return this.value_array_unpack.apply(this, arguments); }
        },
        "weakRefNew": {
          "value": function () { return this.weak_ref_new.apply(this, arguments); }
        }
      }
    },
    "TelepathyLogger": {
      "class": {
        "CallEvent": {
          "prototype": {
            "getDetailedEndReason": {
              "value": function () { return this.get_detailed_end_reason.apply(this, arguments); }
            },
            "getDuration": {
              "value": function () { return this.get_duration.apply(this, arguments); }
            },
            "getEndActor": {
              "value": function () { return this.get_end_actor.apply(this, arguments); }
            },
            "getEndReason": {
              "value": function () { return this.get_end_reason.apply(this, arguments); }
            },
            "detailedEndReason": {
              "get": function () { return this.detailed_end_reason; },
              "set": function (value) { this.detailed_end_reason = value; }
            },
            "endActor": {
              "get": function () { return this.end_actor; },
              "set": function (value) { this.end_actor = value; }
            },
            "endReason": {
              "get": function () { return this.end_reason; },
              "set": function (value) { this.end_reason = value; }
            }
          },
          "static": {}
        },
        "Entity": {
          "prototype": {
            "getAlias": {
              "value": function () { return this.get_alias.apply(this, arguments); }
            },
            "getAvatarToken": {
              "value": function () { return this.get_avatar_token.apply(this, arguments); }
            },
            "getEntityType": {
              "value": function () { return this.get_entity_type.apply(this, arguments); }
            },
            "getIdentifier": {
              "value": function () { return this.get_identifier.apply(this, arguments); }
            },
            "avatarToken": {
              "get": function () { return this.avatar_token; },
              "set": function (value) { this.avatar_token = value; }
            }
          },
          "static": {}
        },
        "Event": {
          "prototype": {
            "getAccount": {
              "value": function () { return this.get_account.apply(this, arguments); }
            },
            "getAccountPath": {
              "value": function () { return this.get_account_path.apply(this, arguments); }
            },
            "getReceiver": {
              "value": function () { return this.get_receiver.apply(this, arguments); }
            },
            "getSender": {
              "value": function () { return this.get_sender.apply(this, arguments); }
            },
            "getTimestamp": {
              "value": function () { return this.get_timestamp.apply(this, arguments); }
            },
            "accountPath": {
              "get": function () { return this.account_path; },
              "set": function (value) { this.account_path = value; }
            },
            "channelPath": {
              "get": function () { return this.channel_path; },
              "set": function (value) { this.channel_path = value; }
            }
          },
          "static": {}
        },
        "LogManager": {
          "prototype": {
            "getDatesAsync": {
              "value": function () { return this.get_dates_async.apply(this, arguments); }
            },
            "getDatesFinish": {
              "value": function () { return this.get_dates_finish.apply(this, arguments); }
            },
            "getEntitiesAsync": {
              "value": function () { return this.get_entities_async.apply(this, arguments); }
            },
            "getEntitiesFinish": {
              "value": function () { return this.get_entities_finish.apply(this, arguments); }
            },
            "getEventsForDateAsync": {
              "value": function () { return this.get_events_for_date_async.apply(this, arguments); }
            },
            "getEventsForDateFinish": {
              "value": function () { return this.get_events_for_date_finish.apply(this, arguments); }
            },
            "getFilteredEventsAsync": {
              "value": function () { return this.get_filtered_events_async.apply(this, arguments); }
            },
            "getFilteredEventsFinish": {
              "value": function () { return this.get_filtered_events_finish.apply(this, arguments); }
            },
            "searchAsync": {
              "value": function () { return this.search_async.apply(this, arguments); }
            },
            "searchFinish": {
              "value": function () { return this.search_finish.apply(this, arguments); }
            },
            "walkFilteredEvents": {
              "value": function () { return this.walk_filtered_events.apply(this, arguments); }
            }
          },
          "static": {
            "dupSingleton": {
              "value": function () { return this.dup_singleton.apply(this, arguments); }
            },
            "errorsQuark": {
              "value": function () { return this.errors_quark.apply(this, arguments); }
            },
            "searchFree": {
              "value": function () { return this.search_free.apply(this, arguments); }
            }
          }
        },
        "LogWalker": {
          "prototype": {
            "getEventsAsync": {
              "value": function () { return this.get_events_async.apply(this, arguments); }
            },
            "getEventsFinish": {
              "value": function () { return this.get_events_finish.apply(this, arguments); }
            },
            "isEnd": {
              "value": function () { return this.is_end.apply(this, arguments); }
            },
            "isStart": {
              "value": function () { return this.is_start.apply(this, arguments); }
            },
            "rewindAsync": {
              "value": function () { return this.rewind_async.apply(this, arguments); }
            },
            "rewindFinish": {
              "value": function () { return this.rewind_finish.apply(this, arguments); }
            },
            "filterData": {
              "get": function () { return this.filter_data; },
              "set": function (value) { this.filter_data = value; }
            }
          },
          "static": {}
        },
        "TextEvent": {
          "prototype": {
            "getEditTimestamp": {
              "value": function () { return this.get_edit_timestamp.apply(this, arguments); }
            },
            "getMessage": {
              "value": function () { return this.get_message.apply(this, arguments); }
            },
            "getMessageToken": {
              "value": function () { return this.get_message_token.apply(this, arguments); }
            },
            "getMessageType": {
              "value": function () { return this.get_message_type.apply(this, arguments); }
            },
            "getSupersedes": {
              "value": function () { return this.get_supersedes.apply(this, arguments); }
            },
            "getSupersedesToken": {
              "value": function () { return this.get_supersedes_token.apply(this, arguments); }
            },
            "editTimestamp": {
              "get": function () { return this.edit_timestamp; },
              "set": function (value) { this.edit_timestamp = value; }
            },
            "messageToken": {
              "get": function () { return this.message_token; },
              "set": function (value) { this.message_token = value; }
            },
            "messageType": {
              "get": function () { return this.message_type; },
              "set": function (value) { this.message_type = value; }
            },
            "supersedesToken": {
              "get": function () { return this.supersedes_token; },
              "set": function (value) { this.supersedes_token = value; }
            }
          },
          "static": {}
        }
      },
      "static": {}
    },
    "Totem": {
      "class": {
        "Object": {
          "prototype": {
            "addSidebarPage": {
              "value": function () { return this.add_sidebar_page.apply(this, arguments); }
            },
            "addToPlaylist": {
              "value": function () { return this.add_to_playlist.apply(this, arguments); }
            },
            "addToView": {
              "value": function () { return this.add_to_view.apply(this, arguments); }
            },
            "clearPlaylist": {
              "value": function () { return this.clear_playlist.apply(this, arguments); }
            },
            "emptyMenuSection": {
              "value": function () { return this.empty_menu_section.apply(this, arguments); }
            },
            "getCurrentMrl": {
              "value": function () { return this.get_current_mrl.apply(this, arguments); }
            },
            "getCurrentTime": {
              "value": function () { return this.get_current_time.apply(this, arguments); }
            },
            "getMainWindow": {
              "value": function () { return this.get_main_window.apply(this, arguments); }
            },
            "getMenuSection": {
              "value": function () { return this.get_menu_section.apply(this, arguments); }
            },
            "getPlaylistLength": {
              "value": function () { return this.get_playlist_length.apply(this, arguments); }
            },
            "getPlaylistPos": {
              "value": function () { return this.get_playlist_pos.apply(this, arguments); }
            },
            "getShortTitle": {
              "value": function () { return this.get_short_title.apply(this, arguments); }
            },
            "getTitleAtPlaylistPos": {
              "value": function () { return this.get_title_at_playlist_pos.apply(this, arguments); }
            },
            "getVideoWidget": {
              "value": function () { return this.get_video_widget.apply(this, arguments); }
            },
            "getVolume": {
              "value": function () { return this.get_volume.apply(this, arguments); }
            },
            "isFullscreen": {
              "value": function () { return this.is_fullscreen.apply(this, arguments); }
            },
            "isPaused": {
              "value": function () { return this.is_paused.apply(this, arguments); }
            },
            "isPlaying": {
              "value": function () { return this.is_playing.apply(this, arguments); }
            },
            "isSeekable": {
              "value": function () { return this.is_seekable.apply(this, arguments); }
            },
            "nextAngle": {
              "value": function () { return this.next_angle.apply(this, arguments); }
            },
            "playPause": {
              "value": function () { return this.play_pause.apply(this, arguments); }
            },
            "remoteCommand": {
              "value": function () { return this.remote_command.apply(this, arguments); }
            },
            "remoteGetSetting": {
              "value": function () { return this.remote_get_setting.apply(this, arguments); }
            },
            "remoteSetSetting": {
              "value": function () { return this.remote_set_setting.apply(this, arguments); }
            },
            "removeSidebarPage": {
              "value": function () { return this.remove_sidebar_page.apply(this, arguments); }
            },
            "seekNext": {
              "value": function () { return this.seek_next.apply(this, arguments); }
            },
            "seekPrevious": {
              "value": function () { return this.seek_previous.apply(this, arguments); }
            },
            "seekRelative": {
              "value": function () { return this.seek_relative.apply(this, arguments); }
            },
            "seekTime": {
              "value": function () { return this.seek_time.apply(this, arguments); }
            },
            "setCurrentSubtitle": {
              "value": function () { return this.set_current_subtitle.apply(this, arguments); }
            },
            "setVolume": {
              "value": function () { return this.set_volume.apply(this, arguments); }
            },
            "showError": {
              "value": function () { return this.show_error.apply(this, arguments); }
            },
            "currentContentType": {
              "get": function () { return this.current_content_type; },
              "set": function (value) { this.current_content_type = value; }
            },
            "currentDisplayName": {
              "get": function () { return this.current_display_name; },
              "set": function (value) { this.current_display_name = value; }
            },
            "currentMrl": {
              "get": function () { return this.current_mrl; },
              "set": function (value) { this.current_mrl = value; }
            },
            "currentTime": {
              "get": function () { return this.current_time; },
              "set": function (value) { this.current_time = value; }
            },
            "streamLength": {
              "get": function () { return this.stream_length; },
              "set": function (value) { this.stream_length = value; }
            }
          },
          "static": {
            "getSupportedContentTypes": {
              "value": function () { return this.get_supported_content_types.apply(this, arguments); }
            },
            "getSupportedUriSchemes": {
              "value": function () { return this.get_supported_uri_schemes.apply(this, arguments); }
            }
          }
        }
      },
      "static": {
        "getPluginPaths": {
          "value": function () { return this.get_plugin_paths.apply(this, arguments); }
        },
        "interfaceCreateHeaderButton": {
          "value": function () { return this.interface_create_header_button.apply(this, arguments); }
        },
        "interfaceError": {
          "value": function () { return this.interface_error.apply(this, arguments); }
        },
        "interfaceErrorBlocking": {
          "value": function () { return this.interface_error_blocking.apply(this, arguments); }
        },
        "interfaceErrorWithLink": {
          "value": function () { return this.interface_error_with_link.apply(this, arguments); }
        },
        "interfaceGetFullPath": {
          "value": function () { return this.interface_get_full_path.apply(this, arguments); }
        },
        "interfaceLoad": {
          "value": function () { return this.interface_load.apply(this, arguments); }
        },
        "interfaceLoadPixbuf": {
          "value": function () { return this.interface_load_pixbuf.apply(this, arguments); }
        },
        "interfaceLoadWithFullPath": {
          "value": function () { return this.interface_load_with_full_path.apply(this, arguments); }
        },
        "pluginFindFile": {
          "value": function () { return this.plugin_find_file.apply(this, arguments); }
        },
        "pluginLoadInterface": {
          "value": function () { return this.plugin_load_interface.apply(this, arguments); }
        },
        "remoteCommandQuark": {
          "value": function () { return this.remote_command_quark.apply(this, arguments); }
        },
        "remoteSettingQuark": {
          "value": function () { return this.remote_setting_quark.apply(this, arguments); }
        }
      }
    },
    "TotemPlParser": {
      "class": {
        "Parser": {
          "prototype": {
            "addIgnoredMimetype": {
              "value": function () { return this.add_ignored_mimetype.apply(this, arguments); }
            },
            "addIgnoredScheme": {
              "value": function () { return this.add_ignored_scheme.apply(this, arguments); }
            },
            "parseAsync": {
              "value": function () { return this.parse_async.apply(this, arguments); }
            },
            "parseFinish": {
              "value": function () { return this.parse_finish.apply(this, arguments); }
            },
            "parseWithBase": {
              "value": function () { return this.parse_with_base.apply(this, arguments); }
            },
            "parseWithBaseAsync": {
              "value": function () { return this.parse_with_base_async.apply(this, arguments); }
            },
            "disableUnsafe": {
              "get": function () { return this.disable_unsafe; },
              "set": function (value) { this.disable_unsafe = value; }
            }
          },
          "static": {
            "canParseFromData": {
              "value": function () { return this.can_parse_from_data.apply(this, arguments); }
            },
            "canParseFromFilename": {
              "value": function () { return this.can_parse_from_filename.apply(this, arguments); }
            },
            "canParseFromUri": {
              "value": function () { return this.can_parse_from_uri.apply(this, arguments); }
            },
            "parseDate": {
              "value": function () { return this.parse_date.apply(this, arguments); }
            },
            "parseDuration": {
              "value": function () { return this.parse_duration.apply(this, arguments); }
            }
          }
        },
        "Playlist": {
          "prototype": {
            "getValist": {
              "value": function () { return this.get_valist.apply(this, arguments); }
            },
            "getValue": {
              "value": function () { return this.get_value.apply(this, arguments); }
            },
            "iterFirst": {
              "value": function () { return this.iter_first.apply(this, arguments); }
            },
            "iterNext": {
              "value": function () { return this.iter_next.apply(this, arguments); }
            },
            "iterPrev": {
              "value": function () { return this.iter_prev.apply(this, arguments); }
            },
            "setValist": {
              "value": function () { return this.set_valist.apply(this, arguments); }
            },
            "setValue": {
              "value": function () { return this.set_value.apply(this, arguments); }
            }
          },
          "static": {}
        }
      },
      "static": {
        "parserErrorQuark": {
          "value": function () { return this.parser_error_quark.apply(this, arguments); }
        },
        "parserMetadataGetType": {
          "value": function () { return this.parser_metadata_get_type.apply(this, arguments); }
        }
      }
    },
    "Tracker": {
      "class": {
        "SparqlBuilder": {
          "prototype": {
            "insertOpen": {
              "value": function () { return this.insert_open.apply(this, arguments); }
            },
            "insertSilentOpen": {
              "value": function () { return this.insert_silent_open.apply(this, arguments); }
            },
            "insertClose": {
              "value": function () { return this.insert_close.apply(this, arguments); }
            },
            "deleteOpen": {
              "value": function () { return this.delete_open.apply(this, arguments); }
            },
            "deleteClose": {
              "value": function () { return this.delete_close.apply(this, arguments); }
            },
            "graphOpen": {
              "value": function () { return this.graph_open.apply(this, arguments); }
            },
            "graphClose": {
              "value": function () { return this.graph_close.apply(this, arguments); }
            },
            "whereOpen": {
              "value": function () { return this.where_open.apply(this, arguments); }
            },
            "whereClose": {
              "value": function () { return this.where_close.apply(this, arguments); }
            },
            "subjectVariable": {
              "value": function () { return this.subject_variable.apply(this, arguments); }
            },
            "objectVariable": {
              "value": function () { return this.object_variable.apply(this, arguments); }
            },
            "subjectIri": {
              "value": function () { return this.subject_iri.apply(this, arguments); }
            },
            "predicateIri": {
              "value": function () { return this.predicate_iri.apply(this, arguments); }
            },
            "objectIri": {
              "value": function () { return this.object_iri.apply(this, arguments); }
            },
            "objectString": {
              "value": function () { return this.object_string.apply(this, arguments); }
            },
            "objectUnvalidated": {
              "value": function () { return this.object_unvalidated.apply(this, arguments); }
            },
            "objectBoolean": {
              "value": function () { return this.object_boolean.apply(this, arguments); }
            },
            "objectInt64": {
              "value": function () { return this.object_int64.apply(this, arguments); }
            },
            "objectDate": {
              "value": function () { return this.object_date.apply(this, arguments); }
            },
            "objectDouble": {
              "value": function () { return this.object_double.apply(this, arguments); }
            },
            "objectBlankOpen": {
              "value": function () { return this.object_blank_open.apply(this, arguments); }
            },
            "objectBlankClose": {
              "value": function () { return this.object_blank_close.apply(this, arguments); }
            },
            "getResult": {
              "value": function () { return this.get_result.apply(this, arguments); }
            },
            "getLength": {
              "value": function () { return this.get_length.apply(this, arguments); }
            },
            "getState": {
              "value": function () { return this.get_state.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "SparqlConnection": {
          "prototype": {
            "queryAsync": {
              "value": function () { return this.query_async.apply(this, arguments); }
            },
            "queryFinish": {
              "value": function () { return this.query_finish.apply(this, arguments); }
            },
            "updateAsync": {
              "value": function () { return this.update_async.apply(this, arguments); }
            },
            "updateFinish": {
              "value": function () { return this.update_finish.apply(this, arguments); }
            },
            "updateArrayAsync": {
              "value": function () { return this.update_array_async.apply(this, arguments); }
            },
            "updateArrayFinish": {
              "value": function () { return this.update_array_finish.apply(this, arguments); }
            },
            "updateBlank": {
              "value": function () { return this.update_blank.apply(this, arguments); }
            },
            "updateBlankAsync": {
              "value": function () { return this.update_blank_async.apply(this, arguments); }
            },
            "updateBlankFinish": {
              "value": function () { return this.update_blank_finish.apply(this, arguments); }
            },
            "loadAsync": {
              "value": function () { return this.load_async.apply(this, arguments); }
            },
            "loadFinish": {
              "value": function () { return this.load_finish.apply(this, arguments); }
            },
            "statisticsAsync": {
              "value": function () { return this.statistics_async.apply(this, arguments); }
            },
            "statisticsFinish": {
              "value": function () { return this.statistics_finish.apply(this, arguments); }
            }
          },
          "static": {
            "getAsync": {
              "value": function () { return this.get_async.apply(this, arguments); }
            },
            "getDirect": {
              "value": function () { return this.get_direct.apply(this, arguments); }
            },
            "getDirectAsync": {
              "value": function () { return this.get_direct_async.apply(this, arguments); }
            },
            "getDirectFinish": {
              "value": function () { return this.get_direct_finish.apply(this, arguments); }
            },
            "getFinish": {
              "value": function () { return this.get_finish.apply(this, arguments); }
            }
          }
        },
        "SparqlCursor": {
          "prototype": {
            "getValueType": {
              "value": function () { return this.get_value_type.apply(this, arguments); }
            },
            "getVariableName": {
              "value": function () { return this.get_variable_name.apply(this, arguments); }
            },
            "getString": {
              "value": function () { return this.get_string.apply(this, arguments); }
            },
            "nextAsync": {
              "value": function () { return this.next_async.apply(this, arguments); }
            },
            "nextFinish": {
              "value": function () { return this.next_finish.apply(this, arguments); }
            },
            "getInteger": {
              "value": function () { return this.get_integer.apply(this, arguments); }
            },
            "getDouble": {
              "value": function () { return this.get_double.apply(this, arguments); }
            },
            "getBoolean": {
              "value": function () { return this.get_boolean.apply(this, arguments); }
            },
            "isBound": {
              "value": function () { return this.is_bound.apply(this, arguments); }
            },
            "getConnection": {
              "value": function () { return this.get_connection.apply(this, arguments); }
            },
            "setConnection": {
              "value": function () { return this.set_connection.apply(this, arguments); }
            },
            "getNColumns": {
              "value": function () { return this.get_n_columns.apply(this, arguments); }
            },
            "nColumns": {
              "get": function () { return this.n_columns; },
              "set": function (value) { this.n_columns = value; }
            }
          },
          "static": {}
        }
      },
      "static": {
        "sparqlEscapeString": {
          "value": function () { return this.sparql_escape_string.apply(this, arguments); }
        },
        "sparqlGetUuidUrn": {
          "value": function () { return this.sparql_get_uuid_urn.apply(this, arguments); }
        }
      }
    },
    "TrackerControl": {
      "class": {
        "MinerManager": {
          "prototype": {
            "getAvailable": {
              "value": function () { return this.get_available.apply(this, arguments); }
            },
            "getDescription": {
              "value": function () { return this.get_description.apply(this, arguments); }
            },
            "getDisplayName": {
              "value": function () { return this.get_display_name.apply(this, arguments); }
            },
            "getRunning": {
              "value": function () { return this.get_running.apply(this, arguments); }
            },
            "getStatus": {
              "value": function () { return this.get_status.apply(this, arguments); }
            },
            "ignoreNextUpdate": {
              "value": function () { return this.ignore_next_update.apply(this, arguments); }
            },
            "indexFile": {
              "value": function () { return this.index_file.apply(this, arguments); }
            },
            "indexFileAsync": {
              "value": function () { return this.index_file_async.apply(this, arguments); }
            },
            "indexFileFinish": {
              "value": function () { return this.index_file_finish.apply(this, arguments); }
            },
            "isActive": {
              "value": function () { return this.is_active.apply(this, arguments); }
            },
            "isPaused": {
              "value": function () { return this.is_paused.apply(this, arguments); }
            },
            "pauseForProcess": {
              "value": function () { return this.pause_for_process.apply(this, arguments); }
            },
            "reindexByMimetype": {
              "value": function () { return this.reindex_by_mimetype.apply(this, arguments); }
            },
            "autoStart": {
              "get": function () { return this.auto_start; },
              "set": function (value) { this.auto_start = value; }
            }
          },
          "static": {
            "errorQuark": {
              "value": function () { return this.error_quark.apply(this, arguments); }
            }
          }
        }
      },
      "static": {}
    },
    "TrackerMiner": {
      "class": {
        "Decorator": {
          "prototype": {
            "deleteId": {
              "value": function () { return this.delete_id.apply(this, arguments); }
            },
            "getClassNames": {
              "value": function () { return this.get_class_names.apply(this, arguments); }
            },
            "getDataSource": {
              "value": function () { return this.get_data_source.apply(this, arguments); }
            },
            "getNItems": {
              "value": function () { return this.get_n_items.apply(this, arguments); }
            },
            "nextFinish": {
              "value": function () { return this.next_finish.apply(this, arguments); }
            },
            "prependId": {
              "value": function () { return this.prepend_id.apply(this, arguments); }
            },
            "setPriorityRdfTypes": {
              "value": function () { return this.set_priority_rdf_types.apply(this, arguments); }
            },
            "classNames": {
              "get": function () { return this.class_names; },
              "set": function (value) { this.class_names = value; }
            },
            "commitBatchSize": {
              "get": function () { return this.commit_batch_size; },
              "set": function (value) { this.commit_batch_size = value; }
            },
            "dataSource": {
              "get": function () { return this.data_source; },
              "set": function (value) { this.data_source = value; }
            },
            "priorityRdfTypes": {
              "get": function () { return this.priority_rdf_types; },
              "set": function (value) { this.priority_rdf_types = value; }
            }
          },
          "static": {
            "errorQuark": {
              "value": function () { return this.error_quark.apply(this, arguments); }
            }
          }
        },
        "DecoratorFS": {
          "prototype": {
            "prependFile": {
              "value": function () { return this.prepend_file.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "IndexingTree": {
          "prototype": {
            "addFilter": {
              "value": function () { return this.add_filter.apply(this, arguments); }
            },
            "clearFilters": {
              "value": function () { return this.clear_filters.apply(this, arguments); }
            },
            "fileIsIndexable": {
              "value": function () { return this.file_is_indexable.apply(this, arguments); }
            },
            "fileIsRoot": {
              "value": function () { return this.file_is_root.apply(this, arguments); }
            },
            "fileMatchesFilter": {
              "value": function () { return this.file_matches_filter.apply(this, arguments); }
            },
            "getDefaultPolicy": {
              "value": function () { return this.get_default_policy.apply(this, arguments); }
            },
            "getFilterHidden": {
              "value": function () { return this.get_filter_hidden.apply(this, arguments); }
            },
            "getMasterRoot": {
              "value": function () { return this.get_master_root.apply(this, arguments); }
            },
            "getRoot": {
              "value": function () { return this.get_root.apply(this, arguments); }
            },
            "listRoots": {
              "value": function () { return this.list_roots.apply(this, arguments); }
            },
            "parentIsIndexable": {
              "value": function () { return this.parent_is_indexable.apply(this, arguments); }
            },
            "setDefaultPolicy": {
              "value": function () { return this.set_default_policy.apply(this, arguments); }
            },
            "setFilterHidden": {
              "value": function () { return this.set_filter_hidden.apply(this, arguments); }
            },
            "filterHidden": {
              "get": function () { return this.filter_hidden; },
              "set": function (value) { this.filter_hidden = value; }
            }
          },
          "static": {}
        },
        "Miner": {
          "prototype": {
            "getConnection": {
              "value": function () { return this.get_connection.apply(this, arguments); }
            },
            "getDbusConnection": {
              "value": function () { return this.get_dbus_connection.apply(this, arguments); }
            },
            "getDbusFullName": {
              "value": function () { return this.get_dbus_full_name.apply(this, arguments); }
            },
            "getDbusFullPath": {
              "value": function () { return this.get_dbus_full_path.apply(this, arguments); }
            },
            "getNPauseReasons": {
              "value": function () { return this.get_n_pause_reasons.apply(this, arguments); }
            },
            "ignoreNextUpdate": {
              "value": function () { return this.ignore_next_update.apply(this, arguments); }
            },
            "isPaused": {
              "value": function () { return this.is_paused.apply(this, arguments); }
            },
            "isStarted": {
              "value": function () { return this.is_started.apply(this, arguments); }
            },
            "introspectionHandler": {
              "get": function () { return this.introspection_handler; },
              "set": function (value) { this.introspection_handler = value; }
            },
            "introspectionXml": {
              "get": function () { return this.introspection_xml; },
              "set": function (value) { this.introspection_xml = value; }
            },
            "remainingTime": {
              "get": function () { return this.remaining_time; },
              "set": function (value) { this.remaining_time = value; }
            }
          },
          "static": {
            "errorQuark": {
              "value": function () { return this.error_quark.apply(this, arguments); }
            }
          }
        },
        "MinerFS": {
          "prototype": {
            "addDirectoryWithoutParent": {
              "value": function () { return this.add_directory_without_parent.apply(this, arguments); }
            },
            "checkDirectory": {
              "value": function () { return this.check_directory.apply(this, arguments); }
            },
            "checkDirectoryWithPriority": {
              "value": function () { return this.check_directory_with_priority.apply(this, arguments); }
            },
            "checkFile": {
              "value": function () { return this.check_file.apply(this, arguments); }
            },
            "checkFileWithPriority": {
              "value": function () { return this.check_file_with_priority.apply(this, arguments); }
            },
            "directoryAdd": {
              "value": function () { return this.directory_add.apply(this, arguments); }
            },
            "directoryRemove": {
              "value": function () { return this.directory_remove.apply(this, arguments); }
            },
            "directoryRemoveFull": {
              "value": function () { return this.directory_remove_full.apply(this, arguments); }
            },
            "fileNotify": {
              "value": function () { return this.file_notify.apply(this, arguments); }
            },
            "forceMtimeChecking": {
              "value": function () { return this.force_mtime_checking.apply(this, arguments); }
            },
            "forceRecheck": {
              "value": function () { return this.force_recheck.apply(this, arguments); }
            },
            "getDataProvider": {
              "value": function () { return this.get_data_provider.apply(this, arguments); }
            },
            "getIndexingTree": {
              "value": function () { return this.get_indexing_tree.apply(this, arguments); }
            },
            "getInitialCrawling": {
              "value": function () { return this.get_initial_crawling.apply(this, arguments); }
            },
            "getMtimeChecking": {
              "value": function () { return this.get_mtime_checking.apply(this, arguments); }
            },
            "getParentUrn": {
              "value": function () { return this.get_parent_urn.apply(this, arguments); }
            },
            "getThrottle": {
              "value": function () { return this.get_throttle.apply(this, arguments); }
            },
            "getUrn": {
              "value": function () { return this.get_urn.apply(this, arguments); }
            },
            "hasItemsToProcess": {
              "value": function () { return this.has_items_to_process.apply(this, arguments); }
            },
            "queryUrn": {
              "value": function () { return this.query_urn.apply(this, arguments); }
            },
            "setInitialCrawling": {
              "value": function () { return this.set_initial_crawling.apply(this, arguments); }
            },
            "setMtimeChecking": {
              "value": function () { return this.set_mtime_checking.apply(this, arguments); }
            },
            "setThrottle": {
              "value": function () { return this.set_throttle.apply(this, arguments); }
            },
            "writebackFile": {
              "value": function () { return this.writeback_file.apply(this, arguments); }
            },
            "writebackNotify": {
              "value": function () { return this.writeback_notify.apply(this, arguments); }
            },
            "dataProvider": {
              "get": function () { return this.data_provider; },
              "set": function (value) { this.data_provider = value; }
            },
            "initialCrawling": {
              "get": function () { return this.initial_crawling; },
              "set": function (value) { this.initial_crawling = value; }
            },
            "mtimeChecking": {
              "get": function () { return this.mtime_checking; },
              "set": function (value) { this.mtime_checking = value; }
            },
            "processingPoolReadyLimit": {
              "get": function () { return this.processing_pool_ready_limit; },
              "set": function (value) { this.processing_pool_ready_limit = value; }
            },
            "processingPoolWaitLimit": {
              "get": function () { return this.processing_pool_wait_limit; },
              "set": function (value) { this.processing_pool_wait_limit = value; }
            }
          },
          "static": {
            "errorQuark": {
              "value": function () { return this.error_quark.apply(this, arguments); }
            }
          }
        },
        "MinerOnline": {
          "prototype": {
            "getNetworkType": {
              "value": function () { return this.get_network_type.apply(this, arguments); }
            },
            "networkType": {
              "get": function () { return this.network_type; },
              "set": function (value) { this.network_type = value; }
            }
          },
          "static": {}
        }
      },
      "static": {}
    },
    "UDisks": {
      "class": {
        "BlockProxy": {
          "prototype": {},
          "static": {
            "newForBus": {
              "value": function () { return this.new_for_bus.apply(this, arguments); }
            }
          }
        },
        "BlockSkeleton": {
          "prototype": {},
          "static": {}
        },
        "Client": {
          "prototype": {
            "getAllBlocksForMdraid": {
              "value": function () { return this.get_all_blocks_for_mdraid.apply(this, arguments); }
            },
            "getBlockForDev": {
              "value": function () { return this.get_block_for_dev.apply(this, arguments); }
            },
            "getBlockForDrive": {
              "value": function () { return this.get_block_for_drive.apply(this, arguments); }
            },
            "getBlockForLabel": {
              "value": function () { return this.get_block_for_label.apply(this, arguments); }
            },
            "getBlockForMdraid": {
              "value": function () { return this.get_block_for_mdraid.apply(this, arguments); }
            },
            "getBlockForUuid": {
              "value": function () { return this.get_block_for_uuid.apply(this, arguments); }
            },
            "getCleartextBlock": {
              "value": function () { return this.get_cleartext_block.apply(this, arguments); }
            },
            "getDriveForBlock": {
              "value": function () { return this.get_drive_for_block.apply(this, arguments); }
            },
            "getDriveInfo": {
              "value": function () { return this.get_drive_info.apply(this, arguments); }
            },
            "getDriveSiblings": {
              "value": function () { return this.get_drive_siblings.apply(this, arguments); }
            },
            "getIdForDisplay": {
              "value": function () { return this.get_id_for_display.apply(this, arguments); }
            },
            "getJobDescription": {
              "value": function () { return this.get_job_description.apply(this, arguments); }
            },
            "getJobsForObject": {
              "value": function () { return this.get_jobs_for_object.apply(this, arguments); }
            },
            "getLoopForBlock": {
              "value": function () { return this.get_loop_for_block.apply(this, arguments); }
            },
            "getManager": {
              "value": function () { return this.get_manager.apply(this, arguments); }
            },
            "getMdraidForBlock": {
              "value": function () { return this.get_mdraid_for_block.apply(this, arguments); }
            },
            "getMediaCompatForDisplay": {
              "value": function () { return this.get_media_compat_for_display.apply(this, arguments); }
            },
            "getMembersForMdraid": {
              "value": function () { return this.get_members_for_mdraid.apply(this, arguments); }
            },
            "getObject": {
              "value": function () { return this.get_object.apply(this, arguments); }
            },
            "getObjectInfo": {
              "value": function () { return this.get_object_info.apply(this, arguments); }
            },
            "getObjectManager": {
              "value": function () { return this.get_object_manager.apply(this, arguments); }
            },
            "getPartitionInfo": {
              "value": function () { return this.get_partition_info.apply(this, arguments); }
            },
            "getPartitionTable": {
              "value": function () { return this.get_partition_table.apply(this, arguments); }
            },
            "getPartitionTableSubtypeForDisplay": {
              "value": function () { return this.get_partition_table_subtype_for_display.apply(this, arguments); }
            },
            "getPartitionTableSubtypes": {
              "value": function () { return this.get_partition_table_subtypes.apply(this, arguments); }
            },
            "getPartitionTableTypeForDisplay": {
              "value": function () { return this.get_partition_table_type_for_display.apply(this, arguments); }
            },
            "getPartitionTypeAndSubtypeForDisplay": {
              "value": function () { return this.get_partition_type_and_subtype_for_display.apply(this, arguments); }
            },
            "getPartitionTypeForDisplay": {
              "value": function () { return this.get_partition_type_for_display.apply(this, arguments); }
            },
            "getPartitionTypeInfos": {
              "value": function () { return this.get_partition_type_infos.apply(this, arguments); }
            },
            "getPartitions": {
              "value": function () { return this.get_partitions.apply(this, arguments); }
            },
            "getSizeForDisplay": {
              "value": function () { return this.get_size_for_display.apply(this, arguments); }
            },
            "peekObject": {
              "value": function () { return this.peek_object.apply(this, arguments); }
            },
            "queueChanged": {
              "value": function () { return this.queue_changed.apply(this, arguments); }
            },
            "objectManager": {
              "get": function () { return this.object_manager; },
              "set": function (value) { this.object_manager = value; }
            }
          },
          "static": {}
        },
        "DriveAtaProxy": {
          "prototype": {},
          "static": {
            "newForBus": {
              "value": function () { return this.new_for_bus.apply(this, arguments); }
            }
          }
        },
        "DriveAtaSkeleton": {
          "prototype": {},
          "static": {}
        },
        "DriveProxy": {
          "prototype": {},
          "static": {
            "newForBus": {
              "value": function () { return this.new_for_bus.apply(this, arguments); }
            }
          }
        },
        "DriveSkeleton": {
          "prototype": {},
          "static": {}
        },
        "EncryptedProxy": {
          "prototype": {},
          "static": {
            "newForBus": {
              "value": function () { return this.new_for_bus.apply(this, arguments); }
            }
          }
        },
        "EncryptedSkeleton": {
          "prototype": {},
          "static": {}
        },
        "FilesystemProxy": {
          "prototype": {},
          "static": {
            "newForBus": {
              "value": function () { return this.new_for_bus.apply(this, arguments); }
            }
          }
        },
        "FilesystemSkeleton": {
          "prototype": {},
          "static": {}
        },
        "JobProxy": {
          "prototype": {},
          "static": {
            "newForBus": {
              "value": function () { return this.new_for_bus.apply(this, arguments); }
            }
          }
        },
        "JobSkeleton": {
          "prototype": {},
          "static": {}
        },
        "LoopProxy": {
          "prototype": {},
          "static": {
            "newForBus": {
              "value": function () { return this.new_for_bus.apply(this, arguments); }
            }
          }
        },
        "LoopSkeleton": {
          "prototype": {},
          "static": {}
        },
        "MDRaidProxy": {
          "prototype": {},
          "static": {
            "newForBus": {
              "value": function () { return this.new_for_bus.apply(this, arguments); }
            }
          }
        },
        "MDRaidSkeleton": {
          "prototype": {},
          "static": {}
        },
        "ManagerProxy": {
          "prototype": {},
          "static": {
            "newForBus": {
              "value": function () { return this.new_for_bus.apply(this, arguments); }
            }
          }
        },
        "ManagerSkeleton": {
          "prototype": {},
          "static": {}
        },
        "ObjectInfo": {
          "prototype": {
            "getDescription": {
              "value": function () { return this.get_description.apply(this, arguments); }
            },
            "getIcon": {
              "value": function () { return this.get_icon.apply(this, arguments); }
            },
            "getIconSymbolic": {
              "value": function () { return this.get_icon_symbolic.apply(this, arguments); }
            },
            "getMediaDescription": {
              "value": function () { return this.get_media_description.apply(this, arguments); }
            },
            "getMediaIcon": {
              "value": function () { return this.get_media_icon.apply(this, arguments); }
            },
            "getMediaIconSymbolic": {
              "value": function () { return this.get_media_icon_symbolic.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getObject": {
              "value": function () { return this.get_object.apply(this, arguments); }
            },
            "getOneLiner": {
              "value": function () { return this.get_one_liner.apply(this, arguments); }
            },
            "getSortKey": {
              "value": function () { return this.get_sort_key.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "ObjectManagerClient": {
          "prototype": {},
          "static": {
            "getProxyType": {
              "value": function () { return this.get_proxy_type.apply(this, arguments); }
            },
            "newForBus": {
              "value": function () { return this.new_for_bus.apply(this, arguments); }
            }
          }
        },
        "ObjectProxy": {
          "prototype": {},
          "static": {}
        },
        "ObjectSkeleton": {
          "prototype": {
            "setBlock": {
              "value": function () { return this.set_block.apply(this, arguments); }
            },
            "setDrive": {
              "value": function () { return this.set_drive.apply(this, arguments); }
            },
            "setDriveAta": {
              "value": function () { return this.set_drive_ata.apply(this, arguments); }
            },
            "setEncrypted": {
              "value": function () { return this.set_encrypted.apply(this, arguments); }
            },
            "setFilesystem": {
              "value": function () { return this.set_filesystem.apply(this, arguments); }
            },
            "setJob": {
              "value": function () { return this.set_job.apply(this, arguments); }
            },
            "setLoop": {
              "value": function () { return this.set_loop.apply(this, arguments); }
            },
            "setManager": {
              "value": function () { return this.set_manager.apply(this, arguments); }
            },
            "setMdraid": {
              "value": function () { return this.set_mdraid.apply(this, arguments); }
            },
            "setPartition": {
              "value": function () { return this.set_partition.apply(this, arguments); }
            },
            "setPartitionTable": {
              "value": function () { return this.set_partition_table.apply(this, arguments); }
            },
            "setSwapspace": {
              "value": function () { return this.set_swapspace.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "PartitionProxy": {
          "prototype": {},
          "static": {
            "newForBus": {
              "value": function () { return this.new_for_bus.apply(this, arguments); }
            }
          }
        },
        "PartitionSkeleton": {
          "prototype": {},
          "static": {}
        },
        "PartitionTableProxy": {
          "prototype": {},
          "static": {
            "newForBus": {
              "value": function () { return this.new_for_bus.apply(this, arguments); }
            }
          }
        },
        "PartitionTableSkeleton": {
          "prototype": {},
          "static": {}
        },
        "SwapspaceProxy": {
          "prototype": {},
          "static": {
            "newForBus": {
              "value": function () { return this.new_for_bus.apply(this, arguments); }
            }
          }
        },
        "SwapspaceSkeleton": {
          "prototype": {},
          "static": {}
        }
      },
      "static": {
        "blockInterfaceInfo": {
          "value": function () { return this.block_interface_info.apply(this, arguments); }
        },
        "blockOverrideProperties": {
          "value": function () { return this.block_override_properties.apply(this, arguments); }
        },
        "driveAtaInterfaceInfo": {
          "value": function () { return this.drive_ata_interface_info.apply(this, arguments); }
        },
        "driveAtaOverrideProperties": {
          "value": function () { return this.drive_ata_override_properties.apply(this, arguments); }
        },
        "driveInterfaceInfo": {
          "value": function () { return this.drive_interface_info.apply(this, arguments); }
        },
        "driveOverrideProperties": {
          "value": function () { return this.drive_override_properties.apply(this, arguments); }
        },
        "encryptedInterfaceInfo": {
          "value": function () { return this.encrypted_interface_info.apply(this, arguments); }
        },
        "encryptedOverrideProperties": {
          "value": function () { return this.encrypted_override_properties.apply(this, arguments); }
        },
        "errorQuark": {
          "value": function () { return this.error_quark.apply(this, arguments); }
        },
        "filesystemInterfaceInfo": {
          "value": function () { return this.filesystem_interface_info.apply(this, arguments); }
        },
        "filesystemOverrideProperties": {
          "value": function () { return this.filesystem_override_properties.apply(this, arguments); }
        },
        "jobInterfaceInfo": {
          "value": function () { return this.job_interface_info.apply(this, arguments); }
        },
        "jobOverrideProperties": {
          "value": function () { return this.job_override_properties.apply(this, arguments); }
        },
        "loopInterfaceInfo": {
          "value": function () { return this.loop_interface_info.apply(this, arguments); }
        },
        "loopOverrideProperties": {
          "value": function () { return this.loop_override_properties.apply(this, arguments); }
        },
        "managerInterfaceInfo": {
          "value": function () { return this.manager_interface_info.apply(this, arguments); }
        },
        "managerOverrideProperties": {
          "value": function () { return this.manager_override_properties.apply(this, arguments); }
        },
        "mdraidInterfaceInfo": {
          "value": function () { return this.mdraid_interface_info.apply(this, arguments); }
        },
        "mdraidOverrideProperties": {
          "value": function () { return this.mdraid_override_properties.apply(this, arguments); }
        },
        "partitionInterfaceInfo": {
          "value": function () { return this.partition_interface_info.apply(this, arguments); }
        },
        "partitionOverrideProperties": {
          "value": function () { return this.partition_override_properties.apply(this, arguments); }
        },
        "partitionTableInterfaceInfo": {
          "value": function () { return this.partition_table_interface_info.apply(this, arguments); }
        },
        "partitionTableOverrideProperties": {
          "value": function () { return this.partition_table_override_properties.apply(this, arguments); }
        },
        "swapspaceInterfaceInfo": {
          "value": function () { return this.swapspace_interface_info.apply(this, arguments); }
        },
        "swapspaceOverrideProperties": {
          "value": function () { return this.swapspace_override_properties.apply(this, arguments); }
        }
      }
    },
    "UPowerGlib": {
      "class": {
        "Client": {
          "prototype": {
            "getCriticalAction": {
              "value": function () { return this.get_critical_action.apply(this, arguments); }
            },
            "getDaemonVersion": {
              "value": function () { return this.get_daemon_version.apply(this, arguments); }
            },
            "getDevices": {
              "value": function () { return this.get_devices.apply(this, arguments); }
            },
            "getDisplayDevice": {
              "value": function () { return this.get_display_device.apply(this, arguments); }
            },
            "getLidIsClosed": {
              "value": function () { return this.get_lid_is_closed.apply(this, arguments); }
            },
            "getLidIsPresent": {
              "value": function () { return this.get_lid_is_present.apply(this, arguments); }
            },
            "getOnBattery": {
              "value": function () { return this.get_on_battery.apply(this, arguments); }
            },
            "daemonVersion": {
              "get": function () { return this.daemon_version; },
              "set": function (value) { this.daemon_version = value; }
            },
            "lidIsClosed": {
              "get": function () { return this.lid_is_closed; },
              "set": function (value) { this.lid_is_closed = value; }
            },
            "lidIsPresent": {
              "get": function () { return this.lid_is_present; },
              "set": function (value) { this.lid_is_present = value; }
            },
            "onBattery": {
              "get": function () { return this.on_battery; },
              "set": function (value) { this.on_battery = value; }
            }
          },
          "static": {}
        },
        "Device": {
          "prototype": {
            "getHistorySync": {
              "value": function () { return this.get_history_sync.apply(this, arguments); }
            },
            "getObjectPath": {
              "value": function () { return this.get_object_path.apply(this, arguments); }
            },
            "getStatisticsSync": {
              "value": function () { return this.get_statistics_sync.apply(this, arguments); }
            },
            "refreshSync": {
              "value": function () { return this.refresh_sync.apply(this, arguments); }
            },
            "setObjectPathSync": {
              "value": function () { return this.set_object_path_sync.apply(this, arguments); }
            },
            "toText": {
              "value": function () { return this.to_text.apply(this, arguments); }
            },
            "energyEmpty": {
              "get": function () { return this.energy_empty; },
              "set": function (value) { this.energy_empty = value; }
            },
            "energyFull": {
              "get": function () { return this.energy_full; },
              "set": function (value) { this.energy_full = value; }
            },
            "energyFullDesign": {
              "get": function () { return this.energy_full_design; },
              "set": function (value) { this.energy_full_design = value; }
            },
            "energyRate": {
              "get": function () { return this.energy_rate; },
              "set": function (value) { this.energy_rate = value; }
            },
            "hasHistory": {
              "get": function () { return this.has_history; },
              "set": function (value) { this.has_history = value; }
            },
            "hasStatistics": {
              "get": function () { return this.has_statistics; },
              "set": function (value) { this.has_statistics = value; }
            },
            "iconName": {
              "get": function () { return this.icon_name; },
              "set": function (value) { this.icon_name = value; }
            },
            "isPresent": {
              "get": function () { return this.is_present; },
              "set": function (value) { this.is_present = value; }
            },
            "isRechargeable": {
              "get": function () { return this.is_rechargeable; },
              "set": function (value) { this.is_rechargeable = value; }
            },
            "nativePath": {
              "get": function () { return this.native_path; },
              "set": function (value) { this.native_path = value; }
            },
            "powerSupply": {
              "get": function () { return this.power_supply; },
              "set": function (value) { this.power_supply = value; }
            },
            "timeToEmpty": {
              "get": function () { return this.time_to_empty; },
              "set": function (value) { this.time_to_empty = value; }
            },
            "timeToFull": {
              "get": function () { return this.time_to_full; },
              "set": function (value) { this.time_to_full = value; }
            },
            "updateTime": {
              "get": function () { return this.update_time; },
              "set": function (value) { this.update_time = value; }
            },
            "warningLevel": {
              "get": function () { return this.warning_level; },
              "set": function (value) { this.warning_level = value; }
            }
          },
          "static": {
            "kindFromString": {
              "value": function () { return this.kind_from_string.apply(this, arguments); }
            },
            "kindToString": {
              "value": function () { return this.kind_to_string.apply(this, arguments); }
            },
            "levelFromString": {
              "value": function () { return this.level_from_string.apply(this, arguments); }
            },
            "levelToString": {
              "value": function () { return this.level_to_string.apply(this, arguments); }
            },
            "stateFromString": {
              "value": function () { return this.state_from_string.apply(this, arguments); }
            },
            "stateToString": {
              "value": function () { return this.state_to_string.apply(this, arguments); }
            },
            "technologyFromString": {
              "value": function () { return this.technology_from_string.apply(this, arguments); }
            },
            "technologyToString": {
              "value": function () { return this.technology_to_string.apply(this, arguments); }
            }
          }
        },
        "HistoryItem": {
          "prototype": {
            "getState": {
              "value": function () { return this.get_state.apply(this, arguments); }
            },
            "getTime": {
              "value": function () { return this.get_time.apply(this, arguments); }
            },
            "getValue": {
              "value": function () { return this.get_value.apply(this, arguments); }
            },
            "setFromString": {
              "value": function () { return this.set_from_string.apply(this, arguments); }
            },
            "setState": {
              "value": function () { return this.set_state.apply(this, arguments); }
            },
            "setTime": {
              "value": function () { return this.set_time.apply(this, arguments); }
            },
            "setTimeToPresent": {
              "value": function () { return this.set_time_to_present.apply(this, arguments); }
            },
            "setValue": {
              "value": function () { return this.set_value.apply(this, arguments); }
            },
            "toString": {
              "value": function () { return this.to_string.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "StatsItem": {
          "prototype": {
            "getAccuracy": {
              "value": function () { return this.get_accuracy.apply(this, arguments); }
            },
            "getValue": {
              "value": function () { return this.get_value.apply(this, arguments); }
            },
            "setAccuracy": {
              "value": function () { return this.set_accuracy.apply(this, arguments); }
            },
            "setValue": {
              "value": function () { return this.set_value.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "WakeupItem": {
          "prototype": {
            "getCmdline": {
              "value": function () { return this.get_cmdline.apply(this, arguments); }
            },
            "getDetails": {
              "value": function () { return this.get_details.apply(this, arguments); }
            },
            "getId": {
              "value": function () { return this.get_id.apply(this, arguments); }
            },
            "getIsUserspace": {
              "value": function () { return this.get_is_userspace.apply(this, arguments); }
            },
            "getOld": {
              "value": function () { return this.get_old.apply(this, arguments); }
            },
            "getValue": {
              "value": function () { return this.get_value.apply(this, arguments); }
            },
            "setCmdline": {
              "value": function () { return this.set_cmdline.apply(this, arguments); }
            },
            "setDetails": {
              "value": function () { return this.set_details.apply(this, arguments); }
            },
            "setId": {
              "value": function () { return this.set_id.apply(this, arguments); }
            },
            "setIsUserspace": {
              "value": function () { return this.set_is_userspace.apply(this, arguments); }
            },
            "setOld": {
              "value": function () { return this.set_old.apply(this, arguments); }
            },
            "setValue": {
              "value": function () { return this.set_value.apply(this, arguments); }
            },
            "isUserspace": {
              "get": function () { return this.is_userspace; },
              "set": function (value) { this.is_userspace = value; }
            }
          },
          "static": {}
        },
        "Wakeups": {
          "prototype": {
            "getDataSync": {
              "value": function () { return this.get_data_sync.apply(this, arguments); }
            },
            "getHasCapability": {
              "value": function () { return this.get_has_capability.apply(this, arguments); }
            },
            "getPropertiesSync": {
              "value": function () { return this.get_properties_sync.apply(this, arguments); }
            },
            "getTotalSync": {
              "value": function () { return this.get_total_sync.apply(this, arguments); }
            }
          },
          "static": {}
        }
      },
      "static": {}
    },
    "Vte": {
      "class": {
        "Pty": {
          "prototype": {
            "childSetup": {
              "value": function () { return this.child_setup.apply(this, arguments); }
            },
            "getFd": {
              "value": function () { return this.get_fd.apply(this, arguments); }
            },
            "getSize": {
              "value": function () { return this.get_size.apply(this, arguments); }
            },
            "setSize": {
              "value": function () { return this.set_size.apply(this, arguments); }
            },
            "setUtf8": {
              "value": function () { return this.set_utf8.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Terminal": {
          "prototype": {
            "copyClipboard": {
              "value": function () { return this.copy_clipboard.apply(this, arguments); }
            },
            "copyPrimary": {
              "value": function () { return this.copy_primary.apply(this, arguments); }
            },
            "feedChild": {
              "value": function () { return this.feed_child.apply(this, arguments); }
            },
            "feedChildBinary": {
              "value": function () { return this.feed_child_binary.apply(this, arguments); }
            },
            "getAllowBold": {
              "value": function () { return this.get_allow_bold.apply(this, arguments); }
            },
            "getAudibleBell": {
              "value": function () { return this.get_audible_bell.apply(this, arguments); }
            },
            "getCharHeight": {
              "value": function () { return this.get_char_height.apply(this, arguments); }
            },
            "getCharWidth": {
              "value": function () { return this.get_char_width.apply(this, arguments); }
            },
            "getCjkAmbiguousWidth": {
              "value": function () { return this.get_cjk_ambiguous_width.apply(this, arguments); }
            },
            "getColumnCount": {
              "value": function () { return this.get_column_count.apply(this, arguments); }
            },
            "getCurrentDirectoryUri": {
              "value": function () { return this.get_current_directory_uri.apply(this, arguments); }
            },
            "getCurrentFileUri": {
              "value": function () { return this.get_current_file_uri.apply(this, arguments); }
            },
            "getCursorBlinkMode": {
              "value": function () { return this.get_cursor_blink_mode.apply(this, arguments); }
            },
            "getCursorPosition": {
              "value": function () { return this.get_cursor_position.apply(this, arguments); }
            },
            "getCursorShape": {
              "value": function () { return this.get_cursor_shape.apply(this, arguments); }
            },
            "getEncoding": {
              "value": function () { return this.get_encoding.apply(this, arguments); }
            },
            "getFont": {
              "value": function () { return this.get_font.apply(this, arguments); }
            },
            "getFontScale": {
              "value": function () { return this.get_font_scale.apply(this, arguments); }
            },
            "getGeometryHints": {
              "value": function () { return this.get_geometry_hints.apply(this, arguments); }
            },
            "getHasSelection": {
              "value": function () { return this.get_has_selection.apply(this, arguments); }
            },
            "getIconTitle": {
              "value": function () { return this.get_icon_title.apply(this, arguments); }
            },
            "getInputEnabled": {
              "value": function () { return this.get_input_enabled.apply(this, arguments); }
            },
            "getMouseAutohide": {
              "value": function () { return this.get_mouse_autohide.apply(this, arguments); }
            },
            "getPty": {
              "value": function () { return this.get_pty.apply(this, arguments); }
            },
            "getRewrapOnResize": {
              "value": function () { return this.get_rewrap_on_resize.apply(this, arguments); }
            },
            "getRowCount": {
              "value": function () { return this.get_row_count.apply(this, arguments); }
            },
            "getText": {
              "value": function () { return this.get_text.apply(this, arguments); }
            },
            "getTextIncludeTrailingSpaces": {
              "value": function () { return this.get_text_include_trailing_spaces.apply(this, arguments); }
            },
            "getTextRange": {
              "value": function () { return this.get_text_range.apply(this, arguments); }
            },
            "getWindowTitle": {
              "value": function () { return this.get_window_title.apply(this, arguments); }
            },
            "getWordCharExceptions": {
              "value": function () { return this.get_word_char_exceptions.apply(this, arguments); }
            },
            "matchAddGregex": {
              "value": function () { return this.match_add_gregex.apply(this, arguments); }
            },
            "matchCheck": {
              "value": function () { return this.match_check.apply(this, arguments); }
            },
            "matchCheckEvent": {
              "value": function () { return this.match_check_event.apply(this, arguments); }
            },
            "matchRemove": {
              "value": function () { return this.match_remove.apply(this, arguments); }
            },
            "matchRemoveAll": {
              "value": function () { return this.match_remove_all.apply(this, arguments); }
            },
            "matchSetCursorName": {
              "value": function () { return this.match_set_cursor_name.apply(this, arguments); }
            },
            "matchSetCursorType": {
              "value": function () { return this.match_set_cursor_type.apply(this, arguments); }
            },
            "pasteClipboard": {
              "value": function () { return this.paste_clipboard.apply(this, arguments); }
            },
            "pastePrimary": {
              "value": function () { return this.paste_primary.apply(this, arguments); }
            },
            "ptyNewSync": {
              "value": function () { return this.pty_new_sync.apply(this, arguments); }
            },
            "searchFindNext": {
              "value": function () { return this.search_find_next.apply(this, arguments); }
            },
            "searchFindPrevious": {
              "value": function () { return this.search_find_previous.apply(this, arguments); }
            },
            "searchGetGregex": {
              "value": function () { return this.search_get_gregex.apply(this, arguments); }
            },
            "searchGetWrapAround": {
              "value": function () { return this.search_get_wrap_around.apply(this, arguments); }
            },
            "searchSetGregex": {
              "value": function () { return this.search_set_gregex.apply(this, arguments); }
            },
            "searchSetWrapAround": {
              "value": function () { return this.search_set_wrap_around.apply(this, arguments); }
            },
            "selectAll": {
              "value": function () { return this.select_all.apply(this, arguments); }
            },
            "setAllowBold": {
              "value": function () { return this.set_allow_bold.apply(this, arguments); }
            },
            "setAudibleBell": {
              "value": function () { return this.set_audible_bell.apply(this, arguments); }
            },
            "setBackspaceBinding": {
              "value": function () { return this.set_backspace_binding.apply(this, arguments); }
            },
            "setCjkAmbiguousWidth": {
              "value": function () { return this.set_cjk_ambiguous_width.apply(this, arguments); }
            },
            "setColorBackground": {
              "value": function () { return this.set_color_background.apply(this, arguments); }
            },
            "setColorBold": {
              "value": function () { return this.set_color_bold.apply(this, arguments); }
            },
            "setColorCursor": {
              "value": function () { return this.set_color_cursor.apply(this, arguments); }
            },
            "setColorForeground": {
              "value": function () { return this.set_color_foreground.apply(this, arguments); }
            },
            "setColorHighlight": {
              "value": function () { return this.set_color_highlight.apply(this, arguments); }
            },
            "setColorHighlightForeground": {
              "value": function () { return this.set_color_highlight_foreground.apply(this, arguments); }
            },
            "setColors": {
              "value": function () { return this.set_colors.apply(this, arguments); }
            },
            "setCursorBlinkMode": {
              "value": function () { return this.set_cursor_blink_mode.apply(this, arguments); }
            },
            "setCursorShape": {
              "value": function () { return this.set_cursor_shape.apply(this, arguments); }
            },
            "setDefaultColors": {
              "value": function () { return this.set_default_colors.apply(this, arguments); }
            },
            "setDeleteBinding": {
              "value": function () { return this.set_delete_binding.apply(this, arguments); }
            },
            "setEncoding": {
              "value": function () { return this.set_encoding.apply(this, arguments); }
            },
            "setFont": {
              "value": function () { return this.set_font.apply(this, arguments); }
            },
            "setFontScale": {
              "value": function () { return this.set_font_scale.apply(this, arguments); }
            },
            "setGeometryHintsForWindow": {
              "value": function () { return this.set_geometry_hints_for_window.apply(this, arguments); }
            },
            "setInputEnabled": {
              "value": function () { return this.set_input_enabled.apply(this, arguments); }
            },
            "setMouseAutohide": {
              "value": function () { return this.set_mouse_autohide.apply(this, arguments); }
            },
            "setPty": {
              "value": function () { return this.set_pty.apply(this, arguments); }
            },
            "setRewrapOnResize": {
              "value": function () { return this.set_rewrap_on_resize.apply(this, arguments); }
            },
            "setScrollOnKeystroke": {
              "value": function () { return this.set_scroll_on_keystroke.apply(this, arguments); }
            },
            "setScrollOnOutput": {
              "value": function () { return this.set_scroll_on_output.apply(this, arguments); }
            },
            "setScrollbackLines": {
              "value": function () { return this.set_scrollback_lines.apply(this, arguments); }
            },
            "setSize": {
              "value": function () { return this.set_size.apply(this, arguments); }
            },
            "setWordCharExceptions": {
              "value": function () { return this.set_word_char_exceptions.apply(this, arguments); }
            },
            "spawnSync": {
              "value": function () { return this.spawn_sync.apply(this, arguments); }
            },
            "unselectAll": {
              "value": function () { return this.unselect_all.apply(this, arguments); }
            },
            "watchChild": {
              "value": function () { return this.watch_child.apply(this, arguments); }
            },
            "writeContentsSync": {
              "value": function () { return this.write_contents_sync.apply(this, arguments); }
            },
            "allowBold": {
              "get": function () { return this.allow_bold; },
              "set": function (value) { this.allow_bold = value; }
            },
            "audibleBell": {
              "get": function () { return this.audible_bell; },
              "set": function (value) { this.audible_bell = value; }
            },
            "backspaceBinding": {
              "get": function () { return this.backspace_binding; },
              "set": function (value) { this.backspace_binding = value; }
            },
            "cjkAmbiguousWidth": {
              "get": function () { return this.cjk_ambiguous_width; },
              "set": function (value) { this.cjk_ambiguous_width = value; }
            },
            "currentDirectoryUri": {
              "get": function () { return this.current_directory_uri; },
              "set": function (value) { this.current_directory_uri = value; }
            },
            "currentFileUri": {
              "get": function () { return this.current_file_uri; },
              "set": function (value) { this.current_file_uri = value; }
            },
            "cursorBlinkMode": {
              "get": function () { return this.cursor_blink_mode; },
              "set": function (value) { this.cursor_blink_mode = value; }
            },
            "cursorShape": {
              "get": function () { return this.cursor_shape; },
              "set": function (value) { this.cursor_shape = value; }
            },
            "deleteBinding": {
              "get": function () { return this.delete_binding; },
              "set": function (value) { this.delete_binding = value; }
            },
            "fontDesc": {
              "get": function () { return this.font_desc; },
              "set": function (value) { this.font_desc = value; }
            },
            "fontScale": {
              "get": function () { return this.font_scale; },
              "set": function (value) { this.font_scale = value; }
            },
            "iconTitle": {
              "get": function () { return this.icon_title; },
              "set": function (value) { this.icon_title = value; }
            },
            "inputEnabled": {
              "get": function () { return this.input_enabled; },
              "set": function (value) { this.input_enabled = value; }
            },
            "pointerAutohide": {
              "get": function () { return this.pointer_autohide; },
              "set": function (value) { this.pointer_autohide = value; }
            },
            "rewrapOnResize": {
              "get": function () { return this.rewrap_on_resize; },
              "set": function (value) { this.rewrap_on_resize = value; }
            },
            "scrollOnKeystroke": {
              "get": function () { return this.scroll_on_keystroke; },
              "set": function (value) { this.scroll_on_keystroke = value; }
            },
            "scrollOnOutput": {
              "get": function () { return this.scroll_on_output; },
              "set": function (value) { this.scroll_on_output = value; }
            },
            "scrollbackLines": {
              "get": function () { return this.scrollback_lines; },
              "set": function (value) { this.scrollback_lines = value; }
            },
            "windowTitle": {
              "get": function () { return this.window_title; },
              "set": function (value) { this.window_title = value; }
            },
            "wordCharExceptions": {
              "get": function () { return this.word_char_exceptions; },
              "set": function (value) { this.word_char_exceptions = value; }
            }
          },
          "static": {}
        }
      },
      "static": {
        "getFeatures": {
          "value": function () { return this.get_features.apply(this, arguments); }
        },
        "getMajorVersion": {
          "value": function () { return this.get_major_version.apply(this, arguments); }
        },
        "getMicroVersion": {
          "value": function () { return this.get_micro_version.apply(this, arguments); }
        },
        "getMinorVersion": {
          "value": function () { return this.get_minor_version.apply(this, arguments); }
        },
        "getUserShell": {
          "value": function () { return this.get_user_shell.apply(this, arguments); }
        },
        "ptyErrorQuark": {
          "value": function () { return this.pty_error_quark.apply(this, arguments); }
        }
      }
    },
    "WebKit": {
      "class": {
        "DOMAttr": {
          "prototype": {
            "getIsId": {
              "value": function () { return this.get_is_id.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getOwnerElement": {
              "value": function () { return this.get_owner_element.apply(this, arguments); }
            },
            "getSpecified": {
              "value": function () { return this.get_specified.apply(this, arguments); }
            },
            "getValue": {
              "value": function () { return this.get_value.apply(this, arguments); }
            },
            "setValue": {
              "value": function () { return this.set_value.apply(this, arguments); }
            },
            "isId": {
              "get": function () { return this.is_id; },
              "set": function (value) { this.is_id = value; }
            },
            "ownerElement": {
              "get": function () { return this.owner_element; },
              "set": function (value) { this.owner_element = value; }
            }
          },
          "static": {}
        },
        "DOMAudioTrack": {
          "prototype": {
            "getEnabled": {
              "value": function () { return this.get_enabled.apply(this, arguments); }
            },
            "getId": {
              "value": function () { return this.get_id.apply(this, arguments); }
            },
            "getKind": {
              "value": function () { return this.get_kind.apply(this, arguments); }
            },
            "getLabel": {
              "value": function () { return this.get_label.apply(this, arguments); }
            },
            "getLanguage": {
              "value": function () { return this.get_language.apply(this, arguments); }
            },
            "setEnabled": {
              "value": function () { return this.set_enabled.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DOMAudioTrackList": {
          "prototype": {
            "dispatchEvent": {
              "value": function () { return this.dispatch_event.apply(this, arguments); }
            },
            "getLength": {
              "value": function () { return this.get_length.apply(this, arguments); }
            },
            "getTrackById": {
              "value": function () { return this.get_track_by_id.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DOMBarInfo": {
          "prototype": {},
          "static": {
            "getVisible": {
              "value": function () { return this.get_visible.apply(this, arguments); }
            }
          }
        },
        "DOMBarProp": {
          "prototype": {
            "getVisible": {
              "value": function () { return this.get_visible.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DOMBatteryManager": {
          "prototype": {
            "dispatchEvent": {
              "value": function () { return this.dispatch_event.apply(this, arguments); }
            },
            "getCharging": {
              "value": function () { return this.get_charging.apply(this, arguments); }
            },
            "getChargingTime": {
              "value": function () { return this.get_charging_time.apply(this, arguments); }
            },
            "getDischargingTime": {
              "value": function () { return this.get_discharging_time.apply(this, arguments); }
            },
            "getLevel": {
              "value": function () { return this.get_level.apply(this, arguments); }
            },
            "chargingTime": {
              "get": function () { return this.charging_time; },
              "set": function (value) { this.charging_time = value; }
            },
            "dischargingTime": {
              "get": function () { return this.discharging_time; },
              "set": function (value) { this.discharging_time = value; }
            }
          },
          "static": {}
        },
        "DOMBlob": {
          "prototype": {
            "getSize": {
              "value": function () { return this.get_size.apply(this, arguments); }
            },
            "webkitSlice": {
              "value": function () { return this.webkit_slice.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DOMCDATASection": {
          "prototype": {},
          "static": {}
        },
        "DOMCSSRule": {
          "prototype": {
            "getCssText": {
              "value": function () { return this.get_css_text.apply(this, arguments); }
            },
            "getParentRule": {
              "value": function () { return this.get_parent_rule.apply(this, arguments); }
            },
            "getParentStyleSheet": {
              "value": function () { return this.get_parent_style_sheet.apply(this, arguments); }
            },
            "setCssText": {
              "value": function () { return this.set_css_text.apply(this, arguments); }
            },
            "cssText": {
              "get": function () { return this.css_text; },
              "set": function (value) { this.css_text = value; }
            },
            "parentRule": {
              "get": function () { return this.parent_rule; },
              "set": function (value) { this.parent_rule = value; }
            },
            "parentStyleSheet": {
              "get": function () { return this.parent_style_sheet; },
              "set": function (value) { this.parent_style_sheet = value; }
            }
          },
          "static": {}
        },
        "DOMCSSRuleList": {
          "prototype": {
            "getLength": {
              "value": function () { return this.get_length.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DOMCSSStyleDeclaration": {
          "prototype": {
            "getCssText": {
              "value": function () { return this.get_css_text.apply(this, arguments); }
            },
            "getLength": {
              "value": function () { return this.get_length.apply(this, arguments); }
            },
            "getParentRule": {
              "value": function () { return this.get_parent_rule.apply(this, arguments); }
            },
            "getPropertyCssValue": {
              "value": function () { return this.get_property_css_value.apply(this, arguments); }
            },
            "getPropertyPriority": {
              "value": function () { return this.get_property_priority.apply(this, arguments); }
            },
            "getPropertyShorthand": {
              "value": function () { return this.get_property_shorthand.apply(this, arguments); }
            },
            "getPropertyValue": {
              "value": function () { return this.get_property_value.apply(this, arguments); }
            },
            "isPropertyImplicit": {
              "value": function () { return this.is_property_implicit.apply(this, arguments); }
            },
            "removeProperty": {
              "value": function () { return this.remove_property.apply(this, arguments); }
            },
            "setCssText": {
              "value": function () { return this.set_css_text.apply(this, arguments); }
            },
            "setProperty": {
              "value": function () { return this.set_property.apply(this, arguments); }
            },
            "cssText": {
              "get": function () { return this.css_text; },
              "set": function (value) { this.css_text = value; }
            },
            "parentRule": {
              "get": function () { return this.parent_rule; },
              "set": function (value) { this.parent_rule = value; }
            }
          },
          "static": {}
        },
        "DOMCSSStyleSheet": {
          "prototype": {
            "addRule": {
              "value": function () { return this.add_rule.apply(this, arguments); }
            },
            "deleteRule": {
              "value": function () { return this.delete_rule.apply(this, arguments); }
            },
            "getCssRules": {
              "value": function () { return this.get_css_rules.apply(this, arguments); }
            },
            "getOwnerRule": {
              "value": function () { return this.get_owner_rule.apply(this, arguments); }
            },
            "getRules": {
              "value": function () { return this.get_rules.apply(this, arguments); }
            },
            "insertRule": {
              "value": function () { return this.insert_rule.apply(this, arguments); }
            },
            "removeRule": {
              "value": function () { return this.remove_rule.apply(this, arguments); }
            },
            "cssRules": {
              "get": function () { return this.css_rules; },
              "set": function (value) { this.css_rules = value; }
            },
            "ownerRule": {
              "get": function () { return this.owner_rule; },
              "set": function (value) { this.owner_rule = value; }
            }
          },
          "static": {}
        },
        "DOMCSSValue": {
          "prototype": {
            "getCssText": {
              "value": function () { return this.get_css_text.apply(this, arguments); }
            },
            "getCssValueType": {
              "value": function () { return this.get_css_value_type.apply(this, arguments); }
            },
            "setCssText": {
              "value": function () { return this.set_css_text.apply(this, arguments); }
            },
            "cssText": {
              "get": function () { return this.css_text; },
              "set": function (value) { this.css_text = value; }
            },
            "cssValueType": {
              "get": function () { return this.css_value_type; },
              "set": function (value) { this.css_value_type = value; }
            }
          },
          "static": {}
        },
        "DOMCharacterData": {
          "prototype": {
            "appendData": {
              "value": function () { return this.append_data.apply(this, arguments); }
            },
            "deleteData": {
              "value": function () { return this.delete_data.apply(this, arguments); }
            },
            "getData": {
              "value": function () { return this.get_data.apply(this, arguments); }
            },
            "getLength": {
              "value": function () { return this.get_length.apply(this, arguments); }
            },
            "insertData": {
              "value": function () { return this.insert_data.apply(this, arguments); }
            },
            "replaceData": {
              "value": function () { return this.replace_data.apply(this, arguments); }
            },
            "setData": {
              "value": function () { return this.set_data.apply(this, arguments); }
            },
            "substringData": {
              "value": function () { return this.substring_data.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DOMComment": {
          "prototype": {},
          "static": {}
        },
        "DOMConsole": {
          "prototype": {
            "getMemory": {
              "value": function () { return this.get_memory.apply(this, arguments); }
            },
            "groupEnd": {
              "value": function () { return this.group_end.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DOMDOMApplicationCache": {
          "prototype": {
            "dispatchEvent": {
              "value": function () { return this.dispatch_event.apply(this, arguments); }
            },
            "getStatus": {
              "value": function () { return this.get_status.apply(this, arguments); }
            },
            "swapCache": {
              "value": function () { return this.swap_cache.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DOMDOMImplementation": {
          "prototype": {
            "createCssStyleSheet": {
              "value": function () { return this.create_css_style_sheet.apply(this, arguments); }
            },
            "createDocument": {
              "value": function () { return this.create_document.apply(this, arguments); }
            },
            "createDocumentType": {
              "value": function () { return this.create_document_type.apply(this, arguments); }
            },
            "createHtmlDocument": {
              "value": function () { return this.create_html_document.apply(this, arguments); }
            },
            "hasFeature": {
              "value": function () { return this.has_feature.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DOMDOMMimeType": {
          "prototype": {
            "getDescription": {
              "value": function () { return this.get_description.apply(this, arguments); }
            },
            "getEnabledPlugin": {
              "value": function () { return this.get_enabled_plugin.apply(this, arguments); }
            },
            "getSuffixes": {
              "value": function () { return this.get_suffixes.apply(this, arguments); }
            },
            "enabledPlugin": {
              "get": function () { return this.enabled_plugin; },
              "set": function (value) { this.enabled_plugin = value; }
            }
          },
          "static": {}
        },
        "DOMDOMMimeTypeArray": {
          "prototype": {
            "getLength": {
              "value": function () { return this.get_length.apply(this, arguments); }
            },
            "namedItem": {
              "value": function () { return this.named_item.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DOMDOMNamedFlowCollection": {
          "prototype": {
            "getLength": {
              "value": function () { return this.get_length.apply(this, arguments); }
            },
            "namedItem": {
              "value": function () { return this.named_item.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DOMDOMPlugin": {
          "prototype": {
            "getDescription": {
              "value": function () { return this.get_description.apply(this, arguments); }
            },
            "getFilename": {
              "value": function () { return this.get_filename.apply(this, arguments); }
            },
            "getLength": {
              "value": function () { return this.get_length.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "namedItem": {
              "value": function () { return this.named_item.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DOMDOMPluginArray": {
          "prototype": {
            "getLength": {
              "value": function () { return this.get_length.apply(this, arguments); }
            },
            "namedItem": {
              "value": function () { return this.named_item.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DOMDOMSecurityPolicy": {
          "prototype": {
            "allowsConnectionTo": {
              "value": function () { return this.allows_connection_to.apply(this, arguments); }
            },
            "allowsFontFrom": {
              "value": function () { return this.allows_font_from.apply(this, arguments); }
            },
            "allowsFormAction": {
              "value": function () { return this.allows_form_action.apply(this, arguments); }
            },
            "allowsFrameFrom": {
              "value": function () { return this.allows_frame_from.apply(this, arguments); }
            },
            "allowsImageFrom": {
              "value": function () { return this.allows_image_from.apply(this, arguments); }
            },
            "allowsMediaFrom": {
              "value": function () { return this.allows_media_from.apply(this, arguments); }
            },
            "allowsObjectFrom": {
              "value": function () { return this.allows_object_from.apply(this, arguments); }
            },
            "allowsPluginType": {
              "value": function () { return this.allows_plugin_type.apply(this, arguments); }
            },
            "allowsScriptFrom": {
              "value": function () { return this.allows_script_from.apply(this, arguments); }
            },
            "allowsStyleFrom": {
              "value": function () { return this.allows_style_from.apply(this, arguments); }
            },
            "getAllowsEval": {
              "value": function () { return this.get_allows_eval.apply(this, arguments); }
            },
            "getAllowsInlineScript": {
              "value": function () { return this.get_allows_inline_script.apply(this, arguments); }
            },
            "getAllowsInlineStyle": {
              "value": function () { return this.get_allows_inline_style.apply(this, arguments); }
            },
            "getIsActive": {
              "value": function () { return this.get_is_active.apply(this, arguments); }
            },
            "getReportUrIs": {
              "value": function () { return this.get_report_ur_is.apply(this, arguments); }
            },
            "allowsEval": {
              "get": function () { return this.allows_eval; },
              "set": function (value) { this.allows_eval = value; }
            },
            "allowsInlineScript": {
              "get": function () { return this.allows_inline_script; },
              "set": function (value) { this.allows_inline_script = value; }
            },
            "allowsInlineStyle": {
              "get": function () { return this.allows_inline_style; },
              "set": function (value) { this.allows_inline_style = value; }
            },
            "isActive": {
              "get": function () { return this.is_active; },
              "set": function (value) { this.is_active = value; }
            },
            "reportUrIs": {
              "get": function () { return this.report_ur_is; },
              "set": function (value) { this.report_ur_is = value; }
            }
          },
          "static": {}
        },
        "DOMDOMSelection": {
          "prototype": {
            "addRange": {
              "value": function () { return this.add_range.apply(this, arguments); }
            },
            "collapseToEnd": {
              "value": function () { return this.collapse_to_end.apply(this, arguments); }
            },
            "collapseToStart": {
              "value": function () { return this.collapse_to_start.apply(this, arguments); }
            },
            "containsNode": {
              "value": function () { return this.contains_node.apply(this, arguments); }
            },
            "deleteFromDocument": {
              "value": function () { return this.delete_from_document.apply(this, arguments); }
            },
            "getAnchorNode": {
              "value": function () { return this.get_anchor_node.apply(this, arguments); }
            },
            "getAnchorOffset": {
              "value": function () { return this.get_anchor_offset.apply(this, arguments); }
            },
            "getBaseNode": {
              "value": function () { return this.get_base_node.apply(this, arguments); }
            },
            "getBaseOffset": {
              "value": function () { return this.get_base_offset.apply(this, arguments); }
            },
            "getExtentNode": {
              "value": function () { return this.get_extent_node.apply(this, arguments); }
            },
            "getExtentOffset": {
              "value": function () { return this.get_extent_offset.apply(this, arguments); }
            },
            "getFocusNode": {
              "value": function () { return this.get_focus_node.apply(this, arguments); }
            },
            "getFocusOffset": {
              "value": function () { return this.get_focus_offset.apply(this, arguments); }
            },
            "getIsCollapsed": {
              "value": function () { return this.get_is_collapsed.apply(this, arguments); }
            },
            "getRangeAt": {
              "value": function () { return this.get_range_at.apply(this, arguments); }
            },
            "getRangeCount": {
              "value": function () { return this.get_range_count.apply(this, arguments); }
            },
            "removeAllRanges": {
              "value": function () { return this.remove_all_ranges.apply(this, arguments); }
            },
            "selectAllChildren": {
              "value": function () { return this.select_all_children.apply(this, arguments); }
            },
            "setBaseAndExtent": {
              "value": function () { return this.set_base_and_extent.apply(this, arguments); }
            },
            "setPosition": {
              "value": function () { return this.set_position.apply(this, arguments); }
            },
            "anchorNode": {
              "get": function () { return this.anchor_node; },
              "set": function (value) { this.anchor_node = value; }
            },
            "anchorOffset": {
              "get": function () { return this.anchor_offset; },
              "set": function (value) { this.anchor_offset = value; }
            },
            "baseNode": {
              "get": function () { return this.base_node; },
              "set": function (value) { this.base_node = value; }
            },
            "baseOffset": {
              "get": function () { return this.base_offset; },
              "set": function (value) { this.base_offset = value; }
            },
            "extentNode": {
              "get": function () { return this.extent_node; },
              "set": function (value) { this.extent_node = value; }
            },
            "extentOffset": {
              "get": function () { return this.extent_offset; },
              "set": function (value) { this.extent_offset = value; }
            },
            "focusNode": {
              "get": function () { return this.focus_node; },
              "set": function (value) { this.focus_node = value; }
            },
            "focusOffset": {
              "get": function () { return this.focus_offset; },
              "set": function (value) { this.focus_offset = value; }
            },
            "isCollapsed": {
              "get": function () { return this.is_collapsed; },
              "set": function (value) { this.is_collapsed = value; }
            },
            "rangeCount": {
              "get": function () { return this.range_count; },
              "set": function (value) { this.range_count = value; }
            }
          },
          "static": {}
        },
        "DOMDOMSettableTokenList": {
          "prototype": {
            "getValue": {
              "value": function () { return this.get_value.apply(this, arguments); }
            },
            "setValue": {
              "value": function () { return this.set_value.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DOMDOMStringList": {
          "prototype": {
            "getLength": {
              "value": function () { return this.get_length.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DOMDOMStringMap": {
          "prototype": {},
          "static": {}
        },
        "DOMDOMTokenList": {
          "prototype": {
            "getLength": {
              "value": function () { return this.get_length.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DOMDOMWindow": {
          "prototype": {
            "cancelAnimationFrame": {
              "value": function () { return this.cancel_animation_frame.apply(this, arguments); }
            },
            "captureEvents": {
              "value": function () { return this.capture_events.apply(this, arguments); }
            },
            "clearInterval": {
              "value": function () { return this.clear_interval.apply(this, arguments); }
            },
            "clearTimeout": {
              "value": function () { return this.clear_timeout.apply(this, arguments); }
            },
            "dispatchEvent": {
              "value": function () { return this.dispatch_event.apply(this, arguments); }
            },
            "getApplicationCache": {
              "value": function () { return this.get_application_cache.apply(this, arguments); }
            },
            "getClientInformation": {
              "value": function () { return this.get_client_information.apply(this, arguments); }
            },
            "getClosed": {
              "value": function () { return this.get_closed.apply(this, arguments); }
            },
            "getComputedStyle": {
              "value": function () { return this.get_computed_style.apply(this, arguments); }
            },
            "getConsole": {
              "value": function () { return this.get_console.apply(this, arguments); }
            },
            "getCss": {
              "value": function () { return this.get_css.apply(this, arguments); }
            },
            "getDefaultStatus": {
              "value": function () { return this.get_default_status.apply(this, arguments); }
            },
            "getDevicePixelRatio": {
              "value": function () { return this.get_device_pixel_ratio.apply(this, arguments); }
            },
            "getDocument": {
              "value": function () { return this.get_document.apply(this, arguments); }
            },
            "getFrameElement": {
              "value": function () { return this.get_frame_element.apply(this, arguments); }
            },
            "getFrames": {
              "value": function () { return this.get_frames.apply(this, arguments); }
            },
            "getHistory": {
              "value": function () { return this.get_history.apply(this, arguments); }
            },
            "getInnerHeight": {
              "value": function () { return this.get_inner_height.apply(this, arguments); }
            },
            "getInnerWidth": {
              "value": function () { return this.get_inner_width.apply(this, arguments); }
            },
            "getLength": {
              "value": function () { return this.get_length.apply(this, arguments); }
            },
            "getLocalStorage": {
              "value": function () { return this.get_local_storage.apply(this, arguments); }
            },
            "getLocationbar": {
              "value": function () { return this.get_locationbar.apply(this, arguments); }
            },
            "getMenubar": {
              "value": function () { return this.get_menubar.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getNavigator": {
              "value": function () { return this.get_navigator.apply(this, arguments); }
            },
            "getOffscreenBuffering": {
              "value": function () { return this.get_offscreen_buffering.apply(this, arguments); }
            },
            "getOpener": {
              "value": function () { return this.get_opener.apply(this, arguments); }
            },
            "getOuterHeight": {
              "value": function () { return this.get_outer_height.apply(this, arguments); }
            },
            "getOuterWidth": {
              "value": function () { return this.get_outer_width.apply(this, arguments); }
            },
            "getPageXOffset": {
              "value": function () { return this.get_page_x_offset.apply(this, arguments); }
            },
            "getPageYOffset": {
              "value": function () { return this.get_page_y_offset.apply(this, arguments); }
            },
            "getParent": {
              "value": function () { return this.get_parent.apply(this, arguments); }
            },
            "getPerformance": {
              "value": function () { return this.get_performance.apply(this, arguments); }
            },
            "getPersonalbar": {
              "value": function () { return this.get_personalbar.apply(this, arguments); }
            },
            "getScreen": {
              "value": function () { return this.get_screen.apply(this, arguments); }
            },
            "getScreenLeft": {
              "value": function () { return this.get_screen_left.apply(this, arguments); }
            },
            "getScreenTop": {
              "value": function () { return this.get_screen_top.apply(this, arguments); }
            },
            "getScreenX": {
              "value": function () { return this.get_screen_x.apply(this, arguments); }
            },
            "getScreenY": {
              "value": function () { return this.get_screen_y.apply(this, arguments); }
            },
            "getScrollX": {
              "value": function () { return this.get_scroll_x.apply(this, arguments); }
            },
            "getScrollY": {
              "value": function () { return this.get_scroll_y.apply(this, arguments); }
            },
            "getScrollbars": {
              "value": function () { return this.get_scrollbars.apply(this, arguments); }
            },
            "getSelection": {
              "value": function () { return this.get_selection.apply(this, arguments); }
            },
            "getSelf": {
              "value": function () { return this.get_self.apply(this, arguments); }
            },
            "getSessionStorage": {
              "value": function () { return this.get_session_storage.apply(this, arguments); }
            },
            "getStatus": {
              "value": function () { return this.get_status.apply(this, arguments); }
            },
            "getStatusbar": {
              "value": function () { return this.get_statusbar.apply(this, arguments); }
            },
            "getStyleMedia": {
              "value": function () { return this.get_style_media.apply(this, arguments); }
            },
            "getToolbar": {
              "value": function () { return this.get_toolbar.apply(this, arguments); }
            },
            "getTop": {
              "value": function () { return this.get_top.apply(this, arguments); }
            },
            "getWebkitStorageInfo": {
              "value": function () { return this.get_webkit_storage_info.apply(this, arguments); }
            },
            "getWindow": {
              "value": function () { return this.get_window.apply(this, arguments); }
            },
            "matchMedia": {
              "value": function () { return this.match_media.apply(this, arguments); }
            },
            "moveBy": {
              "value": function () { return this.move_by.apply(this, arguments); }
            },
            "moveTo": {
              "value": function () { return this.move_to.apply(this, arguments); }
            },
            "releaseEvents": {
              "value": function () { return this.release_events.apply(this, arguments); }
            },
            "resizeBy": {
              "value": function () { return this.resize_by.apply(this, arguments); }
            },
            "resizeTo": {
              "value": function () { return this.resize_to.apply(this, arguments); }
            },
            "scrollBy": {
              "value": function () { return this.scroll_by.apply(this, arguments); }
            },
            "scrollTo": {
              "value": function () { return this.scroll_to.apply(this, arguments); }
            },
            "setDefaultStatus": {
              "value": function () { return this.set_default_status.apply(this, arguments); }
            },
            "setName": {
              "value": function () { return this.set_name.apply(this, arguments); }
            },
            "setStatus": {
              "value": function () { return this.set_status.apply(this, arguments); }
            },
            "webkitCancelAnimationFrame": {
              "value": function () { return this.webkit_cancel_animation_frame.apply(this, arguments); }
            },
            "webkitCancelRequestAnimationFrame": {
              "value": function () { return this.webkit_cancel_request_animation_frame.apply(this, arguments); }
            },
            "webkitConvertPointFromNodeToPage": {
              "value": function () { return this.webkit_convert_point_from_node_to_page.apply(this, arguments); }
            },
            "webkitConvertPointFromPageToNode": {
              "value": function () { return this.webkit_convert_point_from_page_to_node.apply(this, arguments); }
            },
            "applicationCache": {
              "get": function () { return this.application_cache; },
              "set": function (value) { this.application_cache = value; }
            },
            "clientInformation": {
              "get": function () { return this.client_information; },
              "set": function (value) { this.client_information = value; }
            },
            "defaultStatus": {
              "get": function () { return this.default_status; },
              "set": function (value) { this.default_status = value; }
            },
            "devicePixelRatio": {
              "get": function () { return this.device_pixel_ratio; },
              "set": function (value) { this.device_pixel_ratio = value; }
            },
            "frameElement": {
              "get": function () { return this.frame_element; },
              "set": function (value) { this.frame_element = value; }
            },
            "innerHeight": {
              "get": function () { return this.inner_height; },
              "set": function (value) { this.inner_height = value; }
            },
            "innerWidth": {
              "get": function () { return this.inner_width; },
              "set": function (value) { this.inner_width = value; }
            },
            "localStorage": {
              "get": function () { return this.local_storage; },
              "set": function (value) { this.local_storage = value; }
            },
            "offscreenBuffering": {
              "get": function () { return this.offscreen_buffering; },
              "set": function (value) { this.offscreen_buffering = value; }
            },
            "outerHeight": {
              "get": function () { return this.outer_height; },
              "set": function (value) { this.outer_height = value; }
            },
            "outerWidth": {
              "get": function () { return this.outer_width; },
              "set": function (value) { this.outer_width = value; }
            },
            "pageXOffset": {
              "get": function () { return this.page_x_offset; },
              "set": function (value) { this.page_x_offset = value; }
            },
            "pageYOffset": {
              "get": function () { return this.page_y_offset; },
              "set": function (value) { this.page_y_offset = value; }
            },
            "screenLeft": {
              "get": function () { return this.screen_left; },
              "set": function (value) { this.screen_left = value; }
            },
            "screenTop": {
              "get": function () { return this.screen_top; },
              "set": function (value) { this.screen_top = value; }
            },
            "screenX": {
              "get": function () { return this.screen_x; },
              "set": function (value) { this.screen_x = value; }
            },
            "screenY": {
              "get": function () { return this.screen_y; },
              "set": function (value) { this.screen_y = value; }
            },
            "scrollX": {
              "get": function () { return this.scroll_x; },
              "set": function (value) { this.scroll_x = value; }
            },
            "scrollY": {
              "get": function () { return this.scroll_y; },
              "set": function (value) { this.scroll_y = value; }
            },
            "sessionStorage": {
              "get": function () { return this.session_storage; },
              "set": function (value) { this.session_storage = value; }
            },
            "styleMedia": {
              "get": function () { return this.style_media; },
              "set": function (value) { this.style_media = value; }
            },
            "webkitStorageInfo": {
              "get": function () { return this.webkit_storage_info; },
              "set": function (value) { this.webkit_storage_info = value; }
            }
          },
          "static": {}
        },
        "DOMDOMWindowCSS": {
          "prototype": {},
          "static": {}
        },
        "DOMDatabase": {
          "prototype": {
            "getVersion": {
              "value": function () { return this.get_version.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DOMDocument": {
          "prototype": {
            "adoptNode": {
              "value": function () { return this.adopt_node.apply(this, arguments); }
            },
            "caretRangeFromPoint": {
              "value": function () { return this.caret_range_from_point.apply(this, arguments); }
            },
            "createAttribute": {
              "value": function () { return this.create_attribute.apply(this, arguments); }
            },
            "createAttributeNs": {
              "value": function () { return this.create_attribute_ns.apply(this, arguments); }
            },
            "createCdataSection": {
              "value": function () { return this.create_cdata_section.apply(this, arguments); }
            },
            "createComment": {
              "value": function () { return this.create_comment.apply(this, arguments); }
            },
            "createCssStyleDeclaration": {
              "value": function () { return this.create_css_style_declaration.apply(this, arguments); }
            },
            "createDocumentFragment": {
              "value": function () { return this.create_document_fragment.apply(this, arguments); }
            },
            "createElement": {
              "value": function () { return this.create_element.apply(this, arguments); }
            },
            "createElementNs": {
              "value": function () { return this.create_element_ns.apply(this, arguments); }
            },
            "createEntityReference": {
              "value": function () { return this.create_entity_reference.apply(this, arguments); }
            },
            "createEvent": {
              "value": function () { return this.create_event.apply(this, arguments); }
            },
            "createExpression": {
              "value": function () { return this.create_expression.apply(this, arguments); }
            },
            "createNodeIterator": {
              "value": function () { return this.create_node_iterator.apply(this, arguments); }
            },
            "createNsResolver": {
              "value": function () { return this.create_ns_resolver.apply(this, arguments); }
            },
            "createProcessingInstruction": {
              "value": function () { return this.create_processing_instruction.apply(this, arguments); }
            },
            "createRange": {
              "value": function () { return this.create_range.apply(this, arguments); }
            },
            "createTextNode": {
              "value": function () { return this.create_text_node.apply(this, arguments); }
            },
            "createTouch": {
              "value": function () { return this.create_touch.apply(this, arguments); }
            },
            "createTreeWalker": {
              "value": function () { return this.create_tree_walker.apply(this, arguments); }
            },
            "elementFromPoint": {
              "value": function () { return this.element_from_point.apply(this, arguments); }
            },
            "execCommand": {
              "value": function () { return this.exec_command.apply(this, arguments); }
            },
            "getAnchors": {
              "value": function () { return this.get_anchors.apply(this, arguments); }
            },
            "getApplets": {
              "value": function () { return this.get_applets.apply(this, arguments); }
            },
            "getBody": {
              "value": function () { return this.get_body.apply(this, arguments); }
            },
            "getCharacterSet": {
              "value": function () { return this.get_character_set.apply(this, arguments); }
            },
            "getCharset": {
              "value": function () { return this.get_charset.apply(this, arguments); }
            },
            "getCompatMode": {
              "value": function () { return this.get_compat_mode.apply(this, arguments); }
            },
            "getCookie": {
              "value": function () { return this.get_cookie.apply(this, arguments); }
            },
            "getCurrentScript": {
              "value": function () { return this.get_current_script.apply(this, arguments); }
            },
            "getDefaultCharset": {
              "value": function () { return this.get_default_charset.apply(this, arguments); }
            },
            "getDefaultView": {
              "value": function () { return this.get_default_view.apply(this, arguments); }
            },
            "getDoctype": {
              "value": function () { return this.get_doctype.apply(this, arguments); }
            },
            "getDocumentElement": {
              "value": function () { return this.get_document_element.apply(this, arguments); }
            },
            "getDocumentUri": {
              "value": function () { return this.get_document_uri.apply(this, arguments); }
            },
            "getDomain": {
              "value": function () { return this.get_domain.apply(this, arguments); }
            },
            "getElementById": {
              "value": function () { return this.get_element_by_id.apply(this, arguments); }
            },
            "getElementsByClassName": {
              "value": function () { return this.get_elements_by_class_name.apply(this, arguments); }
            },
            "getElementsByName": {
              "value": function () { return this.get_elements_by_name.apply(this, arguments); }
            },
            "getElementsByTagName": {
              "value": function () { return this.get_elements_by_tag_name.apply(this, arguments); }
            },
            "getElementsByTagNameNs": {
              "value": function () { return this.get_elements_by_tag_name_ns.apply(this, arguments); }
            },
            "getForms": {
              "value": function () { return this.get_forms.apply(this, arguments); }
            },
            "getHead": {
              "value": function () { return this.get_head.apply(this, arguments); }
            },
            "getHidden": {
              "value": function () { return this.get_hidden.apply(this, arguments); }
            },
            "getImages": {
              "value": function () { return this.get_images.apply(this, arguments); }
            },
            "getImplementation": {
              "value": function () { return this.get_implementation.apply(this, arguments); }
            },
            "getInputEncoding": {
              "value": function () { return this.get_input_encoding.apply(this, arguments); }
            },
            "getLastModified": {
              "value": function () { return this.get_last_modified.apply(this, arguments); }
            },
            "getLinks": {
              "value": function () { return this.get_links.apply(this, arguments); }
            },
            "getOverrideStyle": {
              "value": function () { return this.get_override_style.apply(this, arguments); }
            },
            "getPreferredStylesheetSet": {
              "value": function () { return this.get_preferred_stylesheet_set.apply(this, arguments); }
            },
            "getReadyState": {
              "value": function () { return this.get_ready_state.apply(this, arguments); }
            },
            "getReferrer": {
              "value": function () { return this.get_referrer.apply(this, arguments); }
            },
            "getSecurityPolicy": {
              "value": function () { return this.get_security_policy.apply(this, arguments); }
            },
            "getSelectedStylesheetSet": {
              "value": function () { return this.get_selected_stylesheet_set.apply(this, arguments); }
            },
            "getStyleSheets": {
              "value": function () { return this.get_style_sheets.apply(this, arguments); }
            },
            "getTitle": {
              "value": function () { return this.get_title.apply(this, arguments); }
            },
            "getUrl": {
              "value": function () { return this.get_url.apply(this, arguments); }
            },
            "getVisibilityState": {
              "value": function () { return this.get_visibility_state.apply(this, arguments); }
            },
            "getWebkitCurrentFullScreenElement": {
              "value": function () { return this.get_webkit_current_full_screen_element.apply(this, arguments); }
            },
            "getWebkitFullScreenKeyboardInputAllowed": {
              "value": function () { return this.get_webkit_full_screen_keyboard_input_allowed.apply(this, arguments); }
            },
            "getWebkitFullscreenElement": {
              "value": function () { return this.get_webkit_fullscreen_element.apply(this, arguments); }
            },
            "getWebkitFullscreenEnabled": {
              "value": function () { return this.get_webkit_fullscreen_enabled.apply(this, arguments); }
            },
            "getWebkitHidden": {
              "value": function () { return this.get_webkit_hidden.apply(this, arguments); }
            },
            "getWebkitIsFullScreen": {
              "value": function () { return this.get_webkit_is_full_screen.apply(this, arguments); }
            },
            "getWebkitPointerLockElement": {
              "value": function () { return this.get_webkit_pointer_lock_element.apply(this, arguments); }
            },
            "getWebkitVisibilityState": {
              "value": function () { return this.get_webkit_visibility_state.apply(this, arguments); }
            },
            "getXmlEncoding": {
              "value": function () { return this.get_xml_encoding.apply(this, arguments); }
            },
            "getXmlStandalone": {
              "value": function () { return this.get_xml_standalone.apply(this, arguments); }
            },
            "getXmlVersion": {
              "value": function () { return this.get_xml_version.apply(this, arguments); }
            },
            "importNode": {
              "value": function () { return this.import_node.apply(this, arguments); }
            },
            "queryCommandEnabled": {
              "value": function () { return this.query_command_enabled.apply(this, arguments); }
            },
            "queryCommandIndeterm": {
              "value": function () { return this.query_command_indeterm.apply(this, arguments); }
            },
            "queryCommandState": {
              "value": function () { return this.query_command_state.apply(this, arguments); }
            },
            "queryCommandSupported": {
              "value": function () { return this.query_command_supported.apply(this, arguments); }
            },
            "queryCommandValue": {
              "value": function () { return this.query_command_value.apply(this, arguments); }
            },
            "querySelector": {
              "value": function () { return this.query_selector.apply(this, arguments); }
            },
            "querySelectorAll": {
              "value": function () { return this.query_selector_all.apply(this, arguments); }
            },
            "setBody": {
              "value": function () { return this.set_body.apply(this, arguments); }
            },
            "setCharset": {
              "value": function () { return this.set_charset.apply(this, arguments); }
            },
            "setCookie": {
              "value": function () { return this.set_cookie.apply(this, arguments); }
            },
            "setDocumentUri": {
              "value": function () { return this.set_document_uri.apply(this, arguments); }
            },
            "setSelectedStylesheetSet": {
              "value": function () { return this.set_selected_stylesheet_set.apply(this, arguments); }
            },
            "setTitle": {
              "value": function () { return this.set_title.apply(this, arguments); }
            },
            "setXmlStandalone": {
              "value": function () { return this.set_xml_standalone.apply(this, arguments); }
            },
            "setXmlVersion": {
              "value": function () { return this.set_xml_version.apply(this, arguments); }
            },
            "webkitCancelFullScreen": {
              "value": function () { return this.webkit_cancel_full_screen.apply(this, arguments); }
            },
            "webkitExitFullscreen": {
              "value": function () { return this.webkit_exit_fullscreen.apply(this, arguments); }
            },
            "webkitExitPointerLock": {
              "value": function () { return this.webkit_exit_pointer_lock.apply(this, arguments); }
            },
            "webkitGetNamedFlows": {
              "value": function () { return this.webkit_get_named_flows.apply(this, arguments); }
            },
            "characterSet": {
              "get": function () { return this.character_set; },
              "set": function (value) { this.character_set = value; }
            },
            "compatMode": {
              "get": function () { return this.compat_mode; },
              "set": function (value) { this.compat_mode = value; }
            },
            "currentScript": {
              "get": function () { return this.current_script; },
              "set": function (value) { this.current_script = value; }
            },
            "defaultCharset": {
              "get": function () { return this.default_charset; },
              "set": function (value) { this.default_charset = value; }
            },
            "defaultView": {
              "get": function () { return this.default_view; },
              "set": function (value) { this.default_view = value; }
            },
            "documentElement": {
              "get": function () { return this.document_element; },
              "set": function (value) { this.document_element = value; }
            },
            "documentUri": {
              "get": function () { return this.document_uri; },
              "set": function (value) { this.document_uri = value; }
            },
            "inputEncoding": {
              "get": function () { return this.input_encoding; },
              "set": function (value) { this.input_encoding = value; }
            },
            "lastModified": {
              "get": function () { return this.last_modified; },
              "set": function (value) { this.last_modified = value; }
            },
            "preferredStylesheetSet": {
              "get": function () { return this.preferred_stylesheet_set; },
              "set": function (value) { this.preferred_stylesheet_set = value; }
            },
            "readyState": {
              "get": function () { return this.ready_state; },
              "set": function (value) { this.ready_state = value; }
            },
            "securityPolicy": {
              "get": function () { return this.security_policy; },
              "set": function (value) { this.security_policy = value; }
            },
            "selectedStylesheetSet": {
              "get": function () { return this.selected_stylesheet_set; },
              "set": function (value) { this.selected_stylesheet_set = value; }
            },
            "styleSheets": {
              "get": function () { return this.style_sheets; },
              "set": function (value) { this.style_sheets = value; }
            },
            "visibilityState": {
              "get": function () { return this.visibility_state; },
              "set": function (value) { this.visibility_state = value; }
            },
            "webkitCurrentFullScreenElement": {
              "get": function () { return this.webkit_current_full_screen_element; },
              "set": function (value) { this.webkit_current_full_screen_element = value; }
            },
            "webkitFullScreenKeyboardInputAllowed": {
              "get": function () { return this.webkit_full_screen_keyboard_input_allowed; },
              "set": function (value) { this.webkit_full_screen_keyboard_input_allowed = value; }
            },
            "webkitFullscreenElement": {
              "get": function () { return this.webkit_fullscreen_element; },
              "set": function (value) { this.webkit_fullscreen_element = value; }
            },
            "webkitFullscreenEnabled": {
              "get": function () { return this.webkit_fullscreen_enabled; },
              "set": function (value) { this.webkit_fullscreen_enabled = value; }
            },
            "webkitIsFullScreen": {
              "get": function () { return this.webkit_is_full_screen; },
              "set": function (value) { this.webkit_is_full_screen = value; }
            },
            "webkitPointerLockElement": {
              "get": function () { return this.webkit_pointer_lock_element; },
              "set": function (value) { this.webkit_pointer_lock_element = value; }
            },
            "xmlEncoding": {
              "get": function () { return this.xml_encoding; },
              "set": function (value) { this.xml_encoding = value; }
            },
            "xmlStandalone": {
              "get": function () { return this.xml_standalone; },
              "set": function (value) { this.xml_standalone = value; }
            },
            "xmlVersion": {
              "get": function () { return this.xml_version; },
              "set": function (value) { this.xml_version = value; }
            }
          },
          "static": {}
        },
        "DOMDocumentFragment": {
          "prototype": {
            "querySelector": {
              "value": function () { return this.query_selector.apply(this, arguments); }
            },
            "querySelectorAll": {
              "value": function () { return this.query_selector_all.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DOMDocumentType": {
          "prototype": {
            "getEntities": {
              "value": function () { return this.get_entities.apply(this, arguments); }
            },
            "getInternalSubset": {
              "value": function () { return this.get_internal_subset.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getNotations": {
              "value": function () { return this.get_notations.apply(this, arguments); }
            },
            "getPublicId": {
              "value": function () { return this.get_public_id.apply(this, arguments); }
            },
            "getSystemId": {
              "value": function () { return this.get_system_id.apply(this, arguments); }
            },
            "internalSubset": {
              "get": function () { return this.internal_subset; },
              "set": function (value) { this.internal_subset = value; }
            },
            "publicId": {
              "get": function () { return this.public_id; },
              "set": function (value) { this.public_id = value; }
            },
            "systemId": {
              "get": function () { return this.system_id; },
              "set": function (value) { this.system_id = value; }
            }
          },
          "static": {}
        },
        "DOMElement": {
          "prototype": {
            "getAttribute": {
              "value": function () { return this.get_attribute.apply(this, arguments); }
            },
            "getAttributeNode": {
              "value": function () { return this.get_attribute_node.apply(this, arguments); }
            },
            "getAttributeNodeNs": {
              "value": function () { return this.get_attribute_node_ns.apply(this, arguments); }
            },
            "getAttributeNs": {
              "value": function () { return this.get_attribute_ns.apply(this, arguments); }
            },
            "getAttributes": {
              "value": function () { return this.get_attributes.apply(this, arguments); }
            },
            "getChildElementCount": {
              "value": function () { return this.get_child_element_count.apply(this, arguments); }
            },
            "getClassList": {
              "value": function () { return this.get_class_list.apply(this, arguments); }
            },
            "getClassName": {
              "value": function () { return this.get_class_name.apply(this, arguments); }
            },
            "getClientHeight": {
              "value": function () { return this.get_client_height.apply(this, arguments); }
            },
            "getClientLeft": {
              "value": function () { return this.get_client_left.apply(this, arguments); }
            },
            "getClientTop": {
              "value": function () { return this.get_client_top.apply(this, arguments); }
            },
            "getClientWidth": {
              "value": function () { return this.get_client_width.apply(this, arguments); }
            },
            "getElementsByClassName": {
              "value": function () { return this.get_elements_by_class_name.apply(this, arguments); }
            },
            "getElementsByTagName": {
              "value": function () { return this.get_elements_by_tag_name.apply(this, arguments); }
            },
            "getElementsByTagNameNs": {
              "value": function () { return this.get_elements_by_tag_name_ns.apply(this, arguments); }
            },
            "getFirstElementChild": {
              "value": function () { return this.get_first_element_child.apply(this, arguments); }
            },
            "getId": {
              "value": function () { return this.get_id.apply(this, arguments); }
            },
            "getLastElementChild": {
              "value": function () { return this.get_last_element_child.apply(this, arguments); }
            },
            "getNextElementSibling": {
              "value": function () { return this.get_next_element_sibling.apply(this, arguments); }
            },
            "getOffsetHeight": {
              "value": function () { return this.get_offset_height.apply(this, arguments); }
            },
            "getOffsetLeft": {
              "value": function () { return this.get_offset_left.apply(this, arguments); }
            },
            "getOffsetParent": {
              "value": function () { return this.get_offset_parent.apply(this, arguments); }
            },
            "getOffsetTop": {
              "value": function () { return this.get_offset_top.apply(this, arguments); }
            },
            "getOffsetWidth": {
              "value": function () { return this.get_offset_width.apply(this, arguments); }
            },
            "getPreviousElementSibling": {
              "value": function () { return this.get_previous_element_sibling.apply(this, arguments); }
            },
            "getScrollHeight": {
              "value": function () { return this.get_scroll_height.apply(this, arguments); }
            },
            "getScrollLeft": {
              "value": function () { return this.get_scroll_left.apply(this, arguments); }
            },
            "getScrollTop": {
              "value": function () { return this.get_scroll_top.apply(this, arguments); }
            },
            "getScrollWidth": {
              "value": function () { return this.get_scroll_width.apply(this, arguments); }
            },
            "getStyle": {
              "value": function () { return this.get_style.apply(this, arguments); }
            },
            "getTagName": {
              "value": function () { return this.get_tag_name.apply(this, arguments); }
            },
            "getWebkitRegionOverflow": {
              "value": function () { return this.get_webkit_region_overflow.apply(this, arguments); }
            },
            "getWebkitRegionOverset": {
              "value": function () { return this.get_webkit_region_overset.apply(this, arguments); }
            },
            "hasAttribute": {
              "value": function () { return this.has_attribute.apply(this, arguments); }
            },
            "hasAttributeNs": {
              "value": function () { return this.has_attribute_ns.apply(this, arguments); }
            },
            "hasAttributes": {
              "value": function () { return this.has_attributes.apply(this, arguments); }
            },
            "querySelector": {
              "value": function () { return this.query_selector.apply(this, arguments); }
            },
            "querySelectorAll": {
              "value": function () { return this.query_selector_all.apply(this, arguments); }
            },
            "removeAttribute": {
              "value": function () { return this.remove_attribute.apply(this, arguments); }
            },
            "removeAttributeNode": {
              "value": function () { return this.remove_attribute_node.apply(this, arguments); }
            },
            "removeAttributeNs": {
              "value": function () { return this.remove_attribute_ns.apply(this, arguments); }
            },
            "scrollByLines": {
              "value": function () { return this.scroll_by_lines.apply(this, arguments); }
            },
            "scrollByPages": {
              "value": function () { return this.scroll_by_pages.apply(this, arguments); }
            },
            "scrollIntoView": {
              "value": function () { return this.scroll_into_view.apply(this, arguments); }
            },
            "scrollIntoViewIfNeeded": {
              "value": function () { return this.scroll_into_view_if_needed.apply(this, arguments); }
            },
            "setAttribute": {
              "value": function () { return this.set_attribute.apply(this, arguments); }
            },
            "setAttributeNode": {
              "value": function () { return this.set_attribute_node.apply(this, arguments); }
            },
            "setAttributeNodeNs": {
              "value": function () { return this.set_attribute_node_ns.apply(this, arguments); }
            },
            "setAttributeNs": {
              "value": function () { return this.set_attribute_ns.apply(this, arguments); }
            },
            "setClassName": {
              "value": function () { return this.set_class_name.apply(this, arguments); }
            },
            "setId": {
              "value": function () { return this.set_id.apply(this, arguments); }
            },
            "setScrollLeft": {
              "value": function () { return this.set_scroll_left.apply(this, arguments); }
            },
            "setScrollTop": {
              "value": function () { return this.set_scroll_top.apply(this, arguments); }
            },
            "webkitMatchesSelector": {
              "value": function () { return this.webkit_matches_selector.apply(this, arguments); }
            },
            "webkitRequestFullScreen": {
              "value": function () { return this.webkit_request_full_screen.apply(this, arguments); }
            },
            "webkitRequestFullscreen": {
              "value": function () { return this.webkit_request_fullscreen.apply(this, arguments); }
            },
            "webkitRequestPointerLock": {
              "value": function () { return this.webkit_request_pointer_lock.apply(this, arguments); }
            },
            "childElementCount": {
              "get": function () { return this.child_element_count; },
              "set": function (value) { this.child_element_count = value; }
            },
            "classList": {
              "get": function () { return this.class_list; },
              "set": function (value) { this.class_list = value; }
            },
            "className": {
              "get": function () { return this.class_name; },
              "set": function (value) { this.class_name = value; }
            },
            "clientHeight": {
              "get": function () { return this.client_height; },
              "set": function (value) { this.client_height = value; }
            },
            "clientLeft": {
              "get": function () { return this.client_left; },
              "set": function (value) { this.client_left = value; }
            },
            "clientTop": {
              "get": function () { return this.client_top; },
              "set": function (value) { this.client_top = value; }
            },
            "clientWidth": {
              "get": function () { return this.client_width; },
              "set": function (value) { this.client_width = value; }
            },
            "firstElementChild": {
              "get": function () { return this.first_element_child; },
              "set": function (value) { this.first_element_child = value; }
            },
            "lastElementChild": {
              "get": function () { return this.last_element_child; },
              "set": function (value) { this.last_element_child = value; }
            },
            "nextElementSibling": {
              "get": function () { return this.next_element_sibling; },
              "set": function (value) { this.next_element_sibling = value; }
            },
            "offsetHeight": {
              "get": function () { return this.offset_height; },
              "set": function (value) { this.offset_height = value; }
            },
            "offsetLeft": {
              "get": function () { return this.offset_left; },
              "set": function (value) { this.offset_left = value; }
            },
            "offsetParent": {
              "get": function () { return this.offset_parent; },
              "set": function (value) { this.offset_parent = value; }
            },
            "offsetTop": {
              "get": function () { return this.offset_top; },
              "set": function (value) { this.offset_top = value; }
            },
            "offsetWidth": {
              "get": function () { return this.offset_width; },
              "set": function (value) { this.offset_width = value; }
            },
            "previousElementSibling": {
              "get": function () { return this.previous_element_sibling; },
              "set": function (value) { this.previous_element_sibling = value; }
            },
            "scrollHeight": {
              "get": function () { return this.scroll_height; },
              "set": function (value) { this.scroll_height = value; }
            },
            "scrollLeft": {
              "get": function () { return this.scroll_left; },
              "set": function (value) { this.scroll_left = value; }
            },
            "scrollTop": {
              "get": function () { return this.scroll_top; },
              "set": function (value) { this.scroll_top = value; }
            },
            "scrollWidth": {
              "get": function () { return this.scroll_width; },
              "set": function (value) { this.scroll_width = value; }
            },
            "tagName": {
              "get": function () { return this.tag_name; },
              "set": function (value) { this.tag_name = value; }
            },
            "webkitRegionOverset": {
              "get": function () { return this.webkit_region_overset; },
              "set": function (value) { this.webkit_region_overset = value; }
            }
          },
          "static": {}
        },
        "DOMEntityReference": {
          "prototype": {},
          "static": {}
        },
        "DOMEvent": {
          "prototype": {
            "getBubbles": {
              "value": function () { return this.get_bubbles.apply(this, arguments); }
            },
            "getCancelBubble": {
              "value": function () { return this.get_cancel_bubble.apply(this, arguments); }
            },
            "getCancelable": {
              "value": function () { return this.get_cancelable.apply(this, arguments); }
            },
            "getCurrentTarget": {
              "value": function () { return this.get_current_target.apply(this, arguments); }
            },
            "getDefaultPrevented": {
              "value": function () { return this.get_default_prevented.apply(this, arguments); }
            },
            "getEventPhase": {
              "value": function () { return this.get_event_phase.apply(this, arguments); }
            },
            "getReturnValue": {
              "value": function () { return this.get_return_value.apply(this, arguments); }
            },
            "getSrcElement": {
              "value": function () { return this.get_src_element.apply(this, arguments); }
            },
            "getTarget": {
              "value": function () { return this.get_target.apply(this, arguments); }
            },
            "getTimeStamp": {
              "value": function () { return this.get_time_stamp.apply(this, arguments); }
            },
            "initEvent": {
              "value": function () { return this.init_event.apply(this, arguments); }
            },
            "preventDefault": {
              "value": function () { return this.prevent_default.apply(this, arguments); }
            },
            "setCancelBubble": {
              "value": function () { return this.set_cancel_bubble.apply(this, arguments); }
            },
            "setReturnValue": {
              "value": function () { return this.set_return_value.apply(this, arguments); }
            },
            "stopImmediatePropagation": {
              "value": function () { return this.stop_immediate_propagation.apply(this, arguments); }
            },
            "stopPropagation": {
              "value": function () { return this.stop_propagation.apply(this, arguments); }
            },
            "cancelBubble": {
              "get": function () { return this.cancel_bubble; },
              "set": function (value) { this.cancel_bubble = value; }
            },
            "currentTarget": {
              "get": function () { return this.current_target; },
              "set": function (value) { this.current_target = value; }
            },
            "defaultPrevented": {
              "get": function () { return this.default_prevented; },
              "set": function (value) { this.default_prevented = value; }
            },
            "eventPhase": {
              "get": function () { return this.event_phase; },
              "set": function (value) { this.event_phase = value; }
            },
            "returnValue": {
              "get": function () { return this.return_value; },
              "set": function (value) { this.return_value = value; }
            },
            "srcElement": {
              "get": function () { return this.src_element; },
              "set": function (value) { this.src_element = value; }
            },
            "timeStamp": {
              "get": function () { return this.time_stamp; },
              "set": function (value) { this.time_stamp = value; }
            }
          },
          "static": {}
        },
        "DOMFile": {
          "prototype": {
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getWebkitRelativePath": {
              "value": function () { return this.get_webkit_relative_path.apply(this, arguments); }
            },
            "webkitRelativePath": {
              "get": function () { return this.webkit_relative_path; },
              "set": function (value) { this.webkit_relative_path = value; }
            }
          },
          "static": {}
        },
        "DOMFileList": {
          "prototype": {
            "getLength": {
              "value": function () { return this.get_length.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DOMGamepad": {
          "prototype": {
            "getId": {
              "value": function () { return this.get_id.apply(this, arguments); }
            },
            "getIndex": {
              "value": function () { return this.get_index.apply(this, arguments); }
            },
            "getTimestamp": {
              "value": function () { return this.get_timestamp.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DOMGamepadList": {
          "prototype": {
            "getLength": {
              "value": function () { return this.get_length.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DOMGeolocation": {
          "prototype": {
            "clearWatch": {
              "value": function () { return this.clear_watch.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DOMHTMLAnchorElement": {
          "prototype": {
            "getCharset": {
              "value": function () { return this.get_charset.apply(this, arguments); }
            },
            "getCoords": {
              "value": function () { return this.get_coords.apply(this, arguments); }
            },
            "getDownload": {
              "value": function () { return this.get_download.apply(this, arguments); }
            },
            "getHash": {
              "value": function () { return this.get_hash.apply(this, arguments); }
            },
            "getHost": {
              "value": function () { return this.get_host.apply(this, arguments); }
            },
            "getHostname": {
              "value": function () { return this.get_hostname.apply(this, arguments); }
            },
            "getHref": {
              "value": function () { return this.get_href.apply(this, arguments); }
            },
            "getHreflang": {
              "value": function () { return this.get_hreflang.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getOrigin": {
              "value": function () { return this.get_origin.apply(this, arguments); }
            },
            "getPathname": {
              "value": function () { return this.get_pathname.apply(this, arguments); }
            },
            "getPing": {
              "value": function () { return this.get_ping.apply(this, arguments); }
            },
            "getPort": {
              "value": function () { return this.get_port.apply(this, arguments); }
            },
            "getProtocol": {
              "value": function () { return this.get_protocol.apply(this, arguments); }
            },
            "getRel": {
              "value": function () { return this.get_rel.apply(this, arguments); }
            },
            "getRev": {
              "value": function () { return this.get_rev.apply(this, arguments); }
            },
            "getSearch": {
              "value": function () { return this.get_search.apply(this, arguments); }
            },
            "getShape": {
              "value": function () { return this.get_shape.apply(this, arguments); }
            },
            "getTarget": {
              "value": function () { return this.get_target.apply(this, arguments); }
            },
            "getText": {
              "value": function () { return this.get_text.apply(this, arguments); }
            },
            "setCharset": {
              "value": function () { return this.set_charset.apply(this, arguments); }
            },
            "setCoords": {
              "value": function () { return this.set_coords.apply(this, arguments); }
            },
            "setDownload": {
              "value": function () { return this.set_download.apply(this, arguments); }
            },
            "setHash": {
              "value": function () { return this.set_hash.apply(this, arguments); }
            },
            "setHost": {
              "value": function () { return this.set_host.apply(this, arguments); }
            },
            "setHostname": {
              "value": function () { return this.set_hostname.apply(this, arguments); }
            },
            "setHref": {
              "value": function () { return this.set_href.apply(this, arguments); }
            },
            "setHreflang": {
              "value": function () { return this.set_hreflang.apply(this, arguments); }
            },
            "setName": {
              "value": function () { return this.set_name.apply(this, arguments); }
            },
            "setPathname": {
              "value": function () { return this.set_pathname.apply(this, arguments); }
            },
            "setPing": {
              "value": function () { return this.set_ping.apply(this, arguments); }
            },
            "setPort": {
              "value": function () { return this.set_port.apply(this, arguments); }
            },
            "setProtocol": {
              "value": function () { return this.set_protocol.apply(this, arguments); }
            },
            "setRel": {
              "value": function () { return this.set_rel.apply(this, arguments); }
            },
            "setRev": {
              "value": function () { return this.set_rev.apply(this, arguments); }
            },
            "setSearch": {
              "value": function () { return this.set_search.apply(this, arguments); }
            },
            "setShape": {
              "value": function () { return this.set_shape.apply(this, arguments); }
            },
            "setTarget": {
              "value": function () { return this.set_target.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DOMHTMLAppletElement": {
          "prototype": {
            "getAlign": {
              "value": function () { return this.get_align.apply(this, arguments); }
            },
            "getAlt": {
              "value": function () { return this.get_alt.apply(this, arguments); }
            },
            "getArchive": {
              "value": function () { return this.get_archive.apply(this, arguments); }
            },
            "getCode": {
              "value": function () { return this.get_code.apply(this, arguments); }
            },
            "getCodeBase": {
              "value": function () { return this.get_code_base.apply(this, arguments); }
            },
            "getHeight": {
              "value": function () { return this.get_height.apply(this, arguments); }
            },
            "getHspace": {
              "value": function () { return this.get_hspace.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getObject": {
              "value": function () { return this.get_object.apply(this, arguments); }
            },
            "getVspace": {
              "value": function () { return this.get_vspace.apply(this, arguments); }
            },
            "getWidth": {
              "value": function () { return this.get_width.apply(this, arguments); }
            },
            "setAlign": {
              "value": function () { return this.set_align.apply(this, arguments); }
            },
            "setAlt": {
              "value": function () { return this.set_alt.apply(this, arguments); }
            },
            "setArchive": {
              "value": function () { return this.set_archive.apply(this, arguments); }
            },
            "setCode": {
              "value": function () { return this.set_code.apply(this, arguments); }
            },
            "setCodeBase": {
              "value": function () { return this.set_code_base.apply(this, arguments); }
            },
            "setHeight": {
              "value": function () { return this.set_height.apply(this, arguments); }
            },
            "setHspace": {
              "value": function () { return this.set_hspace.apply(this, arguments); }
            },
            "setName": {
              "value": function () { return this.set_name.apply(this, arguments); }
            },
            "setObject": {
              "value": function () { return this.set_object.apply(this, arguments); }
            },
            "setVspace": {
              "value": function () { return this.set_vspace.apply(this, arguments); }
            },
            "setWidth": {
              "value": function () { return this.set_width.apply(this, arguments); }
            },
            "codeBase": {
              "get": function () { return this.code_base; },
              "set": function (value) { this.code_base = value; }
            }
          },
          "static": {}
        },
        "DOMHTMLAreaElement": {
          "prototype": {
            "getAlt": {
              "value": function () { return this.get_alt.apply(this, arguments); }
            },
            "getCoords": {
              "value": function () { return this.get_coords.apply(this, arguments); }
            },
            "getHash": {
              "value": function () { return this.get_hash.apply(this, arguments); }
            },
            "getHost": {
              "value": function () { return this.get_host.apply(this, arguments); }
            },
            "getHostname": {
              "value": function () { return this.get_hostname.apply(this, arguments); }
            },
            "getHref": {
              "value": function () { return this.get_href.apply(this, arguments); }
            },
            "getNoHref": {
              "value": function () { return this.get_no_href.apply(this, arguments); }
            },
            "getPathname": {
              "value": function () { return this.get_pathname.apply(this, arguments); }
            },
            "getPing": {
              "value": function () { return this.get_ping.apply(this, arguments); }
            },
            "getPort": {
              "value": function () { return this.get_port.apply(this, arguments); }
            },
            "getProtocol": {
              "value": function () { return this.get_protocol.apply(this, arguments); }
            },
            "getSearch": {
              "value": function () { return this.get_search.apply(this, arguments); }
            },
            "getShape": {
              "value": function () { return this.get_shape.apply(this, arguments); }
            },
            "getTarget": {
              "value": function () { return this.get_target.apply(this, arguments); }
            },
            "setAlt": {
              "value": function () { return this.set_alt.apply(this, arguments); }
            },
            "setCoords": {
              "value": function () { return this.set_coords.apply(this, arguments); }
            },
            "setHref": {
              "value": function () { return this.set_href.apply(this, arguments); }
            },
            "setNoHref": {
              "value": function () { return this.set_no_href.apply(this, arguments); }
            },
            "setPing": {
              "value": function () { return this.set_ping.apply(this, arguments); }
            },
            "setShape": {
              "value": function () { return this.set_shape.apply(this, arguments); }
            },
            "setTarget": {
              "value": function () { return this.set_target.apply(this, arguments); }
            },
            "noHref": {
              "get": function () { return this.no_href; },
              "set": function (value) { this.no_href = value; }
            }
          },
          "static": {}
        },
        "DOMHTMLAudioElement": {
          "prototype": {},
          "static": {}
        },
        "DOMHTMLBRElement": {
          "prototype": {
            "getClear": {
              "value": function () { return this.get_clear.apply(this, arguments); }
            },
            "setClear": {
              "value": function () { return this.set_clear.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DOMHTMLBaseElement": {
          "prototype": {
            "getHref": {
              "value": function () { return this.get_href.apply(this, arguments); }
            },
            "getTarget": {
              "value": function () { return this.get_target.apply(this, arguments); }
            },
            "setHref": {
              "value": function () { return this.set_href.apply(this, arguments); }
            },
            "setTarget": {
              "value": function () { return this.set_target.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DOMHTMLBaseFontElement": {
          "prototype": {
            "getColor": {
              "value": function () { return this.get_color.apply(this, arguments); }
            },
            "getFace": {
              "value": function () { return this.get_face.apply(this, arguments); }
            },
            "getSize": {
              "value": function () { return this.get_size.apply(this, arguments); }
            },
            "setColor": {
              "value": function () { return this.set_color.apply(this, arguments); }
            },
            "setFace": {
              "value": function () { return this.set_face.apply(this, arguments); }
            },
            "setSize": {
              "value": function () { return this.set_size.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DOMHTMLBodyElement": {
          "prototype": {
            "getALink": {
              "value": function () { return this.get_a_link.apply(this, arguments); }
            },
            "getBackground": {
              "value": function () { return this.get_background.apply(this, arguments); }
            },
            "getBgColor": {
              "value": function () { return this.get_bg_color.apply(this, arguments); }
            },
            "getLink": {
              "value": function () { return this.get_link.apply(this, arguments); }
            },
            "getText": {
              "value": function () { return this.get_text.apply(this, arguments); }
            },
            "getVLink": {
              "value": function () { return this.get_v_link.apply(this, arguments); }
            },
            "setALink": {
              "value": function () { return this.set_a_link.apply(this, arguments); }
            },
            "setBackground": {
              "value": function () { return this.set_background.apply(this, arguments); }
            },
            "setBgColor": {
              "value": function () { return this.set_bg_color.apply(this, arguments); }
            },
            "setLink": {
              "value": function () { return this.set_link.apply(this, arguments); }
            },
            "setText": {
              "value": function () { return this.set_text.apply(this, arguments); }
            },
            "setVLink": {
              "value": function () { return this.set_v_link.apply(this, arguments); }
            },
            "aLink": {
              "get": function () { return this.a_link; },
              "set": function (value) { this.a_link = value; }
            },
            "bgColor": {
              "get": function () { return this.bg_color; },
              "set": function (value) { this.bg_color = value; }
            },
            "vLink": {
              "get": function () { return this.v_link; },
              "set": function (value) { this.v_link = value; }
            }
          },
          "static": {}
        },
        "DOMHTMLButtonElement": {
          "prototype": {
            "checkValidity": {
              "value": function () { return this.check_validity.apply(this, arguments); }
            },
            "getAutofocus": {
              "value": function () { return this.get_autofocus.apply(this, arguments); }
            },
            "getDisabled": {
              "value": function () { return this.get_disabled.apply(this, arguments); }
            },
            "getForm": {
              "value": function () { return this.get_form.apply(this, arguments); }
            },
            "getFormAction": {
              "value": function () { return this.get_form_action.apply(this, arguments); }
            },
            "getFormEnctype": {
              "value": function () { return this.get_form_enctype.apply(this, arguments); }
            },
            "getFormMethod": {
              "value": function () { return this.get_form_method.apply(this, arguments); }
            },
            "getFormNoValidate": {
              "value": function () { return this.get_form_no_validate.apply(this, arguments); }
            },
            "getFormTarget": {
              "value": function () { return this.get_form_target.apply(this, arguments); }
            },
            "getLabels": {
              "value": function () { return this.get_labels.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getValidationMessage": {
              "value": function () { return this.get_validation_message.apply(this, arguments); }
            },
            "getValidity": {
              "value": function () { return this.get_validity.apply(this, arguments); }
            },
            "getValue": {
              "value": function () { return this.get_value.apply(this, arguments); }
            },
            "getWillValidate": {
              "value": function () { return this.get_will_validate.apply(this, arguments); }
            },
            "setAutofocus": {
              "value": function () { return this.set_autofocus.apply(this, arguments); }
            },
            "setCustomValidity": {
              "value": function () { return this.set_custom_validity.apply(this, arguments); }
            },
            "setDisabled": {
              "value": function () { return this.set_disabled.apply(this, arguments); }
            },
            "setFormAction": {
              "value": function () { return this.set_form_action.apply(this, arguments); }
            },
            "setFormEnctype": {
              "value": function () { return this.set_form_enctype.apply(this, arguments); }
            },
            "setFormMethod": {
              "value": function () { return this.set_form_method.apply(this, arguments); }
            },
            "setFormNoValidate": {
              "value": function () { return this.set_form_no_validate.apply(this, arguments); }
            },
            "setFormTarget": {
              "value": function () { return this.set_form_target.apply(this, arguments); }
            },
            "setName": {
              "value": function () { return this.set_name.apply(this, arguments); }
            },
            "setValue": {
              "value": function () { return this.set_value.apply(this, arguments); }
            },
            "formAction": {
              "get": function () { return this.form_action; },
              "set": function (value) { this.form_action = value; }
            },
            "formEnctype": {
              "get": function () { return this.form_enctype; },
              "set": function (value) { this.form_enctype = value; }
            },
            "formMethod": {
              "get": function () { return this.form_method; },
              "set": function (value) { this.form_method = value; }
            },
            "formNoValidate": {
              "get": function () { return this.form_no_validate; },
              "set": function (value) { this.form_no_validate = value; }
            },
            "formTarget": {
              "get": function () { return this.form_target; },
              "set": function (value) { this.form_target = value; }
            },
            "validationMessage": {
              "get": function () { return this.validation_message; },
              "set": function (value) { this.validation_message = value; }
            },
            "willValidate": {
              "get": function () { return this.will_validate; },
              "set": function (value) { this.will_validate = value; }
            }
          },
          "static": {}
        },
        "DOMHTMLCanvasElement": {
          "prototype": {
            "getHeight": {
              "value": function () { return this.get_height.apply(this, arguments); }
            },
            "getWidth": {
              "value": function () { return this.get_width.apply(this, arguments); }
            },
            "setHeight": {
              "value": function () { return this.set_height.apply(this, arguments); }
            },
            "setWidth": {
              "value": function () { return this.set_width.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DOMHTMLCollection": {
          "prototype": {
            "getLength": {
              "value": function () { return this.get_length.apply(this, arguments); }
            },
            "namedItem": {
              "value": function () { return this.named_item.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DOMHTMLDListElement": {
          "prototype": {
            "getCompact": {
              "value": function () { return this.get_compact.apply(this, arguments); }
            },
            "setCompact": {
              "value": function () { return this.set_compact.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DOMHTMLDetailsElement": {
          "prototype": {
            "getOpen": {
              "value": function () { return this.get_open.apply(this, arguments); }
            },
            "setOpen": {
              "value": function () { return this.set_open.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DOMHTMLDirectoryElement": {
          "prototype": {
            "getCompact": {
              "value": function () { return this.get_compact.apply(this, arguments); }
            },
            "setCompact": {
              "value": function () { return this.set_compact.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DOMHTMLDivElement": {
          "prototype": {
            "getAlign": {
              "value": function () { return this.get_align.apply(this, arguments); }
            },
            "setAlign": {
              "value": function () { return this.set_align.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DOMHTMLDocument": {
          "prototype": {
            "captureEvents": {
              "value": function () { return this.capture_events.apply(this, arguments); }
            },
            "getActiveElement": {
              "value": function () { return this.get_active_element.apply(this, arguments); }
            },
            "getAlinkColor": {
              "value": function () { return this.get_alink_color.apply(this, arguments); }
            },
            "getBgColor": {
              "value": function () { return this.get_bg_color.apply(this, arguments); }
            },
            "getCompatMode": {
              "value": function () { return this.get_compat_mode.apply(this, arguments); }
            },
            "getDesignMode": {
              "value": function () { return this.get_design_mode.apply(this, arguments); }
            },
            "getDir": {
              "value": function () { return this.get_dir.apply(this, arguments); }
            },
            "getEmbeds": {
              "value": function () { return this.get_embeds.apply(this, arguments); }
            },
            "getFgColor": {
              "value": function () { return this.get_fg_color.apply(this, arguments); }
            },
            "getHeight": {
              "value": function () { return this.get_height.apply(this, arguments); }
            },
            "getLinkColor": {
              "value": function () { return this.get_link_color.apply(this, arguments); }
            },
            "getPlugins": {
              "value": function () { return this.get_plugins.apply(this, arguments); }
            },
            "getScripts": {
              "value": function () { return this.get_scripts.apply(this, arguments); }
            },
            "getVlinkColor": {
              "value": function () { return this.get_vlink_color.apply(this, arguments); }
            },
            "getWidth": {
              "value": function () { return this.get_width.apply(this, arguments); }
            },
            "hasFocus": {
              "value": function () { return this.has_focus.apply(this, arguments); }
            },
            "releaseEvents": {
              "value": function () { return this.release_events.apply(this, arguments); }
            },
            "setAlinkColor": {
              "value": function () { return this.set_alink_color.apply(this, arguments); }
            },
            "setBgColor": {
              "value": function () { return this.set_bg_color.apply(this, arguments); }
            },
            "setDesignMode": {
              "value": function () { return this.set_design_mode.apply(this, arguments); }
            },
            "setDir": {
              "value": function () { return this.set_dir.apply(this, arguments); }
            },
            "setFgColor": {
              "value": function () { return this.set_fg_color.apply(this, arguments); }
            },
            "setLinkColor": {
              "value": function () { return this.set_link_color.apply(this, arguments); }
            },
            "setVlinkColor": {
              "value": function () { return this.set_vlink_color.apply(this, arguments); }
            },
            "activeElement": {
              "get": function () { return this.active_element; },
              "set": function (value) { this.active_element = value; }
            },
            "alinkColor": {
              "get": function () { return this.alink_color; },
              "set": function (value) { this.alink_color = value; }
            },
            "bgColor": {
              "get": function () { return this.bg_color; },
              "set": function (value) { this.bg_color = value; }
            },
            "compatMode": {
              "get": function () { return this.compat_mode; },
              "set": function (value) { this.compat_mode = value; }
            },
            "designMode": {
              "get": function () { return this.design_mode; },
              "set": function (value) { this.design_mode = value; }
            },
            "fgColor": {
              "get": function () { return this.fg_color; },
              "set": function (value) { this.fg_color = value; }
            },
            "linkColor": {
              "get": function () { return this.link_color; },
              "set": function (value) { this.link_color = value; }
            },
            "vlinkColor": {
              "get": function () { return this.vlink_color; },
              "set": function (value) { this.vlink_color = value; }
            }
          },
          "static": {}
        },
        "DOMHTMLElement": {
          "prototype": {
            "getAccessKey": {
              "value": function () { return this.get_access_key.apply(this, arguments); }
            },
            "getChildren": {
              "value": function () { return this.get_children.apply(this, arguments); }
            },
            "getClassList": {
              "value": function () { return this.get_class_list.apply(this, arguments); }
            },
            "getClassName": {
              "value": function () { return this.get_class_name.apply(this, arguments); }
            },
            "getContentEditable": {
              "value": function () { return this.get_content_editable.apply(this, arguments); }
            },
            "getDir": {
              "value": function () { return this.get_dir.apply(this, arguments); }
            },
            "getDraggable": {
              "value": function () { return this.get_draggable.apply(this, arguments); }
            },
            "getHidden": {
              "value": function () { return this.get_hidden.apply(this, arguments); }
            },
            "getId": {
              "value": function () { return this.get_id.apply(this, arguments); }
            },
            "getInnerHtml": {
              "value": function () { return this.get_inner_html.apply(this, arguments); }
            },
            "getInnerText": {
              "value": function () { return this.get_inner_text.apply(this, arguments); }
            },
            "getIsContentEditable": {
              "value": function () { return this.get_is_content_editable.apply(this, arguments); }
            },
            "getItemId": {
              "value": function () { return this.get_item_id.apply(this, arguments); }
            },
            "getItemProp": {
              "value": function () { return this.get_item_prop.apply(this, arguments); }
            },
            "getItemRef": {
              "value": function () { return this.get_item_ref.apply(this, arguments); }
            },
            "getItemScope": {
              "value": function () { return this.get_item_scope.apply(this, arguments); }
            },
            "getItemType": {
              "value": function () { return this.get_item_type.apply(this, arguments); }
            },
            "getLang": {
              "value": function () { return this.get_lang.apply(this, arguments); }
            },
            "getOuterHtml": {
              "value": function () { return this.get_outer_html.apply(this, arguments); }
            },
            "getOuterText": {
              "value": function () { return this.get_outer_text.apply(this, arguments); }
            },
            "getSpellcheck": {
              "value": function () { return this.get_spellcheck.apply(this, arguments); }
            },
            "getTabIndex": {
              "value": function () { return this.get_tab_index.apply(this, arguments); }
            },
            "getTitle": {
              "value": function () { return this.get_title.apply(this, arguments); }
            },
            "getTranslate": {
              "value": function () { return this.get_translate.apply(this, arguments); }
            },
            "getWebkitdropzone": {
              "value": function () { return this.get_webkitdropzone.apply(this, arguments); }
            },
            "insertAdjacentElement": {
              "value": function () { return this.insert_adjacent_element.apply(this, arguments); }
            },
            "insertAdjacentHtml": {
              "value": function () { return this.insert_adjacent_html.apply(this, arguments); }
            },
            "insertAdjacentText": {
              "value": function () { return this.insert_adjacent_text.apply(this, arguments); }
            },
            "setAccessKey": {
              "value": function () { return this.set_access_key.apply(this, arguments); }
            },
            "setClassName": {
              "value": function () { return this.set_class_name.apply(this, arguments); }
            },
            "setContentEditable": {
              "value": function () { return this.set_content_editable.apply(this, arguments); }
            },
            "setDir": {
              "value": function () { return this.set_dir.apply(this, arguments); }
            },
            "setDraggable": {
              "value": function () { return this.set_draggable.apply(this, arguments); }
            },
            "setHidden": {
              "value": function () { return this.set_hidden.apply(this, arguments); }
            },
            "setId": {
              "value": function () { return this.set_id.apply(this, arguments); }
            },
            "setInnerHtml": {
              "value": function () { return this.set_inner_html.apply(this, arguments); }
            },
            "setInnerText": {
              "value": function () { return this.set_inner_text.apply(this, arguments); }
            },
            "setItemId": {
              "value": function () { return this.set_item_id.apply(this, arguments); }
            },
            "setItemScope": {
              "value": function () { return this.set_item_scope.apply(this, arguments); }
            },
            "setLang": {
              "value": function () { return this.set_lang.apply(this, arguments); }
            },
            "setOuterHtml": {
              "value": function () { return this.set_outer_html.apply(this, arguments); }
            },
            "setOuterText": {
              "value": function () { return this.set_outer_text.apply(this, arguments); }
            },
            "setSpellcheck": {
              "value": function () { return this.set_spellcheck.apply(this, arguments); }
            },
            "setTabIndex": {
              "value": function () { return this.set_tab_index.apply(this, arguments); }
            },
            "setTitle": {
              "value": function () { return this.set_title.apply(this, arguments); }
            },
            "setTranslate": {
              "value": function () { return this.set_translate.apply(this, arguments); }
            },
            "setWebkitdropzone": {
              "value": function () { return this.set_webkitdropzone.apply(this, arguments); }
            },
            "accessKey": {
              "get": function () { return this.access_key; },
              "set": function (value) { this.access_key = value; }
            },
            "contentEditable": {
              "get": function () { return this.content_editable; },
              "set": function (value) { this.content_editable = value; }
            },
            "innerHtml": {
              "get": function () { return this.inner_html; },
              "set": function (value) { this.inner_html = value; }
            },
            "innerText": {
              "get": function () { return this.inner_text; },
              "set": function (value) { this.inner_text = value; }
            },
            "isContentEditable": {
              "get": function () { return this.is_content_editable; },
              "set": function (value) { this.is_content_editable = value; }
            },
            "outerHtml": {
              "get": function () { return this.outer_html; },
              "set": function (value) { this.outer_html = value; }
            },
            "outerText": {
              "get": function () { return this.outer_text; },
              "set": function (value) { this.outer_text = value; }
            },
            "tabIndex": {
              "get": function () { return this.tab_index; },
              "set": function (value) { this.tab_index = value; }
            }
          },
          "static": {}
        },
        "DOMHTMLEmbedElement": {
          "prototype": {
            "getAlign": {
              "value": function () { return this.get_align.apply(this, arguments); }
            },
            "getHeight": {
              "value": function () { return this.get_height.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getSrc": {
              "value": function () { return this.get_src.apply(this, arguments); }
            },
            "getWidth": {
              "value": function () { return this.get_width.apply(this, arguments); }
            },
            "setAlign": {
              "value": function () { return this.set_align.apply(this, arguments); }
            },
            "setHeight": {
              "value": function () { return this.set_height.apply(this, arguments); }
            },
            "setName": {
              "value": function () { return this.set_name.apply(this, arguments); }
            },
            "setSrc": {
              "value": function () { return this.set_src.apply(this, arguments); }
            },
            "setWidth": {
              "value": function () { return this.set_width.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DOMHTMLFieldSetElement": {
          "prototype": {
            "checkValidity": {
              "value": function () { return this.check_validity.apply(this, arguments); }
            },
            "getDisabled": {
              "value": function () { return this.get_disabled.apply(this, arguments); }
            },
            "getElements": {
              "value": function () { return this.get_elements.apply(this, arguments); }
            },
            "getForm": {
              "value": function () { return this.get_form.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getValidationMessage": {
              "value": function () { return this.get_validation_message.apply(this, arguments); }
            },
            "getValidity": {
              "value": function () { return this.get_validity.apply(this, arguments); }
            },
            "getWillValidate": {
              "value": function () { return this.get_will_validate.apply(this, arguments); }
            },
            "setCustomValidity": {
              "value": function () { return this.set_custom_validity.apply(this, arguments); }
            },
            "setDisabled": {
              "value": function () { return this.set_disabled.apply(this, arguments); }
            },
            "setName": {
              "value": function () { return this.set_name.apply(this, arguments); }
            },
            "validationMessage": {
              "get": function () { return this.validation_message; },
              "set": function (value) { this.validation_message = value; }
            },
            "willValidate": {
              "get": function () { return this.will_validate; },
              "set": function (value) { this.will_validate = value; }
            }
          },
          "static": {}
        },
        "DOMHTMLFontElement": {
          "prototype": {
            "getColor": {
              "value": function () { return this.get_color.apply(this, arguments); }
            },
            "getFace": {
              "value": function () { return this.get_face.apply(this, arguments); }
            },
            "getSize": {
              "value": function () { return this.get_size.apply(this, arguments); }
            },
            "setColor": {
              "value": function () { return this.set_color.apply(this, arguments); }
            },
            "setFace": {
              "value": function () { return this.set_face.apply(this, arguments); }
            },
            "setSize": {
              "value": function () { return this.set_size.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DOMHTMLFormElement": {
          "prototype": {
            "checkValidity": {
              "value": function () { return this.check_validity.apply(this, arguments); }
            },
            "dispatchFormChange": {
              "value": function () { return this.dispatch_form_change.apply(this, arguments); }
            },
            "dispatchFormInput": {
              "value": function () { return this.dispatch_form_input.apply(this, arguments); }
            },
            "getAcceptCharset": {
              "value": function () { return this.get_accept_charset.apply(this, arguments); }
            },
            "getAction": {
              "value": function () { return this.get_action.apply(this, arguments); }
            },
            "getAutocapitalize": {
              "value": function () { return this.get_autocapitalize.apply(this, arguments); }
            },
            "getAutocomplete": {
              "value": function () { return this.get_autocomplete.apply(this, arguments); }
            },
            "getAutocorrect": {
              "value": function () { return this.get_autocorrect.apply(this, arguments); }
            },
            "getElements": {
              "value": function () { return this.get_elements.apply(this, arguments); }
            },
            "getEncoding": {
              "value": function () { return this.get_encoding.apply(this, arguments); }
            },
            "getEnctype": {
              "value": function () { return this.get_enctype.apply(this, arguments); }
            },
            "getLength": {
              "value": function () { return this.get_length.apply(this, arguments); }
            },
            "getMethod": {
              "value": function () { return this.get_method.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getNoValidate": {
              "value": function () { return this.get_no_validate.apply(this, arguments); }
            },
            "getTarget": {
              "value": function () { return this.get_target.apply(this, arguments); }
            },
            "setAcceptCharset": {
              "value": function () { return this.set_accept_charset.apply(this, arguments); }
            },
            "setAction": {
              "value": function () { return this.set_action.apply(this, arguments); }
            },
            "setAutocapitalize": {
              "value": function () { return this.set_autocapitalize.apply(this, arguments); }
            },
            "setAutocomplete": {
              "value": function () { return this.set_autocomplete.apply(this, arguments); }
            },
            "setAutocorrect": {
              "value": function () { return this.set_autocorrect.apply(this, arguments); }
            },
            "setEncoding": {
              "value": function () { return this.set_encoding.apply(this, arguments); }
            },
            "setEnctype": {
              "value": function () { return this.set_enctype.apply(this, arguments); }
            },
            "setMethod": {
              "value": function () { return this.set_method.apply(this, arguments); }
            },
            "setName": {
              "value": function () { return this.set_name.apply(this, arguments); }
            },
            "setNoValidate": {
              "value": function () { return this.set_no_validate.apply(this, arguments); }
            },
            "setTarget": {
              "value": function () { return this.set_target.apply(this, arguments); }
            },
            "acceptCharset": {
              "get": function () { return this.accept_charset; },
              "set": function (value) { this.accept_charset = value; }
            },
            "noValidate": {
              "get": function () { return this.no_validate; },
              "set": function (value) { this.no_validate = value; }
            }
          },
          "static": {}
        },
        "DOMHTMLFrameElement": {
          "prototype": {
            "getContentDocument": {
              "value": function () { return this.get_content_document.apply(this, arguments); }
            },
            "getContentWindow": {
              "value": function () { return this.get_content_window.apply(this, arguments); }
            },
            "getFrameBorder": {
              "value": function () { return this.get_frame_border.apply(this, arguments); }
            },
            "getHeight": {
              "value": function () { return this.get_height.apply(this, arguments); }
            },
            "getLongDesc": {
              "value": function () { return this.get_long_desc.apply(this, arguments); }
            },
            "getMarginHeight": {
              "value": function () { return this.get_margin_height.apply(this, arguments); }
            },
            "getMarginWidth": {
              "value": function () { return this.get_margin_width.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getNoResize": {
              "value": function () { return this.get_no_resize.apply(this, arguments); }
            },
            "getScrolling": {
              "value": function () { return this.get_scrolling.apply(this, arguments); }
            },
            "getSrc": {
              "value": function () { return this.get_src.apply(this, arguments); }
            },
            "getWidth": {
              "value": function () { return this.get_width.apply(this, arguments); }
            },
            "setFrameBorder": {
              "value": function () { return this.set_frame_border.apply(this, arguments); }
            },
            "setLongDesc": {
              "value": function () { return this.set_long_desc.apply(this, arguments); }
            },
            "setMarginHeight": {
              "value": function () { return this.set_margin_height.apply(this, arguments); }
            },
            "setMarginWidth": {
              "value": function () { return this.set_margin_width.apply(this, arguments); }
            },
            "setName": {
              "value": function () { return this.set_name.apply(this, arguments); }
            },
            "setNoResize": {
              "value": function () { return this.set_no_resize.apply(this, arguments); }
            },
            "setScrolling": {
              "value": function () { return this.set_scrolling.apply(this, arguments); }
            },
            "setSrc": {
              "value": function () { return this.set_src.apply(this, arguments); }
            },
            "contentDocument": {
              "get": function () { return this.content_document; },
              "set": function (value) { this.content_document = value; }
            },
            "contentWindow": {
              "get": function () { return this.content_window; },
              "set": function (value) { this.content_window = value; }
            },
            "frameBorder": {
              "get": function () { return this.frame_border; },
              "set": function (value) { this.frame_border = value; }
            },
            "longDesc": {
              "get": function () { return this.long_desc; },
              "set": function (value) { this.long_desc = value; }
            },
            "marginHeight": {
              "get": function () { return this.margin_height; },
              "set": function (value) { this.margin_height = value; }
            },
            "marginWidth": {
              "get": function () { return this.margin_width; },
              "set": function (value) { this.margin_width = value; }
            },
            "noResize": {
              "get": function () { return this.no_resize; },
              "set": function (value) { this.no_resize = value; }
            }
          },
          "static": {}
        },
        "DOMHTMLFrameSetElement": {
          "prototype": {
            "getCols": {
              "value": function () { return this.get_cols.apply(this, arguments); }
            },
            "getRows": {
              "value": function () { return this.get_rows.apply(this, arguments); }
            },
            "setCols": {
              "value": function () { return this.set_cols.apply(this, arguments); }
            },
            "setRows": {
              "value": function () { return this.set_rows.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DOMHTMLHRElement": {
          "prototype": {
            "getAlign": {
              "value": function () { return this.get_align.apply(this, arguments); }
            },
            "getNoShade": {
              "value": function () { return this.get_no_shade.apply(this, arguments); }
            },
            "getSize": {
              "value": function () { return this.get_size.apply(this, arguments); }
            },
            "getWidth": {
              "value": function () { return this.get_width.apply(this, arguments); }
            },
            "setAlign": {
              "value": function () { return this.set_align.apply(this, arguments); }
            },
            "setNoShade": {
              "value": function () { return this.set_no_shade.apply(this, arguments); }
            },
            "setSize": {
              "value": function () { return this.set_size.apply(this, arguments); }
            },
            "setWidth": {
              "value": function () { return this.set_width.apply(this, arguments); }
            },
            "noShade": {
              "get": function () { return this.no_shade; },
              "set": function (value) { this.no_shade = value; }
            }
          },
          "static": {}
        },
        "DOMHTMLHeadElement": {
          "prototype": {
            "getProfile": {
              "value": function () { return this.get_profile.apply(this, arguments); }
            },
            "setProfile": {
              "value": function () { return this.set_profile.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DOMHTMLHeadingElement": {
          "prototype": {
            "getAlign": {
              "value": function () { return this.get_align.apply(this, arguments); }
            },
            "setAlign": {
              "value": function () { return this.set_align.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DOMHTMLHtmlElement": {
          "prototype": {
            "getManifest": {
              "value": function () { return this.get_manifest.apply(this, arguments); }
            },
            "getVersion": {
              "value": function () { return this.get_version.apply(this, arguments); }
            },
            "setManifest": {
              "value": function () { return this.set_manifest.apply(this, arguments); }
            },
            "setVersion": {
              "value": function () { return this.set_version.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DOMHTMLIFrameElement": {
          "prototype": {
            "getAlign": {
              "value": function () { return this.get_align.apply(this, arguments); }
            },
            "getContentDocument": {
              "value": function () { return this.get_content_document.apply(this, arguments); }
            },
            "getContentWindow": {
              "value": function () { return this.get_content_window.apply(this, arguments); }
            },
            "getFrameBorder": {
              "value": function () { return this.get_frame_border.apply(this, arguments); }
            },
            "getHeight": {
              "value": function () { return this.get_height.apply(this, arguments); }
            },
            "getLongDesc": {
              "value": function () { return this.get_long_desc.apply(this, arguments); }
            },
            "getMarginHeight": {
              "value": function () { return this.get_margin_height.apply(this, arguments); }
            },
            "getMarginWidth": {
              "value": function () { return this.get_margin_width.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getSandbox": {
              "value": function () { return this.get_sandbox.apply(this, arguments); }
            },
            "getScrolling": {
              "value": function () { return this.get_scrolling.apply(this, arguments); }
            },
            "getSeamless": {
              "value": function () { return this.get_seamless.apply(this, arguments); }
            },
            "getSrc": {
              "value": function () { return this.get_src.apply(this, arguments); }
            },
            "getSrcdoc": {
              "value": function () { return this.get_srcdoc.apply(this, arguments); }
            },
            "getWidth": {
              "value": function () { return this.get_width.apply(this, arguments); }
            },
            "setAlign": {
              "value": function () { return this.set_align.apply(this, arguments); }
            },
            "setFrameBorder": {
              "value": function () { return this.set_frame_border.apply(this, arguments); }
            },
            "setHeight": {
              "value": function () { return this.set_height.apply(this, arguments); }
            },
            "setLongDesc": {
              "value": function () { return this.set_long_desc.apply(this, arguments); }
            },
            "setMarginHeight": {
              "value": function () { return this.set_margin_height.apply(this, arguments); }
            },
            "setMarginWidth": {
              "value": function () { return this.set_margin_width.apply(this, arguments); }
            },
            "setName": {
              "value": function () { return this.set_name.apply(this, arguments); }
            },
            "setSandbox": {
              "value": function () { return this.set_sandbox.apply(this, arguments); }
            },
            "setScrolling": {
              "value": function () { return this.set_scrolling.apply(this, arguments); }
            },
            "setSeamless": {
              "value": function () { return this.set_seamless.apply(this, arguments); }
            },
            "setSrc": {
              "value": function () { return this.set_src.apply(this, arguments); }
            },
            "setSrcdoc": {
              "value": function () { return this.set_srcdoc.apply(this, arguments); }
            },
            "setWidth": {
              "value": function () { return this.set_width.apply(this, arguments); }
            },
            "contentDocument": {
              "get": function () { return this.content_document; },
              "set": function (value) { this.content_document = value; }
            },
            "contentWindow": {
              "get": function () { return this.content_window; },
              "set": function (value) { this.content_window = value; }
            },
            "frameBorder": {
              "get": function () { return this.frame_border; },
              "set": function (value) { this.frame_border = value; }
            },
            "longDesc": {
              "get": function () { return this.long_desc; },
              "set": function (value) { this.long_desc = value; }
            },
            "marginHeight": {
              "get": function () { return this.margin_height; },
              "set": function (value) { this.margin_height = value; }
            },
            "marginWidth": {
              "get": function () { return this.margin_width; },
              "set": function (value) { this.margin_width = value; }
            }
          },
          "static": {}
        },
        "DOMHTMLImageElement": {
          "prototype": {
            "getAlign": {
              "value": function () { return this.get_align.apply(this, arguments); }
            },
            "getAlt": {
              "value": function () { return this.get_alt.apply(this, arguments); }
            },
            "getBorder": {
              "value": function () { return this.get_border.apply(this, arguments); }
            },
            "getComplete": {
              "value": function () { return this.get_complete.apply(this, arguments); }
            },
            "getCrossOrigin": {
              "value": function () { return this.get_cross_origin.apply(this, arguments); }
            },
            "getHeight": {
              "value": function () { return this.get_height.apply(this, arguments); }
            },
            "getHspace": {
              "value": function () { return this.get_hspace.apply(this, arguments); }
            },
            "getIsMap": {
              "value": function () { return this.get_is_map.apply(this, arguments); }
            },
            "getLongDesc": {
              "value": function () { return this.get_long_desc.apply(this, arguments); }
            },
            "getLowsrc": {
              "value": function () { return this.get_lowsrc.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getNaturalHeight": {
              "value": function () { return this.get_natural_height.apply(this, arguments); }
            },
            "getNaturalWidth": {
              "value": function () { return this.get_natural_width.apply(this, arguments); }
            },
            "getSrc": {
              "value": function () { return this.get_src.apply(this, arguments); }
            },
            "getSrcset": {
              "value": function () { return this.get_srcset.apply(this, arguments); }
            },
            "getUseMap": {
              "value": function () { return this.get_use_map.apply(this, arguments); }
            },
            "getVspace": {
              "value": function () { return this.get_vspace.apply(this, arguments); }
            },
            "getWidth": {
              "value": function () { return this.get_width.apply(this, arguments); }
            },
            "getX": {
              "value": function () { return this.get_x.apply(this, arguments); }
            },
            "getY": {
              "value": function () { return this.get_y.apply(this, arguments); }
            },
            "setAlign": {
              "value": function () { return this.set_align.apply(this, arguments); }
            },
            "setAlt": {
              "value": function () { return this.set_alt.apply(this, arguments); }
            },
            "setBorder": {
              "value": function () { return this.set_border.apply(this, arguments); }
            },
            "setCrossOrigin": {
              "value": function () { return this.set_cross_origin.apply(this, arguments); }
            },
            "setHeight": {
              "value": function () { return this.set_height.apply(this, arguments); }
            },
            "setHspace": {
              "value": function () { return this.set_hspace.apply(this, arguments); }
            },
            "setIsMap": {
              "value": function () { return this.set_is_map.apply(this, arguments); }
            },
            "setLongDesc": {
              "value": function () { return this.set_long_desc.apply(this, arguments); }
            },
            "setLowsrc": {
              "value": function () { return this.set_lowsrc.apply(this, arguments); }
            },
            "setName": {
              "value": function () { return this.set_name.apply(this, arguments); }
            },
            "setSrc": {
              "value": function () { return this.set_src.apply(this, arguments); }
            },
            "setSrcset": {
              "value": function () { return this.set_srcset.apply(this, arguments); }
            },
            "setUseMap": {
              "value": function () { return this.set_use_map.apply(this, arguments); }
            },
            "setVspace": {
              "value": function () { return this.set_vspace.apply(this, arguments); }
            },
            "setWidth": {
              "value": function () { return this.set_width.apply(this, arguments); }
            },
            "crossOrigin": {
              "get": function () { return this.cross_origin; },
              "set": function (value) { this.cross_origin = value; }
            },
            "isMap": {
              "get": function () { return this.is_map; },
              "set": function (value) { this.is_map = value; }
            },
            "longDesc": {
              "get": function () { return this.long_desc; },
              "set": function (value) { this.long_desc = value; }
            },
            "naturalHeight": {
              "get": function () { return this.natural_height; },
              "set": function (value) { this.natural_height = value; }
            },
            "naturalWidth": {
              "get": function () { return this.natural_width; },
              "set": function (value) { this.natural_width = value; }
            },
            "useMap": {
              "get": function () { return this.use_map; },
              "set": function (value) { this.use_map = value; }
            }
          },
          "static": {}
        },
        "DOMHTMLInputElement": {
          "prototype": {
            "checkValidity": {
              "value": function () { return this.check_validity.apply(this, arguments); }
            },
            "getAccept": {
              "value": function () { return this.get_accept.apply(this, arguments); }
            },
            "getAlign": {
              "value": function () { return this.get_align.apply(this, arguments); }
            },
            "getAlt": {
              "value": function () { return this.get_alt.apply(this, arguments); }
            },
            "getAutocapitalize": {
              "value": function () { return this.get_autocapitalize.apply(this, arguments); }
            },
            "getAutocomplete": {
              "value": function () { return this.get_autocomplete.apply(this, arguments); }
            },
            "getAutocorrect": {
              "value": function () { return this.get_autocorrect.apply(this, arguments); }
            },
            "getAutofocus": {
              "value": function () { return this.get_autofocus.apply(this, arguments); }
            },
            "getCapture": {
              "value": function () { return this.get_capture.apply(this, arguments); }
            },
            "getChecked": {
              "value": function () { return this.get_checked.apply(this, arguments); }
            },
            "getDefaultChecked": {
              "value": function () { return this.get_default_checked.apply(this, arguments); }
            },
            "getDefaultValue": {
              "value": function () { return this.get_default_value.apply(this, arguments); }
            },
            "getDirName": {
              "value": function () { return this.get_dir_name.apply(this, arguments); }
            },
            "getDisabled": {
              "value": function () { return this.get_disabled.apply(this, arguments); }
            },
            "getFiles": {
              "value": function () { return this.get_files.apply(this, arguments); }
            },
            "getForm": {
              "value": function () { return this.get_form.apply(this, arguments); }
            },
            "getFormAction": {
              "value": function () { return this.get_form_action.apply(this, arguments); }
            },
            "getFormEnctype": {
              "value": function () { return this.get_form_enctype.apply(this, arguments); }
            },
            "getFormMethod": {
              "value": function () { return this.get_form_method.apply(this, arguments); }
            },
            "getFormNoValidate": {
              "value": function () { return this.get_form_no_validate.apply(this, arguments); }
            },
            "getFormTarget": {
              "value": function () { return this.get_form_target.apply(this, arguments); }
            },
            "getHeight": {
              "value": function () { return this.get_height.apply(this, arguments); }
            },
            "getIncremental": {
              "value": function () { return this.get_incremental.apply(this, arguments); }
            },
            "getIndeterminate": {
              "value": function () { return this.get_indeterminate.apply(this, arguments); }
            },
            "getLabels": {
              "value": function () { return this.get_labels.apply(this, arguments); }
            },
            "getList": {
              "value": function () { return this.get_list.apply(this, arguments); }
            },
            "getMax": {
              "value": function () { return this.get_max.apply(this, arguments); }
            },
            "getMaxLength": {
              "value": function () { return this.get_max_length.apply(this, arguments); }
            },
            "getMin": {
              "value": function () { return this.get_min.apply(this, arguments); }
            },
            "getMultiple": {
              "value": function () { return this.get_multiple.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getPattern": {
              "value": function () { return this.get_pattern.apply(this, arguments); }
            },
            "getPlaceholder": {
              "value": function () { return this.get_placeholder.apply(this, arguments); }
            },
            "getReadOnly": {
              "value": function () { return this.get_read_only.apply(this, arguments); }
            },
            "getRequired": {
              "value": function () { return this.get_required.apply(this, arguments); }
            },
            "getSize": {
              "value": function () { return this.get_size.apply(this, arguments); }
            },
            "getSrc": {
              "value": function () { return this.get_src.apply(this, arguments); }
            },
            "getStep": {
              "value": function () { return this.get_step.apply(this, arguments); }
            },
            "getUseMap": {
              "value": function () { return this.get_use_map.apply(this, arguments); }
            },
            "getValidationMessage": {
              "value": function () { return this.get_validation_message.apply(this, arguments); }
            },
            "getValidity": {
              "value": function () { return this.get_validity.apply(this, arguments); }
            },
            "getValue": {
              "value": function () { return this.get_value.apply(this, arguments); }
            },
            "getValueAsNumber": {
              "value": function () { return this.get_value_as_number.apply(this, arguments); }
            },
            "getWebkitGrammar": {
              "value": function () { return this.get_webkit_grammar.apply(this, arguments); }
            },
            "getWebkitSpeech": {
              "value": function () { return this.get_webkit_speech.apply(this, arguments); }
            },
            "getWebkitdirectory": {
              "value": function () { return this.get_webkitdirectory.apply(this, arguments); }
            },
            "getWidth": {
              "value": function () { return this.get_width.apply(this, arguments); }
            },
            "getWillValidate": {
              "value": function () { return this.get_will_validate.apply(this, arguments); }
            },
            "isEdited": {
              "value": function () { return this.is_edited.apply(this, arguments); }
            },
            "setAccept": {
              "value": function () { return this.set_accept.apply(this, arguments); }
            },
            "setAlign": {
              "value": function () { return this.set_align.apply(this, arguments); }
            },
            "setAlt": {
              "value": function () { return this.set_alt.apply(this, arguments); }
            },
            "setAutocapitalize": {
              "value": function () { return this.set_autocapitalize.apply(this, arguments); }
            },
            "setAutocomplete": {
              "value": function () { return this.set_autocomplete.apply(this, arguments); }
            },
            "setAutocorrect": {
              "value": function () { return this.set_autocorrect.apply(this, arguments); }
            },
            "setAutofocus": {
              "value": function () { return this.set_autofocus.apply(this, arguments); }
            },
            "setCapture": {
              "value": function () { return this.set_capture.apply(this, arguments); }
            },
            "setChecked": {
              "value": function () { return this.set_checked.apply(this, arguments); }
            },
            "setCustomValidity": {
              "value": function () { return this.set_custom_validity.apply(this, arguments); }
            },
            "setDefaultChecked": {
              "value": function () { return this.set_default_checked.apply(this, arguments); }
            },
            "setDefaultValue": {
              "value": function () { return this.set_default_value.apply(this, arguments); }
            },
            "setDirName": {
              "value": function () { return this.set_dir_name.apply(this, arguments); }
            },
            "setDisabled": {
              "value": function () { return this.set_disabled.apply(this, arguments); }
            },
            "setFiles": {
              "value": function () { return this.set_files.apply(this, arguments); }
            },
            "setFormAction": {
              "value": function () { return this.set_form_action.apply(this, arguments); }
            },
            "setFormEnctype": {
              "value": function () { return this.set_form_enctype.apply(this, arguments); }
            },
            "setFormMethod": {
              "value": function () { return this.set_form_method.apply(this, arguments); }
            },
            "setFormNoValidate": {
              "value": function () { return this.set_form_no_validate.apply(this, arguments); }
            },
            "setFormTarget": {
              "value": function () { return this.set_form_target.apply(this, arguments); }
            },
            "setHeight": {
              "value": function () { return this.set_height.apply(this, arguments); }
            },
            "setIncremental": {
              "value": function () { return this.set_incremental.apply(this, arguments); }
            },
            "setIndeterminate": {
              "value": function () { return this.set_indeterminate.apply(this, arguments); }
            },
            "setMax": {
              "value": function () { return this.set_max.apply(this, arguments); }
            },
            "setMaxLength": {
              "value": function () { return this.set_max_length.apply(this, arguments); }
            },
            "setMin": {
              "value": function () { return this.set_min.apply(this, arguments); }
            },
            "setMultiple": {
              "value": function () { return this.set_multiple.apply(this, arguments); }
            },
            "setName": {
              "value": function () { return this.set_name.apply(this, arguments); }
            },
            "setPattern": {
              "value": function () { return this.set_pattern.apply(this, arguments); }
            },
            "setPlaceholder": {
              "value": function () { return this.set_placeholder.apply(this, arguments); }
            },
            "setRangeText": {
              "value": function () { return this.set_range_text.apply(this, arguments); }
            },
            "setReadOnly": {
              "value": function () { return this.set_read_only.apply(this, arguments); }
            },
            "setRequired": {
              "value": function () { return this.set_required.apply(this, arguments); }
            },
            "setSize": {
              "value": function () { return this.set_size.apply(this, arguments); }
            },
            "setSrc": {
              "value": function () { return this.set_src.apply(this, arguments); }
            },
            "setStep": {
              "value": function () { return this.set_step.apply(this, arguments); }
            },
            "setUseMap": {
              "value": function () { return this.set_use_map.apply(this, arguments); }
            },
            "setValue": {
              "value": function () { return this.set_value.apply(this, arguments); }
            },
            "setValueAsNumber": {
              "value": function () { return this.set_value_as_number.apply(this, arguments); }
            },
            "setValueForUser": {
              "value": function () { return this.set_value_for_user.apply(this, arguments); }
            },
            "setWebkitGrammar": {
              "value": function () { return this.set_webkit_grammar.apply(this, arguments); }
            },
            "setWebkitSpeech": {
              "value": function () { return this.set_webkit_speech.apply(this, arguments); }
            },
            "setWebkitdirectory": {
              "value": function () { return this.set_webkitdirectory.apply(this, arguments); }
            },
            "setWidth": {
              "value": function () { return this.set_width.apply(this, arguments); }
            },
            "stepDown": {
              "value": function () { return this.step_down.apply(this, arguments); }
            },
            "stepUp": {
              "value": function () { return this.step_up.apply(this, arguments); }
            },
            "defaultChecked": {
              "get": function () { return this.default_checked; },
              "set": function (value) { this.default_checked = value; }
            },
            "defaultValue": {
              "get": function () { return this.default_value; },
              "set": function (value) { this.default_value = value; }
            },
            "dirName": {
              "get": function () { return this.dir_name; },
              "set": function (value) { this.dir_name = value; }
            },
            "formAction": {
              "get": function () { return this.form_action; },
              "set": function (value) { this.form_action = value; }
            },
            "formEnctype": {
              "get": function () { return this.form_enctype; },
              "set": function (value) { this.form_enctype = value; }
            },
            "formMethod": {
              "get": function () { return this.form_method; },
              "set": function (value) { this.form_method = value; }
            },
            "formNoValidate": {
              "get": function () { return this.form_no_validate; },
              "set": function (value) { this.form_no_validate = value; }
            },
            "formTarget": {
              "get": function () { return this.form_target; },
              "set": function (value) { this.form_target = value; }
            },
            "maxLength": {
              "get": function () { return this.max_length; },
              "set": function (value) { this.max_length = value; }
            },
            "readOnly": {
              "get": function () { return this.read_only; },
              "set": function (value) { this.read_only = value; }
            },
            "useMap": {
              "get": function () { return this.use_map; },
              "set": function (value) { this.use_map = value; }
            },
            "validationMessage": {
              "get": function () { return this.validation_message; },
              "set": function (value) { this.validation_message = value; }
            },
            "valueAsNumber": {
              "get": function () { return this.value_as_number; },
              "set": function (value) { this.value_as_number = value; }
            },
            "webkitGrammar": {
              "get": function () { return this.webkit_grammar; },
              "set": function (value) { this.webkit_grammar = value; }
            },
            "webkitSpeech": {
              "get": function () { return this.webkit_speech; },
              "set": function (value) { this.webkit_speech = value; }
            },
            "willValidate": {
              "get": function () { return this.will_validate; },
              "set": function (value) { this.will_validate = value; }
            }
          },
          "static": {}
        },
        "DOMHTMLKeygenElement": {
          "prototype": {
            "checkValidity": {
              "value": function () { return this.check_validity.apply(this, arguments); }
            },
            "getAutofocus": {
              "value": function () { return this.get_autofocus.apply(this, arguments); }
            },
            "getChallenge": {
              "value": function () { return this.get_challenge.apply(this, arguments); }
            },
            "getDisabled": {
              "value": function () { return this.get_disabled.apply(this, arguments); }
            },
            "getForm": {
              "value": function () { return this.get_form.apply(this, arguments); }
            },
            "getKeytype": {
              "value": function () { return this.get_keytype.apply(this, arguments); }
            },
            "getLabels": {
              "value": function () { return this.get_labels.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getValidationMessage": {
              "value": function () { return this.get_validation_message.apply(this, arguments); }
            },
            "getValidity": {
              "value": function () { return this.get_validity.apply(this, arguments); }
            },
            "getWillValidate": {
              "value": function () { return this.get_will_validate.apply(this, arguments); }
            },
            "setAutofocus": {
              "value": function () { return this.set_autofocus.apply(this, arguments); }
            },
            "setChallenge": {
              "value": function () { return this.set_challenge.apply(this, arguments); }
            },
            "setCustomValidity": {
              "value": function () { return this.set_custom_validity.apply(this, arguments); }
            },
            "setDisabled": {
              "value": function () { return this.set_disabled.apply(this, arguments); }
            },
            "setKeytype": {
              "value": function () { return this.set_keytype.apply(this, arguments); }
            },
            "setName": {
              "value": function () { return this.set_name.apply(this, arguments); }
            },
            "validationMessage": {
              "get": function () { return this.validation_message; },
              "set": function (value) { this.validation_message = value; }
            },
            "willValidate": {
              "get": function () { return this.will_validate; },
              "set": function (value) { this.will_validate = value; }
            }
          },
          "static": {}
        },
        "DOMHTMLLIElement": {
          "prototype": {
            "getValue": {
              "value": function () { return this.get_value.apply(this, arguments); }
            },
            "setValue": {
              "value": function () { return this.set_value.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DOMHTMLLabelElement": {
          "prototype": {
            "getControl": {
              "value": function () { return this.get_control.apply(this, arguments); }
            },
            "getForm": {
              "value": function () { return this.get_form.apply(this, arguments); }
            },
            "getHtmlFor": {
              "value": function () { return this.get_html_for.apply(this, arguments); }
            },
            "setHtmlFor": {
              "value": function () { return this.set_html_for.apply(this, arguments); }
            },
            "htmlFor": {
              "get": function () { return this.html_for; },
              "set": function (value) { this.html_for = value; }
            }
          },
          "static": {}
        },
        "DOMHTMLLegendElement": {
          "prototype": {
            "getAlign": {
              "value": function () { return this.get_align.apply(this, arguments); }
            },
            "getForm": {
              "value": function () { return this.get_form.apply(this, arguments); }
            },
            "setAlign": {
              "value": function () { return this.set_align.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DOMHTMLLinkElement": {
          "prototype": {
            "getCharset": {
              "value": function () { return this.get_charset.apply(this, arguments); }
            },
            "getDisabled": {
              "value": function () { return this.get_disabled.apply(this, arguments); }
            },
            "getHref": {
              "value": function () { return this.get_href.apply(this, arguments); }
            },
            "getHreflang": {
              "value": function () { return this.get_hreflang.apply(this, arguments); }
            },
            "getMedia": {
              "value": function () { return this.get_media.apply(this, arguments); }
            },
            "getRel": {
              "value": function () { return this.get_rel.apply(this, arguments); }
            },
            "getRev": {
              "value": function () { return this.get_rev.apply(this, arguments); }
            },
            "getSheet": {
              "value": function () { return this.get_sheet.apply(this, arguments); }
            },
            "getTarget": {
              "value": function () { return this.get_target.apply(this, arguments); }
            },
            "setCharset": {
              "value": function () { return this.set_charset.apply(this, arguments); }
            },
            "setDisabled": {
              "value": function () { return this.set_disabled.apply(this, arguments); }
            },
            "setHref": {
              "value": function () { return this.set_href.apply(this, arguments); }
            },
            "setHreflang": {
              "value": function () { return this.set_hreflang.apply(this, arguments); }
            },
            "setMedia": {
              "value": function () { return this.set_media.apply(this, arguments); }
            },
            "setRel": {
              "value": function () { return this.set_rel.apply(this, arguments); }
            },
            "setRev": {
              "value": function () { return this.set_rev.apply(this, arguments); }
            },
            "setTarget": {
              "value": function () { return this.set_target.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DOMHTMLMapElement": {
          "prototype": {
            "getAreas": {
              "value": function () { return this.get_areas.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "setName": {
              "value": function () { return this.set_name.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DOMHTMLMarqueeElement": {
          "prototype": {
            "getBehavior": {
              "value": function () { return this.get_behavior.apply(this, arguments); }
            },
            "getBgColor": {
              "value": function () { return this.get_bg_color.apply(this, arguments); }
            },
            "getDirection": {
              "value": function () { return this.get_direction.apply(this, arguments); }
            },
            "getHeight": {
              "value": function () { return this.get_height.apply(this, arguments); }
            },
            "getHspace": {
              "value": function () { return this.get_hspace.apply(this, arguments); }
            },
            "getLoop": {
              "value": function () { return this.get_loop.apply(this, arguments); }
            },
            "getScrollAmount": {
              "value": function () { return this.get_scroll_amount.apply(this, arguments); }
            },
            "getScrollDelay": {
              "value": function () { return this.get_scroll_delay.apply(this, arguments); }
            },
            "getTrueSpeed": {
              "value": function () { return this.get_true_speed.apply(this, arguments); }
            },
            "getVspace": {
              "value": function () { return this.get_vspace.apply(this, arguments); }
            },
            "getWidth": {
              "value": function () { return this.get_width.apply(this, arguments); }
            },
            "setBehavior": {
              "value": function () { return this.set_behavior.apply(this, arguments); }
            },
            "setBgColor": {
              "value": function () { return this.set_bg_color.apply(this, arguments); }
            },
            "setDirection": {
              "value": function () { return this.set_direction.apply(this, arguments); }
            },
            "setHeight": {
              "value": function () { return this.set_height.apply(this, arguments); }
            },
            "setHspace": {
              "value": function () { return this.set_hspace.apply(this, arguments); }
            },
            "setLoop": {
              "value": function () { return this.set_loop.apply(this, arguments); }
            },
            "setScrollAmount": {
              "value": function () { return this.set_scroll_amount.apply(this, arguments); }
            },
            "setScrollDelay": {
              "value": function () { return this.set_scroll_delay.apply(this, arguments); }
            },
            "setTrueSpeed": {
              "value": function () { return this.set_true_speed.apply(this, arguments); }
            },
            "setVspace": {
              "value": function () { return this.set_vspace.apply(this, arguments); }
            },
            "setWidth": {
              "value": function () { return this.set_width.apply(this, arguments); }
            },
            "bgColor": {
              "get": function () { return this.bg_color; },
              "set": function (value) { this.bg_color = value; }
            },
            "scrollAmount": {
              "get": function () { return this.scroll_amount; },
              "set": function (value) { this.scroll_amount = value; }
            },
            "scrollDelay": {
              "get": function () { return this.scroll_delay; },
              "set": function (value) { this.scroll_delay = value; }
            },
            "trueSpeed": {
              "get": function () { return this.true_speed; },
              "set": function (value) { this.true_speed = value; }
            }
          },
          "static": {}
        },
        "DOMHTMLMediaElement": {
          "prototype": {
            "addTextTrack": {
              "value": function () { return this.add_text_track.apply(this, arguments); }
            },
            "canPlayType": {
              "value": function () { return this.can_play_type.apply(this, arguments); }
            },
            "fastSeek": {
              "value": function () { return this.fast_seek.apply(this, arguments); }
            },
            "getAudioTracks": {
              "value": function () { return this.get_audio_tracks.apply(this, arguments); }
            },
            "getAutoplay": {
              "value": function () { return this.get_autoplay.apply(this, arguments); }
            },
            "getBuffered": {
              "value": function () { return this.get_buffered.apply(this, arguments); }
            },
            "getController": {
              "value": function () { return this.get_controller.apply(this, arguments); }
            },
            "getControls": {
              "value": function () { return this.get_controls.apply(this, arguments); }
            },
            "getCurrentSrc": {
              "value": function () { return this.get_current_src.apply(this, arguments); }
            },
            "getCurrentTime": {
              "value": function () { return this.get_current_time.apply(this, arguments); }
            },
            "getDefaultMuted": {
              "value": function () { return this.get_default_muted.apply(this, arguments); }
            },
            "getDefaultPlaybackRate": {
              "value": function () { return this.get_default_playback_rate.apply(this, arguments); }
            },
            "getDuration": {
              "value": function () { return this.get_duration.apply(this, arguments); }
            },
            "getEnded": {
              "value": function () { return this.get_ended.apply(this, arguments); }
            },
            "getError": {
              "value": function () { return this.get_error.apply(this, arguments); }
            },
            "getInitialTime": {
              "value": function () { return this.get_initial_time.apply(this, arguments); }
            },
            "getLoop": {
              "value": function () { return this.get_loop.apply(this, arguments); }
            },
            "getMediaGroup": {
              "value": function () { return this.get_media_group.apply(this, arguments); }
            },
            "getMuted": {
              "value": function () { return this.get_muted.apply(this, arguments); }
            },
            "getNetworkState": {
              "value": function () { return this.get_network_state.apply(this, arguments); }
            },
            "getPaused": {
              "value": function () { return this.get_paused.apply(this, arguments); }
            },
            "getPlaybackRate": {
              "value": function () { return this.get_playback_rate.apply(this, arguments); }
            },
            "getPlayed": {
              "value": function () { return this.get_played.apply(this, arguments); }
            },
            "getPreload": {
              "value": function () { return this.get_preload.apply(this, arguments); }
            },
            "getReadyState": {
              "value": function () { return this.get_ready_state.apply(this, arguments); }
            },
            "getSeekable": {
              "value": function () { return this.get_seekable.apply(this, arguments); }
            },
            "getSeeking": {
              "value": function () { return this.get_seeking.apply(this, arguments); }
            },
            "getSrc": {
              "value": function () { return this.get_src.apply(this, arguments); }
            },
            "getStartTime": {
              "value": function () { return this.get_start_time.apply(this, arguments); }
            },
            "getTextTracks": {
              "value": function () { return this.get_text_tracks.apply(this, arguments); }
            },
            "getVideoTracks": {
              "value": function () { return this.get_video_tracks.apply(this, arguments); }
            },
            "getVolume": {
              "value": function () { return this.get_volume.apply(this, arguments); }
            },
            "getWebkitAudioDecodedByteCount": {
              "value": function () { return this.get_webkit_audio_decoded_byte_count.apply(this, arguments); }
            },
            "getWebkitClosedCaptionsVisible": {
              "value": function () { return this.get_webkit_closed_captions_visible.apply(this, arguments); }
            },
            "getWebkitCurrentPlaybackTargetIsWireless": {
              "value": function () { return this.get_webkit_current_playback_target_is_wireless.apply(this, arguments); }
            },
            "getWebkitHasClosedCaptions": {
              "value": function () { return this.get_webkit_has_closed_captions.apply(this, arguments); }
            },
            "getWebkitPreservesPitch": {
              "value": function () { return this.get_webkit_preserves_pitch.apply(this, arguments); }
            },
            "getWebkitVideoDecodedByteCount": {
              "value": function () { return this.get_webkit_video_decoded_byte_count.apply(this, arguments); }
            },
            "setAutoplay": {
              "value": function () { return this.set_autoplay.apply(this, arguments); }
            },
            "setControls": {
              "value": function () { return this.set_controls.apply(this, arguments); }
            },
            "setCurrentTime": {
              "value": function () { return this.set_current_time.apply(this, arguments); }
            },
            "setDefaultMuted": {
              "value": function () { return this.set_default_muted.apply(this, arguments); }
            },
            "setDefaultPlaybackRate": {
              "value": function () { return this.set_default_playback_rate.apply(this, arguments); }
            },
            "setLoop": {
              "value": function () { return this.set_loop.apply(this, arguments); }
            },
            "setMediaGroup": {
              "value": function () { return this.set_media_group.apply(this, arguments); }
            },
            "setMuted": {
              "value": function () { return this.set_muted.apply(this, arguments); }
            },
            "setPlaybackRate": {
              "value": function () { return this.set_playback_rate.apply(this, arguments); }
            },
            "setPreload": {
              "value": function () { return this.set_preload.apply(this, arguments); }
            },
            "setSrc": {
              "value": function () { return this.set_src.apply(this, arguments); }
            },
            "setVolume": {
              "value": function () { return this.set_volume.apply(this, arguments); }
            },
            "setWebkitClosedCaptionsVisible": {
              "value": function () { return this.set_webkit_closed_captions_visible.apply(this, arguments); }
            },
            "setWebkitPreservesPitch": {
              "value": function () { return this.set_webkit_preserves_pitch.apply(this, arguments); }
            },
            "webkitShowPlaybackTargetPicker": {
              "value": function () { return this.webkit_show_playback_target_picker.apply(this, arguments); }
            },
            "audioTracks": {
              "get": function () { return this.audio_tracks; },
              "set": function (value) { this.audio_tracks = value; }
            },
            "currentSrc": {
              "get": function () { return this.current_src; },
              "set": function (value) { this.current_src = value; }
            },
            "currentTime": {
              "get": function () { return this.current_time; },
              "set": function (value) { this.current_time = value; }
            },
            "defaultMuted": {
              "get": function () { return this.default_muted; },
              "set": function (value) { this.default_muted = value; }
            },
            "defaultPlaybackRate": {
              "get": function () { return this.default_playback_rate; },
              "set": function (value) { this.default_playback_rate = value; }
            },
            "mediaGroup": {
              "get": function () { return this.media_group; },
              "set": function (value) { this.media_group = value; }
            },
            "networkState": {
              "get": function () { return this.network_state; },
              "set": function (value) { this.network_state = value; }
            },
            "playbackRate": {
              "get": function () { return this.playback_rate; },
              "set": function (value) { this.playback_rate = value; }
            },
            "readyState": {
              "get": function () { return this.ready_state; },
              "set": function (value) { this.ready_state = value; }
            },
            "textTracks": {
              "get": function () { return this.text_tracks; },
              "set": function (value) { this.text_tracks = value; }
            },
            "videoTracks": {
              "get": function () { return this.video_tracks; },
              "set": function (value) { this.video_tracks = value; }
            },
            "webkitAudioDecodedByteCount": {
              "get": function () { return this.webkit_audio_decoded_byte_count; },
              "set": function (value) { this.webkit_audio_decoded_byte_count = value; }
            },
            "webkitClosedCaptionsVisible": {
              "get": function () { return this.webkit_closed_captions_visible; },
              "set": function (value) { this.webkit_closed_captions_visible = value; }
            },
            "webkitCurrentPlaybackTargetIsWireless": {
              "get": function () { return this.webkit_current_playback_target_is_wireless; },
              "set": function (value) { this.webkit_current_playback_target_is_wireless = value; }
            },
            "webkitHasClosedCaptions": {
              "get": function () { return this.webkit_has_closed_captions; },
              "set": function (value) { this.webkit_has_closed_captions = value; }
            },
            "webkitPreservesPitch": {
              "get": function () { return this.webkit_preserves_pitch; },
              "set": function (value) { this.webkit_preserves_pitch = value; }
            },
            "webkitVideoDecodedByteCount": {
              "get": function () { return this.webkit_video_decoded_byte_count; },
              "set": function (value) { this.webkit_video_decoded_byte_count = value; }
            }
          },
          "static": {}
        },
        "DOMHTMLMenuElement": {
          "prototype": {
            "getCompact": {
              "value": function () { return this.get_compact.apply(this, arguments); }
            },
            "setCompact": {
              "value": function () { return this.set_compact.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DOMHTMLMetaElement": {
          "prototype": {
            "getContent": {
              "value": function () { return this.get_content.apply(this, arguments); }
            },
            "getHttpEquiv": {
              "value": function () { return this.get_http_equiv.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getScheme": {
              "value": function () { return this.get_scheme.apply(this, arguments); }
            },
            "setContent": {
              "value": function () { return this.set_content.apply(this, arguments); }
            },
            "setHttpEquiv": {
              "value": function () { return this.set_http_equiv.apply(this, arguments); }
            },
            "setName": {
              "value": function () { return this.set_name.apply(this, arguments); }
            },
            "setScheme": {
              "value": function () { return this.set_scheme.apply(this, arguments); }
            },
            "httpEquiv": {
              "get": function () { return this.http_equiv; },
              "set": function (value) { this.http_equiv = value; }
            }
          },
          "static": {}
        },
        "DOMHTMLModElement": {
          "prototype": {
            "getCite": {
              "value": function () { return this.get_cite.apply(this, arguments); }
            },
            "getDateTime": {
              "value": function () { return this.get_date_time.apply(this, arguments); }
            },
            "setCite": {
              "value": function () { return this.set_cite.apply(this, arguments); }
            },
            "setDateTime": {
              "value": function () { return this.set_date_time.apply(this, arguments); }
            },
            "dateTime": {
              "get": function () { return this.date_time; },
              "set": function (value) { this.date_time = value; }
            }
          },
          "static": {}
        },
        "DOMHTMLOListElement": {
          "prototype": {
            "getCompact": {
              "value": function () { return this.get_compact.apply(this, arguments); }
            },
            "getReversed": {
              "value": function () { return this.get_reversed.apply(this, arguments); }
            },
            "getStart": {
              "value": function () { return this.get_start.apply(this, arguments); }
            },
            "setCompact": {
              "value": function () { return this.set_compact.apply(this, arguments); }
            },
            "setReversed": {
              "value": function () { return this.set_reversed.apply(this, arguments); }
            },
            "setStart": {
              "value": function () { return this.set_start.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DOMHTMLObjectElement": {
          "prototype": {
            "checkValidity": {
              "value": function () { return this.check_validity.apply(this, arguments); }
            },
            "getAlign": {
              "value": function () { return this.get_align.apply(this, arguments); }
            },
            "getArchive": {
              "value": function () { return this.get_archive.apply(this, arguments); }
            },
            "getBorder": {
              "value": function () { return this.get_border.apply(this, arguments); }
            },
            "getCode": {
              "value": function () { return this.get_code.apply(this, arguments); }
            },
            "getCodeBase": {
              "value": function () { return this.get_code_base.apply(this, arguments); }
            },
            "getCodeType": {
              "value": function () { return this.get_code_type.apply(this, arguments); }
            },
            "getContentDocument": {
              "value": function () { return this.get_content_document.apply(this, arguments); }
            },
            "getData": {
              "value": function () { return this.get_data.apply(this, arguments); }
            },
            "getDeclare": {
              "value": function () { return this.get_declare.apply(this, arguments); }
            },
            "getForm": {
              "value": function () { return this.get_form.apply(this, arguments); }
            },
            "getHeight": {
              "value": function () { return this.get_height.apply(this, arguments); }
            },
            "getHspace": {
              "value": function () { return this.get_hspace.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getStandby": {
              "value": function () { return this.get_standby.apply(this, arguments); }
            },
            "getUseMap": {
              "value": function () { return this.get_use_map.apply(this, arguments); }
            },
            "getValidationMessage": {
              "value": function () { return this.get_validation_message.apply(this, arguments); }
            },
            "getValidity": {
              "value": function () { return this.get_validity.apply(this, arguments); }
            },
            "getVspace": {
              "value": function () { return this.get_vspace.apply(this, arguments); }
            },
            "getWidth": {
              "value": function () { return this.get_width.apply(this, arguments); }
            },
            "getWillValidate": {
              "value": function () { return this.get_will_validate.apply(this, arguments); }
            },
            "setAlign": {
              "value": function () { return this.set_align.apply(this, arguments); }
            },
            "setArchive": {
              "value": function () { return this.set_archive.apply(this, arguments); }
            },
            "setBorder": {
              "value": function () { return this.set_border.apply(this, arguments); }
            },
            "setCode": {
              "value": function () { return this.set_code.apply(this, arguments); }
            },
            "setCodeBase": {
              "value": function () { return this.set_code_base.apply(this, arguments); }
            },
            "setCodeType": {
              "value": function () { return this.set_code_type.apply(this, arguments); }
            },
            "setCustomValidity": {
              "value": function () { return this.set_custom_validity.apply(this, arguments); }
            },
            "setData": {
              "value": function () { return this.set_data.apply(this, arguments); }
            },
            "setDeclare": {
              "value": function () { return this.set_declare.apply(this, arguments); }
            },
            "setHeight": {
              "value": function () { return this.set_height.apply(this, arguments); }
            },
            "setHspace": {
              "value": function () { return this.set_hspace.apply(this, arguments); }
            },
            "setName": {
              "value": function () { return this.set_name.apply(this, arguments); }
            },
            "setStandby": {
              "value": function () { return this.set_standby.apply(this, arguments); }
            },
            "setUseMap": {
              "value": function () { return this.set_use_map.apply(this, arguments); }
            },
            "setVspace": {
              "value": function () { return this.set_vspace.apply(this, arguments); }
            },
            "setWidth": {
              "value": function () { return this.set_width.apply(this, arguments); }
            },
            "codeBase": {
              "get": function () { return this.code_base; },
              "set": function (value) { this.code_base = value; }
            },
            "codeType": {
              "get": function () { return this.code_type; },
              "set": function (value) { this.code_type = value; }
            },
            "contentDocument": {
              "get": function () { return this.content_document; },
              "set": function (value) { this.content_document = value; }
            },
            "useMap": {
              "get": function () { return this.use_map; },
              "set": function (value) { this.use_map = value; }
            },
            "validationMessage": {
              "get": function () { return this.validation_message; },
              "set": function (value) { this.validation_message = value; }
            },
            "willValidate": {
              "get": function () { return this.will_validate; },
              "set": function (value) { this.will_validate = value; }
            }
          },
          "static": {}
        },
        "DOMHTMLOptGroupElement": {
          "prototype": {
            "getDisabled": {
              "value": function () { return this.get_disabled.apply(this, arguments); }
            },
            "getLabel": {
              "value": function () { return this.get_label.apply(this, arguments); }
            },
            "setDisabled": {
              "value": function () { return this.set_disabled.apply(this, arguments); }
            },
            "setLabel": {
              "value": function () { return this.set_label.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DOMHTMLOptionElement": {
          "prototype": {
            "getDefaultSelected": {
              "value": function () { return this.get_default_selected.apply(this, arguments); }
            },
            "getDisabled": {
              "value": function () { return this.get_disabled.apply(this, arguments); }
            },
            "getForm": {
              "value": function () { return this.get_form.apply(this, arguments); }
            },
            "getIndex": {
              "value": function () { return this.get_index.apply(this, arguments); }
            },
            "getLabel": {
              "value": function () { return this.get_label.apply(this, arguments); }
            },
            "getSelected": {
              "value": function () { return this.get_selected.apply(this, arguments); }
            },
            "getText": {
              "value": function () { return this.get_text.apply(this, arguments); }
            },
            "getValue": {
              "value": function () { return this.get_value.apply(this, arguments); }
            },
            "setDefaultSelected": {
              "value": function () { return this.set_default_selected.apply(this, arguments); }
            },
            "setDisabled": {
              "value": function () { return this.set_disabled.apply(this, arguments); }
            },
            "setLabel": {
              "value": function () { return this.set_label.apply(this, arguments); }
            },
            "setSelected": {
              "value": function () { return this.set_selected.apply(this, arguments); }
            },
            "setValue": {
              "value": function () { return this.set_value.apply(this, arguments); }
            },
            "defaultSelected": {
              "get": function () { return this.default_selected; },
              "set": function (value) { this.default_selected = value; }
            }
          },
          "static": {}
        },
        "DOMHTMLOptionsCollection": {
          "prototype": {
            "getLength": {
              "value": function () { return this.get_length.apply(this, arguments); }
            },
            "getSelectedIndex": {
              "value": function () { return this.get_selected_index.apply(this, arguments); }
            },
            "namedItem": {
              "value": function () { return this.named_item.apply(this, arguments); }
            },
            "setSelectedIndex": {
              "value": function () { return this.set_selected_index.apply(this, arguments); }
            },
            "selectedIndex": {
              "get": function () { return this.selected_index; },
              "set": function (value) { this.selected_index = value; }
            }
          },
          "static": {}
        },
        "DOMHTMLParagraphElement": {
          "prototype": {
            "getAlign": {
              "value": function () { return this.get_align.apply(this, arguments); }
            },
            "setAlign": {
              "value": function () { return this.set_align.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DOMHTMLParamElement": {
          "prototype": {
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getValue": {
              "value": function () { return this.get_value.apply(this, arguments); }
            },
            "getValueType": {
              "value": function () { return this.get_value_type.apply(this, arguments); }
            },
            "setName": {
              "value": function () { return this.set_name.apply(this, arguments); }
            },
            "setValue": {
              "value": function () { return this.set_value.apply(this, arguments); }
            },
            "setValueType": {
              "value": function () { return this.set_value_type.apply(this, arguments); }
            },
            "valueType": {
              "get": function () { return this.value_type; },
              "set": function (value) { this.value_type = value; }
            }
          },
          "static": {}
        },
        "DOMHTMLPreElement": {
          "prototype": {
            "getWidth": {
              "value": function () { return this.get_width.apply(this, arguments); }
            },
            "getWrap": {
              "value": function () { return this.get_wrap.apply(this, arguments); }
            },
            "setWidth": {
              "value": function () { return this.set_width.apply(this, arguments); }
            },
            "setWrap": {
              "value": function () { return this.set_wrap.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DOMHTMLPropertiesCollection": {
          "prototype": {},
          "static": {
            "getLength": {
              "value": function () { return this.get_length.apply(this, arguments); }
            },
            "getNames": {
              "value": function () { return this.get_names.apply(this, arguments); }
            },
            "namedItem": {
              "value": function () { return this.named_item.apply(this, arguments); }
            }
          }
        },
        "DOMHTMLQuoteElement": {
          "prototype": {
            "getCite": {
              "value": function () { return this.get_cite.apply(this, arguments); }
            },
            "setCite": {
              "value": function () { return this.set_cite.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DOMHTMLScriptElement": {
          "prototype": {
            "getAsync": {
              "value": function () { return this.get_async.apply(this, arguments); }
            },
            "getCharset": {
              "value": function () { return this.get_charset.apply(this, arguments); }
            },
            "getCrossOrigin": {
              "value": function () { return this.get_cross_origin.apply(this, arguments); }
            },
            "getDefer": {
              "value": function () { return this.get_defer.apply(this, arguments); }
            },
            "getEvent": {
              "value": function () { return this.get_event.apply(this, arguments); }
            },
            "getHtmlFor": {
              "value": function () { return this.get_html_for.apply(this, arguments); }
            },
            "getNonce": {
              "value": function () { return this.get_nonce.apply(this, arguments); }
            },
            "getSrc": {
              "value": function () { return this.get_src.apply(this, arguments); }
            },
            "getText": {
              "value": function () { return this.get_text.apply(this, arguments); }
            },
            "setAsync": {
              "value": function () { return this.set_async.apply(this, arguments); }
            },
            "setCharset": {
              "value": function () { return this.set_charset.apply(this, arguments); }
            },
            "setCrossOrigin": {
              "value": function () { return this.set_cross_origin.apply(this, arguments); }
            },
            "setDefer": {
              "value": function () { return this.set_defer.apply(this, arguments); }
            },
            "setEvent": {
              "value": function () { return this.set_event.apply(this, arguments); }
            },
            "setHtmlFor": {
              "value": function () { return this.set_html_for.apply(this, arguments); }
            },
            "setNonce": {
              "value": function () { return this.set_nonce.apply(this, arguments); }
            },
            "setSrc": {
              "value": function () { return this.set_src.apply(this, arguments); }
            },
            "setText": {
              "value": function () { return this.set_text.apply(this, arguments); }
            },
            "crossOrigin": {
              "get": function () { return this.cross_origin; },
              "set": function (value) { this.cross_origin = value; }
            },
            "htmlFor": {
              "get": function () { return this.html_for; },
              "set": function (value) { this.html_for = value; }
            }
          },
          "static": {}
        },
        "DOMHTMLSelectElement": {
          "prototype": {
            "checkValidity": {
              "value": function () { return this.check_validity.apply(this, arguments); }
            },
            "getAutofocus": {
              "value": function () { return this.get_autofocus.apply(this, arguments); }
            },
            "getDisabled": {
              "value": function () { return this.get_disabled.apply(this, arguments); }
            },
            "getForm": {
              "value": function () { return this.get_form.apply(this, arguments); }
            },
            "getLabels": {
              "value": function () { return this.get_labels.apply(this, arguments); }
            },
            "getLength": {
              "value": function () { return this.get_length.apply(this, arguments); }
            },
            "getMultiple": {
              "value": function () { return this.get_multiple.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getOptions": {
              "value": function () { return this.get_options.apply(this, arguments); }
            },
            "getRequired": {
              "value": function () { return this.get_required.apply(this, arguments); }
            },
            "getSelectedIndex": {
              "value": function () { return this.get_selected_index.apply(this, arguments); }
            },
            "getSelectedOptions": {
              "value": function () { return this.get_selected_options.apply(this, arguments); }
            },
            "getSize": {
              "value": function () { return this.get_size.apply(this, arguments); }
            },
            "getValidationMessage": {
              "value": function () { return this.get_validation_message.apply(this, arguments); }
            },
            "getValidity": {
              "value": function () { return this.get_validity.apply(this, arguments); }
            },
            "getValue": {
              "value": function () { return this.get_value.apply(this, arguments); }
            },
            "getWillValidate": {
              "value": function () { return this.get_will_validate.apply(this, arguments); }
            },
            "namedItem": {
              "value": function () { return this.named_item.apply(this, arguments); }
            },
            "setAutofocus": {
              "value": function () { return this.set_autofocus.apply(this, arguments); }
            },
            "setCustomValidity": {
              "value": function () { return this.set_custom_validity.apply(this, arguments); }
            },
            "setDisabled": {
              "value": function () { return this.set_disabled.apply(this, arguments); }
            },
            "setLength": {
              "value": function () { return this.set_length.apply(this, arguments); }
            },
            "setMultiple": {
              "value": function () { return this.set_multiple.apply(this, arguments); }
            },
            "setName": {
              "value": function () { return this.set_name.apply(this, arguments); }
            },
            "setRequired": {
              "value": function () { return this.set_required.apply(this, arguments); }
            },
            "setSelectedIndex": {
              "value": function () { return this.set_selected_index.apply(this, arguments); }
            },
            "setSize": {
              "value": function () { return this.set_size.apply(this, arguments); }
            },
            "setValue": {
              "value": function () { return this.set_value.apply(this, arguments); }
            },
            "selectedIndex": {
              "get": function () { return this.selected_index; },
              "set": function (value) { this.selected_index = value; }
            },
            "selectedOptions": {
              "get": function () { return this.selected_options; },
              "set": function (value) { this.selected_options = value; }
            },
            "validationMessage": {
              "get": function () { return this.validation_message; },
              "set": function (value) { this.validation_message = value; }
            },
            "willValidate": {
              "get": function () { return this.will_validate; },
              "set": function (value) { this.will_validate = value; }
            }
          },
          "static": {}
        },
        "DOMHTMLStyleElement": {
          "prototype": {
            "getDisabled": {
              "value": function () { return this.get_disabled.apply(this, arguments); }
            },
            "getMedia": {
              "value": function () { return this.get_media.apply(this, arguments); }
            },
            "getScoped": {
              "value": function () { return this.get_scoped.apply(this, arguments); }
            },
            "getSheet": {
              "value": function () { return this.get_sheet.apply(this, arguments); }
            },
            "setDisabled": {
              "value": function () { return this.set_disabled.apply(this, arguments); }
            },
            "setMedia": {
              "value": function () { return this.set_media.apply(this, arguments); }
            },
            "setScoped": {
              "value": function () { return this.set_scoped.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DOMHTMLTableCaptionElement": {
          "prototype": {
            "getAlign": {
              "value": function () { return this.get_align.apply(this, arguments); }
            },
            "setAlign": {
              "value": function () { return this.set_align.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DOMHTMLTableCellElement": {
          "prototype": {
            "getAbbr": {
              "value": function () { return this.get_abbr.apply(this, arguments); }
            },
            "getAlign": {
              "value": function () { return this.get_align.apply(this, arguments); }
            },
            "getAxis": {
              "value": function () { return this.get_axis.apply(this, arguments); }
            },
            "getBgColor": {
              "value": function () { return this.get_bg_color.apply(this, arguments); }
            },
            "getCellIndex": {
              "value": function () { return this.get_cell_index.apply(this, arguments); }
            },
            "getCh": {
              "value": function () { return this.get_ch.apply(this, arguments); }
            },
            "getChOff": {
              "value": function () { return this.get_ch_off.apply(this, arguments); }
            },
            "getColSpan": {
              "value": function () { return this.get_col_span.apply(this, arguments); }
            },
            "getHeaders": {
              "value": function () { return this.get_headers.apply(this, arguments); }
            },
            "getHeight": {
              "value": function () { return this.get_height.apply(this, arguments); }
            },
            "getNoWrap": {
              "value": function () { return this.get_no_wrap.apply(this, arguments); }
            },
            "getRowSpan": {
              "value": function () { return this.get_row_span.apply(this, arguments); }
            },
            "getScope": {
              "value": function () { return this.get_scope.apply(this, arguments); }
            },
            "getVAlign": {
              "value": function () { return this.get_v_align.apply(this, arguments); }
            },
            "getWidth": {
              "value": function () { return this.get_width.apply(this, arguments); }
            },
            "setAbbr": {
              "value": function () { return this.set_abbr.apply(this, arguments); }
            },
            "setAlign": {
              "value": function () { return this.set_align.apply(this, arguments); }
            },
            "setAxis": {
              "value": function () { return this.set_axis.apply(this, arguments); }
            },
            "setBgColor": {
              "value": function () { return this.set_bg_color.apply(this, arguments); }
            },
            "setCh": {
              "value": function () { return this.set_ch.apply(this, arguments); }
            },
            "setChOff": {
              "value": function () { return this.set_ch_off.apply(this, arguments); }
            },
            "setColSpan": {
              "value": function () { return this.set_col_span.apply(this, arguments); }
            },
            "setHeaders": {
              "value": function () { return this.set_headers.apply(this, arguments); }
            },
            "setHeight": {
              "value": function () { return this.set_height.apply(this, arguments); }
            },
            "setNoWrap": {
              "value": function () { return this.set_no_wrap.apply(this, arguments); }
            },
            "setRowSpan": {
              "value": function () { return this.set_row_span.apply(this, arguments); }
            },
            "setScope": {
              "value": function () { return this.set_scope.apply(this, arguments); }
            },
            "setVAlign": {
              "value": function () { return this.set_v_align.apply(this, arguments); }
            },
            "setWidth": {
              "value": function () { return this.set_width.apply(this, arguments); }
            },
            "bgColor": {
              "get": function () { return this.bg_color; },
              "set": function (value) { this.bg_color = value; }
            },
            "cellIndex": {
              "get": function () { return this.cell_index; },
              "set": function (value) { this.cell_index = value; }
            },
            "chOff": {
              "get": function () { return this.ch_off; },
              "set": function (value) { this.ch_off = value; }
            },
            "colSpan": {
              "get": function () { return this.col_span; },
              "set": function (value) { this.col_span = value; }
            },
            "noWrap": {
              "get": function () { return this.no_wrap; },
              "set": function (value) { this.no_wrap = value; }
            },
            "rowSpan": {
              "get": function () { return this.row_span; },
              "set": function (value) { this.row_span = value; }
            },
            "vAlign": {
              "get": function () { return this.v_align; },
              "set": function (value) { this.v_align = value; }
            }
          },
          "static": {}
        },
        "DOMHTMLTableColElement": {
          "prototype": {
            "getAlign": {
              "value": function () { return this.get_align.apply(this, arguments); }
            },
            "getCh": {
              "value": function () { return this.get_ch.apply(this, arguments); }
            },
            "getChOff": {
              "value": function () { return this.get_ch_off.apply(this, arguments); }
            },
            "getSpan": {
              "value": function () { return this.get_span.apply(this, arguments); }
            },
            "getVAlign": {
              "value": function () { return this.get_v_align.apply(this, arguments); }
            },
            "getWidth": {
              "value": function () { return this.get_width.apply(this, arguments); }
            },
            "setAlign": {
              "value": function () { return this.set_align.apply(this, arguments); }
            },
            "setCh": {
              "value": function () { return this.set_ch.apply(this, arguments); }
            },
            "setChOff": {
              "value": function () { return this.set_ch_off.apply(this, arguments); }
            },
            "setSpan": {
              "value": function () { return this.set_span.apply(this, arguments); }
            },
            "setVAlign": {
              "value": function () { return this.set_v_align.apply(this, arguments); }
            },
            "setWidth": {
              "value": function () { return this.set_width.apply(this, arguments); }
            },
            "chOff": {
              "get": function () { return this.ch_off; },
              "set": function (value) { this.ch_off = value; }
            },
            "vAlign": {
              "get": function () { return this.v_align; },
              "set": function (value) { this.v_align = value; }
            }
          },
          "static": {}
        },
        "DOMHTMLTableElement": {
          "prototype": {
            "createCaption": {
              "value": function () { return this.create_caption.apply(this, arguments); }
            },
            "createTBody": {
              "value": function () { return this.create_t_body.apply(this, arguments); }
            },
            "createTFoot": {
              "value": function () { return this.create_t_foot.apply(this, arguments); }
            },
            "createTHead": {
              "value": function () { return this.create_t_head.apply(this, arguments); }
            },
            "deleteCaption": {
              "value": function () { return this.delete_caption.apply(this, arguments); }
            },
            "deleteRow": {
              "value": function () { return this.delete_row.apply(this, arguments); }
            },
            "deleteTFoot": {
              "value": function () { return this.delete_t_foot.apply(this, arguments); }
            },
            "deleteTHead": {
              "value": function () { return this.delete_t_head.apply(this, arguments); }
            },
            "getAlign": {
              "value": function () { return this.get_align.apply(this, arguments); }
            },
            "getBgColor": {
              "value": function () { return this.get_bg_color.apply(this, arguments); }
            },
            "getBorder": {
              "value": function () { return this.get_border.apply(this, arguments); }
            },
            "getCaption": {
              "value": function () { return this.get_caption.apply(this, arguments); }
            },
            "getCellPadding": {
              "value": function () { return this.get_cell_padding.apply(this, arguments); }
            },
            "getCellSpacing": {
              "value": function () { return this.get_cell_spacing.apply(this, arguments); }
            },
            "getFrame": {
              "value": function () { return this.get_frame.apply(this, arguments); }
            },
            "getRows": {
              "value": function () { return this.get_rows.apply(this, arguments); }
            },
            "getRules": {
              "value": function () { return this.get_rules.apply(this, arguments); }
            },
            "getSummary": {
              "value": function () { return this.get_summary.apply(this, arguments); }
            },
            "getTBodies": {
              "value": function () { return this.get_t_bodies.apply(this, arguments); }
            },
            "getTFoot": {
              "value": function () { return this.get_t_foot.apply(this, arguments); }
            },
            "getTHead": {
              "value": function () { return this.get_t_head.apply(this, arguments); }
            },
            "getWidth": {
              "value": function () { return this.get_width.apply(this, arguments); }
            },
            "insertRow": {
              "value": function () { return this.insert_row.apply(this, arguments); }
            },
            "setAlign": {
              "value": function () { return this.set_align.apply(this, arguments); }
            },
            "setBgColor": {
              "value": function () { return this.set_bg_color.apply(this, arguments); }
            },
            "setBorder": {
              "value": function () { return this.set_border.apply(this, arguments); }
            },
            "setCaption": {
              "value": function () { return this.set_caption.apply(this, arguments); }
            },
            "setCellPadding": {
              "value": function () { return this.set_cell_padding.apply(this, arguments); }
            },
            "setCellSpacing": {
              "value": function () { return this.set_cell_spacing.apply(this, arguments); }
            },
            "setFrame": {
              "value": function () { return this.set_frame.apply(this, arguments); }
            },
            "setRules": {
              "value": function () { return this.set_rules.apply(this, arguments); }
            },
            "setSummary": {
              "value": function () { return this.set_summary.apply(this, arguments); }
            },
            "setTFoot": {
              "value": function () { return this.set_t_foot.apply(this, arguments); }
            },
            "setTHead": {
              "value": function () { return this.set_t_head.apply(this, arguments); }
            },
            "setWidth": {
              "value": function () { return this.set_width.apply(this, arguments); }
            },
            "bgColor": {
              "get": function () { return this.bg_color; },
              "set": function (value) { this.bg_color = value; }
            },
            "cellPadding": {
              "get": function () { return this.cell_padding; },
              "set": function (value) { this.cell_padding = value; }
            },
            "cellSpacing": {
              "get": function () { return this.cell_spacing; },
              "set": function (value) { this.cell_spacing = value; }
            },
            "tBodies": {
              "get": function () { return this.t_bodies; },
              "set": function (value) { this.t_bodies = value; }
            },
            "tFoot": {
              "get": function () { return this.t_foot; },
              "set": function (value) { this.t_foot = value; }
            },
            "tHead": {
              "get": function () { return this.t_head; },
              "set": function (value) { this.t_head = value; }
            }
          },
          "static": {}
        },
        "DOMHTMLTableRowElement": {
          "prototype": {
            "deleteCell": {
              "value": function () { return this.delete_cell.apply(this, arguments); }
            },
            "getAlign": {
              "value": function () { return this.get_align.apply(this, arguments); }
            },
            "getBgColor": {
              "value": function () { return this.get_bg_color.apply(this, arguments); }
            },
            "getCells": {
              "value": function () { return this.get_cells.apply(this, arguments); }
            },
            "getCh": {
              "value": function () { return this.get_ch.apply(this, arguments); }
            },
            "getChOff": {
              "value": function () { return this.get_ch_off.apply(this, arguments); }
            },
            "getRowIndex": {
              "value": function () { return this.get_row_index.apply(this, arguments); }
            },
            "getSectionRowIndex": {
              "value": function () { return this.get_section_row_index.apply(this, arguments); }
            },
            "getVAlign": {
              "value": function () { return this.get_v_align.apply(this, arguments); }
            },
            "insertCell": {
              "value": function () { return this.insert_cell.apply(this, arguments); }
            },
            "setAlign": {
              "value": function () { return this.set_align.apply(this, arguments); }
            },
            "setBgColor": {
              "value": function () { return this.set_bg_color.apply(this, arguments); }
            },
            "setCh": {
              "value": function () { return this.set_ch.apply(this, arguments); }
            },
            "setChOff": {
              "value": function () { return this.set_ch_off.apply(this, arguments); }
            },
            "setVAlign": {
              "value": function () { return this.set_v_align.apply(this, arguments); }
            },
            "bgColor": {
              "get": function () { return this.bg_color; },
              "set": function (value) { this.bg_color = value; }
            },
            "chOff": {
              "get": function () { return this.ch_off; },
              "set": function (value) { this.ch_off = value; }
            },
            "rowIndex": {
              "get": function () { return this.row_index; },
              "set": function (value) { this.row_index = value; }
            },
            "sectionRowIndex": {
              "get": function () { return this.section_row_index; },
              "set": function (value) { this.section_row_index = value; }
            },
            "vAlign": {
              "get": function () { return this.v_align; },
              "set": function (value) { this.v_align = value; }
            }
          },
          "static": {}
        },
        "DOMHTMLTableSectionElement": {
          "prototype": {
            "deleteRow": {
              "value": function () { return this.delete_row.apply(this, arguments); }
            },
            "getAlign": {
              "value": function () { return this.get_align.apply(this, arguments); }
            },
            "getCh": {
              "value": function () { return this.get_ch.apply(this, arguments); }
            },
            "getChOff": {
              "value": function () { return this.get_ch_off.apply(this, arguments); }
            },
            "getRows": {
              "value": function () { return this.get_rows.apply(this, arguments); }
            },
            "getVAlign": {
              "value": function () { return this.get_v_align.apply(this, arguments); }
            },
            "insertRow": {
              "value": function () { return this.insert_row.apply(this, arguments); }
            },
            "setAlign": {
              "value": function () { return this.set_align.apply(this, arguments); }
            },
            "setCh": {
              "value": function () { return this.set_ch.apply(this, arguments); }
            },
            "setChOff": {
              "value": function () { return this.set_ch_off.apply(this, arguments); }
            },
            "setVAlign": {
              "value": function () { return this.set_v_align.apply(this, arguments); }
            },
            "chOff": {
              "get": function () { return this.ch_off; },
              "set": function (value) { this.ch_off = value; }
            },
            "vAlign": {
              "get": function () { return this.v_align; },
              "set": function (value) { this.v_align = value; }
            }
          },
          "static": {}
        },
        "DOMHTMLTextAreaElement": {
          "prototype": {
            "checkValidity": {
              "value": function () { return this.check_validity.apply(this, arguments); }
            },
            "getAutocapitalize": {
              "value": function () { return this.get_autocapitalize.apply(this, arguments); }
            },
            "getAutocorrect": {
              "value": function () { return this.get_autocorrect.apply(this, arguments); }
            },
            "getAutofocus": {
              "value": function () { return this.get_autofocus.apply(this, arguments); }
            },
            "getCols": {
              "value": function () { return this.get_cols.apply(this, arguments); }
            },
            "getDefaultValue": {
              "value": function () { return this.get_default_value.apply(this, arguments); }
            },
            "getDirName": {
              "value": function () { return this.get_dir_name.apply(this, arguments); }
            },
            "getDisabled": {
              "value": function () { return this.get_disabled.apply(this, arguments); }
            },
            "getForm": {
              "value": function () { return this.get_form.apply(this, arguments); }
            },
            "getLabels": {
              "value": function () { return this.get_labels.apply(this, arguments); }
            },
            "getMaxLength": {
              "value": function () { return this.get_max_length.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getPlaceholder": {
              "value": function () { return this.get_placeholder.apply(this, arguments); }
            },
            "getReadOnly": {
              "value": function () { return this.get_read_only.apply(this, arguments); }
            },
            "getRequired": {
              "value": function () { return this.get_required.apply(this, arguments); }
            },
            "getRows": {
              "value": function () { return this.get_rows.apply(this, arguments); }
            },
            "getSelectionDirection": {
              "value": function () { return this.get_selection_direction.apply(this, arguments); }
            },
            "getSelectionEnd": {
              "value": function () { return this.get_selection_end.apply(this, arguments); }
            },
            "getSelectionStart": {
              "value": function () { return this.get_selection_start.apply(this, arguments); }
            },
            "getTextLength": {
              "value": function () { return this.get_text_length.apply(this, arguments); }
            },
            "getValidationMessage": {
              "value": function () { return this.get_validation_message.apply(this, arguments); }
            },
            "getValidity": {
              "value": function () { return this.get_validity.apply(this, arguments); }
            },
            "getValue": {
              "value": function () { return this.get_value.apply(this, arguments); }
            },
            "getWillValidate": {
              "value": function () { return this.get_will_validate.apply(this, arguments); }
            },
            "getWrap": {
              "value": function () { return this.get_wrap.apply(this, arguments); }
            },
            "isEdited": {
              "value": function () { return this.is_edited.apply(this, arguments); }
            },
            "setAutocapitalize": {
              "value": function () { return this.set_autocapitalize.apply(this, arguments); }
            },
            "setAutocorrect": {
              "value": function () { return this.set_autocorrect.apply(this, arguments); }
            },
            "setAutofocus": {
              "value": function () { return this.set_autofocus.apply(this, arguments); }
            },
            "setCols": {
              "value": function () { return this.set_cols.apply(this, arguments); }
            },
            "setCustomValidity": {
              "value": function () { return this.set_custom_validity.apply(this, arguments); }
            },
            "setDefaultValue": {
              "value": function () { return this.set_default_value.apply(this, arguments); }
            },
            "setDirName": {
              "value": function () { return this.set_dir_name.apply(this, arguments); }
            },
            "setDisabled": {
              "value": function () { return this.set_disabled.apply(this, arguments); }
            },
            "setMaxLength": {
              "value": function () { return this.set_max_length.apply(this, arguments); }
            },
            "setName": {
              "value": function () { return this.set_name.apply(this, arguments); }
            },
            "setPlaceholder": {
              "value": function () { return this.set_placeholder.apply(this, arguments); }
            },
            "setRangeText": {
              "value": function () { return this.set_range_text.apply(this, arguments); }
            },
            "setReadOnly": {
              "value": function () { return this.set_read_only.apply(this, arguments); }
            },
            "setRequired": {
              "value": function () { return this.set_required.apply(this, arguments); }
            },
            "setRows": {
              "value": function () { return this.set_rows.apply(this, arguments); }
            },
            "setSelectionDirection": {
              "value": function () { return this.set_selection_direction.apply(this, arguments); }
            },
            "setSelectionEnd": {
              "value": function () { return this.set_selection_end.apply(this, arguments); }
            },
            "setSelectionRange": {
              "value": function () { return this.set_selection_range.apply(this, arguments); }
            },
            "setSelectionStart": {
              "value": function () { return this.set_selection_start.apply(this, arguments); }
            },
            "setValue": {
              "value": function () { return this.set_value.apply(this, arguments); }
            },
            "setWrap": {
              "value": function () { return this.set_wrap.apply(this, arguments); }
            },
            "defaultValue": {
              "get": function () { return this.default_value; },
              "set": function (value) { this.default_value = value; }
            },
            "dirName": {
              "get": function () { return this.dir_name; },
              "set": function (value) { this.dir_name = value; }
            },
            "maxLength": {
              "get": function () { return this.max_length; },
              "set": function (value) { this.max_length = value; }
            },
            "readOnly": {
              "get": function () { return this.read_only; },
              "set": function (value) { this.read_only = value; }
            },
            "selectionDirection": {
              "get": function () { return this.selection_direction; },
              "set": function (value) { this.selection_direction = value; }
            },
            "selectionEnd": {
              "get": function () { return this.selection_end; },
              "set": function (value) { this.selection_end = value; }
            },
            "selectionStart": {
              "get": function () { return this.selection_start; },
              "set": function (value) { this.selection_start = value; }
            },
            "textLength": {
              "get": function () { return this.text_length; },
              "set": function (value) { this.text_length = value; }
            },
            "validationMessage": {
              "get": function () { return this.validation_message; },
              "set": function (value) { this.validation_message = value; }
            },
            "willValidate": {
              "get": function () { return this.will_validate; },
              "set": function (value) { this.will_validate = value; }
            }
          },
          "static": {}
        },
        "DOMHTMLTitleElement": {
          "prototype": {
            "getText": {
              "value": function () { return this.get_text.apply(this, arguments); }
            },
            "setText": {
              "value": function () { return this.set_text.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DOMHTMLUListElement": {
          "prototype": {
            "getCompact": {
              "value": function () { return this.get_compact.apply(this, arguments); }
            },
            "setCompact": {
              "value": function () { return this.set_compact.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DOMHTMLVideoElement": {
          "prototype": {
            "getHeight": {
              "value": function () { return this.get_height.apply(this, arguments); }
            },
            "getPoster": {
              "value": function () { return this.get_poster.apply(this, arguments); }
            },
            "getVideoHeight": {
              "value": function () { return this.get_video_height.apply(this, arguments); }
            },
            "getVideoWidth": {
              "value": function () { return this.get_video_width.apply(this, arguments); }
            },
            "getWebkitDecodedFrameCount": {
              "value": function () { return this.get_webkit_decoded_frame_count.apply(this, arguments); }
            },
            "getWebkitDisplayingFullscreen": {
              "value": function () { return this.get_webkit_displaying_fullscreen.apply(this, arguments); }
            },
            "getWebkitDroppedFrameCount": {
              "value": function () { return this.get_webkit_dropped_frame_count.apply(this, arguments); }
            },
            "getWebkitSupportsFullscreen": {
              "value": function () { return this.get_webkit_supports_fullscreen.apply(this, arguments); }
            },
            "getWebkitWirelessVideoPlaybackDisabled": {
              "value": function () { return this.get_webkit_wireless_video_playback_disabled.apply(this, arguments); }
            },
            "getWidth": {
              "value": function () { return this.get_width.apply(this, arguments); }
            },
            "setHeight": {
              "value": function () { return this.set_height.apply(this, arguments); }
            },
            "setPoster": {
              "value": function () { return this.set_poster.apply(this, arguments); }
            },
            "setWebkitWirelessVideoPlaybackDisabled": {
              "value": function () { return this.set_webkit_wireless_video_playback_disabled.apply(this, arguments); }
            },
            "setWidth": {
              "value": function () { return this.set_width.apply(this, arguments); }
            },
            "webkitEnterFullScreen": {
              "value": function () { return this.webkit_enter_full_screen.apply(this, arguments); }
            },
            "webkitEnterFullscreen": {
              "value": function () { return this.webkit_enter_fullscreen.apply(this, arguments); }
            },
            "webkitExitFullScreen": {
              "value": function () { return this.webkit_exit_full_screen.apply(this, arguments); }
            },
            "webkitExitFullscreen": {
              "value": function () { return this.webkit_exit_fullscreen.apply(this, arguments); }
            },
            "videoHeight": {
              "get": function () { return this.video_height; },
              "set": function (value) { this.video_height = value; }
            },
            "videoWidth": {
              "get": function () { return this.video_width; },
              "set": function (value) { this.video_width = value; }
            },
            "webkitDecodedFrameCount": {
              "get": function () { return this.webkit_decoded_frame_count; },
              "set": function (value) { this.webkit_decoded_frame_count = value; }
            },
            "webkitDisplayingFullscreen": {
              "get": function () { return this.webkit_displaying_fullscreen; },
              "set": function (value) { this.webkit_displaying_fullscreen = value; }
            },
            "webkitDroppedFrameCount": {
              "get": function () { return this.webkit_dropped_frame_count; },
              "set": function (value) { this.webkit_dropped_frame_count = value; }
            },
            "webkitSupportsFullscreen": {
              "get": function () { return this.webkit_supports_fullscreen; },
              "set": function (value) { this.webkit_supports_fullscreen = value; }
            },
            "webkitWirelessVideoPlaybackDisabled": {
              "get": function () { return this.webkit_wireless_video_playback_disabled; },
              "set": function (value) { this.webkit_wireless_video_playback_disabled = value; }
            }
          },
          "static": {}
        },
        "DOMHistory": {
          "prototype": {
            "getLength": {
              "value": function () { return this.get_length.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DOMKeyboardEvent": {
          "prototype": {
            "getAltGraphKey": {
              "value": function () { return this.get_alt_graph_key.apply(this, arguments); }
            },
            "getAltKey": {
              "value": function () { return this.get_alt_key.apply(this, arguments); }
            },
            "getCtrlKey": {
              "value": function () { return this.get_ctrl_key.apply(this, arguments); }
            },
            "getKeyIdentifier": {
              "value": function () { return this.get_key_identifier.apply(this, arguments); }
            },
            "getKeyLocation": {
              "value": function () { return this.get_key_location.apply(this, arguments); }
            },
            "getMetaKey": {
              "value": function () { return this.get_meta_key.apply(this, arguments); }
            },
            "getModifierState": {
              "value": function () { return this.get_modifier_state.apply(this, arguments); }
            },
            "getShiftKey": {
              "value": function () { return this.get_shift_key.apply(this, arguments); }
            },
            "initKeyboardEvent": {
              "value": function () { return this.init_keyboard_event.apply(this, arguments); }
            },
            "altGraphKey": {
              "get": function () { return this.alt_graph_key; },
              "set": function (value) { this.alt_graph_key = value; }
            },
            "altKey": {
              "get": function () { return this.alt_key; },
              "set": function (value) { this.alt_key = value; }
            },
            "ctrlKey": {
              "get": function () { return this.ctrl_key; },
              "set": function (value) { this.ctrl_key = value; }
            },
            "keyIdentifier": {
              "get": function () { return this.key_identifier; },
              "set": function (value) { this.key_identifier = value; }
            },
            "keyLocation": {
              "get": function () { return this.key_location; },
              "set": function (value) { this.key_location = value; }
            },
            "metaKey": {
              "get": function () { return this.meta_key; },
              "set": function (value) { this.meta_key = value; }
            },
            "shiftKey": {
              "get": function () { return this.shift_key; },
              "set": function (value) { this.shift_key = value; }
            }
          },
          "static": {}
        },
        "DOMLocation": {
          "prototype": {
            "getAncestorOrigins": {
              "value": function () { return this.get_ancestor_origins.apply(this, arguments); }
            },
            "getHash": {
              "value": function () { return this.get_hash.apply(this, arguments); }
            },
            "getHost": {
              "value": function () { return this.get_host.apply(this, arguments); }
            },
            "getHostname": {
              "value": function () { return this.get_hostname.apply(this, arguments); }
            },
            "getHref": {
              "value": function () { return this.get_href.apply(this, arguments); }
            },
            "getOrigin": {
              "value": function () { return this.get_origin.apply(this, arguments); }
            },
            "getPathname": {
              "value": function () { return this.get_pathname.apply(this, arguments); }
            },
            "getPort": {
              "value": function () { return this.get_port.apply(this, arguments); }
            },
            "getProtocol": {
              "value": function () { return this.get_protocol.apply(this, arguments); }
            },
            "getSearch": {
              "value": function () { return this.get_search.apply(this, arguments); }
            },
            "ancestorOrigins": {
              "get": function () { return this.ancestor_origins; },
              "set": function (value) { this.ancestor_origins = value; }
            }
          },
          "static": {}
        },
        "DOMMediaController": {
          "prototype": {
            "getBuffered": {
              "value": function () { return this.get_buffered.apply(this, arguments); }
            },
            "getCurrentTime": {
              "value": function () { return this.get_current_time.apply(this, arguments); }
            },
            "getDefaultPlaybackRate": {
              "value": function () { return this.get_default_playback_rate.apply(this, arguments); }
            },
            "getDuration": {
              "value": function () { return this.get_duration.apply(this, arguments); }
            },
            "getMuted": {
              "value": function () { return this.get_muted.apply(this, arguments); }
            },
            "getPaused": {
              "value": function () { return this.get_paused.apply(this, arguments); }
            },
            "getPlaybackRate": {
              "value": function () { return this.get_playback_rate.apply(this, arguments); }
            },
            "getPlaybackState": {
              "value": function () { return this.get_playback_state.apply(this, arguments); }
            },
            "getPlayed": {
              "value": function () { return this.get_played.apply(this, arguments); }
            },
            "getSeekable": {
              "value": function () { return this.get_seekable.apply(this, arguments); }
            },
            "getVolume": {
              "value": function () { return this.get_volume.apply(this, arguments); }
            },
            "setCurrentTime": {
              "value": function () { return this.set_current_time.apply(this, arguments); }
            },
            "setDefaultPlaybackRate": {
              "value": function () { return this.set_default_playback_rate.apply(this, arguments); }
            },
            "setMuted": {
              "value": function () { return this.set_muted.apply(this, arguments); }
            },
            "setPlaybackRate": {
              "value": function () { return this.set_playback_rate.apply(this, arguments); }
            },
            "setVolume": {
              "value": function () { return this.set_volume.apply(this, arguments); }
            },
            "currentTime": {
              "get": function () { return this.current_time; },
              "set": function (value) { this.current_time = value; }
            },
            "defaultPlaybackRate": {
              "get": function () { return this.default_playback_rate; },
              "set": function (value) { this.default_playback_rate = value; }
            },
            "playbackRate": {
              "get": function () { return this.playback_rate; },
              "set": function (value) { this.playback_rate = value; }
            },
            "playbackState": {
              "get": function () { return this.playback_state; },
              "set": function (value) { this.playback_state = value; }
            }
          },
          "static": {}
        },
        "DOMMediaError": {
          "prototype": {
            "getCode": {
              "value": function () { return this.get_code.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DOMMediaList": {
          "prototype": {
            "appendMedium": {
              "value": function () { return this.append_medium.apply(this, arguments); }
            },
            "deleteMedium": {
              "value": function () { return this.delete_medium.apply(this, arguments); }
            },
            "getLength": {
              "value": function () { return this.get_length.apply(this, arguments); }
            },
            "getMediaText": {
              "value": function () { return this.get_media_text.apply(this, arguments); }
            },
            "setMediaText": {
              "value": function () { return this.set_media_text.apply(this, arguments); }
            },
            "mediaText": {
              "get": function () { return this.media_text; },
              "set": function (value) { this.media_text = value; }
            }
          },
          "static": {}
        },
        "DOMMediaQueryList": {
          "prototype": {
            "getMatches": {
              "value": function () { return this.get_matches.apply(this, arguments); }
            },
            "getMedia": {
              "value": function () { return this.get_media.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DOMMemoryInfo": {
          "prototype": {
            "jsHeapSizeLimit": {
              "get": function () { return this.js_heap_size_limit; },
              "set": function (value) { this.js_heap_size_limit = value; }
            },
            "totalJsHeapSize": {
              "get": function () { return this.total_js_heap_size; },
              "set": function (value) { this.total_js_heap_size = value; }
            },
            "usedJsHeapSize": {
              "get": function () { return this.used_js_heap_size; },
              "set": function (value) { this.used_js_heap_size = value; }
            }
          },
          "static": {
            "getJsHeapSizeLimit": {
              "value": function () { return this.get_js_heap_size_limit.apply(this, arguments); }
            },
            "getTotalJsHeapSize": {
              "value": function () { return this.get_total_js_heap_size.apply(this, arguments); }
            },
            "getUsedJsHeapSize": {
              "value": function () { return this.get_used_js_heap_size.apply(this, arguments); }
            }
          }
        },
        "DOMMessagePort": {
          "prototype": {},
          "static": {}
        },
        "DOMMicroDataItemValue": {
          "prototype": {},
          "static": {}
        },
        "DOMMouseEvent": {
          "prototype": {
            "getAltKey": {
              "value": function () { return this.get_alt_key.apply(this, arguments); }
            },
            "getButton": {
              "value": function () { return this.get_button.apply(this, arguments); }
            },
            "getClientX": {
              "value": function () { return this.get_client_x.apply(this, arguments); }
            },
            "getClientY": {
              "value": function () { return this.get_client_y.apply(this, arguments); }
            },
            "getCtrlKey": {
              "value": function () { return this.get_ctrl_key.apply(this, arguments); }
            },
            "getFromElement": {
              "value": function () { return this.get_from_element.apply(this, arguments); }
            },
            "getMetaKey": {
              "value": function () { return this.get_meta_key.apply(this, arguments); }
            },
            "getOffsetX": {
              "value": function () { return this.get_offset_x.apply(this, arguments); }
            },
            "getOffsetY": {
              "value": function () { return this.get_offset_y.apply(this, arguments); }
            },
            "getRelatedTarget": {
              "value": function () { return this.get_related_target.apply(this, arguments); }
            },
            "getScreenX": {
              "value": function () { return this.get_screen_x.apply(this, arguments); }
            },
            "getScreenY": {
              "value": function () { return this.get_screen_y.apply(this, arguments); }
            },
            "getShiftKey": {
              "value": function () { return this.get_shift_key.apply(this, arguments); }
            },
            "getToElement": {
              "value": function () { return this.get_to_element.apply(this, arguments); }
            },
            "getWebkitMovementX": {
              "value": function () { return this.get_webkit_movement_x.apply(this, arguments); }
            },
            "getWebkitMovementY": {
              "value": function () { return this.get_webkit_movement_y.apply(this, arguments); }
            },
            "getX": {
              "value": function () { return this.get_x.apply(this, arguments); }
            },
            "getY": {
              "value": function () { return this.get_y.apply(this, arguments); }
            },
            "initMouseEvent": {
              "value": function () { return this.init_mouse_event.apply(this, arguments); }
            },
            "altKey": {
              "get": function () { return this.alt_key; },
              "set": function (value) { this.alt_key = value; }
            },
            "clientX": {
              "get": function () { return this.client_x; },
              "set": function (value) { this.client_x = value; }
            },
            "clientY": {
              "get": function () { return this.client_y; },
              "set": function (value) { this.client_y = value; }
            },
            "ctrlKey": {
              "get": function () { return this.ctrl_key; },
              "set": function (value) { this.ctrl_key = value; }
            },
            "fromElement": {
              "get": function () { return this.from_element; },
              "set": function (value) { this.from_element = value; }
            },
            "metaKey": {
              "get": function () { return this.meta_key; },
              "set": function (value) { this.meta_key = value; }
            },
            "offsetX": {
              "get": function () { return this.offset_x; },
              "set": function (value) { this.offset_x = value; }
            },
            "offsetY": {
              "get": function () { return this.offset_y; },
              "set": function (value) { this.offset_y = value; }
            },
            "relatedTarget": {
              "get": function () { return this.related_target; },
              "set": function (value) { this.related_target = value; }
            },
            "screenX": {
              "get": function () { return this.screen_x; },
              "set": function (value) { this.screen_x = value; }
            },
            "screenY": {
              "get": function () { return this.screen_y; },
              "set": function (value) { this.screen_y = value; }
            },
            "shiftKey": {
              "get": function () { return this.shift_key; },
              "set": function (value) { this.shift_key = value; }
            },
            "toElement": {
              "get": function () { return this.to_element; },
              "set": function (value) { this.to_element = value; }
            },
            "webkitMovementX": {
              "get": function () { return this.webkit_movement_x; },
              "set": function (value) { this.webkit_movement_x = value; }
            },
            "webkitMovementY": {
              "get": function () { return this.webkit_movement_y; },
              "set": function (value) { this.webkit_movement_y = value; }
            }
          },
          "static": {}
        },
        "DOMNamedNodeMap": {
          "prototype": {
            "getLength": {
              "value": function () { return this.get_length.apply(this, arguments); }
            },
            "getNamedItem": {
              "value": function () { return this.get_named_item.apply(this, arguments); }
            },
            "getNamedItemNs": {
              "value": function () { return this.get_named_item_ns.apply(this, arguments); }
            },
            "removeNamedItem": {
              "value": function () { return this.remove_named_item.apply(this, arguments); }
            },
            "removeNamedItemNs": {
              "value": function () { return this.remove_named_item_ns.apply(this, arguments); }
            },
            "setNamedItem": {
              "value": function () { return this.set_named_item.apply(this, arguments); }
            },
            "setNamedItemNs": {
              "value": function () { return this.set_named_item_ns.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DOMNavigator": {
          "prototype": {
            "getAppCodeName": {
              "value": function () { return this.get_app_code_name.apply(this, arguments); }
            },
            "getAppName": {
              "value": function () { return this.get_app_name.apply(this, arguments); }
            },
            "getAppVersion": {
              "value": function () { return this.get_app_version.apply(this, arguments); }
            },
            "getCookieEnabled": {
              "value": function () { return this.get_cookie_enabled.apply(this, arguments); }
            },
            "getGeolocation": {
              "value": function () { return this.get_geolocation.apply(this, arguments); }
            },
            "getLanguage": {
              "value": function () { return this.get_language.apply(this, arguments); }
            },
            "getMimeTypes": {
              "value": function () { return this.get_mime_types.apply(this, arguments); }
            },
            "getOnLine": {
              "value": function () { return this.get_on_line.apply(this, arguments); }
            },
            "getPlatform": {
              "value": function () { return this.get_platform.apply(this, arguments); }
            },
            "getPlugins": {
              "value": function () { return this.get_plugins.apply(this, arguments); }
            },
            "getProduct": {
              "value": function () { return this.get_product.apply(this, arguments); }
            },
            "getProductSub": {
              "value": function () { return this.get_product_sub.apply(this, arguments); }
            },
            "getStorageUpdates": {
              "value": function () { return this.get_storage_updates.apply(this, arguments); }
            },
            "getUserAgent": {
              "value": function () { return this.get_user_agent.apply(this, arguments); }
            },
            "getVendor": {
              "value": function () { return this.get_vendor.apply(this, arguments); }
            },
            "getVendorSub": {
              "value": function () { return this.get_vendor_sub.apply(this, arguments); }
            },
            "getWebkitBattery": {
              "value": function () { return this.get_webkit_battery.apply(this, arguments); }
            },
            "getWebkitPersistentStorage": {
              "value": function () { return this.get_webkit_persistent_storage.apply(this, arguments); }
            },
            "getWebkitTemporaryStorage": {
              "value": function () { return this.get_webkit_temporary_storage.apply(this, arguments); }
            },
            "isProtocolHandlerRegistered": {
              "value": function () { return this.is_protocol_handler_registered.apply(this, arguments); }
            },
            "javaEnabled": {
              "value": function () { return this.java_enabled.apply(this, arguments); }
            },
            "registerProtocolHandler": {
              "value": function () { return this.register_protocol_handler.apply(this, arguments); }
            },
            "unregisterProtocolHandler": {
              "value": function () { return this.unregister_protocol_handler.apply(this, arguments); }
            },
            "webkitGetGamepads": {
              "value": function () { return this.webkit_get_gamepads.apply(this, arguments); }
            },
            "appCodeName": {
              "get": function () { return this.app_code_name; },
              "set": function (value) { this.app_code_name = value; }
            },
            "appName": {
              "get": function () { return this.app_name; },
              "set": function (value) { this.app_name = value; }
            },
            "appVersion": {
              "get": function () { return this.app_version; },
              "set": function (value) { this.app_version = value; }
            },
            "cookieEnabled": {
              "get": function () { return this.cookie_enabled; },
              "set": function (value) { this.cookie_enabled = value; }
            },
            "mimeTypes": {
              "get": function () { return this.mime_types; },
              "set": function (value) { this.mime_types = value; }
            },
            "onLine": {
              "get": function () { return this.on_line; },
              "set": function (value) { this.on_line = value; }
            },
            "productSub": {
              "get": function () { return this.product_sub; },
              "set": function (value) { this.product_sub = value; }
            },
            "userAgent": {
              "get": function () { return this.user_agent; },
              "set": function (value) { this.user_agent = value; }
            },
            "vendorSub": {
              "get": function () { return this.vendor_sub; },
              "set": function (value) { this.vendor_sub = value; }
            },
            "webkitBattery": {
              "get": function () { return this.webkit_battery; },
              "set": function (value) { this.webkit_battery = value; }
            },
            "webkitPersistentStorage": {
              "get": function () { return this.webkit_persistent_storage; },
              "set": function (value) { this.webkit_persistent_storage = value; }
            },
            "webkitTemporaryStorage": {
              "get": function () { return this.webkit_temporary_storage; },
              "set": function (value) { this.webkit_temporary_storage = value; }
            }
          },
          "static": {}
        },
        "DOMNode": {
          "prototype": {
            "appendChild": {
              "value": function () { return this.append_child.apply(this, arguments); }
            },
            "cloneNode": {
              "value": function () { return this.clone_node.apply(this, arguments); }
            },
            "compareDocumentPosition": {
              "value": function () { return this.compare_document_position.apply(this, arguments); }
            },
            "dispatchEvent": {
              "value": function () { return this.dispatch_event.apply(this, arguments); }
            },
            "getAttributes": {
              "value": function () { return this.get_attributes.apply(this, arguments); }
            },
            "getBaseUri": {
              "value": function () { return this.get_base_uri.apply(this, arguments); }
            },
            "getChildNodes": {
              "value": function () { return this.get_child_nodes.apply(this, arguments); }
            },
            "getFirstChild": {
              "value": function () { return this.get_first_child.apply(this, arguments); }
            },
            "getLastChild": {
              "value": function () { return this.get_last_child.apply(this, arguments); }
            },
            "getLocalName": {
              "value": function () { return this.get_local_name.apply(this, arguments); }
            },
            "getNamespaceUri": {
              "value": function () { return this.get_namespace_uri.apply(this, arguments); }
            },
            "getNextSibling": {
              "value": function () { return this.get_next_sibling.apply(this, arguments); }
            },
            "getNodeName": {
              "value": function () { return this.get_node_name.apply(this, arguments); }
            },
            "getNodeType": {
              "value": function () { return this.get_node_type.apply(this, arguments); }
            },
            "getNodeValue": {
              "value": function () { return this.get_node_value.apply(this, arguments); }
            },
            "getOwnerDocument": {
              "value": function () { return this.get_owner_document.apply(this, arguments); }
            },
            "getParentElement": {
              "value": function () { return this.get_parent_element.apply(this, arguments); }
            },
            "getParentNode": {
              "value": function () { return this.get_parent_node.apply(this, arguments); }
            },
            "getPrefix": {
              "value": function () { return this.get_prefix.apply(this, arguments); }
            },
            "getPreviousSibling": {
              "value": function () { return this.get_previous_sibling.apply(this, arguments); }
            },
            "getTextContent": {
              "value": function () { return this.get_text_content.apply(this, arguments); }
            },
            "hasAttributes": {
              "value": function () { return this.has_attributes.apply(this, arguments); }
            },
            "hasChildNodes": {
              "value": function () { return this.has_child_nodes.apply(this, arguments); }
            },
            "insertBefore": {
              "value": function () { return this.insert_before.apply(this, arguments); }
            },
            "isDefaultNamespace": {
              "value": function () { return this.is_default_namespace.apply(this, arguments); }
            },
            "isEqualNode": {
              "value": function () { return this.is_equal_node.apply(this, arguments); }
            },
            "isSameNode": {
              "value": function () { return this.is_same_node.apply(this, arguments); }
            },
            "isSupported": {
              "value": function () { return this.is_supported.apply(this, arguments); }
            },
            "lookupNamespaceUri": {
              "value": function () { return this.lookup_namespace_uri.apply(this, arguments); }
            },
            "lookupPrefix": {
              "value": function () { return this.lookup_prefix.apply(this, arguments); }
            },
            "removeChild": {
              "value": function () { return this.remove_child.apply(this, arguments); }
            },
            "replaceChild": {
              "value": function () { return this.replace_child.apply(this, arguments); }
            },
            "setNodeValue": {
              "value": function () { return this.set_node_value.apply(this, arguments); }
            },
            "setPrefix": {
              "value": function () { return this.set_prefix.apply(this, arguments); }
            },
            "setTextContent": {
              "value": function () { return this.set_text_content.apply(this, arguments); }
            },
            "baseUri": {
              "get": function () { return this.base_uri; },
              "set": function (value) { this.base_uri = value; }
            },
            "childNodes": {
              "get": function () { return this.child_nodes; },
              "set": function (value) { this.child_nodes = value; }
            },
            "firstChild": {
              "get": function () { return this.first_child; },
              "set": function (value) { this.first_child = value; }
            },
            "lastChild": {
              "get": function () { return this.last_child; },
              "set": function (value) { this.last_child = value; }
            },
            "localName": {
              "get": function () { return this.local_name; },
              "set": function (value) { this.local_name = value; }
            },
            "namespaceUri": {
              "get": function () { return this.namespace_uri; },
              "set": function (value) { this.namespace_uri = value; }
            },
            "nextSibling": {
              "get": function () { return this.next_sibling; },
              "set": function (value) { this.next_sibling = value; }
            },
            "nodeName": {
              "get": function () { return this.node_name; },
              "set": function (value) { this.node_name = value; }
            },
            "nodeType": {
              "get": function () { return this.node_type; },
              "set": function (value) { this.node_type = value; }
            },
            "nodeValue": {
              "get": function () { return this.node_value; },
              "set": function (value) { this.node_value = value; }
            },
            "ownerDocument": {
              "get": function () { return this.owner_document; },
              "set": function (value) { this.owner_document = value; }
            },
            "parentElement": {
              "get": function () { return this.parent_element; },
              "set": function (value) { this.parent_element = value; }
            },
            "parentNode": {
              "get": function () { return this.parent_node; },
              "set": function (value) { this.parent_node = value; }
            },
            "previousSibling": {
              "get": function () { return this.previous_sibling; },
              "set": function (value) { this.previous_sibling = value; }
            },
            "textContent": {
              "get": function () { return this.text_content; },
              "set": function (value) { this.text_content = value; }
            }
          },
          "static": {}
        },
        "DOMNodeFilter": {
          "prototype": {
            "acceptNode": {
              "value": function () { return this.accept_node.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DOMNodeIterator": {
          "prototype": {
            "getExpandEntityReferences": {
              "value": function () { return this.get_expand_entity_references.apply(this, arguments); }
            },
            "getFilter": {
              "value": function () { return this.get_filter.apply(this, arguments); }
            },
            "getPointerBeforeReferenceNode": {
              "value": function () { return this.get_pointer_before_reference_node.apply(this, arguments); }
            },
            "getReferenceNode": {
              "value": function () { return this.get_reference_node.apply(this, arguments); }
            },
            "getRoot": {
              "value": function () { return this.get_root.apply(this, arguments); }
            },
            "getWhatToShow": {
              "value": function () { return this.get_what_to_show.apply(this, arguments); }
            },
            "nextNode": {
              "value": function () { return this.next_node.apply(this, arguments); }
            },
            "previousNode": {
              "value": function () { return this.previous_node.apply(this, arguments); }
            },
            "expandEntityReferences": {
              "get": function () { return this.expand_entity_references; },
              "set": function (value) { this.expand_entity_references = value; }
            },
            "pointerBeforeReferenceNode": {
              "get": function () { return this.pointer_before_reference_node; },
              "set": function (value) { this.pointer_before_reference_node = value; }
            },
            "referenceNode": {
              "get": function () { return this.reference_node; },
              "set": function (value) { this.reference_node = value; }
            },
            "whatToShow": {
              "get": function () { return this.what_to_show; },
              "set": function (value) { this.what_to_show = value; }
            }
          },
          "static": {}
        },
        "DOMNodeList": {
          "prototype": {
            "getLength": {
              "value": function () { return this.get_length.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DOMObject": {
          "prototype": {
            "coreObject": {
              "get": function () { return this.core_object; },
              "set": function (value) { this.core_object = value; }
            }
          },
          "static": {}
        },
        "DOMPerformance": {
          "prototype": {
            "getMemory": {
              "value": function () { return this.get_memory.apply(this, arguments); }
            },
            "getNavigation": {
              "value": function () { return this.get_navigation.apply(this, arguments); }
            },
            "getTiming": {
              "value": function () { return this.get_timing.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DOMPerformanceEntry": {
          "prototype": {
            "getDuration": {
              "value": function () { return this.get_duration.apply(this, arguments); }
            },
            "getEntryType": {
              "value": function () { return this.get_entry_type.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getStartTime": {
              "value": function () { return this.get_start_time.apply(this, arguments); }
            },
            "entryType": {
              "get": function () { return this.entry_type; },
              "set": function (value) { this.entry_type = value; }
            },
            "startTime": {
              "get": function () { return this.start_time; },
              "set": function (value) { this.start_time = value; }
            }
          },
          "static": {}
        },
        "DOMPerformanceEntryList": {
          "prototype": {
            "getLength": {
              "value": function () { return this.get_length.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DOMPerformanceNavigation": {
          "prototype": {
            "getRedirectCount": {
              "value": function () { return this.get_redirect_count.apply(this, arguments); }
            },
            "redirectCount": {
              "get": function () { return this.redirect_count; },
              "set": function (value) { this.redirect_count = value; }
            }
          },
          "static": {}
        },
        "DOMPerformanceTiming": {
          "prototype": {
            "getConnectEnd": {
              "value": function () { return this.get_connect_end.apply(this, arguments); }
            },
            "getConnectStart": {
              "value": function () { return this.get_connect_start.apply(this, arguments); }
            },
            "getDomComplete": {
              "value": function () { return this.get_dom_complete.apply(this, arguments); }
            },
            "getDomContentLoadedEventEnd": {
              "value": function () { return this.get_dom_content_loaded_event_end.apply(this, arguments); }
            },
            "getDomContentLoadedEventStart": {
              "value": function () { return this.get_dom_content_loaded_event_start.apply(this, arguments); }
            },
            "getDomInteractive": {
              "value": function () { return this.get_dom_interactive.apply(this, arguments); }
            },
            "getDomLoading": {
              "value": function () { return this.get_dom_loading.apply(this, arguments); }
            },
            "getDomainLookupEnd": {
              "value": function () { return this.get_domain_lookup_end.apply(this, arguments); }
            },
            "getDomainLookupStart": {
              "value": function () { return this.get_domain_lookup_start.apply(this, arguments); }
            },
            "getFetchStart": {
              "value": function () { return this.get_fetch_start.apply(this, arguments); }
            },
            "getLoadEventEnd": {
              "value": function () { return this.get_load_event_end.apply(this, arguments); }
            },
            "getLoadEventStart": {
              "value": function () { return this.get_load_event_start.apply(this, arguments); }
            },
            "getNavigationStart": {
              "value": function () { return this.get_navigation_start.apply(this, arguments); }
            },
            "getRedirectEnd": {
              "value": function () { return this.get_redirect_end.apply(this, arguments); }
            },
            "getRedirectStart": {
              "value": function () { return this.get_redirect_start.apply(this, arguments); }
            },
            "getRequestStart": {
              "value": function () { return this.get_request_start.apply(this, arguments); }
            },
            "getResponseEnd": {
              "value": function () { return this.get_response_end.apply(this, arguments); }
            },
            "getResponseStart": {
              "value": function () { return this.get_response_start.apply(this, arguments); }
            },
            "getSecureConnectionStart": {
              "value": function () { return this.get_secure_connection_start.apply(this, arguments); }
            },
            "getUnloadEventEnd": {
              "value": function () { return this.get_unload_event_end.apply(this, arguments); }
            },
            "getUnloadEventStart": {
              "value": function () { return this.get_unload_event_start.apply(this, arguments); }
            },
            "connectEnd": {
              "get": function () { return this.connect_end; },
              "set": function (value) { this.connect_end = value; }
            },
            "connectStart": {
              "get": function () { return this.connect_start; },
              "set": function (value) { this.connect_start = value; }
            },
            "domComplete": {
              "get": function () { return this.dom_complete; },
              "set": function (value) { this.dom_complete = value; }
            },
            "domContentLoadedEventEnd": {
              "get": function () { return this.dom_content_loaded_event_end; },
              "set": function (value) { this.dom_content_loaded_event_end = value; }
            },
            "domContentLoadedEventStart": {
              "get": function () { return this.dom_content_loaded_event_start; },
              "set": function (value) { this.dom_content_loaded_event_start = value; }
            },
            "domInteractive": {
              "get": function () { return this.dom_interactive; },
              "set": function (value) { this.dom_interactive = value; }
            },
            "domLoading": {
              "get": function () { return this.dom_loading; },
              "set": function (value) { this.dom_loading = value; }
            },
            "domainLookupEnd": {
              "get": function () { return this.domain_lookup_end; },
              "set": function (value) { this.domain_lookup_end = value; }
            },
            "domainLookupStart": {
              "get": function () { return this.domain_lookup_start; },
              "set": function (value) { this.domain_lookup_start = value; }
            },
            "fetchStart": {
              "get": function () { return this.fetch_start; },
              "set": function (value) { this.fetch_start = value; }
            },
            "loadEventEnd": {
              "get": function () { return this.load_event_end; },
              "set": function (value) { this.load_event_end = value; }
            },
            "loadEventStart": {
              "get": function () { return this.load_event_start; },
              "set": function (value) { this.load_event_start = value; }
            },
            "navigationStart": {
              "get": function () { return this.navigation_start; },
              "set": function (value) { this.navigation_start = value; }
            },
            "redirectEnd": {
              "get": function () { return this.redirect_end; },
              "set": function (value) { this.redirect_end = value; }
            },
            "redirectStart": {
              "get": function () { return this.redirect_start; },
              "set": function (value) { this.redirect_start = value; }
            },
            "requestStart": {
              "get": function () { return this.request_start; },
              "set": function (value) { this.request_start = value; }
            },
            "responseEnd": {
              "get": function () { return this.response_end; },
              "set": function (value) { this.response_end = value; }
            },
            "responseStart": {
              "get": function () { return this.response_start; },
              "set": function (value) { this.response_start = value; }
            },
            "secureConnectionStart": {
              "get": function () { return this.secure_connection_start; },
              "set": function (value) { this.secure_connection_start = value; }
            },
            "unloadEventEnd": {
              "get": function () { return this.unload_event_end; },
              "set": function (value) { this.unload_event_end = value; }
            },
            "unloadEventStart": {
              "get": function () { return this.unload_event_start; },
              "set": function (value) { this.unload_event_start = value; }
            }
          },
          "static": {}
        },
        "DOMProcessingInstruction": {
          "prototype": {
            "getData": {
              "value": function () { return this.get_data.apply(this, arguments); }
            },
            "getSheet": {
              "value": function () { return this.get_sheet.apply(this, arguments); }
            },
            "getTarget": {
              "value": function () { return this.get_target.apply(this, arguments); }
            },
            "setData": {
              "value": function () { return this.set_data.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DOMPropertyNodeList": {
          "prototype": {},
          "static": {
            "getLength": {
              "value": function () { return this.get_length.apply(this, arguments); }
            }
          }
        },
        "DOMRange": {
          "prototype": {
            "cloneContents": {
              "value": function () { return this.clone_contents.apply(this, arguments); }
            },
            "cloneRange": {
              "value": function () { return this.clone_range.apply(this, arguments); }
            },
            "compareBoundaryPoints": {
              "value": function () { return this.compare_boundary_points.apply(this, arguments); }
            },
            "compareNode": {
              "value": function () { return this.compare_node.apply(this, arguments); }
            },
            "comparePoint": {
              "value": function () { return this.compare_point.apply(this, arguments); }
            },
            "createContextualFragment": {
              "value": function () { return this.create_contextual_fragment.apply(this, arguments); }
            },
            "deleteContents": {
              "value": function () { return this.delete_contents.apply(this, arguments); }
            },
            "extractContents": {
              "value": function () { return this.extract_contents.apply(this, arguments); }
            },
            "getCollapsed": {
              "value": function () { return this.get_collapsed.apply(this, arguments); }
            },
            "getCommonAncestorContainer": {
              "value": function () { return this.get_common_ancestor_container.apply(this, arguments); }
            },
            "getEndContainer": {
              "value": function () { return this.get_end_container.apply(this, arguments); }
            },
            "getEndOffset": {
              "value": function () { return this.get_end_offset.apply(this, arguments); }
            },
            "getStartContainer": {
              "value": function () { return this.get_start_container.apply(this, arguments); }
            },
            "getStartOffset": {
              "value": function () { return this.get_start_offset.apply(this, arguments); }
            },
            "getText": {
              "value": function () { return this.get_text.apply(this, arguments); }
            },
            "insertNode": {
              "value": function () { return this.insert_node.apply(this, arguments); }
            },
            "intersectsNode": {
              "value": function () { return this.intersects_node.apply(this, arguments); }
            },
            "isPointInRange": {
              "value": function () { return this.is_point_in_range.apply(this, arguments); }
            },
            "selectNode": {
              "value": function () { return this.select_node.apply(this, arguments); }
            },
            "selectNodeContents": {
              "value": function () { return this.select_node_contents.apply(this, arguments); }
            },
            "setEnd": {
              "value": function () { return this.set_end.apply(this, arguments); }
            },
            "setEndAfter": {
              "value": function () { return this.set_end_after.apply(this, arguments); }
            },
            "setEndBefore": {
              "value": function () { return this.set_end_before.apply(this, arguments); }
            },
            "setStart": {
              "value": function () { return this.set_start.apply(this, arguments); }
            },
            "setStartAfter": {
              "value": function () { return this.set_start_after.apply(this, arguments); }
            },
            "setStartBefore": {
              "value": function () { return this.set_start_before.apply(this, arguments); }
            },
            "surroundContents": {
              "value": function () { return this.surround_contents.apply(this, arguments); }
            },
            "toString": {
              "value": function () { return this.to_string.apply(this, arguments); }
            },
            "commonAncestorContainer": {
              "get": function () { return this.common_ancestor_container; },
              "set": function (value) { this.common_ancestor_container = value; }
            },
            "endContainer": {
              "get": function () { return this.end_container; },
              "set": function (value) { this.end_container = value; }
            },
            "endOffset": {
              "get": function () { return this.end_offset; },
              "set": function (value) { this.end_offset = value; }
            },
            "startContainer": {
              "get": function () { return this.start_container; },
              "set": function (value) { this.start_container = value; }
            },
            "startOffset": {
              "get": function () { return this.start_offset; },
              "set": function (value) { this.start_offset = value; }
            }
          },
          "static": {}
        },
        "DOMScreen": {
          "prototype": {
            "getAvailHeight": {
              "value": function () { return this.get_avail_height.apply(this, arguments); }
            },
            "getAvailLeft": {
              "value": function () { return this.get_avail_left.apply(this, arguments); }
            },
            "getAvailTop": {
              "value": function () { return this.get_avail_top.apply(this, arguments); }
            },
            "getAvailWidth": {
              "value": function () { return this.get_avail_width.apply(this, arguments); }
            },
            "getColorDepth": {
              "value": function () { return this.get_color_depth.apply(this, arguments); }
            },
            "getHeight": {
              "value": function () { return this.get_height.apply(this, arguments); }
            },
            "getPixelDepth": {
              "value": function () { return this.get_pixel_depth.apply(this, arguments); }
            },
            "getWidth": {
              "value": function () { return this.get_width.apply(this, arguments); }
            },
            "availHeight": {
              "get": function () { return this.avail_height; },
              "set": function (value) { this.avail_height = value; }
            },
            "availLeft": {
              "get": function () { return this.avail_left; },
              "set": function (value) { this.avail_left = value; }
            },
            "availTop": {
              "get": function () { return this.avail_top; },
              "set": function (value) { this.avail_top = value; }
            },
            "availWidth": {
              "get": function () { return this.avail_width; },
              "set": function (value) { this.avail_width = value; }
            },
            "colorDepth": {
              "get": function () { return this.color_depth; },
              "set": function (value) { this.color_depth = value; }
            },
            "pixelDepth": {
              "get": function () { return this.pixel_depth; },
              "set": function (value) { this.pixel_depth = value; }
            }
          },
          "static": {}
        },
        "DOMShadowRoot": {
          "prototype": {
            "elementFromPoint": {
              "value": function () { return this.element_from_point.apply(this, arguments); }
            },
            "getActiveElement": {
              "value": function () { return this.get_active_element.apply(this, arguments); }
            },
            "getApplyAuthorStyles": {
              "value": function () { return this.get_apply_author_styles.apply(this, arguments); }
            },
            "getElementById": {
              "value": function () { return this.get_element_by_id.apply(this, arguments); }
            },
            "getElementsByClassName": {
              "value": function () { return this.get_elements_by_class_name.apply(this, arguments); }
            },
            "getElementsByTagName": {
              "value": function () { return this.get_elements_by_tag_name.apply(this, arguments); }
            },
            "getElementsByTagNameNs": {
              "value": function () { return this.get_elements_by_tag_name_ns.apply(this, arguments); }
            },
            "getInnerHtml": {
              "value": function () { return this.get_inner_html.apply(this, arguments); }
            },
            "getResetStyleInheritance": {
              "value": function () { return this.get_reset_style_inheritance.apply(this, arguments); }
            },
            "getSelection": {
              "value": function () { return this.get_selection.apply(this, arguments); }
            },
            "setApplyAuthorStyles": {
              "value": function () { return this.set_apply_author_styles.apply(this, arguments); }
            },
            "setInnerHtml": {
              "value": function () { return this.set_inner_html.apply(this, arguments); }
            },
            "setResetStyleInheritance": {
              "value": function () { return this.set_reset_style_inheritance.apply(this, arguments); }
            },
            "activeElement": {
              "get": function () { return this.active_element; },
              "set": function (value) { this.active_element = value; }
            },
            "applyAuthorStyles": {
              "get": function () { return this.apply_author_styles; },
              "set": function (value) { this.apply_author_styles = value; }
            },
            "innerHtml": {
              "get": function () { return this.inner_html; },
              "set": function (value) { this.inner_html = value; }
            },
            "resetStyleInheritance": {
              "get": function () { return this.reset_style_inheritance; },
              "set": function (value) { this.reset_style_inheritance = value; }
            }
          },
          "static": {}
        },
        "DOMStorage": {
          "prototype": {
            "getItem": {
              "value": function () { return this.get_item.apply(this, arguments); }
            },
            "getLength": {
              "value": function () { return this.get_length.apply(this, arguments); }
            },
            "removeItem": {
              "value": function () { return this.remove_item.apply(this, arguments); }
            },
            "setItem": {
              "value": function () { return this.set_item.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DOMStorageInfo": {
          "prototype": {},
          "static": {}
        },
        "DOMStorageQuota": {
          "prototype": {},
          "static": {}
        },
        "DOMStyleMedia": {
          "prototype": {
            "matchMedium": {
              "value": function () { return this.match_medium.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DOMStyleSheet": {
          "prototype": {
            "getDisabled": {
              "value": function () { return this.get_disabled.apply(this, arguments); }
            },
            "getHref": {
              "value": function () { return this.get_href.apply(this, arguments); }
            },
            "getMedia": {
              "value": function () { return this.get_media.apply(this, arguments); }
            },
            "getOwnerNode": {
              "value": function () { return this.get_owner_node.apply(this, arguments); }
            },
            "getParentStyleSheet": {
              "value": function () { return this.get_parent_style_sheet.apply(this, arguments); }
            },
            "getTitle": {
              "value": function () { return this.get_title.apply(this, arguments); }
            },
            "setDisabled": {
              "value": function () { return this.set_disabled.apply(this, arguments); }
            },
            "ownerNode": {
              "get": function () { return this.owner_node; },
              "set": function (value) { this.owner_node = value; }
            },
            "parentStyleSheet": {
              "get": function () { return this.parent_style_sheet; },
              "set": function (value) { this.parent_style_sheet = value; }
            }
          },
          "static": {}
        },
        "DOMStyleSheetList": {
          "prototype": {
            "getLength": {
              "value": function () { return this.get_length.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DOMText": {
          "prototype": {
            "getWholeText": {
              "value": function () { return this.get_whole_text.apply(this, arguments); }
            },
            "replaceWholeText": {
              "value": function () { return this.replace_whole_text.apply(this, arguments); }
            },
            "splitText": {
              "value": function () { return this.split_text.apply(this, arguments); }
            },
            "wholeText": {
              "get": function () { return this.whole_text; },
              "set": function (value) { this.whole_text = value; }
            }
          },
          "static": {}
        },
        "DOMTextTrack": {
          "prototype": {
            "addCue": {
              "value": function () { return this.add_cue.apply(this, arguments); }
            },
            "dispatchEvent": {
              "value": function () { return this.dispatch_event.apply(this, arguments); }
            },
            "getActiveCues": {
              "value": function () { return this.get_active_cues.apply(this, arguments); }
            },
            "getCues": {
              "value": function () { return this.get_cues.apply(this, arguments); }
            },
            "getId": {
              "value": function () { return this.get_id.apply(this, arguments); }
            },
            "getKind": {
              "value": function () { return this.get_kind.apply(this, arguments); }
            },
            "getLabel": {
              "value": function () { return this.get_label.apply(this, arguments); }
            },
            "getLanguage": {
              "value": function () { return this.get_language.apply(this, arguments); }
            },
            "getMode": {
              "value": function () { return this.get_mode.apply(this, arguments); }
            },
            "removeCue": {
              "value": function () { return this.remove_cue.apply(this, arguments); }
            },
            "setMode": {
              "value": function () { return this.set_mode.apply(this, arguments); }
            },
            "activeCues": {
              "get": function () { return this.active_cues; },
              "set": function (value) { this.active_cues = value; }
            }
          },
          "static": {}
        },
        "DOMTextTrackCue": {
          "prototype": {
            "dispatchEvent": {
              "value": function () { return this.dispatch_event.apply(this, arguments); }
            },
            "getAlign": {
              "value": function () { return this.get_align.apply(this, arguments); }
            },
            "getCueAsHtml": {
              "value": function () { return this.get_cue_as_html.apply(this, arguments); }
            },
            "getEndTime": {
              "value": function () { return this.get_end_time.apply(this, arguments); }
            },
            "getId": {
              "value": function () { return this.get_id.apply(this, arguments); }
            },
            "getLine": {
              "value": function () { return this.get_line.apply(this, arguments); }
            },
            "getPauseOnExit": {
              "value": function () { return this.get_pause_on_exit.apply(this, arguments); }
            },
            "getPosition": {
              "value": function () { return this.get_position.apply(this, arguments); }
            },
            "getSize": {
              "value": function () { return this.get_size.apply(this, arguments); }
            },
            "getSnapToLines": {
              "value": function () { return this.get_snap_to_lines.apply(this, arguments); }
            },
            "getStartTime": {
              "value": function () { return this.get_start_time.apply(this, arguments); }
            },
            "getText": {
              "value": function () { return this.get_text.apply(this, arguments); }
            },
            "getTrack": {
              "value": function () { return this.get_track.apply(this, arguments); }
            },
            "getVertical": {
              "value": function () { return this.get_vertical.apply(this, arguments); }
            },
            "setAlign": {
              "value": function () { return this.set_align.apply(this, arguments); }
            },
            "setEndTime": {
              "value": function () { return this.set_end_time.apply(this, arguments); }
            },
            "setId": {
              "value": function () { return this.set_id.apply(this, arguments); }
            },
            "setLine": {
              "value": function () { return this.set_line.apply(this, arguments); }
            },
            "setPauseOnExit": {
              "value": function () { return this.set_pause_on_exit.apply(this, arguments); }
            },
            "setPosition": {
              "value": function () { return this.set_position.apply(this, arguments); }
            },
            "setSize": {
              "value": function () { return this.set_size.apply(this, arguments); }
            },
            "setSnapToLines": {
              "value": function () { return this.set_snap_to_lines.apply(this, arguments); }
            },
            "setStartTime": {
              "value": function () { return this.set_start_time.apply(this, arguments); }
            },
            "setText": {
              "value": function () { return this.set_text.apply(this, arguments); }
            },
            "setVertical": {
              "value": function () { return this.set_vertical.apply(this, arguments); }
            },
            "endTime": {
              "get": function () { return this.end_time; },
              "set": function (value) { this.end_time = value; }
            },
            "pauseOnExit": {
              "get": function () { return this.pause_on_exit; },
              "set": function (value) { this.pause_on_exit = value; }
            },
            "snapToLines": {
              "get": function () { return this.snap_to_lines; },
              "set": function (value) { this.snap_to_lines = value; }
            },
            "startTime": {
              "get": function () { return this.start_time; },
              "set": function (value) { this.start_time = value; }
            }
          },
          "static": {}
        },
        "DOMTextTrackCueList": {
          "prototype": {
            "getCueById": {
              "value": function () { return this.get_cue_by_id.apply(this, arguments); }
            },
            "getLength": {
              "value": function () { return this.get_length.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DOMTextTrackList": {
          "prototype": {
            "dispatchEvent": {
              "value": function () { return this.dispatch_event.apply(this, arguments); }
            },
            "getLength": {
              "value": function () { return this.get_length.apply(this, arguments); }
            },
            "getTrackById": {
              "value": function () { return this.get_track_by_id.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DOMTimeRanges": {
          "prototype": {
            "getLength": {
              "value": function () { return this.get_length.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DOMTouch": {
          "prototype": {
            "getClientX": {
              "value": function () { return this.get_client_x.apply(this, arguments); }
            },
            "getClientY": {
              "value": function () { return this.get_client_y.apply(this, arguments); }
            },
            "getIdentifier": {
              "value": function () { return this.get_identifier.apply(this, arguments); }
            },
            "getPageX": {
              "value": function () { return this.get_page_x.apply(this, arguments); }
            },
            "getPageY": {
              "value": function () { return this.get_page_y.apply(this, arguments); }
            },
            "getScreenX": {
              "value": function () { return this.get_screen_x.apply(this, arguments); }
            },
            "getScreenY": {
              "value": function () { return this.get_screen_y.apply(this, arguments); }
            },
            "getTarget": {
              "value": function () { return this.get_target.apply(this, arguments); }
            },
            "getWebkitForce": {
              "value": function () { return this.get_webkit_force.apply(this, arguments); }
            },
            "getWebkitRadiusX": {
              "value": function () { return this.get_webkit_radius_x.apply(this, arguments); }
            },
            "getWebkitRadiusY": {
              "value": function () { return this.get_webkit_radius_y.apply(this, arguments); }
            },
            "getWebkitRotationAngle": {
              "value": function () { return this.get_webkit_rotation_angle.apply(this, arguments); }
            },
            "clientX": {
              "get": function () { return this.client_x; },
              "set": function (value) { this.client_x = value; }
            },
            "clientY": {
              "get": function () { return this.client_y; },
              "set": function (value) { this.client_y = value; }
            },
            "pageX": {
              "get": function () { return this.page_x; },
              "set": function (value) { this.page_x = value; }
            },
            "pageY": {
              "get": function () { return this.page_y; },
              "set": function (value) { this.page_y = value; }
            },
            "screenX": {
              "get": function () { return this.screen_x; },
              "set": function (value) { this.screen_x = value; }
            },
            "screenY": {
              "get": function () { return this.screen_y; },
              "set": function (value) { this.screen_y = value; }
            },
            "webkitForce": {
              "get": function () { return this.webkit_force; },
              "set": function (value) { this.webkit_force = value; }
            },
            "webkitRadiusX": {
              "get": function () { return this.webkit_radius_x; },
              "set": function (value) { this.webkit_radius_x = value; }
            },
            "webkitRadiusY": {
              "get": function () { return this.webkit_radius_y; },
              "set": function (value) { this.webkit_radius_y = value; }
            },
            "webkitRotationAngle": {
              "get": function () { return this.webkit_rotation_angle; },
              "set": function (value) { this.webkit_rotation_angle = value; }
            }
          },
          "static": {}
        },
        "DOMTrackEvent": {
          "prototype": {},
          "static": {}
        },
        "DOMTreeWalker": {
          "prototype": {
            "firstChild": {
              "value": function () { return this.first_child.apply(this, arguments); }
            },
            "getCurrentNode": {
              "value": function () { return this.get_current_node.apply(this, arguments); }
            },
            "getExpandEntityReferences": {
              "value": function () { return this.get_expand_entity_references.apply(this, arguments); }
            },
            "getFilter": {
              "value": function () { return this.get_filter.apply(this, arguments); }
            },
            "getRoot": {
              "value": function () { return this.get_root.apply(this, arguments); }
            },
            "getWhatToShow": {
              "value": function () { return this.get_what_to_show.apply(this, arguments); }
            },
            "lastChild": {
              "value": function () { return this.last_child.apply(this, arguments); }
            },
            "nextNode": {
              "value": function () { return this.next_node.apply(this, arguments); }
            },
            "nextSibling": {
              "value": function () { return this.next_sibling.apply(this, arguments); }
            },
            "parentNode": {
              "value": function () { return this.parent_node.apply(this, arguments); }
            },
            "previousNode": {
              "value": function () { return this.previous_node.apply(this, arguments); }
            },
            "previousSibling": {
              "value": function () { return this.previous_sibling.apply(this, arguments); }
            },
            "setCurrentNode": {
              "value": function () { return this.set_current_node.apply(this, arguments); }
            },
            "currentNode": {
              "get": function () { return this.current_node; },
              "set": function (value) { this.current_node = value; }
            },
            "expandEntityReferences": {
              "get": function () { return this.expand_entity_references; },
              "set": function (value) { this.expand_entity_references = value; }
            },
            "whatToShow": {
              "get": function () { return this.what_to_show; },
              "set": function (value) { this.what_to_show = value; }
            }
          },
          "static": {}
        },
        "DOMUIEvent": {
          "prototype": {
            "getCharCode": {
              "value": function () { return this.get_char_code.apply(this, arguments); }
            },
            "getDetail": {
              "value": function () { return this.get_detail.apply(this, arguments); }
            },
            "getKeyCode": {
              "value": function () { return this.get_key_code.apply(this, arguments); }
            },
            "getLayerX": {
              "value": function () { return this.get_layer_x.apply(this, arguments); }
            },
            "getLayerY": {
              "value": function () { return this.get_layer_y.apply(this, arguments); }
            },
            "getPageX": {
              "value": function () { return this.get_page_x.apply(this, arguments); }
            },
            "getPageY": {
              "value": function () { return this.get_page_y.apply(this, arguments); }
            },
            "getView": {
              "value": function () { return this.get_view.apply(this, arguments); }
            },
            "getWhich": {
              "value": function () { return this.get_which.apply(this, arguments); }
            },
            "initUiEvent": {
              "value": function () { return this.init_ui_event.apply(this, arguments); }
            },
            "charCode": {
              "get": function () { return this.char_code; },
              "set": function (value) { this.char_code = value; }
            },
            "keyCode": {
              "get": function () { return this.key_code; },
              "set": function (value) { this.key_code = value; }
            },
            "layerX": {
              "get": function () { return this.layer_x; },
              "set": function (value) { this.layer_x = value; }
            },
            "layerY": {
              "get": function () { return this.layer_y; },
              "set": function (value) { this.layer_y = value; }
            },
            "pageX": {
              "get": function () { return this.page_x; },
              "set": function (value) { this.page_x = value; }
            },
            "pageY": {
              "get": function () { return this.page_y; },
              "set": function (value) { this.page_y = value; }
            }
          },
          "static": {}
        },
        "DOMValidityState": {
          "prototype": {
            "getBadInput": {
              "value": function () { return this.get_bad_input.apply(this, arguments); }
            },
            "getCustomError": {
              "value": function () { return this.get_custom_error.apply(this, arguments); }
            },
            "getPatternMismatch": {
              "value": function () { return this.get_pattern_mismatch.apply(this, arguments); }
            },
            "getRangeOverflow": {
              "value": function () { return this.get_range_overflow.apply(this, arguments); }
            },
            "getRangeUnderflow": {
              "value": function () { return this.get_range_underflow.apply(this, arguments); }
            },
            "getStepMismatch": {
              "value": function () { return this.get_step_mismatch.apply(this, arguments); }
            },
            "getTooLong": {
              "value": function () { return this.get_too_long.apply(this, arguments); }
            },
            "getTypeMismatch": {
              "value": function () { return this.get_type_mismatch.apply(this, arguments); }
            },
            "getValid": {
              "value": function () { return this.get_valid.apply(this, arguments); }
            },
            "getValueMissing": {
              "value": function () { return this.get_value_missing.apply(this, arguments); }
            },
            "badInput": {
              "get": function () { return this.bad_input; },
              "set": function (value) { this.bad_input = value; }
            },
            "customError": {
              "get": function () { return this.custom_error; },
              "set": function (value) { this.custom_error = value; }
            },
            "patternMismatch": {
              "get": function () { return this.pattern_mismatch; },
              "set": function (value) { this.pattern_mismatch = value; }
            },
            "rangeOverflow": {
              "get": function () { return this.range_overflow; },
              "set": function (value) { this.range_overflow = value; }
            },
            "rangeUnderflow": {
              "get": function () { return this.range_underflow; },
              "set": function (value) { this.range_underflow = value; }
            },
            "stepMismatch": {
              "get": function () { return this.step_mismatch; },
              "set": function (value) { this.step_mismatch = value; }
            },
            "tooLong": {
              "get": function () { return this.too_long; },
              "set": function (value) { this.too_long = value; }
            },
            "typeMismatch": {
              "get": function () { return this.type_mismatch; },
              "set": function (value) { this.type_mismatch = value; }
            },
            "valueMissing": {
              "get": function () { return this.value_missing; },
              "set": function (value) { this.value_missing = value; }
            }
          },
          "static": {}
        },
        "DOMVideoPlaybackQuality": {
          "prototype": {
            "getCorruptedVideoFrames": {
              "value": function () { return this.get_corrupted_video_frames.apply(this, arguments); }
            },
            "getCreationTime": {
              "value": function () { return this.get_creation_time.apply(this, arguments); }
            },
            "getDroppedVideoFrames": {
              "value": function () { return this.get_dropped_video_frames.apply(this, arguments); }
            },
            "getTotalFrameDelay": {
              "value": function () { return this.get_total_frame_delay.apply(this, arguments); }
            },
            "getTotalVideoFrames": {
              "value": function () { return this.get_total_video_frames.apply(this, arguments); }
            },
            "corruptedVideoFrames": {
              "get": function () { return this.corrupted_video_frames; },
              "set": function (value) { this.corrupted_video_frames = value; }
            },
            "creationTime": {
              "get": function () { return this.creation_time; },
              "set": function (value) { this.creation_time = value; }
            },
            "droppedVideoFrames": {
              "get": function () { return this.dropped_video_frames; },
              "set": function (value) { this.dropped_video_frames = value; }
            },
            "totalFrameDelay": {
              "get": function () { return this.total_frame_delay; },
              "set": function (value) { this.total_frame_delay = value; }
            },
            "totalVideoFrames": {
              "get": function () { return this.total_video_frames; },
              "set": function (value) { this.total_video_frames = value; }
            }
          },
          "static": {}
        },
        "DOMVideoTrack": {
          "prototype": {
            "getId": {
              "value": function () { return this.get_id.apply(this, arguments); }
            },
            "getKind": {
              "value": function () { return this.get_kind.apply(this, arguments); }
            },
            "getLabel": {
              "value": function () { return this.get_label.apply(this, arguments); }
            },
            "getLanguage": {
              "value": function () { return this.get_language.apply(this, arguments); }
            },
            "getSelected": {
              "value": function () { return this.get_selected.apply(this, arguments); }
            },
            "setSelected": {
              "value": function () { return this.set_selected.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DOMVideoTrackList": {
          "prototype": {
            "dispatchEvent": {
              "value": function () { return this.dispatch_event.apply(this, arguments); }
            },
            "getLength": {
              "value": function () { return this.get_length.apply(this, arguments); }
            },
            "getTrackById": {
              "value": function () { return this.get_track_by_id.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DOMWebKitNamedFlow": {
          "prototype": {
            "dispatchEvent": {
              "value": function () { return this.dispatch_event.apply(this, arguments); }
            },
            "getContent": {
              "value": function () { return this.get_content.apply(this, arguments); }
            },
            "getContentNodes": {
              "value": function () { return this.get_content_nodes.apply(this, arguments); }
            },
            "getFirstEmptyRegionIndex": {
              "value": function () { return this.get_first_empty_region_index.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getOverflow": {
              "value": function () { return this.get_overflow.apply(this, arguments); }
            },
            "getOverset": {
              "value": function () { return this.get_overset.apply(this, arguments); }
            },
            "getRegions": {
              "value": function () { return this.get_regions.apply(this, arguments); }
            },
            "getRegionsByContent": {
              "value": function () { return this.get_regions_by_content.apply(this, arguments); }
            },
            "getRegionsByContentNode": {
              "value": function () { return this.get_regions_by_content_node.apply(this, arguments); }
            },
            "firstEmptyRegionIndex": {
              "get": function () { return this.first_empty_region_index; },
              "set": function (value) { this.first_empty_region_index = value; }
            }
          },
          "static": {}
        },
        "DOMWebKitPoint": {
          "prototype": {
            "getX": {
              "value": function () { return this.get_x.apply(this, arguments); }
            },
            "getY": {
              "value": function () { return this.get_y.apply(this, arguments); }
            },
            "setX": {
              "value": function () { return this.set_x.apply(this, arguments); }
            },
            "setY": {
              "value": function () { return this.set_y.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DOMWheelEvent": {
          "prototype": {
            "getDeltaMode": {
              "value": function () { return this.get_delta_mode.apply(this, arguments); }
            },
            "getDeltaX": {
              "value": function () { return this.get_delta_x.apply(this, arguments); }
            },
            "getDeltaY": {
              "value": function () { return this.get_delta_y.apply(this, arguments); }
            },
            "getDeltaZ": {
              "value": function () { return this.get_delta_z.apply(this, arguments); }
            },
            "getWebkitDirectionInvertedFromDevice": {
              "value": function () { return this.get_webkit_direction_inverted_from_device.apply(this, arguments); }
            },
            "getWheelDelta": {
              "value": function () { return this.get_wheel_delta.apply(this, arguments); }
            },
            "getWheelDeltaX": {
              "value": function () { return this.get_wheel_delta_x.apply(this, arguments); }
            },
            "getWheelDeltaY": {
              "value": function () { return this.get_wheel_delta_y.apply(this, arguments); }
            },
            "initWheelEvent": {
              "value": function () { return this.init_wheel_event.apply(this, arguments); }
            },
            "deltaMode": {
              "get": function () { return this.delta_mode; },
              "set": function (value) { this.delta_mode = value; }
            },
            "deltaX": {
              "get": function () { return this.delta_x; },
              "set": function (value) { this.delta_x = value; }
            },
            "deltaY": {
              "get": function () { return this.delta_y; },
              "set": function (value) { this.delta_y = value; }
            },
            "deltaZ": {
              "get": function () { return this.delta_z; },
              "set": function (value) { this.delta_z = value; }
            },
            "webkitDirectionInvertedFromDevice": {
              "get": function () { return this.webkit_direction_inverted_from_device; },
              "set": function (value) { this.webkit_direction_inverted_from_device = value; }
            },
            "wheelDelta": {
              "get": function () { return this.wheel_delta; },
              "set": function (value) { this.wheel_delta = value; }
            },
            "wheelDeltaX": {
              "get": function () { return this.wheel_delta_x; },
              "set": function (value) { this.wheel_delta_x = value; }
            },
            "wheelDeltaY": {
              "get": function () { return this.wheel_delta_y; },
              "set": function (value) { this.wheel_delta_y = value; }
            }
          },
          "static": {}
        },
        "DOMXPathExpression": {
          "prototype": {},
          "static": {}
        },
        "DOMXPathNSResolver": {
          "prototype": {
            "lookupNamespaceUri": {
              "value": function () { return this.lookup_namespace_uri.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DOMXPathResult": {
          "prototype": {
            "getBooleanValue": {
              "value": function () { return this.get_boolean_value.apply(this, arguments); }
            },
            "getInvalidIteratorState": {
              "value": function () { return this.get_invalid_iterator_state.apply(this, arguments); }
            },
            "getNumberValue": {
              "value": function () { return this.get_number_value.apply(this, arguments); }
            },
            "getResultType": {
              "value": function () { return this.get_result_type.apply(this, arguments); }
            },
            "getSingleNodeValue": {
              "value": function () { return this.get_single_node_value.apply(this, arguments); }
            },
            "getSnapshotLength": {
              "value": function () { return this.get_snapshot_length.apply(this, arguments); }
            },
            "getStringValue": {
              "value": function () { return this.get_string_value.apply(this, arguments); }
            },
            "iterateNext": {
              "value": function () { return this.iterate_next.apply(this, arguments); }
            },
            "snapshotItem": {
              "value": function () { return this.snapshot_item.apply(this, arguments); }
            },
            "booleanValue": {
              "get": function () { return this.boolean_value; },
              "set": function (value) { this.boolean_value = value; }
            },
            "invalidIteratorState": {
              "get": function () { return this.invalid_iterator_state; },
              "set": function (value) { this.invalid_iterator_state = value; }
            },
            "numberValue": {
              "get": function () { return this.number_value; },
              "set": function (value) { this.number_value = value; }
            },
            "resultType": {
              "get": function () { return this.result_type; },
              "set": function (value) { this.result_type = value; }
            },
            "singleNodeValue": {
              "get": function () { return this.single_node_value; },
              "set": function (value) { this.single_node_value = value; }
            },
            "snapshotLength": {
              "get": function () { return this.snapshot_length; },
              "set": function (value) { this.snapshot_length = value; }
            },
            "stringValue": {
              "get": function () { return this.string_value; },
              "set": function (value) { this.string_value = value; }
            }
          },
          "static": {}
        },
        "Download": {
          "prototype": {
            "getCurrentSize": {
              "value": function () { return this.get_current_size.apply(this, arguments); }
            },
            "getDestinationUri": {
              "value": function () { return this.get_destination_uri.apply(this, arguments); }
            },
            "getElapsedTime": {
              "value": function () { return this.get_elapsed_time.apply(this, arguments); }
            },
            "getNetworkRequest": {
              "value": function () { return this.get_network_request.apply(this, arguments); }
            },
            "getNetworkResponse": {
              "value": function () { return this.get_network_response.apply(this, arguments); }
            },
            "getProgress": {
              "value": function () { return this.get_progress.apply(this, arguments); }
            },
            "getStatus": {
              "value": function () { return this.get_status.apply(this, arguments); }
            },
            "getSuggestedFilename": {
              "value": function () { return this.get_suggested_filename.apply(this, arguments); }
            },
            "getTotalSize": {
              "value": function () { return this.get_total_size.apply(this, arguments); }
            },
            "getUri": {
              "value": function () { return this.get_uri.apply(this, arguments); }
            },
            "setDestinationUri": {
              "value": function () { return this.set_destination_uri.apply(this, arguments); }
            },
            "currentSize": {
              "get": function () { return this.current_size; },
              "set": function (value) { this.current_size = value; }
            },
            "destinationUri": {
              "get": function () { return this.destination_uri; },
              "set": function (value) { this.destination_uri = value; }
            },
            "networkRequest": {
              "get": function () { return this.network_request; },
              "set": function (value) { this.network_request = value; }
            },
            "networkResponse": {
              "get": function () { return this.network_response; },
              "set": function (value) { this.network_response = value; }
            },
            "suggestedFilename": {
              "get": function () { return this.suggested_filename; },
              "set": function (value) { this.suggested_filename = value; }
            },
            "totalSize": {
              "get": function () { return this.total_size; },
              "set": function (value) { this.total_size = value; }
            }
          },
          "static": {}
        },
        "FaviconDatabase": {
          "prototype": {
            "getFaviconPixbuf": {
              "value": function () { return this.get_favicon_pixbuf.apply(this, arguments); }
            },
            "getFaviconPixbufFinish": {
              "value": function () { return this.get_favicon_pixbuf_finish.apply(this, arguments); }
            },
            "getFaviconUri": {
              "value": function () { return this.get_favicon_uri.apply(this, arguments); }
            },
            "getPath": {
              "value": function () { return this.get_path.apply(this, arguments); }
            },
            "setPath": {
              "value": function () { return this.set_path.apply(this, arguments); }
            },
            "tryGetFaviconPixbuf": {
              "value": function () { return this.try_get_favicon_pixbuf.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "FileChooserRequest": {
          "prototype": {
            "getMimeTypes": {
              "value": function () { return this.get_mime_types.apply(this, arguments); }
            },
            "getMimeTypesFilter": {
              "value": function () { return this.get_mime_types_filter.apply(this, arguments); }
            },
            "getSelectMultiple": {
              "value": function () { return this.get_select_multiple.apply(this, arguments); }
            },
            "getSelectedFiles": {
              "value": function () { return this.get_selected_files.apply(this, arguments); }
            },
            "selectFiles": {
              "value": function () { return this.select_files.apply(this, arguments); }
            },
            "mimeTypes": {
              "get": function () { return this.mime_types; },
              "set": function (value) { this.mime_types = value; }
            },
            "selectMultiple": {
              "get": function () { return this.select_multiple; },
              "set": function (value) { this.select_multiple = value; }
            },
            "selectedFiles": {
              "get": function () { return this.selected_files; },
              "set": function (value) { this.selected_files = value; }
            }
          },
          "static": {}
        },
        "GeolocationPolicyDecision": {
          "prototype": {},
          "static": {}
        },
        "HitTestResult": {
          "prototype": {
            "imageUri": {
              "get": function () { return this.image_uri; },
              "set": function (value) { this.image_uri = value; }
            },
            "innerNode": {
              "get": function () { return this.inner_node; },
              "set": function (value) { this.inner_node = value; }
            },
            "linkUri": {
              "get": function () { return this.link_uri; },
              "set": function (value) { this.link_uri = value; }
            },
            "mediaUri": {
              "get": function () { return this.media_uri; },
              "set": function (value) { this.media_uri = value; }
            }
          },
          "static": {}
        },
        "IconDatabase": {
          "prototype": {
            "getIconPixbuf": {
              "value": function () { return this.get_icon_pixbuf.apply(this, arguments); }
            },
            "getIconUri": {
              "value": function () { return this.get_icon_uri.apply(this, arguments); }
            },
            "getPath": {
              "value": function () { return this.get_path.apply(this, arguments); }
            },
            "setPath": {
              "value": function () { return this.set_path.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "NetworkRequest": {
          "prototype": {
            "getMessage": {
              "value": function () { return this.get_message.apply(this, arguments); }
            },
            "getUri": {
              "value": function () { return this.get_uri.apply(this, arguments); }
            },
            "setUri": {
              "value": function () { return this.set_uri.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "NetworkResponse": {
          "prototype": {
            "getMessage": {
              "value": function () { return this.get_message.apply(this, arguments); }
            },
            "getSuggestedFilename": {
              "value": function () { return this.get_suggested_filename.apply(this, arguments); }
            },
            "getUri": {
              "value": function () { return this.get_uri.apply(this, arguments); }
            },
            "setUri": {
              "value": function () { return this.set_uri.apply(this, arguments); }
            },
            "suggestedFilename": {
              "get": function () { return this.suggested_filename; },
              "set": function (value) { this.suggested_filename = value; }
            }
          },
          "static": {}
        },
        "SecurityOrigin": {
          "prototype": {
            "getAllWebDatabases": {
              "value": function () { return this.get_all_web_databases.apply(this, arguments); }
            },
            "getHost": {
              "value": function () { return this.get_host.apply(this, arguments); }
            },
            "getPort": {
              "value": function () { return this.get_port.apply(this, arguments); }
            },
            "getProtocol": {
              "value": function () { return this.get_protocol.apply(this, arguments); }
            },
            "getWebDatabaseQuota": {
              "value": function () { return this.get_web_database_quota.apply(this, arguments); }
            },
            "getWebDatabaseUsage": {
              "value": function () { return this.get_web_database_usage.apply(this, arguments); }
            },
            "setWebDatabaseQuota": {
              "value": function () { return this.set_web_database_quota.apply(this, arguments); }
            },
            "webDatabaseQuota": {
              "get": function () { return this.web_database_quota; },
              "set": function (value) { this.web_database_quota = value; }
            },
            "webDatabaseUsage": {
              "get": function () { return this.web_database_usage; },
              "set": function (value) { this.web_database_usage = value; }
            }
          },
          "static": {}
        },
        "SoupAuthDialog": {
          "prototype": {},
          "static": {}
        },
        "ViewportAttributes": {
          "prototype": {
            "availableHeight": {
              "get": function () { return this.available_height; },
              "set": function (value) { this.available_height = value; }
            },
            "availableWidth": {
              "get": function () { return this.available_width; },
              "set": function (value) { this.available_width = value; }
            },
            "desktopWidth": {
              "get": function () { return this.desktop_width; },
              "set": function (value) { this.desktop_width = value; }
            },
            "deviceDpi": {
              "get": function () { return this.device_dpi; },
              "set": function (value) { this.device_dpi = value; }
            },
            "deviceHeight": {
              "get": function () { return this.device_height; },
              "set": function (value) { this.device_height = value; }
            },
            "devicePixelRatio": {
              "get": function () { return this.device_pixel_ratio; },
              "set": function (value) { this.device_pixel_ratio = value; }
            },
            "deviceWidth": {
              "get": function () { return this.device_width; },
              "set": function (value) { this.device_width = value; }
            },
            "initialScaleFactor": {
              "get": function () { return this.initial_scale_factor; },
              "set": function (value) { this.initial_scale_factor = value; }
            },
            "maximumScaleFactor": {
              "get": function () { return this.maximum_scale_factor; },
              "set": function (value) { this.maximum_scale_factor = value; }
            },
            "minimumScaleFactor": {
              "get": function () { return this.minimum_scale_factor; },
              "set": function (value) { this.minimum_scale_factor = value; }
            },
            "userScalable": {
              "get": function () { return this.user_scalable; },
              "set": function (value) { this.user_scalable = value; }
            }
          },
          "static": {}
        },
        "WebBackForwardList": {
          "prototype": {
            "addItem": {
              "value": function () { return this.add_item.apply(this, arguments); }
            },
            "containsItem": {
              "value": function () { return this.contains_item.apply(this, arguments); }
            },
            "getBackItem": {
              "value": function () { return this.get_back_item.apply(this, arguments); }
            },
            "getBackLength": {
              "value": function () { return this.get_back_length.apply(this, arguments); }
            },
            "getBackListWithLimit": {
              "value": function () { return this.get_back_list_with_limit.apply(this, arguments); }
            },
            "getCurrentItem": {
              "value": function () { return this.get_current_item.apply(this, arguments); }
            },
            "getForwardItem": {
              "value": function () { return this.get_forward_item.apply(this, arguments); }
            },
            "getForwardLength": {
              "value": function () { return this.get_forward_length.apply(this, arguments); }
            },
            "getForwardListWithLimit": {
              "value": function () { return this.get_forward_list_with_limit.apply(this, arguments); }
            },
            "getLimit": {
              "value": function () { return this.get_limit.apply(this, arguments); }
            },
            "getNthItem": {
              "value": function () { return this.get_nth_item.apply(this, arguments); }
            },
            "goBack": {
              "value": function () { return this.go_back.apply(this, arguments); }
            },
            "goForward": {
              "value": function () { return this.go_forward.apply(this, arguments); }
            },
            "goToItem": {
              "value": function () { return this.go_to_item.apply(this, arguments); }
            },
            "setLimit": {
              "value": function () { return this.set_limit.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "WebDataSource": {
          "prototype": {
            "getData": {
              "value": function () { return this.get_data.apply(this, arguments); }
            },
            "getEncoding": {
              "value": function () { return this.get_encoding.apply(this, arguments); }
            },
            "getInitialRequest": {
              "value": function () { return this.get_initial_request.apply(this, arguments); }
            },
            "getMainResource": {
              "value": function () { return this.get_main_resource.apply(this, arguments); }
            },
            "getRequest": {
              "value": function () { return this.get_request.apply(this, arguments); }
            },
            "getSubresources": {
              "value": function () { return this.get_subresources.apply(this, arguments); }
            },
            "getUnreachableUri": {
              "value": function () { return this.get_unreachable_uri.apply(this, arguments); }
            },
            "getWebFrame": {
              "value": function () { return this.get_web_frame.apply(this, arguments); }
            },
            "isLoading": {
              "value": function () { return this.is_loading.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "WebDatabase": {
          "prototype": {
            "getDisplayName": {
              "value": function () { return this.get_display_name.apply(this, arguments); }
            },
            "getExpectedSize": {
              "value": function () { return this.get_expected_size.apply(this, arguments); }
            },
            "getFilename": {
              "value": function () { return this.get_filename.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getSecurityOrigin": {
              "value": function () { return this.get_security_origin.apply(this, arguments); }
            },
            "getSize": {
              "value": function () { return this.get_size.apply(this, arguments); }
            },
            "displayName": {
              "get": function () { return this.display_name; },
              "set": function (value) { this.display_name = value; }
            },
            "expectedSize": {
              "get": function () { return this.expected_size; },
              "set": function (value) { this.expected_size = value; }
            },
            "securityOrigin": {
              "get": function () { return this.security_origin; },
              "set": function (value) { this.security_origin = value; }
            }
          },
          "static": {}
        },
        "WebFrame": {
          "prototype": {
            "findFrame": {
              "value": function () { return this.find_frame.apply(this, arguments); }
            },
            "getDataSource": {
              "value": function () { return this.get_data_source.apply(this, arguments); }
            },
            "getDomDocument": {
              "value": function () { return this.get_dom_document.apply(this, arguments); }
            },
            "getGlobalContext": {
              "value": function () { return this.get_global_context.apply(this, arguments); }
            },
            "getHorizontalScrollbarPolicy": {
              "value": function () { return this.get_horizontal_scrollbar_policy.apply(this, arguments); }
            },
            "getLoadStatus": {
              "value": function () { return this.get_load_status.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getNetworkResponse": {
              "value": function () { return this.get_network_response.apply(this, arguments); }
            },
            "getParent": {
              "value": function () { return this.get_parent.apply(this, arguments); }
            },
            "getProvisionalDataSource": {
              "value": function () { return this.get_provisional_data_source.apply(this, arguments); }
            },
            "getRangeForWordAroundCaret": {
              "value": function () { return this.get_range_for_word_around_caret.apply(this, arguments); }
            },
            "getSecurityOrigin": {
              "value": function () { return this.get_security_origin.apply(this, arguments); }
            },
            "getTitle": {
              "value": function () { return this.get_title.apply(this, arguments); }
            },
            "getUri": {
              "value": function () { return this.get_uri.apply(this, arguments); }
            },
            "getVerticalScrollbarPolicy": {
              "value": function () { return this.get_vertical_scrollbar_policy.apply(this, arguments); }
            },
            "getWebView": {
              "value": function () { return this.get_web_view.apply(this, arguments); }
            },
            "loadAlternateString": {
              "value": function () { return this.load_alternate_string.apply(this, arguments); }
            },
            "loadRequest": {
              "value": function () { return this.load_request.apply(this, arguments); }
            },
            "loadString": {
              "value": function () { return this.load_string.apply(this, arguments); }
            },
            "loadUri": {
              "value": function () { return this.load_uri.apply(this, arguments); }
            },
            "printFull": {
              "value": function () { return this.print_full.apply(this, arguments); }
            },
            "replaceSelection": {
              "value": function () { return this.replace_selection.apply(this, arguments); }
            },
            "stopLoading": {
              "value": function () { return this.stop_loading.apply(this, arguments); }
            },
            "horizontalScrollbarPolicy": {
              "get": function () { return this.horizontal_scrollbar_policy; },
              "set": function (value) { this.horizontal_scrollbar_policy = value; }
            },
            "loadStatus": {
              "get": function () { return this.load_status; },
              "set": function (value) { this.load_status = value; }
            },
            "verticalScrollbarPolicy": {
              "get": function () { return this.vertical_scrollbar_policy; },
              "set": function (value) { this.vertical_scrollbar_policy = value; }
            }
          },
          "static": {}
        },
        "WebHistoryItem": {
          "prototype": {
            "getAlternateTitle": {
              "value": function () { return this.get_alternate_title.apply(this, arguments); }
            },
            "getLastVisitedTime": {
              "value": function () { return this.get_last_visited_time.apply(this, arguments); }
            },
            "getOriginalUri": {
              "value": function () { return this.get_original_uri.apply(this, arguments); }
            },
            "getTitle": {
              "value": function () { return this.get_title.apply(this, arguments); }
            },
            "getUri": {
              "value": function () { return this.get_uri.apply(this, arguments); }
            },
            "setAlternateTitle": {
              "value": function () { return this.set_alternate_title.apply(this, arguments); }
            },
            "alternateTitle": {
              "get": function () { return this.alternate_title; },
              "set": function (value) { this.alternate_title = value; }
            },
            "lastVisitedTime": {
              "get": function () { return this.last_visited_time; },
              "set": function (value) { this.last_visited_time = value; }
            },
            "originalUri": {
              "get": function () { return this.original_uri; },
              "set": function (value) { this.original_uri = value; }
            }
          },
          "static": {}
        },
        "WebInspector": {
          "prototype": {
            "getInspectedUri": {
              "value": function () { return this.get_inspected_uri.apply(this, arguments); }
            },
            "getWebView": {
              "value": function () { return this.get_web_view.apply(this, arguments); }
            },
            "inspectCoordinates": {
              "value": function () { return this.inspect_coordinates.apply(this, arguments); }
            },
            "inspectNode": {
              "value": function () { return this.inspect_node.apply(this, arguments); }
            },
            "inspectedUri": {
              "get": function () { return this.inspected_uri; },
              "set": function (value) { this.inspected_uri = value; }
            },
            "javascriptProfilingEnabled": {
              "get": function () { return this.javascript_profiling_enabled; },
              "set": function (value) { this.javascript_profiling_enabled = value; }
            },
            "timelineProfilingEnabled": {
              "get": function () { return this.timeline_profiling_enabled; },
              "set": function (value) { this.timeline_profiling_enabled = value; }
            },
            "webView": {
              "get": function () { return this.web_view; },
              "set": function (value) { this.web_view = value; }
            }
          },
          "static": {}
        },
        "WebNavigationAction": {
          "prototype": {
            "getButton": {
              "value": function () { return this.get_button.apply(this, arguments); }
            },
            "getModifierState": {
              "value": function () { return this.get_modifier_state.apply(this, arguments); }
            },
            "getOriginalUri": {
              "value": function () { return this.get_original_uri.apply(this, arguments); }
            },
            "getReason": {
              "value": function () { return this.get_reason.apply(this, arguments); }
            },
            "getTargetFrame": {
              "value": function () { return this.get_target_frame.apply(this, arguments); }
            },
            "setOriginalUri": {
              "value": function () { return this.set_original_uri.apply(this, arguments); }
            },
            "setReason": {
              "value": function () { return this.set_reason.apply(this, arguments); }
            },
            "modifierState": {
              "get": function () { return this.modifier_state; },
              "set": function (value) { this.modifier_state = value; }
            },
            "originalUri": {
              "get": function () { return this.original_uri; },
              "set": function (value) { this.original_uri = value; }
            },
            "targetFrame": {
              "get": function () { return this.target_frame; },
              "set": function (value) { this.target_frame = value; }
            }
          },
          "static": {}
        },
        "WebPlugin": {
          "prototype": {
            "getDescription": {
              "value": function () { return this.get_description.apply(this, arguments); }
            },
            "getEnabled": {
              "value": function () { return this.get_enabled.apply(this, arguments); }
            },
            "getMimetypes": {
              "value": function () { return this.get_mimetypes.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getPath": {
              "value": function () { return this.get_path.apply(this, arguments); }
            },
            "setEnabled": {
              "value": function () { return this.set_enabled.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "WebPluginDatabase": {
          "prototype": {
            "getPluginForMimetype": {
              "value": function () { return this.get_plugin_for_mimetype.apply(this, arguments); }
            },
            "getPlugins": {
              "value": function () { return this.get_plugins.apply(this, arguments); }
            }
          },
          "static": {
            "pluginsListFree": {
              "value": function () { return this.plugins_list_free.apply(this, arguments); }
            }
          }
        },
        "WebPolicyDecision": {
          "prototype": {},
          "static": {}
        },
        "WebResource": {
          "prototype": {
            "getData": {
              "value": function () { return this.get_data.apply(this, arguments); }
            },
            "getEncoding": {
              "value": function () { return this.get_encoding.apply(this, arguments); }
            },
            "getFrameName": {
              "value": function () { return this.get_frame_name.apply(this, arguments); }
            },
            "getMimeType": {
              "value": function () { return this.get_mime_type.apply(this, arguments); }
            },
            "getUri": {
              "value": function () { return this.get_uri.apply(this, arguments); }
            },
            "frameName": {
              "get": function () { return this.frame_name; },
              "set": function (value) { this.frame_name = value; }
            },
            "mimeType": {
              "get": function () { return this.mime_type; },
              "set": function (value) { this.mime_type = value; }
            }
          },
          "static": {}
        },
        "WebSettings": {
          "prototype": {
            "getUserAgent": {
              "value": function () { return this.get_user_agent.apply(this, arguments); }
            },
            "autoLoadImages": {
              "get": function () { return this.auto_load_images; },
              "set": function (value) { this.auto_load_images = value; }
            },
            "autoResizeWindow": {
              "get": function () { return this.auto_resize_window; },
              "set": function (value) { this.auto_resize_window = value; }
            },
            "autoShrinkImages": {
              "get": function () { return this.auto_shrink_images; },
              "set": function (value) { this.auto_shrink_images = value; }
            },
            "cursiveFontFamily": {
              "get": function () { return this.cursive_font_family; },
              "set": function (value) { this.cursive_font_family = value; }
            },
            "defaultEncoding": {
              "get": function () { return this.default_encoding; },
              "set": function (value) { this.default_encoding = value; }
            },
            "defaultFontFamily": {
              "get": function () { return this.default_font_family; },
              "set": function (value) { this.default_font_family = value; }
            },
            "defaultFontSize": {
              "get": function () { return this.default_font_size; },
              "set": function (value) { this.default_font_size = value; }
            },
            "defaultMonospaceFontSize": {
              "get": function () { return this.default_monospace_font_size; },
              "set": function (value) { this.default_monospace_font_size = value; }
            },
            "editingBehavior": {
              "get": function () { return this.editing_behavior; },
              "set": function (value) { this.editing_behavior = value; }
            },
            "enableAcceleratedCompositing": {
              "get": function () { return this.enable_accelerated_compositing; },
              "set": function (value) { this.enable_accelerated_compositing = value; }
            },
            "enableCaretBrowsing": {
              "get": function () { return this.enable_caret_browsing; },
              "set": function (value) { this.enable_caret_browsing = value; }
            },
            "enableDefaultContextMenu": {
              "get": function () { return this.enable_default_context_menu; },
              "set": function (value) { this.enable_default_context_menu = value; }
            },
            "enableDeveloperExtras": {
              "get": function () { return this.enable_developer_extras; },
              "set": function (value) { this.enable_developer_extras = value; }
            },
            "enableDisplayOfInsecureContent": {
              "get": function () { return this.enable_display_of_insecure_content; },
              "set": function (value) { this.enable_display_of_insecure_content = value; }
            },
            "enableDnsPrefetching": {
              "get": function () { return this.enable_dns_prefetching; },
              "set": function (value) { this.enable_dns_prefetching = value; }
            },
            "enableDomPaste": {
              "get": function () { return this.enable_dom_paste; },
              "set": function (value) { this.enable_dom_paste = value; }
            },
            "enableFileAccessFromFileUris": {
              "get": function () { return this.enable_file_access_from_file_uris; },
              "set": function (value) { this.enable_file_access_from_file_uris = value; }
            },
            "enableFrameFlattening": {
              "get": function () { return this.enable_frame_flattening; },
              "set": function (value) { this.enable_frame_flattening = value; }
            },
            "enableFullscreen": {
              "get": function () { return this.enable_fullscreen; },
              "set": function (value) { this.enable_fullscreen = value; }
            },
            "enableHtml5Database": {
              "get": function () { return this.enable_html5_database; },
              "set": function (value) { this.enable_html5_database = value; }
            },
            "enableHtml5LocalStorage": {
              "get": function () { return this.enable_html5_local_storage; },
              "set": function (value) { this.enable_html5_local_storage = value; }
            },
            "enableHyperlinkAuditing": {
              "get": function () { return this.enable_hyperlink_auditing; },
              "set": function (value) { this.enable_hyperlink_auditing = value; }
            },
            "enableJavaApplet": {
              "get": function () { return this.enable_java_applet; },
              "set": function (value) { this.enable_java_applet = value; }
            },
            "enableMediaStream": {
              "get": function () { return this.enable_media_stream; },
              "set": function (value) { this.enable_media_stream = value; }
            },
            "enableMediasource": {
              "get": function () { return this.enable_mediasource; },
              "set": function (value) { this.enable_mediasource = value; }
            },
            "enableOfflineWebApplicationCache": {
              "get": function () { return this.enable_offline_web_application_cache; },
              "set": function (value) { this.enable_offline_web_application_cache = value; }
            },
            "enablePageCache": {
              "get": function () { return this.enable_page_cache; },
              "set": function (value) { this.enable_page_cache = value; }
            },
            "enablePlugins": {
              "get": function () { return this.enable_plugins; },
              "set": function (value) { this.enable_plugins = value; }
            },
            "enablePrivateBrowsing": {
              "get": function () { return this.enable_private_browsing; },
              "set": function (value) { this.enable_private_browsing = value; }
            },
            "enableRunningOfInsecureContent": {
              "get": function () { return this.enable_running_of_insecure_content; },
              "set": function (value) { this.enable_running_of_insecure_content = value; }
            },
            "enableScripts": {
              "get": function () { return this.enable_scripts; },
              "set": function (value) { this.enable_scripts = value; }
            },
            "enableSiteSpecificQuirks": {
              "get": function () { return this.enable_site_specific_quirks; },
              "set": function (value) { this.enable_site_specific_quirks = value; }
            },
            "enableSmoothScrolling": {
              "get": function () { return this.enable_smooth_scrolling; },
              "set": function (value) { this.enable_smooth_scrolling = value; }
            },
            "enableSpatialNavigation": {
              "get": function () { return this.enable_spatial_navigation; },
              "set": function (value) { this.enable_spatial_navigation = value; }
            },
            "enableSpellChecking": {
              "get": function () { return this.enable_spell_checking; },
              "set": function (value) { this.enable_spell_checking = value; }
            },
            "enableUniversalAccessFromFileUris": {
              "get": function () { return this.enable_universal_access_from_file_uris; },
              "set": function (value) { this.enable_universal_access_from_file_uris = value; }
            },
            "enableWebaudio": {
              "get": function () { return this.enable_webaudio; },
              "set": function (value) { this.enable_webaudio = value; }
            },
            "enableWebgl": {
              "get": function () { return this.enable_webgl; },
              "set": function (value) { this.enable_webgl = value; }
            },
            "enableXssAuditor": {
              "get": function () { return this.enable_xss_auditor; },
              "set": function (value) { this.enable_xss_auditor = value; }
            },
            "enforce96Dpi": {
              "get": function () { return this.enforce_96_dpi; },
              "set": function (value) { this.enforce_96_dpi = value; }
            },
            "fantasyFontFamily": {
              "get": function () { return this.fantasy_font_family; },
              "set": function (value) { this.fantasy_font_family = value; }
            },
            "html5LocalStorageDatabasePath": {
              "get": function () { return this.html5_local_storage_database_path; },
              "set": function (value) { this.html5_local_storage_database_path = value; }
            },
            "javascriptCanAccessClipboard": {
              "get": function () { return this.javascript_can_access_clipboard; },
              "set": function (value) { this.javascript_can_access_clipboard = value; }
            },
            "javascriptCanOpenWindowsAutomatically": {
              "get": function () { return this.javascript_can_open_windows_automatically; },
              "set": function (value) { this.javascript_can_open_windows_automatically = value; }
            },
            "mediaPlaybackAllowsInline": {
              "get": function () { return this.media_playback_allows_inline; },
              "set": function (value) { this.media_playback_allows_inline = value; }
            },
            "mediaPlaybackRequiresUserGesture": {
              "get": function () { return this.media_playback_requires_user_gesture; },
              "set": function (value) { this.media_playback_requires_user_gesture = value; }
            },
            "minimumFontSize": {
              "get": function () { return this.minimum_font_size; },
              "set": function (value) { this.minimum_font_size = value; }
            },
            "minimumLogicalFontSize": {
              "get": function () { return this.minimum_logical_font_size; },
              "set": function (value) { this.minimum_logical_font_size = value; }
            },
            "monospaceFontFamily": {
              "get": function () { return this.monospace_font_family; },
              "set": function (value) { this.monospace_font_family = value; }
            },
            "printBackgrounds": {
              "get": function () { return this.print_backgrounds; },
              "set": function (value) { this.print_backgrounds = value; }
            },
            "resizableTextAreas": {
              "get": function () { return this.resizable_text_areas; },
              "set": function (value) { this.resizable_text_areas = value; }
            },
            "respectImageOrientation": {
              "get": function () { return this.respect_image_orientation; },
              "set": function (value) { this.respect_image_orientation = value; }
            },
            "sansSerifFontFamily": {
              "get": function () { return this.sans_serif_font_family; },
              "set": function (value) { this.sans_serif_font_family = value; }
            },
            "serifFontFamily": {
              "get": function () { return this.serif_font_family; },
              "set": function (value) { this.serif_font_family = value; }
            },
            "spellCheckingLanguages": {
              "get": function () { return this.spell_checking_languages; },
              "set": function (value) { this.spell_checking_languages = value; }
            },
            "tabKeyCyclesThroughElements": {
              "get": function () { return this.tab_key_cycles_through_elements; },
              "set": function (value) { this.tab_key_cycles_through_elements = value; }
            },
            "userAgent": {
              "get": function () { return this.user_agent; },
              "set": function (value) { this.user_agent = value; }
            },
            "userStylesheetUri": {
              "get": function () { return this.user_stylesheet_uri; },
              "set": function (value) { this.user_stylesheet_uri = value; }
            },
            "zoomStep": {
              "get": function () { return this.zoom_step; },
              "set": function (value) { this.zoom_step = value; }
            }
          },
          "static": {}
        },
        "WebView": {
          "prototype": {
            "canCopyClipboard": {
              "value": function () { return this.can_copy_clipboard.apply(this, arguments); }
            },
            "canCutClipboard": {
              "value": function () { return this.can_cut_clipboard.apply(this, arguments); }
            },
            "canGoBack": {
              "value": function () { return this.can_go_back.apply(this, arguments); }
            },
            "canGoBackOrForward": {
              "value": function () { return this.can_go_back_or_forward.apply(this, arguments); }
            },
            "canGoForward": {
              "value": function () { return this.can_go_forward.apply(this, arguments); }
            },
            "canPasteClipboard": {
              "value": function () { return this.can_paste_clipboard.apply(this, arguments); }
            },
            "canRedo": {
              "value": function () { return this.can_redo.apply(this, arguments); }
            },
            "canShowMimeType": {
              "value": function () { return this.can_show_mime_type.apply(this, arguments); }
            },
            "canUndo": {
              "value": function () { return this.can_undo.apply(this, arguments); }
            },
            "copyClipboard": {
              "value": function () { return this.copy_clipboard.apply(this, arguments); }
            },
            "cutClipboard": {
              "value": function () { return this.cut_clipboard.apply(this, arguments); }
            },
            "deleteSelection": {
              "value": function () { return this.delete_selection.apply(this, arguments); }
            },
            "executeScript": {
              "value": function () { return this.execute_script.apply(this, arguments); }
            },
            "getBackForwardList": {
              "value": function () { return this.get_back_forward_list.apply(this, arguments); }
            },
            "getCopyTargetList": {
              "value": function () { return this.get_copy_target_list.apply(this, arguments); }
            },
            "getCustomEncoding": {
              "value": function () { return this.get_custom_encoding.apply(this, arguments); }
            },
            "getDomDocument": {
              "value": function () { return this.get_dom_document.apply(this, arguments); }
            },
            "getEditable": {
              "value": function () { return this.get_editable.apply(this, arguments); }
            },
            "getEncoding": {
              "value": function () { return this.get_encoding.apply(this, arguments); }
            },
            "getFocusedFrame": {
              "value": function () { return this.get_focused_frame.apply(this, arguments); }
            },
            "getFullContentZoom": {
              "value": function () { return this.get_full_content_zoom.apply(this, arguments); }
            },
            "getHitTestResult": {
              "value": function () { return this.get_hit_test_result.apply(this, arguments); }
            },
            "getIconPixbuf": {
              "value": function () { return this.get_icon_pixbuf.apply(this, arguments); }
            },
            "getIconUri": {
              "value": function () { return this.get_icon_uri.apply(this, arguments); }
            },
            "getInspector": {
              "value": function () { return this.get_inspector.apply(this, arguments); }
            },
            "getLoadStatus": {
              "value": function () { return this.get_load_status.apply(this, arguments); }
            },
            "getMainFrame": {
              "value": function () { return this.get_main_frame.apply(this, arguments); }
            },
            "getPasteTargetList": {
              "value": function () { return this.get_paste_target_list.apply(this, arguments); }
            },
            "getProgress": {
              "value": function () { return this.get_progress.apply(this, arguments); }
            },
            "getSettings": {
              "value": function () { return this.get_settings.apply(this, arguments); }
            },
            "getSnapshot": {
              "value": function () { return this.get_snapshot.apply(this, arguments); }
            },
            "getTitle": {
              "value": function () { return this.get_title.apply(this, arguments); }
            },
            "getTransparent": {
              "value": function () { return this.get_transparent.apply(this, arguments); }
            },
            "getUri": {
              "value": function () { return this.get_uri.apply(this, arguments); }
            },
            "getViewMode": {
              "value": function () { return this.get_view_mode.apply(this, arguments); }
            },
            "getViewSourceMode": {
              "value": function () { return this.get_view_source_mode.apply(this, arguments); }
            },
            "getViewportAttributes": {
              "value": function () { return this.get_viewport_attributes.apply(this, arguments); }
            },
            "getWindowFeatures": {
              "value": function () { return this.get_window_features.apply(this, arguments); }
            },
            "getZoomLevel": {
              "value": function () { return this.get_zoom_level.apply(this, arguments); }
            },
            "goBack": {
              "value": function () { return this.go_back.apply(this, arguments); }
            },
            "goBackOrForward": {
              "value": function () { return this.go_back_or_forward.apply(this, arguments); }
            },
            "goForward": {
              "value": function () { return this.go_forward.apply(this, arguments); }
            },
            "goToBackForwardItem": {
              "value": function () { return this.go_to_back_forward_item.apply(this, arguments); }
            },
            "hasSelection": {
              "value": function () { return this.has_selection.apply(this, arguments); }
            },
            "loadHtmlString": {
              "value": function () { return this.load_html_string.apply(this, arguments); }
            },
            "loadRequest": {
              "value": function () { return this.load_request.apply(this, arguments); }
            },
            "loadString": {
              "value": function () { return this.load_string.apply(this, arguments); }
            },
            "loadUri": {
              "value": function () { return this.load_uri.apply(this, arguments); }
            },
            "markTextMatches": {
              "value": function () { return this.mark_text_matches.apply(this, arguments); }
            },
            "moveCursor": {
              "value": function () { return this.move_cursor.apply(this, arguments); }
            },
            "pasteClipboard": {
              "value": function () { return this.paste_clipboard.apply(this, arguments); }
            },
            "reloadBypassCache": {
              "value": function () { return this.reload_bypass_cache.apply(this, arguments); }
            },
            "searchText": {
              "value": function () { return this.search_text.apply(this, arguments); }
            },
            "selectAll": {
              "value": function () { return this.select_all.apply(this, arguments); }
            },
            "setCustomEncoding": {
              "value": function () { return this.set_custom_encoding.apply(this, arguments); }
            },
            "setEditable": {
              "value": function () { return this.set_editable.apply(this, arguments); }
            },
            "setFullContentZoom": {
              "value": function () { return this.set_full_content_zoom.apply(this, arguments); }
            },
            "setHighlightTextMatches": {
              "value": function () { return this.set_highlight_text_matches.apply(this, arguments); }
            },
            "setMaintainsBackForwardList": {
              "value": function () { return this.set_maintains_back_forward_list.apply(this, arguments); }
            },
            "setSettings": {
              "value": function () { return this.set_settings.apply(this, arguments); }
            },
            "setTransparent": {
              "value": function () { return this.set_transparent.apply(this, arguments); }
            },
            "setViewMode": {
              "value": function () { return this.set_view_mode.apply(this, arguments); }
            },
            "setViewSourceMode": {
              "value": function () { return this.set_view_source_mode.apply(this, arguments); }
            },
            "setZoomLevel": {
              "value": function () { return this.set_zoom_level.apply(this, arguments); }
            },
            "stopLoading": {
              "value": function () { return this.stop_loading.apply(this, arguments); }
            },
            "tryGetFaviconPixbuf": {
              "value": function () { return this.try_get_favicon_pixbuf.apply(this, arguments); }
            },
            "unmarkTextMatches": {
              "value": function () { return this.unmark_text_matches.apply(this, arguments); }
            },
            "zoomIn": {
              "value": function () { return this.zoom_in.apply(this, arguments); }
            },
            "zoomOut": {
              "value": function () { return this.zoom_out.apply(this, arguments); }
            },
            "copyTargetList": {
              "get": function () { return this.copy_target_list; },
              "set": function (value) { this.copy_target_list = value; }
            },
            "customEncoding": {
              "get": function () { return this.custom_encoding; },
              "set": function (value) { this.custom_encoding = value; }
            },
            "fullContentZoom": {
              "get": function () { return this.full_content_zoom; },
              "set": function (value) { this.full_content_zoom = value; }
            },
            "iconUri": {
              "get": function () { return this.icon_uri; },
              "set": function (value) { this.icon_uri = value; }
            },
            "imContext": {
              "get": function () { return this.im_context; },
              "set": function (value) { this.im_context = value; }
            },
            "loadStatus": {
              "get": function () { return this.load_status; },
              "set": function (value) { this.load_status = value; }
            },
            "pasteTargetList": {
              "get": function () { return this.paste_target_list; },
              "set": function (value) { this.paste_target_list = value; }
            },
            "selfScrolling": {
              "get": function () { return this.self_scrolling; },
              "set": function (value) { this.self_scrolling = value; }
            },
            "viewMode": {
              "get": function () { return this.view_mode; },
              "set": function (value) { this.view_mode = value; }
            },
            "viewportAttributes": {
              "get": function () { return this.viewport_attributes; },
              "set": function (value) { this.viewport_attributes = value; }
            },
            "webInspector": {
              "get": function () { return this.web_inspector; },
              "set": function (value) { this.web_inspector = value; }
            },
            "windowFeatures": {
              "get": function () { return this.window_features; },
              "set": function (value) { this.window_features = value; }
            },
            "zoomLevel": {
              "get": function () { return this.zoom_level; },
              "set": function (value) { this.zoom_level = value; }
            }
          },
          "static": {}
        },
        "WebWindowFeatures": {
          "prototype": {
            "locationbarVisible": {
              "get": function () { return this.locationbar_visible; },
              "set": function (value) { this.locationbar_visible = value; }
            },
            "menubarVisible": {
              "get": function () { return this.menubar_visible; },
              "set": function (value) { this.menubar_visible = value; }
            },
            "scrollbarVisible": {
              "get": function () { return this.scrollbar_visible; },
              "set": function (value) { this.scrollbar_visible = value; }
            },
            "statusbarVisible": {
              "get": function () { return this.statusbar_visible; },
              "set": function (value) { this.statusbar_visible = value; }
            },
            "toolbarVisible": {
              "get": function () { return this.toolbar_visible; },
              "set": function (value) { this.toolbar_visible = value; }
            }
          },
          "static": {}
        }
      },
      "static": {
        "applicationCacheGetDatabaseDirectoryPath": {
          "value": function () { return this.application_cache_get_database_directory_path.apply(this, arguments); }
        },
        "applicationCacheGetMaximumSize": {
          "value": function () { return this.application_cache_get_maximum_size.apply(this, arguments); }
        },
        "applicationCacheSetMaximumSize": {
          "value": function () { return this.application_cache_set_maximum_size.apply(this, arguments); }
        },
        "checkVersion": {
          "value": function () { return this.check_version.apply(this, arguments); }
        },
        "contextMenuItemGetAction": {
          "value": function () { return this.context_menu_item_get_action.apply(this, arguments); }
        },
        "geolocationPolicyAllow": {
          "value": function () { return this.geolocation_policy_allow.apply(this, arguments); }
        },
        "geolocationPolicyDeny": {
          "value": function () { return this.geolocation_policy_deny.apply(this, arguments); }
        },
        "getCacheModel": {
          "value": function () { return this.get_cache_model.apply(this, arguments); }
        },
        "getDefaultSession": {
          "value": function () { return this.get_default_session.apply(this, arguments); }
        },
        "getDefaultWebDatabaseQuota": {
          "value": function () { return this.get_default_web_database_quota.apply(this, arguments); }
        },
        "getFaviconDatabase": {
          "value": function () { return this.get_favicon_database.apply(this, arguments); }
        },
        "getIconDatabase": {
          "value": function () { return this.get_icon_database.apply(this, arguments); }
        },
        "getSecurityPolicyForUriScheme": {
          "value": function () { return this.get_security_policy_for_uri_scheme.apply(this, arguments); }
        },
        "getTextChecker": {
          "value": function () { return this.get_text_checker.apply(this, arguments); }
        },
        "getWebDatabaseDirectoryPath": {
          "value": function () { return this.get_web_database_directory_path.apply(this, arguments); }
        },
        "getWebPluginDatabase": {
          "value": function () { return this.get_web_plugin_database.apply(this, arguments); }
        },
        "majorVersion": {
          "value": function () { return this.major_version.apply(this, arguments); }
        },
        "microVersion": {
          "value": function () { return this.micro_version.apply(this, arguments); }
        },
        "minorVersion": {
          "value": function () { return this.minor_version.apply(this, arguments); }
        },
        "networkErrorQuark": {
          "value": function () { return this.network_error_quark.apply(this, arguments); }
        },
        "pluginErrorQuark": {
          "value": function () { return this.plugin_error_quark.apply(this, arguments); }
        },
        "policyErrorQuark": {
          "value": function () { return this.policy_error_quark.apply(this, arguments); }
        },
        "removeAllWebDatabases": {
          "value": function () { return this.remove_all_web_databases.apply(this, arguments); }
        },
        "setCacheModel": {
          "value": function () { return this.set_cache_model.apply(this, arguments); }
        },
        "setDefaultWebDatabaseQuota": {
          "value": function () { return this.set_default_web_database_quota.apply(this, arguments); }
        },
        "setSecurityPolicyForUriScheme": {
          "value": function () { return this.set_security_policy_for_uri_scheme.apply(this, arguments); }
        },
        "setTextChecker": {
          "value": function () { return this.set_text_checker.apply(this, arguments); }
        },
        "setWebDatabaseDirectoryPath": {
          "value": function () { return this.set_web_database_directory_path.apply(this, arguments); }
        }
      }
    },
    "WebKit2": {
      "class": {
        "AuthenticationRequest": {
          "prototype": {
            "canSaveCredentials": {
              "value": function () { return this.can_save_credentials.apply(this, arguments); }
            },
            "getHost": {
              "value": function () { return this.get_host.apply(this, arguments); }
            },
            "getPort": {
              "value": function () { return this.get_port.apply(this, arguments); }
            },
            "getProposedCredential": {
              "value": function () { return this.get_proposed_credential.apply(this, arguments); }
            },
            "getRealm": {
              "value": function () { return this.get_realm.apply(this, arguments); }
            },
            "getScheme": {
              "value": function () { return this.get_scheme.apply(this, arguments); }
            },
            "isForProxy": {
              "value": function () { return this.is_for_proxy.apply(this, arguments); }
            },
            "isRetry": {
              "value": function () { return this.is_retry.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "BackForwardList": {
          "prototype": {
            "getBackItem": {
              "value": function () { return this.get_back_item.apply(this, arguments); }
            },
            "getBackList": {
              "value": function () { return this.get_back_list.apply(this, arguments); }
            },
            "getBackListWithLimit": {
              "value": function () { return this.get_back_list_with_limit.apply(this, arguments); }
            },
            "getCurrentItem": {
              "value": function () { return this.get_current_item.apply(this, arguments); }
            },
            "getForwardItem": {
              "value": function () { return this.get_forward_item.apply(this, arguments); }
            },
            "getForwardList": {
              "value": function () { return this.get_forward_list.apply(this, arguments); }
            },
            "getForwardListWithLimit": {
              "value": function () { return this.get_forward_list_with_limit.apply(this, arguments); }
            },
            "getLength": {
              "value": function () { return this.get_length.apply(this, arguments); }
            },
            "getNthItem": {
              "value": function () { return this.get_nth_item.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "BackForwardListItem": {
          "prototype": {
            "getOriginalUri": {
              "value": function () { return this.get_original_uri.apply(this, arguments); }
            },
            "getTitle": {
              "value": function () { return this.get_title.apply(this, arguments); }
            },
            "getUri": {
              "value": function () { return this.get_uri.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "ColorChooserRequest": {
          "prototype": {
            "getElementRectangle": {
              "value": function () { return this.get_element_rectangle.apply(this, arguments); }
            },
            "getRgba": {
              "value": function () { return this.get_rgba.apply(this, arguments); }
            },
            "setRgba": {
              "value": function () { return this.set_rgba.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "ContextMenu": {
          "prototype": {
            "getItemAtPosition": {
              "value": function () { return this.get_item_at_position.apply(this, arguments); }
            },
            "getItems": {
              "value": function () { return this.get_items.apply(this, arguments); }
            },
            "getNItems": {
              "value": function () { return this.get_n_items.apply(this, arguments); }
            },
            "getUserData": {
              "value": function () { return this.get_user_data.apply(this, arguments); }
            },
            "moveItem": {
              "value": function () { return this.move_item.apply(this, arguments); }
            },
            "removeAll": {
              "value": function () { return this.remove_all.apply(this, arguments); }
            },
            "setUserData": {
              "value": function () { return this.set_user_data.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "ContextMenuItem": {
          "prototype": {
            "getAction": {
              "value": function () { return this.get_action.apply(this, arguments); }
            },
            "getStockAction": {
              "value": function () { return this.get_stock_action.apply(this, arguments); }
            },
            "getSubmenu": {
              "value": function () { return this.get_submenu.apply(this, arguments); }
            },
            "isSeparator": {
              "value": function () { return this.is_separator.apply(this, arguments); }
            },
            "setSubmenu": {
              "value": function () { return this.set_submenu.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "CookieManager": {
          "prototype": {
            "deleteAllCookies": {
              "value": function () { return this.delete_all_cookies.apply(this, arguments); }
            },
            "deleteCookiesForDomain": {
              "value": function () { return this.delete_cookies_for_domain.apply(this, arguments); }
            },
            "getAcceptPolicy": {
              "value": function () { return this.get_accept_policy.apply(this, arguments); }
            },
            "getAcceptPolicyFinish": {
              "value": function () { return this.get_accept_policy_finish.apply(this, arguments); }
            },
            "getDomainsWithCookies": {
              "value": function () { return this.get_domains_with_cookies.apply(this, arguments); }
            },
            "getDomainsWithCookiesFinish": {
              "value": function () { return this.get_domains_with_cookies_finish.apply(this, arguments); }
            },
            "setAcceptPolicy": {
              "value": function () { return this.set_accept_policy.apply(this, arguments); }
            },
            "setPersistentStorage": {
              "value": function () { return this.set_persistent_storage.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Download": {
          "prototype": {
            "getAllowOverwrite": {
              "value": function () { return this.get_allow_overwrite.apply(this, arguments); }
            },
            "getDestination": {
              "value": function () { return this.get_destination.apply(this, arguments); }
            },
            "getElapsedTime": {
              "value": function () { return this.get_elapsed_time.apply(this, arguments); }
            },
            "getEstimatedProgress": {
              "value": function () { return this.get_estimated_progress.apply(this, arguments); }
            },
            "getReceivedDataLength": {
              "value": function () { return this.get_received_data_length.apply(this, arguments); }
            },
            "getRequest": {
              "value": function () { return this.get_request.apply(this, arguments); }
            },
            "getResponse": {
              "value": function () { return this.get_response.apply(this, arguments); }
            },
            "getWebView": {
              "value": function () { return this.get_web_view.apply(this, arguments); }
            },
            "setAllowOverwrite": {
              "value": function () { return this.set_allow_overwrite.apply(this, arguments); }
            },
            "setDestination": {
              "value": function () { return this.set_destination.apply(this, arguments); }
            },
            "allowOverwrite": {
              "get": function () { return this.allow_overwrite; },
              "set": function (value) { this.allow_overwrite = value; }
            },
            "estimatedProgress": {
              "get": function () { return this.estimated_progress; },
              "set": function (value) { this.estimated_progress = value; }
            }
          },
          "static": {}
        },
        "EditorState": {
          "prototype": {
            "getTypingAttributes": {
              "value": function () { return this.get_typing_attributes.apply(this, arguments); }
            },
            "typingAttributes": {
              "get": function () { return this.typing_attributes; },
              "set": function (value) { this.typing_attributes = value; }
            }
          },
          "static": {}
        },
        "FaviconDatabase": {
          "prototype": {
            "getFavicon": {
              "value": function () { return this.get_favicon.apply(this, arguments); }
            },
            "getFaviconFinish": {
              "value": function () { return this.get_favicon_finish.apply(this, arguments); }
            },
            "getFaviconUri": {
              "value": function () { return this.get_favicon_uri.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "FileChooserRequest": {
          "prototype": {
            "getMimeTypes": {
              "value": function () { return this.get_mime_types.apply(this, arguments); }
            },
            "getMimeTypesFilter": {
              "value": function () { return this.get_mime_types_filter.apply(this, arguments); }
            },
            "getSelectMultiple": {
              "value": function () { return this.get_select_multiple.apply(this, arguments); }
            },
            "getSelectedFiles": {
              "value": function () { return this.get_selected_files.apply(this, arguments); }
            },
            "selectFiles": {
              "value": function () { return this.select_files.apply(this, arguments); }
            },
            "mimeTypes": {
              "get": function () { return this.mime_types; },
              "set": function (value) { this.mime_types = value; }
            },
            "selectMultiple": {
              "get": function () { return this.select_multiple; },
              "set": function (value) { this.select_multiple = value; }
            },
            "selectedFiles": {
              "get": function () { return this.selected_files; },
              "set": function (value) { this.selected_files = value; }
            }
          },
          "static": {}
        },
        "FindController": {
          "prototype": {
            "countMatches": {
              "value": function () { return this.count_matches.apply(this, arguments); }
            },
            "getMaxMatchCount": {
              "value": function () { return this.get_max_match_count.apply(this, arguments); }
            },
            "getOptions": {
              "value": function () { return this.get_options.apply(this, arguments); }
            },
            "getSearchText": {
              "value": function () { return this.get_search_text.apply(this, arguments); }
            },
            "getWebView": {
              "value": function () { return this.get_web_view.apply(this, arguments); }
            },
            "searchFinish": {
              "value": function () { return this.search_finish.apply(this, arguments); }
            },
            "searchNext": {
              "value": function () { return this.search_next.apply(this, arguments); }
            },
            "searchPrevious": {
              "value": function () { return this.search_previous.apply(this, arguments); }
            },
            "maxMatchCount": {
              "get": function () { return this.max_match_count; },
              "set": function (value) { this.max_match_count = value; }
            },
            "webView": {
              "get": function () { return this.web_view; },
              "set": function (value) { this.web_view = value; }
            }
          },
          "static": {}
        },
        "FormSubmissionRequest": {
          "prototype": {
            "getTextFields": {
              "value": function () { return this.get_text_fields.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "GeolocationPermissionRequest": {
          "prototype": {},
          "static": {}
        },
        "HitTestResult": {
          "prototype": {
            "contextIsEditable": {
              "value": function () { return this.context_is_editable.apply(this, arguments); }
            },
            "contextIsImage": {
              "value": function () { return this.context_is_image.apply(this, arguments); }
            },
            "contextIsLink": {
              "value": function () { return this.context_is_link.apply(this, arguments); }
            },
            "contextIsMedia": {
              "value": function () { return this.context_is_media.apply(this, arguments); }
            },
            "contextIsScrollbar": {
              "value": function () { return this.context_is_scrollbar.apply(this, arguments); }
            },
            "contextIsSelection": {
              "value": function () { return this.context_is_selection.apply(this, arguments); }
            },
            "getContext": {
              "value": function () { return this.get_context.apply(this, arguments); }
            },
            "getImageUri": {
              "value": function () { return this.get_image_uri.apply(this, arguments); }
            },
            "getLinkLabel": {
              "value": function () { return this.get_link_label.apply(this, arguments); }
            },
            "getLinkTitle": {
              "value": function () { return this.get_link_title.apply(this, arguments); }
            },
            "getLinkUri": {
              "value": function () { return this.get_link_uri.apply(this, arguments); }
            },
            "getMediaUri": {
              "value": function () { return this.get_media_uri.apply(this, arguments); }
            },
            "imageUri": {
              "get": function () { return this.image_uri; },
              "set": function (value) { this.image_uri = value; }
            },
            "linkLabel": {
              "get": function () { return this.link_label; },
              "set": function (value) { this.link_label = value; }
            },
            "linkTitle": {
              "get": function () { return this.link_title; },
              "set": function (value) { this.link_title = value; }
            },
            "linkUri": {
              "get": function () { return this.link_uri; },
              "set": function (value) { this.link_uri = value; }
            },
            "mediaUri": {
              "get": function () { return this.media_uri; },
              "set": function (value) { this.media_uri = value; }
            }
          },
          "static": {}
        },
        "InstallMissingMediaPluginsPermissionRequest": {
          "prototype": {
            "getDescription": {
              "value": function () { return this.get_description.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "NavigationPolicyDecision": {
          "prototype": {
            "getFrameName": {
              "value": function () { return this.get_frame_name.apply(this, arguments); }
            },
            "getModifiers": {
              "value": function () { return this.get_modifiers.apply(this, arguments); }
            },
            "getMouseButton": {
              "value": function () { return this.get_mouse_button.apply(this, arguments); }
            },
            "getNavigationAction": {
              "value": function () { return this.get_navigation_action.apply(this, arguments); }
            },
            "getNavigationType": {
              "value": function () { return this.get_navigation_type.apply(this, arguments); }
            },
            "getRequest": {
              "value": function () { return this.get_request.apply(this, arguments); }
            },
            "frameName": {
              "get": function () { return this.frame_name; },
              "set": function (value) { this.frame_name = value; }
            },
            "mouseButton": {
              "get": function () { return this.mouse_button; },
              "set": function (value) { this.mouse_button = value; }
            },
            "navigationAction": {
              "get": function () { return this.navigation_action; },
              "set": function (value) { this.navigation_action = value; }
            },
            "navigationType": {
              "get": function () { return this.navigation_type; },
              "set": function (value) { this.navigation_type = value; }
            }
          },
          "static": {}
        },
        "Notification": {
          "prototype": {
            "getBody": {
              "value": function () { return this.get_body.apply(this, arguments); }
            },
            "getId": {
              "value": function () { return this.get_id.apply(this, arguments); }
            },
            "getTitle": {
              "value": function () { return this.get_title.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "NotificationPermissionRequest": {
          "prototype": {},
          "static": {}
        },
        "Plugin": {
          "prototype": {
            "getDescription": {
              "value": function () { return this.get_description.apply(this, arguments); }
            },
            "getMimeInfoList": {
              "value": function () { return this.get_mime_info_list.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getPath": {
              "value": function () { return this.get_path.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "PolicyDecision": {
          "prototype": {},
          "static": {}
        },
        "PrintOperation": {
          "prototype": {
            "getPageSetup": {
              "value": function () { return this.get_page_setup.apply(this, arguments); }
            },
            "getPrintSettings": {
              "value": function () { return this.get_print_settings.apply(this, arguments); }
            },
            "runDialog": {
              "value": function () { return this.run_dialog.apply(this, arguments); }
            },
            "setPageSetup": {
              "value": function () { return this.set_page_setup.apply(this, arguments); }
            },
            "setPrintSettings": {
              "value": function () { return this.set_print_settings.apply(this, arguments); }
            },
            "pageSetup": {
              "get": function () { return this.page_setup; },
              "set": function (value) { this.page_setup = value; }
            },
            "printSettings": {
              "get": function () { return this.print_settings; },
              "set": function (value) { this.print_settings = value; }
            },
            "webView": {
              "get": function () { return this.web_view; },
              "set": function (value) { this.web_view = value; }
            }
          },
          "static": {}
        },
        "ResponsePolicyDecision": {
          "prototype": {
            "getRequest": {
              "value": function () { return this.get_request.apply(this, arguments); }
            },
            "getResponse": {
              "value": function () { return this.get_response.apply(this, arguments); }
            },
            "isMimeTypeSupported": {
              "value": function () { return this.is_mime_type_supported.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "SecurityManager": {
          "prototype": {
            "registerUriSchemeAsCorsEnabled": {
              "value": function () { return this.register_uri_scheme_as_cors_enabled.apply(this, arguments); }
            },
            "registerUriSchemeAsDisplayIsolated": {
              "value": function () { return this.register_uri_scheme_as_display_isolated.apply(this, arguments); }
            },
            "registerUriSchemeAsEmptyDocument": {
              "value": function () { return this.register_uri_scheme_as_empty_document.apply(this, arguments); }
            },
            "registerUriSchemeAsLocal": {
              "value": function () { return this.register_uri_scheme_as_local.apply(this, arguments); }
            },
            "registerUriSchemeAsNoAccess": {
              "value": function () { return this.register_uri_scheme_as_no_access.apply(this, arguments); }
            },
            "registerUriSchemeAsSecure": {
              "value": function () { return this.register_uri_scheme_as_secure.apply(this, arguments); }
            },
            "uriSchemeIsCorsEnabled": {
              "value": function () { return this.uri_scheme_is_cors_enabled.apply(this, arguments); }
            },
            "uriSchemeIsDisplayIsolated": {
              "value": function () { return this.uri_scheme_is_display_isolated.apply(this, arguments); }
            },
            "uriSchemeIsEmptyDocument": {
              "value": function () { return this.uri_scheme_is_empty_document.apply(this, arguments); }
            },
            "uriSchemeIsLocal": {
              "value": function () { return this.uri_scheme_is_local.apply(this, arguments); }
            },
            "uriSchemeIsNoAccess": {
              "value": function () { return this.uri_scheme_is_no_access.apply(this, arguments); }
            },
            "uriSchemeIsSecure": {
              "value": function () { return this.uri_scheme_is_secure.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Settings": {
          "prototype": {
            "getAllowFileAccessFromFileUrls": {
              "value": function () { return this.get_allow_file_access_from_file_urls.apply(this, arguments); }
            },
            "getAllowModalDialogs": {
              "value": function () { return this.get_allow_modal_dialogs.apply(this, arguments); }
            },
            "getAutoLoadImages": {
              "value": function () { return this.get_auto_load_images.apply(this, arguments); }
            },
            "getCursiveFontFamily": {
              "value": function () { return this.get_cursive_font_family.apply(this, arguments); }
            },
            "getDefaultCharset": {
              "value": function () { return this.get_default_charset.apply(this, arguments); }
            },
            "getDefaultFontFamily": {
              "value": function () { return this.get_default_font_family.apply(this, arguments); }
            },
            "getDefaultFontSize": {
              "value": function () { return this.get_default_font_size.apply(this, arguments); }
            },
            "getDefaultMonospaceFontSize": {
              "value": function () { return this.get_default_monospace_font_size.apply(this, arguments); }
            },
            "getDrawCompositingIndicators": {
              "value": function () { return this.get_draw_compositing_indicators.apply(this, arguments); }
            },
            "getEnableAccelerated2dCanvas": {
              "value": function () { return this.get_enable_accelerated_2d_canvas.apply(this, arguments); }
            },
            "getEnableCaretBrowsing": {
              "value": function () { return this.get_enable_caret_browsing.apply(this, arguments); }
            },
            "getEnableDeveloperExtras": {
              "value": function () { return this.get_enable_developer_extras.apply(this, arguments); }
            },
            "getEnableDnsPrefetching": {
              "value": function () { return this.get_enable_dns_prefetching.apply(this, arguments); }
            },
            "getEnableFrameFlattening": {
              "value": function () { return this.get_enable_frame_flattening.apply(this, arguments); }
            },
            "getEnableFullscreen": {
              "value": function () { return this.get_enable_fullscreen.apply(this, arguments); }
            },
            "getEnableHtml5Database": {
              "value": function () { return this.get_enable_html5_database.apply(this, arguments); }
            },
            "getEnableHtml5LocalStorage": {
              "value": function () { return this.get_enable_html5_local_storage.apply(this, arguments); }
            },
            "getEnableHyperlinkAuditing": {
              "value": function () { return this.get_enable_hyperlink_auditing.apply(this, arguments); }
            },
            "getEnableJava": {
              "value": function () { return this.get_enable_java.apply(this, arguments); }
            },
            "getEnableJavascript": {
              "value": function () { return this.get_enable_javascript.apply(this, arguments); }
            },
            "getEnableMediaStream": {
              "value": function () { return this.get_enable_media_stream.apply(this, arguments); }
            },
            "getEnableMediasource": {
              "value": function () { return this.get_enable_mediasource.apply(this, arguments); }
            },
            "getEnableOfflineWebApplicationCache": {
              "value": function () { return this.get_enable_offline_web_application_cache.apply(this, arguments); }
            },
            "getEnablePageCache": {
              "value": function () { return this.get_enable_page_cache.apply(this, arguments); }
            },
            "getEnablePlugins": {
              "value": function () { return this.get_enable_plugins.apply(this, arguments); }
            },
            "getEnablePrivateBrowsing": {
              "value": function () { return this.get_enable_private_browsing.apply(this, arguments); }
            },
            "getEnableResizableTextAreas": {
              "value": function () { return this.get_enable_resizable_text_areas.apply(this, arguments); }
            },
            "getEnableSiteSpecificQuirks": {
              "value": function () { return this.get_enable_site_specific_quirks.apply(this, arguments); }
            },
            "getEnableSmoothScrolling": {
              "value": function () { return this.get_enable_smooth_scrolling.apply(this, arguments); }
            },
            "getEnableSpatialNavigation": {
              "value": function () { return this.get_enable_spatial_navigation.apply(this, arguments); }
            },
            "getEnableTabsToLinks": {
              "value": function () { return this.get_enable_tabs_to_links.apply(this, arguments); }
            },
            "getEnableWebaudio": {
              "value": function () { return this.get_enable_webaudio.apply(this, arguments); }
            },
            "getEnableWebgl": {
              "value": function () { return this.get_enable_webgl.apply(this, arguments); }
            },
            "getEnableWriteConsoleMessagesToStdout": {
              "value": function () { return this.get_enable_write_console_messages_to_stdout.apply(this, arguments); }
            },
            "getEnableXssAuditor": {
              "value": function () { return this.get_enable_xss_auditor.apply(this, arguments); }
            },
            "getFantasyFontFamily": {
              "value": function () { return this.get_fantasy_font_family.apply(this, arguments); }
            },
            "getJavascriptCanAccessClipboard": {
              "value": function () { return this.get_javascript_can_access_clipboard.apply(this, arguments); }
            },
            "getJavascriptCanOpenWindowsAutomatically": {
              "value": function () { return this.get_javascript_can_open_windows_automatically.apply(this, arguments); }
            },
            "getLoadIconsIgnoringImageLoadSetting": {
              "value": function () { return this.get_load_icons_ignoring_image_load_setting.apply(this, arguments); }
            },
            "getMediaPlaybackAllowsInline": {
              "value": function () { return this.get_media_playback_allows_inline.apply(this, arguments); }
            },
            "getMediaPlaybackRequiresUserGesture": {
              "value": function () { return this.get_media_playback_requires_user_gesture.apply(this, arguments); }
            },
            "getMinimumFontSize": {
              "value": function () { return this.get_minimum_font_size.apply(this, arguments); }
            },
            "getMonospaceFontFamily": {
              "value": function () { return this.get_monospace_font_family.apply(this, arguments); }
            },
            "getPictographFontFamily": {
              "value": function () { return this.get_pictograph_font_family.apply(this, arguments); }
            },
            "getPrintBackgrounds": {
              "value": function () { return this.get_print_backgrounds.apply(this, arguments); }
            },
            "getSansSerifFontFamily": {
              "value": function () { return this.get_sans_serif_font_family.apply(this, arguments); }
            },
            "getSerifFontFamily": {
              "value": function () { return this.get_serif_font_family.apply(this, arguments); }
            },
            "getUserAgent": {
              "value": function () { return this.get_user_agent.apply(this, arguments); }
            },
            "getZoomTextOnly": {
              "value": function () { return this.get_zoom_text_only.apply(this, arguments); }
            },
            "setAllowFileAccessFromFileUrls": {
              "value": function () { return this.set_allow_file_access_from_file_urls.apply(this, arguments); }
            },
            "setAllowModalDialogs": {
              "value": function () { return this.set_allow_modal_dialogs.apply(this, arguments); }
            },
            "setAutoLoadImages": {
              "value": function () { return this.set_auto_load_images.apply(this, arguments); }
            },
            "setCursiveFontFamily": {
              "value": function () { return this.set_cursive_font_family.apply(this, arguments); }
            },
            "setDefaultCharset": {
              "value": function () { return this.set_default_charset.apply(this, arguments); }
            },
            "setDefaultFontFamily": {
              "value": function () { return this.set_default_font_family.apply(this, arguments); }
            },
            "setDefaultFontSize": {
              "value": function () { return this.set_default_font_size.apply(this, arguments); }
            },
            "setDefaultMonospaceFontSize": {
              "value": function () { return this.set_default_monospace_font_size.apply(this, arguments); }
            },
            "setDrawCompositingIndicators": {
              "value": function () { return this.set_draw_compositing_indicators.apply(this, arguments); }
            },
            "setEnableAccelerated2dCanvas": {
              "value": function () { return this.set_enable_accelerated_2d_canvas.apply(this, arguments); }
            },
            "setEnableCaretBrowsing": {
              "value": function () { return this.set_enable_caret_browsing.apply(this, arguments); }
            },
            "setEnableDeveloperExtras": {
              "value": function () { return this.set_enable_developer_extras.apply(this, arguments); }
            },
            "setEnableDnsPrefetching": {
              "value": function () { return this.set_enable_dns_prefetching.apply(this, arguments); }
            },
            "setEnableFrameFlattening": {
              "value": function () { return this.set_enable_frame_flattening.apply(this, arguments); }
            },
            "setEnableFullscreen": {
              "value": function () { return this.set_enable_fullscreen.apply(this, arguments); }
            },
            "setEnableHtml5Database": {
              "value": function () { return this.set_enable_html5_database.apply(this, arguments); }
            },
            "setEnableHtml5LocalStorage": {
              "value": function () { return this.set_enable_html5_local_storage.apply(this, arguments); }
            },
            "setEnableHyperlinkAuditing": {
              "value": function () { return this.set_enable_hyperlink_auditing.apply(this, arguments); }
            },
            "setEnableJava": {
              "value": function () { return this.set_enable_java.apply(this, arguments); }
            },
            "setEnableJavascript": {
              "value": function () { return this.set_enable_javascript.apply(this, arguments); }
            },
            "setEnableMediaStream": {
              "value": function () { return this.set_enable_media_stream.apply(this, arguments); }
            },
            "setEnableMediasource": {
              "value": function () { return this.set_enable_mediasource.apply(this, arguments); }
            },
            "setEnableOfflineWebApplicationCache": {
              "value": function () { return this.set_enable_offline_web_application_cache.apply(this, arguments); }
            },
            "setEnablePageCache": {
              "value": function () { return this.set_enable_page_cache.apply(this, arguments); }
            },
            "setEnablePlugins": {
              "value": function () { return this.set_enable_plugins.apply(this, arguments); }
            },
            "setEnablePrivateBrowsing": {
              "value": function () { return this.set_enable_private_browsing.apply(this, arguments); }
            },
            "setEnableResizableTextAreas": {
              "value": function () { return this.set_enable_resizable_text_areas.apply(this, arguments); }
            },
            "setEnableSiteSpecificQuirks": {
              "value": function () { return this.set_enable_site_specific_quirks.apply(this, arguments); }
            },
            "setEnableSmoothScrolling": {
              "value": function () { return this.set_enable_smooth_scrolling.apply(this, arguments); }
            },
            "setEnableSpatialNavigation": {
              "value": function () { return this.set_enable_spatial_navigation.apply(this, arguments); }
            },
            "setEnableTabsToLinks": {
              "value": function () { return this.set_enable_tabs_to_links.apply(this, arguments); }
            },
            "setEnableWebaudio": {
              "value": function () { return this.set_enable_webaudio.apply(this, arguments); }
            },
            "setEnableWebgl": {
              "value": function () { return this.set_enable_webgl.apply(this, arguments); }
            },
            "setEnableWriteConsoleMessagesToStdout": {
              "value": function () { return this.set_enable_write_console_messages_to_stdout.apply(this, arguments); }
            },
            "setEnableXssAuditor": {
              "value": function () { return this.set_enable_xss_auditor.apply(this, arguments); }
            },
            "setFantasyFontFamily": {
              "value": function () { return this.set_fantasy_font_family.apply(this, arguments); }
            },
            "setJavascriptCanAccessClipboard": {
              "value": function () { return this.set_javascript_can_access_clipboard.apply(this, arguments); }
            },
            "setJavascriptCanOpenWindowsAutomatically": {
              "value": function () { return this.set_javascript_can_open_windows_automatically.apply(this, arguments); }
            },
            "setLoadIconsIgnoringImageLoadSetting": {
              "value": function () { return this.set_load_icons_ignoring_image_load_setting.apply(this, arguments); }
            },
            "setMediaPlaybackAllowsInline": {
              "value": function () { return this.set_media_playback_allows_inline.apply(this, arguments); }
            },
            "setMediaPlaybackRequiresUserGesture": {
              "value": function () { return this.set_media_playback_requires_user_gesture.apply(this, arguments); }
            },
            "setMinimumFontSize": {
              "value": function () { return this.set_minimum_font_size.apply(this, arguments); }
            },
            "setMonospaceFontFamily": {
              "value": function () { return this.set_monospace_font_family.apply(this, arguments); }
            },
            "setPictographFontFamily": {
              "value": function () { return this.set_pictograph_font_family.apply(this, arguments); }
            },
            "setPrintBackgrounds": {
              "value": function () { return this.set_print_backgrounds.apply(this, arguments); }
            },
            "setSansSerifFontFamily": {
              "value": function () { return this.set_sans_serif_font_family.apply(this, arguments); }
            },
            "setSerifFontFamily": {
              "value": function () { return this.set_serif_font_family.apply(this, arguments); }
            },
            "setUserAgent": {
              "value": function () { return this.set_user_agent.apply(this, arguments); }
            },
            "setUserAgentWithApplicationDetails": {
              "value": function () { return this.set_user_agent_with_application_details.apply(this, arguments); }
            },
            "setZoomTextOnly": {
              "value": function () { return this.set_zoom_text_only.apply(this, arguments); }
            },
            "allowFileAccessFromFileUrls": {
              "get": function () { return this.allow_file_access_from_file_urls; },
              "set": function (value) { this.allow_file_access_from_file_urls = value; }
            },
            "allowModalDialogs": {
              "get": function () { return this.allow_modal_dialogs; },
              "set": function (value) { this.allow_modal_dialogs = value; }
            },
            "autoLoadImages": {
              "get": function () { return this.auto_load_images; },
              "set": function (value) { this.auto_load_images = value; }
            },
            "cursiveFontFamily": {
              "get": function () { return this.cursive_font_family; },
              "set": function (value) { this.cursive_font_family = value; }
            },
            "defaultCharset": {
              "get": function () { return this.default_charset; },
              "set": function (value) { this.default_charset = value; }
            },
            "defaultFontFamily": {
              "get": function () { return this.default_font_family; },
              "set": function (value) { this.default_font_family = value; }
            },
            "defaultFontSize": {
              "get": function () { return this.default_font_size; },
              "set": function (value) { this.default_font_size = value; }
            },
            "defaultMonospaceFontSize": {
              "get": function () { return this.default_monospace_font_size; },
              "set": function (value) { this.default_monospace_font_size = value; }
            },
            "drawCompositingIndicators": {
              "get": function () { return this.draw_compositing_indicators; },
              "set": function (value) { this.draw_compositing_indicators = value; }
            },
            "enableAccelerated2dCanvas": {
              "get": function () { return this.enable_accelerated_2d_canvas; },
              "set": function (value) { this.enable_accelerated_2d_canvas = value; }
            },
            "enableCaretBrowsing": {
              "get": function () { return this.enable_caret_browsing; },
              "set": function (value) { this.enable_caret_browsing = value; }
            },
            "enableDeveloperExtras": {
              "get": function () { return this.enable_developer_extras; },
              "set": function (value) { this.enable_developer_extras = value; }
            },
            "enableDnsPrefetching": {
              "get": function () { return this.enable_dns_prefetching; },
              "set": function (value) { this.enable_dns_prefetching = value; }
            },
            "enableFrameFlattening": {
              "get": function () { return this.enable_frame_flattening; },
              "set": function (value) { this.enable_frame_flattening = value; }
            },
            "enableFullscreen": {
              "get": function () { return this.enable_fullscreen; },
              "set": function (value) { this.enable_fullscreen = value; }
            },
            "enableHtml5Database": {
              "get": function () { return this.enable_html5_database; },
              "set": function (value) { this.enable_html5_database = value; }
            },
            "enableHtml5LocalStorage": {
              "get": function () { return this.enable_html5_local_storage; },
              "set": function (value) { this.enable_html5_local_storage = value; }
            },
            "enableHyperlinkAuditing": {
              "get": function () { return this.enable_hyperlink_auditing; },
              "set": function (value) { this.enable_hyperlink_auditing = value; }
            },
            "enableJava": {
              "get": function () { return this.enable_java; },
              "set": function (value) { this.enable_java = value; }
            },
            "enableJavascript": {
              "get": function () { return this.enable_javascript; },
              "set": function (value) { this.enable_javascript = value; }
            },
            "enableMediaStream": {
              "get": function () { return this.enable_media_stream; },
              "set": function (value) { this.enable_media_stream = value; }
            },
            "enableMediasource": {
              "get": function () { return this.enable_mediasource; },
              "set": function (value) { this.enable_mediasource = value; }
            },
            "enableOfflineWebApplicationCache": {
              "get": function () { return this.enable_offline_web_application_cache; },
              "set": function (value) { this.enable_offline_web_application_cache = value; }
            },
            "enablePageCache": {
              "get": function () { return this.enable_page_cache; },
              "set": function (value) { this.enable_page_cache = value; }
            },
            "enablePlugins": {
              "get": function () { return this.enable_plugins; },
              "set": function (value) { this.enable_plugins = value; }
            },
            "enablePrivateBrowsing": {
              "get": function () { return this.enable_private_browsing; },
              "set": function (value) { this.enable_private_browsing = value; }
            },
            "enableResizableTextAreas": {
              "get": function () { return this.enable_resizable_text_areas; },
              "set": function (value) { this.enable_resizable_text_areas = value; }
            },
            "enableSiteSpecificQuirks": {
              "get": function () { return this.enable_site_specific_quirks; },
              "set": function (value) { this.enable_site_specific_quirks = value; }
            },
            "enableSmoothScrolling": {
              "get": function () { return this.enable_smooth_scrolling; },
              "set": function (value) { this.enable_smooth_scrolling = value; }
            },
            "enableSpatialNavigation": {
              "get": function () { return this.enable_spatial_navigation; },
              "set": function (value) { this.enable_spatial_navigation = value; }
            },
            "enableTabsToLinks": {
              "get": function () { return this.enable_tabs_to_links; },
              "set": function (value) { this.enable_tabs_to_links = value; }
            },
            "enableWebaudio": {
              "get": function () { return this.enable_webaudio; },
              "set": function (value) { this.enable_webaudio = value; }
            },
            "enableWebgl": {
              "get": function () { return this.enable_webgl; },
              "set": function (value) { this.enable_webgl = value; }
            },
            "enableWriteConsoleMessagesToStdout": {
              "get": function () { return this.enable_write_console_messages_to_stdout; },
              "set": function (value) { this.enable_write_console_messages_to_stdout = value; }
            },
            "enableXssAuditor": {
              "get": function () { return this.enable_xss_auditor; },
              "set": function (value) { this.enable_xss_auditor = value; }
            },
            "fantasyFontFamily": {
              "get": function () { return this.fantasy_font_family; },
              "set": function (value) { this.fantasy_font_family = value; }
            },
            "javascriptCanAccessClipboard": {
              "get": function () { return this.javascript_can_access_clipboard; },
              "set": function (value) { this.javascript_can_access_clipboard = value; }
            },
            "javascriptCanOpenWindowsAutomatically": {
              "get": function () { return this.javascript_can_open_windows_automatically; },
              "set": function (value) { this.javascript_can_open_windows_automatically = value; }
            },
            "loadIconsIgnoringImageLoadSetting": {
              "get": function () { return this.load_icons_ignoring_image_load_setting; },
              "set": function (value) { this.load_icons_ignoring_image_load_setting = value; }
            },
            "mediaPlaybackAllowsInline": {
              "get": function () { return this.media_playback_allows_inline; },
              "set": function (value) { this.media_playback_allows_inline = value; }
            },
            "mediaPlaybackRequiresUserGesture": {
              "get": function () { return this.media_playback_requires_user_gesture; },
              "set": function (value) { this.media_playback_requires_user_gesture = value; }
            },
            "minimumFontSize": {
              "get": function () { return this.minimum_font_size; },
              "set": function (value) { this.minimum_font_size = value; }
            },
            "monospaceFontFamily": {
              "get": function () { return this.monospace_font_family; },
              "set": function (value) { this.monospace_font_family = value; }
            },
            "pictographFontFamily": {
              "get": function () { return this.pictograph_font_family; },
              "set": function (value) { this.pictograph_font_family = value; }
            },
            "printBackgrounds": {
              "get": function () { return this.print_backgrounds; },
              "set": function (value) { this.print_backgrounds = value; }
            },
            "sansSerifFontFamily": {
              "get": function () { return this.sans_serif_font_family; },
              "set": function (value) { this.sans_serif_font_family = value; }
            },
            "serifFontFamily": {
              "get": function () { return this.serif_font_family; },
              "set": function (value) { this.serif_font_family = value; }
            },
            "userAgent": {
              "get": function () { return this.user_agent; },
              "set": function (value) { this.user_agent = value; }
            },
            "zoomTextOnly": {
              "get": function () { return this.zoom_text_only; },
              "set": function (value) { this.zoom_text_only = value; }
            }
          },
          "static": {}
        },
        "URIRequest": {
          "prototype": {
            "getHttpHeaders": {
              "value": function () { return this.get_http_headers.apply(this, arguments); }
            },
            "getUri": {
              "value": function () { return this.get_uri.apply(this, arguments); }
            },
            "setUri": {
              "value": function () { return this.set_uri.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "URIResponse": {
          "prototype": {
            "getContentLength": {
              "value": function () { return this.get_content_length.apply(this, arguments); }
            },
            "getHttpHeaders": {
              "value": function () { return this.get_http_headers.apply(this, arguments); }
            },
            "getMimeType": {
              "value": function () { return this.get_mime_type.apply(this, arguments); }
            },
            "getStatusCode": {
              "value": function () { return this.get_status_code.apply(this, arguments); }
            },
            "getSuggestedFilename": {
              "value": function () { return this.get_suggested_filename.apply(this, arguments); }
            },
            "getUri": {
              "value": function () { return this.get_uri.apply(this, arguments); }
            },
            "contentLength": {
              "get": function () { return this.content_length; },
              "set": function (value) { this.content_length = value; }
            },
            "httpHeaders": {
              "get": function () { return this.http_headers; },
              "set": function (value) { this.http_headers = value; }
            },
            "mimeType": {
              "get": function () { return this.mime_type; },
              "set": function (value) { this.mime_type = value; }
            },
            "statusCode": {
              "get": function () { return this.status_code; },
              "set": function (value) { this.status_code = value; }
            },
            "suggestedFilename": {
              "get": function () { return this.suggested_filename; },
              "set": function (value) { this.suggested_filename = value; }
            }
          },
          "static": {}
        },
        "URISchemeRequest": {
          "prototype": {
            "finishError": {
              "value": function () { return this.finish_error.apply(this, arguments); }
            },
            "getPath": {
              "value": function () { return this.get_path.apply(this, arguments); }
            },
            "getScheme": {
              "value": function () { return this.get_scheme.apply(this, arguments); }
            },
            "getUri": {
              "value": function () { return this.get_uri.apply(this, arguments); }
            },
            "getWebView": {
              "value": function () { return this.get_web_view.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "UserContentManager": {
          "prototype": {
            "addScript": {
              "value": function () { return this.add_script.apply(this, arguments); }
            },
            "addStyleSheet": {
              "value": function () { return this.add_style_sheet.apply(this, arguments); }
            },
            "registerScriptMessageHandler": {
              "value": function () { return this.register_script_message_handler.apply(this, arguments); }
            },
            "removeAllScripts": {
              "value": function () { return this.remove_all_scripts.apply(this, arguments); }
            },
            "removeAllStyleSheets": {
              "value": function () { return this.remove_all_style_sheets.apply(this, arguments); }
            },
            "unregisterScriptMessageHandler": {
              "value": function () { return this.unregister_script_message_handler.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "UserMediaPermissionRequest": {
          "prototype": {
            "isForAudioDevice": {
              "get": function () { return this.is_for_audio_device; },
              "set": function (value) { this.is_for_audio_device = value; }
            },
            "isForVideoDevice": {
              "get": function () { return this.is_for_video_device; },
              "set": function (value) { this.is_for_video_device = value; }
            }
          },
          "static": {}
        },
        "WebContext": {
          "prototype": {
            "allowTlsCertificateForHost": {
              "value": function () { return this.allow_tls_certificate_for_host.apply(this, arguments); }
            },
            "clearCache": {
              "value": function () { return this.clear_cache.apply(this, arguments); }
            },
            "downloadUri": {
              "value": function () { return this.download_uri.apply(this, arguments); }
            },
            "getCacheModel": {
              "value": function () { return this.get_cache_model.apply(this, arguments); }
            },
            "getCookieManager": {
              "value": function () { return this.get_cookie_manager.apply(this, arguments); }
            },
            "getFaviconDatabase": {
              "value": function () { return this.get_favicon_database.apply(this, arguments); }
            },
            "getFaviconDatabaseDirectory": {
              "value": function () { return this.get_favicon_database_directory.apply(this, arguments); }
            },
            "getPlugins": {
              "value": function () { return this.get_plugins.apply(this, arguments); }
            },
            "getPluginsFinish": {
              "value": function () { return this.get_plugins_finish.apply(this, arguments); }
            },
            "getProcessModel": {
              "value": function () { return this.get_process_model.apply(this, arguments); }
            },
            "getSecurityManager": {
              "value": function () { return this.get_security_manager.apply(this, arguments); }
            },
            "getSpellCheckingEnabled": {
              "value": function () { return this.get_spell_checking_enabled.apply(this, arguments); }
            },
            "getSpellCheckingLanguages": {
              "value": function () { return this.get_spell_checking_languages.apply(this, arguments); }
            },
            "getTlsErrorsPolicy": {
              "value": function () { return this.get_tls_errors_policy.apply(this, arguments); }
            },
            "getWebProcessCountLimit": {
              "value": function () { return this.get_web_process_count_limit.apply(this, arguments); }
            },
            "getWebsiteDataManager": {
              "value": function () { return this.get_website_data_manager.apply(this, arguments); }
            },
            "prefetchDns": {
              "value": function () { return this.prefetch_dns.apply(this, arguments); }
            },
            "registerUriScheme": {
              "value": function () { return this.register_uri_scheme.apply(this, arguments); }
            },
            "setAdditionalPluginsDirectory": {
              "value": function () { return this.set_additional_plugins_directory.apply(this, arguments); }
            },
            "setCacheModel": {
              "value": function () { return this.set_cache_model.apply(this, arguments); }
            },
            "setDiskCacheDirectory": {
              "value": function () { return this.set_disk_cache_directory.apply(this, arguments); }
            },
            "setFaviconDatabaseDirectory": {
              "value": function () { return this.set_favicon_database_directory.apply(this, arguments); }
            },
            "setPreferredLanguages": {
              "value": function () { return this.set_preferred_languages.apply(this, arguments); }
            },
            "setProcessModel": {
              "value": function () { return this.set_process_model.apply(this, arguments); }
            },
            "setSpellCheckingEnabled": {
              "value": function () { return this.set_spell_checking_enabled.apply(this, arguments); }
            },
            "setSpellCheckingLanguages": {
              "value": function () { return this.set_spell_checking_languages.apply(this, arguments); }
            },
            "setTlsErrorsPolicy": {
              "value": function () { return this.set_tls_errors_policy.apply(this, arguments); }
            },
            "setWebExtensionsDirectory": {
              "value": function () { return this.set_web_extensions_directory.apply(this, arguments); }
            },
            "setWebExtensionsInitializationUserData": {
              "value": function () { return this.set_web_extensions_initialization_user_data.apply(this, arguments); }
            },
            "setWebProcessCountLimit": {
              "value": function () { return this.set_web_process_count_limit.apply(this, arguments); }
            },
            "localStorageDirectory": {
              "get": function () { return this.local_storage_directory; },
              "set": function (value) { this.local_storage_directory = value; }
            },
            "websiteDataManager": {
              "get": function () { return this.website_data_manager; },
              "set": function (value) { this.website_data_manager = value; }
            }
          },
          "static": {
            "getDefault": {
              "value": function () { return this.get_default.apply(this, arguments); }
            }
          }
        },
        "WebInspector": {
          "prototype": {
            "getAttachedHeight": {
              "value": function () { return this.get_attached_height.apply(this, arguments); }
            },
            "getCanAttach": {
              "value": function () { return this.get_can_attach.apply(this, arguments); }
            },
            "getInspectedUri": {
              "value": function () { return this.get_inspected_uri.apply(this, arguments); }
            },
            "getWebView": {
              "value": function () { return this.get_web_view.apply(this, arguments); }
            },
            "isAttached": {
              "value": function () { return this.is_attached.apply(this, arguments); }
            },
            "attachedHeight": {
              "get": function () { return this.attached_height; },
              "set": function (value) { this.attached_height = value; }
            },
            "canAttach": {
              "get": function () { return this.can_attach; },
              "set": function (value) { this.can_attach = value; }
            },
            "inspectedUri": {
              "get": function () { return this.inspected_uri; },
              "set": function (value) { this.inspected_uri = value; }
            }
          },
          "static": {}
        },
        "WebResource": {
          "prototype": {
            "getData": {
              "value": function () { return this.get_data.apply(this, arguments); }
            },
            "getDataFinish": {
              "value": function () { return this.get_data_finish.apply(this, arguments); }
            },
            "getResponse": {
              "value": function () { return this.get_response.apply(this, arguments); }
            },
            "getUri": {
              "value": function () { return this.get_uri.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "WebView": {
          "prototype": {
            "canExecuteEditingCommand": {
              "value": function () { return this.can_execute_editing_command.apply(this, arguments); }
            },
            "canExecuteEditingCommandFinish": {
              "value": function () { return this.can_execute_editing_command_finish.apply(this, arguments); }
            },
            "canGoBack": {
              "value": function () { return this.can_go_back.apply(this, arguments); }
            },
            "canGoForward": {
              "value": function () { return this.can_go_forward.apply(this, arguments); }
            },
            "canShowMimeType": {
              "value": function () { return this.can_show_mime_type.apply(this, arguments); }
            },
            "downloadUri": {
              "value": function () { return this.download_uri.apply(this, arguments); }
            },
            "executeEditingCommand": {
              "value": function () { return this.execute_editing_command.apply(this, arguments); }
            },
            "executeEditingCommandWithArgument": {
              "value": function () { return this.execute_editing_command_with_argument.apply(this, arguments); }
            },
            "getBackForwardList": {
              "value": function () { return this.get_back_forward_list.apply(this, arguments); }
            },
            "getBackgroundColor": {
              "value": function () { return this.get_background_color.apply(this, arguments); }
            },
            "getContext": {
              "value": function () { return this.get_context.apply(this, arguments); }
            },
            "getCustomCharset": {
              "value": function () { return this.get_custom_charset.apply(this, arguments); }
            },
            "getEditorState": {
              "value": function () { return this.get_editor_state.apply(this, arguments); }
            },
            "getEstimatedLoadProgress": {
              "value": function () { return this.get_estimated_load_progress.apply(this, arguments); }
            },
            "getFavicon": {
              "value": function () { return this.get_favicon.apply(this, arguments); }
            },
            "getFindController": {
              "value": function () { return this.get_find_controller.apply(this, arguments); }
            },
            "getInspector": {
              "value": function () { return this.get_inspector.apply(this, arguments); }
            },
            "getJavascriptGlobalContext": {
              "value": function () { return this.get_javascript_global_context.apply(this, arguments); }
            },
            "getMainResource": {
              "value": function () { return this.get_main_resource.apply(this, arguments); }
            },
            "getPageId": {
              "value": function () { return this.get_page_id.apply(this, arguments); }
            },
            "getSettings": {
              "value": function () { return this.get_settings.apply(this, arguments); }
            },
            "getSnapshot": {
              "value": function () { return this.get_snapshot.apply(this, arguments); }
            },
            "getSnapshotFinish": {
              "value": function () { return this.get_snapshot_finish.apply(this, arguments); }
            },
            "getTitle": {
              "value": function () { return this.get_title.apply(this, arguments); }
            },
            "getTlsInfo": {
              "value": function () { return this.get_tls_info.apply(this, arguments); }
            },
            "getUri": {
              "value": function () { return this.get_uri.apply(this, arguments); }
            },
            "getUserContentManager": {
              "value": function () { return this.get_user_content_manager.apply(this, arguments); }
            },
            "getWindowProperties": {
              "value": function () { return this.get_window_properties.apply(this, arguments); }
            },
            "getZoomLevel": {
              "value": function () { return this.get_zoom_level.apply(this, arguments); }
            },
            "goBack": {
              "value": function () { return this.go_back.apply(this, arguments); }
            },
            "goForward": {
              "value": function () { return this.go_forward.apply(this, arguments); }
            },
            "goToBackForwardListItem": {
              "value": function () { return this.go_to_back_forward_list_item.apply(this, arguments); }
            },
            "isEditable": {
              "value": function () { return this.is_editable.apply(this, arguments); }
            },
            "isLoading": {
              "get": function () { return this.is_loading; },
              "set": function (value) { this.is_loading = value; }
            },
            "isPlayingAudio": {
              "get": function () { return this.is_playing_audio; },
              "set": function (value) { this.is_playing_audio = value; }
            },
            "loadAlternateHtml": {
              "value": function () { return this.load_alternate_html.apply(this, arguments); }
            },
            "loadBytes": {
              "value": function () { return this.load_bytes.apply(this, arguments); }
            },
            "loadHtml": {
              "value": function () { return this.load_html.apply(this, arguments); }
            },
            "loadPlainText": {
              "value": function () { return this.load_plain_text.apply(this, arguments); }
            },
            "loadRequest": {
              "value": function () { return this.load_request.apply(this, arguments); }
            },
            "loadUri": {
              "value": function () { return this.load_uri.apply(this, arguments); }
            },
            "newWithRelatedView": {
              "value": function () { return this.new_with_related_view.apply(this, arguments); }
            },
            "reloadBypassCache": {
              "value": function () { return this.reload_bypass_cache.apply(this, arguments); }
            },
            "runJavascript": {
              "value": function () { return this.run_javascript.apply(this, arguments); }
            },
            "runJavascriptFinish": {
              "value": function () { return this.run_javascript_finish.apply(this, arguments); }
            },
            "runJavascriptFromGresource": {
              "value": function () { return this.run_javascript_from_gresource.apply(this, arguments); }
            },
            "runJavascriptFromGresourceFinish": {
              "value": function () { return this.run_javascript_from_gresource_finish.apply(this, arguments); }
            },
            "saveFinish": {
              "value": function () { return this.save_finish.apply(this, arguments); }
            },
            "saveToFile": {
              "value": function () { return this.save_to_file.apply(this, arguments); }
            },
            "saveToFileFinish": {
              "value": function () { return this.save_to_file_finish.apply(this, arguments); }
            },
            "setBackgroundColor": {
              "value": function () { return this.set_background_color.apply(this, arguments); }
            },
            "setCustomCharset": {
              "value": function () { return this.set_custom_charset.apply(this, arguments); }
            },
            "setEditable": {
              "value": function () { return this.set_editable.apply(this, arguments); }
            },
            "setSettings": {
              "value": function () { return this.set_settings.apply(this, arguments); }
            },
            "setZoomLevel": {
              "value": function () { return this.set_zoom_level.apply(this, arguments); }
            },
            "stopLoading": {
              "value": function () { return this.stop_loading.apply(this, arguments); }
            },
            "estimatedLoadProgress": {
              "get": function () { return this.estimated_load_progress; },
              "set": function (value) { this.estimated_load_progress = value; }
            },
            "relatedView": {
              "get": function () { return this.related_view; },
              "set": function (value) { this.related_view = value; }
            },
            "userContentManager": {
              "get": function () { return this.user_content_manager; },
              "set": function (value) { this.user_content_manager = value; }
            },
            "webContext": {
              "get": function () { return this.web_context; },
              "set": function (value) { this.web_context = value; }
            },
            "zoomLevel": {
              "get": function () { return this.zoom_level; },
              "set": function (value) { this.zoom_level = value; }
            }
          },
          "static": {}
        },
        "WebViewBase": {
          "prototype": {},
          "static": {}
        },
        "WebsiteDataManager": {
          "prototype": {
            "getBaseCacheDirectory": {
              "value": function () { return this.get_base_cache_directory.apply(this, arguments); }
            },
            "getBaseDataDirectory": {
              "value": function () { return this.get_base_data_directory.apply(this, arguments); }
            },
            "getDiskCacheDirectory": {
              "value": function () { return this.get_disk_cache_directory.apply(this, arguments); }
            },
            "getIndexeddbDirectory": {
              "value": function () { return this.get_indexeddb_directory.apply(this, arguments); }
            },
            "getLocalStorageDirectory": {
              "value": function () { return this.get_local_storage_directory.apply(this, arguments); }
            },
            "getOfflineApplicationCacheDirectory": {
              "value": function () { return this.get_offline_application_cache_directory.apply(this, arguments); }
            },
            "getWebsqlDirectory": {
              "value": function () { return this.get_websql_directory.apply(this, arguments); }
            },
            "baseCacheDirectory": {
              "get": function () { return this.base_cache_directory; },
              "set": function (value) { this.base_cache_directory = value; }
            },
            "baseDataDirectory": {
              "get": function () { return this.base_data_directory; },
              "set": function (value) { this.base_data_directory = value; }
            },
            "diskCacheDirectory": {
              "get": function () { return this.disk_cache_directory; },
              "set": function (value) { this.disk_cache_directory = value; }
            },
            "indexeddbDirectory": {
              "get": function () { return this.indexeddb_directory; },
              "set": function (value) { this.indexeddb_directory = value; }
            },
            "localStorageDirectory": {
              "get": function () { return this.local_storage_directory; },
              "set": function (value) { this.local_storage_directory = value; }
            },
            "offlineApplicationCacheDirectory": {
              "get": function () { return this.offline_application_cache_directory; },
              "set": function (value) { this.offline_application_cache_directory = value; }
            },
            "websqlDirectory": {
              "get": function () { return this.websql_directory; },
              "set": function (value) { this.websql_directory = value; }
            }
          },
          "static": {}
        },
        "WindowProperties": {
          "prototype": {
            "getFullscreen": {
              "value": function () { return this.get_fullscreen.apply(this, arguments); }
            },
            "getGeometry": {
              "value": function () { return this.get_geometry.apply(this, arguments); }
            },
            "getLocationbarVisible": {
              "value": function () { return this.get_locationbar_visible.apply(this, arguments); }
            },
            "getMenubarVisible": {
              "value": function () { return this.get_menubar_visible.apply(this, arguments); }
            },
            "getResizable": {
              "value": function () { return this.get_resizable.apply(this, arguments); }
            },
            "getScrollbarsVisible": {
              "value": function () { return this.get_scrollbars_visible.apply(this, arguments); }
            },
            "getStatusbarVisible": {
              "value": function () { return this.get_statusbar_visible.apply(this, arguments); }
            },
            "getToolbarVisible": {
              "value": function () { return this.get_toolbar_visible.apply(this, arguments); }
            },
            "locationbarVisible": {
              "get": function () { return this.locationbar_visible; },
              "set": function (value) { this.locationbar_visible = value; }
            },
            "menubarVisible": {
              "get": function () { return this.menubar_visible; },
              "set": function (value) { this.menubar_visible = value; }
            },
            "scrollbarsVisible": {
              "get": function () { return this.scrollbars_visible; },
              "set": function (value) { this.scrollbars_visible = value; }
            },
            "statusbarVisible": {
              "get": function () { return this.statusbar_visible; },
              "set": function (value) { this.statusbar_visible = value; }
            },
            "toolbarVisible": {
              "get": function () { return this.toolbar_visible; },
              "set": function (value) { this.toolbar_visible = value; }
            }
          },
          "static": {}
        }
      },
      "static": {
        "downloadErrorQuark": {
          "value": function () { return this.download_error_quark.apply(this, arguments); }
        },
        "faviconDatabaseErrorQuark": {
          "value": function () { return this.favicon_database_error_quark.apply(this, arguments); }
        },
        "getMajorVersion": {
          "value": function () { return this.get_major_version.apply(this, arguments); }
        },
        "getMicroVersion": {
          "value": function () { return this.get_micro_version.apply(this, arguments); }
        },
        "getMinorVersion": {
          "value": function () { return this.get_minor_version.apply(this, arguments); }
        },
        "javascriptErrorQuark": {
          "value": function () { return this.javascript_error_quark.apply(this, arguments); }
        },
        "networkErrorQuark": {
          "value": function () { return this.network_error_quark.apply(this, arguments); }
        },
        "pluginErrorQuark": {
          "value": function () { return this.plugin_error_quark.apply(this, arguments); }
        },
        "policyErrorQuark": {
          "value": function () { return this.policy_error_quark.apply(this, arguments); }
        },
        "printErrorQuark": {
          "value": function () { return this.print_error_quark.apply(this, arguments); }
        },
        "snapshotErrorQuark": {
          "value": function () { return this.snapshot_error_quark.apply(this, arguments); }
        },
        "userMediaPermissionIsForAudioDevice": {
          "value": function () { return this.user_media_permission_is_for_audio_device.apply(this, arguments); }
        },
        "userMediaPermissionIsForVideoDevice": {
          "value": function () { return this.user_media_permission_is_for_video_device.apply(this, arguments); }
        }
      }
    },
    "WebKit2WebExtension": {
      "class": {
        "ContextMenu": {
          "prototype": {
            "getItemAtPosition": {
              "value": function () { return this.get_item_at_position.apply(this, arguments); }
            },
            "getItems": {
              "value": function () { return this.get_items.apply(this, arguments); }
            },
            "getNItems": {
              "value": function () { return this.get_n_items.apply(this, arguments); }
            },
            "getUserData": {
              "value": function () { return this.get_user_data.apply(this, arguments); }
            },
            "moveItem": {
              "value": function () { return this.move_item.apply(this, arguments); }
            },
            "removeAll": {
              "value": function () { return this.remove_all.apply(this, arguments); }
            },
            "setUserData": {
              "value": function () { return this.set_user_data.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "ContextMenuItem": {
          "prototype": {
            "getAction": {
              "value": function () { return this.get_action.apply(this, arguments); }
            },
            "getStockAction": {
              "value": function () { return this.get_stock_action.apply(this, arguments); }
            },
            "getSubmenu": {
              "value": function () { return this.get_submenu.apply(this, arguments); }
            },
            "isSeparator": {
              "value": function () { return this.is_separator.apply(this, arguments); }
            },
            "setSubmenu": {
              "value": function () { return this.set_submenu.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DOMAttr": {
          "prototype": {
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getOwnerElement": {
              "value": function () { return this.get_owner_element.apply(this, arguments); }
            },
            "getSpecified": {
              "value": function () { return this.get_specified.apply(this, arguments); }
            },
            "getValue": {
              "value": function () { return this.get_value.apply(this, arguments); }
            },
            "setValue": {
              "value": function () { return this.set_value.apply(this, arguments); }
            },
            "isId": {
              "get": function () { return this.is_id; },
              "set": function (value) { this.is_id = value; }
            },
            "ownerElement": {
              "get": function () { return this.owner_element; },
              "set": function (value) { this.owner_element = value; }
            }
          },
          "static": {}
        },
        "DOMBlob": {
          "prototype": {
            "getSize": {
              "value": function () { return this.get_size.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DOMCDATASection": {
          "prototype": {},
          "static": {}
        },
        "DOMCSSRule": {
          "prototype": {
            "getCssText": {
              "value": function () { return this.get_css_text.apply(this, arguments); }
            },
            "getParentRule": {
              "value": function () { return this.get_parent_rule.apply(this, arguments); }
            },
            "getParentStyleSheet": {
              "value": function () { return this.get_parent_style_sheet.apply(this, arguments); }
            },
            "getRuleType": {
              "value": function () { return this.get_rule_type.apply(this, arguments); }
            },
            "setCssText": {
              "value": function () { return this.set_css_text.apply(this, arguments); }
            },
            "cssText": {
              "get": function () { return this.css_text; },
              "set": function (value) { this.css_text = value; }
            },
            "parentRule": {
              "get": function () { return this.parent_rule; },
              "set": function (value) { this.parent_rule = value; }
            },
            "parentStyleSheet": {
              "get": function () { return this.parent_style_sheet; },
              "set": function (value) { this.parent_style_sheet = value; }
            }
          },
          "static": {}
        },
        "DOMCSSRuleList": {
          "prototype": {
            "getLength": {
              "value": function () { return this.get_length.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DOMCSSStyleDeclaration": {
          "prototype": {
            "getCssText": {
              "value": function () { return this.get_css_text.apply(this, arguments); }
            },
            "getLength": {
              "value": function () { return this.get_length.apply(this, arguments); }
            },
            "getParentRule": {
              "value": function () { return this.get_parent_rule.apply(this, arguments); }
            },
            "getPropertyPriority": {
              "value": function () { return this.get_property_priority.apply(this, arguments); }
            },
            "getPropertyShorthand": {
              "value": function () { return this.get_property_shorthand.apply(this, arguments); }
            },
            "getPropertyValue": {
              "value": function () { return this.get_property_value.apply(this, arguments); }
            },
            "isPropertyImplicit": {
              "value": function () { return this.is_property_implicit.apply(this, arguments); }
            },
            "removeProperty": {
              "value": function () { return this.remove_property.apply(this, arguments); }
            },
            "setCssText": {
              "value": function () { return this.set_css_text.apply(this, arguments); }
            },
            "setProperty": {
              "value": function () { return this.set_property.apply(this, arguments); }
            },
            "cssText": {
              "get": function () { return this.css_text; },
              "set": function (value) { this.css_text = value; }
            },
            "parentRule": {
              "get": function () { return this.parent_rule; },
              "set": function (value) { this.parent_rule = value; }
            }
          },
          "static": {}
        },
        "DOMCSSStyleSheet": {
          "prototype": {
            "addRule": {
              "value": function () { return this.add_rule.apply(this, arguments); }
            },
            "deleteRule": {
              "value": function () { return this.delete_rule.apply(this, arguments); }
            },
            "getCssRules": {
              "value": function () { return this.get_css_rules.apply(this, arguments); }
            },
            "getOwnerRule": {
              "value": function () { return this.get_owner_rule.apply(this, arguments); }
            },
            "getRules": {
              "value": function () { return this.get_rules.apply(this, arguments); }
            },
            "insertRule": {
              "value": function () { return this.insert_rule.apply(this, arguments); }
            },
            "removeRule": {
              "value": function () { return this.remove_rule.apply(this, arguments); }
            },
            "cssRules": {
              "get": function () { return this.css_rules; },
              "set": function (value) { this.css_rules = value; }
            },
            "ownerRule": {
              "get": function () { return this.owner_rule; },
              "set": function (value) { this.owner_rule = value; }
            }
          },
          "static": {}
        },
        "DOMCSSValue": {
          "prototype": {
            "getCssText": {
              "value": function () { return this.get_css_text.apply(this, arguments); }
            },
            "getCssValueType": {
              "value": function () { return this.get_css_value_type.apply(this, arguments); }
            },
            "setCssText": {
              "value": function () { return this.set_css_text.apply(this, arguments); }
            },
            "cssText": {
              "get": function () { return this.css_text; },
              "set": function (value) { this.css_text = value; }
            },
            "cssValueType": {
              "get": function () { return this.css_value_type; },
              "set": function (value) { this.css_value_type = value; }
            }
          },
          "static": {}
        },
        "DOMCharacterData": {
          "prototype": {
            "appendData": {
              "value": function () { return this.append_data.apply(this, arguments); }
            },
            "deleteData": {
              "value": function () { return this.delete_data.apply(this, arguments); }
            },
            "getData": {
              "value": function () { return this.get_data.apply(this, arguments); }
            },
            "getLength": {
              "value": function () { return this.get_length.apply(this, arguments); }
            },
            "insertData": {
              "value": function () { return this.insert_data.apply(this, arguments); }
            },
            "replaceData": {
              "value": function () { return this.replace_data.apply(this, arguments); }
            },
            "setData": {
              "value": function () { return this.set_data.apply(this, arguments); }
            },
            "substringData": {
              "value": function () { return this.substring_data.apply(this, arguments); }
            },
            "nextElementSibling": {
              "get": function () { return this.next_element_sibling; },
              "set": function (value) { this.next_element_sibling = value; }
            },
            "previousElementSibling": {
              "get": function () { return this.previous_element_sibling; },
              "set": function (value) { this.previous_element_sibling = value; }
            }
          },
          "static": {}
        },
        "DOMComment": {
          "prototype": {},
          "static": {}
        },
        "DOMDOMImplementation": {
          "prototype": {
            "createCssStyleSheet": {
              "value": function () { return this.create_css_style_sheet.apply(this, arguments); }
            },
            "createDocument": {
              "value": function () { return this.create_document.apply(this, arguments); }
            },
            "createDocumentType": {
              "value": function () { return this.create_document_type.apply(this, arguments); }
            },
            "createHtmlDocument": {
              "value": function () { return this.create_html_document.apply(this, arguments); }
            },
            "hasFeature": {
              "value": function () { return this.has_feature.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DOMDOMWindow": {
          "prototype": {
            "webkitMessageHandlersPostMessage": {
              "value": function () { return this.webkit_message_handlers_post_message.apply(this, arguments); }
            },
            "applicationCache": {
              "get": function () { return this.application_cache; },
              "set": function (value) { this.application_cache = value; }
            },
            "clientInformation": {
              "get": function () { return this.client_information; },
              "set": function (value) { this.client_information = value; }
            },
            "defaultStatus": {
              "get": function () { return this.default_status; },
              "set": function (value) { this.default_status = value; }
            },
            "devicePixelRatio": {
              "get": function () { return this.device_pixel_ratio; },
              "set": function (value) { this.device_pixel_ratio = value; }
            },
            "frameElement": {
              "get": function () { return this.frame_element; },
              "set": function (value) { this.frame_element = value; }
            },
            "innerHeight": {
              "get": function () { return this.inner_height; },
              "set": function (value) { this.inner_height = value; }
            },
            "innerWidth": {
              "get": function () { return this.inner_width; },
              "set": function (value) { this.inner_width = value; }
            },
            "localStorage": {
              "get": function () { return this.local_storage; },
              "set": function (value) { this.local_storage = value; }
            },
            "offscreenBuffering": {
              "get": function () { return this.offscreen_buffering; },
              "set": function (value) { this.offscreen_buffering = value; }
            },
            "outerHeight": {
              "get": function () { return this.outer_height; },
              "set": function (value) { this.outer_height = value; }
            },
            "outerWidth": {
              "get": function () { return this.outer_width; },
              "set": function (value) { this.outer_width = value; }
            },
            "pageXOffset": {
              "get": function () { return this.page_x_offset; },
              "set": function (value) { this.page_x_offset = value; }
            },
            "pageYOffset": {
              "get": function () { return this.page_y_offset; },
              "set": function (value) { this.page_y_offset = value; }
            },
            "screenLeft": {
              "get": function () { return this.screen_left; },
              "set": function (value) { this.screen_left = value; }
            },
            "screenTop": {
              "get": function () { return this.screen_top; },
              "set": function (value) { this.screen_top = value; }
            },
            "screenX": {
              "get": function () { return this.screen_x; },
              "set": function (value) { this.screen_x = value; }
            },
            "screenY": {
              "get": function () { return this.screen_y; },
              "set": function (value) { this.screen_y = value; }
            },
            "scrollX": {
              "get": function () { return this.scroll_x; },
              "set": function (value) { this.scroll_x = value; }
            },
            "scrollY": {
              "get": function () { return this.scroll_y; },
              "set": function (value) { this.scroll_y = value; }
            },
            "sessionStorage": {
              "get": function () { return this.session_storage; },
              "set": function (value) { this.session_storage = value; }
            },
            "speechSynthesis": {
              "get": function () { return this.speech_synthesis; },
              "set": function (value) { this.speech_synthesis = value; }
            },
            "styleMedia": {
              "get": function () { return this.style_media; },
              "set": function (value) { this.style_media = value; }
            }
          },
          "static": {}
        },
        "DOMDocument": {
          "prototype": {
            "adoptNode": {
              "value": function () { return this.adopt_node.apply(this, arguments); }
            },
            "createAttribute": {
              "value": function () { return this.create_attribute.apply(this, arguments); }
            },
            "createAttributeNs": {
              "value": function () { return this.create_attribute_ns.apply(this, arguments); }
            },
            "createCdataSection": {
              "value": function () { return this.create_cdata_section.apply(this, arguments); }
            },
            "createComment": {
              "value": function () { return this.create_comment.apply(this, arguments); }
            },
            "createCssStyleDeclaration": {
              "value": function () { return this.create_css_style_declaration.apply(this, arguments); }
            },
            "createDocumentFragment": {
              "value": function () { return this.create_document_fragment.apply(this, arguments); }
            },
            "createElement": {
              "value": function () { return this.create_element.apply(this, arguments); }
            },
            "createElementNs": {
              "value": function () { return this.create_element_ns.apply(this, arguments); }
            },
            "createEntityReference": {
              "value": function () { return this.create_entity_reference.apply(this, arguments); }
            },
            "createEvent": {
              "value": function () { return this.create_event.apply(this, arguments); }
            },
            "createExpression": {
              "value": function () { return this.create_expression.apply(this, arguments); }
            },
            "createNodeIterator": {
              "value": function () { return this.create_node_iterator.apply(this, arguments); }
            },
            "createNsResolver": {
              "value": function () { return this.create_ns_resolver.apply(this, arguments); }
            },
            "createProcessingInstruction": {
              "value": function () { return this.create_processing_instruction.apply(this, arguments); }
            },
            "createRange": {
              "value": function () { return this.create_range.apply(this, arguments); }
            },
            "createTextNode": {
              "value": function () { return this.create_text_node.apply(this, arguments); }
            },
            "createTreeWalker": {
              "value": function () { return this.create_tree_walker.apply(this, arguments); }
            },
            "elementFromPoint": {
              "value": function () { return this.element_from_point.apply(this, arguments); }
            },
            "execCommand": {
              "value": function () { return this.exec_command.apply(this, arguments); }
            },
            "getActiveElement": {
              "value": function () { return this.get_active_element.apply(this, arguments); }
            },
            "getAnchors": {
              "value": function () { return this.get_anchors.apply(this, arguments); }
            },
            "getApplets": {
              "value": function () { return this.get_applets.apply(this, arguments); }
            },
            "getBody": {
              "value": function () { return this.get_body.apply(this, arguments); }
            },
            "getCharacterSet": {
              "value": function () { return this.get_character_set.apply(this, arguments); }
            },
            "getCharset": {
              "value": function () { return this.get_charset.apply(this, arguments); }
            },
            "getCookie": {
              "value": function () { return this.get_cookie.apply(this, arguments); }
            },
            "getDefaultCharset": {
              "value": function () { return this.get_default_charset.apply(this, arguments); }
            },
            "getDefaultView": {
              "value": function () { return this.get_default_view.apply(this, arguments); }
            },
            "getDoctype": {
              "value": function () { return this.get_doctype.apply(this, arguments); }
            },
            "getDocumentElement": {
              "value": function () { return this.get_document_element.apply(this, arguments); }
            },
            "getDocumentUri": {
              "value": function () { return this.get_document_uri.apply(this, arguments); }
            },
            "getDomain": {
              "value": function () { return this.get_domain.apply(this, arguments); }
            },
            "getElementById": {
              "value": function () { return this.get_element_by_id.apply(this, arguments); }
            },
            "getElementsByClassName": {
              "value": function () { return this.get_elements_by_class_name.apply(this, arguments); }
            },
            "getElementsByName": {
              "value": function () { return this.get_elements_by_name.apply(this, arguments); }
            },
            "getElementsByTagName": {
              "value": function () { return this.get_elements_by_tag_name.apply(this, arguments); }
            },
            "getElementsByTagNameNs": {
              "value": function () { return this.get_elements_by_tag_name_ns.apply(this, arguments); }
            },
            "getForms": {
              "value": function () { return this.get_forms.apply(this, arguments); }
            },
            "getHead": {
              "value": function () { return this.get_head.apply(this, arguments); }
            },
            "getImages": {
              "value": function () { return this.get_images.apply(this, arguments); }
            },
            "getImplementation": {
              "value": function () { return this.get_implementation.apply(this, arguments); }
            },
            "getInputEncoding": {
              "value": function () { return this.get_input_encoding.apply(this, arguments); }
            },
            "getLastModified": {
              "value": function () { return this.get_last_modified.apply(this, arguments); }
            },
            "getLinks": {
              "value": function () { return this.get_links.apply(this, arguments); }
            },
            "getOverrideStyle": {
              "value": function () { return this.get_override_style.apply(this, arguments); }
            },
            "getPreferredStylesheetSet": {
              "value": function () { return this.get_preferred_stylesheet_set.apply(this, arguments); }
            },
            "getReadyState": {
              "value": function () { return this.get_ready_state.apply(this, arguments); }
            },
            "getReferrer": {
              "value": function () { return this.get_referrer.apply(this, arguments); }
            },
            "getSelectedStylesheetSet": {
              "value": function () { return this.get_selected_stylesheet_set.apply(this, arguments); }
            },
            "getStyleSheets": {
              "value": function () { return this.get_style_sheets.apply(this, arguments); }
            },
            "getTitle": {
              "value": function () { return this.get_title.apply(this, arguments); }
            },
            "getUrl": {
              "value": function () { return this.get_url.apply(this, arguments); }
            },
            "getXmlEncoding": {
              "value": function () { return this.get_xml_encoding.apply(this, arguments); }
            },
            "getXmlStandalone": {
              "value": function () { return this.get_xml_standalone.apply(this, arguments); }
            },
            "getXmlVersion": {
              "value": function () { return this.get_xml_version.apply(this, arguments); }
            },
            "hasFocus": {
              "value": function () { return this.has_focus.apply(this, arguments); }
            },
            "importNode": {
              "value": function () { return this.import_node.apply(this, arguments); }
            },
            "queryCommandEnabled": {
              "value": function () { return this.query_command_enabled.apply(this, arguments); }
            },
            "queryCommandIndeterm": {
              "value": function () { return this.query_command_indeterm.apply(this, arguments); }
            },
            "queryCommandState": {
              "value": function () { return this.query_command_state.apply(this, arguments); }
            },
            "queryCommandSupported": {
              "value": function () { return this.query_command_supported.apply(this, arguments); }
            },
            "queryCommandValue": {
              "value": function () { return this.query_command_value.apply(this, arguments); }
            },
            "querySelector": {
              "value": function () { return this.query_selector.apply(this, arguments); }
            },
            "querySelectorAll": {
              "value": function () { return this.query_selector_all.apply(this, arguments); }
            },
            "setBody": {
              "value": function () { return this.set_body.apply(this, arguments); }
            },
            "setCharset": {
              "value": function () { return this.set_charset.apply(this, arguments); }
            },
            "setCookie": {
              "value": function () { return this.set_cookie.apply(this, arguments); }
            },
            "setDocumentUri": {
              "value": function () { return this.set_document_uri.apply(this, arguments); }
            },
            "setSelectedStylesheetSet": {
              "value": function () { return this.set_selected_stylesheet_set.apply(this, arguments); }
            },
            "setTitle": {
              "value": function () { return this.set_title.apply(this, arguments); }
            },
            "setXmlStandalone": {
              "value": function () { return this.set_xml_standalone.apply(this, arguments); }
            },
            "setXmlVersion": {
              "value": function () { return this.set_xml_version.apply(this, arguments); }
            },
            "activeElement": {
              "get": function () { return this.active_element; },
              "set": function (value) { this.active_element = value; }
            },
            "characterSet": {
              "get": function () { return this.character_set; },
              "set": function (value) { this.character_set = value; }
            },
            "childElementCount": {
              "get": function () { return this.child_element_count; },
              "set": function (value) { this.child_element_count = value; }
            },
            "compatMode": {
              "get": function () { return this.compat_mode; },
              "set": function (value) { this.compat_mode = value; }
            },
            "contentType": {
              "get": function () { return this.content_type; },
              "set": function (value) { this.content_type = value; }
            },
            "currentScript": {
              "get": function () { return this.current_script; },
              "set": function (value) { this.current_script = value; }
            },
            "defaultCharset": {
              "get": function () { return this.default_charset; },
              "set": function (value) { this.default_charset = value; }
            },
            "defaultView": {
              "get": function () { return this.default_view; },
              "set": function (value) { this.default_view = value; }
            },
            "documentElement": {
              "get": function () { return this.document_element; },
              "set": function (value) { this.document_element = value; }
            },
            "documentUri": {
              "get": function () { return this.document_uri; },
              "set": function (value) { this.document_uri = value; }
            },
            "firstElementChild": {
              "get": function () { return this.first_element_child; },
              "set": function (value) { this.first_element_child = value; }
            },
            "inputEncoding": {
              "get": function () { return this.input_encoding; },
              "set": function (value) { this.input_encoding = value; }
            },
            "lastElementChild": {
              "get": function () { return this.last_element_child; },
              "set": function (value) { this.last_element_child = value; }
            },
            "lastModified": {
              "get": function () { return this.last_modified; },
              "set": function (value) { this.last_modified = value; }
            },
            "pointerLockElement": {
              "get": function () { return this.pointer_lock_element; },
              "set": function (value) { this.pointer_lock_element = value; }
            },
            "preferredStylesheetSet": {
              "get": function () { return this.preferred_stylesheet_set; },
              "set": function (value) { this.preferred_stylesheet_set = value; }
            },
            "readyState": {
              "get": function () { return this.ready_state; },
              "set": function (value) { this.ready_state = value; }
            },
            "scrollingElement": {
              "get": function () { return this.scrolling_element; },
              "set": function (value) { this.scrolling_element = value; }
            },
            "securityPolicy": {
              "get": function () { return this.security_policy; },
              "set": function (value) { this.security_policy = value; }
            },
            "selectedStylesheetSet": {
              "get": function () { return this.selected_stylesheet_set; },
              "set": function (value) { this.selected_stylesheet_set = value; }
            },
            "styleSheets": {
              "get": function () { return this.style_sheets; },
              "set": function (value) { this.style_sheets = value; }
            },
            "visibilityState": {
              "get": function () { return this.visibility_state; },
              "set": function (value) { this.visibility_state = value; }
            },
            "webkitCurrentFullScreenElement": {
              "get": function () { return this.webkit_current_full_screen_element; },
              "set": function (value) { this.webkit_current_full_screen_element = value; }
            },
            "webkitFullScreenKeyboardInputAllowed": {
              "get": function () { return this.webkit_full_screen_keyboard_input_allowed; },
              "set": function (value) { this.webkit_full_screen_keyboard_input_allowed = value; }
            },
            "webkitFullscreenElement": {
              "get": function () { return this.webkit_fullscreen_element; },
              "set": function (value) { this.webkit_fullscreen_element = value; }
            },
            "webkitFullscreenEnabled": {
              "get": function () { return this.webkit_fullscreen_enabled; },
              "set": function (value) { this.webkit_fullscreen_enabled = value; }
            },
            "webkitIsFullScreen": {
              "get": function () { return this.webkit_is_full_screen; },
              "set": function (value) { this.webkit_is_full_screen = value; }
            },
            "xmlEncoding": {
              "get": function () { return this.xml_encoding; },
              "set": function (value) { this.xml_encoding = value; }
            },
            "xmlStandalone": {
              "get": function () { return this.xml_standalone; },
              "set": function (value) { this.xml_standalone = value; }
            },
            "xmlVersion": {
              "get": function () { return this.xml_version; },
              "set": function (value) { this.xml_version = value; }
            }
          },
          "static": {}
        },
        "DOMDocumentFragment": {
          "prototype": {
            "childElementCount": {
              "get": function () { return this.child_element_count; },
              "set": function (value) { this.child_element_count = value; }
            },
            "firstElementChild": {
              "get": function () { return this.first_element_child; },
              "set": function (value) { this.first_element_child = value; }
            },
            "lastElementChild": {
              "get": function () { return this.last_element_child; },
              "set": function (value) { this.last_element_child = value; }
            }
          },
          "static": {}
        },
        "DOMDocumentType": {
          "prototype": {
            "getEntities": {
              "value": function () { return this.get_entities.apply(this, arguments); }
            },
            "getInternalSubset": {
              "value": function () { return this.get_internal_subset.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getNotations": {
              "value": function () { return this.get_notations.apply(this, arguments); }
            },
            "getPublicId": {
              "value": function () { return this.get_public_id.apply(this, arguments); }
            },
            "getSystemId": {
              "value": function () { return this.get_system_id.apply(this, arguments); }
            },
            "internalSubset": {
              "get": function () { return this.internal_subset; },
              "set": function (value) { this.internal_subset = value; }
            },
            "publicId": {
              "get": function () { return this.public_id; },
              "set": function (value) { this.public_id = value; }
            },
            "systemId": {
              "get": function () { return this.system_id; },
              "set": function (value) { this.system_id = value; }
            }
          },
          "static": {}
        },
        "DOMElement": {
          "prototype": {
            "getAttribute": {
              "value": function () { return this.get_attribute.apply(this, arguments); }
            },
            "getAttributeNode": {
              "value": function () { return this.get_attribute_node.apply(this, arguments); }
            },
            "getAttributeNodeNs": {
              "value": function () { return this.get_attribute_node_ns.apply(this, arguments); }
            },
            "getAttributeNs": {
              "value": function () { return this.get_attribute_ns.apply(this, arguments); }
            },
            "getAttributes": {
              "value": function () { return this.get_attributes.apply(this, arguments); }
            },
            "getChildElementCount": {
              "value": function () { return this.get_child_element_count.apply(this, arguments); }
            },
            "getChildren": {
              "value": function () { return this.get_children.apply(this, arguments); }
            },
            "getClassName": {
              "value": function () { return this.get_class_name.apply(this, arguments); }
            },
            "getClientHeight": {
              "value": function () { return this.get_client_height.apply(this, arguments); }
            },
            "getClientLeft": {
              "value": function () { return this.get_client_left.apply(this, arguments); }
            },
            "getClientTop": {
              "value": function () { return this.get_client_top.apply(this, arguments); }
            },
            "getClientWidth": {
              "value": function () { return this.get_client_width.apply(this, arguments); }
            },
            "getElementsByClassName": {
              "value": function () { return this.get_elements_by_class_name.apply(this, arguments); }
            },
            "getElementsByTagName": {
              "value": function () { return this.get_elements_by_tag_name.apply(this, arguments); }
            },
            "getElementsByTagNameNs": {
              "value": function () { return this.get_elements_by_tag_name_ns.apply(this, arguments); }
            },
            "getFirstElementChild": {
              "value": function () { return this.get_first_element_child.apply(this, arguments); }
            },
            "getId": {
              "value": function () { return this.get_id.apply(this, arguments); }
            },
            "getInnerHtml": {
              "value": function () { return this.get_inner_html.apply(this, arguments); }
            },
            "getLastElementChild": {
              "value": function () { return this.get_last_element_child.apply(this, arguments); }
            },
            "getNextElementSibling": {
              "value": function () { return this.get_next_element_sibling.apply(this, arguments); }
            },
            "getOffsetHeight": {
              "value": function () { return this.get_offset_height.apply(this, arguments); }
            },
            "getOffsetLeft": {
              "value": function () { return this.get_offset_left.apply(this, arguments); }
            },
            "getOffsetParent": {
              "value": function () { return this.get_offset_parent.apply(this, arguments); }
            },
            "getOffsetTop": {
              "value": function () { return this.get_offset_top.apply(this, arguments); }
            },
            "getOffsetWidth": {
              "value": function () { return this.get_offset_width.apply(this, arguments); }
            },
            "getOuterHtml": {
              "value": function () { return this.get_outer_html.apply(this, arguments); }
            },
            "getPreviousElementSibling": {
              "value": function () { return this.get_previous_element_sibling.apply(this, arguments); }
            },
            "getScrollHeight": {
              "value": function () { return this.get_scroll_height.apply(this, arguments); }
            },
            "getScrollLeft": {
              "value": function () { return this.get_scroll_left.apply(this, arguments); }
            },
            "getScrollTop": {
              "value": function () { return this.get_scroll_top.apply(this, arguments); }
            },
            "getScrollWidth": {
              "value": function () { return this.get_scroll_width.apply(this, arguments); }
            },
            "getStyle": {
              "value": function () { return this.get_style.apply(this, arguments); }
            },
            "getTagName": {
              "value": function () { return this.get_tag_name.apply(this, arguments); }
            },
            "hasAttribute": {
              "value": function () { return this.has_attribute.apply(this, arguments); }
            },
            "hasAttributeNs": {
              "value": function () { return this.has_attribute_ns.apply(this, arguments); }
            },
            "hasAttributes": {
              "value": function () { return this.has_attributes.apply(this, arguments); }
            },
            "querySelector": {
              "value": function () { return this.query_selector.apply(this, arguments); }
            },
            "querySelectorAll": {
              "value": function () { return this.query_selector_all.apply(this, arguments); }
            },
            "removeAttribute": {
              "value": function () { return this.remove_attribute.apply(this, arguments); }
            },
            "removeAttributeNode": {
              "value": function () { return this.remove_attribute_node.apply(this, arguments); }
            },
            "removeAttributeNs": {
              "value": function () { return this.remove_attribute_ns.apply(this, arguments); }
            },
            "scrollByLines": {
              "value": function () { return this.scroll_by_lines.apply(this, arguments); }
            },
            "scrollByPages": {
              "value": function () { return this.scroll_by_pages.apply(this, arguments); }
            },
            "scrollIntoView": {
              "value": function () { return this.scroll_into_view.apply(this, arguments); }
            },
            "scrollIntoViewIfNeeded": {
              "value": function () { return this.scroll_into_view_if_needed.apply(this, arguments); }
            },
            "setAttribute": {
              "value": function () { return this.set_attribute.apply(this, arguments); }
            },
            "setAttributeNode": {
              "value": function () { return this.set_attribute_node.apply(this, arguments); }
            },
            "setAttributeNodeNs": {
              "value": function () { return this.set_attribute_node_ns.apply(this, arguments); }
            },
            "setAttributeNs": {
              "value": function () { return this.set_attribute_ns.apply(this, arguments); }
            },
            "setClassName": {
              "value": function () { return this.set_class_name.apply(this, arguments); }
            },
            "setId": {
              "value": function () { return this.set_id.apply(this, arguments); }
            },
            "setInnerHtml": {
              "value": function () { return this.set_inner_html.apply(this, arguments); }
            },
            "setOuterHtml": {
              "value": function () { return this.set_outer_html.apply(this, arguments); }
            },
            "setScrollLeft": {
              "value": function () { return this.set_scroll_left.apply(this, arguments); }
            },
            "setScrollTop": {
              "value": function () { return this.set_scroll_top.apply(this, arguments); }
            },
            "childElementCount": {
              "get": function () { return this.child_element_count; },
              "set": function (value) { this.child_element_count = value; }
            },
            "classList": {
              "get": function () { return this.class_list; },
              "set": function (value) { this.class_list = value; }
            },
            "className": {
              "get": function () { return this.class_name; },
              "set": function (value) { this.class_name = value; }
            },
            "clientHeight": {
              "get": function () { return this.client_height; },
              "set": function (value) { this.client_height = value; }
            },
            "clientLeft": {
              "get": function () { return this.client_left; },
              "set": function (value) { this.client_left = value; }
            },
            "clientTop": {
              "get": function () { return this.client_top; },
              "set": function (value) { this.client_top = value; }
            },
            "clientWidth": {
              "get": function () { return this.client_width; },
              "set": function (value) { this.client_width = value; }
            },
            "firstElementChild": {
              "get": function () { return this.first_element_child; },
              "set": function (value) { this.first_element_child = value; }
            },
            "innerHtml": {
              "get": function () { return this.inner_html; },
              "set": function (value) { this.inner_html = value; }
            },
            "lastElementChild": {
              "get": function () { return this.last_element_child; },
              "set": function (value) { this.last_element_child = value; }
            },
            "nextElementSibling": {
              "get": function () { return this.next_element_sibling; },
              "set": function (value) { this.next_element_sibling = value; }
            },
            "offsetHeight": {
              "get": function () { return this.offset_height; },
              "set": function (value) { this.offset_height = value; }
            },
            "offsetLeft": {
              "get": function () { return this.offset_left; },
              "set": function (value) { this.offset_left = value; }
            },
            "offsetParent": {
              "get": function () { return this.offset_parent; },
              "set": function (value) { this.offset_parent = value; }
            },
            "offsetTop": {
              "get": function () { return this.offset_top; },
              "set": function (value) { this.offset_top = value; }
            },
            "offsetWidth": {
              "get": function () { return this.offset_width; },
              "set": function (value) { this.offset_width = value; }
            },
            "outerHtml": {
              "get": function () { return this.outer_html; },
              "set": function (value) { this.outer_html = value; }
            },
            "previousElementSibling": {
              "get": function () { return this.previous_element_sibling; },
              "set": function (value) { this.previous_element_sibling = value; }
            },
            "scrollHeight": {
              "get": function () { return this.scroll_height; },
              "set": function (value) { this.scroll_height = value; }
            },
            "scrollLeft": {
              "get": function () { return this.scroll_left; },
              "set": function (value) { this.scroll_left = value; }
            },
            "scrollTop": {
              "get": function () { return this.scroll_top; },
              "set": function (value) { this.scroll_top = value; }
            },
            "scrollWidth": {
              "get": function () { return this.scroll_width; },
              "set": function (value) { this.scroll_width = value; }
            },
            "tagName": {
              "get": function () { return this.tag_name; },
              "set": function (value) { this.tag_name = value; }
            },
            "webkitRegionOverset": {
              "get": function () { return this.webkit_region_overset; },
              "set": function (value) { this.webkit_region_overset = value; }
            }
          },
          "static": {}
        },
        "DOMEntityReference": {
          "prototype": {},
          "static": {}
        },
        "DOMEvent": {
          "prototype": {
            "getBubbles": {
              "value": function () { return this.get_bubbles.apply(this, arguments); }
            },
            "getCancelBubble": {
              "value": function () { return this.get_cancel_bubble.apply(this, arguments); }
            },
            "getCancelable": {
              "value": function () { return this.get_cancelable.apply(this, arguments); }
            },
            "getCurrentTarget": {
              "value": function () { return this.get_current_target.apply(this, arguments); }
            },
            "getEventPhase": {
              "value": function () { return this.get_event_phase.apply(this, arguments); }
            },
            "getEventType": {
              "value": function () { return this.get_event_type.apply(this, arguments); }
            },
            "getReturnValue": {
              "value": function () { return this.get_return_value.apply(this, arguments); }
            },
            "getSrcElement": {
              "value": function () { return this.get_src_element.apply(this, arguments); }
            },
            "getTarget": {
              "value": function () { return this.get_target.apply(this, arguments); }
            },
            "getTimeStamp": {
              "value": function () { return this.get_time_stamp.apply(this, arguments); }
            },
            "initEvent": {
              "value": function () { return this.init_event.apply(this, arguments); }
            },
            "preventDefault": {
              "value": function () { return this.prevent_default.apply(this, arguments); }
            },
            "setCancelBubble": {
              "value": function () { return this.set_cancel_bubble.apply(this, arguments); }
            },
            "setReturnValue": {
              "value": function () { return this.set_return_value.apply(this, arguments); }
            },
            "stopPropagation": {
              "value": function () { return this.stop_propagation.apply(this, arguments); }
            },
            "cancelBubble": {
              "get": function () { return this.cancel_bubble; },
              "set": function (value) { this.cancel_bubble = value; }
            },
            "currentTarget": {
              "get": function () { return this.current_target; },
              "set": function (value) { this.current_target = value; }
            },
            "defaultPrevented": {
              "get": function () { return this.default_prevented; },
              "set": function (value) { this.default_prevented = value; }
            },
            "eventPhase": {
              "get": function () { return this.event_phase; },
              "set": function (value) { this.event_phase = value; }
            },
            "returnValue": {
              "get": function () { return this.return_value; },
              "set": function (value) { this.return_value = value; }
            },
            "srcElement": {
              "get": function () { return this.src_element; },
              "set": function (value) { this.src_element = value; }
            },
            "timeStamp": {
              "get": function () { return this.time_stamp; },
              "set": function (value) { this.time_stamp = value; }
            }
          },
          "static": {}
        },
        "DOMFile": {
          "prototype": {
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DOMFileList": {
          "prototype": {
            "getLength": {
              "value": function () { return this.get_length.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DOMHTMLAnchorElement": {
          "prototype": {
            "getCharset": {
              "value": function () { return this.get_charset.apply(this, arguments); }
            },
            "getCoords": {
              "value": function () { return this.get_coords.apply(this, arguments); }
            },
            "getHash": {
              "value": function () { return this.get_hash.apply(this, arguments); }
            },
            "getHost": {
              "value": function () { return this.get_host.apply(this, arguments); }
            },
            "getHostname": {
              "value": function () { return this.get_hostname.apply(this, arguments); }
            },
            "getHref": {
              "value": function () { return this.get_href.apply(this, arguments); }
            },
            "getHreflang": {
              "value": function () { return this.get_hreflang.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getPathname": {
              "value": function () { return this.get_pathname.apply(this, arguments); }
            },
            "getPort": {
              "value": function () { return this.get_port.apply(this, arguments); }
            },
            "getProtocol": {
              "value": function () { return this.get_protocol.apply(this, arguments); }
            },
            "getRel": {
              "value": function () { return this.get_rel.apply(this, arguments); }
            },
            "getRev": {
              "value": function () { return this.get_rev.apply(this, arguments); }
            },
            "getSearch": {
              "value": function () { return this.get_search.apply(this, arguments); }
            },
            "getShape": {
              "value": function () { return this.get_shape.apply(this, arguments); }
            },
            "getTarget": {
              "value": function () { return this.get_target.apply(this, arguments); }
            },
            "getText": {
              "value": function () { return this.get_text.apply(this, arguments); }
            },
            "getTypeAttr": {
              "value": function () { return this.get_type_attr.apply(this, arguments); }
            },
            "setCharset": {
              "value": function () { return this.set_charset.apply(this, arguments); }
            },
            "setCoords": {
              "value": function () { return this.set_coords.apply(this, arguments); }
            },
            "setHash": {
              "value": function () { return this.set_hash.apply(this, arguments); }
            },
            "setHost": {
              "value": function () { return this.set_host.apply(this, arguments); }
            },
            "setHostname": {
              "value": function () { return this.set_hostname.apply(this, arguments); }
            },
            "setHref": {
              "value": function () { return this.set_href.apply(this, arguments); }
            },
            "setHreflang": {
              "value": function () { return this.set_hreflang.apply(this, arguments); }
            },
            "setName": {
              "value": function () { return this.set_name.apply(this, arguments); }
            },
            "setPathname": {
              "value": function () { return this.set_pathname.apply(this, arguments); }
            },
            "setPort": {
              "value": function () { return this.set_port.apply(this, arguments); }
            },
            "setProtocol": {
              "value": function () { return this.set_protocol.apply(this, arguments); }
            },
            "setRel": {
              "value": function () { return this.set_rel.apply(this, arguments); }
            },
            "setRev": {
              "value": function () { return this.set_rev.apply(this, arguments); }
            },
            "setSearch": {
              "value": function () { return this.set_search.apply(this, arguments); }
            },
            "setShape": {
              "value": function () { return this.set_shape.apply(this, arguments); }
            },
            "setTarget": {
              "value": function () { return this.set_target.apply(this, arguments); }
            },
            "setTypeAttr": {
              "value": function () { return this.set_type_attr.apply(this, arguments); }
            },
            "relList": {
              "get": function () { return this.rel_list; },
              "set": function (value) { this.rel_list = value; }
            }
          },
          "static": {}
        },
        "DOMHTMLAppletElement": {
          "prototype": {
            "getAlign": {
              "value": function () { return this.get_align.apply(this, arguments); }
            },
            "getAlt": {
              "value": function () { return this.get_alt.apply(this, arguments); }
            },
            "getArchive": {
              "value": function () { return this.get_archive.apply(this, arguments); }
            },
            "getCode": {
              "value": function () { return this.get_code.apply(this, arguments); }
            },
            "getCodeBase": {
              "value": function () { return this.get_code_base.apply(this, arguments); }
            },
            "getHeight": {
              "value": function () { return this.get_height.apply(this, arguments); }
            },
            "getHspace": {
              "value": function () { return this.get_hspace.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getObject": {
              "value": function () { return this.get_object.apply(this, arguments); }
            },
            "getVspace": {
              "value": function () { return this.get_vspace.apply(this, arguments); }
            },
            "getWidth": {
              "value": function () { return this.get_width.apply(this, arguments); }
            },
            "setAlign": {
              "value": function () { return this.set_align.apply(this, arguments); }
            },
            "setAlt": {
              "value": function () { return this.set_alt.apply(this, arguments); }
            },
            "setArchive": {
              "value": function () { return this.set_archive.apply(this, arguments); }
            },
            "setCode": {
              "value": function () { return this.set_code.apply(this, arguments); }
            },
            "setCodeBase": {
              "value": function () { return this.set_code_base.apply(this, arguments); }
            },
            "setHeight": {
              "value": function () { return this.set_height.apply(this, arguments); }
            },
            "setHspace": {
              "value": function () { return this.set_hspace.apply(this, arguments); }
            },
            "setName": {
              "value": function () { return this.set_name.apply(this, arguments); }
            },
            "setObject": {
              "value": function () { return this.set_object.apply(this, arguments); }
            },
            "setVspace": {
              "value": function () { return this.set_vspace.apply(this, arguments); }
            },
            "setWidth": {
              "value": function () { return this.set_width.apply(this, arguments); }
            },
            "codeBase": {
              "get": function () { return this.code_base; },
              "set": function (value) { this.code_base = value; }
            }
          },
          "static": {}
        },
        "DOMHTMLAreaElement": {
          "prototype": {
            "getAlt": {
              "value": function () { return this.get_alt.apply(this, arguments); }
            },
            "getCoords": {
              "value": function () { return this.get_coords.apply(this, arguments); }
            },
            "getHash": {
              "value": function () { return this.get_hash.apply(this, arguments); }
            },
            "getHost": {
              "value": function () { return this.get_host.apply(this, arguments); }
            },
            "getHostname": {
              "value": function () { return this.get_hostname.apply(this, arguments); }
            },
            "getHref": {
              "value": function () { return this.get_href.apply(this, arguments); }
            },
            "getNoHref": {
              "value": function () { return this.get_no_href.apply(this, arguments); }
            },
            "getPathname": {
              "value": function () { return this.get_pathname.apply(this, arguments); }
            },
            "getPort": {
              "value": function () { return this.get_port.apply(this, arguments); }
            },
            "getProtocol": {
              "value": function () { return this.get_protocol.apply(this, arguments); }
            },
            "getSearch": {
              "value": function () { return this.get_search.apply(this, arguments); }
            },
            "getShape": {
              "value": function () { return this.get_shape.apply(this, arguments); }
            },
            "getTarget": {
              "value": function () { return this.get_target.apply(this, arguments); }
            },
            "setAlt": {
              "value": function () { return this.set_alt.apply(this, arguments); }
            },
            "setCoords": {
              "value": function () { return this.set_coords.apply(this, arguments); }
            },
            "setHref": {
              "value": function () { return this.set_href.apply(this, arguments); }
            },
            "setNoHref": {
              "value": function () { return this.set_no_href.apply(this, arguments); }
            },
            "setShape": {
              "value": function () { return this.set_shape.apply(this, arguments); }
            },
            "setTarget": {
              "value": function () { return this.set_target.apply(this, arguments); }
            },
            "noHref": {
              "get": function () { return this.no_href; },
              "set": function (value) { this.no_href = value; }
            },
            "relList": {
              "get": function () { return this.rel_list; },
              "set": function (value) { this.rel_list = value; }
            }
          },
          "static": {}
        },
        "DOMHTMLBRElement": {
          "prototype": {
            "getClear": {
              "value": function () { return this.get_clear.apply(this, arguments); }
            },
            "setClear": {
              "value": function () { return this.set_clear.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DOMHTMLBaseElement": {
          "prototype": {
            "getHref": {
              "value": function () { return this.get_href.apply(this, arguments); }
            },
            "getTarget": {
              "value": function () { return this.get_target.apply(this, arguments); }
            },
            "setHref": {
              "value": function () { return this.set_href.apply(this, arguments); }
            },
            "setTarget": {
              "value": function () { return this.set_target.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DOMHTMLBaseFontElement": {
          "prototype": {
            "getColor": {
              "value": function () { return this.get_color.apply(this, arguments); }
            },
            "getFace": {
              "value": function () { return this.get_face.apply(this, arguments); }
            },
            "getSize": {
              "value": function () { return this.get_size.apply(this, arguments); }
            },
            "setColor": {
              "value": function () { return this.set_color.apply(this, arguments); }
            },
            "setFace": {
              "value": function () { return this.set_face.apply(this, arguments); }
            },
            "setSize": {
              "value": function () { return this.set_size.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DOMHTMLBodyElement": {
          "prototype": {
            "getALink": {
              "value": function () { return this.get_a_link.apply(this, arguments); }
            },
            "getBackground": {
              "value": function () { return this.get_background.apply(this, arguments); }
            },
            "getBgColor": {
              "value": function () { return this.get_bg_color.apply(this, arguments); }
            },
            "getLink": {
              "value": function () { return this.get_link.apply(this, arguments); }
            },
            "getText": {
              "value": function () { return this.get_text.apply(this, arguments); }
            },
            "getVLink": {
              "value": function () { return this.get_v_link.apply(this, arguments); }
            },
            "setALink": {
              "value": function () { return this.set_a_link.apply(this, arguments); }
            },
            "setBackground": {
              "value": function () { return this.set_background.apply(this, arguments); }
            },
            "setBgColor": {
              "value": function () { return this.set_bg_color.apply(this, arguments); }
            },
            "setLink": {
              "value": function () { return this.set_link.apply(this, arguments); }
            },
            "setText": {
              "value": function () { return this.set_text.apply(this, arguments); }
            },
            "setVLink": {
              "value": function () { return this.set_v_link.apply(this, arguments); }
            },
            "aLink": {
              "get": function () { return this.a_link; },
              "set": function (value) { this.a_link = value; }
            },
            "bgColor": {
              "get": function () { return this.bg_color; },
              "set": function (value) { this.bg_color = value; }
            },
            "vLink": {
              "get": function () { return this.v_link; },
              "set": function (value) { this.v_link = value; }
            }
          },
          "static": {}
        },
        "DOMHTMLButtonElement": {
          "prototype": {
            "getAutofocus": {
              "value": function () { return this.get_autofocus.apply(this, arguments); }
            },
            "getButtonType": {
              "value": function () { return this.get_button_type.apply(this, arguments); }
            },
            "getDisabled": {
              "value": function () { return this.get_disabled.apply(this, arguments); }
            },
            "getForm": {
              "value": function () { return this.get_form.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getValue": {
              "value": function () { return this.get_value.apply(this, arguments); }
            },
            "getWillValidate": {
              "value": function () { return this.get_will_validate.apply(this, arguments); }
            },
            "setAutofocus": {
              "value": function () { return this.set_autofocus.apply(this, arguments); }
            },
            "setButtonType": {
              "value": function () { return this.set_button_type.apply(this, arguments); }
            },
            "setDisabled": {
              "value": function () { return this.set_disabled.apply(this, arguments); }
            },
            "setName": {
              "value": function () { return this.set_name.apply(this, arguments); }
            },
            "setValue": {
              "value": function () { return this.set_value.apply(this, arguments); }
            },
            "formAction": {
              "get": function () { return this.form_action; },
              "set": function (value) { this.form_action = value; }
            },
            "formEnctype": {
              "get": function () { return this.form_enctype; },
              "set": function (value) { this.form_enctype = value; }
            },
            "formMethod": {
              "get": function () { return this.form_method; },
              "set": function (value) { this.form_method = value; }
            },
            "formNoValidate": {
              "get": function () { return this.form_no_validate; },
              "set": function (value) { this.form_no_validate = value; }
            },
            "formTarget": {
              "get": function () { return this.form_target; },
              "set": function (value) { this.form_target = value; }
            },
            "validationMessage": {
              "get": function () { return this.validation_message; },
              "set": function (value) { this.validation_message = value; }
            },
            "willValidate": {
              "get": function () { return this.will_validate; },
              "set": function (value) { this.will_validate = value; }
            }
          },
          "static": {}
        },
        "DOMHTMLCanvasElement": {
          "prototype": {
            "getHeight": {
              "value": function () { return this.get_height.apply(this, arguments); }
            },
            "getWidth": {
              "value": function () { return this.get_width.apply(this, arguments); }
            },
            "setHeight": {
              "value": function () { return this.set_height.apply(this, arguments); }
            },
            "setWidth": {
              "value": function () { return this.set_width.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DOMHTMLCollection": {
          "prototype": {
            "getLength": {
              "value": function () { return this.get_length.apply(this, arguments); }
            },
            "namedItem": {
              "value": function () { return this.named_item.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DOMHTMLDListElement": {
          "prototype": {
            "getCompact": {
              "value": function () { return this.get_compact.apply(this, arguments); }
            },
            "setCompact": {
              "value": function () { return this.set_compact.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DOMHTMLDirectoryElement": {
          "prototype": {
            "getCompact": {
              "value": function () { return this.get_compact.apply(this, arguments); }
            },
            "setCompact": {
              "value": function () { return this.set_compact.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DOMHTMLDivElement": {
          "prototype": {
            "getAlign": {
              "value": function () { return this.get_align.apply(this, arguments); }
            },
            "setAlign": {
              "value": function () { return this.set_align.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DOMHTMLDocument": {
          "prototype": {
            "captureEvents": {
              "value": function () { return this.capture_events.apply(this, arguments); }
            },
            "getAlinkColor": {
              "value": function () { return this.get_alink_color.apply(this, arguments); }
            },
            "getBgColor": {
              "value": function () { return this.get_bg_color.apply(this, arguments); }
            },
            "getCompatMode": {
              "value": function () { return this.get_compat_mode.apply(this, arguments); }
            },
            "getDesignMode": {
              "value": function () { return this.get_design_mode.apply(this, arguments); }
            },
            "getDir": {
              "value": function () { return this.get_dir.apply(this, arguments); }
            },
            "getEmbeds": {
              "value": function () { return this.get_embeds.apply(this, arguments); }
            },
            "getFgColor": {
              "value": function () { return this.get_fg_color.apply(this, arguments); }
            },
            "getHeight": {
              "value": function () { return this.get_height.apply(this, arguments); }
            },
            "getLinkColor": {
              "value": function () { return this.get_link_color.apply(this, arguments); }
            },
            "getPlugins": {
              "value": function () { return this.get_plugins.apply(this, arguments); }
            },
            "getScripts": {
              "value": function () { return this.get_scripts.apply(this, arguments); }
            },
            "getVlinkColor": {
              "value": function () { return this.get_vlink_color.apply(this, arguments); }
            },
            "getWidth": {
              "value": function () { return this.get_width.apply(this, arguments); }
            },
            "releaseEvents": {
              "value": function () { return this.release_events.apply(this, arguments); }
            },
            "setAlinkColor": {
              "value": function () { return this.set_alink_color.apply(this, arguments); }
            },
            "setBgColor": {
              "value": function () { return this.set_bg_color.apply(this, arguments); }
            },
            "setDesignMode": {
              "value": function () { return this.set_design_mode.apply(this, arguments); }
            },
            "setDir": {
              "value": function () { return this.set_dir.apply(this, arguments); }
            },
            "setFgColor": {
              "value": function () { return this.set_fg_color.apply(this, arguments); }
            },
            "setLinkColor": {
              "value": function () { return this.set_link_color.apply(this, arguments); }
            },
            "setVlinkColor": {
              "value": function () { return this.set_vlink_color.apply(this, arguments); }
            },
            "alinkColor": {
              "get": function () { return this.alink_color; },
              "set": function (value) { this.alink_color = value; }
            },
            "bgColor": {
              "get": function () { return this.bg_color; },
              "set": function (value) { this.bg_color = value; }
            },
            "compatMode": {
              "get": function () { return this.compat_mode; },
              "set": function (value) { this.compat_mode = value; }
            },
            "designMode": {
              "get": function () { return this.design_mode; },
              "set": function (value) { this.design_mode = value; }
            },
            "fgColor": {
              "get": function () { return this.fg_color; },
              "set": function (value) { this.fg_color = value; }
            },
            "linkColor": {
              "get": function () { return this.link_color; },
              "set": function (value) { this.link_color = value; }
            },
            "vlinkColor": {
              "get": function () { return this.vlink_color; },
              "set": function (value) { this.vlink_color = value; }
            }
          },
          "static": {}
        },
        "DOMHTMLElement": {
          "prototype": {
            "getAccessKey": {
              "value": function () { return this.get_access_key.apply(this, arguments); }
            },
            "getChildren": {
              "value": function () { return this.get_children.apply(this, arguments); }
            },
            "getContentEditable": {
              "value": function () { return this.get_content_editable.apply(this, arguments); }
            },
            "getDir": {
              "value": function () { return this.get_dir.apply(this, arguments); }
            },
            "getInnerHtml": {
              "value": function () { return this.get_inner_html.apply(this, arguments); }
            },
            "getInnerText": {
              "value": function () { return this.get_inner_text.apply(this, arguments); }
            },
            "getIsContentEditable": {
              "value": function () { return this.get_is_content_editable.apply(this, arguments); }
            },
            "getLang": {
              "value": function () { return this.get_lang.apply(this, arguments); }
            },
            "getOuterHtml": {
              "value": function () { return this.get_outer_html.apply(this, arguments); }
            },
            "getOuterText": {
              "value": function () { return this.get_outer_text.apply(this, arguments); }
            },
            "getTabIndex": {
              "value": function () { return this.get_tab_index.apply(this, arguments); }
            },
            "getTitle": {
              "value": function () { return this.get_title.apply(this, arguments); }
            },
            "setAccessKey": {
              "value": function () { return this.set_access_key.apply(this, arguments); }
            },
            "setContentEditable": {
              "value": function () { return this.set_content_editable.apply(this, arguments); }
            },
            "setDir": {
              "value": function () { return this.set_dir.apply(this, arguments); }
            },
            "setInnerHtml": {
              "value": function () { return this.set_inner_html.apply(this, arguments); }
            },
            "setInnerText": {
              "value": function () { return this.set_inner_text.apply(this, arguments); }
            },
            "setLang": {
              "value": function () { return this.set_lang.apply(this, arguments); }
            },
            "setOuterHtml": {
              "value": function () { return this.set_outer_html.apply(this, arguments); }
            },
            "setOuterText": {
              "value": function () { return this.set_outer_text.apply(this, arguments); }
            },
            "setTabIndex": {
              "value": function () { return this.set_tab_index.apply(this, arguments); }
            },
            "setTitle": {
              "value": function () { return this.set_title.apply(this, arguments); }
            },
            "accessKey": {
              "get": function () { return this.access_key; },
              "set": function (value) { this.access_key = value; }
            },
            "contentEditable": {
              "get": function () { return this.content_editable; },
              "set": function (value) { this.content_editable = value; }
            },
            "innerText": {
              "get": function () { return this.inner_text; },
              "set": function (value) { this.inner_text = value; }
            },
            "isContentEditable": {
              "get": function () { return this.is_content_editable; },
              "set": function (value) { this.is_content_editable = value; }
            },
            "outerText": {
              "get": function () { return this.outer_text; },
              "set": function (value) { this.outer_text = value; }
            },
            "tabIndex": {
              "get": function () { return this.tab_index; },
              "set": function (value) { this.tab_index = value; }
            }
          },
          "static": {}
        },
        "DOMHTMLEmbedElement": {
          "prototype": {
            "getAlign": {
              "value": function () { return this.get_align.apply(this, arguments); }
            },
            "getHeight": {
              "value": function () { return this.get_height.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getSrc": {
              "value": function () { return this.get_src.apply(this, arguments); }
            },
            "getTypeAttr": {
              "value": function () { return this.get_type_attr.apply(this, arguments); }
            },
            "getWidth": {
              "value": function () { return this.get_width.apply(this, arguments); }
            },
            "setAlign": {
              "value": function () { return this.set_align.apply(this, arguments); }
            },
            "setHeight": {
              "value": function () { return this.set_height.apply(this, arguments); }
            },
            "setName": {
              "value": function () { return this.set_name.apply(this, arguments); }
            },
            "setSrc": {
              "value": function () { return this.set_src.apply(this, arguments); }
            },
            "setTypeAttr": {
              "value": function () { return this.set_type_attr.apply(this, arguments); }
            },
            "setWidth": {
              "value": function () { return this.set_width.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DOMHTMLFieldSetElement": {
          "prototype": {
            "getForm": {
              "value": function () { return this.get_form.apply(this, arguments); }
            },
            "validationMessage": {
              "get": function () { return this.validation_message; },
              "set": function (value) { this.validation_message = value; }
            },
            "willValidate": {
              "get": function () { return this.will_validate; },
              "set": function (value) { this.will_validate = value; }
            }
          },
          "static": {}
        },
        "DOMHTMLFontElement": {
          "prototype": {
            "getColor": {
              "value": function () { return this.get_color.apply(this, arguments); }
            },
            "getFace": {
              "value": function () { return this.get_face.apply(this, arguments); }
            },
            "getSize": {
              "value": function () { return this.get_size.apply(this, arguments); }
            },
            "setColor": {
              "value": function () { return this.set_color.apply(this, arguments); }
            },
            "setFace": {
              "value": function () { return this.set_face.apply(this, arguments); }
            },
            "setSize": {
              "value": function () { return this.set_size.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DOMHTMLFormElement": {
          "prototype": {
            "getAcceptCharset": {
              "value": function () { return this.get_accept_charset.apply(this, arguments); }
            },
            "getAction": {
              "value": function () { return this.get_action.apply(this, arguments); }
            },
            "getElements": {
              "value": function () { return this.get_elements.apply(this, arguments); }
            },
            "getEncoding": {
              "value": function () { return this.get_encoding.apply(this, arguments); }
            },
            "getEnctype": {
              "value": function () { return this.get_enctype.apply(this, arguments); }
            },
            "getLength": {
              "value": function () { return this.get_length.apply(this, arguments); }
            },
            "getMethod": {
              "value": function () { return this.get_method.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getTarget": {
              "value": function () { return this.get_target.apply(this, arguments); }
            },
            "setAcceptCharset": {
              "value": function () { return this.set_accept_charset.apply(this, arguments); }
            },
            "setAction": {
              "value": function () { return this.set_action.apply(this, arguments); }
            },
            "setEncoding": {
              "value": function () { return this.set_encoding.apply(this, arguments); }
            },
            "setEnctype": {
              "value": function () { return this.set_enctype.apply(this, arguments); }
            },
            "setMethod": {
              "value": function () { return this.set_method.apply(this, arguments); }
            },
            "setName": {
              "value": function () { return this.set_name.apply(this, arguments); }
            },
            "setTarget": {
              "value": function () { return this.set_target.apply(this, arguments); }
            },
            "acceptCharset": {
              "get": function () { return this.accept_charset; },
              "set": function (value) { this.accept_charset = value; }
            },
            "noValidate": {
              "get": function () { return this.no_validate; },
              "set": function (value) { this.no_validate = value; }
            }
          },
          "static": {}
        },
        "DOMHTMLFrameElement": {
          "prototype": {
            "getContentDocument": {
              "value": function () { return this.get_content_document.apply(this, arguments); }
            },
            "getContentWindow": {
              "value": function () { return this.get_content_window.apply(this, arguments); }
            },
            "getFrameBorder": {
              "value": function () { return this.get_frame_border.apply(this, arguments); }
            },
            "getHeight": {
              "value": function () { return this.get_height.apply(this, arguments); }
            },
            "getLongDesc": {
              "value": function () { return this.get_long_desc.apply(this, arguments); }
            },
            "getMarginHeight": {
              "value": function () { return this.get_margin_height.apply(this, arguments); }
            },
            "getMarginWidth": {
              "value": function () { return this.get_margin_width.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getNoResize": {
              "value": function () { return this.get_no_resize.apply(this, arguments); }
            },
            "getScrolling": {
              "value": function () { return this.get_scrolling.apply(this, arguments); }
            },
            "getSrc": {
              "value": function () { return this.get_src.apply(this, arguments); }
            },
            "getWidth": {
              "value": function () { return this.get_width.apply(this, arguments); }
            },
            "setFrameBorder": {
              "value": function () { return this.set_frame_border.apply(this, arguments); }
            },
            "setLongDesc": {
              "value": function () { return this.set_long_desc.apply(this, arguments); }
            },
            "setMarginHeight": {
              "value": function () { return this.set_margin_height.apply(this, arguments); }
            },
            "setMarginWidth": {
              "value": function () { return this.set_margin_width.apply(this, arguments); }
            },
            "setName": {
              "value": function () { return this.set_name.apply(this, arguments); }
            },
            "setNoResize": {
              "value": function () { return this.set_no_resize.apply(this, arguments); }
            },
            "setScrolling": {
              "value": function () { return this.set_scrolling.apply(this, arguments); }
            },
            "setSrc": {
              "value": function () { return this.set_src.apply(this, arguments); }
            },
            "contentDocument": {
              "get": function () { return this.content_document; },
              "set": function (value) { this.content_document = value; }
            },
            "contentWindow": {
              "get": function () { return this.content_window; },
              "set": function (value) { this.content_window = value; }
            },
            "frameBorder": {
              "get": function () { return this.frame_border; },
              "set": function (value) { this.frame_border = value; }
            },
            "longDesc": {
              "get": function () { return this.long_desc; },
              "set": function (value) { this.long_desc = value; }
            },
            "marginHeight": {
              "get": function () { return this.margin_height; },
              "set": function (value) { this.margin_height = value; }
            },
            "marginWidth": {
              "get": function () { return this.margin_width; },
              "set": function (value) { this.margin_width = value; }
            },
            "noResize": {
              "get": function () { return this.no_resize; },
              "set": function (value) { this.no_resize = value; }
            }
          },
          "static": {}
        },
        "DOMHTMLFrameSetElement": {
          "prototype": {
            "getCols": {
              "value": function () { return this.get_cols.apply(this, arguments); }
            },
            "getRows": {
              "value": function () { return this.get_rows.apply(this, arguments); }
            },
            "setCols": {
              "value": function () { return this.set_cols.apply(this, arguments); }
            },
            "setRows": {
              "value": function () { return this.set_rows.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DOMHTMLHRElement": {
          "prototype": {
            "getAlign": {
              "value": function () { return this.get_align.apply(this, arguments); }
            },
            "getNoShade": {
              "value": function () { return this.get_no_shade.apply(this, arguments); }
            },
            "getSize": {
              "value": function () { return this.get_size.apply(this, arguments); }
            },
            "getWidth": {
              "value": function () { return this.get_width.apply(this, arguments); }
            },
            "setAlign": {
              "value": function () { return this.set_align.apply(this, arguments); }
            },
            "setNoShade": {
              "value": function () { return this.set_no_shade.apply(this, arguments); }
            },
            "setSize": {
              "value": function () { return this.set_size.apply(this, arguments); }
            },
            "setWidth": {
              "value": function () { return this.set_width.apply(this, arguments); }
            },
            "noShade": {
              "get": function () { return this.no_shade; },
              "set": function (value) { this.no_shade = value; }
            }
          },
          "static": {}
        },
        "DOMHTMLHeadElement": {
          "prototype": {
            "getProfile": {
              "value": function () { return this.get_profile.apply(this, arguments); }
            },
            "setProfile": {
              "value": function () { return this.set_profile.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DOMHTMLHeadingElement": {
          "prototype": {
            "getAlign": {
              "value": function () { return this.get_align.apply(this, arguments); }
            },
            "setAlign": {
              "value": function () { return this.set_align.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DOMHTMLHtmlElement": {
          "prototype": {
            "getVersion": {
              "value": function () { return this.get_version.apply(this, arguments); }
            },
            "setVersion": {
              "value": function () { return this.set_version.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DOMHTMLIFrameElement": {
          "prototype": {
            "getAlign": {
              "value": function () { return this.get_align.apply(this, arguments); }
            },
            "getContentDocument": {
              "value": function () { return this.get_content_document.apply(this, arguments); }
            },
            "getContentWindow": {
              "value": function () { return this.get_content_window.apply(this, arguments); }
            },
            "getFrameBorder": {
              "value": function () { return this.get_frame_border.apply(this, arguments); }
            },
            "getHeight": {
              "value": function () { return this.get_height.apply(this, arguments); }
            },
            "getLongDesc": {
              "value": function () { return this.get_long_desc.apply(this, arguments); }
            },
            "getMarginHeight": {
              "value": function () { return this.get_margin_height.apply(this, arguments); }
            },
            "getMarginWidth": {
              "value": function () { return this.get_margin_width.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getScrolling": {
              "value": function () { return this.get_scrolling.apply(this, arguments); }
            },
            "getSrc": {
              "value": function () { return this.get_src.apply(this, arguments); }
            },
            "getWidth": {
              "value": function () { return this.get_width.apply(this, arguments); }
            },
            "setAlign": {
              "value": function () { return this.set_align.apply(this, arguments); }
            },
            "setFrameBorder": {
              "value": function () { return this.set_frame_border.apply(this, arguments); }
            },
            "setHeight": {
              "value": function () { return this.set_height.apply(this, arguments); }
            },
            "setLongDesc": {
              "value": function () { return this.set_long_desc.apply(this, arguments); }
            },
            "setMarginHeight": {
              "value": function () { return this.set_margin_height.apply(this, arguments); }
            },
            "setMarginWidth": {
              "value": function () { return this.set_margin_width.apply(this, arguments); }
            },
            "setName": {
              "value": function () { return this.set_name.apply(this, arguments); }
            },
            "setScrolling": {
              "value": function () { return this.set_scrolling.apply(this, arguments); }
            },
            "setSrc": {
              "value": function () { return this.set_src.apply(this, arguments); }
            },
            "setWidth": {
              "value": function () { return this.set_width.apply(this, arguments); }
            },
            "contentDocument": {
              "get": function () { return this.content_document; },
              "set": function (value) { this.content_document = value; }
            },
            "contentWindow": {
              "get": function () { return this.content_window; },
              "set": function (value) { this.content_window = value; }
            },
            "frameBorder": {
              "get": function () { return this.frame_border; },
              "set": function (value) { this.frame_border = value; }
            },
            "longDesc": {
              "get": function () { return this.long_desc; },
              "set": function (value) { this.long_desc = value; }
            },
            "marginHeight": {
              "get": function () { return this.margin_height; },
              "set": function (value) { this.margin_height = value; }
            },
            "marginWidth": {
              "get": function () { return this.margin_width; },
              "set": function (value) { this.margin_width = value; }
            }
          },
          "static": {}
        },
        "DOMHTMLImageElement": {
          "prototype": {
            "getAlign": {
              "value": function () { return this.get_align.apply(this, arguments); }
            },
            "getAlt": {
              "value": function () { return this.get_alt.apply(this, arguments); }
            },
            "getBorder": {
              "value": function () { return this.get_border.apply(this, arguments); }
            },
            "getComplete": {
              "value": function () { return this.get_complete.apply(this, arguments); }
            },
            "getHeight": {
              "value": function () { return this.get_height.apply(this, arguments); }
            },
            "getHspace": {
              "value": function () { return this.get_hspace.apply(this, arguments); }
            },
            "getIsMap": {
              "value": function () { return this.get_is_map.apply(this, arguments); }
            },
            "getLongDesc": {
              "value": function () { return this.get_long_desc.apply(this, arguments); }
            },
            "getLowsrc": {
              "value": function () { return this.get_lowsrc.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getNaturalHeight": {
              "value": function () { return this.get_natural_height.apply(this, arguments); }
            },
            "getNaturalWidth": {
              "value": function () { return this.get_natural_width.apply(this, arguments); }
            },
            "getSrc": {
              "value": function () { return this.get_src.apply(this, arguments); }
            },
            "getUseMap": {
              "value": function () { return this.get_use_map.apply(this, arguments); }
            },
            "getVspace": {
              "value": function () { return this.get_vspace.apply(this, arguments); }
            },
            "getWidth": {
              "value": function () { return this.get_width.apply(this, arguments); }
            },
            "getX": {
              "value": function () { return this.get_x.apply(this, arguments); }
            },
            "getY": {
              "value": function () { return this.get_y.apply(this, arguments); }
            },
            "setAlign": {
              "value": function () { return this.set_align.apply(this, arguments); }
            },
            "setAlt": {
              "value": function () { return this.set_alt.apply(this, arguments); }
            },
            "setBorder": {
              "value": function () { return this.set_border.apply(this, arguments); }
            },
            "setHeight": {
              "value": function () { return this.set_height.apply(this, arguments); }
            },
            "setHspace": {
              "value": function () { return this.set_hspace.apply(this, arguments); }
            },
            "setIsMap": {
              "value": function () { return this.set_is_map.apply(this, arguments); }
            },
            "setLongDesc": {
              "value": function () { return this.set_long_desc.apply(this, arguments); }
            },
            "setLowsrc": {
              "value": function () { return this.set_lowsrc.apply(this, arguments); }
            },
            "setName": {
              "value": function () { return this.set_name.apply(this, arguments); }
            },
            "setSrc": {
              "value": function () { return this.set_src.apply(this, arguments); }
            },
            "setUseMap": {
              "value": function () { return this.set_use_map.apply(this, arguments); }
            },
            "setVspace": {
              "value": function () { return this.set_vspace.apply(this, arguments); }
            },
            "setWidth": {
              "value": function () { return this.set_width.apply(this, arguments); }
            },
            "crossOrigin": {
              "get": function () { return this.cross_origin; },
              "set": function (value) { this.cross_origin = value; }
            },
            "currentSrc": {
              "get": function () { return this.current_src; },
              "set": function (value) { this.current_src = value; }
            },
            "isMap": {
              "get": function () { return this.is_map; },
              "set": function (value) { this.is_map = value; }
            },
            "longDesc": {
              "get": function () { return this.long_desc; },
              "set": function (value) { this.long_desc = value; }
            },
            "naturalHeight": {
              "get": function () { return this.natural_height; },
              "set": function (value) { this.natural_height = value; }
            },
            "naturalWidth": {
              "get": function () { return this.natural_width; },
              "set": function (value) { this.natural_width = value; }
            },
            "useMap": {
              "get": function () { return this.use_map; },
              "set": function (value) { this.use_map = value; }
            }
          },
          "static": {}
        },
        "DOMHTMLInputElement": {
          "prototype": {
            "getAccept": {
              "value": function () { return this.get_accept.apply(this, arguments); }
            },
            "getAlign": {
              "value": function () { return this.get_align.apply(this, arguments); }
            },
            "getAlt": {
              "value": function () { return this.get_alt.apply(this, arguments); }
            },
            "getAutofocus": {
              "value": function () { return this.get_autofocus.apply(this, arguments); }
            },
            "getCapture": {
              "value": function () { return this.get_capture.apply(this, arguments); }
            },
            "getChecked": {
              "value": function () { return this.get_checked.apply(this, arguments); }
            },
            "getDefaultChecked": {
              "value": function () { return this.get_default_checked.apply(this, arguments); }
            },
            "getDefaultValue": {
              "value": function () { return this.get_default_value.apply(this, arguments); }
            },
            "getDisabled": {
              "value": function () { return this.get_disabled.apply(this, arguments); }
            },
            "getFiles": {
              "value": function () { return this.get_files.apply(this, arguments); }
            },
            "getForm": {
              "value": function () { return this.get_form.apply(this, arguments); }
            },
            "getHeight": {
              "value": function () { return this.get_height.apply(this, arguments); }
            },
            "getIndeterminate": {
              "value": function () { return this.get_indeterminate.apply(this, arguments); }
            },
            "getInputType": {
              "value": function () { return this.get_input_type.apply(this, arguments); }
            },
            "getMaxLength": {
              "value": function () { return this.get_max_length.apply(this, arguments); }
            },
            "getMultiple": {
              "value": function () { return this.get_multiple.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getSize": {
              "value": function () { return this.get_size.apply(this, arguments); }
            },
            "getSrc": {
              "value": function () { return this.get_src.apply(this, arguments); }
            },
            "getUseMap": {
              "value": function () { return this.get_use_map.apply(this, arguments); }
            },
            "getValue": {
              "value": function () { return this.get_value.apply(this, arguments); }
            },
            "getWidth": {
              "value": function () { return this.get_width.apply(this, arguments); }
            },
            "getWillValidate": {
              "value": function () { return this.get_will_validate.apply(this, arguments); }
            },
            "isEdited": {
              "value": function () { return this.is_edited.apply(this, arguments); }
            },
            "setAccept": {
              "value": function () { return this.set_accept.apply(this, arguments); }
            },
            "setAlign": {
              "value": function () { return this.set_align.apply(this, arguments); }
            },
            "setAlt": {
              "value": function () { return this.set_alt.apply(this, arguments); }
            },
            "setAutofocus": {
              "value": function () { return this.set_autofocus.apply(this, arguments); }
            },
            "setChecked": {
              "value": function () { return this.set_checked.apply(this, arguments); }
            },
            "setDefaultValue": {
              "value": function () { return this.set_default_value.apply(this, arguments); }
            },
            "setDisabled": {
              "value": function () { return this.set_disabled.apply(this, arguments); }
            },
            "setFiles": {
              "value": function () { return this.set_files.apply(this, arguments); }
            },
            "setHeight": {
              "value": function () { return this.set_height.apply(this, arguments); }
            },
            "setIndeterminate": {
              "value": function () { return this.set_indeterminate.apply(this, arguments); }
            },
            "setInputType": {
              "value": function () { return this.set_input_type.apply(this, arguments); }
            },
            "setMaxLength": {
              "value": function () { return this.set_max_length.apply(this, arguments); }
            },
            "setMultiple": {
              "value": function () { return this.set_multiple.apply(this, arguments); }
            },
            "setName": {
              "value": function () { return this.set_name.apply(this, arguments); }
            },
            "setReadOnly": {
              "value": function () { return this.set_read_only.apply(this, arguments); }
            },
            "setSize": {
              "value": function () { return this.set_size.apply(this, arguments); }
            },
            "setSrc": {
              "value": function () { return this.set_src.apply(this, arguments); }
            },
            "setUseMap": {
              "value": function () { return this.set_use_map.apply(this, arguments); }
            },
            "setValue": {
              "value": function () { return this.set_value.apply(this, arguments); }
            },
            "setWidth": {
              "value": function () { return this.set_width.apply(this, arguments); }
            },
            "defaultChecked": {
              "get": function () { return this.default_checked; },
              "set": function (value) { this.default_checked = value; }
            },
            "defaultValue": {
              "get": function () { return this.default_value; },
              "set": function (value) { this.default_value = value; }
            },
            "dirName": {
              "get": function () { return this.dir_name; },
              "set": function (value) { this.dir_name = value; }
            },
            "formAction": {
              "get": function () { return this.form_action; },
              "set": function (value) { this.form_action = value; }
            },
            "formEnctype": {
              "get": function () { return this.form_enctype; },
              "set": function (value) { this.form_enctype = value; }
            },
            "formMethod": {
              "get": function () { return this.form_method; },
              "set": function (value) { this.form_method = value; }
            },
            "formNoValidate": {
              "get": function () { return this.form_no_validate; },
              "set": function (value) { this.form_no_validate = value; }
            },
            "formTarget": {
              "get": function () { return this.form_target; },
              "set": function (value) { this.form_target = value; }
            },
            "maxLength": {
              "get": function () { return this.max_length; },
              "set": function (value) { this.max_length = value; }
            },
            "readOnly": {
              "get": function () { return this.read_only; },
              "set": function (value) { this.read_only = value; }
            },
            "useMap": {
              "get": function () { return this.use_map; },
              "set": function (value) { this.use_map = value; }
            },
            "validationMessage": {
              "get": function () { return this.validation_message; },
              "set": function (value) { this.validation_message = value; }
            },
            "valueAsNumber": {
              "get": function () { return this.value_as_number; },
              "set": function (value) { this.value_as_number = value; }
            },
            "willValidate": {
              "get": function () { return this.will_validate; },
              "set": function (value) { this.will_validate = value; }
            }
          },
          "static": {}
        },
        "DOMHTMLLIElement": {
          "prototype": {
            "getTypeAttr": {
              "value": function () { return this.get_type_attr.apply(this, arguments); }
            },
            "getValue": {
              "value": function () { return this.get_value.apply(this, arguments); }
            },
            "setTypeAttr": {
              "value": function () { return this.set_type_attr.apply(this, arguments); }
            },
            "setValue": {
              "value": function () { return this.set_value.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DOMHTMLLabelElement": {
          "prototype": {
            "getForm": {
              "value": function () { return this.get_form.apply(this, arguments); }
            },
            "getHtmlFor": {
              "value": function () { return this.get_html_for.apply(this, arguments); }
            },
            "setHtmlFor": {
              "value": function () { return this.set_html_for.apply(this, arguments); }
            },
            "htmlFor": {
              "get": function () { return this.html_for; },
              "set": function (value) { this.html_for = value; }
            }
          },
          "static": {}
        },
        "DOMHTMLLegendElement": {
          "prototype": {
            "getAlign": {
              "value": function () { return this.get_align.apply(this, arguments); }
            },
            "getForm": {
              "value": function () { return this.get_form.apply(this, arguments); }
            },
            "setAlign": {
              "value": function () { return this.set_align.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DOMHTMLLinkElement": {
          "prototype": {
            "getCharset": {
              "value": function () { return this.get_charset.apply(this, arguments); }
            },
            "getDisabled": {
              "value": function () { return this.get_disabled.apply(this, arguments); }
            },
            "getHref": {
              "value": function () { return this.get_href.apply(this, arguments); }
            },
            "getHreflang": {
              "value": function () { return this.get_hreflang.apply(this, arguments); }
            },
            "getMedia": {
              "value": function () { return this.get_media.apply(this, arguments); }
            },
            "getRel": {
              "value": function () { return this.get_rel.apply(this, arguments); }
            },
            "getRev": {
              "value": function () { return this.get_rev.apply(this, arguments); }
            },
            "getSheet": {
              "value": function () { return this.get_sheet.apply(this, arguments); }
            },
            "getTarget": {
              "value": function () { return this.get_target.apply(this, arguments); }
            },
            "getTypeAttr": {
              "value": function () { return this.get_type_attr.apply(this, arguments); }
            },
            "setCharset": {
              "value": function () { return this.set_charset.apply(this, arguments); }
            },
            "setDisabled": {
              "value": function () { return this.set_disabled.apply(this, arguments); }
            },
            "setHref": {
              "value": function () { return this.set_href.apply(this, arguments); }
            },
            "setHreflang": {
              "value": function () { return this.set_hreflang.apply(this, arguments); }
            },
            "setMedia": {
              "value": function () { return this.set_media.apply(this, arguments); }
            },
            "setRel": {
              "value": function () { return this.set_rel.apply(this, arguments); }
            },
            "setRev": {
              "value": function () { return this.set_rev.apply(this, arguments); }
            },
            "setTarget": {
              "value": function () { return this.set_target.apply(this, arguments); }
            },
            "setTypeAttr": {
              "value": function () { return this.set_type_attr.apply(this, arguments); }
            },
            "relList": {
              "get": function () { return this.rel_list; },
              "set": function (value) { this.rel_list = value; }
            }
          },
          "static": {}
        },
        "DOMHTMLMapElement": {
          "prototype": {
            "getAreas": {
              "value": function () { return this.get_areas.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "setName": {
              "value": function () { return this.set_name.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DOMHTMLMarqueeElement": {
          "prototype": {
            "bgColor": {
              "get": function () { return this.bg_color; },
              "set": function (value) { this.bg_color = value; }
            },
            "scrollAmount": {
              "get": function () { return this.scroll_amount; },
              "set": function (value) { this.scroll_amount = value; }
            },
            "scrollDelay": {
              "get": function () { return this.scroll_delay; },
              "set": function (value) { this.scroll_delay = value; }
            },
            "trueSpeed": {
              "get": function () { return this.true_speed; },
              "set": function (value) { this.true_speed = value; }
            }
          },
          "static": {}
        },
        "DOMHTMLMenuElement": {
          "prototype": {
            "getCompact": {
              "value": function () { return this.get_compact.apply(this, arguments); }
            },
            "setCompact": {
              "value": function () { return this.set_compact.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DOMHTMLMetaElement": {
          "prototype": {
            "getContent": {
              "value": function () { return this.get_content.apply(this, arguments); }
            },
            "getHttpEquiv": {
              "value": function () { return this.get_http_equiv.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getScheme": {
              "value": function () { return this.get_scheme.apply(this, arguments); }
            },
            "setContent": {
              "value": function () { return this.set_content.apply(this, arguments); }
            },
            "setHttpEquiv": {
              "value": function () { return this.set_http_equiv.apply(this, arguments); }
            },
            "setName": {
              "value": function () { return this.set_name.apply(this, arguments); }
            },
            "setScheme": {
              "value": function () { return this.set_scheme.apply(this, arguments); }
            },
            "httpEquiv": {
              "get": function () { return this.http_equiv; },
              "set": function (value) { this.http_equiv = value; }
            }
          },
          "static": {}
        },
        "DOMHTMLModElement": {
          "prototype": {
            "getCite": {
              "value": function () { return this.get_cite.apply(this, arguments); }
            },
            "getDateTime": {
              "value": function () { return this.get_date_time.apply(this, arguments); }
            },
            "setCite": {
              "value": function () { return this.set_cite.apply(this, arguments); }
            },
            "setDateTime": {
              "value": function () { return this.set_date_time.apply(this, arguments); }
            },
            "dateTime": {
              "get": function () { return this.date_time; },
              "set": function (value) { this.date_time = value; }
            }
          },
          "static": {}
        },
        "DOMHTMLOListElement": {
          "prototype": {
            "getCompact": {
              "value": function () { return this.get_compact.apply(this, arguments); }
            },
            "getStart": {
              "value": function () { return this.get_start.apply(this, arguments); }
            },
            "getTypeAttr": {
              "value": function () { return this.get_type_attr.apply(this, arguments); }
            },
            "setCompact": {
              "value": function () { return this.set_compact.apply(this, arguments); }
            },
            "setStart": {
              "value": function () { return this.set_start.apply(this, arguments); }
            },
            "setTypeAttr": {
              "value": function () { return this.set_type_attr.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DOMHTMLObjectElement": {
          "prototype": {
            "getAlign": {
              "value": function () { return this.get_align.apply(this, arguments); }
            },
            "getArchive": {
              "value": function () { return this.get_archive.apply(this, arguments); }
            },
            "getBorder": {
              "value": function () { return this.get_border.apply(this, arguments); }
            },
            "getCode": {
              "value": function () { return this.get_code.apply(this, arguments); }
            },
            "getCodeBase": {
              "value": function () { return this.get_code_base.apply(this, arguments); }
            },
            "getCodeType": {
              "value": function () { return this.get_code_type.apply(this, arguments); }
            },
            "getContentDocument": {
              "value": function () { return this.get_content_document.apply(this, arguments); }
            },
            "getData": {
              "value": function () { return this.get_data.apply(this, arguments); }
            },
            "getDeclare": {
              "value": function () { return this.get_declare.apply(this, arguments); }
            },
            "getForm": {
              "value": function () { return this.get_form.apply(this, arguments); }
            },
            "getHeight": {
              "value": function () { return this.get_height.apply(this, arguments); }
            },
            "getHspace": {
              "value": function () { return this.get_hspace.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getStandby": {
              "value": function () { return this.get_standby.apply(this, arguments); }
            },
            "getTypeAttr": {
              "value": function () { return this.get_type_attr.apply(this, arguments); }
            },
            "getUseMap": {
              "value": function () { return this.get_use_map.apply(this, arguments); }
            },
            "getVspace": {
              "value": function () { return this.get_vspace.apply(this, arguments); }
            },
            "getWidth": {
              "value": function () { return this.get_width.apply(this, arguments); }
            },
            "setAlign": {
              "value": function () { return this.set_align.apply(this, arguments); }
            },
            "setArchive": {
              "value": function () { return this.set_archive.apply(this, arguments); }
            },
            "setBorder": {
              "value": function () { return this.set_border.apply(this, arguments); }
            },
            "setCode": {
              "value": function () { return this.set_code.apply(this, arguments); }
            },
            "setCodeBase": {
              "value": function () { return this.set_code_base.apply(this, arguments); }
            },
            "setCodeType": {
              "value": function () { return this.set_code_type.apply(this, arguments); }
            },
            "setData": {
              "value": function () { return this.set_data.apply(this, arguments); }
            },
            "setDeclare": {
              "value": function () { return this.set_declare.apply(this, arguments); }
            },
            "setHeight": {
              "value": function () { return this.set_height.apply(this, arguments); }
            },
            "setHspace": {
              "value": function () { return this.set_hspace.apply(this, arguments); }
            },
            "setName": {
              "value": function () { return this.set_name.apply(this, arguments); }
            },
            "setStandby": {
              "value": function () { return this.set_standby.apply(this, arguments); }
            },
            "setTypeAttr": {
              "value": function () { return this.set_type_attr.apply(this, arguments); }
            },
            "setUseMap": {
              "value": function () { return this.set_use_map.apply(this, arguments); }
            },
            "setVspace": {
              "value": function () { return this.set_vspace.apply(this, arguments); }
            },
            "setWidth": {
              "value": function () { return this.set_width.apply(this, arguments); }
            },
            "codeBase": {
              "get": function () { return this.code_base; },
              "set": function (value) { this.code_base = value; }
            },
            "codeType": {
              "get": function () { return this.code_type; },
              "set": function (value) { this.code_type = value; }
            },
            "contentDocument": {
              "get": function () { return this.content_document; },
              "set": function (value) { this.content_document = value; }
            },
            "useMap": {
              "get": function () { return this.use_map; },
              "set": function (value) { this.use_map = value; }
            },
            "validationMessage": {
              "get": function () { return this.validation_message; },
              "set": function (value) { this.validation_message = value; }
            },
            "willValidate": {
              "get": function () { return this.will_validate; },
              "set": function (value) { this.will_validate = value; }
            }
          },
          "static": {}
        },
        "DOMHTMLOptGroupElement": {
          "prototype": {
            "getDisabled": {
              "value": function () { return this.get_disabled.apply(this, arguments); }
            },
            "getLabel": {
              "value": function () { return this.get_label.apply(this, arguments); }
            },
            "setDisabled": {
              "value": function () { return this.set_disabled.apply(this, arguments); }
            },
            "setLabel": {
              "value": function () { return this.set_label.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DOMHTMLOptionElement": {
          "prototype": {
            "getDefaultSelected": {
              "value": function () { return this.get_default_selected.apply(this, arguments); }
            },
            "getDisabled": {
              "value": function () { return this.get_disabled.apply(this, arguments); }
            },
            "getForm": {
              "value": function () { return this.get_form.apply(this, arguments); }
            },
            "getIndex": {
              "value": function () { return this.get_index.apply(this, arguments); }
            },
            "getLabel": {
              "value": function () { return this.get_label.apply(this, arguments); }
            },
            "getSelected": {
              "value": function () { return this.get_selected.apply(this, arguments); }
            },
            "getText": {
              "value": function () { return this.get_text.apply(this, arguments); }
            },
            "getValue": {
              "value": function () { return this.get_value.apply(this, arguments); }
            },
            "setDefaultSelected": {
              "value": function () { return this.set_default_selected.apply(this, arguments); }
            },
            "setDisabled": {
              "value": function () { return this.set_disabled.apply(this, arguments); }
            },
            "setLabel": {
              "value": function () { return this.set_label.apply(this, arguments); }
            },
            "setSelected": {
              "value": function () { return this.set_selected.apply(this, arguments); }
            },
            "setValue": {
              "value": function () { return this.set_value.apply(this, arguments); }
            },
            "defaultSelected": {
              "get": function () { return this.default_selected; },
              "set": function (value) { this.default_selected = value; }
            }
          },
          "static": {}
        },
        "DOMHTMLOptionsCollection": {
          "prototype": {
            "getLength": {
              "value": function () { return this.get_length.apply(this, arguments); }
            },
            "getSelectedIndex": {
              "value": function () { return this.get_selected_index.apply(this, arguments); }
            },
            "namedItem": {
              "value": function () { return this.named_item.apply(this, arguments); }
            },
            "setSelectedIndex": {
              "value": function () { return this.set_selected_index.apply(this, arguments); }
            },
            "selectedIndex": {
              "get": function () { return this.selected_index; },
              "set": function (value) { this.selected_index = value; }
            }
          },
          "static": {}
        },
        "DOMHTMLParagraphElement": {
          "prototype": {
            "getAlign": {
              "value": function () { return this.get_align.apply(this, arguments); }
            },
            "setAlign": {
              "value": function () { return this.set_align.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DOMHTMLParamElement": {
          "prototype": {
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getTypeAttr": {
              "value": function () { return this.get_type_attr.apply(this, arguments); }
            },
            "getValue": {
              "value": function () { return this.get_value.apply(this, arguments); }
            },
            "getValueType": {
              "value": function () { return this.get_value_type.apply(this, arguments); }
            },
            "setName": {
              "value": function () { return this.set_name.apply(this, arguments); }
            },
            "setTypeAttr": {
              "value": function () { return this.set_type_attr.apply(this, arguments); }
            },
            "setValue": {
              "value": function () { return this.set_value.apply(this, arguments); }
            },
            "setValueType": {
              "value": function () { return this.set_value_type.apply(this, arguments); }
            },
            "valueType": {
              "get": function () { return this.value_type; },
              "set": function (value) { this.value_type = value; }
            }
          },
          "static": {}
        },
        "DOMHTMLPreElement": {
          "prototype": {
            "getWidth": {
              "value": function () { return this.get_width.apply(this, arguments); }
            },
            "getWrap": {
              "value": function () { return this.get_wrap.apply(this, arguments); }
            },
            "setWidth": {
              "value": function () { return this.set_width.apply(this, arguments); }
            },
            "setWrap": {
              "value": function () { return this.set_wrap.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DOMHTMLQuoteElement": {
          "prototype": {
            "getCite": {
              "value": function () { return this.get_cite.apply(this, arguments); }
            },
            "setCite": {
              "value": function () { return this.set_cite.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DOMHTMLScriptElement": {
          "prototype": {
            "getCharset": {
              "value": function () { return this.get_charset.apply(this, arguments); }
            },
            "getDefer": {
              "value": function () { return this.get_defer.apply(this, arguments); }
            },
            "getEvent": {
              "value": function () { return this.get_event.apply(this, arguments); }
            },
            "getHtmlFor": {
              "value": function () { return this.get_html_for.apply(this, arguments); }
            },
            "getSrc": {
              "value": function () { return this.get_src.apply(this, arguments); }
            },
            "getText": {
              "value": function () { return this.get_text.apply(this, arguments); }
            },
            "getTypeAttr": {
              "value": function () { return this.get_type_attr.apply(this, arguments); }
            },
            "setDefer": {
              "value": function () { return this.set_defer.apply(this, arguments); }
            },
            "setEvent": {
              "value": function () { return this.set_event.apply(this, arguments); }
            },
            "setHtmlFor": {
              "value": function () { return this.set_html_for.apply(this, arguments); }
            },
            "setSrc": {
              "value": function () { return this.set_src.apply(this, arguments); }
            },
            "setText": {
              "value": function () { return this.set_text.apply(this, arguments); }
            },
            "setTypeAttr": {
              "value": function () { return this.set_type_attr.apply(this, arguments); }
            },
            "crossOrigin": {
              "get": function () { return this.cross_origin; },
              "set": function (value) { this.cross_origin = value; }
            },
            "htmlFor": {
              "get": function () { return this.html_for; },
              "set": function (value) { this.html_for = value; }
            }
          },
          "static": {}
        },
        "DOMHTMLSelectElement": {
          "prototype": {
            "getAutofocus": {
              "value": function () { return this.get_autofocus.apply(this, arguments); }
            },
            "getDisabled": {
              "value": function () { return this.get_disabled.apply(this, arguments); }
            },
            "getForm": {
              "value": function () { return this.get_form.apply(this, arguments); }
            },
            "getLength": {
              "value": function () { return this.get_length.apply(this, arguments); }
            },
            "getMultiple": {
              "value": function () { return this.get_multiple.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getOptions": {
              "value": function () { return this.get_options.apply(this, arguments); }
            },
            "getSelectType": {
              "value": function () { return this.get_select_type.apply(this, arguments); }
            },
            "getSelectedIndex": {
              "value": function () { return this.get_selected_index.apply(this, arguments); }
            },
            "getSize": {
              "value": function () { return this.get_size.apply(this, arguments); }
            },
            "getValue": {
              "value": function () { return this.get_value.apply(this, arguments); }
            },
            "getWillValidate": {
              "value": function () { return this.get_will_validate.apply(this, arguments); }
            },
            "namedItem": {
              "value": function () { return this.named_item.apply(this, arguments); }
            },
            "setAutofocus": {
              "value": function () { return this.set_autofocus.apply(this, arguments); }
            },
            "setDisabled": {
              "value": function () { return this.set_disabled.apply(this, arguments); }
            },
            "setLength": {
              "value": function () { return this.set_length.apply(this, arguments); }
            },
            "setMultiple": {
              "value": function () { return this.set_multiple.apply(this, arguments); }
            },
            "setName": {
              "value": function () { return this.set_name.apply(this, arguments); }
            },
            "setSelectedIndex": {
              "value": function () { return this.set_selected_index.apply(this, arguments); }
            },
            "setSize": {
              "value": function () { return this.set_size.apply(this, arguments); }
            },
            "setValue": {
              "value": function () { return this.set_value.apply(this, arguments); }
            },
            "selectedIndex": {
              "get": function () { return this.selected_index; },
              "set": function (value) { this.selected_index = value; }
            },
            "selectedOptions": {
              "get": function () { return this.selected_options; },
              "set": function (value) { this.selected_options = value; }
            },
            "validationMessage": {
              "get": function () { return this.validation_message; },
              "set": function (value) { this.validation_message = value; }
            },
            "willValidate": {
              "get": function () { return this.will_validate; },
              "set": function (value) { this.will_validate = value; }
            }
          },
          "static": {}
        },
        "DOMHTMLStyleElement": {
          "prototype": {
            "getDisabled": {
              "value": function () { return this.get_disabled.apply(this, arguments); }
            },
            "getMedia": {
              "value": function () { return this.get_media.apply(this, arguments); }
            },
            "getSheet": {
              "value": function () { return this.get_sheet.apply(this, arguments); }
            },
            "getTypeAttr": {
              "value": function () { return this.get_type_attr.apply(this, arguments); }
            },
            "setDisabled": {
              "value": function () { return this.set_disabled.apply(this, arguments); }
            },
            "setMedia": {
              "value": function () { return this.set_media.apply(this, arguments); }
            },
            "setTypeAttr": {
              "value": function () { return this.set_type_attr.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DOMHTMLTableCaptionElement": {
          "prototype": {
            "getAlign": {
              "value": function () { return this.get_align.apply(this, arguments); }
            },
            "setAlign": {
              "value": function () { return this.set_align.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DOMHTMLTableCellElement": {
          "prototype": {
            "getAbbr": {
              "value": function () { return this.get_abbr.apply(this, arguments); }
            },
            "getAlign": {
              "value": function () { return this.get_align.apply(this, arguments); }
            },
            "getAxis": {
              "value": function () { return this.get_axis.apply(this, arguments); }
            },
            "getBgColor": {
              "value": function () { return this.get_bg_color.apply(this, arguments); }
            },
            "getCellIndex": {
              "value": function () { return this.get_cell_index.apply(this, arguments); }
            },
            "getCh": {
              "value": function () { return this.get_ch.apply(this, arguments); }
            },
            "getChOff": {
              "value": function () { return this.get_ch_off.apply(this, arguments); }
            },
            "getColSpan": {
              "value": function () { return this.get_col_span.apply(this, arguments); }
            },
            "getHeaders": {
              "value": function () { return this.get_headers.apply(this, arguments); }
            },
            "getHeight": {
              "value": function () { return this.get_height.apply(this, arguments); }
            },
            "getNoWrap": {
              "value": function () { return this.get_no_wrap.apply(this, arguments); }
            },
            "getRowSpan": {
              "value": function () { return this.get_row_span.apply(this, arguments); }
            },
            "getScope": {
              "value": function () { return this.get_scope.apply(this, arguments); }
            },
            "getVAlign": {
              "value": function () { return this.get_v_align.apply(this, arguments); }
            },
            "getWidth": {
              "value": function () { return this.get_width.apply(this, arguments); }
            },
            "setAbbr": {
              "value": function () { return this.set_abbr.apply(this, arguments); }
            },
            "setAlign": {
              "value": function () { return this.set_align.apply(this, arguments); }
            },
            "setAxis": {
              "value": function () { return this.set_axis.apply(this, arguments); }
            },
            "setBgColor": {
              "value": function () { return this.set_bg_color.apply(this, arguments); }
            },
            "setCh": {
              "value": function () { return this.set_ch.apply(this, arguments); }
            },
            "setChOff": {
              "value": function () { return this.set_ch_off.apply(this, arguments); }
            },
            "setColSpan": {
              "value": function () { return this.set_col_span.apply(this, arguments); }
            },
            "setHeaders": {
              "value": function () { return this.set_headers.apply(this, arguments); }
            },
            "setHeight": {
              "value": function () { return this.set_height.apply(this, arguments); }
            },
            "setNoWrap": {
              "value": function () { return this.set_no_wrap.apply(this, arguments); }
            },
            "setRowSpan": {
              "value": function () { return this.set_row_span.apply(this, arguments); }
            },
            "setScope": {
              "value": function () { return this.set_scope.apply(this, arguments); }
            },
            "setVAlign": {
              "value": function () { return this.set_v_align.apply(this, arguments); }
            },
            "setWidth": {
              "value": function () { return this.set_width.apply(this, arguments); }
            },
            "bgColor": {
              "get": function () { return this.bg_color; },
              "set": function (value) { this.bg_color = value; }
            },
            "cellIndex": {
              "get": function () { return this.cell_index; },
              "set": function (value) { this.cell_index = value; }
            },
            "chOff": {
              "get": function () { return this.ch_off; },
              "set": function (value) { this.ch_off = value; }
            },
            "colSpan": {
              "get": function () { return this.col_span; },
              "set": function (value) { this.col_span = value; }
            },
            "noWrap": {
              "get": function () { return this.no_wrap; },
              "set": function (value) { this.no_wrap = value; }
            },
            "rowSpan": {
              "get": function () { return this.row_span; },
              "set": function (value) { this.row_span = value; }
            },
            "vAlign": {
              "get": function () { return this.v_align; },
              "set": function (value) { this.v_align = value; }
            }
          },
          "static": {}
        },
        "DOMHTMLTableColElement": {
          "prototype": {
            "getAlign": {
              "value": function () { return this.get_align.apply(this, arguments); }
            },
            "getCh": {
              "value": function () { return this.get_ch.apply(this, arguments); }
            },
            "getChOff": {
              "value": function () { return this.get_ch_off.apply(this, arguments); }
            },
            "getSpan": {
              "value": function () { return this.get_span.apply(this, arguments); }
            },
            "getVAlign": {
              "value": function () { return this.get_v_align.apply(this, arguments); }
            },
            "getWidth": {
              "value": function () { return this.get_width.apply(this, arguments); }
            },
            "setAlign": {
              "value": function () { return this.set_align.apply(this, arguments); }
            },
            "setCh": {
              "value": function () { return this.set_ch.apply(this, arguments); }
            },
            "setChOff": {
              "value": function () { return this.set_ch_off.apply(this, arguments); }
            },
            "setSpan": {
              "value": function () { return this.set_span.apply(this, arguments); }
            },
            "setVAlign": {
              "value": function () { return this.set_v_align.apply(this, arguments); }
            },
            "setWidth": {
              "value": function () { return this.set_width.apply(this, arguments); }
            },
            "chOff": {
              "get": function () { return this.ch_off; },
              "set": function (value) { this.ch_off = value; }
            },
            "vAlign": {
              "get": function () { return this.v_align; },
              "set": function (value) { this.v_align = value; }
            }
          },
          "static": {}
        },
        "DOMHTMLTableElement": {
          "prototype": {
            "createCaption": {
              "value": function () { return this.create_caption.apply(this, arguments); }
            },
            "createTFoot": {
              "value": function () { return this.create_t_foot.apply(this, arguments); }
            },
            "createTHead": {
              "value": function () { return this.create_t_head.apply(this, arguments); }
            },
            "deleteCaption": {
              "value": function () { return this.delete_caption.apply(this, arguments); }
            },
            "deleteRow": {
              "value": function () { return this.delete_row.apply(this, arguments); }
            },
            "deleteTFoot": {
              "value": function () { return this.delete_t_foot.apply(this, arguments); }
            },
            "deleteTHead": {
              "value": function () { return this.delete_t_head.apply(this, arguments); }
            },
            "getAlign": {
              "value": function () { return this.get_align.apply(this, arguments); }
            },
            "getBgColor": {
              "value": function () { return this.get_bg_color.apply(this, arguments); }
            },
            "getBorder": {
              "value": function () { return this.get_border.apply(this, arguments); }
            },
            "getCaption": {
              "value": function () { return this.get_caption.apply(this, arguments); }
            },
            "getCellPadding": {
              "value": function () { return this.get_cell_padding.apply(this, arguments); }
            },
            "getCellSpacing": {
              "value": function () { return this.get_cell_spacing.apply(this, arguments); }
            },
            "getRows": {
              "value": function () { return this.get_rows.apply(this, arguments); }
            },
            "getRules": {
              "value": function () { return this.get_rules.apply(this, arguments); }
            },
            "getSummary": {
              "value": function () { return this.get_summary.apply(this, arguments); }
            },
            "getTBodies": {
              "value": function () { return this.get_t_bodies.apply(this, arguments); }
            },
            "getTFoot": {
              "value": function () { return this.get_t_foot.apply(this, arguments); }
            },
            "getTHead": {
              "value": function () { return this.get_t_head.apply(this, arguments); }
            },
            "getWidth": {
              "value": function () { return this.get_width.apply(this, arguments); }
            },
            "insertRow": {
              "value": function () { return this.insert_row.apply(this, arguments); }
            },
            "setAlign": {
              "value": function () { return this.set_align.apply(this, arguments); }
            },
            "setBgColor": {
              "value": function () { return this.set_bg_color.apply(this, arguments); }
            },
            "setBorder": {
              "value": function () { return this.set_border.apply(this, arguments); }
            },
            "setCaption": {
              "value": function () { return this.set_caption.apply(this, arguments); }
            },
            "setCellPadding": {
              "value": function () { return this.set_cell_padding.apply(this, arguments); }
            },
            "setCellSpacing": {
              "value": function () { return this.set_cell_spacing.apply(this, arguments); }
            },
            "setRules": {
              "value": function () { return this.set_rules.apply(this, arguments); }
            },
            "setSummary": {
              "value": function () { return this.set_summary.apply(this, arguments); }
            },
            "setTFoot": {
              "value": function () { return this.set_t_foot.apply(this, arguments); }
            },
            "setTHead": {
              "value": function () { return this.set_t_head.apply(this, arguments); }
            },
            "setWidth": {
              "value": function () { return this.set_width.apply(this, arguments); }
            },
            "bgColor": {
              "get": function () { return this.bg_color; },
              "set": function (value) { this.bg_color = value; }
            },
            "cellPadding": {
              "get": function () { return this.cell_padding; },
              "set": function (value) { this.cell_padding = value; }
            },
            "cellSpacing": {
              "get": function () { return this.cell_spacing; },
              "set": function (value) { this.cell_spacing = value; }
            },
            "tBodies": {
              "get": function () { return this.t_bodies; },
              "set": function (value) { this.t_bodies = value; }
            },
            "tFoot": {
              "get": function () { return this.t_foot; },
              "set": function (value) { this.t_foot = value; }
            },
            "tHead": {
              "get": function () { return this.t_head; },
              "set": function (value) { this.t_head = value; }
            }
          },
          "static": {}
        },
        "DOMHTMLTableRowElement": {
          "prototype": {
            "deleteCell": {
              "value": function () { return this.delete_cell.apply(this, arguments); }
            },
            "getAlign": {
              "value": function () { return this.get_align.apply(this, arguments); }
            },
            "getBgColor": {
              "value": function () { return this.get_bg_color.apply(this, arguments); }
            },
            "getCells": {
              "value": function () { return this.get_cells.apply(this, arguments); }
            },
            "getCh": {
              "value": function () { return this.get_ch.apply(this, arguments); }
            },
            "getChOff": {
              "value": function () { return this.get_ch_off.apply(this, arguments); }
            },
            "getRowIndex": {
              "value": function () { return this.get_row_index.apply(this, arguments); }
            },
            "getSectionRowIndex": {
              "value": function () { return this.get_section_row_index.apply(this, arguments); }
            },
            "getVAlign": {
              "value": function () { return this.get_v_align.apply(this, arguments); }
            },
            "insertCell": {
              "value": function () { return this.insert_cell.apply(this, arguments); }
            },
            "setAlign": {
              "value": function () { return this.set_align.apply(this, arguments); }
            },
            "setBgColor": {
              "value": function () { return this.set_bg_color.apply(this, arguments); }
            },
            "setCh": {
              "value": function () { return this.set_ch.apply(this, arguments); }
            },
            "setChOff": {
              "value": function () { return this.set_ch_off.apply(this, arguments); }
            },
            "setVAlign": {
              "value": function () { return this.set_v_align.apply(this, arguments); }
            },
            "bgColor": {
              "get": function () { return this.bg_color; },
              "set": function (value) { this.bg_color = value; }
            },
            "chOff": {
              "get": function () { return this.ch_off; },
              "set": function (value) { this.ch_off = value; }
            },
            "rowIndex": {
              "get": function () { return this.row_index; },
              "set": function (value) { this.row_index = value; }
            },
            "sectionRowIndex": {
              "get": function () { return this.section_row_index; },
              "set": function (value) { this.section_row_index = value; }
            },
            "vAlign": {
              "get": function () { return this.v_align; },
              "set": function (value) { this.v_align = value; }
            }
          },
          "static": {}
        },
        "DOMHTMLTableSectionElement": {
          "prototype": {
            "deleteRow": {
              "value": function () { return this.delete_row.apply(this, arguments); }
            },
            "getAlign": {
              "value": function () { return this.get_align.apply(this, arguments); }
            },
            "getCh": {
              "value": function () { return this.get_ch.apply(this, arguments); }
            },
            "getChOff": {
              "value": function () { return this.get_ch_off.apply(this, arguments); }
            },
            "getRows": {
              "value": function () { return this.get_rows.apply(this, arguments); }
            },
            "getVAlign": {
              "value": function () { return this.get_v_align.apply(this, arguments); }
            },
            "insertRow": {
              "value": function () { return this.insert_row.apply(this, arguments); }
            },
            "setAlign": {
              "value": function () { return this.set_align.apply(this, arguments); }
            },
            "setCh": {
              "value": function () { return this.set_ch.apply(this, arguments); }
            },
            "setChOff": {
              "value": function () { return this.set_ch_off.apply(this, arguments); }
            },
            "setVAlign": {
              "value": function () { return this.set_v_align.apply(this, arguments); }
            },
            "chOff": {
              "get": function () { return this.ch_off; },
              "set": function (value) { this.ch_off = value; }
            },
            "vAlign": {
              "get": function () { return this.v_align; },
              "set": function (value) { this.v_align = value; }
            }
          },
          "static": {}
        },
        "DOMHTMLTextAreaElement": {
          "prototype": {
            "getAreaType": {
              "value": function () { return this.get_area_type.apply(this, arguments); }
            },
            "getAutofocus": {
              "value": function () { return this.get_autofocus.apply(this, arguments); }
            },
            "getCols": {
              "value": function () { return this.get_cols.apply(this, arguments); }
            },
            "getDefaultValue": {
              "value": function () { return this.get_default_value.apply(this, arguments); }
            },
            "getDisabled": {
              "value": function () { return this.get_disabled.apply(this, arguments); }
            },
            "getForm": {
              "value": function () { return this.get_form.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getReadOnly": {
              "value": function () { return this.get_read_only.apply(this, arguments); }
            },
            "getRows": {
              "value": function () { return this.get_rows.apply(this, arguments); }
            },
            "getSelectionEnd": {
              "value": function () { return this.get_selection_end.apply(this, arguments); }
            },
            "getSelectionStart": {
              "value": function () { return this.get_selection_start.apply(this, arguments); }
            },
            "getValue": {
              "value": function () { return this.get_value.apply(this, arguments); }
            },
            "getWillValidate": {
              "value": function () { return this.get_will_validate.apply(this, arguments); }
            },
            "isEdited": {
              "value": function () { return this.is_edited.apply(this, arguments); }
            },
            "setAutofocus": {
              "value": function () { return this.set_autofocus.apply(this, arguments); }
            },
            "setCols": {
              "value": function () { return this.set_cols.apply(this, arguments); }
            },
            "setDefaultValue": {
              "value": function () { return this.set_default_value.apply(this, arguments); }
            },
            "setDisabled": {
              "value": function () { return this.set_disabled.apply(this, arguments); }
            },
            "setName": {
              "value": function () { return this.set_name.apply(this, arguments); }
            },
            "setReadOnly": {
              "value": function () { return this.set_read_only.apply(this, arguments); }
            },
            "setRows": {
              "value": function () { return this.set_rows.apply(this, arguments); }
            },
            "setSelectionEnd": {
              "value": function () { return this.set_selection_end.apply(this, arguments); }
            },
            "setSelectionRange": {
              "value": function () { return this.set_selection_range.apply(this, arguments); }
            },
            "setSelectionStart": {
              "value": function () { return this.set_selection_start.apply(this, arguments); }
            },
            "setValue": {
              "value": function () { return this.set_value.apply(this, arguments); }
            },
            "defaultValue": {
              "get": function () { return this.default_value; },
              "set": function (value) { this.default_value = value; }
            },
            "dirName": {
              "get": function () { return this.dir_name; },
              "set": function (value) { this.dir_name = value; }
            },
            "maxLength": {
              "get": function () { return this.max_length; },
              "set": function (value) { this.max_length = value; }
            },
            "readOnly": {
              "get": function () { return this.read_only; },
              "set": function (value) { this.read_only = value; }
            },
            "selectionDirection": {
              "get": function () { return this.selection_direction; },
              "set": function (value) { this.selection_direction = value; }
            },
            "selectionEnd": {
              "get": function () { return this.selection_end; },
              "set": function (value) { this.selection_end = value; }
            },
            "selectionStart": {
              "get": function () { return this.selection_start; },
              "set": function (value) { this.selection_start = value; }
            },
            "textLength": {
              "get": function () { return this.text_length; },
              "set": function (value) { this.text_length = value; }
            },
            "validationMessage": {
              "get": function () { return this.validation_message; },
              "set": function (value) { this.validation_message = value; }
            },
            "willValidate": {
              "get": function () { return this.will_validate; },
              "set": function (value) { this.will_validate = value; }
            }
          },
          "static": {}
        },
        "DOMHTMLTitleElement": {
          "prototype": {
            "getText": {
              "value": function () { return this.get_text.apply(this, arguments); }
            },
            "setText": {
              "value": function () { return this.set_text.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DOMHTMLUListElement": {
          "prototype": {
            "getCompact": {
              "value": function () { return this.get_compact.apply(this, arguments); }
            },
            "getTypeAttr": {
              "value": function () { return this.get_type_attr.apply(this, arguments); }
            },
            "setCompact": {
              "value": function () { return this.set_compact.apply(this, arguments); }
            },
            "setTypeAttr": {
              "value": function () { return this.set_type_attr.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DOMKeyboardEvent": {
          "prototype": {
            "getAltGraphKey": {
              "value": function () { return this.get_alt_graph_key.apply(this, arguments); }
            },
            "getAltKey": {
              "value": function () { return this.get_alt_key.apply(this, arguments); }
            },
            "getCtrlKey": {
              "value": function () { return this.get_ctrl_key.apply(this, arguments); }
            },
            "getKeyIdentifier": {
              "value": function () { return this.get_key_identifier.apply(this, arguments); }
            },
            "getKeyLocation": {
              "value": function () { return this.get_key_location.apply(this, arguments); }
            },
            "getMetaKey": {
              "value": function () { return this.get_meta_key.apply(this, arguments); }
            },
            "getModifierState": {
              "value": function () { return this.get_modifier_state.apply(this, arguments); }
            },
            "getShiftKey": {
              "value": function () { return this.get_shift_key.apply(this, arguments); }
            },
            "initKeyboardEvent": {
              "value": function () { return this.init_keyboard_event.apply(this, arguments); }
            },
            "altGraphKey": {
              "get": function () { return this.alt_graph_key; },
              "set": function (value) { this.alt_graph_key = value; }
            },
            "altKey": {
              "get": function () { return this.alt_key; },
              "set": function (value) { this.alt_key = value; }
            },
            "ctrlKey": {
              "get": function () { return this.ctrl_key; },
              "set": function (value) { this.ctrl_key = value; }
            },
            "keyIdentifier": {
              "get": function () { return this.key_identifier; },
              "set": function (value) { this.key_identifier = value; }
            },
            "keyLocation": {
              "get": function () { return this.key_location; },
              "set": function (value) { this.key_location = value; }
            },
            "metaKey": {
              "get": function () { return this.meta_key; },
              "set": function (value) { this.meta_key = value; }
            },
            "shiftKey": {
              "get": function () { return this.shift_key; },
              "set": function (value) { this.shift_key = value; }
            }
          },
          "static": {}
        },
        "DOMMediaList": {
          "prototype": {
            "appendMedium": {
              "value": function () { return this.append_medium.apply(this, arguments); }
            },
            "deleteMedium": {
              "value": function () { return this.delete_medium.apply(this, arguments); }
            },
            "getLength": {
              "value": function () { return this.get_length.apply(this, arguments); }
            },
            "getMediaText": {
              "value": function () { return this.get_media_text.apply(this, arguments); }
            },
            "setMediaText": {
              "value": function () { return this.set_media_text.apply(this, arguments); }
            },
            "mediaText": {
              "get": function () { return this.media_text; },
              "set": function (value) { this.media_text = value; }
            }
          },
          "static": {}
        },
        "DOMMouseEvent": {
          "prototype": {
            "getAltKey": {
              "value": function () { return this.get_alt_key.apply(this, arguments); }
            },
            "getButton": {
              "value": function () { return this.get_button.apply(this, arguments); }
            },
            "getClientX": {
              "value": function () { return this.get_client_x.apply(this, arguments); }
            },
            "getClientY": {
              "value": function () { return this.get_client_y.apply(this, arguments); }
            },
            "getCtrlKey": {
              "value": function () { return this.get_ctrl_key.apply(this, arguments); }
            },
            "getFromElement": {
              "value": function () { return this.get_from_element.apply(this, arguments); }
            },
            "getMetaKey": {
              "value": function () { return this.get_meta_key.apply(this, arguments); }
            },
            "getOffsetX": {
              "value": function () { return this.get_offset_x.apply(this, arguments); }
            },
            "getOffsetY": {
              "value": function () { return this.get_offset_y.apply(this, arguments); }
            },
            "getRelatedTarget": {
              "value": function () { return this.get_related_target.apply(this, arguments); }
            },
            "getScreenX": {
              "value": function () { return this.get_screen_x.apply(this, arguments); }
            },
            "getScreenY": {
              "value": function () { return this.get_screen_y.apply(this, arguments); }
            },
            "getShiftKey": {
              "value": function () { return this.get_shift_key.apply(this, arguments); }
            },
            "getToElement": {
              "value": function () { return this.get_to_element.apply(this, arguments); }
            },
            "getX": {
              "value": function () { return this.get_x.apply(this, arguments); }
            },
            "getY": {
              "value": function () { return this.get_y.apply(this, arguments); }
            },
            "initMouseEvent": {
              "value": function () { return this.init_mouse_event.apply(this, arguments); }
            },
            "altKey": {
              "get": function () { return this.alt_key; },
              "set": function (value) { this.alt_key = value; }
            },
            "clientX": {
              "get": function () { return this.client_x; },
              "set": function (value) { this.client_x = value; }
            },
            "clientY": {
              "get": function () { return this.client_y; },
              "set": function (value) { this.client_y = value; }
            },
            "ctrlKey": {
              "get": function () { return this.ctrl_key; },
              "set": function (value) { this.ctrl_key = value; }
            },
            "fromElement": {
              "get": function () { return this.from_element; },
              "set": function (value) { this.from_element = value; }
            },
            "metaKey": {
              "get": function () { return this.meta_key; },
              "set": function (value) { this.meta_key = value; }
            },
            "movementX": {
              "get": function () { return this.movement_x; },
              "set": function (value) { this.movement_x = value; }
            },
            "movementY": {
              "get": function () { return this.movement_y; },
              "set": function (value) { this.movement_y = value; }
            },
            "offsetX": {
              "get": function () { return this.offset_x; },
              "set": function (value) { this.offset_x = value; }
            },
            "offsetY": {
              "get": function () { return this.offset_y; },
              "set": function (value) { this.offset_y = value; }
            },
            "relatedTarget": {
              "get": function () { return this.related_target; },
              "set": function (value) { this.related_target = value; }
            },
            "screenX": {
              "get": function () { return this.screen_x; },
              "set": function (value) { this.screen_x = value; }
            },
            "screenY": {
              "get": function () { return this.screen_y; },
              "set": function (value) { this.screen_y = value; }
            },
            "shiftKey": {
              "get": function () { return this.shift_key; },
              "set": function (value) { this.shift_key = value; }
            },
            "toElement": {
              "get": function () { return this.to_element; },
              "set": function (value) { this.to_element = value; }
            }
          },
          "static": {}
        },
        "DOMNamedNodeMap": {
          "prototype": {
            "getLength": {
              "value": function () { return this.get_length.apply(this, arguments); }
            },
            "getNamedItem": {
              "value": function () { return this.get_named_item.apply(this, arguments); }
            },
            "getNamedItemNs": {
              "value": function () { return this.get_named_item_ns.apply(this, arguments); }
            },
            "removeNamedItem": {
              "value": function () { return this.remove_named_item.apply(this, arguments); }
            },
            "removeNamedItemNs": {
              "value": function () { return this.remove_named_item_ns.apply(this, arguments); }
            },
            "setNamedItem": {
              "value": function () { return this.set_named_item.apply(this, arguments); }
            },
            "setNamedItemNs": {
              "value": function () { return this.set_named_item_ns.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DOMNode": {
          "prototype": {
            "appendChild": {
              "value": function () { return this.append_child.apply(this, arguments); }
            },
            "cloneNode": {
              "value": function () { return this.clone_node.apply(this, arguments); }
            },
            "compareDocumentPosition": {
              "value": function () { return this.compare_document_position.apply(this, arguments); }
            },
            "getBaseUri": {
              "value": function () { return this.get_base_uri.apply(this, arguments); }
            },
            "getChildNodes": {
              "value": function () { return this.get_child_nodes.apply(this, arguments); }
            },
            "getFirstChild": {
              "value": function () { return this.get_first_child.apply(this, arguments); }
            },
            "getLastChild": {
              "value": function () { return this.get_last_child.apply(this, arguments); }
            },
            "getLocalName": {
              "value": function () { return this.get_local_name.apply(this, arguments); }
            },
            "getNamespaceUri": {
              "value": function () { return this.get_namespace_uri.apply(this, arguments); }
            },
            "getNextSibling": {
              "value": function () { return this.get_next_sibling.apply(this, arguments); }
            },
            "getNodeName": {
              "value": function () { return this.get_node_name.apply(this, arguments); }
            },
            "getNodeType": {
              "value": function () { return this.get_node_type.apply(this, arguments); }
            },
            "getNodeValue": {
              "value": function () { return this.get_node_value.apply(this, arguments); }
            },
            "getOwnerDocument": {
              "value": function () { return this.get_owner_document.apply(this, arguments); }
            },
            "getParentElement": {
              "value": function () { return this.get_parent_element.apply(this, arguments); }
            },
            "getParentNode": {
              "value": function () { return this.get_parent_node.apply(this, arguments); }
            },
            "getPrefix": {
              "value": function () { return this.get_prefix.apply(this, arguments); }
            },
            "getPreviousSibling": {
              "value": function () { return this.get_previous_sibling.apply(this, arguments); }
            },
            "getTextContent": {
              "value": function () { return this.get_text_content.apply(this, arguments); }
            },
            "hasChildNodes": {
              "value": function () { return this.has_child_nodes.apply(this, arguments); }
            },
            "insertBefore": {
              "value": function () { return this.insert_before.apply(this, arguments); }
            },
            "isDefaultNamespace": {
              "value": function () { return this.is_default_namespace.apply(this, arguments); }
            },
            "isEqualNode": {
              "value": function () { return this.is_equal_node.apply(this, arguments); }
            },
            "isSameNode": {
              "value": function () { return this.is_same_node.apply(this, arguments); }
            },
            "isSupported": {
              "value": function () { return this.is_supported.apply(this, arguments); }
            },
            "lookupNamespaceUri": {
              "value": function () { return this.lookup_namespace_uri.apply(this, arguments); }
            },
            "lookupPrefix": {
              "value": function () { return this.lookup_prefix.apply(this, arguments); }
            },
            "removeChild": {
              "value": function () { return this.remove_child.apply(this, arguments); }
            },
            "replaceChild": {
              "value": function () { return this.replace_child.apply(this, arguments); }
            },
            "setNodeValue": {
              "value": function () { return this.set_node_value.apply(this, arguments); }
            },
            "setPrefix": {
              "value": function () { return this.set_prefix.apply(this, arguments); }
            },
            "setTextContent": {
              "value": function () { return this.set_text_content.apply(this, arguments); }
            },
            "baseUri": {
              "get": function () { return this.base_uri; },
              "set": function (value) { this.base_uri = value; }
            },
            "childNodes": {
              "get": function () { return this.child_nodes; },
              "set": function (value) { this.child_nodes = value; }
            },
            "firstChild": {
              "get": function () { return this.first_child; },
              "set": function (value) { this.first_child = value; }
            },
            "lastChild": {
              "get": function () { return this.last_child; },
              "set": function (value) { this.last_child = value; }
            },
            "localName": {
              "get": function () { return this.local_name; },
              "set": function (value) { this.local_name = value; }
            },
            "namespaceUri": {
              "get": function () { return this.namespace_uri; },
              "set": function (value) { this.namespace_uri = value; }
            },
            "nextSibling": {
              "get": function () { return this.next_sibling; },
              "set": function (value) { this.next_sibling = value; }
            },
            "nodeName": {
              "get": function () { return this.node_name; },
              "set": function (value) { this.node_name = value; }
            },
            "nodeType": {
              "get": function () { return this.node_type; },
              "set": function (value) { this.node_type = value; }
            },
            "nodeValue": {
              "get": function () { return this.node_value; },
              "set": function (value) { this.node_value = value; }
            },
            "ownerDocument": {
              "get": function () { return this.owner_document; },
              "set": function (value) { this.owner_document = value; }
            },
            "parentElement": {
              "get": function () { return this.parent_element; },
              "set": function (value) { this.parent_element = value; }
            },
            "parentNode": {
              "get": function () { return this.parent_node; },
              "set": function (value) { this.parent_node = value; }
            },
            "previousSibling": {
              "get": function () { return this.previous_sibling; },
              "set": function (value) { this.previous_sibling = value; }
            },
            "textContent": {
              "get": function () { return this.text_content; },
              "set": function (value) { this.text_content = value; }
            }
          },
          "static": {}
        },
        "DOMNodeIterator": {
          "prototype": {
            "getExpandEntityReferences": {
              "value": function () { return this.get_expand_entity_references.apply(this, arguments); }
            },
            "getFilter": {
              "value": function () { return this.get_filter.apply(this, arguments); }
            },
            "getPointerBeforeReferenceNode": {
              "value": function () { return this.get_pointer_before_reference_node.apply(this, arguments); }
            },
            "getReferenceNode": {
              "value": function () { return this.get_reference_node.apply(this, arguments); }
            },
            "getRoot": {
              "value": function () { return this.get_root.apply(this, arguments); }
            },
            "getWhatToShow": {
              "value": function () { return this.get_what_to_show.apply(this, arguments); }
            },
            "nextNode": {
              "value": function () { return this.next_node.apply(this, arguments); }
            },
            "previousNode": {
              "value": function () { return this.previous_node.apply(this, arguments); }
            },
            "expandEntityReferences": {
              "get": function () { return this.expand_entity_references; },
              "set": function (value) { this.expand_entity_references = value; }
            },
            "pointerBeforeReferenceNode": {
              "get": function () { return this.pointer_before_reference_node; },
              "set": function (value) { this.pointer_before_reference_node = value; }
            },
            "referenceNode": {
              "get": function () { return this.reference_node; },
              "set": function (value) { this.reference_node = value; }
            },
            "whatToShow": {
              "get": function () { return this.what_to_show; },
              "set": function (value) { this.what_to_show = value; }
            }
          },
          "static": {}
        },
        "DOMNodeList": {
          "prototype": {
            "getLength": {
              "value": function () { return this.get_length.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DOMObject": {
          "prototype": {
            "coreObject": {
              "get": function () { return this.core_object; },
              "set": function (value) { this.core_object = value; }
            }
          },
          "static": {}
        },
        "DOMProcessingInstruction": {
          "prototype": {
            "getSheet": {
              "value": function () { return this.get_sheet.apply(this, arguments); }
            },
            "getTarget": {
              "value": function () { return this.get_target.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DOMRange": {
          "prototype": {
            "cloneContents": {
              "value": function () { return this.clone_contents.apply(this, arguments); }
            },
            "cloneRange": {
              "value": function () { return this.clone_range.apply(this, arguments); }
            },
            "compareBoundaryPoints": {
              "value": function () { return this.compare_boundary_points.apply(this, arguments); }
            },
            "compareNode": {
              "value": function () { return this.compare_node.apply(this, arguments); }
            },
            "comparePoint": {
              "value": function () { return this.compare_point.apply(this, arguments); }
            },
            "createContextualFragment": {
              "value": function () { return this.create_contextual_fragment.apply(this, arguments); }
            },
            "deleteContents": {
              "value": function () { return this.delete_contents.apply(this, arguments); }
            },
            "extractContents": {
              "value": function () { return this.extract_contents.apply(this, arguments); }
            },
            "getCollapsed": {
              "value": function () { return this.get_collapsed.apply(this, arguments); }
            },
            "getCommonAncestorContainer": {
              "value": function () { return this.get_common_ancestor_container.apply(this, arguments); }
            },
            "getEndContainer": {
              "value": function () { return this.get_end_container.apply(this, arguments); }
            },
            "getEndOffset": {
              "value": function () { return this.get_end_offset.apply(this, arguments); }
            },
            "getStartContainer": {
              "value": function () { return this.get_start_container.apply(this, arguments); }
            },
            "getStartOffset": {
              "value": function () { return this.get_start_offset.apply(this, arguments); }
            },
            "getText": {
              "value": function () { return this.get_text.apply(this, arguments); }
            },
            "insertNode": {
              "value": function () { return this.insert_node.apply(this, arguments); }
            },
            "intersectsNode": {
              "value": function () { return this.intersects_node.apply(this, arguments); }
            },
            "isPointInRange": {
              "value": function () { return this.is_point_in_range.apply(this, arguments); }
            },
            "selectNode": {
              "value": function () { return this.select_node.apply(this, arguments); }
            },
            "selectNodeContents": {
              "value": function () { return this.select_node_contents.apply(this, arguments); }
            },
            "setEnd": {
              "value": function () { return this.set_end.apply(this, arguments); }
            },
            "setEndAfter": {
              "value": function () { return this.set_end_after.apply(this, arguments); }
            },
            "setEndBefore": {
              "value": function () { return this.set_end_before.apply(this, arguments); }
            },
            "setStart": {
              "value": function () { return this.set_start.apply(this, arguments); }
            },
            "setStartAfter": {
              "value": function () { return this.set_start_after.apply(this, arguments); }
            },
            "setStartBefore": {
              "value": function () { return this.set_start_before.apply(this, arguments); }
            },
            "surroundContents": {
              "value": function () { return this.surround_contents.apply(this, arguments); }
            },
            "toString": {
              "value": function () { return this.to_string.apply(this, arguments); }
            },
            "commonAncestorContainer": {
              "get": function () { return this.common_ancestor_container; },
              "set": function (value) { this.common_ancestor_container = value; }
            },
            "endContainer": {
              "get": function () { return this.end_container; },
              "set": function (value) { this.end_container = value; }
            },
            "endOffset": {
              "get": function () { return this.end_offset; },
              "set": function (value) { this.end_offset = value; }
            },
            "startContainer": {
              "get": function () { return this.start_container; },
              "set": function (value) { this.start_container = value; }
            },
            "startOffset": {
              "get": function () { return this.start_offset; },
              "set": function (value) { this.start_offset = value; }
            }
          },
          "static": {}
        },
        "DOMStyleSheet": {
          "prototype": {
            "getContentType": {
              "value": function () { return this.get_content_type.apply(this, arguments); }
            },
            "getDisabled": {
              "value": function () { return this.get_disabled.apply(this, arguments); }
            },
            "getHref": {
              "value": function () { return this.get_href.apply(this, arguments); }
            },
            "getMedia": {
              "value": function () { return this.get_media.apply(this, arguments); }
            },
            "getOwnerNode": {
              "value": function () { return this.get_owner_node.apply(this, arguments); }
            },
            "getParentStyleSheet": {
              "value": function () { return this.get_parent_style_sheet.apply(this, arguments); }
            },
            "getTitle": {
              "value": function () { return this.get_title.apply(this, arguments); }
            },
            "setDisabled": {
              "value": function () { return this.set_disabled.apply(this, arguments); }
            },
            "ownerNode": {
              "get": function () { return this.owner_node; },
              "set": function (value) { this.owner_node = value; }
            },
            "parentStyleSheet": {
              "get": function () { return this.parent_style_sheet; },
              "set": function (value) { this.parent_style_sheet = value; }
            }
          },
          "static": {}
        },
        "DOMStyleSheetList": {
          "prototype": {
            "getLength": {
              "value": function () { return this.get_length.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "DOMText": {
          "prototype": {
            "getWholeText": {
              "value": function () { return this.get_whole_text.apply(this, arguments); }
            },
            "replaceWholeText": {
              "value": function () { return this.replace_whole_text.apply(this, arguments); }
            },
            "splitText": {
              "value": function () { return this.split_text.apply(this, arguments); }
            },
            "wholeText": {
              "get": function () { return this.whole_text; },
              "set": function (value) { this.whole_text = value; }
            }
          },
          "static": {}
        },
        "DOMTreeWalker": {
          "prototype": {
            "firstChild": {
              "value": function () { return this.first_child.apply(this, arguments); }
            },
            "getCurrentNode": {
              "value": function () { return this.get_current_node.apply(this, arguments); }
            },
            "getExpandEntityReferences": {
              "value": function () { return this.get_expand_entity_references.apply(this, arguments); }
            },
            "getFilter": {
              "value": function () { return this.get_filter.apply(this, arguments); }
            },
            "getRoot": {
              "value": function () { return this.get_root.apply(this, arguments); }
            },
            "getWhatToShow": {
              "value": function () { return this.get_what_to_show.apply(this, arguments); }
            },
            "lastChild": {
              "value": function () { return this.last_child.apply(this, arguments); }
            },
            "nextNode": {
              "value": function () { return this.next_node.apply(this, arguments); }
            },
            "nextSibling": {
              "value": function () { return this.next_sibling.apply(this, arguments); }
            },
            "parentNode": {
              "value": function () { return this.parent_node.apply(this, arguments); }
            },
            "previousNode": {
              "value": function () { return this.previous_node.apply(this, arguments); }
            },
            "previousSibling": {
              "value": function () { return this.previous_sibling.apply(this, arguments); }
            },
            "setCurrentNode": {
              "value": function () { return this.set_current_node.apply(this, arguments); }
            },
            "currentNode": {
              "get": function () { return this.current_node; },
              "set": function (value) { this.current_node = value; }
            },
            "expandEntityReferences": {
              "get": function () { return this.expand_entity_references; },
              "set": function (value) { this.expand_entity_references = value; }
            },
            "whatToShow": {
              "get": function () { return this.what_to_show; },
              "set": function (value) { this.what_to_show = value; }
            }
          },
          "static": {}
        },
        "DOMUIEvent": {
          "prototype": {
            "getCharCode": {
              "value": function () { return this.get_char_code.apply(this, arguments); }
            },
            "getDetail": {
              "value": function () { return this.get_detail.apply(this, arguments); }
            },
            "getKeyCode": {
              "value": function () { return this.get_key_code.apply(this, arguments); }
            },
            "getLayerX": {
              "value": function () { return this.get_layer_x.apply(this, arguments); }
            },
            "getLayerY": {
              "value": function () { return this.get_layer_y.apply(this, arguments); }
            },
            "getPageX": {
              "value": function () { return this.get_page_x.apply(this, arguments); }
            },
            "getPageY": {
              "value": function () { return this.get_page_y.apply(this, arguments); }
            },
            "getView": {
              "value": function () { return this.get_view.apply(this, arguments); }
            },
            "initUiEvent": {
              "value": function () { return this.init_ui_event.apply(this, arguments); }
            },
            "charCode": {
              "get": function () { return this.char_code; },
              "set": function (value) { this.char_code = value; }
            },
            "keyCode": {
              "get": function () { return this.key_code; },
              "set": function (value) { this.key_code = value; }
            },
            "layerX": {
              "get": function () { return this.layer_x; },
              "set": function (value) { this.layer_x = value; }
            },
            "layerY": {
              "get": function () { return this.layer_y; },
              "set": function (value) { this.layer_y = value; }
            },
            "pageX": {
              "get": function () { return this.page_x; },
              "set": function (value) { this.page_x = value; }
            },
            "pageY": {
              "get": function () { return this.page_y; },
              "set": function (value) { this.page_y = value; }
            }
          },
          "static": {}
        },
        "DOMWheelEvent": {
          "prototype": {
            "getWheelDelta": {
              "value": function () { return this.get_wheel_delta.apply(this, arguments); }
            },
            "getWheelDeltaX": {
              "value": function () { return this.get_wheel_delta_x.apply(this, arguments); }
            },
            "getWheelDeltaY": {
              "value": function () { return this.get_wheel_delta_y.apply(this, arguments); }
            },
            "initWheelEvent": {
              "value": function () { return this.init_wheel_event.apply(this, arguments); }
            },
            "deltaMode": {
              "get": function () { return this.delta_mode; },
              "set": function (value) { this.delta_mode = value; }
            },
            "deltaX": {
              "get": function () { return this.delta_x; },
              "set": function (value) { this.delta_x = value; }
            },
            "deltaY": {
              "get": function () { return this.delta_y; },
              "set": function (value) { this.delta_y = value; }
            },
            "deltaZ": {
              "get": function () { return this.delta_z; },
              "set": function (value) { this.delta_z = value; }
            },
            "webkitDirectionInvertedFromDevice": {
              "get": function () { return this.webkit_direction_inverted_from_device; },
              "set": function (value) { this.webkit_direction_inverted_from_device = value; }
            },
            "wheelDelta": {
              "get": function () { return this.wheel_delta; },
              "set": function (value) { this.wheel_delta = value; }
            },
            "wheelDeltaX": {
              "get": function () { return this.wheel_delta_x; },
              "set": function (value) { this.wheel_delta_x = value; }
            },
            "wheelDeltaY": {
              "get": function () { return this.wheel_delta_y; },
              "set": function (value) { this.wheel_delta_y = value; }
            }
          },
          "static": {}
        },
        "DOMXPathExpression": {
          "prototype": {},
          "static": {}
        },
        "DOMXPathResult": {
          "prototype": {
            "getBooleanValue": {
              "value": function () { return this.get_boolean_value.apply(this, arguments); }
            },
            "getInvalidIteratorState": {
              "value": function () { return this.get_invalid_iterator_state.apply(this, arguments); }
            },
            "getNumberValue": {
              "value": function () { return this.get_number_value.apply(this, arguments); }
            },
            "getResultType": {
              "value": function () { return this.get_result_type.apply(this, arguments); }
            },
            "getSingleNodeValue": {
              "value": function () { return this.get_single_node_value.apply(this, arguments); }
            },
            "getSnapshotLength": {
              "value": function () { return this.get_snapshot_length.apply(this, arguments); }
            },
            "getStringValue": {
              "value": function () { return this.get_string_value.apply(this, arguments); }
            },
            "iterateNext": {
              "value": function () { return this.iterate_next.apply(this, arguments); }
            },
            "snapshotItem": {
              "value": function () { return this.snapshot_item.apply(this, arguments); }
            },
            "booleanValue": {
              "get": function () { return this.boolean_value; },
              "set": function (value) { this.boolean_value = value; }
            },
            "invalidIteratorState": {
              "get": function () { return this.invalid_iterator_state; },
              "set": function (value) { this.invalid_iterator_state = value; }
            },
            "numberValue": {
              "get": function () { return this.number_value; },
              "set": function (value) { this.number_value = value; }
            },
            "resultType": {
              "get": function () { return this.result_type; },
              "set": function (value) { this.result_type = value; }
            },
            "singleNodeValue": {
              "get": function () { return this.single_node_value; },
              "set": function (value) { this.single_node_value = value; }
            },
            "snapshotLength": {
              "get": function () { return this.snapshot_length; },
              "set": function (value) { this.snapshot_length = value; }
            },
            "stringValue": {
              "get": function () { return this.string_value; },
              "set": function (value) { this.string_value = value; }
            }
          },
          "static": {}
        },
        "Frame": {
          "prototype": {
            "getJavascriptContextForScriptWorld": {
              "value": function () { return this.get_javascript_context_for_script_world.apply(this, arguments); }
            },
            "getJavascriptGlobalContext": {
              "value": function () { return this.get_javascript_global_context.apply(this, arguments); }
            },
            "getUri": {
              "value": function () { return this.get_uri.apply(this, arguments); }
            },
            "isMainFrame": {
              "value": function () { return this.is_main_frame.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "HitTestResult": {
          "prototype": {
            "contextIsEditable": {
              "value": function () { return this.context_is_editable.apply(this, arguments); }
            },
            "contextIsImage": {
              "value": function () { return this.context_is_image.apply(this, arguments); }
            },
            "contextIsLink": {
              "value": function () { return this.context_is_link.apply(this, arguments); }
            },
            "contextIsMedia": {
              "value": function () { return this.context_is_media.apply(this, arguments); }
            },
            "contextIsScrollbar": {
              "value": function () { return this.context_is_scrollbar.apply(this, arguments); }
            },
            "contextIsSelection": {
              "value": function () { return this.context_is_selection.apply(this, arguments); }
            },
            "getContext": {
              "value": function () { return this.get_context.apply(this, arguments); }
            },
            "getImageUri": {
              "value": function () { return this.get_image_uri.apply(this, arguments); }
            },
            "getLinkLabel": {
              "value": function () { return this.get_link_label.apply(this, arguments); }
            },
            "getLinkTitle": {
              "value": function () { return this.get_link_title.apply(this, arguments); }
            },
            "getLinkUri": {
              "value": function () { return this.get_link_uri.apply(this, arguments); }
            },
            "getMediaUri": {
              "value": function () { return this.get_media_uri.apply(this, arguments); }
            },
            "imageUri": {
              "get": function () { return this.image_uri; },
              "set": function (value) { this.image_uri = value; }
            },
            "linkLabel": {
              "get": function () { return this.link_label; },
              "set": function (value) { this.link_label = value; }
            },
            "linkTitle": {
              "get": function () { return this.link_title; },
              "set": function (value) { this.link_title = value; }
            },
            "linkUri": {
              "get": function () { return this.link_uri; },
              "set": function (value) { this.link_uri = value; }
            },
            "mediaUri": {
              "get": function () { return this.media_uri; },
              "set": function (value) { this.media_uri = value; }
            }
          },
          "static": {}
        },
        "ScriptWorld": {
          "prototype": {},
          "static": {
            "getDefault": {
              "value": function () { return this.get_default.apply(this, arguments); }
            }
          }
        },
        "URIRequest": {
          "prototype": {
            "getHttpHeaders": {
              "value": function () { return this.get_http_headers.apply(this, arguments); }
            },
            "getUri": {
              "value": function () { return this.get_uri.apply(this, arguments); }
            },
            "setUri": {
              "value": function () { return this.set_uri.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "URIResponse": {
          "prototype": {
            "getContentLength": {
              "value": function () { return this.get_content_length.apply(this, arguments); }
            },
            "getHttpHeaders": {
              "value": function () { return this.get_http_headers.apply(this, arguments); }
            },
            "getMimeType": {
              "value": function () { return this.get_mime_type.apply(this, arguments); }
            },
            "getStatusCode": {
              "value": function () { return this.get_status_code.apply(this, arguments); }
            },
            "getSuggestedFilename": {
              "value": function () { return this.get_suggested_filename.apply(this, arguments); }
            },
            "getUri": {
              "value": function () { return this.get_uri.apply(this, arguments); }
            },
            "contentLength": {
              "get": function () { return this.content_length; },
              "set": function (value) { this.content_length = value; }
            },
            "httpHeaders": {
              "get": function () { return this.http_headers; },
              "set": function (value) { this.http_headers = value; }
            },
            "mimeType": {
              "get": function () { return this.mime_type; },
              "set": function (value) { this.mime_type = value; }
            },
            "statusCode": {
              "get": function () { return this.status_code; },
              "set": function (value) { this.status_code = value; }
            },
            "suggestedFilename": {
              "get": function () { return this.suggested_filename; },
              "set": function (value) { this.suggested_filename = value; }
            }
          },
          "static": {}
        },
        "WebEditor": {
          "prototype": {
            "getPage": {
              "value": function () { return this.get_page.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "WebExtension": {
          "prototype": {
            "getPage": {
              "value": function () { return this.get_page.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "WebHitTestResult": {
          "prototype": {
            "getNode": {
              "value": function () { return this.get_node.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "WebPage": {
          "prototype": {
            "getDomDocument": {
              "value": function () { return this.get_dom_document.apply(this, arguments); }
            },
            "getEditor": {
              "value": function () { return this.get_editor.apply(this, arguments); }
            },
            "getId": {
              "value": function () { return this.get_id.apply(this, arguments); }
            },
            "getMainFrame": {
              "value": function () { return this.get_main_frame.apply(this, arguments); }
            },
            "getUri": {
              "value": function () { return this.get_uri.apply(this, arguments); }
            }
          },
          "static": {}
        }
      },
      "static": {}
    },
    "Wnck": {
      "class": {
        "ActionMenu": {
          "prototype": {},
          "static": {}
        },
        "Application": {
          "prototype": {
            "getIcon": {
              "value": function () { return this.get_icon.apply(this, arguments); }
            },
            "getIconIsFallback": {
              "value": function () { return this.get_icon_is_fallback.apply(this, arguments); }
            },
            "getIconName": {
              "value": function () { return this.get_icon_name.apply(this, arguments); }
            },
            "getMiniIcon": {
              "value": function () { return this.get_mini_icon.apply(this, arguments); }
            },
            "getNWindows": {
              "value": function () { return this.get_n_windows.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getPid": {
              "value": function () { return this.get_pid.apply(this, arguments); }
            },
            "getStartupId": {
              "value": function () { return this.get_startup_id.apply(this, arguments); }
            },
            "getWindows": {
              "value": function () { return this.get_windows.apply(this, arguments); }
            },
            "getXid": {
              "value": function () { return this.get_xid.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "ClassGroup": {
          "prototype": {
            "getIcon": {
              "value": function () { return this.get_icon.apply(this, arguments); }
            },
            "getId": {
              "value": function () { return this.get_id.apply(this, arguments); }
            },
            "getMiniIcon": {
              "value": function () { return this.get_mini_icon.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getResClass": {
              "value": function () { return this.get_res_class.apply(this, arguments); }
            },
            "getWindows": {
              "value": function () { return this.get_windows.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Pager": {
          "prototype": {
            "setDisplayMode": {
              "value": function () { return this.set_display_mode.apply(this, arguments); }
            },
            "setNRows": {
              "value": function () { return this.set_n_rows.apply(this, arguments); }
            },
            "setOrientation": {
              "value": function () { return this.set_orientation.apply(this, arguments); }
            },
            "setShadowType": {
              "value": function () { return this.set_shadow_type.apply(this, arguments); }
            },
            "setShowAll": {
              "value": function () { return this.set_show_all.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Screen": {
          "prototype": {
            "calcWorkspaceLayout": {
              "value": function () { return this.calc_workspace_layout.apply(this, arguments); }
            },
            "changeWorkspaceCount": {
              "value": function () { return this.change_workspace_count.apply(this, arguments); }
            },
            "forceUpdate": {
              "value": function () { return this.force_update.apply(this, arguments); }
            },
            "getActiveWindow": {
              "value": function () { return this.get_active_window.apply(this, arguments); }
            },
            "getActiveWorkspace": {
              "value": function () { return this.get_active_workspace.apply(this, arguments); }
            },
            "getBackgroundPixmap": {
              "value": function () { return this.get_background_pixmap.apply(this, arguments); }
            },
            "getHeight": {
              "value": function () { return this.get_height.apply(this, arguments); }
            },
            "getNumber": {
              "value": function () { return this.get_number.apply(this, arguments); }
            },
            "getPreviouslyActiveWindow": {
              "value": function () { return this.get_previously_active_window.apply(this, arguments); }
            },
            "getShowingDesktop": {
              "value": function () { return this.get_showing_desktop.apply(this, arguments); }
            },
            "getWidth": {
              "value": function () { return this.get_width.apply(this, arguments); }
            },
            "getWindowManagerName": {
              "value": function () { return this.get_window_manager_name.apply(this, arguments); }
            },
            "getWindows": {
              "value": function () { return this.get_windows.apply(this, arguments); }
            },
            "getWindowsStacked": {
              "value": function () { return this.get_windows_stacked.apply(this, arguments); }
            },
            "getWorkspace": {
              "value": function () { return this.get_workspace.apply(this, arguments); }
            },
            "getWorkspaceCount": {
              "value": function () { return this.get_workspace_count.apply(this, arguments); }
            },
            "getWorkspaces": {
              "value": function () { return this.get_workspaces.apply(this, arguments); }
            },
            "moveViewport": {
              "value": function () { return this.move_viewport.apply(this, arguments); }
            },
            "netWmSupports": {
              "value": function () { return this.net_wm_supports.apply(this, arguments); }
            },
            "releaseWorkspaceLayout": {
              "value": function () { return this.release_workspace_layout.apply(this, arguments); }
            },
            "toggleShowingDesktop": {
              "value": function () { return this.toggle_showing_desktop.apply(this, arguments); }
            },
            "trySetWorkspaceLayout": {
              "value": function () { return this.try_set_workspace_layout.apply(this, arguments); }
            }
          },
          "static": {
            "freeWorkspaceLayout": {
              "value": function () { return this.free_workspace_layout.apply(this, arguments); }
            },
            "getDefault": {
              "value": function () { return this.get_default.apply(this, arguments); }
            },
            "getForRoot": {
              "value": function () { return this.get_for_root.apply(this, arguments); }
            }
          }
        },
        "Selector": {
          "prototype": {},
          "static": {}
        },
        "Tasklist": {
          "prototype": {
            "getSizeHintList": {
              "value": function () { return this.get_size_hint_list.apply(this, arguments); }
            },
            "setButtonRelief": {
              "value": function () { return this.set_button_relief.apply(this, arguments); }
            },
            "setGrouping": {
              "value": function () { return this.set_grouping.apply(this, arguments); }
            },
            "setGroupingLimit": {
              "value": function () { return this.set_grouping_limit.apply(this, arguments); }
            },
            "setIconLoader": {
              "value": function () { return this.set_icon_loader.apply(this, arguments); }
            },
            "setIncludeAllWorkspaces": {
              "value": function () { return this.set_include_all_workspaces.apply(this, arguments); }
            },
            "setMiddleClickClose": {
              "value": function () { return this.set_middle_click_close.apply(this, arguments); }
            },
            "setOrientation": {
              "value": function () { return this.set_orientation.apply(this, arguments); }
            },
            "setSwitchWorkspaceOnUnminimize": {
              "value": function () { return this.set_switch_workspace_on_unminimize.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Window": {
          "prototype": {
            "activateTransient": {
              "value": function () { return this.activate_transient.apply(this, arguments); }
            },
            "getActions": {
              "value": function () { return this.get_actions.apply(this, arguments); }
            },
            "getApplication": {
              "value": function () { return this.get_application.apply(this, arguments); }
            },
            "getClassGroup": {
              "value": function () { return this.get_class_group.apply(this, arguments); }
            },
            "getClassGroupName": {
              "value": function () { return this.get_class_group_name.apply(this, arguments); }
            },
            "getClassInstanceName": {
              "value": function () { return this.get_class_instance_name.apply(this, arguments); }
            },
            "getClientWindowGeometry": {
              "value": function () { return this.get_client_window_geometry.apply(this, arguments); }
            },
            "getGeometry": {
              "value": function () { return this.get_geometry.apply(this, arguments); }
            },
            "getGroupLeader": {
              "value": function () { return this.get_group_leader.apply(this, arguments); }
            },
            "getIcon": {
              "value": function () { return this.get_icon.apply(this, arguments); }
            },
            "getIconIsFallback": {
              "value": function () { return this.get_icon_is_fallback.apply(this, arguments); }
            },
            "getIconName": {
              "value": function () { return this.get_icon_name.apply(this, arguments); }
            },
            "getMiniIcon": {
              "value": function () { return this.get_mini_icon.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getPid": {
              "value": function () { return this.get_pid.apply(this, arguments); }
            },
            "getRole": {
              "value": function () { return this.get_role.apply(this, arguments); }
            },
            "getScreen": {
              "value": function () { return this.get_screen.apply(this, arguments); }
            },
            "getSessionId": {
              "value": function () { return this.get_session_id.apply(this, arguments); }
            },
            "getSessionIdUtf8": {
              "value": function () { return this.get_session_id_utf8.apply(this, arguments); }
            },
            "getSortOrder": {
              "value": function () { return this.get_sort_order.apply(this, arguments); }
            },
            "getState": {
              "value": function () { return this.get_state.apply(this, arguments); }
            },
            "getTransient": {
              "value": function () { return this.get_transient.apply(this, arguments); }
            },
            "getWindowType": {
              "value": function () { return this.get_window_type.apply(this, arguments); }
            },
            "getWorkspace": {
              "value": function () { return this.get_workspace.apply(this, arguments); }
            },
            "getXid": {
              "value": function () { return this.get_xid.apply(this, arguments); }
            },
            "hasIconName": {
              "value": function () { return this.has_icon_name.apply(this, arguments); }
            },
            "hasName": {
              "value": function () { return this.has_name.apply(this, arguments); }
            },
            "isAbove": {
              "value": function () { return this.is_above.apply(this, arguments); }
            },
            "isActive": {
              "value": function () { return this.is_active.apply(this, arguments); }
            },
            "isBelow": {
              "value": function () { return this.is_below.apply(this, arguments); }
            },
            "isFullscreen": {
              "value": function () { return this.is_fullscreen.apply(this, arguments); }
            },
            "isInViewport": {
              "value": function () { return this.is_in_viewport.apply(this, arguments); }
            },
            "isMaximized": {
              "value": function () { return this.is_maximized.apply(this, arguments); }
            },
            "isMaximizedHorizontally": {
              "value": function () { return this.is_maximized_horizontally.apply(this, arguments); }
            },
            "isMaximizedVertically": {
              "value": function () { return this.is_maximized_vertically.apply(this, arguments); }
            },
            "isMinimized": {
              "value": function () { return this.is_minimized.apply(this, arguments); }
            },
            "isMostRecentlyActivated": {
              "value": function () { return this.is_most_recently_activated.apply(this, arguments); }
            },
            "isOnWorkspace": {
              "value": function () { return this.is_on_workspace.apply(this, arguments); }
            },
            "isPinned": {
              "value": function () { return this.is_pinned.apply(this, arguments); }
            },
            "isShaded": {
              "value": function () { return this.is_shaded.apply(this, arguments); }
            },
            "isSkipPager": {
              "value": function () { return this.is_skip_pager.apply(this, arguments); }
            },
            "isSkipTasklist": {
              "value": function () { return this.is_skip_tasklist.apply(this, arguments); }
            },
            "isSticky": {
              "value": function () { return this.is_sticky.apply(this, arguments); }
            },
            "isVisibleOnWorkspace": {
              "value": function () { return this.is_visible_on_workspace.apply(this, arguments); }
            },
            "keyboardMove": {
              "value": function () { return this.keyboard_move.apply(this, arguments); }
            },
            "keyboardSize": {
              "value": function () { return this.keyboard_size.apply(this, arguments); }
            },
            "makeAbove": {
              "value": function () { return this.make_above.apply(this, arguments); }
            },
            "makeBelow": {
              "value": function () { return this.make_below.apply(this, arguments); }
            },
            "maximizeHorizontally": {
              "value": function () { return this.maximize_horizontally.apply(this, arguments); }
            },
            "maximizeVertically": {
              "value": function () { return this.maximize_vertically.apply(this, arguments); }
            },
            "moveToWorkspace": {
              "value": function () { return this.move_to_workspace.apply(this, arguments); }
            },
            "needsAttention": {
              "value": function () { return this.needs_attention.apply(this, arguments); }
            },
            "orTransientNeedsAttention": {
              "value": function () { return this.or_transient_needs_attention.apply(this, arguments); }
            },
            "setFullscreen": {
              "value": function () { return this.set_fullscreen.apply(this, arguments); }
            },
            "setGeometry": {
              "value": function () { return this.set_geometry.apply(this, arguments); }
            },
            "setIconGeometry": {
              "value": function () { return this.set_icon_geometry.apply(this, arguments); }
            },
            "setSkipPager": {
              "value": function () { return this.set_skip_pager.apply(this, arguments); }
            },
            "setSkipTasklist": {
              "value": function () { return this.set_skip_tasklist.apply(this, arguments); }
            },
            "setSortOrder": {
              "value": function () { return this.set_sort_order.apply(this, arguments); }
            },
            "setWindowType": {
              "value": function () { return this.set_window_type.apply(this, arguments); }
            },
            "transientIsMostRecentlyActivated": {
              "value": function () { return this.transient_is_most_recently_activated.apply(this, arguments); }
            },
            "unmakeAbove": {
              "value": function () { return this.unmake_above.apply(this, arguments); }
            },
            "unmakeBelow": {
              "value": function () { return this.unmake_below.apply(this, arguments); }
            },
            "unmaximizeHorizontally": {
              "value": function () { return this.unmaximize_horizontally.apply(this, arguments); }
            },
            "unmaximizeVertically": {
              "value": function () { return this.unmaximize_vertically.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Workspace": {
          "prototype": {
            "changeName": {
              "value": function () { return this.change_name.apply(this, arguments); }
            },
            "getHeight": {
              "value": function () { return this.get_height.apply(this, arguments); }
            },
            "getLayoutColumn": {
              "value": function () { return this.get_layout_column.apply(this, arguments); }
            },
            "getLayoutRow": {
              "value": function () { return this.get_layout_row.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getNeighbor": {
              "value": function () { return this.get_neighbor.apply(this, arguments); }
            },
            "getNumber": {
              "value": function () { return this.get_number.apply(this, arguments); }
            },
            "getScreen": {
              "value": function () { return this.get_screen.apply(this, arguments); }
            },
            "getViewportX": {
              "value": function () { return this.get_viewport_x.apply(this, arguments); }
            },
            "getViewportY": {
              "value": function () { return this.get_viewport_y.apply(this, arguments); }
            },
            "getWidth": {
              "value": function () { return this.get_width.apply(this, arguments); }
            },
            "isVirtual": {
              "value": function () { return this.is_virtual.apply(this, arguments); }
            }
          },
          "static": {}
        }
      },
      "static": {
        "pidReadResourceUsage": {
          "value": function () { return this.pid_read_resource_usage.apply(this, arguments); }
        },
        "setClientType": {
          "value": function () { return this.set_client_type.apply(this, arguments); }
        },
        "setDefaultIconSize": {
          "value": function () { return this.set_default_icon_size.apply(this, arguments); }
        },
        "setDefaultMiniIconSize": {
          "value": function () { return this.set_default_mini_icon_size.apply(this, arguments); }
        },
        "xidReadResourceUsage": {
          "value": function () { return this.xid_read_resource_usage.apply(this, arguments); }
        }
      }
    },
    "Xkl": {
      "class": {
        "ConfigItem": {
          "prototype": {
            "getDescription": {
              "value": function () { return this.get_description.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "getShortDescription": {
              "value": function () { return this.get_short_description.apply(this, arguments); }
            },
            "setDescription": {
              "value": function () { return this.set_description.apply(this, arguments); }
            },
            "setName": {
              "value": function () { return this.set_name.apply(this, arguments); }
            },
            "setShortDescription": {
              "value": function () { return this.set_short_description.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "ConfigRec": {
          "prototype": {
            "getFromBackup": {
              "value": function () { return this.get_from_backup.apply(this, arguments); }
            },
            "getFromRootWindowProperty": {
              "value": function () { return this.get_from_root_window_property.apply(this, arguments); }
            },
            "getFromServer": {
              "value": function () { return this.get_from_server.apply(this, arguments); }
            },
            "setLayouts": {
              "value": function () { return this.set_layouts.apply(this, arguments); }
            },
            "setModel": {
              "value": function () { return this.set_model.apply(this, arguments); }
            },
            "setOptions": {
              "value": function () { return this.set_options.apply(this, arguments); }
            },
            "setToRootWindowProperty": {
              "value": function () { return this.set_to_root_window_property.apply(this, arguments); }
            },
            "setVariants": {
              "value": function () { return this.set_variants.apply(this, arguments); }
            }
          },
          "static": {
            "writeToFile": {
              "value": function () { return this.write_to_file.apply(this, arguments); }
            }
          }
        },
        "ConfigRegistry": {
          "prototype": {
            "findLayout": {
              "value": function () { return this.find_layout.apply(this, arguments); }
            },
            "findModel": {
              "value": function () { return this.find_model.apply(this, arguments); }
            },
            "findOption": {
              "value": function () { return this.find_option.apply(this, arguments); }
            },
            "findOptionGroup": {
              "value": function () { return this.find_option_group.apply(this, arguments); }
            },
            "findVariant": {
              "value": function () { return this.find_variant.apply(this, arguments); }
            },
            "foreachCountry": {
              "value": function () { return this.foreach_country.apply(this, arguments); }
            },
            "foreachCountryVariant": {
              "value": function () { return this.foreach_country_variant.apply(this, arguments); }
            },
            "foreachLanguage": {
              "value": function () { return this.foreach_language.apply(this, arguments); }
            },
            "foreachLanguageVariant": {
              "value": function () { return this.foreach_language_variant.apply(this, arguments); }
            },
            "foreachLayout": {
              "value": function () { return this.foreach_layout.apply(this, arguments); }
            },
            "foreachLayoutVariant": {
              "value": function () { return this.foreach_layout_variant.apply(this, arguments); }
            },
            "foreachModel": {
              "value": function () { return this.foreach_model.apply(this, arguments); }
            },
            "foreachOption": {
              "value": function () { return this.foreach_option.apply(this, arguments); }
            },
            "foreachOptionGroup": {
              "value": function () { return this.foreach_option_group.apply(this, arguments); }
            },
            "searchByPattern": {
              "value": function () { return this.search_by_pattern.apply(this, arguments); }
            }
          },
          "static": {
            "getInstance": {
              "value": function () { return this.get_instance.apply(this, arguments); }
            }
          }
        },
        "Engine": {
          "prototype": {
            "allowOneSwitchToSecondaryGroup": {
              "value": function () { return this.allow_one_switch_to_secondary_group.apply(this, arguments); }
            },
            "backupNamesProp": {
              "value": function () { return this.backup_names_prop.apply(this, arguments); }
            },
            "deleteState": {
              "value": function () { return this.delete_state.apply(this, arguments); }
            },
            "filterEvents": {
              "value": function () { return this.filter_events.apply(this, arguments); }
            },
            "getBackendName": {
              "value": function () { return this.get_backend_name.apply(this, arguments); }
            },
            "getCurrentState": {
              "value": function () { return this.get_current_state.apply(this, arguments); }
            },
            "getCurrentWindow": {
              "value": function () { return this.get_current_window.apply(this, arguments); }
            },
            "getCurrentWindowGroup": {
              "value": function () { return this.get_current_window_group.apply(this, arguments); }
            },
            "getDefaultGroup": {
              "value": function () { return this.get_default_group.apply(this, arguments); }
            },
            "getFeatures": {
              "value": function () { return this.get_features.apply(this, arguments); }
            },
            "getGroupsNames": {
              "value": function () { return this.get_groups_names.apply(this, arguments); }
            },
            "getIndicatorsHandling": {
              "value": function () { return this.get_indicators_handling.apply(this, arguments); }
            },
            "getIndicatorsNames": {
              "value": function () { return this.get_indicators_names.apply(this, arguments); }
            },
            "getMaxNumGroups": {
              "value": function () { return this.get_max_num_groups.apply(this, arguments); }
            },
            "getNextGroup": {
              "value": function () { return this.get_next_group.apply(this, arguments); }
            },
            "getNumGroups": {
              "value": function () { return this.get_num_groups.apply(this, arguments); }
            },
            "getPrevGroup": {
              "value": function () { return this.get_prev_group.apply(this, arguments); }
            },
            "getSecondaryGroupsMask": {
              "value": function () { return this.get_secondary_groups_mask.apply(this, arguments); }
            },
            "getState": {
              "value": function () { return this.get_state.apply(this, arguments); }
            },
            "getWindowTitle": {
              "value": function () { return this.get_window_title.apply(this, arguments); }
            },
            "grabKey": {
              "value": function () { return this.grab_key.apply(this, arguments); }
            },
            "isGroupPerToplevelWindow": {
              "value": function () { return this.is_group_per_toplevel_window.apply(this, arguments); }
            },
            "isWindowFromSameToplevelWindow": {
              "value": function () { return this.is_window_from_same_toplevel_window.apply(this, arguments); }
            },
            "isWindowTransparent": {
              "value": function () { return this.is_window_transparent.apply(this, arguments); }
            },
            "lockGroup": {
              "value": function () { return this.lock_group.apply(this, arguments); }
            },
            "pauseListen": {
              "value": function () { return this.pause_listen.apply(this, arguments); }
            },
            "resumeListen": {
              "value": function () { return this.resume_listen.apply(this, arguments); }
            },
            "saveState": {
              "value": function () { return this.save_state.apply(this, arguments); }
            },
            "setDefaultGroup": {
              "value": function () { return this.set_default_group.apply(this, arguments); }
            },
            "setGroupPerToplevelWindow": {
              "value": function () { return this.set_group_per_toplevel_window.apply(this, arguments); }
            },
            "setIndicatorsHandling": {
              "value": function () { return this.set_indicators_handling.apply(this, arguments); }
            },
            "setSecondaryGroupsMask": {
              "value": function () { return this.set_secondary_groups_mask.apply(this, arguments); }
            },
            "setWindowTransparent": {
              "value": function () { return this.set_window_transparent.apply(this, arguments); }
            },
            "startListen": {
              "value": function () { return this.start_listen.apply(this, arguments); }
            },
            "stopListen": {
              "value": function () { return this.stop_listen.apply(this, arguments); }
            },
            "ungrabKey": {
              "value": function () { return this.ungrab_key.apply(this, arguments); }
            },
            "defaultGroup": {
              "get": function () { return this.default_group; },
              "set": function (value) { this.default_group = value; }
            },
            "indicatorsHandling": {
              "get": function () { return this.indicators_handling; },
              "set": function (value) { this.indicators_handling = value; }
            },
            "maxNumGroups": {
              "get": function () { return this.max_num_groups; },
              "set": function (value) { this.max_num_groups = value; }
            },
            "numGroups": {
              "get": function () { return this.num_groups; },
              "set": function (value) { this.num_groups = value; }
            },
            "secondaryGroupsMask": {
              "get": function () { return this.secondary_groups_mask; },
              "set": function (value) { this.secondary_groups_mask = value; }
            }
          },
          "static": {
            "getInstance": {
              "value": function () { return this.get_instance.apply(this, arguments); }
            }
          }
        }
      },
      "static": {
        "defaultLogAppender": {
          "value": function () { return this.default_log_appender.apply(this, arguments); }
        },
        "getCountryName": {
          "value": function () { return this.get_country_name.apply(this, arguments); }
        },
        "getLanguageName": {
          "value": function () { return this.get_language_name.apply(this, arguments); }
        },
        "getLastError": {
          "value": function () { return this.get_last_error.apply(this, arguments); }
        },
        "restoreNamesProp": {
          "value": function () { return this.restore_names_prop.apply(this, arguments); }
        },
        "setDebugLevel": {
          "value": function () { return this.set_debug_level.apply(this, arguments); }
        },
        "setLogAppender": {
          "value": function () { return this.set_log_appender.apply(this, arguments); }
        }
      }
    },
    "Zeitgeist": {
      "class": {
        "DataSource": {
          "prototype": {
            "toVariant": {
              "value": function () { return this.to_variant.apply(this, arguments); }
            },
            "getUniqueId": {
              "value": function () { return this.get_unique_id.apply(this, arguments); }
            },
            "setUniqueId": {
              "value": function () { return this.set_unique_id.apply(this, arguments); }
            },
            "getName": {
              "value": function () { return this.get_name.apply(this, arguments); }
            },
            "setName": {
              "value": function () { return this.set_name.apply(this, arguments); }
            },
            "getDescription": {
              "value": function () { return this.get_description.apply(this, arguments); }
            },
            "setDescription": {
              "value": function () { return this.set_description.apply(this, arguments); }
            },
            "getEventTemplates": {
              "value": function () { return this.get_event_templates.apply(this, arguments); }
            },
            "setEventTemplates": {
              "value": function () { return this.set_event_templates.apply(this, arguments); }
            },
            "getEnabled": {
              "value": function () { return this.get_enabled.apply(this, arguments); }
            },
            "setEnabled": {
              "value": function () { return this.set_enabled.apply(this, arguments); }
            },
            "getRunning": {
              "value": function () { return this.get_running.apply(this, arguments); }
            },
            "setRunning": {
              "value": function () { return this.set_running.apply(this, arguments); }
            },
            "getTimestamp": {
              "value": function () { return this.get_timestamp.apply(this, arguments); }
            },
            "setTimestamp": {
              "value": function () { return this.set_timestamp.apply(this, arguments); }
            },
            "uniqueId": {
              "get": function () { return this.unique_id; },
              "set": function (value) { this.unique_id = value; }
            },
            "eventTemplates": {
              "get": function () { return this.event_templates; },
              "set": function (value) { this.event_templates = value; }
            }
          },
          "static": {}
        },
        "DataSourceRegistry": {
          "prototype": {
            "getDataSources": {
              "value": function () { return this.get_data_sources.apply(this, arguments); }
            },
            "getDataSourcesFinish": {
              "value": function () { return this.get_data_sources_finish.apply(this, arguments); }
            },
            "getDataSourceFromId": {
              "value": function () { return this.get_data_source_from_id.apply(this, arguments); }
            },
            "getDataSourceFromIdFinish": {
              "value": function () { return this.get_data_source_from_id_finish.apply(this, arguments); }
            },
            "registerDataSource": {
              "value": function () { return this.register_data_source.apply(this, arguments); }
            },
            "registerDataSourceFinish": {
              "value": function () { return this.register_data_source_finish.apply(this, arguments); }
            },
            "setDataSourceEnabled": {
              "value": function () { return this.set_data_source_enabled.apply(this, arguments); }
            },
            "setDataSourceEnabledFinish": {
              "value": function () { return this.set_data_source_enabled_finish.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Event": {
          "prototype": {
            "getSubject": {
              "value": function () { return this.get_subject.apply(this, arguments); }
            },
            "numSubjects": {
              "value": function () { return this.num_subjects.apply(this, arguments); }
            },
            "addSubject": {
              "value": function () { return this.add_subject.apply(this, arguments); }
            },
            "takeSubject": {
              "value": function () { return this.take_subject.apply(this, arguments); }
            },
            "setActorFromAppInfo": {
              "value": function () { return this.set_actor_from_app_info.apply(this, arguments); }
            },
            "toVariant": {
              "value": function () { return this.to_variant.apply(this, arguments); }
            },
            "debugPrint": {
              "value": function () { return this.debug_print.apply(this, arguments); }
            },
            "matchesTemplate": {
              "value": function () { return this.matches_template.apply(this, arguments); }
            },
            "getId": {
              "value": function () { return this.get_id.apply(this, arguments); }
            },
            "setId": {
              "value": function () { return this.set_id.apply(this, arguments); }
            },
            "getTimestamp": {
              "value": function () { return this.get_timestamp.apply(this, arguments); }
            },
            "setTimestamp": {
              "value": function () { return this.set_timestamp.apply(this, arguments); }
            },
            "getOrigin": {
              "value": function () { return this.get_origin.apply(this, arguments); }
            },
            "setOrigin": {
              "value": function () { return this.set_origin.apply(this, arguments); }
            },
            "getActor": {
              "value": function () { return this.get_actor.apply(this, arguments); }
            },
            "setActor": {
              "value": function () { return this.set_actor.apply(this, arguments); }
            },
            "getInterpretation": {
              "value": function () { return this.get_interpretation.apply(this, arguments); }
            },
            "setInterpretation": {
              "value": function () { return this.set_interpretation.apply(this, arguments); }
            },
            "getManifestation": {
              "value": function () { return this.get_manifestation.apply(this, arguments); }
            },
            "setManifestation": {
              "value": function () { return this.set_manifestation.apply(this, arguments); }
            },
            "getSubjects": {
              "value": function () { return this.get_subjects.apply(this, arguments); }
            },
            "setSubjects": {
              "value": function () { return this.set_subjects.apply(this, arguments); }
            },
            "getPayload": {
              "value": function () { return this.get_payload.apply(this, arguments); }
            },
            "setPayload": {
              "value": function () { return this.set_payload.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Index": {
          "prototype": {
            "searchFinish": {
              "value": function () { return this.search_finish.apply(this, arguments); }
            },
            "searchWithRelevancies": {
              "value": function () { return this.search_with_relevancies.apply(this, arguments); }
            },
            "searchWithRelevanciesFinish": {
              "value": function () { return this.search_with_relevancies_finish.apply(this, arguments); }
            }
          },
          "static": {}
        },
        "Log": {
          "prototype": {
            "insertEvent": {
              "value": function () { return this.insert_event.apply(this, arguments); }
            },
            "insertEventFinish": {
              "value": function () { return this.insert_event_finish.apply(this, arguments); }
            },
            "insertEvents": {
              "value": function () { return this.insert_events.apply(this, arguments); }
            },
            "insertEventsFinish": {
              "value": function () { return this.insert_events_finish.apply(this, arguments); }
            },
            "insertEventNoReply": {
              "value": function () { return this.insert_event_no_reply.apply(this, arguments); }
            },
            "insertEventsNoReply": {
              "value": function () { return this.insert_events_no_reply.apply(this, arguments); }
            },
            "findEvents": {
              "value": function () { return this.find_events.apply(this, arguments); }
            },
            "findEventsFinish": {
              "value": function () { return this.find_events_finish.apply(this, arguments); }
            },
            "findEventIds": {
              "value": function () { return this.find_event_ids.apply(this, arguments); }
            },
            "findEventIdsFinish": {
              "value": function () { return this.find_event_ids_finish.apply(this, arguments); }
            },
            "getEvents": {
              "value": function () { return this.get_events.apply(this, arguments); }
            },
            "getEventsFinish": {
              "value": function () { return this.get_events_finish.apply(this, arguments); }
            },
            "findRelatedUris": {
              "value": function () { return this.find_related_uris.apply(this, arguments); }
            },
            "findRelatedUrisFinish": {
              "value": function () { return this.find_related_uris_finish.apply(this, arguments); }
            },
            "deleteEvents": {
              "value": function () { return this.delete_events.apply(this, arguments); }
            },
            "deleteEventsFinish": {
              "value": function () { return this.delete_events_finish.apply(this, arguments); }
            },
            "quitFinish": {
              "value": function () { return this.quit_finish.apply(this, arguments); }
            },
            "installMonitor": {
              "value": function () { return this.install_monitor.apply(this, arguments); }
            },
            "removeMonitor": {
              "value": function () { return this.remove_monitor.apply(this, arguments); }
            },
            "getVersion": {
              "value": function () { return this.get_version.apply(this, arguments); }
            },
            "getExtensions": {
              "value": function () { return this.get_extensions.apply(this, arguments); }
            }
          },
          "static": {
            "getDefault": {
              "value": function () { return this.get_default.apply(this, arguments); }
            }
          }
        },
        "Monitor": {
          "prototype": {
            "getTemplates": {
              "value": function () { return this.get_templates.apply(this, arguments); }
            },
            "getPath": {
              "value": function () { return this.get_path.apply(this, arguments); }
            },
            "getTimeRange": {
              "value": function () { return this.get_time_range.apply(this, arguments); }
            },
            "setTimeRange": {
              "value": function () { return this.set_time_range.apply(this, arguments); }
            },
            "getEventTemplates": {
              "value": function () { return this.get_event_templates.apply(this, arguments); }
            },
            "setEventTemplates": {
              "value": function () { return this.set_event_templates.apply(this, arguments); }
            },
            "timeRange": {
              "get": function () { return this.time_range; },
              "set": function (value) { this.time_range = value; }
            },
            "eventTemplates": {
              "get": function () { return this.event_templates; },
              "set": function (value) { this.event_templates = value; }
            }
          },
          "static": {}
        },
        "QueuedProxyWrapper": {
          "prototype": {
            "proxyAcquired": {
              "value": function () { return this.proxy_acquired.apply(this, arguments); }
            },
            "proxyUnavailable": {
              "value": function () { return this.proxy_unavailable.apply(this, arguments); }
            },
            "processQueuedMethods": {
              "value": function () { return this.process_queued_methods.apply(this, arguments); }
            },
            "nameOwnerChanged": {
              "value": function () { return this.name_owner_changed.apply(this, arguments); }
            },
            "onConnectionEstablished": {
              "value": function () { return this.on_connection_established.apply(this, arguments); }
            },
            "onConnectionLost": {
              "value": function () { return this.on_connection_lost.apply(this, arguments); }
            },
            "waitForProxy": {
              "value": function () { return this.wait_for_proxy.apply(this, arguments); }
            },
            "waitForProxyFinish": {
              "value": function () { return this.wait_for_proxy_finish.apply(this, arguments); }
            },
            "getProxyCreated": {
              "value": function () { return this.get_proxy_created.apply(this, arguments); }
            },
            "getIsConnected": {
              "value": function () { return this.get_is_connected.apply(this, arguments); }
            },
            "proxyCreated": {
              "get": function () { return this.proxy_created; },
              "set": function (value) { this.proxy_created = value; }
            },
            "isConnected": {
              "get": function () { return this.is_connected; },
              "set": function (value) { this.is_connected = value; }
            }
          },
          "static": {}
        },
        "SimpleResultSet": {
          "prototype": {},
          "static": {}
        },
        "Subject": {
          "prototype": {
            "toVariant": {
              "value": function () { return this.to_variant.apply(this, arguments); }
            },
            "matchesTemplate": {
              "value": function () { return this.matches_template.apply(this, arguments); }
            },
            "getUri": {
              "value": function () { return this.get_uri.apply(this, arguments); }
            },
            "setUri": {
              "value": function () { return this.set_uri.apply(this, arguments); }
            },
            "getOrigin": {
              "value": function () { return this.get_origin.apply(this, arguments); }
            },
            "setOrigin": {
              "value": function () { return this.set_origin.apply(this, arguments); }
            },
            "getText": {
              "value": function () { return this.get_text.apply(this, arguments); }
            },
            "setText": {
              "value": function () { return this.set_text.apply(this, arguments); }
            },
            "getStorage": {
              "value": function () { return this.get_storage.apply(this, arguments); }
            },
            "setStorage": {
              "value": function () { return this.set_storage.apply(this, arguments); }
            },
            "getCurrentUri": {
              "value": function () { return this.get_current_uri.apply(this, arguments); }
            },
            "setCurrentUri": {
              "value": function () { return this.set_current_uri.apply(this, arguments); }
            },
            "getCurrentOrigin": {
              "value": function () { return this.get_current_origin.apply(this, arguments); }
            },
            "setCurrentOrigin": {
              "value": function () { return this.set_current_origin.apply(this, arguments); }
            },
            "getMimetype": {
              "value": function () { return this.get_mimetype.apply(this, arguments); }
            },
            "setMimetype": {
              "value": function () { return this.set_mimetype.apply(this, arguments); }
            },
            "getInterpretation": {
              "value": function () { return this.get_interpretation.apply(this, arguments); }
            },
            "setInterpretation": {
              "value": function () { return this.set_interpretation.apply(this, arguments); }
            },
            "getManifestation": {
              "value": function () { return this.get_manifestation.apply(this, arguments); }
            },
            "setManifestation": {
              "value": function () { return this.set_manifestation.apply(this, arguments); }
            },
            "currentUri": {
              "get": function () { return this.current_uri; },
              "set": function (value) { this.current_uri = value; }
            },
            "currentOrigin": {
              "get": function () { return this.current_origin; },
              "set": function (value) { this.current_origin = value; }
            }
          },
          "static": {}
        },
        "TimeRange": {
          "prototype": {
            "toVariant": {
              "value": function () { return this.to_variant.apply(this, arguments); }
            },
            "getStart": {
              "value": function () { return this.get_start.apply(this, arguments); }
            },
            "getEnd": {
              "value": function () { return this.get_end.apply(this, arguments); }
            }
          },
          "static": {}
        }
      },
      "static": {
        "dataSourcesFromVariant": {
          "value": function () { return this.data_sources_from_variant.apply(this, arguments); }
        },
        "dataSourcesToVariant": {
          "value": function () { return this.data_sources_to_variant.apply(this, arguments); }
        },
        "eventsFromVariant": {
          "value": function () { return this.events_from_variant.apply(this, arguments); }
        },
        "eventsToVariant": {
          "value": function () { return this.events_to_variant.apply(this, arguments); }
        },
        "eventsToVariantWithLimit": {
          "value": function () { return this.events_to_variant_with_limit.apply(this, arguments); }
        },
        "interpretationForMimetype": {
          "value": function () { return this.interpretation_for_mimetype.apply(this, arguments); }
        },
        "manifestationForUri": {
          "value": function () { return this.manifestation_for_uri.apply(this, arguments); }
        },
        "registerMimetype": {
          "value": function () { return this.register_mimetype.apply(this, arguments); }
        },
        "registerMimetypeRegex": {
          "value": function () { return this.register_mimetype_regex.apply(this, arguments); }
        },
        "registerUriScheme": {
          "value": function () { return this.register_uri_scheme.apply(this, arguments); }
        },
        "resultTypeIsSortOrderAsc": {
          "value": function () { return this.result_type_is_sort_order_asc.apply(this, arguments); }
        },
        "symbolGetAllChildren": {
          "value": function () { return this.symbol_get_all_children.apply(this, arguments); }
        },
        "symbolGetAllParents": {
          "value": function () { return this.symbol_get_all_parents.apply(this, arguments); }
        },
        "symbolGetChildren": {
          "value": function () { return this.symbol_get_children.apply(this, arguments); }
        },
        "symbolGetDescription": {
          "value": function () { return this.symbol_get_description.apply(this, arguments); }
        },
        "symbolGetDisplayName": {
          "value": function () { return this.symbol_get_display_name.apply(this, arguments); }
        },
        "symbolGetParents": {
          "value": function () { return this.symbol_get_parents.apply(this, arguments); }
        },
        "symbolIsA": {
          "value": function () { return this.symbol_is_a.apply(this, arguments); }
        },
        "timestampFromDate": {
          "value": function () { return this.timestamp_from_date.apply(this, arguments); }
        },
        "timestampFromDmy": {
          "value": function () { return this.timestamp_from_dmy.apply(this, arguments); }
        },
        "timestampFromIso8601": {
          "value": function () { return this.timestamp_from_iso8601.apply(this, arguments); }
        },
        "timestampFromNow": {
          "value": function () { return this.timestamp_from_now.apply(this, arguments); }
        },
        "timestampFromTimeval": {
          "value": function () { return this.timestamp_from_timeval.apply(this, arguments); }
        },
        "timestampNextMidnight": {
          "value": function () { return this.timestamp_next_midnight.apply(this, arguments); }
        },
        "timestampPrevMidnight": {
          "value": function () { return this.timestamp_prev_midnight.apply(this, arguments); }
        },
        "timestampToDate": {
          "value": function () { return this.timestamp_to_date.apply(this, arguments); }
        },
        "timestampToIso8601": {
          "value": function () { return this.timestamp_to_iso8601.apply(this, arguments); }
        },
        "timestampToTimeval": {
          "value": function () { return this.timestamp_to_timeval.apply(this, arguments); }
        },
        "utilsBackupDatabase": {
          "value": function () { return this.utils_backup_database.apply(this, arguments); }
        },
        "utilsGetDataPath": {
          "value": function () { return this.utils_get_data_path.apply(this, arguments); }
        },
        "utilsGetDatabaseFileBackupPath": {
          "value": function () { return this.utils_get_database_file_backup_path.apply(this, arguments); }
        },
        "utilsGetDatabaseFilePath": {
          "value": function () { return this.utils_get_database_file_path.apply(this, arguments); }
        },
        "utilsGetDatabaseFileRetireName": {
          "value": function () { return this.utils_get_database_file_retire_name.apply(this, arguments); }
        },
        "utilsGetDefaultDataPath": {
          "value": function () { return this.utils_get_default_data_path.apply(this, arguments); }
        },
        "utilsGetLocalExtensionsPath": {
          "value": function () { return this.utils_get_local_extensions_path.apply(this, arguments); }
        },
        "utilsIsEmptyString": {
          "value": function () { return this.utils_is_empty_string.apply(this, arguments); }
        },
        "utilsLogMayReadDirectly": {
          "value": function () { return this.utils_log_may_read_directly.apply(this, arguments); }
        },
        "utilsParseNegation": {
          "value": function () { return this.utils_parse_negation.apply(this, arguments); }
        },
        "utilsParseNoexpand": {
          "value": function () { return this.utils_parse_noexpand.apply(this, arguments); }
        },
        "utilsParseWildcard": {
          "value": function () { return this.utils_parse_wildcard.apply(this, arguments); }
        },
        "utilsSetDatabaseFilePath": {
          "value": function () { return this.utils_set_database_file_path.apply(this, arguments); }
        },
        "utilsUsingInMemoryDatabase": {
          "value": function () { return this.utils_using_in_memory_database.apply(this, arguments); }
        }
      }
    },
    "cairo": {
      "class": {},
      "static": {
        "imageSurfaceCreate": {
          "value": function () { return this.image_surface_create.apply(this, arguments); }
        }
      }
    },
    "fontconfig": {
      "class": {},
      "static": {}
    },
    "freetype2": {
      "class": {},
      "static": {
        "libraryVersion": {
          "value": function () { return this.library_version.apply(this, arguments); }
        }
      }
    },
    "libxml2": {
      "class": {},
      "static": {}
    },
    "win32": {
      "class": {},
      "static": {}
    },
    "xfixes": {
      "class": {},
      "static": {}
    },
    "xft": {
      "class": {},
      "static": {}
    },
    "xlib": {
      "class": {},
      "static": {
        "openDisplay": {
          "value": function () { return this.open_display.apply(this, arguments); }
        }
      }
    },
    "xrandr": {
      "class": {},
      "static": {}
    }
  }
));